BOOL DODMLASRSchemaDODMLASRAudioFileResultReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  SISchemaUUID *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v18, a2) & 1) == 0)
        {
LABEL_36:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v18, 0, 0);
        goto LABEL_31;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v18, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAsrId:", v18, 0, 0);
LABEL_31:

        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_33:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(DODMLASRSchemaDODMLASRDecodingResult);
    if (!PBReaderPlaceMark() || !DODMLASRSchemaDODMLASRDecodingResultReadFrom(v18, a2))
      goto LABEL_36;
    PBReaderRecallMark();
    if (v18)
      objc_msgSend(a1, "addDecodingResults:", v18, 0, 0);
    goto LABEL_31;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t DODMLASRSchemaDODMLASRAudioFileResultTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  ASRSchemaASRRecognitionResultTier1 *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(ASRSchemaASRRecognitionResultTier1);
        if (!PBReaderPlaceMark() || !ASRSchemaASRRecognitionResultTier1ReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setRecognitionResult:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t DODMLASRSchemaDODMLASRChoiceInfoReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v17;
  int v18;
  unint64_t v20;
  DODMLASRSchemaDODMLASRTokenInfo *v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v6))
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)(a2 + v12);
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        if (v10++ >= 9)
        {
          v11 = 0;
          v17 = *v6;
          v18 = *(unsigned __int8 *)(a2 + v17);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
      v17 = *v6;
      v18 = *(unsigned __int8 *)(a2 + v17);
      if (*(_BYTE *)(a2 + v17))
        v11 = 0;
LABEL_14:
      if (v18 || (v11 & 7) == 4)
        break;
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        v23 = *v4;
        v24 = *(_QWORD *)(a2 + v23);
        if (v24 <= 0xFFFFFFFFFFFFFFFBLL && v24 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v24);
          *(_QWORD *)(a2 + v23) = v24 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setAcousticCost:", a3, v28, v29);
      }
      else if ((_DWORD)v20 == 2)
      {
        v25 = *v4;
        v26 = *(_QWORD *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFFBLL && v26 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v26);
          *(_QWORD *)(a2 + v25) = v26 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setGraphCost:", a3, v28, v29);
      }
      else if ((_DWORD)v20 == 1)
      {
        v21 = objc_alloc_init(DODMLASRSchemaDODMLASRTokenInfo);
        v28 = 0;
        v29 = 0;
        if (!PBReaderPlaceMark() || !DODMLASRSchemaDODMLASRTokenInfoReadFrom(v21, a2, v22))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v21)
          objc_msgSend(a1, "addTokens:", v21, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5));
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

uint64_t DODMLASRSchemaDODMLASRConfusionPairReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = objc_alloc_init(SISchemaUUID);
          if (PBReaderPlaceMark() && (SISchemaUUIDReadFrom(v17, a2) & 1) != 0)
          {
            PBReaderRecallMark();
            objc_msgSend(a1, "setAsrId:", v17, 0, 0);

            continue;
          }

          return 0;
        case 2u:
          v19 = 0;
          v20 = 0;
          v21 = 0;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              goto LABEL_53;
            v19 += 7;
            v14 = v20++ >= 9;
            if (v14)
            {
              v25 = 0;
              goto LABEL_56;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
          if (*(_BYTE *)(a2 + *v5))
            v25 = 0;
          else
            v25 = v21;
LABEL_56:
          objc_msgSend(a1, "setErrorCode:", v25);
          continue;
        case 3u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  v32 = 0;
                  goto LABEL_61;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v32 = 0;
          else
            v32 = v28;
LABEL_61:
          objc_msgSend(a1, "setEditMethod:", v32);
          continue;
        case 4u:
          v33 = 0;
          v34 = 0;
          v35 = 0;
          while (2)
          {
            v36 = *v3;
            v37 = *(_QWORD *)(a2 + v36);
            if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
              *(_QWORD *)(a2 + v36) = v37 + 1;
              v35 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                v14 = v34++ >= 9;
                if (v14)
                {
                  v39 = 0;
                  goto LABEL_66;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v39 = 0;
          else
            v39 = v35;
LABEL_66:
          objc_msgSend(a1, "setEditReason:", v39);
          continue;
        case 5u:
          v40 = 0;
          v41 = 0;
          v42 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v43 = *v3;
        v44 = *(_QWORD *)(a2 + v43);
        if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
          break;
        v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
        *(_QWORD *)(a2 + v43) = v44 + 1;
        v42 |= (unint64_t)(v45 & 0x7F) << v40;
        if ((v45 & 0x80) == 0)
          goto LABEL_68;
        v40 += 7;
        v14 = v41++ >= 9;
        if (v14)
        {
          v46 = 0;
          goto LABEL_71;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_68:
      v46 = *(_BYTE *)(a2 + *v5) ? 0 : v42;
LABEL_71:
      objc_msgSend(a1, "setRecognizedTextStartIndex:", v46);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL DODMLASRSchemaDODMLASRConfusionPairTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          if (v17)
            objc_msgSend(a1, "addRecognizedTokens:", v17);
          goto LABEL_27;
        case 2u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          if (v17)
            objc_msgSend(a1, "addCorrectedTokens:", v17);
          goto LABEL_27;
        case 3u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setLeftContextToken:", v17);
          goto LABEL_27;
        case 4u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setRightContextToken:", v17);
LABEL_27:

          goto LABEL_28;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_28:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t DODMLASRSchemaDODMLASRDecodingMetricsReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  ASRSchemaASRInterpolationWeightBundle *v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v6) == 0;
  v8 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v6))
      return *(_BYTE *)(a2 + *v6) == 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *v4;
      v13 = *(_QWORD *)(a2 + v12);
      v14 = v13 + 1;
      if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
        break;
      v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
      *(_QWORD *)(a2 + v12) = v14;
      v11 |= (unint64_t)(v15 & 0x7F) << v9;
      if ((v15 & 0x80) == 0)
        goto LABEL_12;
      v9 += 7;
      v16 = v10++ >= 9;
      if (v16)
      {
        v11 = 0;
        v17 = *v6;
        v18 = *(unsigned __int8 *)(a2 + v17);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
    v17 = *v6;
    v18 = *(unsigned __int8 *)(a2 + v17);
    if (*(_BYTE *)(a2 + v17))
      v11 = 0;
LABEL_14:
    if (v18 || (v11 & 7) == 4)
      return *(_BYTE *)(a2 + *v6) == 0;
    switch((v11 >> 3))
    {
      case 1u:
        v20 = *v4;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setWallRealTimeFactor:", a3, v43, v44);
        goto LABEL_68;
      case 2u:
        v23 = objc_alloc_init(ASRSchemaASRInterpolationWeightBundle);
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark()
          || !ASRSchemaASRInterpolationWeightBundleReadFrom(v23, a2, v24))
        {
          goto LABEL_70;
        }
        PBReaderRecallMark();
        if (v23)
          objc_msgSend(a1, "addLanguageModelInterpolationWeights:", v23, 0, 0);
        goto LABEL_53;
      case 3u:
        v25 = *v4;
        v26 = *(_QWORD *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFFBLL && v26 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v26);
          *(_QWORD *)(a2 + v25) = v26 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setAverageActiveTokensPerFrame:", a3, v43, v44);
        goto LABEL_68;
      case 4u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        while (2)
        {
          v30 = *v4;
          v31 = *(_QWORD *)(a2 + v30);
          v32 = v31 + 1;
          if (v31 == -1 || v32 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v31);
            *(_QWORD *)(a2 + v30) = v32;
            v29 |= (unint64_t)(v33 & 0x7F) << v27;
            if (v33 < 0)
            {
              v27 += 7;
              v16 = v28++ >= 9;
              if (v16)
              {
                v34 = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v34 = 0;
        else
          v34 = v29;
LABEL_58:
        objc_msgSend(a1, "setJitQueryDurationInMs:", v34, v43, v44);
        goto LABEL_68;
      case 5u:
        v35 = 0;
        v36 = 0;
        v37 = 0;
        while (2)
        {
          v38 = *v4;
          v39 = *(_QWORD *)(a2 + v38);
          v40 = v39 + 1;
          if (v39 == -1 || v40 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v39);
            *(_QWORD *)(a2 + v38) = v40;
            v37 |= (unint64_t)(v41 & 0x7F) << v35;
            if (v41 < 0)
            {
              v35 += 7;
              v16 = v36++ >= 9;
              if (v16)
              {
                v42 = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v42 = 0;
        else
          v42 = v37;
LABEL_63:
        objc_msgSend(a1, "setJitLanguageModelEnrollmentDurationInMs:", v42, v43, v44);
        goto LABEL_68;
      case 6u:
        v23 = objc_alloc_init(DODMLASRSchemaDODMLASREntityCategoryCount);
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark()
          || !DODMLASRSchemaDODMLASREntityCategoryCountReadFrom(v23, a2))
        {
          goto LABEL_70;
        }
        PBReaderRecallMark();
        if (v23)
          objc_msgSend(a1, "addPreprocessingEntityCategoryCounts:", v23, 0, 0);
        goto LABEL_53;
      case 7u:
        v23 = objc_alloc_init(DODMLASRSchemaDODMLASREntityCategoryCount);
        v43 = 0;
        v44 = 0;
        if (PBReaderPlaceMark()
          && DODMLASRSchemaDODMLASREntityCategoryCountReadFrom(v23, a2))
        {
          PBReaderRecallMark();
          if (v23)
            objc_msgSend(a1, "addPostprocessingEntityCategoryCounts:", v23, 0, 0);
LABEL_53:

LABEL_68:
          if (*(_QWORD *)(a2 + *v4) >= *(_QWORD *)(a2 + *v5))
            return *(_BYTE *)(a2 + *v6) == 0;
          continue;
        }
LABEL_70:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_68;
    }
  }
}

uint64_t DODMLASRSchemaDODMLASRDecodingResultReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  ASRSchemaASRToken *v17;
  uint64_t result;
  double v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (ASRSchemaASRToken *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setConfigName:", v17);
        goto LABEL_44;
      case 2u:
        v17 = objc_alloc_init(ASRSchemaASRToken);
        v27 = 0;
        v28 = 0;
        if (!PBReaderPlaceMark() || !ASRSchemaASRTokenReadFrom(v17, a2))
          goto LABEL_53;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addTokens:", v17, 0, 0);
        goto LABEL_44;
      case 3u:
        v17 = objc_alloc_init(DODMLASRSchemaDODMLASRUtteranceInfo);
        v27 = 0;
        v28 = 0;
        if (!PBReaderPlaceMark() || !DODMLASRSchemaDODMLASRUtteranceInfoReadFrom(v17, a2))
          goto LABEL_53;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addUtterances:", v17, 0, 0);
        goto LABEL_44;
      case 4u:
        v17 = objc_alloc_init(DODMLASRSchemaDODMLASRDecodingMetrics);
        v27 = 0;
        v28 = 0;
        if (!PBReaderPlaceMark()
          || (DODMLASRSchemaDODMLASRDecodingMetricsReadFrom(v17, a2, v19) & 1) == 0)
        {
          goto LABEL_53;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setDecodingMetrics:", v17);
        goto LABEL_44;
      case 5u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (v14)
              {
                v26 = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v26 = 0;
        else
          v26 = v22;
LABEL_51:
        objc_msgSend(a1, "setDecodeDurationInNs:", v26, v27, v28);
        goto LABEL_45;
      case 6u:
        v17 = objc_alloc_init(DODMLASRSchemaDODMLASRAlignmentInfo);
        v27 = 0;
        v28 = 0;
        if (PBReaderPlaceMark() && DODMLASRSchemaDODMLASRAlignmentInfoReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addAlignments:", v17, 0, 0);
LABEL_44:

LABEL_45:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_53:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_45;
    }
  }
}

uint64_t DODMLASRSchemaDODMLASREntityCategoryCountReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setEntityCategory:", v24);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_34;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_34:
        objc_msgSend(a1, "setCount:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t DODMLASRSchemaDODMLASREvaluationMetricsReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  DODMLASRSchemaDODMLASRLanguageModelMetrics *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v6) == 0;
  v8 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v6))
      return *(_BYTE *)(a2 + *v6) == 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *v4;
      v13 = *(_QWORD *)(a2 + v12);
      v14 = v13 + 1;
      if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
        break;
      v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
      *(_QWORD *)(a2 + v12) = v14;
      v11 |= (unint64_t)(v15 & 0x7F) << v9;
      if ((v15 & 0x80) == 0)
        goto LABEL_12;
      v9 += 7;
      v16 = v10++ >= 9;
      if (v16)
      {
        v11 = 0;
        v17 = *v6;
        v18 = *(unsigned __int8 *)(a2 + v17);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
    v17 = *v6;
    v18 = *(unsigned __int8 *)(a2 + v17);
    if (*(_BYTE *)(a2 + v17))
      v11 = 0;
LABEL_14:
    if (v18 || (v11 & 7) == 4)
      return *(_BYTE *)(a2 + *v6) == 0;
    switch((v11 >> 3))
    {
      case 1u:
        v20 = *v4;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setBestWeight:", a3, v36, v37);
        goto LABEL_55;
      case 2u:
        v23 = 0;
        v24 = 0;
        v25 = 0;
        while (2)
        {
          v26 = *v4;
          v27 = *(_QWORD *)(a2 + v26);
          v28 = v27 + 1;
          if (v27 == -1 || v28 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v27);
            *(_QWORD *)(a2 + v26) = v28;
            v25 |= (unint64_t)(v29 & 0x7F) << v23;
            if (v29 < 0)
            {
              v23 += 7;
              v16 = v24++ >= 9;
              if (v16)
              {
                v30 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v30 = 0;
        else
          v30 = v25;
LABEL_52:
        objc_msgSend(a1, "setTotalDurationInMs:", v30, v36, v37);
        goto LABEL_55;
      case 3u:
        v31 = objc_alloc_init(DODMLASRSchemaDODMLASRLanguageModelMetrics);
        v36 = 0;
        v37 = 0;
        if (!PBReaderPlaceMark()
          || !DODMLASRSchemaDODMLASRLanguageModelMetricsReadFrom(v31, a2, v32))
        {
          goto LABEL_57;
        }
        PBReaderRecallMark();
        if (v31)
          objc_msgSend(a1, "addTrain:", v31, 0, 0);
        goto LABEL_47;
      case 4u:
        v31 = objc_alloc_init(DODMLASRSchemaDODMLASRLanguageModelMetrics);
        v36 = 0;
        v37 = 0;
        if (!PBReaderPlaceMark()
          || !DODMLASRSchemaDODMLASRLanguageModelMetricsReadFrom(v31, a2, v33))
        {
          goto LABEL_57;
        }
        PBReaderRecallMark();
        if (v31)
          objc_msgSend(a1, "addDev:", v31, 0, 0);
        goto LABEL_47;
      case 5u:
        v31 = objc_alloc_init(DODMLASRSchemaDODMLASRLanguageModelMetrics);
        v36 = 0;
        v37 = 0;
        if (!PBReaderPlaceMark()
          || !DODMLASRSchemaDODMLASRLanguageModelMetricsReadFrom(v31, a2, v34))
        {
          goto LABEL_57;
        }
        PBReaderRecallMark();
        if (v31)
          objc_msgSend(a1, "addTest:", v31, 0, 0);
        goto LABEL_47;
      case 6u:
        v31 = objc_alloc_init(DODMLASRSchemaDODMLASRLanguageModelMetrics);
        v36 = 0;
        v37 = 0;
        if (PBReaderPlaceMark()
          && DODMLASRSchemaDODMLASRLanguageModelMetricsReadFrom(v31, a2, v35))
        {
          PBReaderRecallMark();
          if (v31)
            objc_msgSend(a1, "addExternal:", v31, 0, 0);
LABEL_47:

LABEL_55:
          if (*(_QWORD *)(a2 + *v4) >= *(_QWORD *)(a2 + *v5))
            return *(_BYTE *)(a2 + *v6) == 0;
          continue;
        }
LABEL_57:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_55;
    }
  }
}

uint64_t DODMLASRSchemaDODMLASRLanguageModelMetricsReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  DODMLASRSchemaDODMLASRNgramHits *v75;
  uint64_t v76;
  uint64_t v77;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v6) == 0;
  v8 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v6))
      return *(_BYTE *)(a2 + *v6) == 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *v4;
      v13 = *(_QWORD *)(a2 + v12);
      v14 = v13 + 1;
      if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
        break;
      v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
      *(_QWORD *)(a2 + v12) = v14;
      v11 |= (unint64_t)(v15 & 0x7F) << v9;
      if ((v15 & 0x80) == 0)
        goto LABEL_12;
      v9 += 7;
      v16 = v10++ >= 9;
      if (v16)
      {
        v11 = 0;
        v17 = *v6;
        v18 = *(unsigned __int8 *)(a2 + v17);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
    v17 = *v6;
    v18 = *(unsigned __int8 *)(a2 + v17);
    if (*(_BYTE *)(a2 + v17))
      v11 = 0;
LABEL_14:
    if (v18 || (v11 & 7) == 4)
      return *(_BYTE *)(a2 + *v6) == 0;
    switch((v11 >> 3))
    {
      case 1u:
        v20 = *v4;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setLinearInterpolationWeight:", a3, v76, v77);
        goto LABEL_113;
      case 2u:
        v23 = 0;
        v24 = 0;
        v25 = 0;
        while (2)
        {
          v26 = *v4;
          v27 = *(_QWORD *)(a2 + v26);
          v28 = v27 + 1;
          if (v27 == -1 || v28 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v27);
            *(_QWORD *)(a2 + v26) = v28;
            v25 |= (unint64_t)(v29 & 0x7F) << v23;
            if (v29 < 0)
            {
              v23 += 7;
              v16 = v24++ >= 9;
              if (v16)
              {
                v30 = 0;
                goto LABEL_81;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v30 = 0;
        else
          v30 = v25;
LABEL_81:
        objc_msgSend(a1, "setTotalDurationInMs:", v30, v76, v77);
        goto LABEL_113;
      case 3u:
        v31 = 0;
        v32 = 0;
        v33 = 0;
        while (2)
        {
          v34 = *v4;
          v35 = *(_QWORD *)(a2 + v34);
          v36 = v35 + 1;
          if (v35 == -1 || v36 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v35);
            *(_QWORD *)(a2 + v34) = v36;
            v33 |= (unint64_t)(v37 & 0x7F) << v31;
            if (v37 < 0)
            {
              v31 += 7;
              v16 = v32++ >= 9;
              if (v16)
              {
                v38 = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v38 = 0;
        else
          v38 = v33;
LABEL_86:
        objc_msgSend(a1, "setNumUtterances:", v38, v76, v77);
        goto LABEL_113;
      case 4u:
        v39 = 0;
        v40 = 0;
        v41 = 0;
        while (2)
        {
          v42 = *v4;
          v43 = *(_QWORD *)(a2 + v42);
          v44 = v43 + 1;
          if (v43 == -1 || v44 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v43);
            *(_QWORD *)(a2 + v42) = v44;
            v41 |= (unint64_t)(v45 & 0x7F) << v39;
            if (v45 < 0)
            {
              v39 += 7;
              v16 = v40++ >= 9;
              if (v16)
              {
                v46 = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v46 = 0;
        else
          v46 = v41;
LABEL_91:
        objc_msgSend(a1, "setNumWords:", v46, v76, v77);
        goto LABEL_113;
      case 5u:
        v47 = 0;
        v48 = 0;
        v49 = 0;
        while (2)
        {
          v50 = *v4;
          v51 = *(_QWORD *)(a2 + v50);
          v52 = v51 + 1;
          if (v51 == -1 || v52 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v51);
            *(_QWORD *)(a2 + v50) = v52;
            v49 |= (unint64_t)(v53 & 0x7F) << v47;
            if (v53 < 0)
            {
              v47 += 7;
              v16 = v48++ >= 9;
              if (v16)
              {
                v54 = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v54 = 0;
        else
          v54 = v49;
LABEL_96:
        objc_msgSend(a1, "setNumOutOfVocabularyWords:", v54, v76, v77);
        goto LABEL_113;
      case 6u:
        v55 = 0;
        v56 = 0;
        v57 = 0;
        while (2)
        {
          v58 = *v4;
          v59 = *(_QWORD *)(a2 + v58);
          v60 = v59 + 1;
          if (v59 == -1 || v60 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v61 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v59);
            *(_QWORD *)(a2 + v58) = v60;
            v57 |= (unint64_t)(v61 & 0x7F) << v55;
            if (v61 < 0)
            {
              v55 += 7;
              v16 = v56++ >= 9;
              if (v16)
              {
                v62 = 0;
                goto LABEL_101;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v62 = 0;
        else
          v62 = v57;
LABEL_101:
        objc_msgSend(a1, "setNumInvalidTokens:", v62, v76, v77);
        goto LABEL_113;
      case 7u:
        v63 = 0;
        v64 = 0;
        v65 = 0;
        while (2)
        {
          v66 = *v4;
          v67 = *(_QWORD *)(a2 + v66);
          v68 = v67 + 1;
          if (v67 == -1 || v68 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v69 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v67);
            *(_QWORD *)(a2 + v66) = v68;
            v65 |= (unint64_t)(v69 & 0x7F) << v63;
            if (v69 < 0)
            {
              v63 += 7;
              v16 = v64++ >= 9;
              if (v16)
              {
                v70 = 0;
                goto LABEL_106;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v70 = 0;
        else
          v70 = v65;
LABEL_106:
        objc_msgSend(a1, "setNumInvalidUtterances:", v70, v76, v77);
        goto LABEL_113;
      case 8u:
        v71 = *v4;
        v72 = *(_QWORD *)(a2 + v71);
        if (v72 <= 0xFFFFFFFFFFFFFFFBLL && v72 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v72);
          *(_QWORD *)(a2 + v71) = v72 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setPerplexity:", a3, v76, v77);
        goto LABEL_113;
      case 9u:
        v73 = *v4;
        v74 = *(_QWORD *)(a2 + v73);
        if (v74 <= 0xFFFFFFFFFFFFFFFBLL && v74 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v74);
          *(_QWORD *)(a2 + v73) = v74 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setPerplexityOne:", a3, v76, v77);
        goto LABEL_113;
      case 0xAu:
        v75 = objc_alloc_init(DODMLASRSchemaDODMLASRNgramHits);
        v76 = 0;
        v77 = 0;
        if (PBReaderPlaceMark() && DODMLASRSchemaDODMLASRNgramHitsReadFrom(v75, a2))
        {
          PBReaderRecallMark();
          if (v75)
            objc_msgSend(a1, "addNgramHits:", v75, 0, 0);

LABEL_113:
          if (*(_QWORD *)(a2 + *v4) >= *(_QWORD *)(a2 + *v5))
            return *(_BYTE *)(a2 + *v6) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_113;
    }
  }
}

uint64_t DODMLASRSchemaDODMLASRModelMetricsReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  void *v20;
  uint64_t result;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t v87;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v6))
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)(a2 + v12);
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        v16 = v10++ >= 9;
        if (v16)
        {
          v11 = 0;
          v17 = *v6;
          v18 = *(unsigned __int8 *)(a2 + v17);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
      v17 = *v6;
      v18 = *(unsigned __int8 *)(a2 + v17);
      if (*(_BYTE *)(a2 + v17))
        v11 = 0;
LABEL_14:
      if (v18 || (v11 & 7) == 4)
        break;
      switch((v11 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setConfigName:", v20);

          continue;
        case 2u:
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (2)
          {
            v25 = *v4;
            v26 = *(_QWORD *)(a2 + v25);
            v27 = v26 + 1;
            if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v26);
              *(_QWORD *)(a2 + v25) = v27;
              v24 |= (unint64_t)(v28 & 0x7F) << v22;
              if (v28 < 0)
              {
                v22 += 7;
                v16 = v23++ >= 9;
                if (v16)
                {
                  v29 = 0;
                  goto LABEL_85;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v29 = 0;
          else
            v29 = v24;
LABEL_85:
          objc_msgSend(a1, "setTrainingDurationInMs:", v29);
          continue;
        case 3u:
          v30 = 0;
          v31 = 0;
          v32 = 0;
          while (2)
          {
            v33 = *v4;
            v34 = *(_QWORD *)(a2 + v33);
            v35 = v34 + 1;
            if (v34 == -1 || v35 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v34);
              *(_QWORD *)(a2 + v33) = v35;
              v32 |= (unint64_t)(v36 & 0x7F) << v30;
              if (v36 < 0)
              {
                v30 += 7;
                v16 = v31++ >= 9;
                if (v16)
                {
                  v37 = 0;
                  goto LABEL_90;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v37 = 0;
          else
            v37 = v32;
LABEL_90:
          objc_msgSend(a1, "setConversionDurationInMs:", v37);
          continue;
        case 4u:
          v38 = 0;
          v39 = 0;
          v40 = 0;
          while (2)
          {
            v41 = *v4;
            v42 = *(_QWORD *)(a2 + v41);
            v43 = v42 + 1;
            if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v42);
              *(_QWORD *)(a2 + v41) = v43;
              v40 |= (unint64_t)(v44 & 0x7F) << v38;
              if (v44 < 0)
              {
                v38 += 7;
                v16 = v39++ >= 9;
                if (v16)
                {
                  v45 = 0;
                  goto LABEL_95;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v45 = 0;
          else
            v45 = v40;
LABEL_95:
          objc_msgSend(a1, "setOptimizationDurationInMs:", v45);
          continue;
        case 5u:
          v46 = 0;
          v47 = 0;
          v48 = 0;
          while (2)
          {
            v49 = *v4;
            v50 = *(_QWORD *)(a2 + v49);
            v51 = v50 + 1;
            if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v50);
              *(_QWORD *)(a2 + v49) = v51;
              v48 |= (unint64_t)(v52 & 0x7F) << v46;
              if (v52 < 0)
              {
                v46 += 7;
                v16 = v47++ >= 9;
                if (v16)
                {
                  v53 = 0;
                  goto LABEL_100;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v53 = 0;
          else
            v53 = v48;
LABEL_100:
          objc_msgSend(a1, "setTotalDurationInMs:", v53);
          continue;
        case 6u:
          v54 = 0;
          v55 = 0;
          v56 = 0;
          while (2)
          {
            v57 = *v4;
            v58 = *(_QWORD *)(a2 + v57);
            v59 = v58 + 1;
            if (v58 == -1 || v59 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v60 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v58);
              *(_QWORD *)(a2 + v57) = v59;
              v56 |= (unint64_t)(v60 & 0x7F) << v54;
              if (v60 < 0)
              {
                v54 += 7;
                v16 = v55++ >= 9;
                if (v16)
                {
                  v61 = 0;
                  goto LABEL_105;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v61 = 0;
          else
            v61 = v56;
LABEL_105:
          objc_msgSend(a1, "setNgramOrder:", v61);
          continue;
        case 7u:
          v62 = *v4;
          v63 = *(_QWORD *)(a2 + v62);
          if (v63 <= 0xFFFFFFFFFFFFFFFBLL && v63 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v63);
            *(_QWORD *)(a2 + v62) = v63 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setResidualAdaptationWeight:", a3);
          continue;
        case 8u:
          v64 = 0;
          v65 = 0;
          v66 = 0;
          while (2)
          {
            v67 = *v4;
            v68 = *(_QWORD *)(a2 + v67);
            v69 = v68 + 1;
            if (v68 == -1 || v69 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v70 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v68);
              *(_QWORD *)(a2 + v67) = v69;
              v66 |= (unint64_t)(v70 & 0x7F) << v64;
              if (v70 < 0)
              {
                v64 += 7;
                v16 = v65++ >= 9;
                if (v16)
                {
                  v71 = 0;
                  goto LABEL_110;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v71 = 0;
          else
            v71 = v66;
LABEL_110:
          objc_msgSend(a1, "setModelTrainingStatusCode:", v71);
          continue;
        case 9u:
          v72 = 0;
          v73 = 0;
          v74 = 0;
          while (2)
          {
            v75 = *v4;
            v76 = *(_QWORD *)(a2 + v75);
            v77 = v76 + 1;
            if (v76 == -1 || v77 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v78 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v76);
              *(_QWORD *)(a2 + v75) = v77;
              v74 |= (unint64_t)(v78 & 0x7F) << v72;
              if (v78 < 0)
              {
                v72 += 7;
                v16 = v73++ >= 9;
                if (v16)
                {
                  v79 = 0;
                  goto LABEL_115;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v79 = 0;
          else
            v79 = v74;
LABEL_115:
          objc_msgSend(a1, "setNumFiniteStateTransducerArcs:", v79);
          continue;
        case 0xAu:
          v80 = 0;
          v81 = 0;
          v82 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v83 = *v4;
        v84 = *(_QWORD *)(a2 + v83);
        v85 = v84 + 1;
        if (v84 == -1 || v85 > *(_QWORD *)(a2 + *v5))
          break;
        v86 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v84);
        *(_QWORD *)(a2 + v83) = v85;
        v82 |= (unint64_t)(v86 & 0x7F) << v80;
        if ((v86 & 0x80) == 0)
          goto LABEL_117;
        v80 += 7;
        v16 = v81++ >= 9;
        if (v16)
        {
          v87 = 0;
          goto LABEL_120;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_117:
      v87 = *(_BYTE *)(a2 + *v6) ? 0 : v82;
LABEL_120:
      objc_msgSend(a1, "setNumFiniteStateTransducerStates:", v87);
    }
    while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5));
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

uint64_t DODMLASRSchemaDODMLASRNgramHitsReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "addHits:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL DODMLASRSchemaDODMLASRPersonalizationExperimentContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  DODMLASRSchemaDODMLASRPersonalizationExperimentStarted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(DODMLASRSchemaDODMLASRPersonalizationExperimentStarted);
        if (!PBReaderPlaceMark()
          || (DODMLASRSchemaDODMLASRPersonalizationExperimentStartedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(DODMLASRSchemaDODMLASRPersonalizationExperimentEnded);
    if (!PBReaderPlaceMark()
      || (DODMLASRSchemaDODMLASRPersonalizationExperimentEndedReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t DODMLASRSchemaDODMLASRPersonalizationExperimentEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  DODMLASRSchemaDODMLASRAudioFileResult *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (DODMLASRSchemaDODMLASRAudioFileResult *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setDatapackVersion:", v17);
        goto LABEL_50;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_76;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_76:
        objc_msgSend(a1, "setNumAudioFilesAvailable:", v25, v61, v62);
        goto LABEL_102;
      case 3u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_81;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_81:
        objc_msgSend(a1, "setNumAudioFilesSelected:", v32, v61, v62);
        goto LABEL_102;
      case 4u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_86:
        objc_msgSend(a1, "setExperimentStatusCode:", v39, v61, v62);
        goto LABEL_102;
      case 5u:
        v17 = objc_alloc_init(DODMLASRSchemaDODMLASRAudioFileResult);
        v61 = 0;
        v62 = 0;
        if (!PBReaderPlaceMark() || !DODMLASRSchemaDODMLASRAudioFileResultReadFrom(v17, a2))
          goto LABEL_104;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addAudioFileResults:", v17, 0, 0);
        goto LABEL_50;
      case 6u:
        v17 = objc_alloc_init(DODMLASRSchemaDODMLASRPersonalizedLanguageModelMetrics);
        v61 = 0;
        v62 = 0;
        if (PBReaderPlaceMark()
          && (DODMLASRSchemaDODMLASRPersonalizedLanguageModelMetricsReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setPersonalizedLanguageModelMetrics:", v17);
LABEL_50:

LABEL_102:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_104:

        return 0;
      case 7u:
        v40 = 0;
        v41 = 0;
        v42 = 0;
        while (2)
        {
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              v14 = v41++ >= 9;
              if (v14)
              {
                v46 = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v46 = 0;
        else
          v46 = v42;
LABEL_91:
        objc_msgSend(a1, "setTextFetchDurationInNs:", v46, v61, v62);
        goto LABEL_102;
      case 8u:
        v47 = 0;
        v48 = 0;
        v49 = 0;
        while (2)
        {
          v50 = *v3;
          v51 = *(_QWORD *)(a2 + v50);
          if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
            *(_QWORD *)(a2 + v50) = v51 + 1;
            v49 |= (unint64_t)(v52 & 0x7F) << v47;
            if (v52 < 0)
            {
              v47 += 7;
              v14 = v48++ >= 9;
              if (v14)
              {
                v53 = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v53 = 0;
        else
          v53 = v49;
LABEL_96:
        objc_msgSend(a1, "setTextProcessingDurationInNs:", v53, v61, v62);
        goto LABEL_102;
      case 9u:
        v54 = 0;
        v55 = 0;
        v56 = 0;
        while (2)
        {
          v57 = *v3;
          v58 = *(_QWORD *)(a2 + v57);
          if (v58 == -1 || v58 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v58);
            *(_QWORD *)(a2 + v57) = v58 + 1;
            v56 |= (unint64_t)(v59 & 0x7F) << v54;
            if (v59 < 0)
            {
              v54 += 7;
              v14 = v55++ >= 9;
              if (v14)
              {
                v60 = 0;
                goto LABEL_101;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v60 = 0;
        else
          v60 = v56;
LABEL_101:
        objc_msgSend(a1, "setDeviceThermalState:", v60, v61, v62);
        goto LABEL_102;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_102;
    }
  }
}

uint64_t DODMLASRSchemaDODMLASRPersonalizationExperimentStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_42;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            v26 = 0;
            goto LABEL_44;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
        if (*(_BYTE *)(a2 + *v5))
          v26 = 0;
LABEL_44:
        objc_msgSend(a1, "setExists:", v26 != 0);
      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_40:
        objc_msgSend(a1, "setDeviceThermalState:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t DODMLASRSchemaDODMLASRPersonalizedLanguageModelMetricsReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  DODMLASRSchemaDODMLASRTranscriptionMetrics *v25;
  double v26;
  double v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_39;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_42;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_42:
        objc_msgSend(a1, "setUserLocale:", v23);
        goto LABEL_43;
      case 2u:
        v25 = objc_alloc_init(DODMLASRSchemaDODMLASRTranscriptionMetrics);
        if (!PBReaderPlaceMark() || !DODMLASRSchemaDODMLASRTranscriptionMetricsReadFrom(v25, a2))
          goto LABEL_45;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTranscriptionMetrics:", v25, 0, 0);
        goto LABEL_37;
      case 3u:
        v25 = objc_alloc_init(DODMLASRSchemaDODMLASRModelMetrics);
        if (!PBReaderPlaceMark() || (DODMLASRSchemaDODMLASRModelMetricsReadFrom(v25, a2, v26) & 1) == 0)
          goto LABEL_45;
        PBReaderRecallMark();
        objc_msgSend(a1, "setModelMetrics:", v25, 0, 0);
        goto LABEL_37;
      case 4u:
        v25 = objc_alloc_init(DODMLASRSchemaDODMLASREvaluationMetrics);
        if (PBReaderPlaceMark()
          && (DODMLASRSchemaDODMLASREvaluationMetricsReadFrom(v25, a2, v27) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setEvaluationMetrics:", v25, 0, 0);
LABEL_37:

LABEL_43:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_45:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_43;
    }
  }
}

uint64_t DODMLASRSchemaDODMLASRResultInfoReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  DODMLASRSchemaDODMLASRChoiceInfo *v24;
  double v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v24 = (DODMLASRSchemaDODMLASRChoiceInfo *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setStageName:", v24);
      }
      else
      {
        if ((_DWORD)v17 != 3)
        {
          if ((_DWORD)v17 == 2)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_37;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_39;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_39:
            objc_msgSend(a1, "setIsAligned:", v20 != 0);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v24 = objc_alloc_init(DODMLASRSchemaDODMLASRChoiceInfo);
        if (!PBReaderPlaceMark() || !DODMLASRSchemaDODMLASRChoiceInfoReadFrom(v24, a2, v25))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v24)
          objc_msgSend(a1, "addChoices:", v24, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t DODMLASRSchemaDODMLASRTokenInfoReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  ASRSchemaASRToken *v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v6))
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)(a2 + v12);
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        v16 = v10++ >= 9;
        if (v16)
        {
          v11 = 0;
          v17 = *v6;
          v18 = *(unsigned __int8 *)(a2 + v17);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
      v17 = *v6;
      v18 = *(unsigned __int8 *)(a2 + v17);
      if (*(_BYTE *)(a2 + v17))
        v11 = 0;
LABEL_14:
      if (v18 || (v11 & 7) == 4)
        break;
      switch((v11 >> 3))
      {
        case 1u:
          v20 = objc_alloc_init(ASRSchemaASRToken);
          if (PBReaderPlaceMark() && (ASRSchemaASRTokenReadFrom(v20, a2) & 1) != 0)
          {
            PBReaderRecallMark();
            objc_msgSend(a1, "setToken:", v20, 0, 0);

            continue;
          }

          return 0;
        case 2u:
          v22 = *v4;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setAcousticCost:", a3);
          continue;
        case 3u:
          v24 = *v4;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 <= 0xFFFFFFFFFFFFFFFBLL && v25 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setSilenceAcousticCost:", a3);
          continue;
        case 4u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          break;
        case 5u:
          v34 = *v4;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 <= 0xFFFFFFFFFFFFFFFBLL && v35 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "addLanguageModelCosts:", a3);
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v29 = *v4;
        v30 = *(_QWORD *)(a2 + v29);
        v31 = v30 + 1;
        if (v30 == -1 || v31 > *(_QWORD *)(a2 + *v5))
          break;
        v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v30);
        *(_QWORD *)(a2 + v29) = v31;
        v28 |= (unint64_t)(v32 & 0x7F) << v26;
        if ((v32 & 0x80) == 0)
          goto LABEL_41;
        v26 += 7;
        v16 = v27++ >= 9;
        if (v16)
        {
          v33 = 0;
          goto LABEL_44;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_41:
      v33 = *(_BYTE *)(a2 + *v6) ? 0 : v28;
LABEL_44:
      objc_msgSend(a1, "addNumBackoffs:", v33);
    }
    while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5));
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

uint64_t DODMLASRSchemaDODMLASRTranscriptMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t v115;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_120;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v23 = 0;
              goto LABEL_123;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_120:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
          else
            v23 = v19;
LABEL_123:
          objc_msgSend(a1, "setNumDocumentsRejected:", v23);
          continue;
        case 2u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (v14)
                {
                  v31 = 0;
                  goto LABEL_128;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
          else
            v31 = v27;
LABEL_128:
          objc_msgSend(a1, "setNumSentencesRejected:", v31);
          continue;
        case 3u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (2)
          {
            v35 = *v3;
            v36 = *(_QWORD *)(a2 + v35);
            if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
              *(_QWORD *)(a2 + v35) = v36 + 1;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                v14 = v33++ >= 9;
                if (v14)
                {
                  v38 = 0;
                  goto LABEL_133;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
          else
            v38 = v34;
LABEL_133:
          objc_msgSend(a1, "setNumDocumentsAccepted:", v38);
          continue;
        case 4u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                v14 = v40++ >= 9;
                if (v14)
                {
                  v45 = 0;
                  goto LABEL_138;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v45 = 0;
          else
            v45 = v41;
LABEL_138:
          objc_msgSend(a1, "setNumSentencesAccepted:", v45);
          continue;
        case 5u:
          v46 = 0;
          v47 = 0;
          v48 = 0;
          while (2)
          {
            v49 = *v3;
            v50 = *(_QWORD *)(a2 + v49);
            if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
              *(_QWORD *)(a2 + v49) = v50 + 1;
              v48 |= (unint64_t)(v51 & 0x7F) << v46;
              if (v51 < 0)
              {
                v46 += 7;
                v14 = v47++ >= 9;
                if (v14)
                {
                  v52 = 0;
                  goto LABEL_143;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v52 = 0;
          else
            v52 = v48;
LABEL_143:
          objc_msgSend(a1, "setNumTokensAccepted:", v52);
          continue;
        case 6u:
          v53 = 0;
          v54 = 0;
          v55 = 0;
          while (2)
          {
            v56 = *v3;
            v57 = *(_QWORD *)(a2 + v56);
            if (v57 == -1 || v57 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
              *(_QWORD *)(a2 + v56) = v57 + 1;
              v55 |= (unint64_t)(v58 & 0x7F) << v53;
              if (v58 < 0)
              {
                v53 += 7;
                v14 = v54++ >= 9;
                if (v14)
                {
                  v59 = 0;
                  goto LABEL_148;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v59 = 0;
          else
            v59 = v55;
LABEL_148:
          objc_msgSend(a1, "setNumTokensOutOfVocabularyAccepted:", v59);
          continue;
        case 7u:
          v60 = 0;
          v61 = 0;
          v62 = 0;
          while (2)
          {
            v63 = *v3;
            v64 = *(_QWORD *)(a2 + v63);
            if (v64 == -1 || v64 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v65 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v64);
              *(_QWORD *)(a2 + v63) = v64 + 1;
              v62 |= (unint64_t)(v65 & 0x7F) << v60;
              if (v65 < 0)
              {
                v60 += 7;
                v14 = v61++ >= 9;
                if (v14)
                {
                  v66 = 0;
                  goto LABEL_153;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v66 = 0;
          else
            v66 = v62;
LABEL_153:
          objc_msgSend(a1, "setNumDocumentsDictated:", v66);
          continue;
        case 8u:
          v67 = 0;
          v68 = 0;
          v69 = 0;
          while (2)
          {
            v70 = *v3;
            v71 = *(_QWORD *)(a2 + v70);
            if (v71 == -1 || v71 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v72 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v71);
              *(_QWORD *)(a2 + v70) = v71 + 1;
              v69 |= (unint64_t)(v72 & 0x7F) << v67;
              if (v72 < 0)
              {
                v67 += 7;
                v14 = v68++ >= 9;
                if (v14)
                {
                  v73 = 0;
                  goto LABEL_158;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v73 = 0;
          else
            v73 = v69;
LABEL_158:
          objc_msgSend(a1, "setNumDocumentsTyped:", v73);
          continue;
        case 9u:
          v74 = 0;
          v75 = 0;
          v76 = 0;
          while (2)
          {
            v77 = *v3;
            v78 = *(_QWORD *)(a2 + v77);
            if (v78 == -1 || v78 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v79 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v78);
              *(_QWORD *)(a2 + v77) = v78 + 1;
              v76 |= (unint64_t)(v79 & 0x7F) << v74;
              if (v79 < 0)
              {
                v74 += 7;
                v14 = v75++ >= 9;
                if (v14)
                {
                  v80 = 0;
                  goto LABEL_163;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v80 = 0;
          else
            v80 = v76;
LABEL_163:
          objc_msgSend(a1, "setNumTokensDictated:", v80);
          continue;
        case 0xAu:
          v81 = 0;
          v82 = 0;
          v83 = 0;
          while (2)
          {
            v84 = *v3;
            v85 = *(_QWORD *)(a2 + v84);
            if (v85 == -1 || v85 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v86 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v85);
              *(_QWORD *)(a2 + v84) = v85 + 1;
              v83 |= (unint64_t)(v86 & 0x7F) << v81;
              if (v86 < 0)
              {
                v81 += 7;
                v14 = v82++ >= 9;
                if (v14)
                {
                  v87 = 0;
                  goto LABEL_168;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v87 = 0;
          else
            v87 = v83;
LABEL_168:
          objc_msgSend(a1, "setNumTokensTyped:", v87);
          continue;
        case 0xBu:
          v88 = 0;
          v89 = 0;
          v90 = 0;
          while (2)
          {
            v91 = *v3;
            v92 = *(_QWORD *)(a2 + v91);
            if (v92 == -1 || v92 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v93 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v92);
              *(_QWORD *)(a2 + v91) = v92 + 1;
              v90 |= (unint64_t)(v93 & 0x7F) << v88;
              if (v93 < 0)
              {
                v88 += 7;
                v14 = v89++ >= 9;
                if (v14)
                {
                  v94 = 0;
                  goto LABEL_173;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v94 = 0;
          else
            v94 = v90;
LABEL_173:
          objc_msgSend(a1, "setNumSentencesMungeRejected:", v94);
          continue;
        case 0xCu:
          v95 = 0;
          v96 = 0;
          v97 = 0;
          while (2)
          {
            v98 = *v3;
            v99 = *(_QWORD *)(a2 + v98);
            if (v99 == -1 || v99 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v100 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v99);
              *(_QWORD *)(a2 + v98) = v99 + 1;
              v97 |= (unint64_t)(v100 & 0x7F) << v95;
              if (v100 < 0)
              {
                v95 += 7;
                v14 = v96++ >= 9;
                if (v14)
                {
                  v101 = 0;
                  goto LABEL_178;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v101 = 0;
          else
            v101 = v97;
LABEL_178:
          objc_msgSend(a1, "setNumSentencesMungeChanged:", v101);
          continue;
        case 0xDu:
          v102 = 0;
          v103 = 0;
          v104 = 0;
          while (2)
          {
            v105 = *v3;
            v106 = *(_QWORD *)(a2 + v105);
            if (v106 == -1 || v106 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v107 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v106);
              *(_QWORD *)(a2 + v105) = v106 + 1;
              v104 |= (unint64_t)(v107 & 0x7F) << v102;
              if (v107 < 0)
              {
                v102 += 7;
                v14 = v103++ >= 9;
                if (v14)
                {
                  v108 = 0;
                  goto LABEL_183;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v108 = 0;
          else
            v108 = v104;
LABEL_183:
          objc_msgSend(a1, "setNumTokensEstimatedRejected:", v108);
          continue;
        case 0xEu:
          v109 = 0;
          v110 = 0;
          v111 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v112 = *v3;
        v113 = *(_QWORD *)(a2 + v112);
        if (v113 == -1 || v113 >= *(_QWORD *)(a2 + *v4))
          break;
        v114 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v113);
        *(_QWORD *)(a2 + v112) = v113 + 1;
        v111 |= (unint64_t)(v114 & 0x7F) << v109;
        if ((v114 & 0x80) == 0)
          goto LABEL_185;
        v109 += 7;
        v14 = v110++ >= 9;
        if (v14)
        {
          v115 = 0;
          goto LABEL_188;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_185:
      v115 = *(_BYTE *)(a2 + *v5) ? 0 : v111;
LABEL_188:
      objc_msgSend(a1, "setNumTokensEstimatedExamined:", v115);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL DODMLASRSchemaDODMLASRTranscriptionMetricsReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  DODMLASRSchemaDODMLASRTranscriptMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(DODMLASRSchemaDODMLASRTranscriptMetadata);
        if (!PBReaderPlaceMark() || (DODMLASRSchemaDODMLASRTranscriptMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTrain:", v17, 0, 0);
        goto LABEL_33;
      case 2u:
        v17 = objc_alloc_init(DODMLASRSchemaDODMLASRTranscriptMetadata);
        if (!PBReaderPlaceMark() || (DODMLASRSchemaDODMLASRTranscriptMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDev:", v17, 0, 0);
        goto LABEL_33;
      case 3u:
        v17 = objc_alloc_init(DODMLASRSchemaDODMLASRTranscriptMetadata);
        if (!PBReaderPlaceMark() || (DODMLASRSchemaDODMLASRTranscriptMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTest:", v17, 0, 0);
        goto LABEL_33;
      case 4u:
        v17 = objc_alloc_init(DODMLASRSchemaDODMLASRTranscriptMetadata);
        if (PBReaderPlaceMark() && (DODMLASRSchemaDODMLASRTranscriptMetadataReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setExternal:", v17, 0, 0);
LABEL_33:

LABEL_34:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_36:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_34;
    }
  }
}

BOOL DODMLASRSchemaDODMLASRUserEditExperimentContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  DODMLASRSchemaDODMLASRUserEditExperimentStarted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(DODMLASRSchemaDODMLASRUserEditExperimentStarted);
        if (!PBReaderPlaceMark()
          || (DODMLASRSchemaDODMLASRUserEditExperimentStartedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(DODMLASRSchemaDODMLASRUserEditExperimentEnded);
    if (!PBReaderPlaceMark() || (DODMLASRSchemaDODMLASRUserEditExperimentEndedReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t DODMLASRSchemaDODMLASRUserEditExperimentEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  DODMLASRSchemaDODMLASRUserEditExperimentRedecodingResults *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(DODMLASRSchemaDODMLASRUserEditExperimentRedecodingResults);
        v40 = 0;
        v41 = 0;
        if (!PBReaderPlaceMark()
          || !DODMLASRSchemaDODMLASRUserEditExperimentRedecodingResultsReadFrom(v17, a2))
        {
          goto LABEL_67;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addRedecodingResults:", v17, 0, 0);
        goto LABEL_28;
      case 2u:
        v17 = objc_alloc_init(SISchemaUUID);
        v40 = 0;
        v41 = 0;
        if (PBReaderPlaceMark() && (SISchemaUUIDReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setLinkId:", v17);
LABEL_28:

LABEL_65:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_67:

        return 0;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_54:
        objc_msgSend(a1, "setNumAudioFilesAvailable:", v25, v40, v41);
        goto LABEL_65;
      case 4u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_59:
        objc_msgSend(a1, "setNumAudioFilesSelected:", v32, v40, v41);
        goto LABEL_65;
      case 5u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_64:
        objc_msgSend(a1, "setErrorCode:", v39, v40, v41);
        goto LABEL_65;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_65;
    }
  }
}

BOOL DODMLASRSchemaDODMLASRUserEditExperimentEndedTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(DODMLASRSchemaDODMLASRConfusionPairTier1);
    if (!PBReaderPlaceMark() || !DODMLASRSchemaDODMLASRConfusionPairTier1ReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addConfusionPairs:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t DODMLASRSchemaDODMLASRUserEditExperimentRedecodingResultsReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  DODMLASRSchemaDODMLASRConfusionPair *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (DODMLASRSchemaDODMLASRConfusionPair *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setDatapackVersion:", v17);
        goto LABEL_39;
      case 2u:
        v17 = objc_alloc_init(DODMLASRSchemaDODMLASRConfusionPair);
        v26 = 0;
        v27 = 0;
        if (!PBReaderPlaceMark() || !DODMLASRSchemaDODMLASRConfusionPairReadFrom(v17, a2))
          goto LABEL_47;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addConfusionPairs:", v17, 0, 0);
        goto LABEL_39;
      case 3u:
        v17 = objc_alloc_init(SISchemaUUID);
        v26 = 0;
        v27 = 0;
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_47;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAsrId:", v17);
        goto LABEL_39;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_44;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_44:
        objc_msgSend(a1, "setErrorCode:", v25, v26, v27);
        goto LABEL_45;
      case 5u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (PBReaderPlaceMark() && (SISchemaUUIDReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setLinkId:", v17, 0, 0);
LABEL_39:

LABEL_45:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_47:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_45;
    }
  }
}

uint64_t DODMLASRSchemaDODMLASRUserEditExperimentStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t DODMLASRSchemaDODMLASRUtteranceInfoReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  DODMLASRSchemaDODMLASRResultInfo *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = objc_alloc_init(DODMLASRSchemaDODMLASRResultInfo);
        v34 = 0;
        v35 = 0;
        if (!PBReaderPlaceMark() || !DODMLASRSchemaDODMLASRResultInfoReadFrom(v25, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v25)
          objc_msgSend(a1, "addResults:", v25, 0, 0);

      }
      else if ((_DWORD)v17 == 2)
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (1)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            break;
          v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
          *(_QWORD *)(a2 + v29) = v30 + 1;
          v28 |= (unint64_t)(v31 & 0x7F) << v26;
          if ((v31 & 0x80) == 0)
            goto LABEL_48;
          v26 += 7;
          v14 = v27++ >= 9;
          if (v14)
          {
            v32 = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_48:
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_51:
        objc_msgSend(a1, "setStartTimeInNs:", v32, v34, v35);
      }
      else if ((_DWORD)v17 == 3)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_43;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v24 = 0;
            goto LABEL_46;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
        else
          v24 = v20;
LABEL_46:
        objc_msgSend(a1, "setEndTimeInNs:", v24, v34, v35);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL DODMLSchemaDODMLClientEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  DODMLSchemaDODMLClientEventMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(DODMLSchemaDODMLClientEventMetadata);
        if (!PBReaderPlaceMark() || (DODMLSchemaDODMLClientEventMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEventMetadata:", v17, 0, 0);
        goto LABEL_36;
      case 2u:
        v17 = objc_alloc_init(DODMLASRSchemaDODMLASRPersonalizationExperimentContext);
        if (!PBReaderPlaceMark()
          || !DODMLASRSchemaDODMLASRPersonalizationExperimentContextReadFrom(v17, a2))
        {
          goto LABEL_40;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPersonalizationExperimentContext:", v17, 0, 0);
        goto LABEL_36;
      case 3u:
        v17 = objc_alloc_init(DODMLASRSchemaDODMLASRUserEditExperimentContext);
        if (!PBReaderPlaceMark() || !DODMLASRSchemaDODMLASRUserEditExperimentContextReadFrom(v17, a2))
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setUserEditExperimentContext:", v17, 0, 0);
        goto LABEL_36;
      case 4u:
        v17 = objc_alloc_init(DODMLASRSchemaDODMLASRUserEditExperimentEndedTier1);
        if (!PBReaderPlaceMark() || !DODMLASRSchemaDODMLASRUserEditExperimentEndedTier1ReadFrom(v17, a2))
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setUserEditExperimentEndedTier1:", v17, 0, 0);
        goto LABEL_36;
      case 5u:
        v17 = objc_alloc_init(DODMLASRSchemaDODMLASRAudioFileResultTier1);
        if (PBReaderPlaceMark() && (DODMLASRSchemaDODMLASRAudioFileResultTier1ReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setAudioFileResultTier1:", v17, 0, 0);
LABEL_36:

LABEL_37:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_40:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_37;
    }
  }
}

uint64_t DODMLSchemaDODMLClientEventMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_44;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDodMlId:", v17, 0, 0);
        goto LABEL_29;
      case 2u:
        PBReaderReadString();
        v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setExperimentName:", v17);
        goto LABEL_29;
      case 3u:
        PBReaderReadString();
        v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setTrialExperimentId:", v17);
        goto LABEL_29;
      case 4u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (PBReaderPlaceMark() && (SISchemaUUIDReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setTrialTreatmentId:", v17, 0, 0);
LABEL_29:

LABEL_42:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_44:

        return 0;
      case 5u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_41;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_41:
        objc_msgSend(a1, "setTrialDeploymentId:", v25);
        goto LABEL_42;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_42;
    }
  }
}

uint64_t DUSchemaDUContentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setDataPayload:", v17);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL DUSchemaDUEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  DUSchemaDUSpeechAudioRecord *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 100)
      {
        if ((_DWORD)v17 == 101)
        {
          v18 = objc_alloc_init(DUSchemaDUSpeechAudioRecord);
          if (!PBReaderPlaceMark() || (DUSchemaDUSpeechAudioRecordReadFrom(v18, a2) & 1) == 0)
          {
LABEL_39:

            return 0;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "setSpeechAudioRecord:", v18, 0, 0);
          goto LABEL_35;
        }
        if ((_DWORD)v17 == 102)
        {
          v18 = objc_alloc_init(DUSchemaDUSearchSessionRecord);
          if (!PBReaderPlaceMark() || (DUSchemaDUSearchSessionRecordReadFrom(v18, a2) & 1) == 0)
            goto LABEL_39;
          PBReaderRecallMark();
          objc_msgSend(a1, "setSearchSessionRecord:", v18, 0, 0);
          goto LABEL_35;
        }
      }
      else
      {
        if ((_DWORD)v17 == 1)
        {
          v18 = objc_alloc_init(DUSchemaDUEventMetadata);
          if (!PBReaderPlaceMark() || (DUSchemaDUEventMetadataReadFrom(v18, a2) & 1) == 0)
            goto LABEL_39;
          PBReaderRecallMark();
          objc_msgSend(a1, "setMetadata:", v18, 0, 0);
          goto LABEL_35;
        }
        if ((_DWORD)v17 == 2)
        {
          v18 = objc_alloc_init(DUSchemaDUContent);
          if (!PBReaderPlaceMark() || (DUSchemaDUContentReadFrom(v18, a2) & 1) == 0)
            goto LABEL_39;
          PBReaderRecallMark();
          objc_msgSend(a1, "setContent:", v18, 0, 0);
LABEL_35:

          continue;
        }
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t DUSchemaDUEventMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAssetIdentifier:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t DUSchemaDUResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  SISchemaUUID *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v24 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAssetIdentifier:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_36:
        objc_msgSend(a1, "setStatus:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t DUSchemaDUSearchSessionRecordReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  SISchemaUUID *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSessionId:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_36:
        objc_msgSend(a1, "setSessionStartTimestampMs:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t DUSchemaDUSpeechAudioRecordReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setLanguage:", v17);
        goto LABEL_30;
      case 2u:
        PBReaderReadString();
        v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setCodec:", v17);
        goto LABEL_30;
      case 3u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_46;
        PBReaderRecallMark();
        objc_msgSend(a1, "setInteractionId:", v17, 0, 0);
        goto LABEL_30;
      case 4u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (PBReaderPlaceMark() && (SISchemaUUIDReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setSpeechId:", v17, 0, 0);
LABEL_30:

LABEL_31:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_46:

        return 0;
      case 5u:
        PBReaderReadString();
        v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setSpeechIdString:", v17);
        goto LABEL_30;
      case 6u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_44;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_44:
        objc_msgSend(a1, "setAudioCreatedTimestampMs:", v25);
        goto LABEL_31;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_31;
    }
  }
}

uint64_t EXPSchemaEXPTrialExperimentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setExperimentNamespace:", v17);
        goto LABEL_26;
      case 2u:
        PBReaderReadString();
        v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setExperimentId:", v17);
        goto LABEL_26;
      case 3u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (PBReaderPlaceMark() && (SISchemaUUIDReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setTreatmentId:", v17, 0, 0);
LABEL_26:

LABEL_75:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_59:
        objc_msgSend(a1, "setDeploymentId:", v25);
        goto LABEL_75;
      case 5u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_64:
        objc_msgSend(a1, "setAllocationStatus:", v32);
        goto LABEL_75;
      case 6u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_69;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_69:
        objc_msgSend(a1, "setLastUpdatedAtInMs:", v39);
        goto LABEL_75;
      case 7u:
        v40 = 0;
        v41 = 0;
        v42 = 0;
        while (2)
        {
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              v14 = v41++ >= 9;
              if (v14)
              {
                v46 = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v46 = 0;
        else
          v46 = v42;
LABEL_74:
        objc_msgSend(a1, "setCompatibilityVersion:", v46);
        goto LABEL_75;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_75;
    }
  }
}

uint64_t EXPSearchSchemaEXPSearchClientEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  EXPSearchSchemaEXPSearchSessionExperiments *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 101)
      {
        v17 = objc_alloc_init(EXPSearchSchemaEXPSearchSessionExperiments);
        if (!PBReaderPlaceMark() || !EXPSearchSchemaEXPSearchSessionExperimentsReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSessionExperiments:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL EXPSearchSchemaEXPSearchSessionExperimentsReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSearchSessionId:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(EXPSchemaEXPTrialExperiment);
    if (!PBReaderPlaceMark() || !EXPSchemaEXPTrialExperimentReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addActiveExperiments:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t EXPSiriSchemaEXPAllocationChangelogSnapshotReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  EXPSchemaEXPTrialExperiment *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(EXPSchemaEXPTrialExperiment);
        if (!PBReaderPlaceMark() || !EXPSchemaEXPTrialExperimentReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addAllocations:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t EXPSiriSchemaEXPAllocationSnapshotReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  EXPSchemaEXPTrialExperiment *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(EXPSchemaEXPTrialExperiment);
        if (!PBReaderPlaceMark() || !EXPSchemaEXPTrialExperimentReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addAllocations:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL EXPSiriSchemaEXPClientExperimentTriggeredTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  EXPSchemaEXPTrialExperiment *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(EXPSchemaEXPTrialExperiment);
        if (!PBReaderPlaceMark() || !EXPSchemaEXPTrialExperimentReadFrom(v17, a2))
          goto LABEL_32;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addAllocation:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SISchemaUUID);
    if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setCodepathId:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL EXPSiriSchemaEXPClientSiriRequestExperimentTriggeredTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  SISchemaUUID *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v18, a2) & 1) == 0)
        {
LABEL_36:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setRequestId:", v18, 0, 0);
        goto LABEL_31;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(EXPSchemaEXPTrialExperiment);
        if (!PBReaderPlaceMark() || !EXPSchemaEXPTrialExperimentReadFrom(v18, a2))
          goto LABEL_36;
        PBReaderRecallMark();
        if (v18)
          objc_msgSend(a1, "addAllocation:", v18, 0, 0);
LABEL_31:

        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_33:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(SISchemaUUID);
    if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v18, a2) & 1) == 0)
      goto LABEL_36;
    PBReaderRecallMark();
    objc_msgSend(a1, "setCodepathId:", v18, 0, 0);
    goto LABEL_31;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t EXPSiriSchemaEXPServerCounterfactualTriggeredTier1ReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  EXPSchemaEXPTrialExperiment *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t result;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v6) == 0;
  v8 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v6))
      return *(_BYTE *)(a2 + *v6) == 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *v4;
      v13 = *(_QWORD *)(a2 + v12);
      v14 = v13 + 1;
      if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
        break;
      v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
      *(_QWORD *)(a2 + v12) = v14;
      v11 |= (unint64_t)(v15 & 0x7F) << v9;
      if ((v15 & 0x80) == 0)
        goto LABEL_12;
      v9 += 7;
      v16 = v10++ >= 9;
      if (v16)
      {
        v11 = 0;
        v17 = *v6;
        v18 = *(unsigned __int8 *)(a2 + v17);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
    v17 = *v6;
    v18 = *(unsigned __int8 *)(a2 + v17);
    if (*(_BYTE *)(a2 + v17))
      v11 = 0;
LABEL_14:
    if (v18 || (v11 & 7) == 4)
      return *(_BYTE *)(a2 + *v6) == 0;
    switch((v11 >> 3))
    {
      case 1u:
        v20 = objc_alloc_init(EXPSchemaEXPTrialExperiment);
        v49 = 0;
        v50 = 0;
        if (!PBReaderPlaceMark() || !EXPSchemaEXPTrialExperimentReadFrom(v20, a2))
          goto LABEL_85;
        PBReaderRecallMark();
        if (v20)
          objc_msgSend(a1, "addAllocation:", v20, 0, 0);
        goto LABEL_65;
      case 2u:
        v20 = objc_alloc_init(SISchemaUUID);
        v49 = 0;
        v50 = 0;
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v20, a2) & 1) == 0)
          goto LABEL_85;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCodepathId:", v20);
        goto LABEL_65;
      case 3u:
        v20 = objc_alloc_init(SISchemaUUID);
        v49 = 0;
        v50 = 0;
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v20, a2) & 1) == 0)
          goto LABEL_85;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPegasusId:", v20);
        goto LABEL_65;
      case 4u:
        v20 = objc_alloc_init(EXPSchemaEXPTrialExperiment);
        v49 = 0;
        v50 = 0;
        if (!PBReaderPlaceMark() || !EXPSchemaEXPTrialExperimentReadFrom(v20, a2))
          goto LABEL_85;
        PBReaderRecallMark();
        if (v20)
          objc_msgSend(a1, "addCounterfactualAllocation:", v20, 0, 0);
        goto LABEL_65;
      case 5u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        while (2)
        {
          v24 = *v4;
          v25 = *(_QWORD *)(a2 + v24);
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v25);
            *(_QWORD *)(a2 + v24) = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if (v27 < 0)
            {
              v21 += 7;
              v16 = v22++ >= 9;
              if (v16)
              {
                v23 = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v23 = 0;
LABEL_71:
        objc_msgSend(a1, "setIsCounterfactualDifferent:", v23 != 0);
        goto LABEL_66;
      case 6u:
        v28 = *v4;
        v29 = *(_QWORD *)(a2 + v28);
        if (v29 <= 0xFFFFFFFFFFFFFFFBLL && v29 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setCompareRankingAtK:", a3, v49, v50);
        goto LABEL_66;
      case 7u:
        v30 = 0;
        v31 = 0;
        v32 = 0;
        while (2)
        {
          v33 = *v4;
          v34 = *(_QWORD *)(a2 + v33);
          v35 = v34 + 1;
          if (v34 == -1 || v35 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v34);
            *(_QWORD *)(a2 + v33) = v35;
            v32 |= (unint64_t)(v36 & 0x7F) << v30;
            if (v36 < 0)
            {
              v30 += 7;
              v16 = v31++ >= 9;
              if (v16)
              {
                v37 = 0;
                goto LABEL_76;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v37 = 0;
        else
          v37 = v32;
LABEL_76:
        objc_msgSend(a1, "setKValue:", v37, v49, v50);
        goto LABEL_66;
      case 8u:
        v38 = 0;
        v39 = 0;
        v40 = 0;
        while (2)
        {
          v41 = *v4;
          v42 = *(_QWORD *)(a2 + v41);
          v43 = v42 + 1;
          if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v42);
            *(_QWORD *)(a2 + v41) = v43;
            v40 |= (unint64_t)(v44 & 0x7F) << v38;
            if (v44 < 0)
            {
              v38 += 7;
              v16 = v39++ >= 9;
              if (v16)
              {
                v45 = 0;
                goto LABEL_81;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v45 = 0;
        else
          v45 = v40;
LABEL_81:
        objc_msgSend(a1, "setDiffOutcome:", v45, v49, v50);
        goto LABEL_66;
      case 0xAu:
        v20 = objc_alloc_init(EXPSiriSchemaEXPSiriPegasusResponseSummary);
        if (!PBReaderPlaceMark()
          || (EXPSiriSchemaEXPSiriPegasusResponseSummaryReadFrom(v20, a2, v47) & 1) == 0)
        {
          goto LABEL_85;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTreatmentSummary:", v20, 0, 0);
        goto LABEL_65;
      case 0xBu:
        v20 = objc_alloc_init(EXPSiriSchemaEXPSiriPegasusResponseSummary);
        if (PBReaderPlaceMark()
          && (EXPSiriSchemaEXPSiriPegasusResponseSummaryReadFrom(v20, a2, v48) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCounterfactualSummary:", v20, 0, 0);
LABEL_65:

LABEL_66:
          if (*(_QWORD *)(a2 + *v4) >= *(_QWORD *)(a2 + *v5))
            return *(_BYTE *)(a2 + *v6) == 0;
          continue;
        }
LABEL_85:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_66;
    }
  }
}

BOOL EXPSiriSchemaEXPServerExperimentTriggeredTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  SISchemaUUID *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v18, a2) & 1) == 0)
        {
LABEL_36:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPegasusId:", v18, 0, 0);
        goto LABEL_31;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(EXPSchemaEXPTrialExperiment);
        if (!PBReaderPlaceMark() || !EXPSchemaEXPTrialExperimentReadFrom(v18, a2))
          goto LABEL_36;
        PBReaderRecallMark();
        if (v18)
          objc_msgSend(a1, "addAllocation:", v18, 0, 0);
LABEL_31:

        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_33:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(SISchemaUUID);
    if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v18, a2) & 1) == 0)
      goto LABEL_36;
    PBReaderRecallMark();
    objc_msgSend(a1, "setCodepathId:", v18, 0, 0);
    goto LABEL_31;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL EXPSiriSchemaEXPSiriClientEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  EXPSiriSchemaEXPAllocationSnapshot *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 'e':
        v17 = objc_alloc_init(EXPSiriSchemaEXPAllocationSnapshot);
        if (!PBReaderPlaceMark() || (EXPSiriSchemaEXPAllocationSnapshotReadFrom(v17, a2) & 1) == 0)
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAllocationSnapshot:", v17, 0, 0);
        goto LABEL_36;
      case 'f':
        v17 = objc_alloc_init(EXPSiriSchemaEXPAllocationChangelogSnapshot);
        if (!PBReaderPlaceMark()
          || (EXPSiriSchemaEXPAllocationChangelogSnapshotReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_40;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAllocationChangelogSnapshot:", v17, 0, 0);
        goto LABEL_36;
      case 'g':
        v17 = objc_alloc_init(EXPSiriSchemaEXPClientExperimentTriggeredTier1);
        if (!PBReaderPlaceMark() || !EXPSiriSchemaEXPClientExperimentTriggeredTier1ReadFrom(v17, a2))
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setExperimentTriggered:", v17, 0, 0);
        goto LABEL_36;
      case 'h':
        v17 = objc_alloc_init(EXPSiriSchemaEXPClientSiriRequestExperimentTriggeredTier1);
        if (!PBReaderPlaceMark()
          || !EXPSiriSchemaEXPClientSiriRequestExperimentTriggeredTier1ReadFrom(v17, a2))
        {
          goto LABEL_40;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSiriRequestExperimentTriggered:", v17, 0, 0);
        goto LABEL_36;
      case 'i':
        v17 = objc_alloc_init(EXPSiriSchemaEXPRolloutChangeSnapshot);
        if (PBReaderPlaceMark() && (EXPSiriSchemaEXPRolloutChangeSnapshotReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setRolloutChangeSnapshot:", v17, 0, 0);
LABEL_36:

LABEL_37:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_40:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_37;
    }
  }
}

BOOL EXPSiriSchemaEXPSiriServerEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  EXPSiriSchemaEXPServerExperimentTriggeredTier1 *v17;
  double v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 102)
        break;
      if ((v10 >> 3) == 101)
      {
        v17 = objc_alloc_init(EXPSiriSchemaEXPServerExperimentTriggeredTier1);
        if (!PBReaderPlaceMark() || !EXPSiriSchemaEXPServerExperimentTriggeredTier1ReadFrom(v17, a2))
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setExperimentTriggered:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(EXPSiriSchemaEXPServerCounterfactualTriggeredTier1);
    if (!PBReaderPlaceMark()
      || (EXPSiriSchemaEXPServerCounterfactualTriggeredTier1ReadFrom(v17, a2, v18) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setCounterfactualTriggered:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLINKActionReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_56;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v17, 0, 0);
        goto LABEL_43;
      case 2u:
        PBReaderReadString();
        v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setActionIdentifierName:", v17);
        goto LABEL_43;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_48;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_48:
        objc_msgSend(a1, "setSystemProtocol:", v25, v33, v34);
        goto LABEL_54;
      case 4u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_53;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_53:
        objc_msgSend(a1, "setPresentationStyle:", v32, v33, v34);
        goto LABEL_54;
      case 5u:
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionParameter);
        v33 = 0;
        v34 = 0;
        if (PBReaderPlaceMark() && FLOWLINKSchemaFLOWLINKActionParameterReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addParameters:", v17, 0, 0);
LABEL_43:

LABEL_54:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_56:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_54;
    }
  }
}

BOOL FLOWLINKSchemaFLOWLINKActionConfirmationContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  FLOWLINKSchemaFLOWLINKActionConfirmationStarted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionConfirmationStarted);
        if (!PBReaderPlaceMark()
          || (FLOWLINKSchemaFLOWLINKActionConfirmationStartedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionConfirmationEnded);
    if (!PBReaderPlaceMark() || (FLOWLINKSchemaFLOWLINKActionConfirmationEndedReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLINKActionConfirmationEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setIsCorrectAction:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLINKActionConfirmationStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL FLOWLINKSchemaFLOWLINKActionContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  FLOWLINKSchemaFLOWLinkActionStarted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLinkActionStarted);
        if (!PBReaderPlaceMark() || (FLOWLINKSchemaFLOWLinkActionStartedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
        goto LABEL_33;
      case 2u:
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLinkActionEnded);
        if (!PBReaderPlaceMark() || (FLOWLINKSchemaFLOWLinkActionEndedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEnded:", v17, 0, 0);
        goto LABEL_33;
      case 3u:
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLinkActionFailed);
        if (!PBReaderPlaceMark() || (FLOWLINKSchemaFLOWLinkActionFailedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFailed:", v17, 0, 0);
        goto LABEL_33;
      case 4u:
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLinkActionCancelled);
        if (PBReaderPlaceMark() && (FLOWLINKSchemaFLOWLinkActionCancelledReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCancelled:", v17, 0, 0);
LABEL_33:

LABEL_34:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_36:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_34;
    }
  }
}

BOOL FLOWLINKSchemaFLOWLINKActionConversionContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  FLOWLINKSchemaFLOWLINKActionConversionFailed *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionConversionFailed);
        if (!PBReaderPlaceMark()
          || (FLOWLINKSchemaFLOWLINKActionConversionFailedReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setFailed:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionConversionStarted);
        if (!PBReaderPlaceMark()
          || (FLOWLINKSchemaFLOWLINKActionConversionStartedReadFrom(v18, a2) & 1) == 0)
        {
          goto LABEL_35;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionConversionEnded);
    if (!PBReaderPlaceMark() || (FLOWLINKSchemaFLOWLINKActionConversionEndedReadFrom(v18, a2) & 1) == 0)
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLINKActionConversionEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  FLOWLINKSchemaFLOWLINKAction *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKAction);
        if (!PBReaderPlaceMark() || (FLOWLINKSchemaFLOWLINKActionReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAction:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLINKActionConversionFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLINKActionConversionStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setParseHypothesisId:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL FLOWLINKSchemaFLOWLINKActionExecutionContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  FLOWLINKSchemaFLOWLINKActionExecutionStarted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionExecutionStarted);
        if (!PBReaderPlaceMark()
          || (FLOWLINKSchemaFLOWLINKActionExecutionStartedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionExecutionEnded);
    if (!PBReaderPlaceMark() || (FLOWLINKSchemaFLOWLINKActionExecutionEndedReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLINKActionExecutionEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setHasOutputToPresent:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLINKActionExecutionStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLINKActionParameterReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setName:", v25);

      }
      else if ((_DWORD)v17 == 2)
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (1)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            break;
          v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
          *(_QWORD *)(a2 + v29) = v30 + 1;
          v28 |= (unint64_t)(v31 & 0x7F) << v26;
          if ((v31 & 0x80) == 0)
            goto LABEL_44;
          v26 += 7;
          v14 = v27++ >= 9;
          if (v14)
          {
            v28 = 0;
            goto LABEL_46;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
        if (*(_BYTE *)(a2 + *v5))
          v28 = 0;
LABEL_46:
        objc_msgSend(a1, "setIsArray:", v28 != 0);
      }
      else if ((_DWORD)v17 == 3)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_39;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v24 = 0;
            goto LABEL_42;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
        v24 = *(_BYTE *)(a2 + *v5) ? 0 : v20;
LABEL_42:
        objc_msgSend(a1, "setType:", v24);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL FLOWLINKSchemaFLOWLINKActionParameterConfirmationContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  FLOWLINKSchemaFLOWLINKActionParameterConfirmationStarted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionParameterConfirmationStarted);
        if (!PBReaderPlaceMark()
          || (FLOWLINKSchemaFLOWLINKActionParameterConfirmationStartedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionParameterConfirmationEnded);
    if (!PBReaderPlaceMark()
      || (FLOWLINKSchemaFLOWLINKActionParameterConfirmationEndedReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLINKActionParameterConfirmationEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setIsCorrectParameter:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLINKActionParameterConfirmationStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  FLOWLINKSchemaFLOWLINKActionParameter *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionParameter);
        if (!PBReaderPlaceMark() || (FLOWLINKSchemaFLOWLINKActionParameterReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setParameter:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL FLOWLINKSchemaFLOWLINKActionParameterDisambiguationContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  FLOWLINKSchemaFLOWLINKActionParameterDisambiguationStarted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionParameterDisambiguationStarted);
        if (!PBReaderPlaceMark()
          || (FLOWLINKSchemaFLOWLINKActionParameterDisambiguationStartedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionParameterDisambiguationEnded);
    if (!PBReaderPlaceMark()
      || (FLOWLINKSchemaFLOWLINKActionParameterDisambiguationEndedReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLINKActionParameterDisambiguationEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLINKActionParameterDisambiguationStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  FLOWLINKSchemaFLOWLINKActionParameter *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionParameter);
        if (!PBReaderPlaceMark() || (FLOWLINKSchemaFLOWLINKActionParameterReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setParameter:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLINKActionParametersUpdatedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  FLOWLINKSchemaFLOWLINKActionParameter *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionParameter);
        if (!PBReaderPlaceMark() || !FLOWLINKSchemaFLOWLINKActionParameterReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addParameters:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL FLOWLINKSchemaFLOWLINKActionPromptForValueContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  FLOWLINKSchemaFLOWLINKActionPromptForValueStarted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionPromptForValueStarted);
        if (!PBReaderPlaceMark()
          || (FLOWLINKSchemaFLOWLINKActionPromptForValueStartedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionPromptForValueEnded);
    if (!PBReaderPlaceMark()
      || (FLOWLINKSchemaFLOWLINKActionPromptForValueEndedReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLINKActionPromptForValueEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLINKActionPromptForValueStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  FLOWLINKSchemaFLOWLINKActionParameter *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionParameter);
        if (!PBReaderPlaceMark() || (FLOWLINKSchemaFLOWLINKActionParameterReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setParameter:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL FLOWLINKSchemaFLOWLINKActionTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v17, 0, 0);
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setAppBundleId:", v17);
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLINKAutoShortcutTemplateUsedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAutoshortcutTemplate:", v17);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL FLOWLINKSchemaFLOWLINKClientEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  FLOWLINKSchemaFLOWLINKActionContext *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 'd':
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionContext);
        if (!PBReaderPlaceMark() || !FLOWLINKSchemaFLOWLINKActionContextReadFrom(v17, a2))
          goto LABEL_68;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkActionContext:", v17, 0, 0);
        goto LABEL_62;
      case 'e':
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKEntityDisambiguationContext);
        if (!PBReaderPlaceMark() || !FLOWLINKSchemaFLOWLINKEntityDisambiguationContextReadFrom(v17, a2))
          goto LABEL_68;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEntityDisambiguationContext:", v17, 0, 0);
        goto LABEL_62;
      case 'f':
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionConversionContext);
        if (!PBReaderPlaceMark() || !FLOWLINKSchemaFLOWLINKActionConversionContextReadFrom(v17, a2))
          goto LABEL_68;
        PBReaderRecallMark();
        objc_msgSend(a1, "setActionConversionContext:", v17, 0, 0);
        goto LABEL_62;
      case 'g':
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionExecutionContext);
        if (!PBReaderPlaceMark() || !FLOWLINKSchemaFLOWLINKActionExecutionContextReadFrom(v17, a2))
          goto LABEL_68;
        PBReaderRecallMark();
        objc_msgSend(a1, "setActionExecutionContext:", v17, 0, 0);
        goto LABEL_62;
      case 'h':
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionPromptForValueContext);
        if (!PBReaderPlaceMark() || !FLOWLINKSchemaFLOWLINKActionPromptForValueContextReadFrom(v17, a2))
          goto LABEL_68;
        PBReaderRecallMark();
        objc_msgSend(a1, "setActionPromptForValueContext:", v17, 0, 0);
        goto LABEL_62;
      case 'i':
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionParameterDisambiguationContext);
        if (!PBReaderPlaceMark()
          || !FLOWLINKSchemaFLOWLINKActionParameterDisambiguationContextReadFrom(v17, a2))
        {
          goto LABEL_68;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setActionParameterDisambiguationContext:", v17, 0, 0);
        goto LABEL_62;
      case 'j':
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionParameterConfirmationContext);
        if (!PBReaderPlaceMark()
          || !FLOWLINKSchemaFLOWLINKActionParameterConfirmationContextReadFrom(v17, a2))
        {
          goto LABEL_68;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setActionParameterConfirmationContext:", v17, 0, 0);
        goto LABEL_62;
      case 'k':
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionConfirmationContext);
        if (!PBReaderPlaceMark() || !FLOWLINKSchemaFLOWLINKActionConfirmationContextReadFrom(v17, a2))
          goto LABEL_68;
        PBReaderRecallMark();
        objc_msgSend(a1, "setActionConfirmationContext:", v17, 0, 0);
        goto LABEL_62;
      case 'l':
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKAutoShortcutTemplateUsed);
        if (!PBReaderPlaceMark()
          || (FLOWLINKSchemaFLOWLINKAutoShortcutTemplateUsedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_68;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAutoShortcutTemplateUsed:", v17, 0, 0);
        goto LABEL_62;
      case 'm':
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionTier1);
        if (!PBReaderPlaceMark() || !FLOWLINKSchemaFLOWLINKActionTier1ReadFrom(v17, a2))
          goto LABEL_68;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkActionTier1:", v17, 0, 0);
        goto LABEL_62;
      case 'n':
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKActionParametersUpdated);
        if (!PBReaderPlaceMark()
          || (FLOWLINKSchemaFLOWLINKActionParametersUpdatedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_68;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setActionParameterUpdated:", v17, 0, 0);
        goto LABEL_62;
      case 'o':
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKAppShortcutFirstRunConfirmationContext);
        if (!PBReaderPlaceMark()
          || !FLOWLINKSchemaFLOWLINKAppShortcutFirstRunConfirmationContextReadFrom(v17, a2))
        {
          goto LABEL_68;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAppShortcutFirstRunConfirmationContext:", v17, 0, 0);
        goto LABEL_62;
      case 'p':
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKAppShortcutGeneralizedExecutionUsed);
        if (!PBReaderPlaceMark()
          || (FLOWLINKSchemaFLOWLINKAppShortcutGeneralizedExecutionUsedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_68;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAppShortcutGeneralizedExecutionUsed:", v17, 0, 0);
        goto LABEL_62;
      default:
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_63:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
        v17 = objc_alloc_init(FLOWSchemaFLOWEventMetadata);
        if (PBReaderPlaceMark() && FLOWSchemaFLOWEventMetadataReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setEventMetadata:", v17, 0, 0);
LABEL_62:

          goto LABEL_63;
        }
LABEL_68:

        return 0;
    }
  }
}

BOOL FLOWLINKSchemaFLOWLINKEntityDisambiguationContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  FLOWLINKSchemaFLOWLINKEntityDisambiguationFailed *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(FLOWLINKSchemaFLOWLINKEntityDisambiguationFailed);
        if (!PBReaderPlaceMark()
          || (FLOWLINKSchemaFLOWLINKEntityDisambiguationFailedReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setFailed:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(FLOWLINKSchemaFLOWLINKEntityDisambiguationStarted);
        if (!PBReaderPlaceMark()
          || (FLOWLINKSchemaFLOWLINKEntityDisambiguationStartedReadFrom(v18, a2) & 1) == 0)
        {
          goto LABEL_35;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(FLOWLINKSchemaFLOWLINKEntityDisambiguationEnded);
    if (!PBReaderPlaceMark()
      || (FLOWLINKSchemaFLOWLINKEntityDisambiguationEndedReadFrom(v18, a2) & 1) == 0)
    {
      goto LABEL_35;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLINKEntityDisambiguationEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLINKEntityDisambiguationFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLINKEntityDisambiguationStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setReason:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLinkActionCancelledReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setCancellationInitiator:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLinkActionEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLinkActionFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setReason:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWLINKSchemaFLOWLinkActionStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  FLOWLINKSchemaFLOWLINKAction *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(FLOWLINKSchemaFLOWLINKAction);
        if (!PBReaderPlaceMark() || (FLOWLINKSchemaFLOWLINKActionReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCurrentAction:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWAppContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  void *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setBundleId:", v17);
          goto LABEL_23;
        case 2u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setAppVersion:", v17);
LABEL_23:

          continue;
        case 3u:
          v19 = 0;
          v20 = 0;
          v21 = 0;
          while (2)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
              *(_QWORD *)(a2 + v22) = v23 + 1;
              v21 |= (unint64_t)(v24 & 0x7F) << v19;
              if (v24 < 0)
              {
                v19 += 7;
                v14 = v20++ >= 9;
                if (v14)
                {
                  v21 = 0;
                  goto LABEL_48;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v21 = 0;
LABEL_48:
          objc_msgSend(a1, "setIsSmartEnoughAppSelectionUsed:", v21 != 0);
          continue;
        case 4u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (v14)
                {
                  v31 = 0;
                  goto LABEL_53;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
          else
            v31 = v27;
LABEL_53:
          objc_msgSend(a1, "setAppResolutionType:", v31);
          continue;
        case 5u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v35 = *v3;
        v36 = *(_QWORD *)(a2 + v35);
        if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          break;
        v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
        *(_QWORD *)(a2 + v35) = v36 + 1;
        v34 |= (unint64_t)(v37 & 0x7F) << v32;
        if ((v37 & 0x80) == 0)
          goto LABEL_55;
        v32 += 7;
        v14 = v33++ >= 9;
        if (v14)
        {
          v38 = 0;
          goto LABEL_58;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_55:
      v38 = *(_BYTE *)(a2 + *v5) ? 0 : v34;
LABEL_58:
      objc_msgSend(a1, "setProtectedAppType:", v38);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWAppleMusicVoicePreviewOfferNotShownReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setReason:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWBriefingContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_42;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            v30 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
        v30 = *(_BYTE *)(a2 + *v5) ? 0 : v26;
LABEL_45:
        objc_msgSend(a1, "addEnabledFeatures:", v30);
      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_40:
        objc_msgSend(a1, "setBriefingAttribute:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL FLOWSchemaFLOWClientEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  FLOWSchemaFLOWStep *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 'e':
        v17 = objc_alloc_init(FLOWSchemaFLOWStep);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWStepReadFrom(v17, a2) & 1) == 0)
          goto LABEL_57;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFlowStep:", v17, 0, 0);
        goto LABEL_50;
      case 'f':
        v17 = objc_alloc_init(FLOWSchemaFLOWEntityContextTier1);
        if (!PBReaderPlaceMark() || !FLOWSchemaFLOWEntityContextTier1ReadFrom(v17, a2))
          goto LABEL_57;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFlowEntityContextTier1:", v17, 0, 0);
        goto LABEL_50;
      case 'g':
        v17 = objc_alloc_init(FLOWSchemaFLOWSmsAttachmentMetadataTier1);
        if (!PBReaderPlaceMark() || !FLOWSchemaFLOWSmsAttachmentMetadataTier1ReadFrom(v17, a2))
          goto LABEL_57;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSmsAttachmentMetadataTier1:", v17, 0, 0);
        goto LABEL_50;
      case 'h':
        v17 = objc_alloc_init(FLOWSchemaFLOWAppleMusicVoicePreviewOfferNotShown);
        if (!PBReaderPlaceMark()
          || (FLOWSchemaFLOWAppleMusicVoicePreviewOfferNotShownReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_57;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAppleMusicVoicePreviewOfferNotShown:", v17, 0, 0);
        goto LABEL_50;
      case 'i':
        v17 = objc_alloc_init(FLOWSchemaFLOWPegasusContextTier1);
        if (!PBReaderPlaceMark() || !FLOWSchemaFLOWPegasusContextTier1ReadFrom(v17, a2))
          goto LABEL_57;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPegasusContextTier1:", v17, 0, 0);
        goto LABEL_50;
      case 'j':
        v17 = objc_alloc_init(FLOWSchemaFLOWMediaPlayerPlaybackContextTier1);
        if (!PBReaderPlaceMark()
          || (FLOWSchemaFLOWMediaPlayerPlaybackContextTier1ReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_57;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setMediaPlayerPlaybackContextTier1:", v17, 0, 0);
        goto LABEL_50;
      case 'k':
        v17 = objc_alloc_init(FLOWSchemaFLOWMediaPlayerRadioStationContextTier1);
        if (!PBReaderPlaceMark() || !FLOWSchemaFLOWMediaPlayerRadioStationContextTier1ReadFrom(v17, a2))
          goto LABEL_57;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMediaPlayerRadioStationContextTier1:", v17, 0, 0);
        goto LABEL_50;
      case 'l':
        v17 = objc_alloc_init(FLOWSchemaFLOWDomainExecutionContext);
        if (!PBReaderPlaceMark() || !FLOWSchemaFLOWDomainExecutionContextReadFrom(v17, a2))
          goto LABEL_57;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFlowDomainExecutionContext:", v17, 0, 0);
        goto LABEL_50;
      case 'm':
        v17 = objc_alloc_init(FLOWSchemaFLOWLocationAccessPermissionPromptContext);
        if (!PBReaderPlaceMark() || !FLOWSchemaFLOWLocationAccessPermissionPromptContextReadFrom(v17, a2))
          goto LABEL_57;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLocationAccessPermissionPromptContext:", v17, 0, 0);
        goto LABEL_50;
      default:
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_51:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
        v17 = objc_alloc_init(FLOWSchemaFLOWEventMetadata);
        if (PBReaderPlaceMark() && FLOWSchemaFLOWEventMetadataReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setEventMetadata:", v17, 0, 0);
LABEL_50:

          goto LABEL_51;
        }
LABEL_57:

        return 0;
    }
  }
}

BOOL FLOWSchemaFLOWCrossIntentRankerResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addCrossDomainRankerScoreKeeper:", v17);
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (v17)
      objc_msgSend(a1, "addCrossIntentRankerScoreKeeper:", v17);
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL FLOWSchemaFLOWDomainContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  FLOWSchemaFLOWVoiceShortcutContext *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(FLOWSchemaFLOWVoiceShortcutContext);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWVoiceShortcutContextReadFrom(v17, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setVoiceShortcutContext:", v17, 0, 0);
        goto LABEL_54;
      case 2u:
        v17 = objc_alloc_init(FLOWSchemaFLOWHomeAutomationContext);
        if (!PBReaderPlaceMark() || !FLOWSchemaFLOWHomeAutomationContextReadFrom(v17, a2))
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setHomeAutomationContext:", v17, 0, 0);
        goto LABEL_54;
      case 3u:
        v17 = objc_alloc_init(FLOWSchemaFLOWPhoneCallContext);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWPhoneCallContextReadFrom(v17, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPhoneCallContext:", v17, 0, 0);
        goto LABEL_54;
      case 4u:
        v17 = objc_alloc_init(FLOWSchemaFLOWSmsContext);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWSmsContextReadFrom(v17, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSmsContext:", v17, 0, 0);
        goto LABEL_54;
      case 5u:
        v17 = objc_alloc_init(FLOWSchemaFLOWMediaPlayerContext);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWMediaPlayerContextReadFrom(v17, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMediaPlayerContext:", v17, 0, 0);
        goto LABEL_54;
      case 6u:
        v17 = objc_alloc_init(FLOWSchemaFLOWIdentityContext);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWIdentityContextReadFrom(v17, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIdentityContext:", v17, 0, 0);
        goto LABEL_54;
      case 7u:
        v17 = objc_alloc_init(FLOWSchemaFLOWBriefingContext);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWBriefingContextReadFrom(v17, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setBriefingContext:", v17, 0, 0);
        goto LABEL_54;
      case 8u:
        v17 = objc_alloc_init(FLOWSchemaFLOWPegasusContext);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWPegasusContextReadFrom(v17, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPegasusContext:", v17, 0, 0);
        goto LABEL_54;
      case 9u:
        v17 = objc_alloc_init(FLOWSchemaFLOWInformationPluginContext);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWInformationPluginContextReadFrom(v17, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setInformationPluginContext:", v17, 0, 0);
        goto LABEL_54;
      case 0xAu:
        v17 = objc_alloc_init(FLOWSchemaFLOWHomeCommunicationContext);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWHomeCommunicationContextReadFrom(v17, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setHomeCommunicationContext:", v17, 0, 0);
        goto LABEL_54;
      case 0xBu:
        v17 = objc_alloc_init(FLOWSchemaFLOWNotificationContext);
        if (PBReaderPlaceMark() && (FLOWSchemaFLOWNotificationContextReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setNotificationContext:", v17, 0, 0);
LABEL_54:

LABEL_55:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_58:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_55;
    }
  }
}

uint64_t FLOWSchemaFLOWEntityContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  SISchemaUUID *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_36:
        objc_msgSend(a1, "setNumberOfEntitiesShown:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL FLOWSchemaFLOWEntityContextTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  FLOWSchemaFLOWEntityTier1 *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(FLOWSchemaFLOWEntityTier1);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWEntityTier1ReadFrom(v18, a2) & 1) == 0)
        {
LABEL_36:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setEntitySelected:", v18, 0, 0);
        goto LABEL_31;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v18, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v18, 0, 0);
LABEL_31:

        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_33:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(FLOWSchemaFLOWEntityTier1);
    if (!PBReaderPlaceMark() || !FLOWSchemaFLOWEntityTier1ReadFrom(v18, a2))
      goto LABEL_36;
    PBReaderRecallMark();
    if (v18)
      objc_msgSend(a1, "addEntitiesPresented:", v18, 0, 0);
    goto LABEL_31;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWEntityTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setEntityId:", v17);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL FLOWSchemaFLOWEventMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_44;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTaskId:", v17, 0, 0);
        goto LABEL_40;
      case 2u:
        PBReaderReadString();
        v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setResultCandidateId:", v17);
        goto LABEL_40;
      case 3u:
        v17 = objc_alloc_init(SISchemaVersion);
        if (!PBReaderPlaceMark() || (SISchemaVersionReadFrom(v17, a2) & 1) == 0)
          goto LABEL_44;
        PBReaderRecallMark();
        objc_msgSend(a1, "setVersion:", v17, 0, 0);
        goto LABEL_40;
      case 4u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_44;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFlowId:", v17, 0, 0);
        goto LABEL_40;
      case 5u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_44;
        PBReaderRecallMark();
        objc_msgSend(a1, "setRequestId:", v17, 0, 0);
        goto LABEL_40;
      case 6u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_44;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTrpId:", v17, 0, 0);
        goto LABEL_40;
      case 7u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (PBReaderPlaceMark() && (SISchemaUUIDReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setSubRequestId:", v17, 0, 0);
LABEL_40:

LABEL_41:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_44:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_41;
    }
  }
}

uint64_t FLOWSchemaFLOWHomeAutomationCommandReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_79;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCommandId:", v17, 0, 0);
        goto LABEL_56;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_61;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_61:
        objc_msgSend(a1, "setCommandType:", v25, v47, v48);
        goto LABEL_77;
      case 3u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_66:
        objc_msgSend(a1, "setCommandOutcome:", v32, v47, v48);
        goto LABEL_77;
      case 4u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_71:
        objc_msgSend(a1, "setCommandErrorReason:", v39, v47, v48);
        goto LABEL_77;
      case 5u:
        v40 = 0;
        v41 = 0;
        v42 = 0;
        while (2)
        {
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              v14 = v41++ >= 9;
              if (v14)
              {
                v46 = 0;
                goto LABEL_76;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v46 = 0;
        else
          v46 = v42;
LABEL_76:
        objc_msgSend(a1, "setCommandDuration:", v46, v47, v48);
        goto LABEL_77;
      case 6u:
        v17 = objc_alloc_init(FLOWSchemaFLOWHomeAutomationRequest);
        v47 = 0;
        v48 = 0;
        if (PBReaderPlaceMark() && FLOWSchemaFLOWHomeAutomationRequestReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addHomeAutomationRequests:", v17, 0, 0);
LABEL_56:

LABEL_77:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_79:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_77;
    }
  }
}

BOOL FLOWSchemaFLOWHomeAutomationContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  FLOWSchemaFLOWHomeAutomationCommand *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 4)
      {
        v18 = objc_alloc_init(FLOWSchemaFLOWHomeAutomationCommand);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWHomeAutomationCommandReadFrom(v18, a2) & 1) == 0)
        {
LABEL_36:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setHomeAutomationCommand:", v18, 0, 0);
        goto LABEL_31;
      }
      if ((_DWORD)v17 == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        v18 = objc_alloc_init(FLOWSchemaFLOWHomeKitServiceResponse);
        if (!PBReaderPlaceMark() || !FLOWSchemaFLOWHomeKitServiceResponseReadFrom(v18, a2))
          goto LABEL_36;
        PBReaderRecallMark();
        if (v18)
          objc_msgSend(a1, "addHomeKitServiceResponse:", v18, 0, 0);
LABEL_31:

        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_33:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(FLOWSchemaFLOWHomeContext);
    if (!PBReaderPlaceMark() || (FLOWSchemaFLOWHomeContextReadFrom(v18, a2) & 1) == 0)
      goto LABEL_36;
    PBReaderRecallMark();
    objc_msgSend(a1, "setHomeContext:", v18, 0, 0);
    goto LABEL_31;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWHomeAutomationRequestReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_68;
        PBReaderRecallMark();
        objc_msgSend(a1, "setHomeAutomationRequestId:", v17, 0, 0);
        goto LABEL_50;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_55;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_55:
        objc_msgSend(a1, "setHomeAutomationRequestType:", v25);
        goto LABEL_66;
      case 3u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_60:
        objc_msgSend(a1, "setHomeAutomationRequestOutcome:", v32);
        goto LABEL_66;
      case 4u:
        PBReaderReadString();
        v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addHomeAutomationRequestErrorReason:", v17);
        goto LABEL_50;
      case 5u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_65;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_65:
        objc_msgSend(a1, "setHomeAutomationRequestDuration:", v39);
        goto LABEL_66;
      case 6u:
        v17 = objc_alloc_init(FLOWSchemaFLOWHomeAutomationRequestMetadata);
        if (PBReaderPlaceMark()
          && (FLOWSchemaFLOWHomeAutomationRequestMetadataReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setHomeAutomationRequestMetadata:", v17, 0, 0);
LABEL_50:

LABEL_66:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_68:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_66;
    }
  }
}

uint64_t FLOWSchemaFLOWHomeAutomationRequestMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  void *v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_75;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_77;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_75:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_77:
          objc_msgSend(a1, "setIsHomeAutomationRequestAsynchronous:", v19 != 0);
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  v30 = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v30 = 0;
          else
            v30 = v26;
LABEL_82:
          objc_msgSend(a1, "setTargetedEntityCount:", v30);
          continue;
        case 3u:
          v31 = 0;
          v32 = 0;
          v33 = 0;
          while (2)
          {
            v34 = *v3;
            v35 = *(_QWORD *)(a2 + v34);
            if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
              *(_QWORD *)(a2 + v34) = v35 + 1;
              v33 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                v14 = v32++ >= 9;
                if (v14)
                {
                  v37 = 0;
                  goto LABEL_87;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v37 = 0;
          else
            v37 = v33;
LABEL_87:
          objc_msgSend(a1, "setFulfilledEntityCount:", v37);
          continue;
        case 4u:
          PBReaderReadString();
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          if (v38)
            objc_msgSend(a1, "addTargetedEntityTypes:", v38);
          goto LABEL_52;
        case 5u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                v14 = v40++ >= 9;
                if (v14)
                {
                  v45 = 0;
                  goto LABEL_92;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v45 = 0;
          else
            v45 = v41;
LABEL_92:
          objc_msgSend(a1, "setSmallestTargetedContainer:", v45);
          continue;
        case 6u:
          PBReaderReadString();
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setTargetAttribute:", v38);
LABEL_52:

          continue;
        case 7u:
          v46 = 0;
          v47 = 0;
          v48 = 0;
          while (2)
          {
            v49 = *v3;
            v50 = *(_QWORD *)(a2 + v49);
            if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
              *(_QWORD *)(a2 + v49) = v50 + 1;
              v48 |= (unint64_t)(v51 & 0x7F) << v46;
              if (v51 < 0)
              {
                v46 += 7;
                v14 = v47++ >= 9;
                if (v14)
                {
                  v52 = 0;
                  goto LABEL_97;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v52 = 0;
          else
            v52 = v48;
LABEL_97:
          objc_msgSend(a1, "setConditionType:", v52);
          continue;
        case 8u:
          v53 = 0;
          v54 = 0;
          v55 = 0;
          while (2)
          {
            v56 = *v3;
            v57 = *(_QWORD *)(a2 + v56);
            if (v57 == -1 || v57 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
              *(_QWORD *)(a2 + v56) = v57 + 1;
              v55 |= (unint64_t)(v58 & 0x7F) << v53;
              if (v58 < 0)
              {
                v53 += 7;
                v14 = v54++ >= 9;
                if (v14)
                {
                  v55 = 0;
                  goto LABEL_101;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v55 = 0;
LABEL_101:
          objc_msgSend(a1, "setIsRecurring:", v55 != 0);
          continue;
        case 9u:
          v59 = 0;
          v60 = 0;
          v61 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v62 = *v3;
        v63 = *(_QWORD *)(a2 + v62);
        if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v4))
          break;
        v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v63);
        *(_QWORD *)(a2 + v62) = v63 + 1;
        v61 |= (unint64_t)(v64 & 0x7F) << v59;
        if ((v64 & 0x80) == 0)
          goto LABEL_103;
        v59 += 7;
        v14 = v60++ >= 9;
        if (v14)
        {
          v61 = 0;
          goto LABEL_105;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_103:
      if (*(_BYTE *)(a2 + *v5))
        v61 = 0;
LABEL_105:
      objc_msgSend(a1, "setIsIntentSelectionCacheHit:", v61 != 0);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWHomeCommunicationContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  FLOWSchemaFLOWHomeContext *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = objc_alloc_init(FLOWSchemaFLOWHomeContext);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWHomeContextReadFrom(v25, a2) & 1) == 0)
        {
LABEL_44:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setHomeContext:", v25, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 3)
        {
          if ((_DWORD)v17 == 2)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_38;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_41;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_41:
            objc_msgSend(a1, "setTaskType:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v25 = objc_alloc_init(FLOWSchemaFLOWHomeCommunicationSendOrReply);
        if (!PBReaderPlaceMark()
          || (FLOWSchemaFLOWHomeCommunicationSendOrReplyReadFrom(v25, a2) & 1) == 0)
        {
          goto LABEL_44;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSendOrReplyContext:", v25, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWHomeCommunicationSendOrReplyReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "addTargetType:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWHomeContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v23 = 0;
              goto LABEL_53;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
          else
            v23 = v19;
LABEL_53:
          objc_msgSend(a1, "setHomeCount:", v23);
          continue;
        case 2u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (v14)
                {
                  v31 = 0;
                  goto LABEL_58;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
          else
            v31 = v27;
LABEL_58:
          objc_msgSend(a1, "setHomePodCount:", v31);
          continue;
        case 3u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (2)
          {
            v35 = *v3;
            v36 = *(_QWORD *)(a2 + v35);
            if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
              *(_QWORD *)(a2 + v35) = v36 + 1;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                v14 = v33++ >= 9;
                if (v14)
                {
                  v38 = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
          else
            v38 = v34;
LABEL_63:
          objc_msgSend(a1, "setAppleTvCount:", v38);
          continue;
        case 4u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
        *(_QWORD *)(a2 + v42) = v43 + 1;
        v41 |= (unint64_t)(v44 & 0x7F) << v39;
        if ((v44 & 0x80) == 0)
          goto LABEL_65;
        v39 += 7;
        v14 = v40++ >= 9;
        if (v14)
        {
          v41 = 0;
          goto LABEL_67;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_65:
      if (*(_BYTE *)(a2 + *v5))
        v41 = 0;
LABEL_67:
      objc_msgSend(a1, "setHasCurrentHome:", v41 != 0);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWHomeKitServiceResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0)
            goto LABEL_50;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            v31 = 0;
            goto LABEL_53;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
        v31 = *(_BYTE *)(a2 + *v5) ? 0 : v27;
LABEL_53:
        objc_msgSend(a1, "setHomeKitServiceType:", v31);
      }
      else if ((_DWORD)v17 == 2)
      {
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (1)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            break;
          v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
          *(_QWORD *)(a2 + v35) = v36 + 1;
          v34 |= (unint64_t)(v37 & 0x7F) << v32;
          if ((v37 & 0x80) == 0)
            goto LABEL_55;
          v32 += 7;
          v14 = v33++ >= 9;
          if (v14)
          {
            v38 = 0;
            goto LABEL_58;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_55:
        v38 = *(_BYTE *)(a2 + *v5) ? 0 : v34;
LABEL_58:
        objc_msgSend(a1, "setNumServicesCompleted:", v38);
      }
      else if ((_DWORD)v17 == 3)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_45;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v24 = 0;
            goto LABEL_48;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        v24 = *(_BYTE *)(a2 + *v5) ? 0 : v20;
LABEL_48:
        objc_msgSend(a1, "setNumServicesFailed:", v24);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWIdentityContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  FLOWSchemaFLOWProfileSwitchContext *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(FLOWSchemaFLOWProfileSwitchContext);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWProfileSwitchContextReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setProfileSwitchContext:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWInformationPluginContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setExecutedPegasusDomain:", v24);

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_34;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_34:
        objc_msgSend(a1, "setEventType:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWKGQAExecutionReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  void *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_47;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v23 = 0;
              goto LABEL_50;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_47:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
          else
            v23 = v19;
LABEL_50:
          objc_msgSend(a1, "setKgQAUsecase:", v23);
          continue;
        case 2u:
          PBReaderReadString();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          if (v25)
            objc_msgSend(a1, "addAttributes:", v25);
          goto LABEL_38;
        case 3u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  v28 = 0;
                  goto LABEL_54;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
LABEL_54:
          objc_msgSend(a1, "setIsDisputedResponse:", v28 != 0);
          continue;
        case 4u:
          PBReaderReadString();
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setNlgKey:", v25);
LABEL_38:

          continue;
        case 5u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v35 = *v3;
        v36 = *(_QWORD *)(a2 + v35);
        if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          break;
        v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
        *(_QWORD *)(a2 + v35) = v36 + 1;
        v34 |= (unint64_t)(v37 & 0x7F) << v32;
        if ((v37 & 0x80) == 0)
          goto LABEL_56;
        v32 += 7;
        v14 = v33++ >= 9;
        if (v14)
        {
          v34 = 0;
          goto LABEL_58;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_56:
      if (*(_BYTE *)(a2 + *v5))
        v34 = 0;
LABEL_58:
      objc_msgSend(a1, "setIsWebExtractedFact:", v34 != 0);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL FLOWSchemaFLOWKGQAExecutionTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  void *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        if (v18)
          objc_msgSend(a1, "addSecondaryEntities:", v18);
        goto LABEL_26;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        if (v18)
          objc_msgSend(a1, "addPrimaryEntities:", v18);
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setAnswerId:", v18);
LABEL_26:

    goto LABEL_28;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWKeyboardUsageMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v23 = 0;
              goto LABEL_53;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
          else
            v23 = v19;
LABEL_53:
          objc_msgSend(a1, "setNumCharsAdded:", v23);
          continue;
        case 2u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (v14)
                {
                  v31 = 0;
                  goto LABEL_58;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
          else
            v31 = v27;
LABEL_58:
          objc_msgSend(a1, "setNumCharsDeleted:", v31);
          continue;
        case 3u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (2)
          {
            v35 = *v3;
            v36 = *(_QWORD *)(a2 + v35);
            if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
              *(_QWORD *)(a2 + v35) = v36 + 1;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                v14 = v33++ >= 9;
                if (v14)
                {
                  v38 = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
          else
            v38 = v34;
LABEL_63:
          objc_msgSend(a1, "setLevenshteinEditDistance:", v38);
          continue;
        case 4u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
        *(_QWORD *)(a2 + v42) = v43 + 1;
        v41 |= (unint64_t)(v44 & 0x7F) << v39;
        if ((v44 & 0x80) == 0)
          goto LABEL_65;
        v39 += 7;
        v14 = v40++ >= 9;
        if (v14)
        {
          v41 = 0;
          goto LABEL_67;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_65:
      if (*(_BYTE *)(a2 + *v5))
        v41 = 0;
LABEL_67:
      objc_msgSend(a1, "setIsEmojiUsed:", v41 != 0);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWLanguageConfidenceReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_42;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            v30 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
        v30 = *(_BYTE *)(a2 + *v5) ? 0 : v26;
LABEL_45:
        objc_msgSend(a1, "setLanguageCode:", v30);
      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_40:
        objc_msgSend(a1, "setConfidenceScore:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWLanguageConfidenceArrayReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  FLOWSchemaFLOWLanguageConfidence *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(FLOWSchemaFLOWLanguageConfidence);
        if (!PBReaderPlaceMark() || !FLOWSchemaFLOWLanguageConfidenceReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addLanguageConfidences:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWLanguageConfidenceMatrixReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  FLOWSchemaFLOWLanguageConfidenceArray *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(FLOWSchemaFLOWLanguageConfidenceArray);
        if (!PBReaderPlaceMark() || !FLOWSchemaFLOWLanguageConfidenceArrayReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addLanguageConfidenceArrays:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWMediaPlayerContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  FLOWSchemaFLOWholeHouseAudioDestinationContext *v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  char v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  uint64_t v98;
  char v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  uint64_t v105;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 2u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_120;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_123;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_120:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_123:
        objc_msgSend(a1, "setTaskType:", v23);
        goto LABEL_180;
      case 3u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v31 = 0;
                goto LABEL_128;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
        else
          v31 = v27;
LABEL_128:
        objc_msgSend(a1, "setMediaType:", v31);
        goto LABEL_180;
      case 4u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v34 = 0;
                goto LABEL_132;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v34 = 0;
LABEL_132:
        objc_msgSend(a1, "setIsWholeHouseAudio:", v34 != 0);
        goto LABEL_180;
      case 5u:
        v38 = objc_alloc_init(FLOWSchemaFLOWholeHouseAudioDestinationContext);
        if (!PBReaderPlaceMark()
          || (FLOWSchemaFLOWholeHouseAudioDestinationContextReadFrom(v38, a2) & 1) == 0)
        {
          goto LABEL_182;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setWholeHouseAudioDestinationContext:", v38, 0, 0);
        goto LABEL_83;
      case 6u:
        v39 = 0;
        v40 = 0;
        v41 = 0;
        while (2)
        {
          v42 = *v3;
          v43 = *(_QWORD *)(a2 + v42);
          if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v43 + 1;
            v41 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              v14 = v40++ >= 9;
              if (v14)
              {
                v41 = 0;
                goto LABEL_136;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v41 = 0;
LABEL_136:
        objc_msgSend(a1, "setIsMusicSubscriber:", v41 != 0);
        goto LABEL_180;
      case 7u:
        v45 = 0;
        v46 = 0;
        v47 = 0;
        while (2)
        {
          v48 = *v3;
          v49 = *(_QWORD *)(a2 + v48);
          if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v49);
            *(_QWORD *)(a2 + v48) = v49 + 1;
            v47 |= (unint64_t)(v50 & 0x7F) << v45;
            if (v50 < 0)
            {
              v45 += 7;
              v14 = v46++ >= 9;
              if (v14)
              {
                v51 = 0;
                goto LABEL_141;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v51 = 0;
        else
          v51 = v47;
LABEL_141:
        objc_msgSend(a1, "addActiveSubscriptions:", v51);
        goto LABEL_180;
      case 8u:
        v52 = 0;
        v53 = 0;
        v54 = 0;
        while (2)
        {
          v55 = *v3;
          v56 = *(_QWORD *)(a2 + v55);
          if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
            *(_QWORD *)(a2 + v55) = v56 + 1;
            v54 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              v14 = v53++ >= 9;
              if (v14)
              {
                v58 = 0;
                goto LABEL_146;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v58 = 0;
        else
          v58 = v54;
LABEL_146:
        objc_msgSend(a1, "setAppleMusicVoiceUserSubscriptionState:", v58);
        goto LABEL_180;
      case 9u:
        v59 = 0;
        v60 = 0;
        v61 = 0;
        while (2)
        {
          v62 = *v3;
          v63 = *(_QWORD *)(a2 + v62);
          if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v63);
            *(_QWORD *)(a2 + v62) = v63 + 1;
            v61 |= (unint64_t)(v64 & 0x7F) << v59;
            if (v64 < 0)
            {
              v59 += 7;
              v14 = v60++ >= 9;
              if (v14)
              {
                v65 = 0;
                goto LABEL_151;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v65 = 0;
        else
          v65 = v61;
LABEL_151:
        objc_msgSend(a1, "setAppleMusicVoicePreviewOfferNotShown:", v65);
        goto LABEL_180;
      case 0xAu:
        v66 = 0;
        v67 = 0;
        v68 = 0;
        while (2)
        {
          v69 = *v3;
          v70 = *(_QWORD *)(a2 + v69);
          if (v70 == -1 || v70 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v71 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v70);
            *(_QWORD *)(a2 + v69) = v70 + 1;
            v68 |= (unint64_t)(v71 & 0x7F) << v66;
            if (v71 < 0)
            {
              v66 += 7;
              v14 = v67++ >= 9;
              if (v14)
              {
                v68 = 0;
                goto LABEL_155;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v68 = 0;
LABEL_155:
        objc_msgSend(a1, "setIsAppleMusicVoiceEligible:", v68 != 0);
        goto LABEL_180;
      case 0xBu:
        v38 = objc_alloc_init(FLOWSchemaFLOWMediaPlayerPlaybackContext);
        if (PBReaderPlaceMark() && (FLOWSchemaFLOWMediaPlayerPlaybackContextReadFrom(v38, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setMediaPlayerPlaybackContext:", v38, 0, 0);
LABEL_83:

LABEL_180:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_182:

        return 0;
      case 0xCu:
        v72 = 0;
        v73 = 0;
        v74 = 0;
        while (2)
        {
          v75 = *v3;
          v76 = *(_QWORD *)(a2 + v75);
          if (v76 == -1 || v76 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v77 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v76);
            *(_QWORD *)(a2 + v75) = v76 + 1;
            v74 |= (unint64_t)(v77 & 0x7F) << v72;
            if (v77 < 0)
            {
              v72 += 7;
              v14 = v73++ >= 9;
              if (v14)
              {
                v74 = 0;
                goto LABEL_159;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v74 = 0;
LABEL_159:
        objc_msgSend(a1, "setIsSiriForAirPlayRequest:", v74 != 0);
        goto LABEL_180;
      case 0xDu:
        v78 = 0;
        v79 = 0;
        v80 = 0;
        while (2)
        {
          v81 = *v3;
          v82 = *(_QWORD *)(a2 + v81);
          if (v82 == -1 || v82 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v83 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v82);
            *(_QWORD *)(a2 + v81) = v82 + 1;
            v80 |= (unint64_t)(v83 & 0x7F) << v78;
            if (v83 < 0)
            {
              v78 += 7;
              v14 = v79++ >= 9;
              if (v14)
              {
                v84 = 0;
                goto LABEL_164;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v84 = 0;
        else
          v84 = v80;
LABEL_164:
        objc_msgSend(a1, "setAirPlayTargetedDevicesCount:", v84);
        goto LABEL_180;
      case 0xEu:
        v85 = 0;
        v86 = 0;
        v87 = 0;
        while (2)
        {
          v88 = *v3;
          v89 = *(_QWORD *)(a2 + v88);
          if (v89 == -1 || v89 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v90 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v89);
            *(_QWORD *)(a2 + v88) = v89 + 1;
            v87 |= (unint64_t)(v90 & 0x7F) << v85;
            if (v90 < 0)
            {
              v85 += 7;
              v14 = v86++ >= 9;
              if (v14)
              {
                v91 = 0;
                goto LABEL_169;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v91 = 0;
        else
          v91 = v87;
LABEL_169:
        objc_msgSend(a1, "setAirPlaySuccessfullyPlayingDevicesCount:", v91);
        goto LABEL_180;
      case 0xFu:
        v92 = 0;
        v93 = 0;
        v94 = 0;
        while (2)
        {
          v95 = *v3;
          v96 = *(_QWORD *)(a2 + v95);
          if (v96 == -1 || v96 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v97 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v96);
            *(_QWORD *)(a2 + v95) = v96 + 1;
            v94 |= (unint64_t)(v97 & 0x7F) << v92;
            if (v97 < 0)
            {
              v92 += 7;
              v14 = v93++ >= 9;
              if (v14)
              {
                v98 = 0;
                goto LABEL_174;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v98 = 0;
        else
          v98 = v94;
LABEL_174:
        objc_msgSend(a1, "setAirPlayRouteSettingStatus:", v98);
        goto LABEL_180;
      case 0x10u:
        v99 = 0;
        v100 = 0;
        v101 = 0;
        while (2)
        {
          v102 = *v3;
          v103 = *(_QWORD *)(a2 + v102);
          if (v103 == -1 || v103 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v104 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v103);
            *(_QWORD *)(a2 + v102) = v103 + 1;
            v101 |= (unint64_t)(v104 & 0x7F) << v99;
            if (v104 < 0)
            {
              v99 += 7;
              v14 = v100++ >= 9;
              if (v14)
              {
                v105 = 0;
                goto LABEL_179;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v105 = 0;
        else
          v105 = v101;
LABEL_179:
        objc_msgSend(a1, "setUserPersona:", v105);
        goto LABEL_180;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_180;
    }
  }
}

uint64_t FLOWSchemaFLOWMediaPlayerPlaybackContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_69;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v17, 0, 0);
        goto LABEL_51;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_56:
        objc_msgSend(a1, "setExecutionSource:", v25);
        goto LABEL_67;
      case 3u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_61;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_61:
        objc_msgSend(a1, "setEndpoint:", v32);
        goto LABEL_67;
      case 4u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_66:
        objc_msgSend(a1, "setContentSource:", v39);
        goto LABEL_67;
      case 5u:
        v17 = objc_alloc_init(FLOWSchemaFLOWMediaPlayerRadioStationContext);
        if (!PBReaderPlaceMark()
          || (FLOWSchemaFLOWMediaPlayerRadioStationContextReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_69;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setRadioStationContext:", v17, 0, 0);
        goto LABEL_51;
      case 6u:
        v17 = objc_alloc_init(FLOWSchemaFLOWMediaPlayerPlaylistContext);
        if (PBReaderPlaceMark() && (FLOWSchemaFLOWMediaPlayerPlaylistContextReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setPlaylistContext:", v17, 0, 0);
LABEL_51:

LABEL_67:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_69:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_67;
    }
  }
}

uint64_t FLOWSchemaFLOWMediaPlayerPlaybackContextTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_52;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v17, 0, 0);
        goto LABEL_43;
      case 2u:
        PBReaderReadString();
        v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setContentTitle:", v17);
        goto LABEL_43;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_50;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_50:
        objc_msgSend(a1, "setAdamId:", v25, v26, v27);
        goto LABEL_44;
      case 4u:
        PBReaderReadString();
        v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAdamIdString:", v17);
        goto LABEL_43;
      case 5u:
        v17 = objc_alloc_init(FLOWSchemaFLOWMediaPlayerMediaItem);
        v26 = 0;
        v27 = 0;
        if (!PBReaderPlaceMark() || !FLOWSchemaFLOWMediaPlayerMediaItemReadFrom(v17, a2))
          goto LABEL_52;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addSearchResults:", v17, 0, 0);
        goto LABEL_43;
      case 6u:
        v17 = objc_alloc_init(USOSchemaUSOGraph);
        if (!PBReaderPlaceMark() || !USOSchemaUSOGraphReadFrom(v17, a2))
          goto LABEL_52;
        PBReaderRecallMark();
        objc_msgSend(a1, "setU2UsoGraph:", v17, 0, 0);
        goto LABEL_43;
      case 7u:
        v17 = objc_alloc_init(USOSchemaUSOGraphTier1);
        if (PBReaderPlaceMark() && USOSchemaUSOGraphTier1ReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setU2UsoGraphTier1:", v17, 0, 0);
LABEL_43:

LABEL_44:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_52:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_44;
    }
  }
}

uint64_t FLOWSchemaFLOWMediaPlayerPlaylistContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setPlaylistSubtype:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWMediaPlayerRadioStationContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  SISchemaUUID *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_36:
        objc_msgSend(a1, "setRadioStationSubtype:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL FLOWSchemaFLOWMediaPlayerRadioStationContextTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v17, 0, 0);
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setStationSeedName:", v17);
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWPegasusContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  double v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_93;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v17, 0, 0);
        goto LABEL_70;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_77:
        objc_msgSend(a1, "setProductArea:", v25);
        goto LABEL_71;
      case 3u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_82:
        objc_msgSend(a1, "setPrimaryProvider:", v32);
        goto LABEL_71;
      case 4u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_87:
        objc_msgSend(a1, "addOtherProviders:", v39);
        goto LABEL_71;
      case 5u:
        v17 = objc_alloc_init(PEGASUSSchemaPEGASUSIntent);
        if (!PBReaderPlaceMark() || (PEGASUSSchemaPEGASUSIntentReadFrom(v17, a2, v40) & 1) == 0)
          goto LABEL_93;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntent:", v17, 0, 0);
        goto LABEL_70;
      case 6u:
        v41 = 0;
        v42 = 0;
        v43 = 0;
        while (2)
        {
          v44 = *v3;
          v45 = *(_QWORD *)(a2 + v44);
          if (v45 == -1 || v45 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v46 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v45);
            *(_QWORD *)(a2 + v44) = v45 + 1;
            v43 |= (unint64_t)(v46 & 0x7F) << v41;
            if (v46 < 0)
            {
              v41 += 7;
              v14 = v42++ >= 9;
              if (v14)
              {
                v43 = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v43 = 0;
LABEL_91:
        objc_msgSend(a1, "setIsHandOffExecution:", v43 != 0);
        goto LABEL_71;
      case 7u:
        v17 = objc_alloc_init(FLOWSchemaFLOWKGQAExecution);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWKGQAExecutionReadFrom(v17, a2) & 1) == 0)
          goto LABEL_93;
        PBReaderRecallMark();
        objc_msgSend(a1, "setKgQAExecution:", v17, 0, 0);
        goto LABEL_70;
      case 8u:
        v17 = objc_alloc_init(FLOWSchemaFLOWWebAnswerExecution);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWWebAnswerExecutionReadFrom(v17, a2) & 1) == 0)
          goto LABEL_93;
        PBReaderRecallMark();
        objc_msgSend(a1, "setWebAnswerExecution:", v17, 0, 0);
        goto LABEL_70;
      case 9u:
        v17 = objc_alloc_init(FLOWSchemaFLOWSPORTSExecution);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWSPORTSExecutionReadFrom(v17, a2) & 1) == 0)
          goto LABEL_93;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSportsExecution:", v17, 0, 0);
        goto LABEL_70;
      case 0xAu:
        v17 = objc_alloc_init(FLOWSchemaFLOWCrossIntentRankerResponse);
        if (!PBReaderPlaceMark() || !FLOWSchemaFLOWCrossIntentRankerResponseReadFrom(v17, a2))
          goto LABEL_93;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCrossIntentRankerResponse:", v17, 0, 0);
        goto LABEL_70;
      case 0xBu:
        v17 = objc_alloc_init(FLOWSchemaFLOWMapsExecution);
        if (PBReaderPlaceMark() && (FLOWSchemaFLOWMapsExecutionReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setMapsExecution:", v17, 0, 0);
LABEL_70:

LABEL_71:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_93:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_71;
    }
  }
}

BOOL FLOWSchemaFLOWPegasusContextTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_43;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v17, 0, 0);
        goto LABEL_39;
      case 2u:
        v17 = objc_alloc_init(PEGASUSSchemaPEGASUSIntentTier1);
        if (!PBReaderPlaceMark() || !PEGASUSSchemaPEGASUSIntentTier1ReadFrom(v17, a2))
          goto LABEL_43;
        PBReaderRecallMark();
        objc_msgSend(a1, "setIntentTier1:", v17, 0, 0);
        goto LABEL_39;
      case 3u:
        v17 = objc_alloc_init(FLOWSchemaFLOWKGQAExecutionTier1);
        if (!PBReaderPlaceMark() || !FLOWSchemaFLOWKGQAExecutionTier1ReadFrom(v17, a2))
          goto LABEL_43;
        PBReaderRecallMark();
        objc_msgSend(a1, "setKgQAExecutionTier1:", v17, 0, 0);
        goto LABEL_39;
      case 4u:
        v17 = objc_alloc_init(FLOWSchemaFLOWWebAnswerExecutionTier1);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWWebAnswerExecutionTier1ReadFrom(v17, a2) & 1) == 0)
          goto LABEL_43;
        PBReaderRecallMark();
        objc_msgSend(a1, "setWebAnswerExecutionTier1:", v17, 0, 0);
        goto LABEL_39;
      case 5u:
        v17 = objc_alloc_init(FLOWSchemaFLOWSportsExecutionTier1);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWSportsExecutionTier1ReadFrom(v17, a2) & 1) == 0)
          goto LABEL_43;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSportsExecutionTier1:", v17, 0, 0);
        goto LABEL_39;
      case 6u:
        v17 = objc_alloc_init(FLOWSchemaFLOWMapsExecutionTier1);
        if (PBReaderPlaceMark() && (FLOWSchemaFLOWMapsExecutionTier1ReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setMapsExecutionTier1:", v17, 0, 0);
LABEL_39:

LABEL_40:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_43:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_40;
    }
  }
}

uint64_t FLOWSchemaFLOWPhoneCallContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  FLOWSchemaFLOWPhoneCallEmergencyContext *v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 2u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_74;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_77;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_74:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_77:
        objc_msgSend(a1, "setPhoneCallType:", v23);
        goto LABEL_107;
      case 3u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v31 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
        else
          v31 = v27;
LABEL_82:
        objc_msgSend(a1, "addRecipientType:", v31);
        goto LABEL_107;
      case 4u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v38 = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v38 = 0;
        else
          v38 = v34;
LABEL_87:
        objc_msgSend(a1, "setPhoneCallAppType:", v38);
        goto LABEL_107;
      case 5u:
        v39 = objc_alloc_init(FLOWSchemaFLOWPhoneCallEmergencyContext);
        if (PBReaderPlaceMark() && (FLOWSchemaFLOWPhoneCallEmergencyContextReadFrom(v39, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setEmergencyContext:", v39, 0, 0);

LABEL_107:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 6u:
        v40 = 0;
        v41 = 0;
        v42 = 0;
        while (2)
        {
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              v14 = v41++ >= 9;
              if (v14)
              {
                v46 = 0;
                goto LABEL_92;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v46 = 0;
        else
          v46 = v42;
LABEL_92:
        objc_msgSend(a1, "addPersonType:", v46);
        goto LABEL_107;
      case 7u:
        v47 = 0;
        v48 = 0;
        v49 = 0;
        while (2)
        {
          v50 = *v3;
          v51 = *(_QWORD *)(a2 + v50);
          if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
            *(_QWORD *)(a2 + v50) = v51 + 1;
            v49 |= (unint64_t)(v52 & 0x7F) << v47;
            if (v52 < 0)
            {
              v47 += 7;
              v14 = v48++ >= 9;
              if (v14)
              {
                v49 = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v49 = 0;
LABEL_96:
        objc_msgSend(a1, "setIsThirdPartyFaceTime:", v49 != 0);
        goto LABEL_107;
      case 8u:
        v53 = 0;
        v54 = 0;
        v55 = 0;
        while (2)
        {
          v56 = *v3;
          v57 = *(_QWORD *)(a2 + v56);
          if (v57 == -1 || v57 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
            *(_QWORD *)(a2 + v56) = v57 + 1;
            v55 |= (unint64_t)(v58 & 0x7F) << v53;
            if (v58 < 0)
            {
              v53 += 7;
              v14 = v54++ >= 9;
              if (v14)
              {
                v59 = 0;
                goto LABEL_101;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v59 = 0;
        else
          v59 = v55;
LABEL_101:
        objc_msgSend(a1, "setSearchCallHistoryIntent:", v59);
        goto LABEL_107;
      case 9u:
        v60 = 0;
        v61 = 0;
        v62 = 0;
        while (2)
        {
          v63 = *v3;
          v64 = *(_QWORD *)(a2 + v63);
          if (v64 == -1 || v64 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v65 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v64);
            *(_QWORD *)(a2 + v63) = v64 + 1;
            v62 |= (unint64_t)(v65 & 0x7F) << v60;
            if (v65 < 0)
            {
              v60 += 7;
              v14 = v61++ >= 9;
              if (v14)
              {
                v66 = 0;
                goto LABEL_106;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v66 = 0;
        else
          v66 = v62;
LABEL_106:
        objc_msgSend(a1, "setUserPersona:", v66);
        goto LABEL_107;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_107;
    }
  }
}

uint64_t FLOWSchemaFLOWPhoneCallEmergencyContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setEmergencyCallType:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL FLOWSchemaFLOWPlatformContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  FLOWSchemaFLOWEntityContext *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(FLOWSchemaFLOWEntityContext);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWEntityContextReadFrom(v17, a2) & 1) == 0)
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEntityContext:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(FLOWSchemaFLOWEntityContext);
    if (!PBReaderPlaceMark() || (FLOWSchemaFLOWEntityContextReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEntityContextValue:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWProfileSwitchContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_57;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v23 = 0;
              goto LABEL_60;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_57:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
          else
            v23 = v19;
LABEL_60:
          objc_msgSend(a1, "setProfileSwitchMethod:", v23);
          continue;
        case 2u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (v14)
                {
                  v31 = 0;
                  goto LABEL_65;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
          else
            v31 = v27;
LABEL_65:
          objc_msgSend(a1, "setProfileSwitchByNameType:", v31);
          continue;
        case 3u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (2)
          {
            v35 = *v3;
            v36 = *(_QWORD *)(a2 + v35);
            if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
              *(_QWORD *)(a2 + v35) = v36 + 1;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                v14 = v33++ >= 9;
                if (v14)
                {
                  v38 = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
          else
            v38 = v34;
LABEL_70:
          objc_msgSend(a1, "setProfileSwitchOutcome:", v38);
          continue;
        case 4u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                v14 = v40++ >= 9;
                if (v14)
                {
                  v45 = 0;
                  goto LABEL_75;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v45 = 0;
          else
            v45 = v41;
LABEL_75:
          objc_msgSend(a1, "setProfileSwitchFailureReason:", v45);
          continue;
        case 5u:
          v46 = 0;
          v47 = 0;
          v48 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v49 = *v3;
        v50 = *(_QWORD *)(a2 + v49);
        if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
          break;
        v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
        *(_QWORD *)(a2 + v49) = v50 + 1;
        v48 |= (unint64_t)(v51 & 0x7F) << v46;
        if ((v51 & 0x80) == 0)
          goto LABEL_77;
        v46 += 7;
        v14 = v47++ >= 9;
        if (v14)
        {
          v52 = 0;
          goto LABEL_80;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_77:
      v52 = *(_BYTE *)(a2 + *v5) ? 0 : v48;
LABEL_80:
      objc_msgSend(a1, "setProfileSwitchDurationInMs:", v52);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWSPORTSExecutionReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_64;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v23 = 0;
              goto LABEL_67;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
          else
            v23 = v19;
LABEL_67:
          objc_msgSend(a1, "setSportsUsecase:", v23);
          continue;
        case 2u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (v14)
                {
                  v27 = 0;
                  goto LABEL_71;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v27 = 0;
LABEL_71:
          objc_msgSend(a1, "setIsSportsWatchFaceRequest:", v27 != 0);
          continue;
        case 3u:
          v31 = 0;
          v32 = 0;
          v33 = 0;
          while (2)
          {
            v34 = *v3;
            v35 = *(_QWORD *)(a2 + v34);
            if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
              *(_QWORD *)(a2 + v34) = v35 + 1;
              v33 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                v14 = v32++ >= 9;
                if (v14)
                {
                  v33 = 0;
                  goto LABEL_75;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v33 = 0;
LABEL_75:
          objc_msgSend(a1, "setIsSnippetNextCardRequest:", v33 != 0);
          continue;
        case 4u:
          v37 = 0;
          v38 = 0;
          v39 = 0;
          while (2)
          {
            v40 = *v3;
            v41 = *(_QWORD *)(a2 + v40);
            if (v41 == -1 || v41 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
              *(_QWORD *)(a2 + v40) = v41 + 1;
              v39 |= (unint64_t)(v42 & 0x7F) << v37;
              if (v42 < 0)
              {
                v37 += 7;
                v14 = v38++ >= 9;
                if (v14)
                {
                  v39 = 0;
                  goto LABEL_79;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v39 = 0;
LABEL_79:
          objc_msgSend(a1, "setIsMachineUtterance:", v39 != 0);
          continue;
        case 5u:
          v43 = 0;
          v44 = 0;
          v45 = 0;
          while (2)
          {
            v46 = *v3;
            v47 = *(_QWORD *)(a2 + v46);
            if (v47 == -1 || v47 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v47);
              *(_QWORD *)(a2 + v46) = v47 + 1;
              v45 |= (unint64_t)(v48 & 0x7F) << v43;
              if (v48 < 0)
              {
                v43 += 7;
                v14 = v44++ >= 9;
                if (v14)
                {
                  v45 = 0;
                  goto LABEL_83;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v45 = 0;
LABEL_83:
          objc_msgSend(a1, "setIsDisambiguation:", v45 != 0);
          continue;
        case 6u:
          v49 = 0;
          v50 = 0;
          v51 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v52 = *v3;
        v53 = *(_QWORD *)(a2 + v52);
        if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
          break;
        v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v53);
        *(_QWORD *)(a2 + v52) = v53 + 1;
        v51 |= (unint64_t)(v54 & 0x7F) << v49;
        if ((v54 & 0x80) == 0)
          goto LABEL_85;
        v49 += 7;
        v14 = v50++ >= 9;
        if (v14)
        {
          v51 = 0;
          goto LABEL_87;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_85:
      if (*(_BYTE *)(a2 + *v5))
        v51 = 0;
LABEL_87:
      objc_msgSend(a1, "setIsLiveScoreRequest:", v51 != 0);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL FLOWSchemaFLOWServerEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  FLOWSchemaFLOWEventMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 101)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(FLOWSchemaFLOWEventMetadata);
        if (!PBReaderPlaceMark() || !FLOWSchemaFLOWEventMetadataReadFrom(v17, a2))
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEventMetadata:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(FLOWSchemaFLOWStep);
    if (!PBReaderPlaceMark() || (FLOWSchemaFLOWStepReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setFlowStep:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWSmsAttachmentMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  SISchemaUUID *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v24 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_36:
        objc_msgSend(a1, "setSmsAttachmentType:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL FLOWSchemaFLOWSmsAttachmentMetadataTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v17, 0, 0);
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setForegroundAppBundleId:", v17);
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWSmsAudioContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setMessageDurationMs:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWSmsContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  FLOWSchemaFLOWTextMessageLength *v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  char v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char v126;
  uint64_t v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char v133;
  uint64_t v134;
  char v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  char v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char v146;
  uint64_t v147;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 2u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_180;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_183;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_180:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_183:
        objc_msgSend(a1, "setMessageType:", v23);
        goto LABEL_149;
      case 3u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v27 = 0;
                goto LABEL_187;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
LABEL_187:
        objc_msgSend(a1, "setEmojiUsed:", v27 != 0);
        goto LABEL_149;
      case 4u:
        v31 = 0;
        v32 = 0;
        v33 = 0;
        while (2)
        {
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (v14)
              {
                v33 = 0;
                goto LABEL_191;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v33 = 0;
LABEL_191:
        objc_msgSend(a1, "setKeyboardUsed:", v33 != 0);
        goto LABEL_149;
      case 5u:
        v37 = 0;
        v38 = 0;
        v39 = 0;
        while (2)
        {
          v40 = *v3;
          v41 = *(_QWORD *)(a2 + v40);
          if (v41 == -1 || v41 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
            *(_QWORD *)(a2 + v40) = v41 + 1;
            v39 |= (unint64_t)(v42 & 0x7F) << v37;
            if (v42 < 0)
            {
              v37 += 7;
              v14 = v38++ >= 9;
              if (v14)
              {
                v43 = 0;
                goto LABEL_196;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v43 = 0;
        else
          v43 = v39;
LABEL_196:
        objc_msgSend(a1, "addRecipientType:", v43);
        goto LABEL_149;
      case 6u:
        v44 = 0;
        v45 = 0;
        v46 = 0;
        while (2)
        {
          v47 = *v3;
          v48 = *(_QWORD *)(a2 + v47);
          if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
            *(_QWORD *)(a2 + v47) = v48 + 1;
            v46 |= (unint64_t)(v49 & 0x7F) << v44;
            if (v49 < 0)
            {
              v44 += 7;
              v14 = v45++ >= 9;
              if (v14)
              {
                v50 = 0;
                goto LABEL_201;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v50 = 0;
        else
          v50 = v46;
LABEL_201:
        objc_msgSend(a1, "setMessageDurationMs:", v50);
        goto LABEL_149;
      case 7u:
        v51 = objc_alloc_init(FLOWSchemaFLOWTextMessageLength);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWTextMessageLengthReadFrom(v51, a2) & 1) == 0)
          goto LABEL_269;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTextMessageLength:", v51, 0, 0);
        goto LABEL_148;
      case 8u:
        v51 = objc_alloc_init(FLOWSchemaFLOWSmsTextContext);
        if (!PBReaderPlaceMark() || !FLOWSchemaFLOWSmsTextContextReadFrom(v51, a2))
          goto LABEL_269;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTextContext:", v51, 0, 0);
        goto LABEL_148;
      case 9u:
        v51 = objc_alloc_init(FLOWSchemaFLOWSmsAudioContext);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWSmsAudioContextReadFrom(v51, a2) & 1) == 0)
          goto LABEL_269;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAudioContext:", v51, 0, 0);
        goto LABEL_148;
      case 0xAu:
        v52 = 0;
        v53 = 0;
        v54 = 0;
        while (2)
        {
          v55 = *v3;
          v56 = *(_QWORD *)(a2 + v55);
          if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
            *(_QWORD *)(a2 + v55) = v56 + 1;
            v54 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              v14 = v53++ >= 9;
              if (v14)
              {
                v58 = 0;
                goto LABEL_206;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v58 = 0;
        else
          v58 = v54;
LABEL_206:
        objc_msgSend(a1, "addPersonType:", v58);
        goto LABEL_149;
      case 0xBu:
        v59 = 0;
        v60 = 0;
        v61 = 0;
        while (2)
        {
          v62 = *v3;
          v63 = *(_QWORD *)(a2 + v62);
          if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v63);
            *(_QWORD *)(a2 + v62) = v63 + 1;
            v61 |= (unint64_t)(v64 & 0x7F) << v59;
            if (v64 < 0)
            {
              v59 += 7;
              v14 = v60++ >= 9;
              if (v14)
              {
                v65 = 0;
                goto LABEL_211;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v65 = 0;
        else
          v65 = v61;
LABEL_211:
        objc_msgSend(a1, "addReadMessageType:", v65);
        goto LABEL_149;
      case 0xCu:
        v66 = 0;
        v67 = 0;
        v68 = 0;
        while (2)
        {
          v69 = *v3;
          v70 = *(_QWORD *)(a2 + v69);
          if (v70 == -1 || v70 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v71 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v70);
            *(_QWORD *)(a2 + v69) = v70 + 1;
            v68 |= (unint64_t)(v71 & 0x7F) << v66;
            if (v71 < 0)
            {
              v66 += 7;
              v14 = v67++ >= 9;
              if (v14)
              {
                v68 = 0;
                goto LABEL_215;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v68 = 0;
LABEL_215:
        objc_msgSend(a1, "addIsMultiLingual:", v68 != 0);
        goto LABEL_149;
      case 0xDu:
        v72 = 0;
        v73 = 0;
        v74 = 0;
        while (2)
        {
          v75 = *v3;
          v76 = *(_QWORD *)(a2 + v75);
          if (v76 == -1 || v76 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v77 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v76);
            *(_QWORD *)(a2 + v75) = v76 + 1;
            v74 |= (unint64_t)(v77 & 0x7F) << v72;
            if (v77 < 0)
            {
              v72 += 7;
              v14 = v73++ >= 9;
              if (v14)
              {
                v74 = 0;
                goto LABEL_219;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v74 = 0;
LABEL_219:
        objc_msgSend(a1, "addIsReadable:", v74 != 0);
        goto LABEL_149;
      case 0xEu:
        v78 = 0;
        v79 = 0;
        v80 = 0;
        while (2)
        {
          v81 = *v3;
          v82 = *(_QWORD *)(a2 + v81);
          if (v82 == -1 || v82 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v83 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v82);
            *(_QWORD *)(a2 + v81) = v82 + 1;
            v80 |= (unint64_t)(v83 & 0x7F) << v78;
            if (v83 < 0)
            {
              v78 += 7;
              v14 = v79++ >= 9;
              if (v14)
              {
                v80 = 0;
                goto LABEL_223;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v80 = 0;
LABEL_223:
        objc_msgSend(a1, "addIsGroupMessage:", v80 != 0);
        goto LABEL_149;
      case 0xFu:
        v51 = objc_alloc_init(FLOWSchemaFLOWLanguageConfidenceMatrix);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWLanguageConfidenceMatrixReadFrom(v51, a2) & 1) == 0)
          goto LABEL_269;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLanguageConfidenceMatrix:", v51, 0, 0);
        goto LABEL_148;
      case 0x10u:
        v84 = 0;
        v85 = 0;
        v86 = 0;
        while (2)
        {
          v87 = *v3;
          v88 = *(_QWORD *)(a2 + v87);
          if (v88 == -1 || v88 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v89 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v88);
            *(_QWORD *)(a2 + v87) = v88 + 1;
            v86 |= (unint64_t)(v89 & 0x7F) << v84;
            if (v89 < 0)
            {
              v84 += 7;
              v14 = v85++ >= 9;
              if (v14)
              {
                v86 = 0;
                goto LABEL_227;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v86 = 0;
LABEL_227:
        objc_msgSend(a1, "setIsSenderShortCode:", v86 != 0);
        goto LABEL_149;
      case 0x11u:
        v90 = 0;
        v91 = 0;
        v92 = 0;
        while (2)
        {
          v93 = *v3;
          v94 = *(_QWORD *)(a2 + v93);
          if (v94 == -1 || v94 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v95 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v94);
            *(_QWORD *)(a2 + v93) = v94 + 1;
            v92 |= (unint64_t)(v95 & 0x7F) << v90;
            if (v95 < 0)
            {
              v90 += 7;
              v14 = v91++ >= 9;
              if (v14)
              {
                v92 = 0;
                goto LABEL_231;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v92 = 0;
LABEL_231:
        objc_msgSend(a1, "setIsLongMessage:", v92 != 0);
        goto LABEL_149;
      case 0x12u:
        v96 = 0;
        v97 = 0;
        v98 = 0;
        while (2)
        {
          v99 = *v3;
          v100 = *(_QWORD *)(a2 + v99);
          if (v100 == -1 || v100 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v101 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v100);
            *(_QWORD *)(a2 + v99) = v100 + 1;
            v98 |= (unint64_t)(v101 & 0x7F) << v96;
            if (v101 < 0)
            {
              v96 += 7;
              v14 = v97++ >= 9;
              if (v14)
              {
                v98 = 0;
                goto LABEL_235;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v98 = 0;
LABEL_235:
        objc_msgSend(a1, "setIsReply:", v98 != 0);
        goto LABEL_149;
      case 0x13u:
        v102 = 0;
        v103 = 0;
        v104 = 0;
        while (2)
        {
          v105 = *v3;
          v106 = *(_QWORD *)(a2 + v105);
          if (v106 == -1 || v106 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v107 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v106);
            *(_QWORD *)(a2 + v105) = v106 + 1;
            v104 |= (unint64_t)(v107 & 0x7F) << v102;
            if (v107 < 0)
            {
              v102 += 7;
              v14 = v103++ >= 9;
              if (v14)
              {
                v108 = 0;
                goto LABEL_240;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v108 = 0;
        else
          v108 = v104;
LABEL_240:
        objc_msgSend(a1, "setAppendingActionReadMessagesCount:", v108);
        goto LABEL_149;
      case 0x14u:
        v109 = 0;
        v110 = 0;
        v111 = 0;
        while (2)
        {
          v112 = *v3;
          v113 = *(_QWORD *)(a2 + v112);
          if (v113 == -1 || v113 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v114 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v113);
            *(_QWORD *)(a2 + v112) = v113 + 1;
            v111 |= (unint64_t)(v114 & 0x7F) << v109;
            if (v114 < 0)
            {
              v109 += 7;
              v14 = v110++ >= 9;
              if (v14)
              {
                v111 = 0;
                goto LABEL_244;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v111 = 0;
LABEL_244:
        objc_msgSend(a1, "addIsSenderShortCodeList:", v111 != 0);
        goto LABEL_149;
      case 0x15u:
        v115 = 0;
        v116 = 0;
        v117 = 0;
        while (2)
        {
          v118 = *v3;
          v119 = *(_QWORD *)(a2 + v118);
          if (v119 == -1 || v119 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v120 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v119);
            *(_QWORD *)(a2 + v118) = v119 + 1;
            v117 |= (unint64_t)(v120 & 0x7F) << v115;
            if (v120 < 0)
            {
              v115 += 7;
              v14 = v116++ >= 9;
              if (v14)
              {
                v117 = 0;
                goto LABEL_248;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v117 = 0;
LABEL_248:
        objc_msgSend(a1, "addIsLongMessageList:", v117 != 0);
        goto LABEL_149;
      case 0x16u:
        v51 = objc_alloc_init(FLOWSchemaFLOWRichAttachmentIntelligenceFeatureUsage);
        if (PBReaderPlaceMark()
          && (FLOWSchemaFLOWRichAttachmentIntelligenceFeatureUsageReadFrom(v51, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setRichAttachmentIntelligenceFeatureUsage:", v51, 0, 0);
LABEL_148:

LABEL_149:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_269:

        return 0;
      case 0x17u:
        v121 = 0;
        v122 = 0;
        v123 = 0;
        while (2)
        {
          v124 = *v3;
          v125 = *(_QWORD *)(a2 + v124);
          if (v125 == -1 || v125 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v126 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v125);
            *(_QWORD *)(a2 + v124) = v125 + 1;
            v123 |= (unint64_t)(v126 & 0x7F) << v121;
            if (v126 < 0)
            {
              v121 += 7;
              v14 = v122++ >= 9;
              if (v14)
              {
                v127 = 0;
                goto LABEL_253;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v127 = 0;
        else
          v127 = v123;
LABEL_253:
        objc_msgSend(a1, "addMessageDurationsInSeconds:", v127);
        goto LABEL_149;
      case 0x18u:
        v128 = 0;
        v129 = 0;
        v130 = 0;
        while (2)
        {
          v131 = *v3;
          v132 = *(_QWORD *)(a2 + v131);
          if (v132 == -1 || v132 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v133 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v132);
            *(_QWORD *)(a2 + v131) = v132 + 1;
            v130 |= (unint64_t)(v133 & 0x7F) << v128;
            if (v133 < 0)
            {
              v128 += 7;
              v14 = v129++ >= 9;
              if (v14)
              {
                v134 = 0;
                goto LABEL_258;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v134 = 0;
        else
          v134 = v130;
LABEL_258:
        objc_msgSend(a1, "setUserPersona:", v134);
        goto LABEL_149;
      case 0x19u:
        v135 = 0;
        v136 = 0;
        v137 = 0;
        while (2)
        {
          v138 = *v3;
          v139 = *(_QWORD *)(a2 + v138);
          if (v139 == -1 || v139 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v140 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v139);
            *(_QWORD *)(a2 + v138) = v139 + 1;
            v137 |= (unint64_t)(v140 & 0x7F) << v135;
            if (v140 < 0)
            {
              v135 += 7;
              v14 = v136++ >= 9;
              if (v14)
              {
                v137 = 0;
                goto LABEL_262;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v137 = 0;
LABEL_262:
        objc_msgSend(a1, "setIsSummarized:", v137 != 0);
        goto LABEL_149;
      case 0x1Au:
        v141 = 0;
        v142 = 0;
        v143 = 0;
        while (2)
        {
          v144 = *v3;
          v145 = *(_QWORD *)(a2 + v144);
          if (v145 == -1 || v145 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v146 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v145);
            *(_QWORD *)(a2 + v144) = v145 + 1;
            v143 |= (unint64_t)(v146 & 0x7F) << v141;
            if (v146 < 0)
            {
              v141 += 7;
              v14 = v142++ >= 9;
              if (v14)
              {
                v147 = 0;
                goto LABEL_267;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v147 = 0;
        else
          v147 = v143;
LABEL_267:
        objc_msgSend(a1, "setSummarySourceType:", v147);
        goto LABEL_149;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_149;
    }
  }
}

uint64_t FLOWSchemaFLOWSmsTextContentMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  FLOWSchemaFLOWKeyboardUsageMetadata *v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_53;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_56;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_56:
        objc_msgSend(a1, "setMessageCharLength:", v23);
        goto LABEL_70;
      case 2u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v31 = 0;
                goto LABEL_61;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
        else
          v31 = v27;
LABEL_61:
        objc_msgSend(a1, "setMessageWordLength:", v31);
        goto LABEL_70;
      case 3u:
        v32 = objc_alloc_init(FLOWSchemaFLOWKeyboardUsageMetadata);
        if (PBReaderPlaceMark() && (FLOWSchemaFLOWKeyboardUsageMetadataReadFrom(v32, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setFlowKeyboardUsageMetadata:", v32, 0, 0);

LABEL_70:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 4u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v35 = 0;
                goto LABEL_65;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v35 = 0;
LABEL_65:
        objc_msgSend(a1, "setIsPunctuationUsed:", v35 != 0);
        goto LABEL_70;
      case 5u:
        v39 = 0;
        v40 = 0;
        v41 = 0;
        while (2)
        {
          v42 = *v3;
          v43 = *(_QWORD *)(a2 + v42);
          if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v43 + 1;
            v41 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              v14 = v40++ >= 9;
              if (v14)
              {
                v41 = 0;
                goto LABEL_69;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v41 = 0;
LABEL_69:
        objc_msgSend(a1, "setIsPayloadMultilingual:", v41 != 0);
        goto LABEL_70;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_70;
    }
  }
}

BOOL FLOWSchemaFLOWSmsTextContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  FLOWSchemaFLOWSmsTextContentMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(FLOWSchemaFLOWSmsTextContentMetadata);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWSmsTextContentMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSmsTextContentMetadata:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(FLOWSchemaFLOWSmsAttachmentMetadata);
    if (!PBReaderPlaceMark() || (FLOWSchemaFLOWSmsAttachmentMetadataReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setSmsAttachmentMetadata:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWSportsExecutionTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  void *v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v15)
          v16 = 1;
        else
          v16 = (v10 & 7) == 4;
        if (!v16)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v17 = 0;
              v18 = 0;
              v19 = 0;
              break;
            case 2u:
              PBReaderReadString();
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              if (v25)
                objc_msgSend(a1, "addLeague:", v25);
              goto LABEL_36;
            case 3u:
              PBReaderReadString();
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              if (v25)
                objc_msgSend(a1, "addAthleteEntities:", v25);
              goto LABEL_36;
            case 4u:
              PBReaderReadString();
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              if (v25)
                objc_msgSend(a1, "addTeamEntities:", v25);
              goto LABEL_36;
            case 5u:
              PBReaderReadString();
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              if (v25)
                objc_msgSend(a1, "addEventEntities:", v25);
LABEL_36:

              goto LABEL_42;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_42:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_38;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v23 = 0;
              goto LABEL_41;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
          else
            v23 = v19;
LABEL_41:
          objc_msgSend(a1, "addSportName:", v23);
          goto LABEL_42;
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWStateReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  FLOWSchemaFLOWStateReason *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (FLOWSchemaFLOWStateReason *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setCurrentTaskName:", v17);
        goto LABEL_35;
      case 2u:
        PBReaderReadString();
        v17 = (FLOWSchemaFLOWStateReason *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setCurrentTaskType:", v17);
        goto LABEL_35;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_42;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_42:
        objc_msgSend(a1, "setFlowStateType:", v25);
        goto LABEL_36;
      case 4u:
        v17 = objc_alloc_init(FLOWSchemaFLOWStateReason);
        if (PBReaderPlaceMark() && (FLOWSchemaFLOWStateReasonReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setFlowStateReason:", v17, 0, 0);
LABEL_35:

LABEL_36:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 5u:
        PBReaderReadString();
        v17 = (FLOWSchemaFLOWStateReason *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setResolvedSlotName:", v17);
        goto LABEL_35;
      case 6u:
        PBReaderReadString();
        v17 = (FLOWSchemaFLOWStateReason *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setFlowStateReasonDescription:", v17);
        goto LABEL_35;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_36;
    }
  }
}

uint64_t FLOWSchemaFLOWStateReasonReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setStatusReason:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWStepReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  FLOWSchemaFLOWState *v32;
  uint64_t v33;
  uint64_t v34;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_56;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_59;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_56:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_59:
        objc_msgSend(a1, "setSequenceNum:", v23, v33, v34);
        goto LABEL_53;
      case 2u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v31 = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
        else
          v31 = v27;
LABEL_64:
        objc_msgSend(a1, "setTimestampMs:", v31, v33, v34);
        goto LABEL_53;
      case 3u:
        v32 = objc_alloc_init(FLOWSchemaFLOWState);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWStateReadFrom(v32, a2) & 1) == 0)
          goto LABEL_66;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFlowState:", v32, 0, 0);
        goto LABEL_52;
      case 4u:
        v32 = objc_alloc_init(FLOWSchemaFLOWAppContext);
        if (!PBReaderPlaceMark() || (FLOWSchemaFLOWAppContextReadFrom(v32, a2) & 1) == 0)
          goto LABEL_66;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAppContext:", v32, 0, 0);
        goto LABEL_52;
      case 5u:
        v32 = objc_alloc_init(FLOWSchemaFLOWDomainContext);
        v33 = 0;
        v34 = 0;
        if (!PBReaderPlaceMark() || !FLOWSchemaFLOWDomainContextReadFrom(v32, a2))
          goto LABEL_66;
        PBReaderRecallMark();
        if (v32)
          objc_msgSend(a1, "addDomainContext:", v32, 0, 0);
        goto LABEL_52;
      case 6u:
        v32 = objc_alloc_init(FLOWSchemaFLOWPlatformContext);
        v33 = 0;
        v34 = 0;
        if (!PBReaderPlaceMark() || !FLOWSchemaFLOWPlatformContextReadFrom(v32, a2))
          goto LABEL_66;
        PBReaderRecallMark();
        if (v32)
          objc_msgSend(a1, "addPlatformContext:", v32, 0, 0);
        goto LABEL_52;
      case 7u:
        v32 = objc_alloc_init(FLOWSchemaFLOWPlatformContext);
        if (PBReaderPlaceMark() && FLOWSchemaFLOWPlatformContextReadFrom(v32, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setPlatformRelatedContext:", v32, 0, 0);
LABEL_52:

LABEL_53:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_66:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_53;
    }
  }
}

uint64_t FLOWSchemaFLOWTextMessageLengthReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_42;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            v30 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
        v30 = *(_BYTE *)(a2 + *v5) ? 0 : v26;
LABEL_45:
        objc_msgSend(a1, "setMessageCharLength:", v30);
      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_40:
        objc_msgSend(a1, "setMessageWordLength:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL FLOWSchemaFLOWVoiceShortcutActionReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setAppId:", v17);
          goto LABEL_25;
        case 2u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setIntentCategory:", v17);
          goto LABEL_25;
        case 3u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setIntentName:", v17);
          goto LABEL_25;
        case 4u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setIntentNLDomain:", v17);
LABEL_25:

          goto LABEL_26;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_26:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWVoiceShortcutContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  FLOWSchemaFLOWVoiceShortcutAction *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(FLOWSchemaFLOWVoiceShortcutAction);
        if (!PBReaderPlaceMark() || !FLOWSchemaFLOWVoiceShortcutActionReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addVoiceShortcutAction:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWWebAnswerExecutionReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_64;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v23 = 0;
              goto LABEL_67;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
          else
            v23 = v19;
LABEL_67:
          objc_msgSend(a1, "setAnswerType:", v23);
          continue;
        case 2u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (v14)
                {
                  v31 = 0;
                  goto LABEL_72;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
          else
            v31 = v27;
LABEL_72:
          objc_msgSend(a1, "setAllowListType:", v31);
          continue;
        case 3u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (2)
          {
            v35 = *v3;
            v36 = *(_QWORD *)(a2 + v35);
            if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
              *(_QWORD *)(a2 + v35) = v36 + 1;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                v14 = v33++ >= 9;
                if (v14)
                {
                  v38 = 0;
                  goto LABEL_77;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
          else
            v38 = v34;
LABEL_77:
          objc_msgSend(a1, "setFuzzyMatchType:", v38);
          continue;
        case 4u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                v14 = v40++ >= 9;
                if (v14)
                {
                  v45 = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v45 = 0;
          else
            v45 = v41;
LABEL_82:
          objc_msgSend(a1, "setSubDomain:", v45);
          continue;
        case 5u:
          v46 = 0;
          v47 = 0;
          v48 = 0;
          while (2)
          {
            v49 = *v3;
            v50 = *(_QWORD *)(a2 + v49);
            if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
              *(_QWORD *)(a2 + v49) = v50 + 1;
              v48 |= (unint64_t)(v51 & 0x7F) << v46;
              if (v51 < 0)
              {
                v46 += 7;
                v14 = v47++ >= 9;
                if (v14)
                {
                  v52 = 0;
                  goto LABEL_87;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v52 = 0;
          else
            v52 = v48;
LABEL_87:
          objc_msgSend(a1, "setQuality:", v52);
          continue;
        case 6u:
          v53 = 0;
          v54 = 0;
          v55 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v56 = *v3;
        v57 = *(_QWORD *)(a2 + v56);
        if (v57 == -1 || v57 >= *(_QWORD *)(a2 + *v4))
          break;
        v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
        *(_QWORD *)(a2 + v56) = v57 + 1;
        v55 |= (unint64_t)(v58 & 0x7F) << v53;
        if ((v58 & 0x80) == 0)
          goto LABEL_89;
        v53 += 7;
        v14 = v54++ >= 9;
        if (v14)
        {
          v59 = 0;
          goto LABEL_92;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_89:
      v59 = *(_BYTE *)(a2 + *v5) ? 0 : v55;
LABEL_92:
      objc_msgSend(a1, "setAnswerClass:", v59);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWWebAnswerExecutionTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAnswerId:", v17);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t FLOWSchemaFLOWholeHouseAudioDestinationContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_42;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            v30 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
        v30 = *(_BYTE *)(a2 + *v5) ? 0 : v26;
LABEL_45:
        objc_msgSend(a1, "setEligibleDeviceCount:", v30);
      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_40:
        objc_msgSend(a1, "setDeviceSuccessCount:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL GRRSchemaGRRClientEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  GRRSchemaGRRHypothesisRankingContext *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 101)
      {
        if ((_DWORD)v17 == 102)
        {
          v18 = objc_alloc_init(GRRSchemaGRRHypothesisRankingContext);
          if (!PBReaderPlaceMark() || !GRRSchemaGRRHypothesisRankingContextReadFrom(v18, a2))
          {
LABEL_39:

            return 0;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "setHypothesisRankingContext:", v18, 0, 0);
          goto LABEL_35;
        }
        if ((_DWORD)v17 == 103)
        {
          v18 = objc_alloc_init(GRRSchemaGRRSystemErrorOccurred);
          if (!PBReaderPlaceMark() || (GRRSchemaGRRSystemErrorOccurredReadFrom(v18, a2) & 1) == 0)
            goto LABEL_39;
          PBReaderRecallMark();
          objc_msgSend(a1, "setSystemErrorOccurred:", v18, 0, 0);
          goto LABEL_35;
        }
      }
      else
      {
        if ((_DWORD)v17 == 1)
        {
          v18 = objc_alloc_init(GRRSchemaGRRClientEventMetadata);
          if (!PBReaderPlaceMark() || !GRRSchemaGRRClientEventMetadataReadFrom(v18, a2))
            goto LABEL_39;
          PBReaderRecallMark();
          objc_msgSend(a1, "setEventMetadata:", v18, 0, 0);
          goto LABEL_35;
        }
        if ((_DWORD)v17 == 101)
        {
          v18 = objc_alloc_init(GRRSchemaGRRFeatureExtractionContext);
          if (!PBReaderPlaceMark() || !GRRSchemaGRRFeatureExtractionContextReadFrom(v18, a2))
            goto LABEL_39;
          PBReaderRecallMark();
          objc_msgSend(a1, "setFeatureExtractionContext:", v18, 0, 0);
LABEL_35:

          continue;
        }
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL GRRSchemaGRRClientEventMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setGrrId:", v17, 0, 0);
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setResultCandidateId:", v17);
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t GRRSchemaGRRFeatureReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  GRRSchemaGRRStringList *v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  double v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  char v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  char v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  char v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char v150;
  char v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char v157;
  char v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  char v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  char v171;
  char v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char v178;
  char v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char v185;
  char v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  char v192;
  char v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  char v199;
  char v200;
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char v206;
  char v207;
  unsigned int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  char v213;
  uint64_t v214;
  char v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  char v221;
  uint64_t v222;
  char v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  char v229;
  char v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  char v236;
  char v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char v243;
  char v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  char v250;
  char v251;
  unsigned int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  char v257;
  char v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  char v264;
  char v265;
  unsigned int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  char v271;
  char v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  char v278;
  char v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  char v285;
  uint64_t v286;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *v5;
        v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *v5;
    v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(_BYTE *)(a2 + v16))
      v10 = 0;
LABEL_14:
    if (v17 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v19 = objc_alloc_init(GRRSchemaGRRStringList);
        if (!PBReaderPlaceMark() || (GRRSchemaGRRStringListReadFrom(v19, a2) & 1) == 0)
          goto LABEL_450;
        PBReaderRecallMark();
        objc_msgSend(a1, "setApplicationsInForeground:", v19, 0, 0);
        goto LABEL_292;
      case 2u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if (v27 < 0)
            {
              v21 += 7;
              v15 = v22++ >= 9;
              if (v15)
              {
                v28 = 0;
                goto LABEL_299;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v28 = 0;
        else
          v28 = v23;
LABEL_299:
        objc_msgSend(a1, "setAsrRank:", v28);
        goto LABEL_293;
      case 3u:
        v29 = 0;
        v30 = 0;
        v31 = 0;
        while (2)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          v34 = v33 + 1;
          if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v34;
            v31 |= (unint64_t)(v35 & 0x7F) << v29;
            if (v35 < 0)
            {
              v29 += 7;
              v15 = v30++ >= 9;
              if (v15)
              {
                v31 = 0;
                goto LABEL_303;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
LABEL_303:
        objc_msgSend(a1, "setCanResolveContactByRelationship:", v31 != 0);
        goto LABEL_293;
      case 4u:
        PBReaderReadString();
        v19 = (GRRSchemaGRRStringList *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setConfiguredSiriLanguage:", v19);
        goto LABEL_292;
      case 5u:
        v36 = 0;
        v37 = 0;
        v38 = 0;
        while (2)
        {
          v39 = *v3;
          v40 = *(_QWORD *)(a2 + v39);
          v41 = v40 + 1;
          if (v40 == -1 || v41 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
            *(_QWORD *)(a2 + v39) = v41;
            v38 |= (unint64_t)(v42 & 0x7F) << v36;
            if (v42 < 0)
            {
              v36 += 7;
              v15 = v37++ >= 9;
              if (v15)
              {
                v38 = 0;
                goto LABEL_307;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v38 = 0;
LABEL_307:
        objc_msgSend(a1, "setContactHasRequestedAddressDetail:", v38 != 0);
        goto LABEL_293;
      case 6u:
        v43 = *v3;
        v44 = *(_QWORD *)(a2 + v43);
        if (v44 <= 0xFFFFFFFFFFFFFFF7 && v44 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v45 = *(double *)(*(_QWORD *)(a2 + *v7) + v44);
          *(_QWORD *)(a2 + v43) = v44 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v45 = 0.0;
        }
        objc_msgSend(a1, "setContactMatchConfidence:", v45);
        goto LABEL_293;
      case 7u:
        v46 = 0;
        v47 = 0;
        v48 = 0;
        while (2)
        {
          v49 = *v3;
          v50 = *(_QWORD *)(a2 + v49);
          v51 = v50 + 1;
          if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
            *(_QWORD *)(a2 + v49) = v51;
            v48 |= (unint64_t)(v52 & 0x7F) << v46;
            if (v52 < 0)
            {
              v46 += 7;
              v15 = v47++ >= 9;
              if (v15)
              {
                v48 = 0;
                goto LABEL_311;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v48 = 0;
LABEL_311:
        objc_msgSend(a1, "setDeviceIsPlayingAudio:", v48 != 0);
        goto LABEL_293;
      case 8u:
        PBReaderReadString();
        v19 = (GRRSchemaGRRStringList *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setInputOrigin:", v19);
        goto LABEL_292;
      case 9u:
        v53 = 0;
        v54 = 0;
        v55 = 0;
        while (2)
        {
          v56 = *v3;
          v57 = *(_QWORD *)(a2 + v56);
          v58 = v57 + 1;
          if (v57 == -1 || v58 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
            *(_QWORD *)(a2 + v56) = v58;
            v55 |= (unint64_t)(v59 & 0x7F) << v53;
            if (v59 < 0)
            {
              v53 += 7;
              v15 = v54++ >= 9;
              if (v15)
              {
                v55 = 0;
                goto LABEL_315;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v55 = 0;
LABEL_315:
        objc_msgSend(a1, "setIsActiveAlarmPresent:", v55 != 0);
        goto LABEL_293;
      case 0xAu:
        v60 = 0;
        v61 = 0;
        v62 = 0;
        while (2)
        {
          v63 = *v3;
          v64 = *(_QWORD *)(a2 + v63);
          v65 = v64 + 1;
          if (v64 == -1 || v65 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v66 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v64);
            *(_QWORD *)(a2 + v63) = v65;
            v62 |= (unint64_t)(v66 & 0x7F) << v60;
            if (v66 < 0)
            {
              v60 += 7;
              v15 = v61++ >= 9;
              if (v15)
              {
                v62 = 0;
                goto LABEL_319;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v62 = 0;
LABEL_319:
        objc_msgSend(a1, "setIsActiveAppointmentPresent:", v62 != 0);
        goto LABEL_293;
      case 0xBu:
        v67 = 0;
        v68 = 0;
        v69 = 0;
        while (2)
        {
          v70 = *v3;
          v71 = *(_QWORD *)(a2 + v70);
          v72 = v71 + 1;
          if (v71 == -1 || v72 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v73 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v71);
            *(_QWORD *)(a2 + v70) = v72;
            v69 |= (unint64_t)(v73 & 0x7F) << v67;
            if (v73 < 0)
            {
              v67 += 7;
              v15 = v68++ >= 9;
              if (v15)
              {
                v69 = 0;
                goto LABEL_323;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v69 = 0;
LABEL_323:
        objc_msgSend(a1, "setIsAnnounceEnabled:", v69 != 0);
        goto LABEL_293;
      case 0xCu:
        v74 = 0;
        v75 = 0;
        v76 = 0;
        while (2)
        {
          v77 = *v3;
          v78 = *(_QWORD *)(a2 + v77);
          v79 = v78 + 1;
          if (v78 == -1 || v79 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v80 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v78);
            *(_QWORD *)(a2 + v77) = v79;
            v76 |= (unint64_t)(v80 & 0x7F) << v74;
            if (v80 < 0)
            {
              v74 += 7;
              v15 = v75++ >= 9;
              if (v15)
              {
                v76 = 0;
                goto LABEL_327;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v76 = 0;
LABEL_327:
        objc_msgSend(a1, "setIsAudioPlaying:", v76 != 0);
        goto LABEL_293;
      case 0xDu:
        v81 = 0;
        v82 = 0;
        v83 = 0;
        while (2)
        {
          v84 = *v3;
          v85 = *(_QWORD *)(a2 + v84);
          v86 = v85 + 1;
          if (v85 == -1 || v86 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v87 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v85);
            *(_QWORD *)(a2 + v84) = v86;
            v83 |= (unint64_t)(v87 & 0x7F) << v81;
            if (v87 < 0)
            {
              v81 += 7;
              v15 = v82++ >= 9;
              if (v15)
              {
                v83 = 0;
                goto LABEL_331;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v83 = 0;
LABEL_331:
        objc_msgSend(a1, "setIsAppInstalled:", v83 != 0);
        goto LABEL_293;
      case 0xEu:
        v88 = 0;
        v89 = 0;
        v90 = 0;
        while (2)
        {
          v91 = *v3;
          v92 = *(_QWORD *)(a2 + v91);
          v93 = v92 + 1;
          if (v92 == -1 || v93 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v94 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v92);
            *(_QWORD *)(a2 + v91) = v93;
            v90 |= (unint64_t)(v94 & 0x7F) << v88;
            if (v94 < 0)
            {
              v88 += 7;
              v15 = v89++ >= 9;
              if (v15)
              {
                v90 = 0;
                goto LABEL_335;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v90 = 0;
LABEL_335:
        objc_msgSend(a1, "setIsAppMatchPresent:", v90 != 0);
        goto LABEL_293;
      case 0xFu:
        v95 = 0;
        v96 = 0;
        v97 = 0;
        while (2)
        {
          v98 = *v3;
          v99 = *(_QWORD *)(a2 + v98);
          v100 = v99 + 1;
          if (v99 == -1 || v100 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v101 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v99);
            *(_QWORD *)(a2 + v98) = v100;
            v97 |= (unint64_t)(v101 & 0x7F) << v95;
            if (v101 < 0)
            {
              v95 += 7;
              v15 = v96++ >= 9;
              if (v15)
              {
                v97 = 0;
                goto LABEL_339;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v97 = 0;
LABEL_339:
        objc_msgSend(a1, "setIsAppRunning:", v97 != 0);
        goto LABEL_293;
      case 0x10u:
        v102 = 0;
        v103 = 0;
        v104 = 0;
        while (2)
        {
          v105 = *v3;
          v106 = *(_QWORD *)(a2 + v105);
          v107 = v106 + 1;
          if (v106 == -1 || v107 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v108 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v106);
            *(_QWORD *)(a2 + v105) = v107;
            v104 |= (unint64_t)(v108 & 0x7F) << v102;
            if (v108 < 0)
            {
              v102 += 7;
              v15 = v103++ >= 9;
              if (v15)
              {
                v104 = 0;
                goto LABEL_343;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v104 = 0;
LABEL_343:
        objc_msgSend(a1, "setIsArtistPresent:", v104 != 0);
        goto LABEL_293;
      case 0x11u:
        v109 = 0;
        v110 = 0;
        v111 = 0;
        while (2)
        {
          v112 = *v3;
          v113 = *(_QWORD *)(a2 + v112);
          v114 = v113 + 1;
          if (v113 == -1 || v114 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v115 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v113);
            *(_QWORD *)(a2 + v112) = v114;
            v111 |= (unint64_t)(v115 & 0x7F) << v109;
            if (v115 < 0)
            {
              v109 += 7;
              v15 = v110++ >= 9;
              if (v15)
              {
                v111 = 0;
                goto LABEL_347;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v111 = 0;
LABEL_347:
        objc_msgSend(a1, "setIsContactNameResolved:", v111 != 0);
        goto LABEL_293;
      case 0x12u:
        v116 = 0;
        v117 = 0;
        v118 = 0;
        while (2)
        {
          v119 = *v3;
          v120 = *(_QWORD *)(a2 + v119);
          v121 = v120 + 1;
          if (v120 == -1 || v121 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v122 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v120);
            *(_QWORD *)(a2 + v119) = v121;
            v118 |= (unint64_t)(v122 & 0x7F) << v116;
            if (v122 < 0)
            {
              v116 += 7;
              v15 = v117++ >= 9;
              if (v15)
              {
                v118 = 0;
                goto LABEL_351;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v118 = 0;
LABEL_351:
        objc_msgSend(a1, "setIsEmailAvailable:", v118 != 0);
        goto LABEL_293;
      case 0x13u:
        v123 = 0;
        v124 = 0;
        v125 = 0;
        while (2)
        {
          v126 = *v3;
          v127 = *(_QWORD *)(a2 + v126);
          v128 = v127 + 1;
          if (v127 == -1 || v128 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v129 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v127);
            *(_QWORD *)(a2 + v126) = v128;
            v125 |= (unint64_t)(v129 & 0x7F) << v123;
            if (v129 < 0)
            {
              v123 += 7;
              v15 = v124++ >= 9;
              if (v15)
              {
                v125 = 0;
                goto LABEL_355;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v125 = 0;
LABEL_355:
        objc_msgSend(a1, "setIsFollowUp:", v125 != 0);
        goto LABEL_293;
      case 0x14u:
        v130 = 0;
        v131 = 0;
        v132 = 0;
        while (2)
        {
          v133 = *v3;
          v134 = *(_QWORD *)(a2 + v133);
          v135 = v134 + 1;
          if (v134 == -1 || v135 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v136 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v134);
            *(_QWORD *)(a2 + v133) = v135;
            v132 |= (unint64_t)(v136 & 0x7F) << v130;
            if (v136 < 0)
            {
              v130 += 7;
              v15 = v131++ >= 9;
              if (v15)
              {
                v132 = 0;
                goto LABEL_359;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v132 = 0;
LABEL_359:
        objc_msgSend(a1, "setIsMediaItemEntityPresent:", v132 != 0);
        goto LABEL_293;
      case 0x15u:
        v137 = 0;
        v138 = 0;
        v139 = 0;
        while (2)
        {
          v140 = *v3;
          v141 = *(_QWORD *)(a2 + v140);
          v142 = v141 + 1;
          if (v141 == -1 || v142 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v143 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v141);
            *(_QWORD *)(a2 + v140) = v142;
            v139 |= (unint64_t)(v143 & 0x7F) << v137;
            if (v143 < 0)
            {
              v137 += 7;
              v15 = v138++ >= 9;
              if (v15)
              {
                v139 = 0;
                goto LABEL_363;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v139 = 0;
LABEL_363:
        objc_msgSend(a1, "setIsMessagingPossible:", v139 != 0);
        goto LABEL_293;
      case 0x16u:
        v144 = 0;
        v145 = 0;
        v146 = 0;
        while (2)
        {
          v147 = *v3;
          v148 = *(_QWORD *)(a2 + v147);
          v149 = v148 + 1;
          if (v148 == -1 || v149 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v150 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v148);
            *(_QWORD *)(a2 + v147) = v149;
            v146 |= (unint64_t)(v150 & 0x7F) << v144;
            if (v150 < 0)
            {
              v144 += 7;
              v15 = v145++ >= 9;
              if (v15)
              {
                v146 = 0;
                goto LABEL_367;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v146 = 0;
LABEL_367:
        objc_msgSend(a1, "setIsMessagingPossibleForSendMessageIntent:", v146 != 0);
        goto LABEL_293;
      case 0x17u:
        v151 = 0;
        v152 = 0;
        v153 = 0;
        while (2)
        {
          v154 = *v3;
          v155 = *(_QWORD *)(a2 + v154);
          v156 = v155 + 1;
          if (v155 == -1 || v156 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v157 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v155);
            *(_QWORD *)(a2 + v154) = v156;
            v153 |= (unint64_t)(v157 & 0x7F) << v151;
            if (v157 < 0)
            {
              v151 += 7;
              v15 = v152++ >= 9;
              if (v15)
              {
                v153 = 0;
                goto LABEL_371;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v153 = 0;
LABEL_371:
        objc_msgSend(a1, "setIsPhoneCallPossible:", v153 != 0);
        goto LABEL_293;
      case 0x18u:
        v158 = 0;
        v159 = 0;
        v160 = 0;
        while (2)
        {
          v161 = *v3;
          v162 = *(_QWORD *)(a2 + v161);
          v163 = v162 + 1;
          if (v162 == -1 || v163 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v164 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v162);
            *(_QWORD *)(a2 + v161) = v163;
            v160 |= (unint64_t)(v164 & 0x7F) << v158;
            if (v164 < 0)
            {
              v158 += 7;
              v15 = v159++ >= 9;
              if (v15)
              {
                v160 = 0;
                goto LABEL_375;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v160 = 0;
LABEL_375:
        objc_msgSend(a1, "setIsPhoneCallPossibleForPhoneCallIntent:", v160 != 0);
        goto LABEL_293;
      case 0x19u:
        v165 = 0;
        v166 = 0;
        v167 = 0;
        while (2)
        {
          v168 = *v3;
          v169 = *(_QWORD *)(a2 + v168);
          v170 = v169 + 1;
          if (v169 == -1 || v170 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v171 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v169);
            *(_QWORD *)(a2 + v168) = v170;
            v167 |= (unint64_t)(v171 & 0x7F) << v165;
            if (v171 < 0)
            {
              v165 += 7;
              v15 = v166++ >= 9;
              if (v15)
              {
                v167 = 0;
                goto LABEL_379;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v167 = 0;
LABEL_379:
        objc_msgSend(a1, "setIsPhoneNumberAvailable:", v167 != 0);
        goto LABEL_293;
      case 0x1Au:
        v172 = 0;
        v173 = 0;
        v174 = 0;
        while (2)
        {
          v175 = *v3;
          v176 = *(_QWORD *)(a2 + v175);
          v177 = v176 + 1;
          if (v176 == -1 || v177 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v178 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v176);
            *(_QWORD *)(a2 + v175) = v177;
            v174 |= (unint64_t)(v178 & 0x7F) << v172;
            if (v178 < 0)
            {
              v172 += 7;
              v15 = v173++ >= 9;
              if (v15)
              {
                v174 = 0;
                goto LABEL_383;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v174 = 0;
LABEL_383:
        objc_msgSend(a1, "setIsPhoneNumberContactResolvable:", v174 != 0);
        goto LABEL_293;
      case 0x1Bu:
        v179 = 0;
        v180 = 0;
        v181 = 0;
        while (2)
        {
          v182 = *v3;
          v183 = *(_QWORD *)(a2 + v182);
          v184 = v183 + 1;
          if (v183 == -1 || v184 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v185 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v183);
            *(_QWORD *)(a2 + v182) = v184;
            v181 |= (unint64_t)(v185 & 0x7F) << v179;
            if (v185 < 0)
            {
              v179 += 7;
              v15 = v180++ >= 9;
              if (v15)
              {
                v181 = 0;
                goto LABEL_387;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v181 = 0;
LABEL_387:
        objc_msgSend(a1, "setIsPreviousTurnSendEmptyMessage:", v181 != 0);
        goto LABEL_293;
      case 0x1Cu:
        v186 = 0;
        v187 = 0;
        v188 = 0;
        while (2)
        {
          v189 = *v3;
          v190 = *(_QWORD *)(a2 + v189);
          v191 = v190 + 1;
          if (v190 == -1 || v191 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v192 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v190);
            *(_QWORD *)(a2 + v189) = v191;
            v188 |= (unint64_t)(v192 & 0x7F) << v186;
            if (v192 < 0)
            {
              v186 += 7;
              v15 = v187++ >= 9;
              if (v15)
              {
                v188 = 0;
                goto LABEL_391;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v188 = 0;
LABEL_391:
        objc_msgSend(a1, "setIsSettingOn:", v188 != 0);
        goto LABEL_293;
      case 0x1Du:
        v193 = 0;
        v194 = 0;
        v195 = 0;
        while (2)
        {
          v196 = *v3;
          v197 = *(_QWORD *)(a2 + v196);
          v198 = v197 + 1;
          if (v197 == -1 || v198 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v199 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v197);
            *(_QWORD *)(a2 + v196) = v198;
            v195 |= (unint64_t)(v199 & 0x7F) << v193;
            if (v199 < 0)
            {
              v193 += 7;
              v15 = v194++ >= 9;
              if (v15)
              {
                v195 = 0;
                goto LABEL_395;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v195 = 0;
LABEL_395:
        objc_msgSend(a1, "setIsTimerActive:", v195 != 0);
        goto LABEL_293;
      case 0x1Eu:
        v200 = 0;
        v201 = 0;
        v202 = 0;
        while (2)
        {
          v203 = *v3;
          v204 = *(_QWORD *)(a2 + v203);
          v205 = v204 + 1;
          if (v204 == -1 || v205 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v206 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v204);
            *(_QWORD *)(a2 + v203) = v205;
            v202 |= (unint64_t)(v206 & 0x7F) << v200;
            if (v206 < 0)
            {
              v200 += 7;
              v15 = v201++ >= 9;
              if (v15)
              {
                v202 = 0;
                goto LABEL_399;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v202 = 0;
LABEL_399:
        objc_msgSend(a1, "setIsVideoPlaying:", v202 != 0);
        goto LABEL_293;
      case 0x1Fu:
        v207 = 0;
        v208 = 0;
        v209 = 0;
        while (2)
        {
          v210 = *v3;
          v211 = *(_QWORD *)(a2 + v210);
          v212 = v211 + 1;
          if (v211 == -1 || v212 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v213 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v211);
            *(_QWORD *)(a2 + v210) = v212;
            v209 |= (unint64_t)(v213 & 0x7F) << v207;
            if (v213 < 0)
            {
              v207 += 7;
              v15 = v208++ >= 9;
              if (v15)
              {
                v214 = 0;
                goto LABEL_404;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v214 = 0;
        else
          v214 = v209;
LABEL_404:
        objc_msgSend(a1, "setNumberOfContactsResolved:", v214);
        goto LABEL_293;
      case 0x20u:
        PBReaderReadString();
        v19 = (GRRSchemaGRRStringList *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPreviousFlowDomain:", v19);
        goto LABEL_292;
      case 0x21u:
        v215 = 0;
        v216 = 0;
        v217 = 0;
        while (2)
        {
          v218 = *v3;
          v219 = *(_QWORD *)(a2 + v218);
          v220 = v219 + 1;
          if (v219 == -1 || v220 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v221 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v219);
            *(_QWORD *)(a2 + v218) = v220;
            v217 |= (unint64_t)(v221 & 0x7F) << v215;
            if (v221 < 0)
            {
              v215 += 7;
              v15 = v216++ >= 9;
              if (v15)
              {
                v222 = 0;
                goto LABEL_409;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v222 = 0;
        else
          v222 = v217;
LABEL_409:
        objc_msgSend(a1, "setRequestTimeBeginMs:", v222);
        goto LABEL_293;
      case 0x22u:
        v223 = 0;
        v224 = 0;
        v225 = 0;
        while (2)
        {
          v226 = *v3;
          v227 = *(_QWORD *)(a2 + v226);
          v228 = v227 + 1;
          if (v227 == -1 || v228 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v229 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v227);
            *(_QWORD *)(a2 + v226) = v228;
            v225 |= (unint64_t)(v229 & 0x7F) << v223;
            if (v229 < 0)
            {
              v223 += 7;
              v15 = v224++ >= 9;
              if (v15)
              {
                v225 = 0;
                goto LABEL_413;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v225 = 0;
LABEL_413:
        objc_msgSend(a1, "setSharingAppActive:", v225 != 0);
        goto LABEL_293;
      case 0x23u:
        v230 = 0;
        v231 = 0;
        v232 = 0;
        while (2)
        {
          v233 = *v3;
          v234 = *(_QWORD *)(a2 + v233);
          v235 = v234 + 1;
          if (v234 == -1 || v235 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v236 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v234);
            *(_QWORD *)(a2 + v233) = v235;
            v232 |= (unint64_t)(v236 & 0x7F) << v230;
            if (v236 < 0)
            {
              v230 += 7;
              v15 = v231++ >= 9;
              if (v15)
              {
                v232 = 0;
                goto LABEL_417;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v232 = 0;
LABEL_417:
        objc_msgSend(a1, "setSharingEntityPresent:", v232 != 0);
        goto LABEL_293;
      case 0x24u:
        v237 = 0;
        v238 = 0;
        v239 = 0;
        while (2)
        {
          v240 = *v3;
          v241 = *(_QWORD *)(a2 + v240);
          v242 = v241 + 1;
          if (v241 == -1 || v242 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v243 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v241);
            *(_QWORD *)(a2 + v240) = v242;
            v239 |= (unint64_t)(v243 & 0x7F) << v237;
            if (v243 < 0)
            {
              v237 += 7;
              v15 = v238++ >= 9;
              if (v15)
              {
                v239 = 0;
                goto LABEL_421;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v239 = 0;
LABEL_421:
        objc_msgSend(a1, "setSharingRecipientPresent:", v239 != 0);
        goto LABEL_293;
      case 0x25u:
        v244 = 0;
        v245 = 0;
        v246 = 0;
        while (2)
        {
          v247 = *v3;
          v248 = *(_QWORD *)(a2 + v247);
          v249 = v248 + 1;
          if (v248 == -1 || v249 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v250 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v248);
            *(_QWORD *)(a2 + v247) = v249;
            v246 |= (unint64_t)(v250 & 0x7F) << v244;
            if (v250 < 0)
            {
              v244 += 7;
              v15 = v245++ >= 9;
              if (v15)
              {
                v246 = 0;
                goto LABEL_425;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v246 = 0;
LABEL_425:
        objc_msgSend(a1, "setSmsAttachmentExists:", v246 != 0);
        goto LABEL_293;
      case 0x26u:
        v251 = 0;
        v252 = 0;
        v253 = 0;
        while (2)
        {
          v254 = *v3;
          v255 = *(_QWORD *)(a2 + v254);
          v256 = v255 + 1;
          if (v255 == -1 || v256 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v257 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v255);
            *(_QWORD *)(a2 + v254) = v256;
            v253 |= (unint64_t)(v257 & 0x7F) << v251;
            if (v257 < 0)
            {
              v251 += 7;
              v15 = v252++ >= 9;
              if (v15)
              {
                v253 = 0;
                goto LABEL_429;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v253 = 0;
LABEL_429:
        objc_msgSend(a1, "setSmsAttributeRecipientExists:", v253 != 0);
        goto LABEL_293;
      case 0x27u:
        v258 = 0;
        v259 = 0;
        v260 = 0;
        while (2)
        {
          v261 = *v3;
          v262 = *(_QWORD *)(a2 + v261);
          v263 = v262 + 1;
          if (v262 == -1 || v263 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v264 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v262);
            *(_QWORD *)(a2 + v261) = v263;
            v260 |= (unint64_t)(v264 & 0x7F) << v258;
            if (v264 < 0)
            {
              v258 += 7;
              v15 = v259++ >= 9;
              if (v15)
              {
                v260 = 0;
                goto LABEL_433;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v260 = 0;
LABEL_433:
        objc_msgSend(a1, "setSmsAttributeSenderExists:", v260 != 0);
        goto LABEL_293;
      case 0x28u:
        v265 = 0;
        v266 = 0;
        v267 = 0;
        while (2)
        {
          v268 = *v3;
          v269 = *(_QWORD *)(a2 + v268);
          v270 = v269 + 1;
          if (v269 == -1 || v270 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v271 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v269);
            *(_QWORD *)(a2 + v268) = v270;
            v267 |= (unint64_t)(v271 & 0x7F) << v265;
            if (v271 < 0)
            {
              v265 += 7;
              v15 = v266++ >= 9;
              if (v15)
              {
                v267 = 0;
                goto LABEL_437;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v267 = 0;
LABEL_437:
        objc_msgSend(a1, "setSmsPhoneNumberMentioned:", v267 != 0);
        goto LABEL_293;
      case 0x29u:
        v272 = 0;
        v273 = 0;
        v274 = 0;
        while (2)
        {
          v275 = *v3;
          v276 = *(_QWORD *)(a2 + v275);
          v277 = v276 + 1;
          if (v276 == -1 || v277 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v278 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v276);
            *(_QWORD *)(a2 + v275) = v277;
            v274 |= (unint64_t)(v278 & 0x7F) << v272;
            if (v278 < 0)
            {
              v272 += 7;
              v15 = v273++ >= 9;
              if (v15)
              {
                v274 = 0;
                goto LABEL_441;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v274 = 0;
LABEL_441:
        objc_msgSend(a1, "setSmsTextPayloadExists:", v274 != 0);
        goto LABEL_293;
      case 0x2Au:
        v279 = 0;
        v280 = 0;
        v281 = 0;
        while (2)
        {
          v282 = *v3;
          v283 = *(_QWORD *)(a2 + v282);
          v284 = v283 + 1;
          if (v283 == -1 || v284 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v285 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v283);
            *(_QWORD *)(a2 + v282) = v284;
            v281 |= (unint64_t)(v285 & 0x7F) << v279;
            if (v285 < 0)
            {
              v279 += 7;
              v15 = v280++ >= 9;
              if (v15)
              {
                v286 = 0;
                goto LABEL_446;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v286 = 0;
        else
          v286 = v281;
LABEL_446:
        objc_msgSend(a1, "setTimeSinceLastValidRequestMs:", v286);
        goto LABEL_293;
      case 0x2Bu:
        v19 = objc_alloc_init(GRRSchemaGRRStringList);
        if (PBReaderPlaceMark() && (GRRSchemaGRRStringListReadFrom(v19, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setTopTopics:", v19, 0, 0);
LABEL_292:

LABEL_293:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_450:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_293;
    }
  }
}

BOOL GRRSchemaGRRFeatureExtractedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  GRRSchemaGRRFeature *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(GRRSchemaGRRFeature);
        if (!PBReaderPlaceMark() || !GRRSchemaGRRFeatureReadFrom(v18, a2))
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        if (v18)
          objc_msgSend(a1, "addFeatures:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(GRRSchemaGRRSource);
        if (!PBReaderPlaceMark() || (GRRSchemaGRRSourceReadFrom(v18, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSource:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = (GRRSchemaGRRFeature *)objc_claimAutoreleasedReturnValue();
    if (v18)
      objc_msgSend(a1, "addFeatureNames:", v18);
LABEL_30:

    goto LABEL_32;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL GRRSchemaGRRFeatureExtractionContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  GRRSchemaGRRFeatureExtracted *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 101)
      {
        v18 = objc_alloc_init(GRRSchemaGRRFeatureExtracted);
        if (!PBReaderPlaceMark() || !GRRSchemaGRRFeatureExtractedReadFrom(v18, a2))
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setEnded:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 100)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v18, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setContextId:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(GRRSchemaGRRFeatureExtractionStarted);
    if (!PBReaderPlaceMark() || (GRRSchemaGRRFeatureExtractionStartedReadFrom(v18, a2) & 1) == 0)
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setStartedOrChanged:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t GRRSchemaGRRFeatureExtractionStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  GRRSchemaGRRSource *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(GRRSchemaGRRSource);
        if (!PBReaderPlaceMark() || (GRRSchemaGRRSourceReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSource:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t GRRSchemaGRRFeatureFlagReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  void *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setFeatureFlagKey:", v23);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_33:
        objc_msgSend(a1, "setIsEnabled:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t GRRSchemaGRRHypothesisRankedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  GRRSchemaGRRRanking *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(GRRSchemaGRRRanking);
        if (!PBReaderPlaceMark() || !GRRSchemaGRRRankingReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addRankings:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL GRRSchemaGRRHypothesisRankingContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  GRRSchemaGRRHypothesisRanked *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 101)
      {
        v18 = objc_alloc_init(GRRSchemaGRRHypothesisRanked);
        if (!PBReaderPlaceMark() || (GRRSchemaGRRHypothesisRankedReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setEnded:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 100)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v18, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setContextId:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(GRRSchemaGRRHypothesisRankingStarted);
    if (!PBReaderPlaceMark() || !GRRSchemaGRRHypothesisRankingStartedReadFrom(v18, a2))
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setStartedOrChanged:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL GRRSchemaGRRHypothesisRankingStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  GRRSchemaGRRFeatureFlag *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (GRRSchemaGRRFeatureFlag *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAssetVersion:", v17);
LABEL_25:

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(GRRSchemaGRRFeatureFlag);
    if (!PBReaderPlaceMark() || !GRRSchemaGRRFeatureFlagReadFrom(v17, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addFeatureFlags:", v17, 0, 0);
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t GRRSchemaGRRRankingReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  SISchemaUUID *v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v28 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v28, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setParseId:", v28, 0, 0);

      }
      else if ((_DWORD)v19 == 3)
      {
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v31 = *(double *)(*(_QWORD *)(a2 + *v7) + v30);
          *(_QWORD *)(a2 + v29) = v30 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v31 = 0.0;
        }
        objc_msgSend(a1, "setScore:", v31);
      }
      else if ((_DWORD)v19 == 2)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v4))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0)
            goto LABEL_37;
          v20 += 7;
          v15 = v21++ >= 9;
          if (v15)
          {
            v27 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
        else
          v27 = v22;
LABEL_40:
        objc_msgSend(a1, "setParseType:", v27);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t GRRSchemaGRRSourceReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  SISchemaUUID *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSourceId:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_36:
        objc_msgSend(a1, "setSourceType:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t GRRSchemaGRRStringListReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addStringName:", v17);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t GRRSchemaGRRSystemErrorOccurredReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setErrorMessage:", v24);

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_34;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_34:
        objc_msgSend(a1, "setErrorCode:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HALSchemaHALAlarmContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setTimeSinceAlarmFiredInSeconds:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL HALSchemaHALClientEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  HALSchemaHALClientEventMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(HALSchemaHALClientEventMetadata);
        if (!PBReaderPlaceMark() || !HALSchemaHALClientEventMetadataReadFrom(v17, a2))
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEventMetadata:", v17, 0, 0);
        goto LABEL_45;
      case 2u:
        v17 = objc_alloc_init(HALSchemaHALCrossDeviceCommandExecutionContext);
        if (!PBReaderPlaceMark() || !HALSchemaHALCrossDeviceCommandExecutionContextReadFrom(v17, a2))
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCrossDeviceCommandContext:", v17, 0, 0);
        goto LABEL_45;
      case 3u:
        v17 = objc_alloc_init(HALSchemaHALLocalFetchContext);
        if (!PBReaderPlaceMark() || !HALSchemaHALLocalFetchContextReadFrom(v17, a2))
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLocalFetchContext:", v17, 0, 0);
        goto LABEL_45;
      case 4u:
        v17 = objc_alloc_init(HALSchemaHALContextCollectorFetchContext);
        if (!PBReaderPlaceMark() || !HALSchemaHALContextCollectorFetchContextReadFrom(v17, a2))
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setContextCollectorFetchContext:", v17, 0, 0);
        goto LABEL_45;
      case 5u:
        v17 = objc_alloc_init(HALSchemaHALForceFetchContext);
        if (!PBReaderPlaceMark() || !HALSchemaHALForceFetchContextReadFrom(v17, a2))
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setForceFetchContext:", v17, 0, 0);
        goto LABEL_45;
      case 6u:
        v17 = objc_alloc_init(HALSchemaHALCompanionDeviceDiscoveryContext);
        if (!PBReaderPlaceMark()
          || (HALSchemaHALCompanionDeviceDiscoveryContextReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_49;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCompanionDeviceDiscoveryContext:", v17, 0, 0);
        goto LABEL_45;
      case 7u:
        v17 = objc_alloc_init(HALSchemaHALCompanionDeviceCommunicationContext);
        if (!PBReaderPlaceMark()
          || (HALSchemaHALCompanionDeviceCommunicationContextReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_49;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCompanionDeviceCommunicationContext:", v17, 0, 0);
        goto LABEL_45;
      case 8u:
        v17 = objc_alloc_init(HALSchemaHALNearbyPersonalDevicesReported);
        if (PBReaderPlaceMark() && (HALSchemaHALNearbyPersonalDevicesReportedReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setNearbyPersonalDevicesReported:", v17, 0, 0);
LABEL_45:

LABEL_46:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_49:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_46;
    }
  }
}

BOOL HALSchemaHALClientEventMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setHalId:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SISchemaUUID);
    if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setRequestId:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL HALSchemaHALContextCollectorFetchContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setContextId:", v17, 0, 0);
        goto LABEL_33;
      case 2u:
        v17 = objc_alloc_init(HALSchemaHALContextCollectorFetchStarted);
        if (!PBReaderPlaceMark() || (HALSchemaHALContextCollectorFetchStartedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
        goto LABEL_33;
      case 3u:
        v17 = objc_alloc_init(HALSchemaHALContextCollectorFetchEnded);
        if (!PBReaderPlaceMark() || (HALSchemaHALContextCollectorFetchEndedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEnded:", v17, 0, 0);
        goto LABEL_33;
      case 4u:
        v17 = objc_alloc_init(HALSchemaHALContextCollectorFetchFailed);
        if (PBReaderPlaceMark() && (HALSchemaHALContextCollectorFetchFailedReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setFailed:", v17, 0, 0);
LABEL_33:

LABEL_34:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_36:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_34;
    }
  }
}

uint64_t HALSchemaHALContextCollectorFetchEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setNumDeviceContextsFetched:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HALSchemaHALContextCollectorFetchFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setFailureReason:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HALSchemaHALContextCollectorFetchStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setIsContextCollectorLocal:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL HALSchemaHALCrossDeviceCommandExecutionContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  HALSchemaHALCrossDeviceCommandExecutionFailed *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(HALSchemaHALCrossDeviceCommandExecutionFailed);
        if (!PBReaderPlaceMark()
          || (HALSchemaHALCrossDeviceCommandExecutionFailedReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setFailed:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(HALSchemaHALCrossDeviceCommandExecutionStarted);
        if (!PBReaderPlaceMark()
          || (HALSchemaHALCrossDeviceCommandExecutionStartedReadFrom(v18, a2) & 1) == 0)
        {
          goto LABEL_35;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(HALSchemaHALCrossDeviceCommandExecutionEnded);
    if (!PBReaderPlaceMark() || (HALSchemaHALCrossDeviceCommandExecutionEndedReadFrom(v18, a2) & 1) == 0)
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HALSchemaHALCrossDeviceCommandExecutionEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  HALSchemaHALDevice *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = objc_alloc_init(HALSchemaHALDevice);
          v40 = 0;
          v41 = 0;
          if (PBReaderPlaceMark() && HALSchemaHALDeviceReadFrom(v17, a2))
          {
            PBReaderRecallMark();
            if (v17)
              objc_msgSend(a1, "addSelected:", v17, 0, 0);

            continue;
          }

          return 0;
        case 2u:
          v19 = 0;
          v20 = 0;
          v21 = 0;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              goto LABEL_48;
            v19 += 7;
            v14 = v20++ >= 9;
            if (v14)
            {
              v25 = 0;
              goto LABEL_51;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_48:
          if (*(_BYTE *)(a2 + *v5))
            v25 = 0;
          else
            v25 = v21;
LABEL_51:
          objc_msgSend(a1, "setAction:", v25, v40, v41);
          continue;
        case 3u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  v32 = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v32 = 0;
          else
            v32 = v28;
LABEL_56:
          objc_msgSend(a1, "setActionResult:", v32, v40, v41);
          continue;
        case 4u:
          v33 = 0;
          v34 = 0;
          v35 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v36 = *v3;
        v37 = *(_QWORD *)(a2 + v36);
        if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          break;
        v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
        *(_QWORD *)(a2 + v36) = v37 + 1;
        v35 |= (unint64_t)(v38 & 0x7F) << v33;
        if ((v38 & 0x80) == 0)
          goto LABEL_58;
        v33 += 7;
        v14 = v34++ >= 9;
        if (v14)
        {
          v39 = 0;
          goto LABEL_61;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_58:
      v39 = *(_BYTE *)(a2 + *v5) ? 0 : v35;
LABEL_61:
      objc_msgSend(a1, "setHomeKitTarget:", v39, v40, v41);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HALSchemaHALCrossDeviceCommandExecutionFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_42;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            v30 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
        v30 = *(_BYTE *)(a2 + *v5) ? 0 : v26;
LABEL_45:
        objc_msgSend(a1, "setReason:", v30);
      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_40:
        objc_msgSend(a1, "setAction:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HALSchemaHALCrossDeviceCommandExecutionStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HALSchemaHALDeviceReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  HALSchemaHALMediaPlayerContext *v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_66;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_69;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_66:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_69:
        objc_msgSend(a1, "setDeviceProximity:", v23);
        goto LABEL_56;
      case 2u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v31 = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
        else
          v31 = v27;
LABEL_74:
        objc_msgSend(a1, "setDeviceFamily:", v31);
        goto LABEL_56;
      case 3u:
        PBReaderReadString();
        v32 = (HALSchemaHALMediaPlayerContext *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setSystemBuild:", v32);
        goto LABEL_55;
      case 4u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_79;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_79:
        objc_msgSend(a1, "setSiriInputLocale:", v39);
        goto LABEL_56;
      case 5u:
        v32 = objc_alloc_init(HALSchemaHALMediaPlayerContext);
        if (!PBReaderPlaceMark() || (HALSchemaHALMediaPlayerContextReadFrom(v32, a2) & 1) == 0)
          goto LABEL_86;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMediaPlayerContext:", v32, 0, 0);
        goto LABEL_55;
      case 6u:
        v32 = objc_alloc_init(HALSchemaHALAlarmContext);
        if (!PBReaderPlaceMark() || (HALSchemaHALAlarmContextReadFrom(v32, a2) & 1) == 0)
          goto LABEL_86;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAlarmContext:", v32, 0, 0);
        goto LABEL_55;
      case 7u:
        v32 = objc_alloc_init(HALSchemaHALTimerContext);
        if (!PBReaderPlaceMark() || (HALSchemaHALTimerContextReadFrom(v32, a2) & 1) == 0)
          goto LABEL_86;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTimerContext:", v32, 0, 0);
        goto LABEL_55;
      case 8u:
        v32 = objc_alloc_init(HALSchemaHALVoiceTriggerContext);
        if (PBReaderPlaceMark() && (HALSchemaHALVoiceTriggerContextReadFrom(v32, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setVoiceTriggerContext:", v32, 0, 0);
LABEL_55:

LABEL_56:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_86:

        return 0;
      case 9u:
        v40 = 0;
        v41 = 0;
        v42 = 0;
        while (2)
        {
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              v14 = v41++ >= 9;
              if (v14)
              {
                v46 = 0;
                goto LABEL_84;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v46 = 0;
        else
          v46 = v42;
LABEL_84:
        objc_msgSend(a1, "setPowerState:", v46);
        goto LABEL_56;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_56;
    }
  }
}

BOOL HALSchemaHALForceFetchContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setContextId:", v17, 0, 0);
        goto LABEL_33;
      case 2u:
        v17 = objc_alloc_init(HALSchemaHALForceFetchStarted);
        if (!PBReaderPlaceMark() || (HALSchemaHALForceFetchStartedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
        goto LABEL_33;
      case 3u:
        v17 = objc_alloc_init(HALSchemaHALForceFetchEnded);
        if (!PBReaderPlaceMark() || (HALSchemaHALForceFetchEndedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEnded:", v17, 0, 0);
        goto LABEL_33;
      case 4u:
        v17 = objc_alloc_init(HALSchemaHALForceFetchFailed);
        if (PBReaderPlaceMark() && (HALSchemaHALForceFetchFailedReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setFailed:", v17, 0, 0);
LABEL_33:

LABEL_34:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_36:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_34;
    }
  }
}

uint64_t HALSchemaHALForceFetchEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setNumDeviceContextsFetched:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HALSchemaHALForceFetchFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setFailureReason:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HALSchemaHALForceFetchStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL HALSchemaHALLocalFetchContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  HALSchemaHALLocalFetchFailed *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(HALSchemaHALLocalFetchFailed);
        if (!PBReaderPlaceMark() || (HALSchemaHALLocalFetchFailedReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setFailed:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(HALSchemaHALLocalFetchStarted);
        if (!PBReaderPlaceMark() || (HALSchemaHALLocalFetchStartedReadFrom(v18, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(HALSchemaHALLocalFetchEnded);
    if (!PBReaderPlaceMark() || (HALSchemaHALLocalFetchEndedReadFrom(v18, a2) & 1) == 0)
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HALSchemaHALLocalFetchEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HALSchemaHALLocalFetchFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setFailureReason:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HALSchemaHALLocalFetchStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HALSchemaHALMediaPlayerContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0)
            goto LABEL_50;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            v31 = 0;
            goto LABEL_53;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
        v31 = *(_BYTE *)(a2 + *v5) ? 0 : v27;
LABEL_53:
        objc_msgSend(a1, "setState:", v31);
      }
      else if ((_DWORD)v17 == 2)
      {
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (1)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            break;
          v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
          *(_QWORD *)(a2 + v35) = v36 + 1;
          v34 |= (unint64_t)(v37 & 0x7F) << v32;
          if ((v37 & 0x80) == 0)
            goto LABEL_55;
          v32 += 7;
          v14 = v33++ >= 9;
          if (v14)
          {
            v38 = 0;
            goto LABEL_58;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_55:
        v38 = *(_BYTE *)(a2 + *v5) ? 0 : v34;
LABEL_58:
        objc_msgSend(a1, "setType:", v38);
      }
      else if ((_DWORD)v17 == 3)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_45;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v24 = 0;
            goto LABEL_48;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        v24 = *(_BYTE *)(a2 + *v5) ? 0 : v20;
LABEL_48:
        objc_msgSend(a1, "setTimeSinceLastMediaPlaybackInSeconds:", v24);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HALSchemaHALTimerContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setTimeSinceTimerFiredInSeconds:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HALSchemaHALVoiceTriggerContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setTimeSinceVoiceTriggerHeardInSeconds:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HOMESchemaHOMEAssistantDeviceBirthdayReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_42;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            v30 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
        v30 = *(_BYTE *)(a2 + *v5) ? 0 : v26;
LABEL_45:
        objc_msgSend(a1, "setYear:", v30);
      }
      else if ((v10 >> 3) == 3)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_40:
        objc_msgSend(a1, "setMonth:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HOMESchemaHOMEAssistantInfoReportedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setHashedHomeId:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL HOMESchemaHOMEClientEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  HOMESchemaHOMEAssistantDeviceBirthday *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 102)
      {
        v18 = objc_alloc_init(HOMESchemaHOMEAssistantDeviceBirthday);
        if (!PBReaderPlaceMark() || (HOMESchemaHOMEAssistantDeviceBirthdayReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAssistantDeviceBirthday:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 101)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(HOMESchemaHOMEClientEventMetadata);
        if (!PBReaderPlaceMark() || (HOMESchemaHOMEClientEventMetadataReadFrom(v18, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEventMetadata:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(HOMESchemaHOMEAssistantInfoReported);
    if (!PBReaderPlaceMark() || (HOMESchemaHOMEAssistantInfoReportedReadFrom(v18, a2) & 1) == 0)
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setAssistantInfoReported:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t HOMESchemaHOMEClientEventMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setHomeComponentId:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL IHSchemaIHClientEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  IHSchemaIHClientEventMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(IHSchemaIHClientEventMetadata);
        if (!PBReaderPlaceMark() || (IHSchemaIHClientEventMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEventMetadata:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(IHSchemaIHModelEvaluationContext);
    if (!PBReaderPlaceMark() || !IHSchemaIHModelEvaluationContextReadFrom(v17, a2))
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setModelEvaluationContext:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t IHSchemaIHClientEventMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIhId:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL IHSchemaIHModelEvaluationContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  IHSchemaIHModelEvaluationEnded *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 100)
      {
        if ((_DWORD)v17 == 101)
        {
          v18 = objc_alloc_init(IHSchemaIHModelEvaluationEnded);
          if (!PBReaderPlaceMark() || (IHSchemaIHModelEvaluationEndedReadFrom(v18, a2) & 1) == 0)
          {
LABEL_39:

            return 0;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "setEnded:", v18, 0, 0);
          goto LABEL_35;
        }
        if ((_DWORD)v17 == 102)
        {
          v18 = objc_alloc_init(IHSchemaIHModelEvaluationFailed);
          if (!PBReaderPlaceMark() || (IHSchemaIHModelEvaluationFailedReadFrom(v18, a2) & 1) == 0)
            goto LABEL_39;
          PBReaderRecallMark();
          objc_msgSend(a1, "setFailed:", v18, 0, 0);
          goto LABEL_35;
        }
      }
      else
      {
        if ((_DWORD)v17 == 1)
        {
          v18 = objc_alloc_init(SISchemaUUID);
          if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v18, a2) & 1) == 0)
            goto LABEL_39;
          PBReaderRecallMark();
          objc_msgSend(a1, "setContextId:", v18, 0, 0);
          goto LABEL_35;
        }
        if ((_DWORD)v17 == 100)
        {
          v18 = objc_alloc_init(IHSchemaIHModelEvaluationStarted);
          if (!PBReaderPlaceMark() || (IHSchemaIHModelEvaluationStartedReadFrom(v18, a2) & 1) == 0)
            goto LABEL_39;
          PBReaderRecallMark();
          objc_msgSend(a1, "setStartedOrChanged:", v18, 0, 0);
LABEL_35:

          continue;
        }
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t IHSchemaIHModelEvaluationEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  IHSchemaIHScore *v17;
  double v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(IHSchemaIHScore);
        if (!PBReaderPlaceMark() || (IHSchemaIHScoreReadFrom(v17, a2, v18) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setScore:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t IHSchemaIHModelEvaluationFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setErrorCode:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t IHSchemaIHModelEvaluationStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setModelId:", v17);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t IHSchemaIHScoreReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v17;
  int v18;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v6))
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)(a2 + v12);
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        if (v10++ >= 9)
        {
          v11 = 0;
          v17 = *v6;
          v18 = *(unsigned __int8 *)(a2 + v17);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
      v17 = *v6;
      v18 = *(unsigned __int8 *)(a2 + v17);
      if (*(_BYTE *)(a2 + v17))
        v11 = 0;
LABEL_14:
      if (v18 || (v11 & 7) == 4)
        break;
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        v23 = *v4;
        v24 = *(_QWORD *)(a2 + v23);
        if (v24 <= 0xFFFFFFFFFFFFFFFBLL && v24 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v24);
          *(_QWORD *)(a2 + v23) = v24 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setLowerBoundary:", a3);
      }
      else if ((_DWORD)v20 == 2)
      {
        v25 = *v4;
        v26 = *(_QWORD *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFFBLL && v26 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v26);
          *(_QWORD *)(a2 + v25) = v26 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setUpperBoundary:", a3);
      }
      else if ((_DWORD)v20 == 1)
      {
        v21 = *v4;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setScore:", a3);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5));
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

uint64_t INFERENCESchemaINFERENCEBackgroundContactHandleSignalSetReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v17;
  int v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v6))
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)(a2 + v12);
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        if (v10++ >= 9)
        {
          v11 = 0;
          v17 = *v6;
          v18 = *(unsigned __int8 *)(a2 + v17);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
      v17 = *v6;
      v18 = *(unsigned __int8 *)(a2 + v17);
      if (*(_BYTE *)(a2 + v17))
        v11 = 0;
LABEL_14:
      if (v18 || (v11 & 7) == 4)
        break;
      if ((v11 >> 3) == 1)
      {
        v20 = *v4;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setPeopleSuggesterScore:", a3);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5));
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

uint64_t INFERENCESchemaINFERENCEBackgroundContactSignalSetReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  unint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  INFERENCESchemaINFERENCEBackgroundContactHandleSignalSet *v28;
  double v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v6))
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)(a2 + v12);
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        v16 = v10++ >= 9;
        if (v16)
        {
          v11 = 0;
          v17 = *v6;
          v18 = *(unsigned __int8 *)(a2 + v17);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
      v17 = *v6;
      v18 = *(unsigned __int8 *)(a2 + v17);
      if (*(_BYTE *)(a2 + v17))
        v11 = 0;
LABEL_14:
      if (v18 || (v11 & 7) == 4)
        break;
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        v28 = objc_alloc_init(INFERENCESchemaINFERENCEBackgroundContactHandleSignalSet);
        v33 = 0;
        v34 = 0;
        if (!PBReaderPlaceMark()
          || !INFERENCESchemaINFERENCEBackgroundContactHandleSignalSetReadFrom(v28, a2, v29))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v28)
          objc_msgSend(a1, "addHandlesWithBgPrivacySignals:", v28, 0, 0);

      }
      else if ((_DWORD)v20 == 2)
      {
        v30 = *v4;
        v31 = *(_QWORD *)(a2 + v30);
        if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v31);
          *(_QWORD *)(a2 + v30) = v31 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setPeopleSuggesterScoreSumForContact:", a3, v33, v34);
      }
      else if ((_DWORD)v20 == 1)
      {
        v21 = 0;
        v22 = 0;
        v23 = 0;
        while (1)
        {
          v24 = *v4;
          v25 = *(_QWORD *)(a2 + v24);
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v5))
            break;
          v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v25);
          *(_QWORD *)(a2 + v24) = v26;
          v23 |= (unint64_t)(v27 & 0x7F) << v21;
          if ((v27 & 0x80) == 0)
            goto LABEL_39;
          v21 += 7;
          v16 = v22++ >= 9;
          if (v16)
          {
            v23 = 0;
            goto LABEL_41;
          }
        }
        *(_BYTE *)(a2 + *v6) = 1;
LABEL_39:
        if (*(_BYTE *)(a2 + *v6))
          v23 = 0;
LABEL_41:
        objc_msgSend(a1, "setIsMatchWithRelationName:", v23 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5));
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

uint64_t INFERENCESchemaINFERENCECRRTrainingSampleCollectedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  INFERENCESchemaINFERENCEContactResolverConfig *v17;
  uint64_t result;
  double v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (INFERENCESchemaINFERENCEContactResolverConfig *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setIntentTypeName:", v17);
        goto LABEL_93;
      case 2u:
        v17 = objc_alloc_init(INFERENCESchemaINFERENCEContactResolverConfig);
        if (!PBReaderPlaceMark()
          || (INFERENCESchemaINFERENCEContactResolverConfigReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_128;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setResolverConfig:", v17, 0, 0);
        goto LABEL_93;
      case 3u:
        v17 = objc_alloc_init(INFERENCESchemaINFERENCETrialEnrollment);
        if (!PBReaderPlaceMark() || (INFERENCESchemaINFERENCETrialEnrollmentReadFrom(v17, a2) & 1) == 0)
          goto LABEL_128;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTrialEnrollment:", v17, 0, 0);
        goto LABEL_93;
      case 4u:
        PBReaderReadString();
        v17 = (INFERENCESchemaINFERENCEContactResolverConfig *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setModelVersion:", v17);
        goto LABEL_93;
      case 5u:
        v17 = objc_alloc_init(INFERENCESchemaINFERENCEContactMatch);
        v65 = 0;
        v66 = 0;
        if (!PBReaderPlaceMark()
          || !INFERENCESchemaINFERENCEContactMatchReadFrom(v17, a2, v19))
        {
          goto LABEL_128;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addMatches:", v17, 0, 0);
        goto LABEL_93;
      case 6u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (v14)
              {
                v26 = 0;
                goto LABEL_100;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v26 = 0;
        else
          v26 = v22;
LABEL_100:
        objc_msgSend(a1, "setResolutionState:", v26, v65, v66);
        goto LABEL_94;
      case 7u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (v14)
              {
                v33 = 0;
                goto LABEL_105;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v33 = 0;
        else
          v33 = v29;
LABEL_105:
        objc_msgSend(a1, "setResolutionType:", v33, v65, v66);
        goto LABEL_94;
      case 8u:
        v17 = objc_alloc_init(INFERENCESchemaINFERENCEPromptContext);
        if (!PBReaderPlaceMark() || (INFERENCESchemaINFERENCEPromptContextReadFrom(v17, a2) & 1) == 0)
          goto LABEL_128;
        PBReaderRecallMark();
        objc_msgSend(a1, "setForcePrompt:", v17, 0, 0);
        goto LABEL_93;
      case 9u:
        PBReaderReadString();
        v17 = (INFERENCESchemaINFERENCEContactResolverConfig *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addAnonymizedContactIdentifiers:", v17);
        goto LABEL_93;
      case 0xAu:
        v34 = 0;
        v35 = 0;
        v36 = 0;
        while (2)
        {
          v37 = *v3;
          v38 = *(_QWORD *)(a2 + v37);
          if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 1;
            v36 |= (unint64_t)(v39 & 0x7F) << v34;
            if (v39 < 0)
            {
              v34 += 7;
              v14 = v35++ >= 9;
              if (v14)
              {
                v36 = 0;
                goto LABEL_109;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v36 = 0;
LABEL_109:
        objc_msgSend(a1, "setIsInteractionExecuted:", v36 != 0);
        goto LABEL_94;
      case 0xBu:
        v40 = 0;
        v41 = 0;
        v42 = 0;
        while (2)
        {
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              v14 = v41++ >= 9;
              if (v14)
              {
                v42 = 0;
                goto LABEL_113;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v42 = 0;
LABEL_113:
        objc_msgSend(a1, "setIsInteractionSuccess:", v42 != 0);
        goto LABEL_94;
      case 0xCu:
        v46 = 0;
        v47 = 0;
        v48 = 0;
        while (2)
        {
          v49 = *v3;
          v50 = *(_QWORD *)(a2 + v49);
          if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
            *(_QWORD *)(a2 + v49) = v50 + 1;
            v48 |= (unint64_t)(v51 & 0x7F) << v46;
            if (v51 < 0)
            {
              v46 += 7;
              v14 = v47++ >= 9;
              if (v14)
              {
                v52 = 0;
                goto LABEL_118;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v52 = 0;
        else
          v52 = v48;
LABEL_118:
        objc_msgSend(a1, "setInteractionDurationInSecBucket:", v52, v65, v66);
        goto LABEL_94;
      case 0xDu:
        v17 = objc_alloc_init(INFERENCESchemaINFERENCEPotentialRetryContactInteractionContext);
        if (!PBReaderPlaceMark()
          || (INFERENCESchemaINFERENCEPotentialRetryContactInteractionContextReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_128;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setInteractionContext:", v17, 0, 0);
        goto LABEL_93;
      case 0xEu:
        v53 = 0;
        v54 = 0;
        v55 = 0;
        while (2)
        {
          v56 = *v3;
          v57 = *(_QWORD *)(a2 + v56);
          if (v57 == -1 || v57 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
            *(_QWORD *)(a2 + v56) = v57 + 1;
            v55 |= (unint64_t)(v58 & 0x7F) << v53;
            if (v58 < 0)
            {
              v53 += 7;
              v14 = v54++ >= 9;
              if (v14)
              {
                v55 = 0;
                goto LABEL_122;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v55 = 0;
LABEL_122:
        objc_msgSend(a1, "setIsPlusContactSuggesterEnabled:", v55 != 0);
        goto LABEL_94;
      case 0xFu:
        v59 = 0;
        v60 = 0;
        v61 = 0;
        while (2)
        {
          v62 = *v3;
          v63 = *(_QWORD *)(a2 + v62);
          if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v63);
            *(_QWORD *)(a2 + v62) = v63 + 1;
            v61 |= (unint64_t)(v64 & 0x7F) << v59;
            if (v64 < 0)
            {
              v59 += 7;
              v14 = v60++ >= 9;
              if (v14)
              {
                v61 = 0;
                goto LABEL_126;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v61 = 0;
LABEL_126:
        objc_msgSend(a1, "setIsEntityCandidateRetrievalEnabled:", v61 != 0);
        goto LABEL_94;
      case 0x10u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (PBReaderPlaceMark() && (SISchemaUUIDReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCrrCommsAppSelectionJointId:", v17, 0, 0);
LABEL_93:

LABEL_94:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_128:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_94;
    }
  }
}

uint64_t INFERENCESchemaINFERENCECandidateInfoReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  void *v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v6))
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)(a2 + v12);
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        v16 = v10++ >= 9;
        if (v16)
        {
          v11 = 0;
          v17 = *v6;
          v18 = *(unsigned __int8 *)(a2 + v17);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
      v17 = *v6;
      v18 = *(unsigned __int8 *)(a2 + v17);
      if (*(_BYTE *)(a2 + v17))
        v11 = 0;
LABEL_14:
      if (v18 || (v11 & 7) == 4)
        break;
      switch((v11 >> 3))
      {
        case 1u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          while (1)
          {
            v23 = *v4;
            v24 = *(_QWORD *)(a2 + v23);
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v5))
              break;
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v24);
            *(_QWORD *)(a2 + v23) = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0)
              goto LABEL_54;
            v20 += 7;
            v16 = v21++ >= 9;
            if (v16)
            {
              v27 = 0;
              goto LABEL_57;
            }
          }
          *(_BYTE *)(a2 + *v6) = 1;
LABEL_54:
          if (*(_BYTE *)(a2 + *v6))
            v27 = 0;
          else
            v27 = v22;
LABEL_57:
          objc_msgSend(a1, "setSearchProvider:", v27);
          continue;
        case 2u:
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (2)
          {
            v32 = *v4;
            v33 = *(_QWORD *)(a2 + v32);
            v34 = v33 + 1;
            if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v33);
              *(_QWORD *)(a2 + v32) = v34;
              v31 |= (unint64_t)(v35 & 0x7F) << v29;
              if (v35 < 0)
              {
                v29 += 7;
                v16 = v30++ >= 9;
                if (v16)
                {
                  v36 = 0;
                  goto LABEL_62;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v36 = 0;
          else
            v36 = v31;
LABEL_62:
          objc_msgSend(a1, "setRank:", v36);
          continue;
        case 3u:
          v37 = *v4;
          v38 = *(_QWORD *)(a2 + v37);
          if (v38 <= 0xFFFFFFFFFFFFFFFBLL && v38 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setScore:", a3);
          continue;
        case 4u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          while (2)
          {
            v42 = *v4;
            v43 = *(_QWORD *)(a2 + v42);
            v44 = v43 + 1;
            if (v43 == -1 || v44 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v43);
              *(_QWORD *)(a2 + v42) = v44;
              v41 |= (unint64_t)(v45 & 0x7F) << v39;
              if (v45 < 0)
              {
                v39 += 7;
                v16 = v40++ >= 9;
                if (v16)
                {
                  v41 = 0;
                  goto LABEL_66;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v41 = 0;
LABEL_66:
          objc_msgSend(a1, "setIsShownToUser:", v41 != 0);
          continue;
        case 5u:
          PBReaderReadString();
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setAnonymizedEntityIdentifier:", v46);

          continue;
        case 6u:
          v47 = 0;
          v48 = 0;
          v49 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v50 = *v4;
        v51 = *(_QWORD *)(a2 + v50);
        v52 = v51 + 1;
        if (v51 == -1 || v52 > *(_QWORD *)(a2 + *v5))
          break;
        v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v51);
        *(_QWORD *)(a2 + v50) = v52;
        v49 |= (unint64_t)(v53 & 0x7F) << v47;
        if ((v53 & 0x80) == 0)
          goto LABEL_68;
        v47 += 7;
        v16 = v48++ >= 9;
        if (v16)
        {
          v54 = 0;
          goto LABEL_71;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_68:
      v54 = *(_BYTE *)(a2 + *v6) ? 0 : v49;
LABEL_71:
      objc_msgSend(a1, "setCandidateType:", v54);
    }
    while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5));
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

BOOL INFERENCESchemaINFERENCEClientEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  INFERENCESchemaINFERENCEMusicAppSelectionGroundTruthGenerated *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 'e':
        v17 = objc_alloc_init(INFERENCESchemaINFERENCEMusicAppSelectionGroundTruthGenerated);
        if (!PBReaderPlaceMark()
          || !INFERENCESchemaINFERENCEMusicAppSelectionGroundTruthGeneratedReadFrom(v17, a2))
        {
          goto LABEL_81;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setMusicAppSelectionGroundTruthGenerated:", v17, 0, 0);
        goto LABEL_74;
      case 'f':
        v17 = objc_alloc_init(INFERENCESchemaINFERENCEVideoPlayOnThirdPartyAppGroundTruthGenerated);
        if (!PBReaderPlaceMark()
          || !INFERENCESchemaINFERENCEVideoPlayOnThirdPartyAppGroundTruthGeneratedReadFrom(v17, a2))
        {
          goto LABEL_81;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setVideoPlayOnThirdPartyAppGroundTruthGenerated:", v17, 0, 0);
        goto LABEL_74;
      case 'g':
        v17 = objc_alloc_init(INFERENCESchemaINFERENCEVideoSmartAppSelectionDisambiguationSignalsGenerated);
        if (!PBReaderPlaceMark()
          || !INFERENCESchemaINFERENCEVideoSmartAppSelectionDisambiguationSignalsGeneratedReadFrom(v17, a2))
        {
          goto LABEL_81;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setVideoSmartAppSelectionDisambiguation:", v17, 0, 0);
        goto LABEL_74;
      case 'h':
        v17 = objc_alloc_init(INFERENCESchemaINFERENCEResolutionRequestContext);
        if (!PBReaderPlaceMark() || !INFERENCESchemaINFERENCEResolutionRequestContextReadFrom(v17, a2))
          goto LABEL_81;
        PBReaderRecallMark();
        objc_msgSend(a1, "setResolutionRequestContext:", v17, 0, 0);
        goto LABEL_74;
      case 'i':
        v17 = objc_alloc_init(INFERENCESchemaINFERENCESimpleTaskInfoGenerated);
        if (!PBReaderPlaceMark()
          || (INFERENCESchemaINFERENCESimpleTaskInfoGeneratedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_81;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSimpleTaskInfoGenerated:", v17, 0, 0);
        goto LABEL_74;
      case 'j':
        v17 = objc_alloc_init(INFERENCESchemaINFERENCEResolutionQueryInfoGenerated);
        if (!PBReaderPlaceMark()
          || (INFERENCESchemaINFERENCEResolutionQueryInfoGeneratedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_81;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setResolutionQueryInfoGenerated:", v17, 0, 0);
        goto LABEL_74;
      case 'k':
        v17 = objc_alloc_init(INFERENCESchemaINFERENCEQueryUserPromptSelectedInfoGenerated);
        if (!PBReaderPlaceMark()
          || (INFERENCESchemaINFERENCEQueryUserPromptSelectedInfoGeneratedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_81;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setUserPromptSelectedInfoGenerated:", v17, 0, 0);
        goto LABEL_74;
      case 'l':
        v17 = objc_alloc_init(INFERENCESchemaINFERENCEContactCandidatesInfoGenerated);
        if (!PBReaderPlaceMark()
          || (INFERENCESchemaINFERENCEContactCandidatesInfoGeneratedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_81;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setContactCandidatesInfoGenerated:", v17, 0, 0);
        goto LABEL_74;
      case 'm':
        v17 = objc_alloc_init(INFERENCESchemaINFERENCECRRTrainingSampleCollected);
        if (!PBReaderPlaceMark()
          || (INFERENCESchemaINFERENCECRRTrainingSampleCollectedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_81;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCrrTrainingSampleCollected:", v17, 0, 0);
        goto LABEL_74;
      case 'n':
        v17 = objc_alloc_init(INFERENCESchemaINFERENCEABModelEvaluated);
        if (!PBReaderPlaceMark() || (INFERENCESchemaINFERENCEABModelEvaluatedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_81;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAbModelEvaluated:", v17, 0, 0);
        goto LABEL_74;
      case 'o':
        v17 = objc_alloc_init(INFERENCESchemaINFERENCEABModelResultTriggered);
        if (!PBReaderPlaceMark()
          || (INFERENCESchemaINFERENCEABModelResultTriggeredReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_81;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAbModelResultTriggered:", v17, 0, 0);
        goto LABEL_74;
      case 'p':
        v17 = objc_alloc_init(INFERENCESchemaINFERENCEWorkoutsAppSelectionGroundTruthGenerated);
        if (!PBReaderPlaceMark()
          || !INFERENCESchemaINFERENCEWorkoutsAppSelectionGroundTruthGeneratedReadFrom(v17, a2))
        {
          goto LABEL_81;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setWorkoutsAppSelectionGroundTruthGenerated:", v17, 0, 0);
        goto LABEL_74;
      case 'q':
        v17 = objc_alloc_init(INFERENCESchemaINFERENCENotebookAppSelectionGroundTruthGenerated);
        if (!PBReaderPlaceMark()
          || !INFERENCESchemaINFERENCENotebookAppSelectionGroundTruthGeneratedReadFrom(v17, a2))
        {
          goto LABEL_81;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setNotebookAppSelectionGroundTruthGenerated:", v17, 0, 0);
        goto LABEL_74;
      case 'r':
        v17 = objc_alloc_init(INFERENCESchemaINFERENCECommsAppSelectionGroundTruthGenerated);
        if (!PBReaderPlaceMark()
          || !INFERENCESchemaINFERENCECommsAppSelectionGroundTruthGeneratedReadFrom(v17, a2))
        {
          goto LABEL_81;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCommsAppSelectionGroundTruthGenerated:", v17, 0, 0);
        goto LABEL_74;
      case 's':
        v17 = objc_alloc_init(INFERENCESchemaINFERENCEPervasiveEntityResolutionGroundTruthGenerated);
        if (!PBReaderPlaceMark()
          || !INFERENCESchemaINFERENCEPervasiveEntityResolutionGroundTruthGeneratedReadFrom(v17, a2))
        {
          goto LABEL_81;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPervasiveEntityResolutionGroundTruthGenerated:", v17, 0, 0);
        goto LABEL_74;
      case 't':
        v17 = objc_alloc_init(INFERENCESchemaINFERENCESmartEnoughAppSelectionExecutionPathReported);
        if (!PBReaderPlaceMark()
          || (INFERENCESchemaINFERENCESmartEnoughAppSelectionExecutionPathReportedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_81;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSeasExecutionPathReported:", v17, 0, 0);
        goto LABEL_74;
      case 'u':
        v17 = objc_alloc_init(INFERENCESchemaINFERENCEAsrEuclidEmbedding);
        if (!PBReaderPlaceMark() || !INFERENCESchemaINFERENCEAsrEuclidEmbeddingReadFrom(v17, a2))
          goto LABEL_81;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAsrEuclidEmbedding:", v17, 0, 0);
        goto LABEL_74;
      default:
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_75:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
        v17 = objc_alloc_init(INFERENCESchemaINFERENCEClientEventMetadata);
        if (PBReaderPlaceMark()
          && (INFERENCESchemaINFERENCEClientEventMetadataReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setEventMetadata:", v17, 0, 0);
LABEL_74:

          goto LABEL_75;
        }
LABEL_81:

        return 0;
    }
  }
}

uint64_t INFERENCESchemaINFERENCEClientEventMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setInferenceId:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INFERENCESchemaINFERENCEConfirmationPromptContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAnonymizedEntityPresented:", v24);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_34;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_34:
        objc_msgSend(a1, "setResolution:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL INFERENCESchemaINFERENCEContactReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAnonymizedContactIdentifier:", v17);
LABEL_23:

        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_25:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (v17)
      objc_msgSend(a1, "addAnonymizedHandleValues:", v17);
    goto LABEL_23;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INFERENCESchemaINFERENCEContactCandidatesInfoGeneratedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  double v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_60;
        PBReaderRecallMark();
        objc_msgSend(a1, "setOriginalResolutionContextId:", v17, 0, 0);
        goto LABEL_41;
      case 2u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_60;
        PBReaderRecallMark();
        objc_msgSend(a1, "setQueryId:", v17, 0, 0);
        goto LABEL_41;
      case 3u:
        v17 = objc_alloc_init(INFERENCESchemaINFERENCEContactQueryMetadata);
        if (!PBReaderPlaceMark()
          || (INFERENCESchemaINFERENCEContactQueryMetadataReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_60;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setContactQueryMetadata:", v17, 0, 0);
        goto LABEL_41;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_53;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_53:
        objc_msgSend(a1, "setOntologySource:", v25, v33, v34);
        goto LABEL_58;
      case 5u:
        v17 = objc_alloc_init(INFERENCESchemaINFERENCECandidateInfo);
        v33 = 0;
        v34 = 0;
        if (PBReaderPlaceMark()
          && INFERENCESchemaINFERENCECandidateInfoReadFrom(v17, a2, v26))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addCandidates:", v17, 0, 0);
LABEL_41:

LABEL_58:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_60:

        return 0;
      case 6u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (v14)
              {
                v29 = 0;
                goto LABEL_57;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v29 = 0;
LABEL_57:
        objc_msgSend(a1, "setIsEntityCandidateRetrievalEnabled:", v29 != 0);
        goto LABEL_58;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_58;
    }
  }
}

uint64_t INFERENCESchemaINFERENCEContactFeatureSetReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t result;
  uint64_t v111;
  unint64_t v112;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v6))
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = *v4;
          v13 = *(_QWORD *)(a2 + v12);
          v14 = v13 + 1;
          if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
            break;
          v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
          *(_QWORD *)(a2 + v12) = v14;
          v11 |= (unint64_t)(v15 & 0x7F) << v9;
          if ((v15 & 0x80) == 0)
            goto LABEL_12;
          v9 += 7;
          if (v10++ >= 9)
          {
            v11 = 0;
            v17 = *v6;
            v18 = *(unsigned __int8 *)(a2 + v17);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
        v17 = *v6;
        v18 = *(unsigned __int8 *)(a2 + v17);
        if (*(_BYTE *)(a2 + v17))
          v11 = 0;
LABEL_14:
        if (v18)
          v19 = 1;
        else
          v19 = (v11 & 7) == 4;
        if (!v19)
        {
          switch((v11 >> 3))
          {
            case 1u:
              v20 = *v4;
              v21 = *(_QWORD *)(a2 + v20);
              if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v21);
                *(_QWORD *)(a2 + v20) = v21 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setIsRecent:", a3);
              goto LABEL_251;
            case 2u:
              v22 = *v4;
              v23 = *(_QWORD *)(a2 + v22);
              if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v23);
                *(_QWORD *)(a2 + v22) = v23 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setIsRecentInSameDomain:", a3);
              goto LABEL_251;
            case 3u:
              v24 = *v4;
              v25 = *(_QWORD *)(a2 + v24);
              if (v25 <= 0xFFFFFFFFFFFFFFFBLL && v25 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v25);
                *(_QWORD *)(a2 + v24) = v25 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setIsRecentInSiriRequest:", a3);
              goto LABEL_251;
            case 4u:
              v26 = *v4;
              v27 = *(_QWORD *)(a2 + v26);
              if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v27);
                *(_QWORD *)(a2 + v26) = v27 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setIsRecentlyCorrected:", a3);
              goto LABEL_251;
            case 5u:
              v28 = *v4;
              v29 = *(_QWORD *)(a2 + v28);
              if (v29 <= 0xFFFFFFFFFFFFFFFBLL && v29 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v29);
                *(_QWORD *)(a2 + v28) = v29 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setRecencyRank:", a3);
              goto LABEL_251;
            case 6u:
              v30 = *v4;
              v31 = *(_QWORD *)(a2 + v30);
              if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v31);
                *(_QWORD *)(a2 + v30) = v31 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setRecencyRankInSameDomain:", a3);
              goto LABEL_251;
            case 7u:
              v32 = *v4;
              v33 = *(_QWORD *)(a2 + v32);
              if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v33);
                *(_QWORD *)(a2 + v32) = v33 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setRecencyRankInSiriRequest:", a3);
              goto LABEL_251;
            case 8u:
              v34 = *v4;
              v35 = *(_QWORD *)(a2 + v34);
              if (v35 <= 0xFFFFFFFFFFFFFFFBLL && v35 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v35);
                *(_QWORD *)(a2 + v34) = v35 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setIsHighQualityRequestMatch:", a3);
              goto LABEL_251;
            case 9u:
              v36 = *v4;
              v37 = *(_QWORD *)(a2 + v36);
              if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v37);
                *(_QWORD *)(a2 + v36) = v37 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setIsFavorite:", a3);
              goto LABEL_251;
            case 0xAu:
              v38 = *v4;
              v39 = *(_QWORD *)(a2 + v38);
              if (v39 <= 0xFFFFFFFFFFFFFFFBLL && v39 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v39);
                *(_QWORD *)(a2 + v38) = v39 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setIsMeCardRelation:", a3);
              goto LABEL_251;
            case 0xBu:
              v40 = *v4;
              v41 = *(_QWORD *)(a2 + v40);
              if (v41 <= 0xFFFFFFFFFFFFFFFBLL && v41 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v41);
                *(_QWORD *)(a2 + v40) = v41 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setIsWeakOrganizationMatch:", a3);
              goto LABEL_251;
            case 0xCu:
              v42 = *v4;
              v43 = *(_QWORD *)(a2 + v42);
              if (v43 <= 0xFFFFFFFFFFFFFFFBLL && v43 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v43);
                *(_QWORD *)(a2 + v42) = v43 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setSpeechAlternativeRanksGivenNameRank:", a3);
              goto LABEL_251;
            case 0xDu:
              v44 = *v4;
              v45 = *(_QWORD *)(a2 + v44);
              if (v45 <= 0xFFFFFFFFFFFFFFFBLL && v45 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v45);
                *(_QWORD *)(a2 + v44) = v45 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setSpeechAlternativeRanksMiddleNameRank:", a3);
              goto LABEL_251;
            case 0xEu:
              v46 = *v4;
              v47 = *(_QWORD *)(a2 + v46);
              if (v47 <= 0xFFFFFFFFFFFFFFFBLL && v47 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v47);
                *(_QWORD *)(a2 + v46) = v47 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setSpeechAlternativeRanksFamilyNameRank:", a3);
              goto LABEL_251;
            case 0xFu:
              v48 = *v4;
              v49 = *(_QWORD *)(a2 + v48);
              if (v49 <= 0xFFFFFFFFFFFFFFFBLL && v49 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v49);
                *(_QWORD *)(a2 + v48) = v49 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setFreqAnyGroup0MinTo2Min:", a3);
              goto LABEL_251;
            case 0x10u:
              v50 = *v4;
              v51 = *(_QWORD *)(a2 + v50);
              if (v51 <= 0xFFFFFFFFFFFFFFFBLL && v51 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v51);
                *(_QWORD *)(a2 + v50) = v51 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setFreqAnyGroup2MinTo10Min:", a3);
              goto LABEL_251;
            case 0x11u:
              v52 = *v4;
              v53 = *(_QWORD *)(a2 + v52);
              if (v53 <= 0xFFFFFFFFFFFFFFFBLL && v53 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v53);
                *(_QWORD *)(a2 + v52) = v53 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setFreqAnyGroup10MinTo1Hr:", a3);
              goto LABEL_251;
            case 0x12u:
              v54 = *v4;
              v55 = *(_QWORD *)(a2 + v54);
              if (v55 <= 0xFFFFFFFFFFFFFFFBLL && v55 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v55);
                *(_QWORD *)(a2 + v54) = v55 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setFreqAnyGroup1HrTo6Hr:", a3);
              goto LABEL_251;
            case 0x13u:
              v56 = *v4;
              v57 = *(_QWORD *)(a2 + v56);
              if (v57 <= 0xFFFFFFFFFFFFFFFBLL && v57 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v57);
                *(_QWORD *)(a2 + v56) = v57 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setFreqAnyGroup6HrTo1Day:", a3);
              goto LABEL_251;
            case 0x14u:
              v58 = *v4;
              v59 = *(_QWORD *)(a2 + v58);
              if (v59 <= 0xFFFFFFFFFFFFFFFBLL && v59 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v59);
                *(_QWORD *)(a2 + v58) = v59 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setFreqAnyGroup1DayTo7Day:", a3);
              goto LABEL_251;
            case 0x15u:
              v60 = *v4;
              v61 = *(_QWORD *)(a2 + v60);
              if (v61 <= 0xFFFFFFFFFFFFFFFBLL && v61 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v61);
                *(_QWORD *)(a2 + v60) = v61 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setFreqAnyGroup7DayTo28Day:", a3);
              goto LABEL_251;
            case 0x16u:
              v62 = *v4;
              v63 = *(_QWORD *)(a2 + v62);
              if (v63 <= 0xFFFFFFFFFFFFFFFBLL && v63 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v63);
                *(_QWORD *)(a2 + v62) = v63 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setFreqAnyGroup28DayToInf:", a3);
              goto LABEL_251;
            case 0x17u:
              v64 = *v4;
              v65 = *(_QWORD *)(a2 + v64);
              if (v65 <= 0xFFFFFFFFFFFFFFFBLL && v65 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v65);
                *(_QWORD *)(a2 + v64) = v65 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setFreqSameGroup0MinTo2Min:", a3);
              goto LABEL_251;
            case 0x18u:
              v66 = *v4;
              v67 = *(_QWORD *)(a2 + v66);
              if (v67 <= 0xFFFFFFFFFFFFFFFBLL && v67 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v67);
                *(_QWORD *)(a2 + v66) = v67 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setFreqSameGroup2MinTo10Min:", a3);
              goto LABEL_251;
            case 0x19u:
              v68 = *v4;
              v69 = *(_QWORD *)(a2 + v68);
              if (v69 <= 0xFFFFFFFFFFFFFFFBLL && v69 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v69);
                *(_QWORD *)(a2 + v68) = v69 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setFreqSameGroup10MinTo1Hr:", a3);
              goto LABEL_251;
            case 0x1Au:
              v70 = *v4;
              v71 = *(_QWORD *)(a2 + v70);
              if (v71 <= 0xFFFFFFFFFFFFFFFBLL && v71 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v71);
                *(_QWORD *)(a2 + v70) = v71 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setFreqSameGroup1HrTo6Hr:", a3);
              goto LABEL_251;
            case 0x1Bu:
              v111 = *v4;
              v112 = *(_QWORD *)(a2 + v111);
              if (v112 <= 0xFFFFFFFFFFFFFFFBLL && v112 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v112);
                *(_QWORD *)(a2 + v111) = v112 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setFreqSameGroup6HrTo1Day:", a3);
              goto LABEL_251;
            case 0x1Cu:
              v72 = *v4;
              v73 = *(_QWORD *)(a2 + v72);
              if (v73 <= 0xFFFFFFFFFFFFFFFBLL && v73 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v73);
                *(_QWORD *)(a2 + v72) = v73 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setFreqSameGroup1DayTo7Day:", a3);
              goto LABEL_251;
            case 0x1Du:
              v74 = *v4;
              v75 = *(_QWORD *)(a2 + v74);
              if (v75 <= 0xFFFFFFFFFFFFFFFBLL && v75 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v75);
                *(_QWORD *)(a2 + v74) = v75 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setFreqSameGroup7DayTo28Day:", a3);
              goto LABEL_251;
            case 0x1Eu:
              v76 = *v4;
              v77 = *(_QWORD *)(a2 + v76);
              if (v77 <= 0xFFFFFFFFFFFFFFFBLL && v77 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v77);
                *(_QWORD *)(a2 + v76) = v77 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setFreqSameGroup28DayToInf:", a3);
              goto LABEL_251;
            case 0x1Fu:
              v78 = *v4;
              v79 = *(_QWORD *)(a2 + v78);
              if (v79 <= 0xFFFFFFFFFFFFFFFBLL && v79 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v79);
                *(_QWORD *)(a2 + v78) = v79 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setIsSuggested:", a3);
              goto LABEL_251;
            case 0x20u:
              v80 = *v4;
              v81 = *(_QWORD *)(a2 + v80);
              if (v81 <= 0xFFFFFFFFFFFFFFFBLL && v81 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v81);
                *(_QWORD *)(a2 + v80) = v81 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setIsHypocorism:", a3);
              goto LABEL_251;
            case 0x21u:
              v82 = *v4;
              v83 = *(_QWORD *)(a2 + v82);
              if (v83 <= 0xFFFFFFFFFFFFFFFBLL && v83 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v83);
                *(_QWORD *)(a2 + v82) = v83 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setHasSuggestedProperties:", a3);
              goto LABEL_251;
            case 0x22u:
              v84 = *v4;
              v85 = *(_QWORD *)(a2 + v84);
              if (v85 <= 0xFFFFFFFFFFFFFFFBLL && v85 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v85);
                *(_QWORD *)(a2 + v84) = v85 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setIsPartialNameMatch:", a3);
              goto LABEL_251;
            case 0x23u:
              v86 = *v4;
              v87 = *(_QWORD *)(a2 + v86);
              if (v87 <= 0xFFFFFFFFFFFFFFFBLL && v87 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v87);
                *(_QWORD *)(a2 + v86) = v87 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setNumPrimaryTokens:", a3);
              goto LABEL_251;
            case 0x24u:
              v88 = *v4;
              v89 = *(_QWORD *)(a2 + v88);
              if (v89 <= 0xFFFFFFFFFFFFFFFBLL && v89 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v89);
                *(_QWORD *)(a2 + v88) = v89 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setAllQueryMatched:", a3);
              goto LABEL_251;
            case 0x25u:
              v90 = *v4;
              v91 = *(_QWORD *)(a2 + v90);
              if (v91 <= 0xFFFFFFFFFFFFFFFBLL && v91 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v91);
                *(_QWORD *)(a2 + v90) = v91 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setAllPrimaryNameTokensAreInQuery:", a3);
              goto LABEL_251;
            case 0x26u:
              v92 = *v4;
              v93 = *(_QWORD *)(a2 + v92);
              if (v93 <= 0xFFFFFFFFFFFFFFFBLL && v93 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v93);
                *(_QWORD *)(a2 + v92) = v93 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setIsGivenNameMatch:", a3);
              goto LABEL_251;
            case 0x27u:
              v94 = *v4;
              v95 = *(_QWORD *)(a2 + v94);
              if (v95 <= 0xFFFFFFFFFFFFFFFBLL && v95 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v95);
                *(_QWORD *)(a2 + v94) = v95 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setIsMiddleNameMatch:", a3);
              goto LABEL_251;
            case 0x28u:
              v96 = *v4;
              v97 = *(_QWORD *)(a2 + v96);
              if (v97 <= 0xFFFFFFFFFFFFFFFBLL && v97 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v97);
                *(_QWORD *)(a2 + v96) = v97 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setIsFamilyNameMatch:", a3);
              goto LABEL_251;
            case 0x29u:
              v98 = *v4;
              v99 = *(_QWORD *)(a2 + v98);
              if (v99 <= 0xFFFFFFFFFFFFFFFBLL && v99 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v99);
                *(_QWORD *)(a2 + v98) = v99 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setIsOrganizationNameMatch:", a3);
              goto LABEL_251;
            case 0x2Au:
              v100 = *v4;
              v101 = *(_QWORD *)(a2 + v100);
              if (v101 <= 0xFFFFFFFFFFFFFFFBLL && v101 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v101);
                *(_QWORD *)(a2 + v100) = v101 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setIsNicknameMatch:", a3);
              goto LABEL_251;
            case 0x2Bu:
              v102 = *v4;
              v103 = *(_QWORD *)(a2 + v102);
              if (v103 <= 0xFFFFFFFFFFFFFFFBLL && v103 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v103);
                *(_QWORD *)(a2 + v102) = v103 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setIsNamePrefixMatch:", a3);
              goto LABEL_251;
            case 0x2Cu:
              v104 = *v4;
              v105 = *(_QWORD *)(a2 + v104);
              if (v105 <= 0xFFFFFFFFFFFFFFFBLL && v105 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v105);
                *(_QWORD *)(a2 + v104) = v105 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setIsNameSuffixMatch:", a3);
              goto LABEL_251;
            case 0x2Du:
              v106 = *v4;
              v107 = *(_QWORD *)(a2 + v106);
              if (v107 <= 0xFFFFFFFFFFFFFFFBLL && v107 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v107);
                *(_QWORD *)(a2 + v106) = v107 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setAllHandlesMatched:", a3);
              goto LABEL_251;
            case 0x2Eu:
              v108 = *v4;
              v109 = *(_QWORD *)(a2 + v108);
              if (v109 <= 0xFFFFFFFFFFFFFFFBLL && v109 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v109);
                *(_QWORD *)(a2 + v108) = v109 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setIsRelationAlias:", a3);
              goto LABEL_251;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_251:
              if (*(_QWORD *)(a2 + *v4) >= *(_QWORD *)(a2 + *v5))
                return *(_BYTE *)(a2 + *v6) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

BOOL SCSchemaSCClientEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SCSchemaSCClientEventMetadata *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SCSchemaSCClientEventMetadata);
        if (!PBReaderPlaceMark() || !SCSchemaSCClientEventMetadataReadFrom(v17, a2))
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEventMetadata:", v17, 0, 0);
        goto LABEL_33;
      case 2u:
        v17 = objc_alloc_init(SCSchemaSCUndoChecked);
        if (!PBReaderPlaceMark() || (SCSchemaSCUndoCheckedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setUndoChecked:", v17, 0, 0);
        goto LABEL_33;
      case 3u:
        v17 = objc_alloc_init(SCSchemaSCCorrectionChecked);
        if (!PBReaderPlaceMark() || (SCSchemaSCCorrectionCheckedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCorrectionChecked:", v17, 0, 0);
        goto LABEL_33;
      case 4u:
        v17 = objc_alloc_init(SCSchemaSCUndoSet);
        if (PBReaderPlaceMark() && (SCSchemaSCUndoSetReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setUndoSet:", v17, 0, 0);
LABEL_33:

LABEL_34:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_36:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_34;
    }
  }
}

uint64_t INFERENCESchemaINFERENCEContactHandleSignalSetReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  INFERENCESchemaINFERENCEPrivatizedHistoryStats *v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_102;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_104;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_102:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_104:
        objc_msgSend(a1, "setIsSuggestedHandle:", v19 != 0);
        goto LABEL_145;
      case 2u:
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (2)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v26 |= (unint64_t)(v29 & 0x7F) << v24;
            if (v29 < 0)
            {
              v24 += 7;
              v14 = v25++ >= 9;
              if (v14)
              {
                v26 = 0;
                goto LABEL_108;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v26 = 0;
LABEL_108:
        objc_msgSend(a1, "setIsFavorite:", v26 != 0);
        goto LABEL_145;
      case 3u:
        v30 = 0;
        v31 = 0;
        v32 = 0;
        while (2)
        {
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if (v35 < 0)
            {
              v30 += 7;
              v14 = v31++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_112;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
LABEL_112:
        objc_msgSend(a1, "setIsQueryExactMatch:", v32 != 0);
        goto LABEL_145;
      case 4u:
        v36 = 0;
        v37 = 0;
        v38 = 0;
        while (2)
        {
          v39 = *v3;
          v40 = *(_QWORD *)(a2 + v39);
          if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
            *(_QWORD *)(a2 + v39) = v40 + 1;
            v38 |= (unint64_t)(v41 & 0x7F) << v36;
            if (v41 < 0)
            {
              v36 += 7;
              v14 = v37++ >= 9;
              if (v14)
              {
                v38 = 0;
                goto LABEL_116;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v38 = 0;
LABEL_116:
        objc_msgSend(a1, "setIsQueryMatch:", v38 != 0);
        goto LABEL_145;
      case 5u:
        v42 = 0;
        v43 = 0;
        v44 = 0;
        while (2)
        {
          v45 = *v3;
          v46 = *(_QWORD *)(a2 + v45);
          if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
            *(_QWORD *)(a2 + v45) = v46 + 1;
            v44 |= (unint64_t)(v47 & 0x7F) << v42;
            if (v47 < 0)
            {
              v42 += 7;
              v14 = v43++ >= 9;
              if (v14)
              {
                v44 = 0;
                goto LABEL_120;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v44 = 0;
LABEL_120:
        objc_msgSend(a1, "setIsPartialQueryValueMatch:", v44 != 0);
        goto LABEL_145;
      case 6u:
        v48 = objc_alloc_init(INFERENCESchemaINFERENCEPrivatizedHistoryStats);
        if (PBReaderPlaceMark()
          && (INFERENCESchemaINFERENCEPrivatizedHistoryStatsReadFrom(v48, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setHistoryStats:", v48, 0, 0);

LABEL_145:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 7u:
        v49 = 0;
        v50 = 0;
        v51 = 0;
        while (2)
        {
          v52 = *v3;
          v53 = *(_QWORD *)(a2 + v52);
          if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v53);
            *(_QWORD *)(a2 + v52) = v53 + 1;
            v51 |= (unint64_t)(v54 & 0x7F) << v49;
            if (v54 < 0)
            {
              v49 += 7;
              v14 = v50++ >= 9;
              if (v14)
              {
                v51 = 0;
                goto LABEL_124;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v51 = 0;
LABEL_124:
        objc_msgSend(a1, "setIsRecentInAnyGroup:", v51 != 0);
        goto LABEL_145;
      case 8u:
        v55 = 0;
        v56 = 0;
        v57 = 0;
        while (2)
        {
          v58 = *v3;
          v59 = *(_QWORD *)(a2 + v58);
          if (v59 == -1 || v59 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v60 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v59);
            *(_QWORD *)(a2 + v58) = v59 + 1;
            v57 |= (unint64_t)(v60 & 0x7F) << v55;
            if (v60 < 0)
            {
              v55 += 7;
              v14 = v56++ >= 9;
              if (v14)
              {
                v57 = 0;
                goto LABEL_128;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v57 = 0;
LABEL_128:
        objc_msgSend(a1, "setIsRecentInSameGroup:", v57 != 0);
        goto LABEL_145;
      case 9u:
        v61 = 0;
        v62 = 0;
        v63 = 0;
        while (2)
        {
          v64 = *v3;
          v65 = *(_QWORD *)(a2 + v64);
          if (v65 == -1 || v65 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v66 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v65);
            *(_QWORD *)(a2 + v64) = v65 + 1;
            v63 |= (unint64_t)(v66 & 0x7F) << v61;
            if (v66 < 0)
            {
              v61 += 7;
              v14 = v62++ >= 9;
              if (v14)
              {
                v63 = 0;
                goto LABEL_132;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v63 = 0;
LABEL_132:
        objc_msgSend(a1, "setIsPreferredType:", v63 != 0);
        goto LABEL_145;
      case 0xAu:
        v67 = 0;
        v68 = 0;
        v69 = 0;
        while (2)
        {
          v70 = *v3;
          v71 = *(_QWORD *)(a2 + v70);
          if (v71 == -1 || v71 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v72 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v71);
            *(_QWORD *)(a2 + v70) = v71 + 1;
            v69 |= (unint64_t)(v72 & 0x7F) << v67;
            if (v72 < 0)
            {
              v67 += 7;
              v14 = v68++ >= 9;
              if (v14)
              {
                v69 = 0;
                goto LABEL_136;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v69 = 0;
LABEL_136:
        objc_msgSend(a1, "setIsAllowedType:", v69 != 0);
        goto LABEL_145;
      case 0xBu:
        v73 = 0;
        v74 = 0;
        v75 = 0;
        while (2)
        {
          v76 = *v3;
          v77 = *(_QWORD *)(a2 + v76);
          if (v77 == -1 || v77 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v78 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v77);
            *(_QWORD *)(a2 + v76) = v77 + 1;
            v75 |= (unint64_t)(v78 & 0x7F) << v73;
            if (v78 < 0)
            {
              v73 += 7;
              v14 = v74++ >= 9;
              if (v14)
              {
                v75 = 0;
                goto LABEL_140;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v75 = 0;
LABEL_140:
        objc_msgSend(a1, "setIsFaceTimeable:", v75 != 0);
        goto LABEL_145;
      case 0xCu:
        v79 = 0;
        v80 = 0;
        v81 = 0;
        while (2)
        {
          v82 = *v3;
          v83 = *(_QWORD *)(a2 + v82);
          if (v83 == -1 || v83 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v84 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v83);
            *(_QWORD *)(a2 + v82) = v83 + 1;
            v81 |= (unint64_t)(v84 & 0x7F) << v79;
            if (v84 < 0)
            {
              v79 += 7;
              v14 = v80++ >= 9;
              if (v14)
              {
                v81 = 0;
                goto LABEL_144;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v81 = 0;
LABEL_144:
        objc_msgSend(a1, "setIsNotFaceTimeable:", v81 != 0);
        goto LABEL_145;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_145;
    }
  }
}

uint64_t INFERENCESchemaINFERENCEContactMatchReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  INFERENCESchemaINFERENCEContact *v20;
  uint64_t result;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v6) == 0;
  v8 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v6))
      return *(_BYTE *)(a2 + *v6) == 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *v4;
      v13 = *(_QWORD *)(a2 + v12);
      v14 = v13 + 1;
      if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
        break;
      v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
      *(_QWORD *)(a2 + v12) = v14;
      v11 |= (unint64_t)(v15 & 0x7F) << v9;
      if ((v15 & 0x80) == 0)
        goto LABEL_12;
      v9 += 7;
      v16 = v10++ >= 9;
      if (v16)
      {
        v11 = 0;
        v17 = *v6;
        v18 = *(unsigned __int8 *)(a2 + v17);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
    v17 = *v6;
    v18 = *(unsigned __int8 *)(a2 + v17);
    if (*(_BYTE *)(a2 + v17))
      v11 = 0;
LABEL_14:
    if (v18 || (v11 & 7) == 4)
      return *(_BYTE *)(a2 + *v6) == 0;
    switch((v11 >> 3))
    {
      case 1u:
        v20 = objc_alloc_init(INFERENCESchemaINFERENCEContact);
        if (!PBReaderPlaceMark() || !INFERENCESchemaINFERENCEContactReadFrom(v20, a2))
          goto LABEL_52;
        PBReaderRecallMark();
        objc_msgSend(a1, "setContactValue:", v20, 0, 0);
        goto LABEL_33;
      case 2u:
        v20 = objc_alloc_init(INFERENCESchemaINFERENCEContactSignalSet);
        if (!PBReaderPlaceMark()
          || (INFERENCESchemaINFERENCEContactSignalSetReadFrom(v20, a2, v22) & 1) == 0)
        {
          goto LABEL_52;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setContactSignalSet:", v20, 0, 0);
        goto LABEL_33;
      case 3u:
        v20 = objc_alloc_init(INFERENCESchemaINFERENCEBackgroundContactSignalSet);
        if (!PBReaderPlaceMark()
          || (INFERENCESchemaINFERENCEBackgroundContactSignalSetReadFrom(v20, a2, v23) & 1) == 0)
        {
          goto LABEL_52;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setBackgroundSignalSet:", v20, 0, 0);
        goto LABEL_33;
      case 4u:
        v20 = objc_alloc_init(INFERENCESchemaINFERENCEContactFeatureSet);
        if (PBReaderPlaceMark()
          && (INFERENCESchemaINFERENCEContactFeatureSetReadFrom(v20, a2, v24) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setFeatureSet:", v20, 0, 0);
LABEL_33:

LABEL_50:
          if (*(_QWORD *)(a2 + *v4) >= *(_QWORD *)(a2 + *v5))
            return *(_BYTE *)(a2 + *v6) == 0;
          continue;
        }
LABEL_52:

        return 0;
      case 5u:
        v25 = *v4;
        v26 = *(_QWORD *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFFBLL && v26 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v26);
          *(_QWORD *)(a2 + v25) = v26 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setScore:", a3);
        goto LABEL_50;
      case 6u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        while (2)
        {
          v30 = *v4;
          v31 = *(_QWORD *)(a2 + v30);
          v32 = v31 + 1;
          if (v31 == -1 || v32 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v31);
            *(_QWORD *)(a2 + v30) = v32;
            v29 |= (unint64_t)(v33 & 0x7F) << v27;
            if (v33 < 0)
            {
              v27 += 7;
              v16 = v28++ >= 9;
              if (v16)
              {
                v29 = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v29 = 0;
LABEL_47:
        objc_msgSend(a1, "setIsShownToUser:", v29 != 0);
        goto LABEL_50;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_50;
    }
  }
}

uint64_t INFERENCESchemaINFERENCEContactQueryMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_71;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_73;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_71:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_73:
          objc_msgSend(a1, "setHasName:", v19 != 0);
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  v26 = 0;
                  goto LABEL_77;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v26 = 0;
LABEL_77:
          objc_msgSend(a1, "setHasRelationship:", v26 != 0);
          continue;
        case 3u:
          v30 = 0;
          v31 = 0;
          v32 = 0;
          while (2)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
              *(_QWORD *)(a2 + v33) = v34 + 1;
              v32 |= (unint64_t)(v35 & 0x7F) << v30;
              if (v35 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  v32 = 0;
                  goto LABEL_81;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v32 = 0;
LABEL_81:
          objc_msgSend(a1, "setHasHandleLabel:", v32 != 0);
          continue;
        case 4u:
          v36 = 0;
          v37 = 0;
          v38 = 0;
          while (2)
          {
            v39 = *v3;
            v40 = *(_QWORD *)(a2 + v39);
            if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
              *(_QWORD *)(a2 + v39) = v40 + 1;
              v38 |= (unint64_t)(v41 & 0x7F) << v36;
              if (v41 < 0)
              {
                v36 += 7;
                v14 = v37++ >= 9;
                if (v14)
                {
                  v38 = 0;
                  goto LABEL_85;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
LABEL_85:
          objc_msgSend(a1, "setHasHandleValue:", v38 != 0);
          continue;
        case 5u:
          v42 = 0;
          v43 = 0;
          v44 = 0;
          while (2)
          {
            v45 = *v3;
            v46 = *(_QWORD *)(a2 + v45);
            if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
              *(_QWORD *)(a2 + v45) = v46 + 1;
              v44 |= (unint64_t)(v47 & 0x7F) << v42;
              if (v47 < 0)
              {
                v42 += 7;
                v14 = v43++ >= 9;
                if (v14)
                {
                  v44 = 0;
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v44 = 0;
LABEL_89:
          objc_msgSend(a1, "setHasMeReference:", v44 != 0);
          continue;
        case 6u:
          v48 = 0;
          v49 = 0;
          v50 = 0;
          while (2)
          {
            v51 = *v3;
            v52 = *(_QWORD *)(a2 + v51);
            if (v52 == -1 || v52 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v52);
              *(_QWORD *)(a2 + v51) = v52 + 1;
              v50 |= (unint64_t)(v53 & 0x7F) << v48;
              if (v53 < 0)
              {
                v48 += 7;
                v14 = v49++ >= 9;
                if (v14)
                {
                  v50 = 0;
                  goto LABEL_93;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v50 = 0;
LABEL_93:
          objc_msgSend(a1, "setHasContactId:", v50 != 0);
          continue;
        case 7u:
          v54 = 0;
          v55 = 0;
          v56 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v57 = *v3;
        v58 = *(_QWORD *)(a2 + v57);
        if (v58 == -1 || v58 >= *(_QWORD *)(a2 + *v4))
          break;
        v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v58);
        *(_QWORD *)(a2 + v57) = v58 + 1;
        v56 |= (unint64_t)(v59 & 0x7F) << v54;
        if ((v59 & 0x80) == 0)
          goto LABEL_95;
        v54 += 7;
        v14 = v55++ >= 9;
        if (v14)
        {
          v56 = 0;
          goto LABEL_97;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_95:
      if (*(_BYTE *)(a2 + *v5))
        v56 = 0;
LABEL_97:
      objc_msgSend(a1, "setIsEmergencyQuery:", v56 != 0);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INFERENCESchemaINFERENCEContactResolverConfigReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  void *v45;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_53;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_55;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_55:
          objc_msgSend(a1, "setIsSearchingFirstPartyContacts:", v19 != 0);
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  v30 = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v30 = 0;
          else
            v30 = v26;
LABEL_60:
          objc_msgSend(a1, "setContactSearchSuggestedType:", v30);
          continue;
        case 3u:
          v31 = 0;
          v32 = 0;
          v33 = 0;
          while (2)
          {
            v34 = *v3;
            v35 = *(_QWORD *)(a2 + v34);
            if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
              *(_QWORD *)(a2 + v34) = v35 + 1;
              v33 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                v14 = v32++ >= 9;
                if (v14)
                {
                  v37 = 0;
                  goto LABEL_65;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v37 = 0;
          else
            v37 = v33;
LABEL_65:
          objc_msgSend(a1, "setDomainsToSearchForHistory:", v37);
          continue;
        case 4u:
          v38 = 0;
          v39 = 0;
          v40 = 0;
          break;
        case 5u:
          PBReaderReadString();
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          if (v45)
            objc_msgSend(a1, "addAppBundleIds:", v45);

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v41 = *v3;
        v42 = *(_QWORD *)(a2 + v41);
        if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
          break;
        v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
        *(_QWORD *)(a2 + v41) = v42 + 1;
        v40 |= (unint64_t)(v43 & 0x7F) << v38;
        if ((v43 & 0x80) == 0)
          goto LABEL_67;
        v38 += 7;
        v14 = v39++ >= 9;
        if (v14)
        {
          v44 = 0;
          goto LABEL_70;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_67:
      v44 = *(_BYTE *)(a2 + *v5) ? 0 : v40;
LABEL_70:
      objc_msgSend(a1, "setActionType:", v44);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INFERENCESchemaINFERENCEContactSignalSetReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  INFERENCESchemaINFERENCESpeechAlternativeRanks *v20;
  uint64_t result;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  char v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  char v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  char v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  uint64_t v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char v138;
  uint64_t v139;
  char v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char v146;
  uint64_t v147;
  char v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  char v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char v161;
  char v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char v168;
  char v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  char v175;
  char v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char v182;
  char v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  char v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  char v196;
  char v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  char v203;
  char v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  char v210;
  char v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char v217;
  char v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  char v224;
  char v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  char v231;
  char v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  char v238;
  uint64_t v239;
  unint64_t v240;
  char v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  char v247;
  char v248;
  unsigned int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  char v254;
  char v255;
  unsigned int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  char v261;
  char v262;
  unsigned int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  char v268;
  char v269;
  unsigned int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  char v275;
  char v276;
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  char v282;
  char v283;
  unsigned int v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  char v289;
  uint64_t v290;
  uint64_t v291;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v6) == 0;
  v8 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v6))
      return *(_BYTE *)(a2 + *v6) == 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *v4;
      v13 = *(_QWORD *)(a2 + v12);
      v14 = v13 + 1;
      if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
        break;
      v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
      *(_QWORD *)(a2 + v12) = v14;
      v11 |= (unint64_t)(v15 & 0x7F) << v9;
      if ((v15 & 0x80) == 0)
        goto LABEL_12;
      v9 += 7;
      v16 = v10++ >= 9;
      if (v16)
      {
        v11 = 0;
        v17 = *v6;
        v18 = *(unsigned __int8 *)(a2 + v17);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
    v17 = *v6;
    v18 = *(unsigned __int8 *)(a2 + v17);
    if (*(_BYTE *)(a2 + v17))
      v11 = 0;
LABEL_14:
    if (v18 || (v11 & 7) == 4)
      return *(_BYTE *)(a2 + *v6) == 0;
    switch((v11 >> 3))
    {
      case 1u:
        v20 = objc_alloc_init(INFERENCESchemaINFERENCESpeechAlternativeRanks);
        if (!PBReaderPlaceMark()
          || (INFERENCESchemaINFERENCESpeechAlternativeRanksReadFrom(v20, a2) & 1) == 0)
        {
          goto LABEL_470;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSpeechAlternativeRanks:", v20, 0, 0);
        goto LABEL_274;
      case 2u:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        while (2)
        {
          v25 = *v4;
          v26 = *(_QWORD *)(a2 + v25);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v26);
            *(_QWORD *)(a2 + v25) = v27;
            v24 |= (unint64_t)(v28 & 0x7F) << v22;
            if (v28 < 0)
            {
              v22 += 7;
              v16 = v23++ >= 9;
              if (v16)
              {
                v24 = 0;
                goto LABEL_315;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v24 = 0;
LABEL_315:
        objc_msgSend(a1, "setIsQueryStrippedOfTitles:", v24 != 0);
        goto LABEL_275;
      case 3u:
        v29 = 0;
        v30 = 0;
        v31 = 0;
        while (2)
        {
          v32 = *v4;
          v33 = *(_QWORD *)(a2 + v32);
          v34 = v33 + 1;
          if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v33);
            *(_QWORD *)(a2 + v32) = v34;
            v31 |= (unint64_t)(v35 & 0x7F) << v29;
            if (v35 < 0)
            {
              v29 += 7;
              v16 = v30++ >= 9;
              if (v16)
              {
                v31 = 0;
                goto LABEL_319;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v31 = 0;
LABEL_319:
        objc_msgSend(a1, "setIsSuggestedContact:", v31 != 0);
        goto LABEL_275;
      case 4u:
        v36 = 0;
        v37 = 0;
        v38 = 0;
        while (2)
        {
          v39 = *v4;
          v40 = *(_QWORD *)(a2 + v39);
          v41 = v40 + 1;
          if (v40 == -1 || v41 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v40);
            *(_QWORD *)(a2 + v39) = v41;
            v38 |= (unint64_t)(v42 & 0x7F) << v36;
            if (v42 < 0)
            {
              v36 += 7;
              v16 = v37++ >= 9;
              if (v16)
              {
                v38 = 0;
                goto LABEL_323;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v38 = 0;
LABEL_323:
        objc_msgSend(a1, "setAreAllQueryTokensInContact:", v38 != 0);
        goto LABEL_275;
      case 5u:
        v43 = 0;
        v44 = 0;
        v45 = 0;
        while (2)
        {
          v46 = *v4;
          v47 = *(_QWORD *)(a2 + v46);
          v48 = v47 + 1;
          if (v47 == -1 || v48 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v47);
            *(_QWORD *)(a2 + v46) = v48;
            v45 |= (unint64_t)(v49 & 0x7F) << v43;
            if (v49 < 0)
            {
              v43 += 7;
              v16 = v44++ >= 9;
              if (v16)
              {
                v45 = 0;
                goto LABEL_327;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v45 = 0;
LABEL_327:
        objc_msgSend(a1, "setAreAllPrimaryContactTokensInQuery:", v45 != 0);
        goto LABEL_275;
      case 6u:
        v50 = 0;
        v51 = 0;
        v52 = 0;
        while (2)
        {
          v53 = *v4;
          v54 = *(_QWORD *)(a2 + v53);
          v55 = v54 + 1;
          if (v54 == -1 || v55 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v56 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v54);
            *(_QWORD *)(a2 + v53) = v55;
            v52 |= (unint64_t)(v56 & 0x7F) << v50;
            if (v56 < 0)
            {
              v50 += 7;
              v16 = v51++ >= 9;
              if (v16)
              {
                v52 = 0;
                goto LABEL_331;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v52 = 0;
LABEL_331:
        objc_msgSend(a1, "setIsHypocorism:", v52 != 0);
        goto LABEL_275;
      case 7u:
        v57 = 0;
        v58 = 0;
        v59 = 0;
        while (2)
        {
          v60 = *v4;
          v61 = *(_QWORD *)(a2 + v60);
          v62 = v61 + 1;
          if (v61 == -1 || v62 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v63 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v61);
            *(_QWORD *)(a2 + v60) = v62;
            v59 |= (unint64_t)(v63 & 0x7F) << v57;
            if (v63 < 0)
            {
              v57 += 7;
              v16 = v58++ >= 9;
              if (v16)
              {
                v59 = 0;
                goto LABEL_335;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v59 = 0;
LABEL_335:
        objc_msgSend(a1, "setHasSuggestedProperties:", v59 != 0);
        goto LABEL_275;
      case 8u:
        v64 = 0;
        v65 = 0;
        v66 = 0;
        while (2)
        {
          v67 = *v4;
          v68 = *(_QWORD *)(a2 + v67);
          v69 = v68 + 1;
          if (v68 == -1 || v69 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v70 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v68);
            *(_QWORD *)(a2 + v67) = v69;
            v66 |= (unint64_t)(v70 & 0x7F) << v64;
            if (v70 < 0)
            {
              v64 += 7;
              v16 = v65++ >= 9;
              if (v16)
              {
                v66 = 0;
                goto LABEL_339;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v66 = 0;
LABEL_339:
        objc_msgSend(a1, "setIsPartialNameMatch:", v66 != 0);
        goto LABEL_275;
      case 9u:
        v71 = 0;
        v72 = 0;
        v73 = 0;
        while (2)
        {
          v74 = *v4;
          v75 = *(_QWORD *)(a2 + v74);
          v76 = v75 + 1;
          if (v75 == -1 || v76 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v77 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v75);
            *(_QWORD *)(a2 + v74) = v76;
            v73 |= (unint64_t)(v77 & 0x7F) << v71;
            if (v77 < 0)
            {
              v71 += 7;
              v16 = v72++ >= 9;
              if (v16)
              {
                v73 = 0;
                goto LABEL_343;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v73 = 0;
LABEL_343:
        objc_msgSend(a1, "setIsFromStandardSearch:", v73 != 0);
        goto LABEL_275;
      case 0xAu:
        v78 = 0;
        v79 = 0;
        v80 = 0;
        while (2)
        {
          v81 = *v4;
          v82 = *(_QWORD *)(a2 + v81);
          v83 = v82 + 1;
          if (v82 == -1 || v83 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v84 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v82);
            *(_QWORD *)(a2 + v81) = v83;
            v80 |= (unint64_t)(v84 & 0x7F) << v78;
            if (v84 < 0)
            {
              v78 += 7;
              v16 = v79++ >= 9;
              if (v16)
              {
                v80 = 0;
                goto LABEL_347;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v80 = 0;
LABEL_347:
        objc_msgSend(a1, "setIsFromNLXSearch:", v80 != 0);
        goto LABEL_275;
      case 0xBu:
        v85 = 0;
        v86 = 0;
        v87 = 0;
        while (2)
        {
          v88 = *v4;
          v89 = *(_QWORD *)(a2 + v88);
          v90 = v89 + 1;
          if (v89 == -1 || v90 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v91 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v89);
            *(_QWORD *)(a2 + v88) = v90;
            v87 |= (unint64_t)(v91 & 0x7F) << v85;
            if (v91 < 0)
            {
              v85 += 7;
              v16 = v86++ >= 9;
              if (v16)
              {
                v87 = 0;
                goto LABEL_351;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v87 = 0;
LABEL_351:
        objc_msgSend(a1, "setIsFromSRRSearch:", v87 != 0);
        goto LABEL_275;
      case 0xCu:
        v92 = *v4;
        v93 = *(_QWORD *)(a2 + v92);
        if (v93 <= 0xFFFFFFFFFFFFFFFBLL && v93 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v93);
          *(_QWORD *)(a2 + v92) = v93 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setNlxScore:", a3, v290, v291);
        goto LABEL_275;
      case 0xDu:
        v94 = *v4;
        v95 = *(_QWORD *)(a2 + v94);
        if (v95 <= 0xFFFFFFFFFFFFFFFBLL && v95 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v95);
          *(_QWORD *)(a2 + v94) = v95 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setSrrScore:", a3, v290, v291);
        goto LABEL_275;
      case 0xEu:
        v96 = 0;
        v97 = 0;
        v98 = 0;
        while (2)
        {
          v99 = *v4;
          v100 = *(_QWORD *)(a2 + v99);
          v101 = v100 + 1;
          if (v100 == -1 || v101 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v102 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v100);
            *(_QWORD *)(a2 + v99) = v101;
            v98 |= (unint64_t)(v102 & 0x7F) << v96;
            if (v102 < 0)
            {
              v96 += 7;
              v16 = v97++ >= 9;
              if (v16)
              {
                v98 = 0;
                goto LABEL_355;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v98 = 0;
LABEL_355:
        objc_msgSend(a1, "setIsRecent:", v98 != 0);
        goto LABEL_275;
      case 0xFu:
        v103 = 0;
        v104 = 0;
        v105 = 0;
        while (2)
        {
          v106 = *v4;
          v107 = *(_QWORD *)(a2 + v106);
          v108 = v107 + 1;
          if (v107 == -1 || v108 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v109 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v107);
            *(_QWORD *)(a2 + v106) = v108;
            v105 |= (unint64_t)(v109 & 0x7F) << v103;
            if (v109 < 0)
            {
              v103 += 7;
              v16 = v104++ >= 9;
              if (v16)
              {
                v105 = 0;
                goto LABEL_359;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v105 = 0;
LABEL_359:
        objc_msgSend(a1, "setIsRecentInSameDomain:", v105 != 0);
        goto LABEL_275;
      case 0x10u:
        v110 = 0;
        v111 = 0;
        v112 = 0;
        while (2)
        {
          v113 = *v4;
          v114 = *(_QWORD *)(a2 + v113);
          v115 = v114 + 1;
          if (v114 == -1 || v115 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v116 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v114);
            *(_QWORD *)(a2 + v113) = v115;
            v112 |= (unint64_t)(v116 & 0x7F) << v110;
            if (v116 < 0)
            {
              v110 += 7;
              v16 = v111++ >= 9;
              if (v16)
              {
                v112 = 0;
                goto LABEL_363;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v112 = 0;
LABEL_363:
        objc_msgSend(a1, "setIsRecentInSiriRequest:", v112 != 0);
        goto LABEL_275;
      case 0x11u:
        v117 = 0;
        v118 = 0;
        v119 = 0;
        while (2)
        {
          v120 = *v4;
          v121 = *(_QWORD *)(a2 + v120);
          v122 = v121 + 1;
          if (v121 == -1 || v122 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v123 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v121);
            *(_QWORD *)(a2 + v120) = v122;
            v119 |= (unint64_t)(v123 & 0x7F) << v117;
            if (v123 < 0)
            {
              v117 += 7;
              v16 = v118++ >= 9;
              if (v16)
              {
                v119 = 0;
                goto LABEL_367;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v119 = 0;
LABEL_367:
        objc_msgSend(a1, "setIsRecentlyCorrected:", v119 != 0);
        goto LABEL_275;
      case 0x12u:
        v124 = 0;
        v125 = 0;
        v126 = 0;
        while (2)
        {
          v127 = *v4;
          v128 = *(_QWORD *)(a2 + v127);
          v129 = v128 + 1;
          if (v128 == -1 || v129 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v130 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v128);
            *(_QWORD *)(a2 + v127) = v129;
            v126 |= (unint64_t)(v130 & 0x7F) << v124;
            if (v130 < 0)
            {
              v124 += 7;
              v16 = v125++ >= 9;
              if (v16)
              {
                v131 = 0;
                goto LABEL_372;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v131 = 0;
        else
          v131 = v126;
LABEL_372:
        objc_msgSend(a1, "setRecencyRank:", v131, v290, v291);
        goto LABEL_275;
      case 0x13u:
        v132 = 0;
        v133 = 0;
        v134 = 0;
        while (2)
        {
          v135 = *v4;
          v136 = *(_QWORD *)(a2 + v135);
          v137 = v136 + 1;
          if (v136 == -1 || v137 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v138 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v136);
            *(_QWORD *)(a2 + v135) = v137;
            v134 |= (unint64_t)(v138 & 0x7F) << v132;
            if (v138 < 0)
            {
              v132 += 7;
              v16 = v133++ >= 9;
              if (v16)
              {
                v139 = 0;
                goto LABEL_377;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v139 = 0;
        else
          v139 = v134;
LABEL_377:
        objc_msgSend(a1, "setRecencyRankInSameDomain:", v139, v290, v291);
        goto LABEL_275;
      case 0x14u:
        v140 = 0;
        v141 = 0;
        v142 = 0;
        while (2)
        {
          v143 = *v4;
          v144 = *(_QWORD *)(a2 + v143);
          v145 = v144 + 1;
          if (v144 == -1 || v145 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v146 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v144);
            *(_QWORD *)(a2 + v143) = v145;
            v142 |= (unint64_t)(v146 & 0x7F) << v140;
            if (v146 < 0)
            {
              v140 += 7;
              v16 = v141++ >= 9;
              if (v16)
              {
                v147 = 0;
                goto LABEL_382;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v147 = 0;
        else
          v147 = v142;
LABEL_382:
        objc_msgSend(a1, "setRecencyRankInSiriRequest:", v147, v290, v291);
        goto LABEL_275;
      case 0x15u:
        v20 = objc_alloc_init(INFERENCESchemaINFERENCEPrivatizedHistoryStats);
        if (!PBReaderPlaceMark()
          || (INFERENCESchemaINFERENCEPrivatizedHistoryStatsReadFrom(v20, a2) & 1) == 0)
        {
          goto LABEL_470;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setHistoryStats:", v20, 0, 0);
        goto LABEL_274;
      case 0x16u:
        v20 = objc_alloc_init(INFERENCESchemaINFERENCEPrivatizedHistoryStats);
        if (!PBReaderPlaceMark()
          || (INFERENCESchemaINFERENCEPrivatizedHistoryStatsReadFrom(v20, a2) & 1) == 0)
        {
          goto LABEL_470;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setHistoryStatsInSameDomain:", v20, 0, 0);
        goto LABEL_274;
      case 0x17u:
        v20 = objc_alloc_init(INFERENCESchemaINFERENCEPrivatizedHistoryStats);
        if (!PBReaderPlaceMark()
          || (INFERENCESchemaINFERENCEPrivatizedHistoryStatsReadFrom(v20, a2) & 1) == 0)
        {
          goto LABEL_470;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setHistoryStatsInSiriRequests:", v20, 0, 0);
        goto LABEL_274;
      case 0x18u:
        v148 = 0;
        v149 = 0;
        v150 = 0;
        while (2)
        {
          v151 = *v4;
          v152 = *(_QWORD *)(a2 + v151);
          v153 = v152 + 1;
          if (v152 == -1 || v153 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v154 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v152);
            *(_QWORD *)(a2 + v151) = v153;
            v150 |= (unint64_t)(v154 & 0x7F) << v148;
            if (v154 < 0)
            {
              v148 += 7;
              v16 = v149++ >= 9;
              if (v16)
              {
                v150 = 0;
                goto LABEL_386;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v150 = 0;
LABEL_386:
        objc_msgSend(a1, "setIsMeCard:", v150 != 0);
        goto LABEL_275;
      case 0x19u:
        v155 = 0;
        v156 = 0;
        v157 = 0;
        while (2)
        {
          v158 = *v4;
          v159 = *(_QWORD *)(a2 + v158);
          v160 = v159 + 1;
          if (v159 == -1 || v160 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v161 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v159);
            *(_QWORD *)(a2 + v158) = v160;
            v157 |= (unint64_t)(v161 & 0x7F) << v155;
            if (v161 < 0)
            {
              v155 += 7;
              v16 = v156++ >= 9;
              if (v16)
              {
                v157 = 0;
                goto LABEL_390;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v157 = 0;
LABEL_390:
        objc_msgSend(a1, "setIsMeCardRelation:", v157 != 0);
        goto LABEL_275;
      case 0x1Au:
        v162 = 0;
        v163 = 0;
        v164 = 0;
        while (2)
        {
          v165 = *v4;
          v166 = *(_QWORD *)(a2 + v165);
          v167 = v166 + 1;
          if (v166 == -1 || v167 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v168 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v166);
            *(_QWORD *)(a2 + v165) = v167;
            v164 |= (unint64_t)(v168 & 0x7F) << v162;
            if (v168 < 0)
            {
              v162 += 7;
              v16 = v163++ >= 9;
              if (v16)
              {
                v164 = 0;
                goto LABEL_394;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v164 = 0;
LABEL_394:
        objc_msgSend(a1, "setIsMeCardRelationExactMatch:", v164 != 0);
        goto LABEL_275;
      case 0x1Bu:
        v169 = 0;
        v170 = 0;
        v171 = 0;
        while (2)
        {
          v172 = *v4;
          v173 = *(_QWORD *)(a2 + v172);
          v174 = v173 + 1;
          if (v173 == -1 || v174 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v175 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v173);
            *(_QWORD *)(a2 + v172) = v174;
            v171 |= (unint64_t)(v175 & 0x7F) << v169;
            if (v175 < 0)
            {
              v169 += 7;
              v16 = v170++ >= 9;
              if (v16)
              {
                v171 = 0;
                goto LABEL_398;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v171 = 0;
LABEL_398:
        objc_msgSend(a1, "setIsRelationAlias:", v171 != 0);
        goto LABEL_275;
      case 0x1Cu:
        v176 = 0;
        v177 = 0;
        v178 = 0;
        while (2)
        {
          v179 = *v4;
          v180 = *(_QWORD *)(a2 + v179);
          v181 = v180 + 1;
          if (v180 == -1 || v181 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v182 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v180);
            *(_QWORD *)(a2 + v179) = v181;
            v178 |= (unint64_t)(v182 & 0x7F) << v176;
            if (v182 < 0)
            {
              v176 += 7;
              v16 = v177++ >= 9;
              if (v16)
              {
                v178 = 0;
                goto LABEL_402;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v178 = 0;
LABEL_402:
        objc_msgSend(a1, "setAreQueryDiacriticsRemoved:", v178 != 0);
        goto LABEL_275;
      case 0x1Du:
        v183 = 0;
        v184 = 0;
        v185 = 0;
        while (2)
        {
          v186 = *v4;
          v187 = *(_QWORD *)(a2 + v186);
          v188 = v187 + 1;
          if (v187 == -1 || v188 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v189 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v187);
            *(_QWORD *)(a2 + v186) = v188;
            v185 |= (unint64_t)(v189 & 0x7F) << v183;
            if (v189 < 0)
            {
              v183 += 7;
              v16 = v184++ >= 9;
              if (v16)
              {
                v185 = 0;
                goto LABEL_406;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v185 = 0;
LABEL_406:
        objc_msgSend(a1, "setIsQueryNameDerivedFromRelationshipLabel:", v185 != 0);
        goto LABEL_275;
      case 0x1Eu:
        v190 = 0;
        v191 = 0;
        v192 = 0;
        while (2)
        {
          v193 = *v4;
          v194 = *(_QWORD *)(a2 + v193);
          v195 = v194 + 1;
          if (v194 == -1 || v195 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v196 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v194);
            *(_QWORD *)(a2 + v193) = v195;
            v192 |= (unint64_t)(v196 & 0x7F) << v190;
            if (v196 < 0)
            {
              v190 += 7;
              v16 = v191++ >= 9;
              if (v16)
              {
                v192 = 0;
                goto LABEL_410;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v192 = 0;
LABEL_410:
        objc_msgSend(a1, "setIsQueryRelationshipLabelDerivedFromName:", v192 != 0);
        goto LABEL_275;
      case 0x1Fu:
        v197 = 0;
        v198 = 0;
        v199 = 0;
        while (2)
        {
          v200 = *v4;
          v201 = *(_QWORD *)(a2 + v200);
          v202 = v201 + 1;
          if (v201 == -1 || v202 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v203 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v201);
            *(_QWORD *)(a2 + v200) = v202;
            v199 |= (unint64_t)(v203 & 0x7F) << v197;
            if (v203 < 0)
            {
              v197 += 7;
              v16 = v198++ >= 9;
              if (v16)
              {
                v199 = 0;
                goto LABEL_414;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v199 = 0;
LABEL_414:
        objc_msgSend(a1, "setIsThirdPartyMatch:", v199 != 0);
        goto LABEL_275;
      case 0x20u:
        v204 = 0;
        v205 = 0;
        v206 = 0;
        while (2)
        {
          v207 = *v4;
          v208 = *(_QWORD *)(a2 + v207);
          v209 = v208 + 1;
          if (v208 == -1 || v209 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v210 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v208);
            *(_QWORD *)(a2 + v207) = v209;
            v206 |= (unint64_t)(v210 & 0x7F) << v204;
            if (v210 < 0)
            {
              v204 += 7;
              v16 = v205++ >= 9;
              if (v16)
              {
                v206 = 0;
                goto LABEL_418;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v206 = 0;
LABEL_418:
        objc_msgSend(a1, "setIsFavorite:", v206 != 0);
        goto LABEL_275;
      case 0x21u:
        v211 = 0;
        v212 = 0;
        v213 = 0;
        while (2)
        {
          v214 = *v4;
          v215 = *(_QWORD *)(a2 + v214);
          v216 = v215 + 1;
          if (v215 == -1 || v216 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v217 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v215);
            *(_QWORD *)(a2 + v214) = v216;
            v213 |= (unint64_t)(v217 & 0x7F) << v211;
            if (v217 < 0)
            {
              v211 += 7;
              v16 = v212++ >= 9;
              if (v16)
              {
                v213 = 0;
                goto LABEL_422;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v213 = 0;
LABEL_422:
        objc_msgSend(a1, "setIsTransliterated:", v213 != 0);
        goto LABEL_275;
      case 0x22u:
        v20 = objc_alloc_init(INFERENCESchemaINFERENCERequestMatchSignalSet);
        if (!PBReaderPlaceMark()
          || (INFERENCESchemaINFERENCERequestMatchSignalSetReadFrom(v20, a2) & 1) == 0)
        {
          goto LABEL_470;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setRequestMatchSignalSet:", v20, 0, 0);
        goto LABEL_274;
      case 0x23u:
        v20 = objc_alloc_init(INFERENCESchemaINFERENCEContactHandleSignalSet);
        v290 = 0;
        v291 = 0;
        if (PBReaderPlaceMark()
          && INFERENCESchemaINFERENCEContactHandleSignalSetReadFrom(v20, a2))
        {
          PBReaderRecallMark();
          if (v20)
            objc_msgSend(a1, "addHandlesWithPrivacySignalSets:", v20, 0, 0);
LABEL_274:

LABEL_275:
          if (*(_QWORD *)(a2 + *v4) >= *(_QWORD *)(a2 + *v5))
            return *(_BYTE *)(a2 + *v6) == 0;
          continue;
        }
LABEL_470:

        return 0;
      case 0x24u:
        v218 = 0;
        v219 = 0;
        v220 = 0;
        while (2)
        {
          v221 = *v4;
          v222 = *(_QWORD *)(a2 + v221);
          v223 = v222 + 1;
          if (v222 == -1 || v223 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v224 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v222);
            *(_QWORD *)(a2 + v221) = v223;
            v220 |= (unint64_t)(v224 & 0x7F) << v218;
            if (v224 < 0)
            {
              v218 += 7;
              v16 = v219++ >= 9;
              if (v16)
              {
                v220 = 0;
                goto LABEL_426;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v220 = 0;
LABEL_426:
        objc_msgSend(a1, "setHasHandleWithPreferredType:", v220 != 0);
        goto LABEL_275;
      case 0x25u:
        v225 = 0;
        v226 = 0;
        v227 = 0;
        while (2)
        {
          v228 = *v4;
          v229 = *(_QWORD *)(a2 + v228);
          v230 = v229 + 1;
          if (v229 == -1 || v230 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v231 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v229);
            *(_QWORD *)(a2 + v228) = v230;
            v227 |= (unint64_t)(v231 & 0x7F) << v225;
            if (v231 < 0)
            {
              v225 += 7;
              v16 = v226++ >= 9;
              if (v16)
              {
                v227 = 0;
                goto LABEL_430;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v227 = 0;
LABEL_430:
        objc_msgSend(a1, "setHasHandleWithAllowedType:", v227 != 0);
        goto LABEL_275;
      case 0x26u:
        v232 = 0;
        v233 = 0;
        v234 = 0;
        while (2)
        {
          v235 = *v4;
          v236 = *(_QWORD *)(a2 + v235);
          v237 = v236 + 1;
          if (v236 == -1 || v237 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v238 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v236);
            *(_QWORD *)(a2 + v235) = v237;
            v234 |= (unint64_t)(v238 & 0x7F) << v232;
            if (v238 < 0)
            {
              v232 += 7;
              v16 = v233++ >= 9;
              if (v16)
              {
                v234 = 0;
                goto LABEL_434;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v234 = 0;
LABEL_434:
        objc_msgSend(a1, "setIsCommunalRequest:", v234 != 0);
        goto LABEL_275;
      case 0x27u:
        v239 = *v4;
        v240 = *(_QWORD *)(a2 + v239);
        if (v240 <= 0xFFFFFFFFFFFFFFFBLL && v240 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v240);
          *(_QWORD *)(a2 + v239) = v240 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setFractionOfCommunalDevicesMatchingCandidate:", a3, v290, v291);
        goto LABEL_275;
      case 0x28u:
        v241 = 0;
        v242 = 0;
        v243 = 0;
        while (2)
        {
          v244 = *v4;
          v245 = *(_QWORD *)(a2 + v244);
          v246 = v245 + 1;
          if (v245 == -1 || v246 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v247 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v245);
            *(_QWORD *)(a2 + v244) = v246;
            v243 |= (unint64_t)(v247 & 0x7F) << v241;
            if (v247 < 0)
            {
              v241 += 7;
              v16 = v242++ >= 9;
              if (v16)
              {
                v243 = 0;
                goto LABEL_438;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v243 = 0;
LABEL_438:
        objc_msgSend(a1, "setIsPlusSignal:", v243 != 0);
        goto LABEL_275;
      case 0x29u:
        v248 = 0;
        v249 = 0;
        v250 = 0;
        while (2)
        {
          v251 = *v4;
          v252 = *(_QWORD *)(a2 + v251);
          v253 = v252 + 1;
          if (v252 == -1 || v253 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v254 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v252);
            *(_QWORD *)(a2 + v251) = v253;
            v250 |= (unint64_t)(v254 & 0x7F) << v248;
            if (v254 < 0)
            {
              v248 += 7;
              v16 = v249++ >= 9;
              if (v16)
              {
                v250 = 0;
                goto LABEL_442;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v250 = 0;
LABEL_442:
        objc_msgSend(a1, "setIsOnlyCandidate:", v250 != 0);
        goto LABEL_275;
      case 0x2Au:
        PBReaderReadString();
        v20 = (INFERENCESchemaINFERENCESpeechAlternativeRanks *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setThirdPartyAppBundleId:", v20);
        goto LABEL_274;
      case 0x2Bu:
        v255 = 0;
        v256 = 0;
        v257 = 0;
        while (2)
        {
          v258 = *v4;
          v259 = *(_QWORD *)(a2 + v258);
          v260 = v259 + 1;
          if (v259 == -1 || v260 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v261 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v259);
            *(_QWORD *)(a2 + v258) = v260;
            v257 |= (unint64_t)(v261 & 0x7F) << v255;
            if (v261 < 0)
            {
              v255 += 7;
              v16 = v256++ >= 9;
              if (v16)
              {
                v257 = 0;
                goto LABEL_446;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v257 = 0;
LABEL_446:
        objc_msgSend(a1, "setIsQueryNormalized:", v257 != 0);
        goto LABEL_275;
      case 0x2Cu:
        v262 = 0;
        v263 = 0;
        v264 = 0;
        while (2)
        {
          v265 = *v4;
          v266 = *(_QWORD *)(a2 + v265);
          v267 = v266 + 1;
          if (v266 == -1 || v267 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v268 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v266);
            *(_QWORD *)(a2 + v265) = v267;
            v264 |= (unint64_t)(v268 & 0x7F) << v262;
            if (v268 < 0)
            {
              v262 += 7;
              v16 = v263++ >= 9;
              if (v16)
              {
                v264 = 0;
                goto LABEL_450;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v264 = 0;
LABEL_450:
        objc_msgSend(a1, "setIsQueryStrippedOfPunctuation:", v264 != 0);
        goto LABEL_275;
      case 0x2Du:
        v269 = 0;
        v270 = 0;
        v271 = 0;
        while (2)
        {
          v272 = *v4;
          v273 = *(_QWORD *)(a2 + v272);
          v274 = v273 + 1;
          if (v273 == -1 || v274 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v275 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v273);
            *(_QWORD *)(a2 + v272) = v274;
            v271 |= (unint64_t)(v275 & 0x7F) << v269;
            if (v275 < 0)
            {
              v269 += 7;
              v16 = v270++ >= 9;
              if (v16)
              {
                v271 = 0;
                goto LABEL_454;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v271 = 0;
LABEL_454:
        objc_msgSend(a1, "setIsQueryStrippedOfWhitespace:", v271 != 0);
        goto LABEL_275;
      case 0x2Eu:
        v276 = 0;
        v277 = 0;
        v278 = 0;
        while (2)
        {
          v279 = *v4;
          v280 = *(_QWORD *)(a2 + v279);
          v281 = v280 + 1;
          if (v280 == -1 || v281 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v282 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v280);
            *(_QWORD *)(a2 + v279) = v281;
            v278 |= (unint64_t)(v282 & 0x7F) << v276;
            if (v282 < 0)
            {
              v276 += 7;
              v16 = v277++ >= 9;
              if (v16)
              {
                v278 = 0;
                goto LABEL_458;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v278 = 0;
LABEL_458:
        objc_msgSend(a1, "setIsQueryStrippedOfSymbols:", v278 != 0);
        goto LABEL_275;
      case 0x2Fu:
        v283 = 0;
        v284 = 0;
        v285 = 0;
        while (2)
        {
          v286 = *v4;
          v287 = *(_QWORD *)(a2 + v286);
          v288 = v287 + 1;
          if (v287 == -1 || v288 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v289 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v287);
            *(_QWORD *)(a2 + v286) = v288;
            v285 |= (unint64_t)(v289 & 0x7F) << v283;
            if (v289 < 0)
            {
              v283 += 7;
              v16 = v284++ >= 9;
              if (v16)
              {
                v285 = 0;
                goto LABEL_462;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v285 = 0;
LABEL_462:
        objc_msgSend(a1, "setIsAsrE3Signal:", v285 != 0);
        goto LABEL_275;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_275;
    }
  }
}

BOOL INFERENCESchemaINFERENCEDisambiguationPromptContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addAnonymizedEntitiesPresented:", v17);
        goto LABEL_23;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_25:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setAnonymizedEntitySelected:", v17);
LABEL_23:

    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INFERENCESchemaINFERENCELongRunningTaskInfoReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setDurationInMs:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL INFERENCESchemaINFERENCEMusicAppSelectionGroundTruthGeneratedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  INFERENCESchemaINFERENCEMusicTrainingIndependentSignals *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(INFERENCESchemaINFERENCEMusicTrainingIndependentSignals);
        if (!PBReaderPlaceMark()
          || (INFERENCESchemaINFERENCEMusicTrainingIndependentSignalsReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_32;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setInferenceMusicTrainingIndependentSignals:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(INFERENCESchemaINFERENCEMusicTrainingDependentSignals);
    if (!PBReaderPlaceMark()
      || !INFERENCESchemaINFERENCEMusicTrainingDependentSignalsReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addInferenceMusicTrainingDependentSignals:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INFERENCESchemaINFERENCEMusicTrainingDependentSignalsReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  uint64_t v32;
  unint64_t v33;
  double v34;
  uint64_t v35;
  unint64_t v36;
  double v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t result;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  double v63;
  uint64_t v64;
  unint64_t v65;
  double v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  char v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  char v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  char v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  char v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char v139;
  char v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char v146;
  uint64_t v147;
  char v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  uint64_t v155;
  char v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char v162;
  uint64_t v163;
  char v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char v170;
  uint64_t v171;
  char v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char v178;
  uint64_t v179;
  char v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char v186;
  uint64_t v187;
  char v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  char v194;
  uint64_t v195;
  char v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  char v202;
  uint64_t v203;
  char v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  char v210;
  uint64_t v211;
  char v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  char v218;
  uint64_t v219;
  char v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  char v226;
  uint64_t v227;
  char v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  char v234;
  uint64_t v235;
  char v236;
  unsigned int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  char v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  double v246;
  uint64_t v247;
  unint64_t v248;
  double v249;
  uint64_t v250;
  unint64_t v251;
  double v252;
  char v253;
  unsigned int v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  char v259;
  char v260;
  unsigned int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  char v266;
  char v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  char v273;
  char v274;
  unsigned int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  char v280;
  uint64_t v281;
  unint64_t v282;
  double v283;
  char v284;
  unsigned int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  char v290;
  char v291;
  unsigned int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  char v297;
  char v298;
  unsigned int v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  char v304;
  char v305;
  unsigned int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  char v311;
  char v312;
  unsigned int v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  char v318;
  uint64_t v319;
  unint64_t v320;
  double v321;
  uint64_t v322;
  unint64_t v323;
  double v324;
  char v325;
  unsigned int v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  char v331;
  uint64_t v332;
  char v333;
  unsigned int v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  char v339;
  uint64_t v340;
  char v341;
  unsigned int v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  char v347;
  uint64_t v348;
  char v349;
  unsigned int v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unint64_t v354;
  char v355;
  char v356;
  unsigned int v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  char v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  double v366;
  uint64_t v367;
  unint64_t v368;
  double v369;
  char v370;
  unsigned int v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  char v376;
  uint64_t v377;
  char v378;
  unsigned int v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  char v384;
  uint64_t v385;
  char v386;
  unsigned int v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  char v392;
  uint64_t v393;
  char v394;
  unsigned int v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  char v400;
  uint64_t v401;
  char v402;
  unsigned int v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  char v408;
  uint64_t v409;
  char v410;
  unsigned int v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  char v416;
  uint64_t v417;
  char v418;
  unsigned int v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unint64_t v423;
  char v424;
  uint64_t v425;
  char v426;
  unsigned int v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  char v432;
  uint64_t v433;
  char v434;
  unsigned int v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t v439;
  char v440;
  uint64_t v441;
  char v442;
  unsigned int v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  char v448;
  char v449;
  unsigned int v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  char v455;
  char v456;
  unsigned int v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  char v462;
  uint64_t v463;
  unint64_t v464;
  double v465;
  uint64_t v466;
  unint64_t v467;
  double v468;
  uint64_t v469;
  unint64_t v470;
  double v471;
  uint64_t v472;
  unint64_t v473;
  double v474;
  uint64_t v475;
  unint64_t v476;
  double v477;
  uint64_t v478;
  unint64_t v479;
  double v480;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v19 = 0;
          v20 = 0;
          v21 = 0;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v4))
              break;
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              goto LABEL_453;
            v19 += 7;
            v15 = v20++ >= 9;
            if (v15)
            {
              v21 = 0;
              goto LABEL_455;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_453:
          if (*(_BYTE *)(a2 + *v5))
            v21 = 0;
LABEL_455:
          objc_msgSend(a1, "setIsClientForegroundActiveBundle:", v21 != 0);
          continue;
        case 2u:
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v28 = *(double *)(*(_QWORD *)(a2 + *v7) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v28 = 0.0;
          }
          objc_msgSend(a1, "setCompoundActiveBundleScore:", v28);
          continue;
        case 3u:
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v31 = *(double *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v31 = 0.0;
          }
          objc_msgSend(a1, "setCompoundMediaTypeBundleScore:", v31);
          continue;
        case 4u:
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 <= 0xFFFFFFFFFFFFFFF7 && v33 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v34 = *(double *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v34 = 0.0;
          }
          objc_msgSend(a1, "setEntitySearchBundleRecencyS:", v34);
          continue;
        case 5u:
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v37 = *(double *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v37 = 0.0;
          }
          objc_msgSend(a1, "setEntitySearchBundleScore:", v37);
          continue;
        case 6u:
          v38 = 0;
          v39 = 0;
          v40 = 0;
          while (2)
          {
            v41 = *v3;
            v42 = *(_QWORD *)(a2 + v41);
            v43 = v42 + 1;
            if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
              *(_QWORD *)(a2 + v41) = v43;
              v40 |= (unint64_t)(v44 & 0x7F) << v38;
              if (v44 < 0)
              {
                v38 += 7;
                v15 = v39++ >= 9;
                if (v15)
                {
                  v40 = 0;
                  goto LABEL_459;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v40 = 0;
LABEL_459:
          objc_msgSend(a1, "setIsForegroundBundle:", v40 != 0);
          continue;
        case 8u:
          v46 = 0;
          v47 = 0;
          v48 = 0;
          while (2)
          {
            v49 = *v3;
            v50 = *(_QWORD *)(a2 + v49);
            v51 = v50 + 1;
            if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
              *(_QWORD *)(a2 + v49) = v51;
              v48 |= (unint64_t)(v52 & 0x7F) << v46;
              if (v52 < 0)
              {
                v46 += 7;
                v15 = v47++ >= 9;
                if (v15)
                {
                  v48 = 0;
                  goto LABEL_463;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v48 = 0;
LABEL_463:
          objc_msgSend(a1, "setIsNowPlayingBundle:", v48 != 0);
          continue;
        case 9u:
          v53 = 0;
          v54 = 0;
          v55 = 0;
          while (2)
          {
            v56 = *v3;
            v57 = *(_QWORD *)(a2 + v56);
            v58 = v57 + 1;
            if (v57 == -1 || v58 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
              *(_QWORD *)(a2 + v56) = v58;
              v55 |= (unint64_t)(v59 & 0x7F) << v53;
              if (v59 < 0)
              {
                v53 += 7;
                v15 = v54++ >= 9;
                if (v15)
                {
                  v60 = 0;
                  goto LABEL_468;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v60 = 0;
          else
            v60 = v55;
LABEL_468:
          objc_msgSend(a1, "setNowPlayingBundleCount:", v60);
          continue;
        case 0xAu:
          v61 = *v3;
          v62 = *(_QWORD *)(a2 + v61);
          if (v62 <= 0xFFFFFFFFFFFFFFF7 && v62 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v63 = *(double *)(*(_QWORD *)(a2 + *v7) + v62);
            *(_QWORD *)(a2 + v61) = v62 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v63 = 0.0;
          }
          objc_msgSend(a1, "setNowPlayingBundleRecencyS:", v63);
          continue;
        case 0xBu:
          v64 = *v3;
          v65 = *(_QWORD *)(a2 + v64);
          if (v65 <= 0xFFFFFFFFFFFFFFF7 && v65 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v66 = *(double *)(*(_QWORD *)(a2 + *v7) + v65);
            *(_QWORD *)(a2 + v64) = v65 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v66 = 0.0;
          }
          objc_msgSend(a1, "setNowPlayingBundleScore:", v66);
          continue;
        case 0xCu:
          v67 = 0;
          v68 = 0;
          v69 = 0;
          while (2)
          {
            v70 = *v3;
            v71 = *(_QWORD *)(a2 + v70);
            v72 = v71 + 1;
            if (v71 == -1 || v72 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v73 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v71);
              *(_QWORD *)(a2 + v70) = v72;
              v69 |= (unint64_t)(v73 & 0x7F) << v67;
              if (v73 < 0)
              {
                v67 += 7;
                v15 = v68++ >= 9;
                if (v15)
                {
                  v69 = 0;
                  goto LABEL_472;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v69 = 0;
LABEL_472:
          objc_msgSend(a1, "setIsNowPlayingLastBundle:", v69 != 0);
          continue;
        case 0xDu:
          v74 = 0;
          v75 = 0;
          v76 = 0;
          while (2)
          {
            v77 = *v3;
            v78 = *(_QWORD *)(a2 + v77);
            v79 = v78 + 1;
            if (v78 == -1 || v79 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v80 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v78);
              *(_QWORD *)(a2 + v77) = v79;
              v76 |= (unint64_t)(v80 & 0x7F) << v74;
              if (v80 < 0)
              {
                v74 += 7;
                v15 = v75++ >= 9;
                if (v15)
                {
                  v81 = 0;
                  goto LABEL_477;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v81 = 0;
          else
            v81 = v76;
LABEL_477:
          objc_msgSend(a1, "setNowPlayingUsage1Day:", v81);
          continue;
        case 0xEu:
          v82 = 0;
          v83 = 0;
          v84 = 0;
          while (2)
          {
            v85 = *v3;
            v86 = *(_QWORD *)(a2 + v85);
            v87 = v86 + 1;
            if (v86 == -1 || v87 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v88 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v86);
              *(_QWORD *)(a2 + v85) = v87;
              v84 |= (unint64_t)(v88 & 0x7F) << v82;
              if (v88 < 0)
              {
                v82 += 7;
                v15 = v83++ >= 9;
                if (v15)
                {
                  v89 = 0;
                  goto LABEL_482;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v89 = 0;
          else
            v89 = v84;
LABEL_482:
          objc_msgSend(a1, "setNowPlayingUsage7Days:", v89);
          continue;
        case 0xFu:
          v90 = 0;
          v91 = 0;
          v92 = 0;
          while (2)
          {
            v93 = *v3;
            v94 = *(_QWORD *)(a2 + v93);
            v95 = v94 + 1;
            if (v94 == -1 || v95 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v96 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v94);
              *(_QWORD *)(a2 + v93) = v95;
              v92 |= (unint64_t)(v96 & 0x7F) << v90;
              if (v96 < 0)
              {
                v90 += 7;
                v15 = v91++ >= 9;
                if (v15)
                {
                  v97 = 0;
                  goto LABEL_487;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v97 = 0;
          else
            v97 = v92;
LABEL_487:
          objc_msgSend(a1, "setNowPlayingUsage14Days:", v97);
          continue;
        case 0x10u:
          v98 = 0;
          v99 = 0;
          v100 = 0;
          while (2)
          {
            v101 = *v3;
            v102 = *(_QWORD *)(a2 + v101);
            v103 = v102 + 1;
            if (v102 == -1 || v103 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v104 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v102);
              *(_QWORD *)(a2 + v101) = v103;
              v100 |= (unint64_t)(v104 & 0x7F) << v98;
              if (v104 < 0)
              {
                v98 += 7;
                v15 = v99++ >= 9;
                if (v15)
                {
                  v100 = 0;
                  goto LABEL_491;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v100 = 0;
LABEL_491:
          objc_msgSend(a1, "setIsRawLastNowPlayingCoreDuet:", v100 != 0);
          continue;
        case 0x11u:
          v105 = 0;
          v106 = 0;
          v107 = 0;
          while (2)
          {
            v108 = *v3;
            v109 = *(_QWORD *)(a2 + v108);
            v110 = v109 + 1;
            if (v109 == -1 || v110 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v111 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v109);
              *(_QWORD *)(a2 + v108) = v110;
              v107 |= (unint64_t)(v111 & 0x7F) << v105;
              if (v111 < 0)
              {
                v105 += 7;
                v15 = v106++ >= 9;
                if (v15)
                {
                  v107 = 0;
                  goto LABEL_495;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v107 = 0;
LABEL_495:
          objc_msgSend(a1, "setIsRawMediaCategoryAudiobookSignal:", v107 != 0);
          continue;
        case 0x12u:
          v112 = 0;
          v113 = 0;
          v114 = 0;
          while (2)
          {
            v115 = *v3;
            v116 = *(_QWORD *)(a2 + v115);
            v117 = v116 + 1;
            if (v116 == -1 || v117 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v118 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v116);
              *(_QWORD *)(a2 + v115) = v117;
              v114 |= (unint64_t)(v118 & 0x7F) << v112;
              if (v118 < 0)
              {
                v112 += 7;
                v15 = v113++ >= 9;
                if (v15)
                {
                  v114 = 0;
                  goto LABEL_499;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v114 = 0;
LABEL_499:
          objc_msgSend(a1, "setIsRawMediaCategoryMusicSignal:", v114 != 0);
          continue;
        case 0x13u:
          v119 = 0;
          v120 = 0;
          v121 = 0;
          while (2)
          {
            v122 = *v3;
            v123 = *(_QWORD *)(a2 + v122);
            v124 = v123 + 1;
            if (v123 == -1 || v124 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v125 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v123);
              *(_QWORD *)(a2 + v122) = v124;
              v121 |= (unint64_t)(v125 & 0x7F) << v119;
              if (v125 < 0)
              {
                v119 += 7;
                v15 = v120++ >= 9;
                if (v15)
                {
                  v121 = 0;
                  goto LABEL_503;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v121 = 0;
LABEL_503:
          objc_msgSend(a1, "setIsRawMediaCategoryPodcastSignal:", v121 != 0);
          continue;
        case 0x14u:
          v126 = 0;
          v127 = 0;
          v128 = 0;
          while (2)
          {
            v129 = *v3;
            v130 = *(_QWORD *)(a2 + v129);
            v131 = v130 + 1;
            if (v130 == -1 || v131 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v132 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v130);
              *(_QWORD *)(a2 + v129) = v131;
              v128 |= (unint64_t)(v132 & 0x7F) << v126;
              if (v132 < 0)
              {
                v126 += 7;
                v15 = v127++ >= 9;
                if (v15)
                {
                  v128 = 0;
                  goto LABEL_507;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v128 = 0;
LABEL_507:
          objc_msgSend(a1, "setIsRawMediaCategoryRadioSignal:", v128 != 0);
          continue;
        case 0x15u:
          v133 = 0;
          v134 = 0;
          v135 = 0;
          while (2)
          {
            v136 = *v3;
            v137 = *(_QWORD *)(a2 + v136);
            v138 = v137 + 1;
            if (v137 == -1 || v138 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v139 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v137);
              *(_QWORD *)(a2 + v136) = v138;
              v135 |= (unint64_t)(v139 & 0x7F) << v133;
              if (v139 < 0)
              {
                v133 += 7;
                v15 = v134++ >= 9;
                if (v15)
                {
                  v135 = 0;
                  goto LABEL_511;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v135 = 0;
LABEL_511:
          objc_msgSend(a1, "setIsRawMediaCategoryVideoSignal:", v135 != 0);
          continue;
        case 0x16u:
          v140 = 0;
          v141 = 0;
          v142 = 0;
          while (2)
          {
            v143 = *v3;
            v144 = *(_QWORD *)(a2 + v143);
            v145 = v144 + 1;
            if (v144 == -1 || v145 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v146 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v144);
              *(_QWORD *)(a2 + v143) = v145;
              v142 |= (unint64_t)(v146 & 0x7F) << v140;
              if (v146 < 0)
              {
                v140 += 7;
                v15 = v141++ >= 9;
                if (v15)
                {
                  v147 = 0;
                  goto LABEL_516;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v147 = 0;
          else
            v147 = v142;
LABEL_516:
          objc_msgSend(a1, "setRawMediaTypeUsageSignalBook:", v147);
          continue;
        case 0x17u:
          v148 = 0;
          v149 = 0;
          v150 = 0;
          while (2)
          {
            v151 = *v3;
            v152 = *(_QWORD *)(a2 + v151);
            v153 = v152 + 1;
            if (v152 == -1 || v153 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v154 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v152);
              *(_QWORD *)(a2 + v151) = v153;
              v150 |= (unint64_t)(v154 & 0x7F) << v148;
              if (v154 < 0)
              {
                v148 += 7;
                v15 = v149++ >= 9;
                if (v15)
                {
                  v155 = 0;
                  goto LABEL_521;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v155 = 0;
          else
            v155 = v150;
LABEL_521:
          objc_msgSend(a1, "setRawMediaTypeUsageSignalMusic:", v155);
          continue;
        case 0x18u:
          v156 = 0;
          v157 = 0;
          v158 = 0;
          while (2)
          {
            v159 = *v3;
            v160 = *(_QWORD *)(a2 + v159);
            v161 = v160 + 1;
            if (v160 == -1 || v161 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v162 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v160);
              *(_QWORD *)(a2 + v159) = v161;
              v158 |= (unint64_t)(v162 & 0x7F) << v156;
              if (v162 < 0)
              {
                v156 += 7;
                v15 = v157++ >= 9;
                if (v15)
                {
                  v163 = 0;
                  goto LABEL_526;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v163 = 0;
          else
            v163 = v158;
LABEL_526:
          objc_msgSend(a1, "setRawMediaTypeUsageSignalPodcast:", v163);
          continue;
        case 0x19u:
          v164 = 0;
          v165 = 0;
          v166 = 0;
          while (2)
          {
            v167 = *v3;
            v168 = *(_QWORD *)(a2 + v167);
            v169 = v168 + 1;
            if (v168 == -1 || v169 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v170 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v168);
              *(_QWORD *)(a2 + v167) = v169;
              v166 |= (unint64_t)(v170 & 0x7F) << v164;
              if (v170 < 0)
              {
                v164 += 7;
                v15 = v165++ >= 9;
                if (v15)
                {
                  v171 = 0;
                  goto LABEL_531;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v171 = 0;
          else
            v171 = v166;
LABEL_531:
          objc_msgSend(a1, "setRawMediaTypeUsageSignalVideo:", v171);
          continue;
        case 0x1Bu:
          v172 = 0;
          v173 = 0;
          v174 = 0;
          while (2)
          {
            v175 = *v3;
            v176 = *(_QWORD *)(a2 + v175);
            v177 = v176 + 1;
            if (v176 == -1 || v177 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v178 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v176);
              *(_QWORD *)(a2 + v175) = v177;
              v174 |= (unint64_t)(v178 & 0x7F) << v172;
              if (v178 < 0)
              {
                v172 += 7;
                v15 = v173++ >= 9;
                if (v15)
                {
                  v179 = 0;
                  goto LABEL_536;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v179 = 0;
          else
            v179 = v174;
LABEL_536:
          objc_msgSend(a1, "setRawNowPlayingCountCoreDuet10Min:", v179);
          continue;
        case 0x1Cu:
          v180 = 0;
          v181 = 0;
          v182 = 0;
          while (2)
          {
            v183 = *v3;
            v184 = *(_QWORD *)(a2 + v183);
            v185 = v184 + 1;
            if (v184 == -1 || v185 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v186 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v184);
              *(_QWORD *)(a2 + v183) = v185;
              v182 |= (unint64_t)(v186 & 0x7F) << v180;
              if (v186 < 0)
              {
                v180 += 7;
                v15 = v181++ >= 9;
                if (v15)
                {
                  v187 = 0;
                  goto LABEL_541;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v187 = 0;
          else
            v187 = v182;
LABEL_541:
          objc_msgSend(a1, "setRawNowPlayingCountCoreDuet1Day:", v187);
          continue;
        case 0x1Du:
          v188 = 0;
          v189 = 0;
          v190 = 0;
          while (2)
          {
            v191 = *v3;
            v192 = *(_QWORD *)(a2 + v191);
            v193 = v192 + 1;
            if (v192 == -1 || v193 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v194 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v192);
              *(_QWORD *)(a2 + v191) = v193;
              v190 |= (unint64_t)(v194 & 0x7F) << v188;
              if (v194 < 0)
              {
                v188 += 7;
                v15 = v189++ >= 9;
                if (v15)
                {
                  v195 = 0;
                  goto LABEL_546;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v195 = 0;
          else
            v195 = v190;
LABEL_546:
          objc_msgSend(a1, "setRawNowPlayingCountCoreDuet1Hr:", v195);
          continue;
        case 0x1Eu:
          v196 = 0;
          v197 = 0;
          v198 = 0;
          while (2)
          {
            v199 = *v3;
            v200 = *(_QWORD *)(a2 + v199);
            v201 = v200 + 1;
            if (v200 == -1 || v201 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v202 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v200);
              *(_QWORD *)(a2 + v199) = v201;
              v198 |= (unint64_t)(v202 & 0x7F) << v196;
              if (v202 < 0)
              {
                v196 += 7;
                v15 = v197++ >= 9;
                if (v15)
                {
                  v203 = 0;
                  goto LABEL_551;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v203 = 0;
          else
            v203 = v198;
LABEL_551:
          objc_msgSend(a1, "setRawNowPlayingCountCoreDuet28Day:", v203);
          continue;
        case 0x1Fu:
          v204 = 0;
          v205 = 0;
          v206 = 0;
          while (2)
          {
            v207 = *v3;
            v208 = *(_QWORD *)(a2 + v207);
            v209 = v208 + 1;
            if (v208 == -1 || v209 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v210 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v208);
              *(_QWORD *)(a2 + v207) = v209;
              v206 |= (unint64_t)(v210 & 0x7F) << v204;
              if (v210 < 0)
              {
                v204 += 7;
                v15 = v205++ >= 9;
                if (v15)
                {
                  v211 = 0;
                  goto LABEL_556;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v211 = 0;
          else
            v211 = v206;
LABEL_556:
          objc_msgSend(a1, "setRawNowPlayingCountCoreDuet2Min:", v211);
          continue;
        case 0x20u:
          v212 = 0;
          v213 = 0;
          v214 = 0;
          while (2)
          {
            v215 = *v3;
            v216 = *(_QWORD *)(a2 + v215);
            v217 = v216 + 1;
            if (v216 == -1 || v217 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v218 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v216);
              *(_QWORD *)(a2 + v215) = v217;
              v214 |= (unint64_t)(v218 & 0x7F) << v212;
              if (v218 < 0)
              {
                v212 += 7;
                v15 = v213++ >= 9;
                if (v15)
                {
                  v219 = 0;
                  goto LABEL_561;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v219 = 0;
          else
            v219 = v214;
LABEL_561:
          objc_msgSend(a1, "setRawNowPlayingCountCoreDuet6Hr:", v219);
          continue;
        case 0x21u:
          v220 = 0;
          v221 = 0;
          v222 = 0;
          while (2)
          {
            v223 = *v3;
            v224 = *(_QWORD *)(a2 + v223);
            v225 = v224 + 1;
            if (v224 == -1 || v225 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v226 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v224);
              *(_QWORD *)(a2 + v223) = v225;
              v222 |= (unint64_t)(v226 & 0x7F) << v220;
              if (v226 < 0)
              {
                v220 += 7;
                v15 = v221++ >= 9;
                if (v15)
                {
                  v227 = 0;
                  goto LABEL_566;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v227 = 0;
          else
            v227 = v222;
LABEL_566:
          objc_msgSend(a1, "setRawNowPlayingCountCoreDuet7Day:", v227);
          continue;
        case 0x22u:
          v228 = 0;
          v229 = 0;
          v230 = 0;
          while (2)
          {
            v231 = *v3;
            v232 = *(_QWORD *)(a2 + v231);
            v233 = v232 + 1;
            if (v232 == -1 || v233 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v234 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v232);
              *(_QWORD *)(a2 + v231) = v233;
              v230 |= (unint64_t)(v234 & 0x7F) << v228;
              if (v234 < 0)
              {
                v228 += 7;
                v15 = v229++ >= 9;
                if (v15)
                {
                  v235 = 0;
                  goto LABEL_571;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v235 = 0;
          else
            v235 = v230;
LABEL_571:
          objc_msgSend(a1, "setRawNowPlayingRecencyCD:", v235);
          continue;
        case 0x23u:
          v236 = 0;
          v237 = 0;
          v238 = 0;
          while (2)
          {
            v239 = *v3;
            v240 = *(_QWORD *)(a2 + v239);
            v241 = v240 + 1;
            if (v240 == -1 || v241 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v242 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v240);
              *(_QWORD *)(a2 + v239) = v241;
              v238 |= (unint64_t)(v242 & 0x7F) << v236;
              if (v242 < 0)
              {
                v236 += 7;
                v15 = v237++ >= 9;
                if (v15)
                {
                  v243 = 0;
                  goto LABEL_576;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v243 = 0;
          else
            v243 = v238;
LABEL_576:
          objc_msgSend(a1, "setRawEntitySearchRecency:", v243);
          continue;
        case 0x24u:
          v244 = *v3;
          v245 = *(_QWORD *)(a2 + v244);
          if (v245 <= 0xFFFFFFFFFFFFFFF7 && v245 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v246 = *(double *)(*(_QWORD *)(a2 + *v7) + v245);
            *(_QWORD *)(a2 + v244) = v245 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v246 = 0.0;
          }
          objc_msgSend(a1, "setUsageScoreBooks:", v246);
          continue;
        case 0x25u:
          v247 = *v3;
          v248 = *(_QWORD *)(a2 + v247);
          if (v248 <= 0xFFFFFFFFFFFFFFF7 && v248 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v249 = *(double *)(*(_QWORD *)(a2 + *v7) + v248);
            *(_QWORD *)(a2 + v247) = v248 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v249 = 0.0;
          }
          objc_msgSend(a1, "setUsageScoreMusic:", v249);
          continue;
        case 0x26u:
          v250 = *v3;
          v251 = *(_QWORD *)(a2 + v250);
          if (v251 <= 0xFFFFFFFFFFFFFFF7 && v251 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v252 = *(double *)(*(_QWORD *)(a2 + *v7) + v251);
            *(_QWORD *)(a2 + v250) = v251 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v252 = 0.0;
          }
          objc_msgSend(a1, "setUsageScorePodcasts:", v252);
          continue;
        case 0x27u:
          v253 = 0;
          v254 = 0;
          v255 = 0;
          while (2)
          {
            v256 = *v3;
            v257 = *(_QWORD *)(a2 + v256);
            v258 = v257 + 1;
            if (v257 == -1 || v258 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v259 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v257);
              *(_QWORD *)(a2 + v256) = v258;
              v255 |= (unint64_t)(v259 & 0x7F) << v253;
              if (v259 < 0)
              {
                v253 += 7;
                v15 = v254++ >= 9;
                if (v15)
                {
                  v255 = 0;
                  goto LABEL_580;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v255 = 0;
LABEL_580:
          objc_msgSend(a1, "setIsAppFirstParty:", v255 != 0);
          continue;
        case 0x28u:
          v260 = 0;
          v261 = 0;
          v262 = 0;
          while (2)
          {
            v263 = *v3;
            v264 = *(_QWORD *)(a2 + v263);
            v265 = v264 + 1;
            if (v264 == -1 || v265 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v266 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v264);
              *(_QWORD *)(a2 + v263) = v265;
              v262 |= (unint64_t)(v266 & 0x7F) << v260;
              if (v266 < 0)
              {
                v260 += 7;
                v15 = v261++ >= 9;
                if (v15)
                {
                  v262 = 0;
                  goto LABEL_584;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v262 = 0;
LABEL_584:
          objc_msgSend(a1, "setIsRequestedApp:", v262 != 0);
          continue;
        case 0x29u:
          v267 = 0;
          v268 = 0;
          v269 = 0;
          while (2)
          {
            v270 = *v3;
            v271 = *(_QWORD *)(a2 + v270);
            v272 = v271 + 1;
            if (v271 == -1 || v272 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v273 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v271);
              *(_QWORD *)(a2 + v270) = v272;
              v269 |= (unint64_t)(v273 & 0x7F) << v267;
              if (v273 < 0)
              {
                v267 += 7;
                v15 = v268++ >= 9;
                if (v15)
                {
                  v269 = 0;
                  goto LABEL_588;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v269 = 0;
LABEL_588:
          objc_msgSend(a1, "setIsNowPlayingBundlePSE1:", v269 != 0);
          continue;
        case 0x2Au:
          v274 = 0;
          v275 = 0;
          v276 = 0;
          while (2)
          {
            v277 = *v3;
            v278 = *(_QWORD *)(a2 + v277);
            v279 = v278 + 1;
            if (v278 == -1 || v279 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v280 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v278);
              *(_QWORD *)(a2 + v277) = v279;
              v276 |= (unint64_t)(v280 & 0x7F) << v274;
              if (v280 < 0)
              {
                v274 += 7;
                v15 = v275++ >= 9;
                if (v15)
                {
                  v276 = 0;
                  goto LABEL_592;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v276 = 0;
LABEL_592:
          objc_msgSend(a1, "setIsNowPlayingBundlePSE2:", v276 != 0);
          continue;
        case 0x2Bu:
          v281 = *v3;
          v282 = *(_QWORD *)(a2 + v281);
          if (v282 <= 0xFFFFFFFFFFFFFFF7 && v282 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v283 = *(double *)(*(_QWORD *)(a2 + *v7) + v282);
            *(_QWORD *)(a2 + v281) = v282 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v283 = 0.0;
          }
          objc_msgSend(a1, "setVq21Score:", v283);
          continue;
        case 0x2Cu:
          v284 = 0;
          v285 = 0;
          v286 = 0;
          while (2)
          {
            v287 = *v3;
            v288 = *(_QWORD *)(a2 + v287);
            v289 = v288 + 1;
            if (v288 == -1 || v289 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v290 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v288);
              *(_QWORD *)(a2 + v287) = v289;
              v286 |= (unint64_t)(v290 & 0x7F) << v284;
              if (v290 < 0)
              {
                v284 += 7;
                v15 = v285++ >= 9;
                if (v15)
                {
                  v286 = 0;
                  goto LABEL_596;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v286 = 0;
LABEL_596:
          objc_msgSend(a1, "setIsSupportedFlag:", v286 != 0);
          continue;
        case 0x2Du:
          v291 = 0;
          v292 = 0;
          v293 = 0;
          while (2)
          {
            v294 = *v3;
            v295 = *(_QWORD *)(a2 + v294);
            v296 = v295 + 1;
            if (v295 == -1 || v296 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v297 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v295);
              *(_QWORD *)(a2 + v294) = v296;
              v293 |= (unint64_t)(v297 & 0x7F) << v291;
              if (v297 < 0)
              {
                v291 += 7;
                v15 = v292++ >= 9;
                if (v15)
                {
                  v293 = 0;
                  goto LABEL_600;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v293 = 0;
LABEL_600:
          objc_msgSend(a1, "setIsUnicornFlag:", v293 != 0);
          continue;
        case 0x2Eu:
          v298 = 0;
          v299 = 0;
          v300 = 0;
          while (2)
          {
            v301 = *v3;
            v302 = *(_QWORD *)(a2 + v301);
            v303 = v302 + 1;
            if (v302 == -1 || v303 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v304 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v302);
              *(_QWORD *)(a2 + v301) = v303;
              v300 |= (unint64_t)(v304 & 0x7F) << v298;
              if (v304 < 0)
              {
                v298 += 7;
                v15 = v299++ >= 9;
                if (v15)
                {
                  v300 = 0;
                  goto LABEL_604;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v300 = 0;
LABEL_604:
          objc_msgSend(a1, "setIsSupportedUnicornMatchFlag:", v300 != 0);
          continue;
        case 0x2Fu:
          v305 = 0;
          v306 = 0;
          v307 = 0;
          while (2)
          {
            v308 = *v3;
            v309 = *(_QWORD *)(a2 + v308);
            v310 = v309 + 1;
            if (v309 == -1 || v310 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v311 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v309);
              *(_QWORD *)(a2 + v308) = v310;
              v307 |= (unint64_t)(v311 & 0x7F) << v305;
              if (v311 < 0)
              {
                v305 += 7;
                v15 = v306++ >= 9;
                if (v15)
                {
                  v307 = 0;
                  goto LABEL_608;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v307 = 0;
LABEL_608:
          objc_msgSend(a1, "setIsDisambiguationSelectedApp:", v307 != 0);
          continue;
        case 0x30u:
          v312 = 0;
          v313 = 0;
          v314 = 0;
          while (2)
          {
            v315 = *v3;
            v316 = *(_QWORD *)(a2 + v315);
            v317 = v316 + 1;
            if (v316 == -1 || v317 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v318 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v316);
              *(_QWORD *)(a2 + v315) = v317;
              v314 |= (unint64_t)(v318 & 0x7F) << v312;
              if (v318 < 0)
              {
                v312 += 7;
                v15 = v313++ >= 9;
                if (v15)
                {
                  v314 = 0;
                  goto LABEL_612;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v314 = 0;
LABEL_612:
          objc_msgSend(a1, "setIsModelPredictedApp:", v314 != 0);
          continue;
        case 0x31u:
          v319 = *v3;
          v320 = *(_QWORD *)(a2 + v319);
          if (v320 <= 0xFFFFFFFFFFFFFFF7 && v320 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v321 = *(double *)(*(_QWORD *)(a2 + *v7) + v320);
            *(_QWORD *)(a2 + v319) = v320 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v321 = 0.0;
          }
          objc_msgSend(a1, "setUsageScoreRadio:", v321);
          continue;
        case 0x32u:
          v322 = *v3;
          v323 = *(_QWORD *)(a2 + v322);
          if (v323 <= 0xFFFFFFFFFFFFFFF7 && v323 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v324 = *(double *)(*(_QWORD *)(a2 + *v7) + v323);
            *(_QWORD *)(a2 + v322) = v323 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v324 = 0.0;
          }
          objc_msgSend(a1, "setUsageScoreMusicWithoutRadio:", v324);
          continue;
        case 0x33u:
          v325 = 0;
          v326 = 0;
          v327 = 0;
          while (2)
          {
            v328 = *v3;
            v329 = *(_QWORD *)(a2 + v328);
            v330 = v329 + 1;
            if (v329 == -1 || v330 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v331 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v329);
              *(_QWORD *)(a2 + v328) = v330;
              v327 |= (unint64_t)(v331 & 0x7F) << v325;
              if (v331 < 0)
              {
                v325 += 7;
                v15 = v326++ >= 9;
                if (v15)
                {
                  v332 = 0;
                  goto LABEL_617;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v332 = 0;
          else
            v332 = v327;
LABEL_617:
          objc_msgSend(a1, "setRawMediaTypeUsageSignalRadio:", v332);
          continue;
        case 0x34u:
          v333 = 0;
          v334 = 0;
          v335 = 0;
          while (2)
          {
            v336 = *v3;
            v337 = *(_QWORD *)(a2 + v336);
            v338 = v337 + 1;
            if (v337 == -1 || v338 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v339 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v337);
              *(_QWORD *)(a2 + v336) = v338;
              v335 |= (unint64_t)(v339 & 0x7F) << v333;
              if (v339 < 0)
              {
                v333 += 7;
                v15 = v334++ >= 9;
                if (v15)
                {
                  v340 = 0;
                  goto LABEL_622;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v340 = 0;
          else
            v340 = v335;
LABEL_622:
          objc_msgSend(a1, "setRawMediaTypeUsageSignalMusicWithoutRadio:", v340);
          continue;
        case 0x35u:
          v341 = 0;
          v342 = 0;
          v343 = 0;
          while (2)
          {
            v344 = *v3;
            v345 = *(_QWORD *)(a2 + v344);
            v346 = v345 + 1;
            if (v345 == -1 || v346 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v347 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v345);
              *(_QWORD *)(a2 + v344) = v346;
              v343 |= (unint64_t)(v347 & 0x7F) << v341;
              if (v347 < 0)
              {
                v341 += 7;
                v15 = v342++ >= 9;
                if (v15)
                {
                  v348 = 0;
                  goto LABEL_627;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v348 = 0;
          else
            v348 = v343;
LABEL_627:
          objc_msgSend(a1, "setSubscriptionStatus:", v348);
          continue;
        case 0x36u:
          v349 = 0;
          v350 = 0;
          v351 = 0;
          while (2)
          {
            v352 = *v3;
            v353 = *(_QWORD *)(a2 + v352);
            v354 = v353 + 1;
            if (v353 == -1 || v354 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v355 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v353);
              *(_QWORD *)(a2 + v352) = v354;
              v351 |= (unint64_t)(v355 & 0x7F) << v349;
              if (v355 < 0)
              {
                v349 += 7;
                v15 = v350++ >= 9;
                if (v15)
                {
                  v351 = 0;
                  goto LABEL_631;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v351 = 0;
LABEL_631:
          objc_msgSend(a1, "setIsRawNowPlayingBundle:", v351 != 0);
          continue;
        case 0x37u:
          v356 = 0;
          v357 = 0;
          v358 = 0;
          while (2)
          {
            v359 = *v3;
            v360 = *(_QWORD *)(a2 + v359);
            v361 = v360 + 1;
            if (v360 == -1 || v361 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v362 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v360);
              *(_QWORD *)(a2 + v359) = v361;
              v358 |= (unint64_t)(v362 & 0x7F) << v356;
              if (v362 < 0)
              {
                v356 += 7;
                v15 = v357++ >= 9;
                if (v15)
                {
                  v363 = 0;
                  goto LABEL_636;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v363 = 0;
          else
            v363 = v358;
LABEL_636:
          objc_msgSend(a1, "setRawNowPlayingTotal:", v363);
          continue;
        case 0x38u:
          v364 = *v3;
          v365 = *(_QWORD *)(a2 + v364);
          if (v365 <= 0xFFFFFFFFFFFFFFF7 && v365 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v366 = *(double *)(*(_QWORD *)(a2 + *v7) + v365);
            *(_QWORD *)(a2 + v364) = v365 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v366 = 0.0;
          }
          objc_msgSend(a1, "setRawNowPlayingBundleScore:", v366);
          continue;
        case 0x39u:
          v367 = *v3;
          v368 = *(_QWORD *)(a2 + v367);
          if (v368 <= 0xFFFFFFFFFFFFFFF7 && v368 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v369 = *(double *)(*(_QWORD *)(a2 + *v7) + v368);
            *(_QWORD *)(a2 + v367) = v368 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v369 = 0.0;
          }
          objc_msgSend(a1, "setIsRawLastNowPlaying:", v369);
          continue;
        case 0x3Au:
          v370 = 0;
          v371 = 0;
          v372 = 0;
          while (2)
          {
            v373 = *v3;
            v374 = *(_QWORD *)(a2 + v373);
            v375 = v374 + 1;
            if (v374 == -1 || v375 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v376 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v374);
              *(_QWORD *)(a2 + v373) = v375;
              v372 |= (unint64_t)(v376 & 0x7F) << v370;
              if (v376 < 0)
              {
                v370 += 7;
                v15 = v371++ >= 9;
                if (v15)
                {
                  v377 = 0;
                  goto LABEL_641;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v377 = 0;
          else
            v377 = v372;
LABEL_641:
          objc_msgSend(a1, "setRawNowPlaying2Minutes:", v377);
          continue;
        case 0x3Bu:
          v378 = 0;
          v379 = 0;
          v380 = 0;
          while (2)
          {
            v381 = *v3;
            v382 = *(_QWORD *)(a2 + v381);
            v383 = v382 + 1;
            if (v382 == -1 || v383 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v384 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v382);
              *(_QWORD *)(a2 + v381) = v383;
              v380 |= (unint64_t)(v384 & 0x7F) << v378;
              if (v384 < 0)
              {
                v378 += 7;
                v15 = v379++ >= 9;
                if (v15)
                {
                  v385 = 0;
                  goto LABEL_646;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v385 = 0;
          else
            v385 = v380;
LABEL_646:
          objc_msgSend(a1, "setRawNowPlaying10Minutes:", v385);
          continue;
        case 0x3Cu:
          v386 = 0;
          v387 = 0;
          v388 = 0;
          while (2)
          {
            v389 = *v3;
            v390 = *(_QWORD *)(a2 + v389);
            v391 = v390 + 1;
            if (v390 == -1 || v391 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v392 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v390);
              *(_QWORD *)(a2 + v389) = v391;
              v388 |= (unint64_t)(v392 & 0x7F) << v386;
              if (v392 < 0)
              {
                v386 += 7;
                v15 = v387++ >= 9;
                if (v15)
                {
                  v393 = 0;
                  goto LABEL_651;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v393 = 0;
          else
            v393 = v388;
LABEL_651:
          objc_msgSend(a1, "setRawNowPlaying1Hour:", v393);
          continue;
        case 0x3Du:
          v394 = 0;
          v395 = 0;
          v396 = 0;
          while (2)
          {
            v397 = *v3;
            v398 = *(_QWORD *)(a2 + v397);
            v399 = v398 + 1;
            if (v398 == -1 || v399 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v400 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v398);
              *(_QWORD *)(a2 + v397) = v399;
              v396 |= (unint64_t)(v400 & 0x7F) << v394;
              if (v400 < 0)
              {
                v394 += 7;
                v15 = v395++ >= 9;
                if (v15)
                {
                  v401 = 0;
                  goto LABEL_656;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v401 = 0;
          else
            v401 = v396;
LABEL_656:
          objc_msgSend(a1, "setRawNowPlaying6Hours:", v401);
          continue;
        case 0x3Eu:
          v402 = 0;
          v403 = 0;
          v404 = 0;
          while (2)
          {
            v405 = *v3;
            v406 = *(_QWORD *)(a2 + v405);
            v407 = v406 + 1;
            if (v406 == -1 || v407 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v408 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v406);
              *(_QWORD *)(a2 + v405) = v407;
              v404 |= (unint64_t)(v408 & 0x7F) << v402;
              if (v408 < 0)
              {
                v402 += 7;
                v15 = v403++ >= 9;
                if (v15)
                {
                  v409 = 0;
                  goto LABEL_661;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v409 = 0;
          else
            v409 = v404;
LABEL_661:
          objc_msgSend(a1, "setRawNowPlaying1Day:", v409);
          continue;
        case 0x3Fu:
          v410 = 0;
          v411 = 0;
          v412 = 0;
          while (2)
          {
            v413 = *v3;
            v414 = *(_QWORD *)(a2 + v413);
            v415 = v414 + 1;
            if (v414 == -1 || v415 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v416 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v414);
              *(_QWORD *)(a2 + v413) = v415;
              v412 |= (unint64_t)(v416 & 0x7F) << v410;
              if (v416 < 0)
              {
                v410 += 7;
                v15 = v411++ >= 9;
                if (v15)
                {
                  v417 = 0;
                  goto LABEL_666;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v417 = 0;
          else
            v417 = v412;
LABEL_666:
          objc_msgSend(a1, "setRawNowPlaying7Days:", v417);
          continue;
        case 0x40u:
          v418 = 0;
          v419 = 0;
          v420 = 0;
          while (2)
          {
            v421 = *v3;
            v422 = *(_QWORD *)(a2 + v421);
            v423 = v422 + 1;
            if (v422 == -1 || v423 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v424 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v422);
              *(_QWORD *)(a2 + v421) = v423;
              v420 |= (unint64_t)(v424 & 0x7F) << v418;
              if (v424 < 0)
              {
                v418 += 7;
                v15 = v419++ >= 9;
                if (v15)
                {
                  v425 = 0;
                  goto LABEL_671;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v425 = 0;
          else
            v425 = v420;
LABEL_671:
          objc_msgSend(a1, "setRawNowPlaying28Days:", v425);
          continue;
        case 0x41u:
          v426 = 0;
          v427 = 0;
          v428 = 0;
          while (2)
          {
            v429 = *v3;
            v430 = *(_QWORD *)(a2 + v429);
            v431 = v430 + 1;
            if (v430 == -1 || v431 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v432 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v430);
              *(_QWORD *)(a2 + v429) = v431;
              v428 |= (unint64_t)(v432 & 0x7F) << v426;
              if (v432 < 0)
              {
                v426 += 7;
                v15 = v427++ >= 9;
                if (v15)
                {
                  v433 = 0;
                  goto LABEL_676;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v433 = 0;
          else
            v433 = v428;
LABEL_676:
          objc_msgSend(a1, "setRawLastNowPlayingRecency:", v433);
          continue;
        case 0x42u:
          v434 = 0;
          v435 = 0;
          v436 = 0;
          while (2)
          {
            v437 = *v3;
            v438 = *(_QWORD *)(a2 + v437);
            v439 = v438 + 1;
            if (v438 == -1 || v439 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v440 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v438);
              *(_QWORD *)(a2 + v437) = v439;
              v436 |= (unint64_t)(v440 & 0x7F) << v434;
              if (v440 < 0)
              {
                v434 += 7;
                v15 = v435++ >= 9;
                if (v15)
                {
                  v441 = 0;
                  goto LABEL_681;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v441 = 0;
          else
            v441 = v436;
LABEL_681:
          objc_msgSend(a1, "setCommonForegroundBundleApp:", v441);
          continue;
        case 0x43u:
          v442 = 0;
          v443 = 0;
          v444 = 0;
          while (2)
          {
            v445 = *v3;
            v446 = *(_QWORD *)(a2 + v445);
            v447 = v446 + 1;
            if (v446 == -1 || v447 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v448 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v446);
              *(_QWORD *)(a2 + v445) = v447;
              v444 |= (unint64_t)(v448 & 0x7F) << v442;
              if (v448 < 0)
              {
                v442 += 7;
                v15 = v443++ >= 9;
                if (v15)
                {
                  v444 = 0;
                  goto LABEL_685;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v444 = 0;
LABEL_685:
          objc_msgSend(a1, "setIsRawLastNowPlayingBoolean:", v444 != 0);
          continue;
        case 0x44u:
          v449 = 0;
          v450 = 0;
          v451 = 0;
          while (2)
          {
            v452 = *v3;
            v453 = *(_QWORD *)(a2 + v452);
            v454 = v453 + 1;
            if (v453 == -1 || v454 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v455 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v453);
              *(_QWORD *)(a2 + v452) = v454;
              v451 |= (unint64_t)(v455 & 0x7F) << v449;
              if (v455 < 0)
              {
                v449 += 7;
                v15 = v450++ >= 9;
                if (v15)
                {
                  v451 = 0;
                  goto LABEL_689;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v451 = 0;
LABEL_689:
          objc_msgSend(a1, "setIsCommonForegroundApp:", v451 != 0);
          continue;
        case 0x45u:
          v456 = 0;
          v457 = 0;
          v458 = 0;
          break;
        case 0x46u:
          v463 = *v3;
          v464 = *(_QWORD *)(a2 + v463);
          if (v464 <= 0xFFFFFFFFFFFFFFF7 && v464 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v465 = *(double *)(*(_QWORD *)(a2 + *v7) + v464);
            *(_QWORD *)(a2 + v463) = v464 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v465 = 0.0;
          }
          objc_msgSend(a1, "setUsageScoreMusicWithoutRadioRemote:", v465);
          continue;
        case 0x47u:
          v466 = *v3;
          v467 = *(_QWORD *)(a2 + v466);
          if (v467 <= 0xFFFFFFFFFFFFFFF7 && v467 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v468 = *(double *)(*(_QWORD *)(a2 + *v7) + v467);
            *(_QWORD *)(a2 + v466) = v467 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v468 = 0.0;
          }
          objc_msgSend(a1, "setUsageScoreBooksRemote:", v468);
          continue;
        case 0x48u:
          v469 = *v3;
          v470 = *(_QWORD *)(a2 + v469);
          if (v470 <= 0xFFFFFFFFFFFFFFF7 && v470 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v471 = *(double *)(*(_QWORD *)(a2 + *v7) + v470);
            *(_QWORD *)(a2 + v469) = v470 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v471 = 0.0;
          }
          objc_msgSend(a1, "setUsageScoreRadioRemote:", v471);
          continue;
        case 0x49u:
          v472 = *v3;
          v473 = *(_QWORD *)(a2 + v472);
          if (v473 <= 0xFFFFFFFFFFFFFFF7 && v473 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v474 = *(double *)(*(_QWORD *)(a2 + *v7) + v473);
            *(_QWORD *)(a2 + v472) = v473 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v474 = 0.0;
          }
          objc_msgSend(a1, "setUsageScorePodcastsRemote:", v474);
          continue;
        case 0x4Au:
          v475 = *v3;
          v476 = *(_QWORD *)(a2 + v475);
          if (v476 <= 0xFFFFFFFFFFFFFFF7 && v476 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v477 = *(double *)(*(_QWORD *)(a2 + *v7) + v476);
            *(_QWORD *)(a2 + v475) = v476 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v477 = 0.0;
          }
          objc_msgSend(a1, "setEntitySearchBundleScoreRemote:", v477);
          continue;
        case 0x4Bu:
          v478 = *v3;
          v479 = *(_QWORD *)(a2 + v478);
          if (v479 <= 0xFFFFFFFFFFFFFFF7 && v479 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v480 = *(double *)(*(_QWORD *)(a2 + *v7) + v479);
            *(_QWORD *)(a2 + v478) = v479 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v480 = 0.0;
          }
          objc_msgSend(a1, "setUsageScoreMusicRemote:", v480);
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v459 = *v3;
        v460 = *(_QWORD *)(a2 + v459);
        v461 = v460 + 1;
        if (v460 == -1 || v461 > *(_QWORD *)(a2 + *v4))
          break;
        v462 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v460);
        *(_QWORD *)(a2 + v459) = v461;
        v458 |= (unint64_t)(v462 & 0x7F) << v456;
        if ((v462 & 0x80) == 0)
          goto LABEL_691;
        v456 += 7;
        v15 = v457++ >= 9;
        if (v15)
        {
          v458 = 0;
          goto LABEL_693;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_691:
      if (*(_BYTE *)(a2 + *v5))
        v458 = 0;
LABEL_693:
      objc_msgSend(a1, "setIsBoltEnabled:", v458 != 0);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INFERENCESchemaINFERENCEMusicTrainingIndependentSignalsReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  uint64_t v109;
  char v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  char v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  char v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  uint64_t v138;
  char v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char v145;
  uint64_t v146;
  char v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char v153;
  uint64_t v154;
  unint64_t v155;
  double v156;
  char v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char v163;
  uint64_t v164;
  char v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  char v171;
  uint64_t v172;
  char v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  char v179;
  uint64_t v180;
  char v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char v187;
  uint64_t v188;
  char v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  char v195;
  uint64_t v196;
  char v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  char v203;
  uint64_t v204;
  char v205;
  unsigned int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  char v211;
  uint64_t v212;
  char v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  char v219;
  char v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  char v226;
  char v227;
  unsigned int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  char v233;
  uint64_t v234;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v19 = 0;
          v20 = 0;
          v21 = 0;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v4))
              break;
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              goto LABEL_221;
            v19 += 7;
            v15 = v20++ >= 9;
            if (v15)
            {
              v26 = 0;
              goto LABEL_224;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_221:
          if (*(_BYTE *)(a2 + *v5))
            v26 = 0;
          else
            v26 = v21;
LABEL_224:
          objc_msgSend(a1, "setClientDayOfWeek:", v26);
          continue;
        case 2u:
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (2)
          {
            v31 = *v3;
            v32 = *(_QWORD *)(a2 + v31);
            v33 = v32 + 1;
            if (v32 == -1 || v33 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
              *(_QWORD *)(a2 + v31) = v33;
              v30 |= (unint64_t)(v34 & 0x7F) << v28;
              if (v34 < 0)
              {
                v28 += 7;
                v15 = v29++ >= 9;
                if (v15)
                {
                  v35 = 0;
                  goto LABEL_229;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v35 = 0;
          else
            v35 = v30;
LABEL_229:
          objc_msgSend(a1, "setRawClientHourOfDay:", v35);
          continue;
        case 3u:
          v36 = 0;
          v37 = 0;
          v38 = 0;
          while (2)
          {
            v39 = *v3;
            v40 = *(_QWORD *)(a2 + v39);
            v41 = v40 + 1;
            if (v40 == -1 || v41 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
              *(_QWORD *)(a2 + v39) = v41;
              v38 |= (unint64_t)(v42 & 0x7F) << v36;
              if (v42 < 0)
              {
                v36 += 7;
                v15 = v37++ >= 9;
                if (v15)
                {
                  v38 = 0;
                  goto LABEL_233;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
LABEL_233:
          objc_msgSend(a1, "setIsMediaAlbumPresent:", v38 != 0);
          continue;
        case 4u:
          v43 = 0;
          v44 = 0;
          v45 = 0;
          while (2)
          {
            v46 = *v3;
            v47 = *(_QWORD *)(a2 + v46);
            v48 = v47 + 1;
            if (v47 == -1 || v48 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v47);
              *(_QWORD *)(a2 + v46) = v48;
              v45 |= (unint64_t)(v49 & 0x7F) << v43;
              if (v49 < 0)
              {
                v43 += 7;
                v15 = v44++ >= 9;
                if (v15)
                {
                  v45 = 0;
                  goto LABEL_237;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v45 = 0;
LABEL_237:
          objc_msgSend(a1, "setIsMediaArtistPresent:", v45 != 0);
          continue;
        case 5u:
          v50 = 0;
          v51 = 0;
          v52 = 0;
          while (2)
          {
            v53 = *v3;
            v54 = *(_QWORD *)(a2 + v53);
            v55 = v54 + 1;
            if (v54 == -1 || v55 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v56 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v54);
              *(_QWORD *)(a2 + v53) = v55;
              v52 |= (unint64_t)(v56 & 0x7F) << v50;
              if (v56 < 0)
              {
                v50 += 7;
                v15 = v51++ >= 9;
                if (v15)
                {
                  v52 = 0;
                  goto LABEL_241;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v52 = 0;
LABEL_241:
          objc_msgSend(a1, "setIsMediaGenrePresent:", v52 != 0);
          continue;
        case 6u:
          v57 = 0;
          v58 = 0;
          v59 = 0;
          while (2)
          {
            v60 = *v3;
            v61 = *(_QWORD *)(a2 + v60);
            v62 = v61 + 1;
            if (v61 == -1 || v62 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v63 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v61);
              *(_QWORD *)(a2 + v60) = v62;
              v59 |= (unint64_t)(v63 & 0x7F) << v57;
              if (v63 < 0)
              {
                v57 += 7;
                v15 = v58++ >= 9;
                if (v15)
                {
                  v59 = 0;
                  goto LABEL_245;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v59 = 0;
LABEL_245:
          objc_msgSend(a1, "setIsMediaMoodPresent:", v59 != 0);
          continue;
        case 7u:
          v64 = 0;
          v65 = 0;
          v66 = 0;
          while (2)
          {
            v67 = *v3;
            v68 = *(_QWORD *)(a2 + v67);
            v69 = v68 + 1;
            if (v68 == -1 || v69 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v70 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v68);
              *(_QWORD *)(a2 + v67) = v69;
              v66 |= (unint64_t)(v70 & 0x7F) << v64;
              if (v70 < 0)
              {
                v64 += 7;
                v15 = v65++ >= 9;
                if (v15)
                {
                  v66 = 0;
                  goto LABEL_249;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v66 = 0;
LABEL_249:
          objc_msgSend(a1, "setIsMediaNamePresent:", v66 != 0);
          continue;
        case 8u:
          v71 = 0;
          v72 = 0;
          v73 = 0;
          while (2)
          {
            v74 = *v3;
            v75 = *(_QWORD *)(a2 + v74);
            v76 = v75 + 1;
            if (v75 == -1 || v76 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v77 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v75);
              *(_QWORD *)(a2 + v74) = v76;
              v73 |= (unint64_t)(v77 & 0x7F) << v71;
              if (v77 < 0)
              {
                v71 += 7;
                v15 = v72++ >= 9;
                if (v15)
                {
                  v73 = 0;
                  goto LABEL_253;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v73 = 0;
LABEL_253:
          objc_msgSend(a1, "setIsMediaReleaseDatePresent:", v73 != 0);
          continue;
        case 9u:
          v78 = 0;
          v79 = 0;
          v80 = 0;
          while (2)
          {
            v81 = *v3;
            v82 = *(_QWORD *)(a2 + v81);
            v83 = v82 + 1;
            if (v82 == -1 || v83 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v84 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v82);
              *(_QWORD *)(a2 + v81) = v83;
              v80 |= (unint64_t)(v84 & 0x7F) << v78;
              if (v84 < 0)
              {
                v78 += 7;
                v15 = v79++ >= 9;
                if (v15)
                {
                  v85 = 0;
                  goto LABEL_258;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v85 = 0;
          else
            v85 = v80;
LABEL_258:
          objc_msgSend(a1, "setNowPlayingLastBundleRecencyS:", v85);
          continue;
        case 0xAu:
          v86 = 0;
          v87 = 0;
          v88 = 0;
          while (2)
          {
            v89 = *v3;
            v90 = *(_QWORD *)(a2 + v89);
            v91 = v90 + 1;
            if (v90 == -1 || v91 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v92 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v90);
              *(_QWORD *)(a2 + v89) = v91;
              v88 |= (unint64_t)(v92 & 0x7F) << v86;
              if (v92 < 0)
              {
                v86 += 7;
                v15 = v87++ >= 9;
                if (v15)
                {
                  v93 = 0;
                  goto LABEL_263;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v93 = 0;
          else
            v93 = v88;
LABEL_263:
          objc_msgSend(a1, "setRawLanguage:", v93);
          continue;
        case 0xBu:
          v94 = 0;
          v95 = 0;
          v96 = 0;
          while (2)
          {
            v97 = *v3;
            v98 = *(_QWORD *)(a2 + v97);
            v99 = v98 + 1;
            if (v98 == -1 || v99 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v100 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v98);
              *(_QWORD *)(a2 + v97) = v99;
              v96 |= (unint64_t)(v100 & 0x7F) << v94;
              if (v100 < 0)
              {
                v94 += 7;
                v15 = v95++ >= 9;
                if (v15)
                {
                  v101 = 0;
                  goto LABEL_268;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v101 = 0;
          else
            v101 = v96;
LABEL_268:
          objc_msgSend(a1, "setRawLocale:", v101);
          continue;
        case 0xCu:
          v102 = 0;
          v103 = 0;
          v104 = 0;
          while (2)
          {
            v105 = *v3;
            v106 = *(_QWORD *)(a2 + v105);
            v107 = v106 + 1;
            if (v106 == -1 || v107 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v108 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v106);
              *(_QWORD *)(a2 + v105) = v107;
              v104 |= (unint64_t)(v108 & 0x7F) << v102;
              if (v108 < 0)
              {
                v102 += 7;
                v15 = v103++ >= 9;
                if (v15)
                {
                  v109 = 0;
                  goto LABEL_273;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v109 = 0;
          else
            v109 = v104;
LABEL_273:
          objc_msgSend(a1, "setRawRegion:", v109);
          continue;
        case 0xDu:
          v110 = 0;
          v111 = 0;
          v112 = 0;
          while (2)
          {
            v113 = *v3;
            v114 = *(_QWORD *)(a2 + v113);
            v115 = v114 + 1;
            if (v114 == -1 || v115 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v116 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v114);
              *(_QWORD *)(a2 + v113) = v115;
              v112 |= (unint64_t)(v116 & 0x7F) << v110;
              if (v116 < 0)
              {
                v110 += 7;
                v15 = v111++ >= 9;
                if (v15)
                {
                  v112 = 0;
                  goto LABEL_277;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v112 = 0;
LABEL_277:
          objc_msgSend(a1, "setIsClientDaylight:", v112 != 0);
          continue;
        case 0xEu:
          v117 = 0;
          v118 = 0;
          v119 = 0;
          while (2)
          {
            v120 = *v3;
            v121 = *(_QWORD *)(a2 + v120);
            v122 = v121 + 1;
            if (v121 == -1 || v122 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v123 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v121);
              *(_QWORD *)(a2 + v120) = v122;
              v119 |= (unint64_t)(v123 & 0x7F) << v117;
              if (v123 < 0)
              {
                v117 += 7;
                v15 = v118++ >= 9;
                if (v15)
                {
                  v119 = 0;
                  goto LABEL_281;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v119 = 0;
LABEL_281:
          objc_msgSend(a1, "setIsClientNavigating:", v119 != 0);
          continue;
        case 0xFu:
          v124 = 0;
          v125 = 0;
          v126 = 0;
          while (2)
          {
            v127 = *v3;
            v128 = *(_QWORD *)(a2 + v127);
            v129 = v128 + 1;
            if (v128 == -1 || v129 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v130 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v128);
              *(_QWORD *)(a2 + v127) = v129;
              v126 |= (unint64_t)(v130 & 0x7F) << v124;
              if (v130 < 0)
              {
                v124 += 7;
                v15 = v125++ >= 9;
                if (v15)
                {
                  v126 = 0;
                  goto LABEL_285;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v126 = 0;
LABEL_285:
          objc_msgSend(a1, "setIsClientWorkout:", v126 != 0);
          continue;
        case 0x10u:
          v131 = 0;
          v132 = 0;
          v133 = 0;
          while (2)
          {
            v134 = *v3;
            v135 = *(_QWORD *)(a2 + v134);
            v136 = v135 + 1;
            if (v135 == -1 || v136 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v137 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v135);
              *(_QWORD *)(a2 + v134) = v136;
              v133 |= (unint64_t)(v137 & 0x7F) << v131;
              if (v137 < 0)
              {
                v131 += 7;
                v15 = v132++ >= 9;
                if (v15)
                {
                  v138 = 0;
                  goto LABEL_290;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v138 = 0;
          else
            v138 = v133;
LABEL_290:
          objc_msgSend(a1, "setMediaType:", v138);
          continue;
        case 0x11u:
          v139 = 0;
          v140 = 0;
          v141 = 0;
          while (2)
          {
            v142 = *v3;
            v143 = *(_QWORD *)(a2 + v142);
            v144 = v143 + 1;
            if (v143 == -1 || v144 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v145 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v143);
              *(_QWORD *)(a2 + v142) = v144;
              v141 |= (unint64_t)(v145 & 0x7F) << v139;
              if (v145 < 0)
              {
                v139 += 7;
                v15 = v140++ >= 9;
                if (v15)
                {
                  v146 = 0;
                  goto LABEL_295;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v146 = 0;
          else
            v146 = v141;
LABEL_295:
          objc_msgSend(a1, "setNowPlayingState:", v146);
          continue;
        case 0x12u:
          v147 = 0;
          v148 = 0;
          v149 = 0;
          while (2)
          {
            v150 = *v3;
            v151 = *(_QWORD *)(a2 + v150);
            v152 = v151 + 1;
            if (v151 == -1 || v152 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v153 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v151);
              *(_QWORD *)(a2 + v150) = v152;
              v149 |= (unint64_t)(v153 & 0x7F) << v147;
              if (v153 < 0)
              {
                v147 += 7;
                v15 = v148++ >= 9;
                if (v15)
                {
                  v149 = 0;
                  goto LABEL_299;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v149 = 0;
LABEL_299:
          objc_msgSend(a1, "setIsPireneRequest:", v149 != 0);
          continue;
        case 0x13u:
          v154 = *v3;
          v155 = *(_QWORD *)(a2 + v154);
          if (v155 <= 0xFFFFFFFFFFFFFFF7 && v155 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v156 = *(double *)(*(_QWORD *)(a2 + *v7) + v155);
            *(_QWORD *)(a2 + v154) = v155 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v156 = 0.0;
          }
          objc_msgSend(a1, "setForegroundBundleRecencyS:", v156);
          continue;
        case 0x14u:
          v157 = 0;
          v158 = 0;
          v159 = 0;
          while (2)
          {
            v160 = *v3;
            v161 = *(_QWORD *)(a2 + v160);
            v162 = v161 + 1;
            if (v161 == -1 || v162 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v163 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v161);
              *(_QWORD *)(a2 + v160) = v162;
              v159 |= (unint64_t)(v163 & 0x7F) << v157;
              if (v163 < 0)
              {
                v157 += 7;
                v15 = v158++ >= 9;
                if (v15)
                {
                  v164 = 0;
                  goto LABEL_304;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v164 = 0;
          else
            v164 = v159;
LABEL_304:
          objc_msgSend(a1, "setMediaParsecCategory:", v164);
          continue;
        case 0x15u:
          v165 = 0;
          v166 = 0;
          v167 = 0;
          while (2)
          {
            v168 = *v3;
            v169 = *(_QWORD *)(a2 + v168);
            v170 = v169 + 1;
            if (v169 == -1 || v170 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v171 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v169);
              *(_QWORD *)(a2 + v168) = v170;
              v167 |= (unint64_t)(v171 & 0x7F) << v165;
              if (v171 < 0)
              {
                v165 += 7;
                v15 = v166++ >= 9;
                if (v15)
                {
                  v172 = 0;
                  goto LABEL_309;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v172 = 0;
          else
            v172 = v167;
LABEL_309:
          objc_msgSend(a1, "setSirikitResponseCode:", v172);
          continue;
        case 0x16u:
          v173 = 0;
          v174 = 0;
          v175 = 0;
          while (2)
          {
            v176 = *v3;
            v177 = *(_QWORD *)(a2 + v176);
            v178 = v177 + 1;
            if (v177 == -1 || v178 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v179 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v177);
              *(_QWORD *)(a2 + v176) = v178;
              v175 |= (unint64_t)(v179 & 0x7F) << v173;
              if (v179 < 0)
              {
                v173 += 7;
                v15 = v174++ >= 9;
                if (v15)
                {
                  v180 = 0;
                  goto LABEL_314;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v180 = 0;
          else
            v180 = v175;
LABEL_314:
          objc_msgSend(a1, "setAppSelectionUses:", v180);
          continue;
        case 0x17u:
          v181 = 0;
          v182 = 0;
          v183 = 0;
          while (2)
          {
            v184 = *v3;
            v185 = *(_QWORD *)(a2 + v184);
            v186 = v185 + 1;
            if (v185 == -1 || v186 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v187 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v185);
              *(_QWORD *)(a2 + v184) = v186;
              v183 |= (unint64_t)(v187 & 0x7F) << v181;
              if (v187 < 0)
              {
                v181 += 7;
                v15 = v182++ >= 9;
                if (v15)
                {
                  v188 = 0;
                  goto LABEL_319;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v188 = 0;
          else
            v188 = v183;
LABEL_319:
          objc_msgSend(a1, "setModelVersion:", v188);
          continue;
        case 0x18u:
          v189 = 0;
          v190 = 0;
          v191 = 0;
          while (2)
          {
            v192 = *v3;
            v193 = *(_QWORD *)(a2 + v192);
            v194 = v193 + 1;
            if (v193 == -1 || v194 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v195 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v193);
              *(_QWORD *)(a2 + v192) = v194;
              v191 |= (unint64_t)(v195 & 0x7F) << v189;
              if (v195 < 0)
              {
                v189 += 7;
                v15 = v190++ >= 9;
                if (v15)
                {
                  v196 = 0;
                  goto LABEL_324;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v196 = 0;
          else
            v196 = v191;
LABEL_324:
          objc_msgSend(a1, "setResolutionType:", v196);
          continue;
        case 0x19u:
          v197 = 0;
          v198 = 0;
          v199 = 0;
          while (2)
          {
            v200 = *v3;
            v201 = *(_QWORD *)(a2 + v200);
            v202 = v201 + 1;
            if (v201 == -1 || v202 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v203 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v201);
              *(_QWORD *)(a2 + v200) = v202;
              v199 |= (unint64_t)(v203 & 0x7F) << v197;
              if (v203 < 0)
              {
                v197 += 7;
                v15 = v198++ >= 9;
                if (v15)
                {
                  v204 = 0;
                  goto LABEL_329;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v204 = 0;
          else
            v204 = v199;
LABEL_329:
          objc_msgSend(a1, "setRawNowPlayingState:", v204);
          continue;
        case 0x1Au:
          v205 = 0;
          v206 = 0;
          v207 = 0;
          while (2)
          {
            v208 = *v3;
            v209 = *(_QWORD *)(a2 + v208);
            v210 = v209 + 1;
            if (v209 == -1 || v210 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v211 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v209);
              *(_QWORD *)(a2 + v208) = v210;
              v207 |= (unint64_t)(v211 & 0x7F) << v205;
              if (v211 < 0)
              {
                v205 += 7;
                v15 = v206++ >= 9;
                if (v15)
                {
                  v212 = 0;
                  goto LABEL_334;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v212 = 0;
          else
            v212 = v207;
LABEL_334:
          objc_msgSend(a1, "setCommonForegroundAppRecency:", v212);
          continue;
        case 0x1Bu:
          v213 = 0;
          v214 = 0;
          v215 = 0;
          while (2)
          {
            v216 = *v3;
            v217 = *(_QWORD *)(a2 + v216);
            v218 = v217 + 1;
            if (v217 == -1 || v218 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v219 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v217);
              *(_QWORD *)(a2 + v216) = v218;
              v215 |= (unint64_t)(v219 & 0x7F) << v213;
              if (v219 < 0)
              {
                v213 += 7;
                v15 = v214++ >= 9;
                if (v15)
                {
                  v215 = 0;
                  goto LABEL_338;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v215 = 0;
LABEL_338:
          objc_msgSend(a1, "setIsContentFree:", v215 != 0);
          continue;
        case 0x1Cu:
          v220 = 0;
          v221 = 0;
          v222 = 0;
          while (2)
          {
            v223 = *v3;
            v224 = *(_QWORD *)(a2 + v223);
            v225 = v224 + 1;
            if (v224 == -1 || v225 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v226 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v224);
              *(_QWORD *)(a2 + v223) = v225;
              v222 |= (unint64_t)(v226 & 0x7F) << v220;
              if (v226 < 0)
              {
                v220 += 7;
                v15 = v221++ >= 9;
                if (v15)
                {
                  v222 = 0;
                  goto LABEL_342;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v222 = 0;
LABEL_342:
          objc_msgSend(a1, "setIsUserRecognized:", v222 != 0);
          continue;
        case 0x1Du:
          v227 = 0;
          v228 = 0;
          v229 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v230 = *v3;
        v231 = *(_QWORD *)(a2 + v230);
        v232 = v231 + 1;
        if (v231 == -1 || v232 > *(_QWORD *)(a2 + *v4))
          break;
        v233 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v231);
        *(_QWORD *)(a2 + v230) = v232;
        v229 |= (unint64_t)(v233 & 0x7F) << v227;
        if ((v233 & 0x80) == 0)
          goto LABEL_344;
        v227 += 7;
        v15 = v228++ >= 9;
        if (v15)
        {
          v234 = 0;
          goto LABEL_347;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_344:
      v234 = *(_BYTE *)(a2 + *v5) ? 0 : v229;
LABEL_347:
      objc_msgSend(a1, "setServerSearchResultsMediaType:", v234);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INFERENCESchemaINFERENCEPotentialRetryContactInteractionContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_71;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_73;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_71:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_73:
          objc_msgSend(a1, "setIsExactMatchPriorSiriContactGivenName:", v19 != 0);
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  v26 = 0;
                  goto LABEL_77;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v26 = 0;
LABEL_77:
          objc_msgSend(a1, "setIsExactMatchPriorSiriContactFamilyName:", v26 != 0);
          continue;
        case 3u:
          v30 = 0;
          v31 = 0;
          v32 = 0;
          while (2)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
              *(_QWORD *)(a2 + v33) = v34 + 1;
              v32 |= (unint64_t)(v35 & 0x7F) << v30;
              if (v35 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  v32 = 0;
                  goto LABEL_81;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v32 = 0;
LABEL_81:
          objc_msgSend(a1, "setIsExactMatchPriorSiriContactDisplayName:", v32 != 0);
          continue;
        case 4u:
          v36 = 0;
          v37 = 0;
          v38 = 0;
          while (2)
          {
            v39 = *v3;
            v40 = *(_QWORD *)(a2 + v39);
            if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
              *(_QWORD *)(a2 + v39) = v40 + 1;
              v38 |= (unint64_t)(v41 & 0x7F) << v36;
              if (v41 < 0)
              {
                v36 += 7;
                v14 = v37++ >= 9;
                if (v14)
                {
                  v38 = 0;
                  goto LABEL_85;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
LABEL_85:
          objc_msgSend(a1, "setIsExactMatchPriorSiriContactId:", v38 != 0);
          continue;
        case 5u:
          v42 = 0;
          v43 = 0;
          v44 = 0;
          while (2)
          {
            v45 = *v3;
            v46 = *(_QWORD *)(a2 + v45);
            if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
              *(_QWORD *)(a2 + v45) = v46 + 1;
              v44 |= (unint64_t)(v47 & 0x7F) << v42;
              if (v47 < 0)
              {
                v42 += 7;
                v14 = v43++ >= 9;
                if (v14)
                {
                  v44 = 0;
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v44 = 0;
LABEL_89:
          objc_msgSend(a1, "setIsExactMatchPriorSiriContactHandleValue:", v44 != 0);
          continue;
        case 6u:
          v48 = 0;
          v49 = 0;
          v50 = 0;
          while (2)
          {
            v51 = *v3;
            v52 = *(_QWORD *)(a2 + v51);
            if (v52 == -1 || v52 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v52);
              *(_QWORD *)(a2 + v51) = v52 + 1;
              v50 |= (unint64_t)(v53 & 0x7F) << v48;
              if (v53 < 0)
              {
                v48 += 7;
                v14 = v49++ >= 9;
                if (v14)
                {
                  v54 = 0;
                  goto LABEL_94;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v54 = 0;
          else
            v54 = v50;
LABEL_94:
          objc_msgSend(a1, "setInteractionDurationInSecBucket:", v54);
          continue;
        case 7u:
          v55 = 0;
          v56 = 0;
          v57 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v58 = *v3;
        v59 = *(_QWORD *)(a2 + v58);
        if (v59 == -1 || v59 >= *(_QWORD *)(a2 + *v4))
          break;
        v60 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v59);
        *(_QWORD *)(a2 + v58) = v59 + 1;
        v57 |= (unint64_t)(v60 & 0x7F) << v55;
        if ((v60 & 0x80) == 0)
          goto LABEL_96;
        v55 += 7;
        v14 = v56++ >= 9;
        if (v14)
        {
          v61 = 0;
          goto LABEL_99;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_96:
      v61 = *(_BYTE *)(a2 + *v5) ? 0 : v57;
LABEL_99:
      objc_msgSend(a1, "setPotentialRetryIntervalInSecBucket:", v61);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INFERENCESchemaINFERENCEPrivatizedHistoryStatsReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_42;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            v30 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
        v30 = *(_BYTE *)(a2 + *v5) ? 0 : v26;
LABEL_45:
        objc_msgSend(a1, "setRecency:", v30);
      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_40:
        objc_msgSend(a1, "addFrequencies:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INFERENCESchemaINFERENCEPromptContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  INFERENCESchemaINFERENCEDisambiguationPromptContext *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v25 = objc_alloc_init(INFERENCESchemaINFERENCEDisambiguationPromptContext);
        if (!PBReaderPlaceMark() || !INFERENCESchemaINFERENCEDisambiguationPromptContextReadFrom(v25, a2))
        {
LABEL_44:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setDisambiguationPromptContext:", v25, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_38;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_41;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_41:
            objc_msgSend(a1, "setTag:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v25 = objc_alloc_init(INFERENCESchemaINFERENCEConfirmationPromptContext);
        if (!PBReaderPlaceMark()
          || (INFERENCESchemaINFERENCEConfirmationPromptContextReadFrom(v25, a2) & 1) == 0)
        {
          goto LABEL_44;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setConfirmationPromptContext:", v25, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INFERENCESchemaINFERENCEQueryUserPromptSelectedInfoGeneratedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_55;
        PBReaderRecallMark();
        objc_msgSend(a1, "setOriginalResolutionContextId:", v17, 0, 0);
        goto LABEL_42;
      case 2u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (PBReaderPlaceMark() && (SISchemaUUIDReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setQueryId:", v17, 0, 0);
LABEL_42:

LABEL_53:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_55:

        return 0;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_47:
        objc_msgSend(a1, "setDisambiguationResolution:", v25);
        goto LABEL_53;
      case 4u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_52:
        objc_msgSend(a1, "setConfirmationResolution:", v32);
        goto LABEL_53;
      case 5u:
        PBReaderReadString();
        v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAnonymizedSelectedEntityIdentifier:", v17);
        goto LABEL_42;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_53;
    }
  }
}

uint64_t INFERENCESchemaINFERENCERequestMatchSignalSetReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  char v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_113;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v23 = 0;
              goto LABEL_116;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_113:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
          else
            v23 = v19;
LABEL_116:
          objc_msgSend(a1, "setNumPrimaryTokens:", v23);
          continue;
        case 2u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (v14)
                {
                  v27 = 0;
                  goto LABEL_120;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v27 = 0;
LABEL_120:
          objc_msgSend(a1, "setAreAllQueryTokensInContact:", v27 != 0);
          continue;
        case 3u:
          v31 = 0;
          v32 = 0;
          v33 = 0;
          while (2)
          {
            v34 = *v3;
            v35 = *(_QWORD *)(a2 + v34);
            if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
              *(_QWORD *)(a2 + v34) = v35 + 1;
              v33 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                v14 = v32++ >= 9;
                if (v14)
                {
                  v33 = 0;
                  goto LABEL_124;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v33 = 0;
LABEL_124:
          objc_msgSend(a1, "setAreAllPrimaryContactTokensInQuery:", v33 != 0);
          continue;
        case 4u:
          v37 = 0;
          v38 = 0;
          v39 = 0;
          while (2)
          {
            v40 = *v3;
            v41 = *(_QWORD *)(a2 + v40);
            if (v41 == -1 || v41 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
              *(_QWORD *)(a2 + v40) = v41 + 1;
              v39 |= (unint64_t)(v42 & 0x7F) << v37;
              if (v42 < 0)
              {
                v37 += 7;
                v14 = v38++ >= 9;
                if (v14)
                {
                  v39 = 0;
                  goto LABEL_128;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v39 = 0;
LABEL_128:
          objc_msgSend(a1, "setIsGivenNameMatch:", v39 != 0);
          continue;
        case 5u:
          v43 = 0;
          v44 = 0;
          v45 = 0;
          while (2)
          {
            v46 = *v3;
            v47 = *(_QWORD *)(a2 + v46);
            if (v47 == -1 || v47 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v47);
              *(_QWORD *)(a2 + v46) = v47 + 1;
              v45 |= (unint64_t)(v48 & 0x7F) << v43;
              if (v48 < 0)
              {
                v43 += 7;
                v14 = v44++ >= 9;
                if (v14)
                {
                  v45 = 0;
                  goto LABEL_132;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v45 = 0;
LABEL_132:
          objc_msgSend(a1, "setIsMiddleNameMatch:", v45 != 0);
          continue;
        case 6u:
          v49 = 0;
          v50 = 0;
          v51 = 0;
          while (2)
          {
            v52 = *v3;
            v53 = *(_QWORD *)(a2 + v52);
            if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v53);
              *(_QWORD *)(a2 + v52) = v53 + 1;
              v51 |= (unint64_t)(v54 & 0x7F) << v49;
              if (v54 < 0)
              {
                v49 += 7;
                v14 = v50++ >= 9;
                if (v14)
                {
                  v51 = 0;
                  goto LABEL_136;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v51 = 0;
LABEL_136:
          objc_msgSend(a1, "setIsFamilyNameMatch:", v51 != 0);
          continue;
        case 7u:
          v55 = 0;
          v56 = 0;
          v57 = 0;
          while (2)
          {
            v58 = *v3;
            v59 = *(_QWORD *)(a2 + v58);
            if (v59 == -1 || v59 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v60 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v59);
              *(_QWORD *)(a2 + v58) = v59 + 1;
              v57 |= (unint64_t)(v60 & 0x7F) << v55;
              if (v60 < 0)
              {
                v55 += 7;
                v14 = v56++ >= 9;
                if (v14)
                {
                  v57 = 0;
                  goto LABEL_140;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v57 = 0;
LABEL_140:
          objc_msgSend(a1, "setIsOrganizationNameMatch:", v57 != 0);
          continue;
        case 8u:
          v61 = 0;
          v62 = 0;
          v63 = 0;
          while (2)
          {
            v64 = *v3;
            v65 = *(_QWORD *)(a2 + v64);
            if (v65 == -1 || v65 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v66 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v65);
              *(_QWORD *)(a2 + v64) = v65 + 1;
              v63 |= (unint64_t)(v66 & 0x7F) << v61;
              if (v66 < 0)
              {
                v61 += 7;
                v14 = v62++ >= 9;
                if (v14)
                {
                  v63 = 0;
                  goto LABEL_144;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v63 = 0;
LABEL_144:
          objc_msgSend(a1, "setIsWeakOrganizationMatch:", v63 != 0);
          continue;
        case 9u:
          v67 = 0;
          v68 = 0;
          v69 = 0;
          while (2)
          {
            v70 = *v3;
            v71 = *(_QWORD *)(a2 + v70);
            if (v71 == -1 || v71 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v72 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v71);
              *(_QWORD *)(a2 + v70) = v71 + 1;
              v69 |= (unint64_t)(v72 & 0x7F) << v67;
              if (v72 < 0)
              {
                v67 += 7;
                v14 = v68++ >= 9;
                if (v14)
                {
                  v69 = 0;
                  goto LABEL_148;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v69 = 0;
LABEL_148:
          objc_msgSend(a1, "setIsNicknameMatch:", v69 != 0);
          continue;
        case 0xAu:
          v73 = 0;
          v74 = 0;
          v75 = 0;
          while (2)
          {
            v76 = *v3;
            v77 = *(_QWORD *)(a2 + v76);
            if (v77 == -1 || v77 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v78 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v77);
              *(_QWORD *)(a2 + v76) = v77 + 1;
              v75 |= (unint64_t)(v78 & 0x7F) << v73;
              if (v78 < 0)
              {
                v73 += 7;
                v14 = v74++ >= 9;
                if (v14)
                {
                  v75 = 0;
                  goto LABEL_152;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v75 = 0;
LABEL_152:
          objc_msgSend(a1, "setIsNamePrefixMatch:", v75 != 0);
          continue;
        case 0xBu:
          v79 = 0;
          v80 = 0;
          v81 = 0;
          while (2)
          {
            v82 = *v3;
            v83 = *(_QWORD *)(a2 + v82);
            if (v83 == -1 || v83 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v84 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v83);
              *(_QWORD *)(a2 + v82) = v83 + 1;
              v81 |= (unint64_t)(v84 & 0x7F) << v79;
              if (v84 < 0)
              {
                v79 += 7;
                v14 = v80++ >= 9;
                if (v14)
                {
                  v81 = 0;
                  goto LABEL_156;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v81 = 0;
LABEL_156:
          objc_msgSend(a1, "setIsNameSuffixMatch:", v81 != 0);
          continue;
        case 0xCu:
          v85 = 0;
          v86 = 0;
          v87 = 0;
          while (2)
          {
            v88 = *v3;
            v89 = *(_QWORD *)(a2 + v88);
            if (v89 == -1 || v89 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v90 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v89);
              *(_QWORD *)(a2 + v88) = v89 + 1;
              v87 |= (unint64_t)(v90 & 0x7F) << v85;
              if (v90 < 0)
              {
                v85 += 7;
                v14 = v86++ >= 9;
                if (v14)
                {
                  v87 = 0;
                  goto LABEL_160;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v87 = 0;
LABEL_160:
          objc_msgSend(a1, "setIsHandleQueryMatch:", v87 != 0);
          continue;
        case 0xDu:
          v91 = 0;
          v92 = 0;
          v93 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v94 = *v3;
        v95 = *(_QWORD *)(a2 + v94);
        if (v95 == -1 || v95 >= *(_QWORD *)(a2 + *v4))
          break;
        v96 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v95);
        *(_QWORD *)(a2 + v94) = v95 + 1;
        v93 |= (unint64_t)(v96 & 0x7F) << v91;
        if ((v96 & 0x80) == 0)
          goto LABEL_162;
        v91 += 7;
        v14 = v92++ >= 9;
        if (v14)
        {
          v93 = 0;
          goto LABEL_164;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_162:
      if (*(_BYTE *)(a2 + *v5))
        v93 = 0;
LABEL_164:
      objc_msgSend(a1, "setIsHandleQueryLabelNameMatch:", v93 != 0);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INFERENCESchemaINFERENCEResolutionQueryInfoGeneratedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_57;
        PBReaderRecallMark();
        objc_msgSend(a1, "setOriginalResolutionContextId:", v17, 0, 0);
        goto LABEL_44;
      case 2u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (PBReaderPlaceMark() && (SISchemaUUIDReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setQueryId:", v17, 0, 0);
LABEL_44:

LABEL_55:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_57:

        return 0;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_49:
        objc_msgSend(a1, "setResolutionState:", v25);
        goto LABEL_55;
      case 4u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_54:
        objc_msgSend(a1, "setForcePromptType:", v32);
        goto LABEL_55;
      case 5u:
        PBReaderReadString();
        v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setRecommenderModelVersion:", v17);
        goto LABEL_44;
      case 6u:
        PBReaderReadString();
        v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addAnonymizedRecommendedEntityIdentifier:", v17);
        goto LABEL_44;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_55;
    }
  }
}

BOOL INFERENCESchemaINFERENCEResolutionRequestContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  INFERENCESchemaINFERENCEResolutionRequestEnded *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 100)
      {
        if ((_DWORD)v17 == 101)
        {
          v18 = objc_alloc_init(INFERENCESchemaINFERENCEResolutionRequestEnded);
          if (!PBReaderPlaceMark()
            || (INFERENCESchemaINFERENCEResolutionRequestEndedReadFrom(v18, a2) & 1) == 0)
          {
LABEL_39:

            return 0;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "setEnded:", v18, 0, 0);
          goto LABEL_35;
        }
        if ((_DWORD)v17 == 102)
        {
          v18 = objc_alloc_init(INFERENCESchemaINFERENCEResolutionRequestFailed);
          if (!PBReaderPlaceMark()
            || (INFERENCESchemaINFERENCEResolutionRequestFailedReadFrom(v18, a2) & 1) == 0)
          {
            goto LABEL_39;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "setFailed:", v18, 0, 0);
          goto LABEL_35;
        }
      }
      else
      {
        if ((_DWORD)v17 == 1)
        {
          v18 = objc_alloc_init(SISchemaUUID);
          if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v18, a2) & 1) == 0)
            goto LABEL_39;
          PBReaderRecallMark();
          objc_msgSend(a1, "setContextId:", v18, 0, 0);
          goto LABEL_35;
        }
        if ((_DWORD)v17 == 100)
        {
          v18 = objc_alloc_init(INFERENCESchemaINFERENCEResolutionRequestStarted);
          if (!PBReaderPlaceMark()
            || (INFERENCESchemaINFERENCEResolutionRequestStartedReadFrom(v18, a2) & 1) == 0)
          {
            goto LABEL_39;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "setStartedOrChanged:", v18, 0, 0);
LABEL_35:

          continue;
        }
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INFERENCESchemaINFERENCEResolutionRequestEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INFERENCESchemaINFERENCEResolutionRequestFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setErrorCode:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INFERENCESchemaINFERENCEResolutionRequestStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  INFERENCESchemaINFERENCEResolverConfig *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v24 = objc_alloc_init(INFERENCESchemaINFERENCEResolverConfig);
        if (!PBReaderPlaceMark() || (INFERENCESchemaINFERENCEResolverConfigReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setResolverConfig:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_36:
        objc_msgSend(a1, "setSlotType:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INFERENCESchemaINFERENCEResolverConfigReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  INFERENCESchemaINFERENCEContactResolverConfig *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(INFERENCESchemaINFERENCEContactResolverConfig);
        if (!PBReaderPlaceMark()
          || (INFERENCESchemaINFERENCEContactResolverConfigReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setContactConfig:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INFERENCESchemaINFERENCESimpleTaskInfoGeneratedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_75;
        PBReaderRecallMark();
        objc_msgSend(a1, "setOriginalResolutionContextId:", v17, 0, 0);
        goto LABEL_55;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_60:
        objc_msgSend(a1, "setTaskSuccessType:", v25);
        goto LABEL_73;
      case 3u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v28 = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v28 = 0;
LABEL_64:
        objc_msgSend(a1, "setIsSuccess:", v28 != 0);
        goto LABEL_73;
      case 4u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v34 = 0;
                goto LABEL_68;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v34 = 0;
LABEL_68:
        objc_msgSend(a1, "setIsExecuted:", v34 != 0);
        goto LABEL_73;
      case 5u:
        v38 = 0;
        v39 = 0;
        v40 = 0;
        while (2)
        {
          v41 = *v3;
          v42 = *(_QWORD *)(a2 + v41);
          if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v42 + 1;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              v14 = v39++ >= 9;
              if (v14)
              {
                v40 = 0;
                goto LABEL_72;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v40 = 0;
LABEL_72:
        objc_msgSend(a1, "setIsSuccessfulDirectExecution:", v40 != 0);
        goto LABEL_73;
      case 6u:
        v17 = objc_alloc_init(INFERENCESchemaINFERENCETaskSpecificInfo);
        if (PBReaderPlaceMark() && (INFERENCESchemaINFERENCETaskSpecificInfoReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setTaskSpecificInfo:", v17, 0, 0);
LABEL_55:

LABEL_73:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_75:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_73;
    }
  }
}

uint64_t INFERENCESchemaINFERENCESpeechAlternativeRanksReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_64;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_66;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_66:
          objc_msgSend(a1, "setIsError:", v19 != 0);
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  v30 = 0;
                  goto LABEL_71;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v30 = 0;
          else
            v30 = v26;
LABEL_71:
          objc_msgSend(a1, "setVersion:", v30);
          continue;
        case 3u:
          v31 = 0;
          v32 = 0;
          v33 = 0;
          while (2)
          {
            v34 = *v3;
            v35 = *(_QWORD *)(a2 + v34);
            if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
              *(_QWORD *)(a2 + v34) = v35 + 1;
              v33 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                v14 = v32++ >= 9;
                if (v14)
                {
                  v37 = 0;
                  goto LABEL_76;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v37 = 0;
          else
            v37 = v33;
LABEL_76:
          objc_msgSend(a1, "setGivenNameRank:", v37);
          continue;
        case 4u:
          v38 = 0;
          v39 = 0;
          v40 = 0;
          while (2)
          {
            v41 = *v3;
            v42 = *(_QWORD *)(a2 + v41);
            if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
              *(_QWORD *)(a2 + v41) = v42 + 1;
              v40 |= (unint64_t)(v43 & 0x7F) << v38;
              if (v43 < 0)
              {
                v38 += 7;
                v14 = v39++ >= 9;
                if (v14)
                {
                  v44 = 0;
                  goto LABEL_81;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v44 = 0;
          else
            v44 = v40;
LABEL_81:
          objc_msgSend(a1, "setMiddleNameRank:", v44);
          continue;
        case 5u:
          v45 = 0;
          v46 = 0;
          v47 = 0;
          while (2)
          {
            v48 = *v3;
            v49 = *(_QWORD *)(a2 + v48);
            if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v49);
              *(_QWORD *)(a2 + v48) = v49 + 1;
              v47 |= (unint64_t)(v50 & 0x7F) << v45;
              if (v50 < 0)
              {
                v45 += 7;
                v14 = v46++ >= 9;
                if (v14)
                {
                  v51 = 0;
                  goto LABEL_86;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v51 = 0;
          else
            v51 = v47;
LABEL_86:
          objc_msgSend(a1, "setFamilyNameRank:", v51);
          continue;
        case 6u:
          v52 = 0;
          v53 = 0;
          v54 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v55 = *v3;
        v56 = *(_QWORD *)(a2 + v55);
        if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
          break;
        v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
        *(_QWORD *)(a2 + v55) = v56 + 1;
        v54 |= (unint64_t)(v57 & 0x7F) << v52;
        if ((v57 & 0x80) == 0)
          goto LABEL_88;
        v52 += 7;
        v14 = v53++ >= 9;
        if (v14)
        {
          v58 = 0;
          goto LABEL_91;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_88:
      v58 = *(_BYTE *)(a2 + *v5) ? 0 : v54;
LABEL_91:
      objc_msgSend(a1, "setFullNameRank:", v58);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INFERENCESchemaINFERENCETaskSpecificInfoReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  INFERENCESchemaINFERENCELongRunningTaskInfo *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(INFERENCESchemaINFERENCELongRunningTaskInfo);
        if (!PBReaderPlaceMark()
          || (INFERENCESchemaINFERENCELongRunningTaskInfoReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLongRunningTaskInfo:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INFERENCESchemaINFERENCETrialEnrollmentReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  void *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setExperimentId:", v17);
          goto LABEL_31;
        case 2u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setTreatmentId:", v17);
          goto LABEL_31;
        case 3u:
          v19 = 0;
          v20 = 0;
          v21 = 0;
          break;
        case 4u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setRolloutId:", v17);
LABEL_31:

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          break;
        v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
        *(_QWORD *)(a2 + v22) = v23 + 1;
        v21 |= (unint64_t)(v24 & 0x7F) << v19;
        if ((v24 & 0x80) == 0)
          goto LABEL_33;
        v19 += 7;
        v14 = v20++ >= 9;
        if (v14)
        {
          v25 = 0;
          goto LABEL_36;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
      v25 = *(_BYTE *)(a2 + *v5) ? 0 : v21;
LABEL_36:
      objc_msgSend(a1, "setDeploymentId:", v25);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INFERENCESchemaINFERENCEVideoPlayOnThirdPartyAppDependentSignalsReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  char v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char v126;
  uint64_t v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char v133;
  uint64_t v134;
  char v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  uint64_t v141;
  char v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  uint64_t v148;
  char v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  uint64_t v155;
  char v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char v161;
  uint64_t v162;
  char v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char v168;
  uint64_t v169;
  char v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  char v175;
  char v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char v181;
  char v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char v187;
  uint64_t v188;
  char v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  char v194;
  uint64_t v195;
  char v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  char v201;
  uint64_t v202;
  char v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  char v208;
  uint64_t v209;
  char v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  char v215;
  uint64_t v216;
  char v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  char v222;
  uint64_t v223;
  char v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  char v229;
  char v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  char v235;
  uint64_t v236;
  char v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  char v242;
  uint64_t v243;
  char v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  char v249;
  uint64_t v250;
  char v251;
  unsigned int v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  char v256;
  uint64_t v257;
  char v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  char v263;
  uint64_t v264;
  char v265;
  unsigned int v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  char v270;
  uint64_t v271;
  char v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  char v277;
  uint64_t v278;
  char v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  char v284;
  uint64_t v285;
  char v286;
  unsigned int v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  char v291;
  uint64_t v292;
  char v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  char v298;
  uint64_t v299;
  char v300;
  unsigned int v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  char v305;
  uint64_t v306;
  char v307;
  unsigned int v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  char v312;
  uint64_t v313;
  char v314;
  unsigned int v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  char v319;
  uint64_t v320;
  char v321;
  unsigned int v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  char v326;
  uint64_t v327;
  char v328;
  unsigned int v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  char v333;
  uint64_t v334;
  char v335;
  unsigned int v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  char v340;
  uint64_t v341;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_351;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v23 = 0;
              goto LABEL_354;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_351:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
          else
            v23 = v19;
LABEL_354:
          objc_msgSend(a1, "setRelativeAppUsage1Day:", v23);
          continue;
        case 2u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (v14)
                {
                  v31 = 0;
                  goto LABEL_359;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
          else
            v31 = v27;
LABEL_359:
          objc_msgSend(a1, "setRelativeAppUsage7Day:", v31);
          continue;
        case 3u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (2)
          {
            v35 = *v3;
            v36 = *(_QWORD *)(a2 + v35);
            if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
              *(_QWORD *)(a2 + v35) = v36 + 1;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                v14 = v33++ >= 9;
                if (v14)
                {
                  v38 = 0;
                  goto LABEL_364;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
          else
            v38 = v34;
LABEL_364:
          objc_msgSend(a1, "setRelativeAppUsage14Day:", v38);
          continue;
        case 4u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                v14 = v40++ >= 9;
                if (v14)
                {
                  v45 = 0;
                  goto LABEL_369;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v45 = 0;
          else
            v45 = v41;
LABEL_369:
          objc_msgSend(a1, "setEntityAbsoluteCount2Min:", v45);
          continue;
        case 5u:
          v46 = 0;
          v47 = 0;
          v48 = 0;
          while (2)
          {
            v49 = *v3;
            v50 = *(_QWORD *)(a2 + v49);
            if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
              *(_QWORD *)(a2 + v49) = v50 + 1;
              v48 |= (unint64_t)(v51 & 0x7F) << v46;
              if (v51 < 0)
              {
                v46 += 7;
                v14 = v47++ >= 9;
                if (v14)
                {
                  v52 = 0;
                  goto LABEL_374;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v52 = 0;
          else
            v52 = v48;
LABEL_374:
          objc_msgSend(a1, "setEntityAbsoluteCount10Min:", v52);
          continue;
        case 6u:
          v53 = 0;
          v54 = 0;
          v55 = 0;
          while (2)
          {
            v56 = *v3;
            v57 = *(_QWORD *)(a2 + v56);
            if (v57 == -1 || v57 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
              *(_QWORD *)(a2 + v56) = v57 + 1;
              v55 |= (unint64_t)(v58 & 0x7F) << v53;
              if (v58 < 0)
              {
                v53 += 7;
                v14 = v54++ >= 9;
                if (v14)
                {
                  v59 = 0;
                  goto LABEL_379;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v59 = 0;
          else
            v59 = v55;
LABEL_379:
          objc_msgSend(a1, "setEntityAbsoluteCount1Hr:", v59);
          continue;
        case 7u:
          v60 = 0;
          v61 = 0;
          v62 = 0;
          while (2)
          {
            v63 = *v3;
            v64 = *(_QWORD *)(a2 + v63);
            if (v64 == -1 || v64 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v65 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v64);
              *(_QWORD *)(a2 + v63) = v64 + 1;
              v62 |= (unint64_t)(v65 & 0x7F) << v60;
              if (v65 < 0)
              {
                v60 += 7;
                v14 = v61++ >= 9;
                if (v14)
                {
                  v66 = 0;
                  goto LABEL_384;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v66 = 0;
          else
            v66 = v62;
LABEL_384:
          objc_msgSend(a1, "setEntityAbsoluteCount6Hr:", v66);
          continue;
        case 8u:
          v67 = 0;
          v68 = 0;
          v69 = 0;
          while (2)
          {
            v70 = *v3;
            v71 = *(_QWORD *)(a2 + v70);
            if (v71 == -1 || v71 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v72 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v71);
              *(_QWORD *)(a2 + v70) = v71 + 1;
              v69 |= (unint64_t)(v72 & 0x7F) << v67;
              if (v72 < 0)
              {
                v67 += 7;
                v14 = v68++ >= 9;
                if (v14)
                {
                  v73 = 0;
                  goto LABEL_389;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v73 = 0;
          else
            v73 = v69;
LABEL_389:
          objc_msgSend(a1, "setEntityAbsoluteCount1Day:", v73);
          continue;
        case 9u:
          v74 = 0;
          v75 = 0;
          v76 = 0;
          while (2)
          {
            v77 = *v3;
            v78 = *(_QWORD *)(a2 + v77);
            if (v78 == -1 || v78 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v79 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v78);
              *(_QWORD *)(a2 + v77) = v78 + 1;
              v76 |= (unint64_t)(v79 & 0x7F) << v74;
              if (v79 < 0)
              {
                v74 += 7;
                v14 = v75++ >= 9;
                if (v14)
                {
                  v80 = 0;
                  goto LABEL_394;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v80 = 0;
          else
            v80 = v76;
LABEL_394:
          objc_msgSend(a1, "setEntityAbsoluteCount7Day:", v80);
          continue;
        case 0xAu:
          v81 = 0;
          v82 = 0;
          v83 = 0;
          while (2)
          {
            v84 = *v3;
            v85 = *(_QWORD *)(a2 + v84);
            if (v85 == -1 || v85 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v86 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v85);
              *(_QWORD *)(a2 + v84) = v85 + 1;
              v83 |= (unint64_t)(v86 & 0x7F) << v81;
              if (v86 < 0)
              {
                v81 += 7;
                v14 = v82++ >= 9;
                if (v14)
                {
                  v87 = 0;
                  goto LABEL_399;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v87 = 0;
          else
            v87 = v83;
LABEL_399:
          objc_msgSend(a1, "setEntityAbsoluteCount14Day:", v87);
          continue;
        case 0xBu:
          v88 = 0;
          v89 = 0;
          v90 = 0;
          while (2)
          {
            v91 = *v3;
            v92 = *(_QWORD *)(a2 + v91);
            if (v92 == -1 || v92 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v93 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v92);
              *(_QWORD *)(a2 + v91) = v92 + 1;
              v90 |= (unint64_t)(v93 & 0x7F) << v88;
              if (v93 < 0)
              {
                v88 += 7;
                v14 = v89++ >= 9;
                if (v14)
                {
                  v94 = 0;
                  goto LABEL_404;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v94 = 0;
          else
            v94 = v90;
LABEL_404:
          objc_msgSend(a1, "setEntityRecency:", v94);
          continue;
        case 0xCu:
          v95 = 0;
          v96 = 0;
          v97 = 0;
          while (2)
          {
            v98 = *v3;
            v99 = *(_QWORD *)(a2 + v98);
            if (v99 == -1 || v99 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v100 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v99);
              *(_QWORD *)(a2 + v98) = v99 + 1;
              v97 |= (unint64_t)(v100 & 0x7F) << v95;
              if (v100 < 0)
              {
                v95 += 7;
                v14 = v96++ >= 9;
                if (v14)
                {
                  v101 = 0;
                  goto LABEL_409;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v101 = 0;
          else
            v101 = v97;
LABEL_409:
          objc_msgSend(a1, "setMediaUserContextNumberOfLibraryItems:", v101);
          continue;
        case 0xDu:
          v102 = 0;
          v103 = 0;
          v104 = 0;
          while (2)
          {
            v105 = *v3;
            v106 = *(_QWORD *)(a2 + v105);
            if (v106 == -1 || v106 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v107 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v106);
              *(_QWORD *)(a2 + v105) = v106 + 1;
              v104 |= (unint64_t)(v107 & 0x7F) << v102;
              if (v107 < 0)
              {
                v102 += 7;
                v14 = v103++ >= 9;
                if (v14)
                {
                  v108 = 0;
                  goto LABEL_414;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v108 = 0;
          else
            v108 = v104;
LABEL_414:
          objc_msgSend(a1, "setMediaUserContextSubscriptionStatus:", v108);
          continue;
        case 0xEu:
          v109 = 0;
          v110 = 0;
          v111 = 0;
          while (2)
          {
            v112 = *v3;
            v113 = *(_QWORD *)(a2 + v112);
            if (v113 == -1 || v113 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v114 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v113);
              *(_QWORD *)(a2 + v112) = v113 + 1;
              v111 |= (unint64_t)(v114 & 0x7F) << v109;
              if (v114 < 0)
              {
                v109 += 7;
                v14 = v110++ >= 9;
                if (v14)
                {
                  v111 = 0;
                  goto LABEL_418;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v111 = 0;
LABEL_418:
          objc_msgSend(a1, "setIsLastForegroundApp:", v111 != 0);
          continue;
        case 0xFu:
          v115 = 0;
          v116 = 0;
          v117 = 0;
          while (2)
          {
            v118 = *v3;
            v119 = *(_QWORD *)(a2 + v118);
            if (v119 == -1 || v119 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v120 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v119);
              *(_QWORD *)(a2 + v118) = v119 + 1;
              v117 |= (unint64_t)(v120 & 0x7F) << v115;
              if (v120 < 0)
              {
                v115 += 7;
                v14 = v116++ >= 9;
                if (v14)
                {
                  v117 = 0;
                  goto LABEL_422;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v117 = 0;
LABEL_422:
          objc_msgSend(a1, "setIsLastNowPlayingApp:", v117 != 0);
          continue;
        case 0x10u:
          v121 = 0;
          v122 = 0;
          v123 = 0;
          while (2)
          {
            v124 = *v3;
            v125 = *(_QWORD *)(a2 + v124);
            if (v125 == -1 || v125 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v126 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v125);
              *(_QWORD *)(a2 + v124) = v125 + 1;
              v123 |= (unint64_t)(v126 & 0x7F) << v121;
              if (v126 < 0)
              {
                v121 += 7;
                v14 = v122++ >= 9;
                if (v14)
                {
                  v127 = 0;
                  goto LABEL_427;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v127 = 0;
          else
            v127 = v123;
LABEL_427:
          objc_msgSend(a1, "setNowPlayingAbsoluteCount2Min:", v127);
          continue;
        case 0x11u:
          v128 = 0;
          v129 = 0;
          v130 = 0;
          while (2)
          {
            v131 = *v3;
            v132 = *(_QWORD *)(a2 + v131);
            if (v132 == -1 || v132 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v133 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v132);
              *(_QWORD *)(a2 + v131) = v132 + 1;
              v130 |= (unint64_t)(v133 & 0x7F) << v128;
              if (v133 < 0)
              {
                v128 += 7;
                v14 = v129++ >= 9;
                if (v14)
                {
                  v134 = 0;
                  goto LABEL_432;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v134 = 0;
          else
            v134 = v130;
LABEL_432:
          objc_msgSend(a1, "setNowPlayingAbsoluteCount10Min:", v134);
          continue;
        case 0x12u:
          v135 = 0;
          v136 = 0;
          v137 = 0;
          while (2)
          {
            v138 = *v3;
            v139 = *(_QWORD *)(a2 + v138);
            if (v139 == -1 || v139 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v140 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v139);
              *(_QWORD *)(a2 + v138) = v139 + 1;
              v137 |= (unint64_t)(v140 & 0x7F) << v135;
              if (v140 < 0)
              {
                v135 += 7;
                v14 = v136++ >= 9;
                if (v14)
                {
                  v141 = 0;
                  goto LABEL_437;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v141 = 0;
          else
            v141 = v137;
LABEL_437:
          objc_msgSend(a1, "setNowPlayingAbsoluteCount1Hr:", v141);
          continue;
        case 0x13u:
          v142 = 0;
          v143 = 0;
          v144 = 0;
          while (2)
          {
            v145 = *v3;
            v146 = *(_QWORD *)(a2 + v145);
            if (v146 == -1 || v146 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v147 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v146);
              *(_QWORD *)(a2 + v145) = v146 + 1;
              v144 |= (unint64_t)(v147 & 0x7F) << v142;
              if (v147 < 0)
              {
                v142 += 7;
                v14 = v143++ >= 9;
                if (v14)
                {
                  v148 = 0;
                  goto LABEL_442;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v148 = 0;
          else
            v148 = v144;
LABEL_442:
          objc_msgSend(a1, "setNowPlayingAbsoluteCount6Hr:", v148);
          continue;
        case 0x14u:
          v149 = 0;
          v150 = 0;
          v151 = 0;
          while (2)
          {
            v152 = *v3;
            v153 = *(_QWORD *)(a2 + v152);
            if (v153 == -1 || v153 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v154 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v153);
              *(_QWORD *)(a2 + v152) = v153 + 1;
              v151 |= (unint64_t)(v154 & 0x7F) << v149;
              if (v154 < 0)
              {
                v149 += 7;
                v14 = v150++ >= 9;
                if (v14)
                {
                  v155 = 0;
                  goto LABEL_447;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v155 = 0;
          else
            v155 = v151;
LABEL_447:
          objc_msgSend(a1, "setNowPlayingAbsoluteCount1Day:", v155);
          continue;
        case 0x15u:
          v156 = 0;
          v157 = 0;
          v158 = 0;
          while (2)
          {
            v159 = *v3;
            v160 = *(_QWORD *)(a2 + v159);
            if (v160 == -1 || v160 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v161 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v160);
              *(_QWORD *)(a2 + v159) = v160 + 1;
              v158 |= (unint64_t)(v161 & 0x7F) << v156;
              if (v161 < 0)
              {
                v156 += 7;
                v14 = v157++ >= 9;
                if (v14)
                {
                  v162 = 0;
                  goto LABEL_452;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v162 = 0;
          else
            v162 = v158;
LABEL_452:
          objc_msgSend(a1, "setNowPlayingAbsoluteCount7Day:", v162);
          continue;
        case 0x16u:
          v163 = 0;
          v164 = 0;
          v165 = 0;
          while (2)
          {
            v166 = *v3;
            v167 = *(_QWORD *)(a2 + v166);
            if (v167 == -1 || v167 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v168 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v167);
              *(_QWORD *)(a2 + v166) = v167 + 1;
              v165 |= (unint64_t)(v168 & 0x7F) << v163;
              if (v168 < 0)
              {
                v163 += 7;
                v14 = v164++ >= 9;
                if (v14)
                {
                  v169 = 0;
                  goto LABEL_457;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v169 = 0;
          else
            v169 = v165;
LABEL_457:
          objc_msgSend(a1, "setNowPlayingAbsoluteCount14Day:", v169);
          continue;
        case 0x17u:
          v170 = 0;
          v171 = 0;
          v172 = 0;
          while (2)
          {
            v173 = *v3;
            v174 = *(_QWORD *)(a2 + v173);
            if (v174 == -1 || v174 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v175 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v174);
              *(_QWORD *)(a2 + v173) = v174 + 1;
              v172 |= (unint64_t)(v175 & 0x7F) << v170;
              if (v175 < 0)
              {
                v170 += 7;
                v14 = v171++ >= 9;
                if (v14)
                {
                  v172 = 0;
                  goto LABEL_461;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v172 = 0;
LABEL_461:
          objc_msgSend(a1, "setIsNowPlayingApp:", v172 != 0);
          continue;
        case 0x18u:
          v176 = 0;
          v177 = 0;
          v178 = 0;
          while (2)
          {
            v179 = *v3;
            v180 = *(_QWORD *)(a2 + v179);
            if (v180 == -1 || v180 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v181 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v180);
              *(_QWORD *)(a2 + v179) = v180 + 1;
              v178 |= (unint64_t)(v181 & 0x7F) << v176;
              if (v181 < 0)
              {
                v176 += 7;
                v14 = v177++ >= 9;
                if (v14)
                {
                  v178 = 0;
                  goto LABEL_465;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v178 = 0;
LABEL_465:
          objc_msgSend(a1, "setIsSelectedApp:", v178 != 0);
          continue;
        case 0x19u:
          v182 = 0;
          v183 = 0;
          v184 = 0;
          while (2)
          {
            v185 = *v3;
            v186 = *(_QWORD *)(a2 + v185);
            if (v186 == -1 || v186 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v187 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v186);
              *(_QWORD *)(a2 + v185) = v186 + 1;
              v184 |= (unint64_t)(v187 & 0x7F) << v182;
              if (v187 < 0)
              {
                v182 += 7;
                v14 = v183++ >= 9;
                if (v14)
                {
                  v188 = 0;
                  goto LABEL_470;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v188 = 0;
          else
            v188 = v184;
LABEL_470:
          objc_msgSend(a1, "setTimeSinceLastForegroundAppStartInSec:", v188);
          continue;
        case 0x1Au:
          v189 = 0;
          v190 = 0;
          v191 = 0;
          while (2)
          {
            v192 = *v3;
            v193 = *(_QWORD *)(a2 + v192);
            if (v193 == -1 || v193 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v194 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v193);
              *(_QWORD *)(a2 + v192) = v193 + 1;
              v191 |= (unint64_t)(v194 & 0x7F) << v189;
              if (v194 < 0)
              {
                v189 += 7;
                v14 = v190++ >= 9;
                if (v14)
                {
                  v195 = 0;
                  goto LABEL_475;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v195 = 0;
          else
            v195 = v191;
LABEL_475:
          objc_msgSend(a1, "setTimeSinceLastForegroundAppEndInSec:", v195);
          continue;
        case 0x1Bu:
          v196 = 0;
          v197 = 0;
          v198 = 0;
          while (2)
          {
            v199 = *v3;
            v200 = *(_QWORD *)(a2 + v199);
            if (v200 == -1 || v200 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v201 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v200);
              *(_QWORD *)(a2 + v199) = v200 + 1;
              v198 |= (unint64_t)(v201 & 0x7F) << v196;
              if (v201 < 0)
              {
                v196 += 7;
                v14 = v197++ >= 9;
                if (v14)
                {
                  v202 = 0;
                  goto LABEL_480;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v202 = 0;
          else
            v202 = v198;
LABEL_480:
          objc_msgSend(a1, "setTimeSinceLastNowPlayingAppStartInSec:", v202);
          continue;
        case 0x1Cu:
          v203 = 0;
          v204 = 0;
          v205 = 0;
          while (2)
          {
            v206 = *v3;
            v207 = *(_QWORD *)(a2 + v206);
            if (v207 == -1 || v207 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v208 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v207);
              *(_QWORD *)(a2 + v206) = v207 + 1;
              v205 |= (unint64_t)(v208 & 0x7F) << v203;
              if (v208 < 0)
              {
                v203 += 7;
                v14 = v204++ >= 9;
                if (v14)
                {
                  v209 = 0;
                  goto LABEL_485;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v209 = 0;
          else
            v209 = v205;
LABEL_485:
          objc_msgSend(a1, "setTimeSinceLastNowPlayingAppEndInSec:", v209);
          continue;
        case 0x1Du:
          v210 = 0;
          v211 = 0;
          v212 = 0;
          while (2)
          {
            v213 = *v3;
            v214 = *(_QWORD *)(a2 + v213);
            if (v214 == -1 || v214 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v215 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v214);
              *(_QWORD *)(a2 + v213) = v214 + 1;
              v212 |= (unint64_t)(v215 & 0x7F) << v210;
              if (v215 < 0)
              {
                v210 += 7;
                v14 = v211++ >= 9;
                if (v14)
                {
                  v216 = 0;
                  goto LABEL_490;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v216 = 0;
          else
            v216 = v212;
LABEL_490:
          objc_msgSend(a1, "setSpotlightRelativeCount:", v216);
          continue;
        case 0x1Eu:
          v217 = 0;
          v218 = 0;
          v219 = 0;
          while (2)
          {
            v220 = *v3;
            v221 = *(_QWORD *)(a2 + v220);
            if (v221 == -1 || v221 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v222 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v221);
              *(_QWORD *)(a2 + v220) = v221 + 1;
              v219 |= (unint64_t)(v222 & 0x7F) << v217;
              if (v222 < 0)
              {
                v217 += 7;
                v14 = v218++ >= 9;
                if (v14)
                {
                  v223 = 0;
                  goto LABEL_495;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v223 = 0;
          else
            v223 = v219;
LABEL_495:
          objc_msgSend(a1, "setSupportedMediaCategories:", v223);
          continue;
        case 0x1Fu:
          v224 = 0;
          v225 = 0;
          v226 = 0;
          while (2)
          {
            v227 = *v3;
            v228 = *(_QWORD *)(a2 + v227);
            if (v228 == -1 || v228 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v229 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v228);
              *(_QWORD *)(a2 + v227) = v228 + 1;
              v226 |= (unint64_t)(v229 & 0x7F) << v224;
              if (v229 < 0)
              {
                v224 += 7;
                v14 = v225++ >= 9;
                if (v14)
                {
                  v226 = 0;
                  goto LABEL_499;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v226 = 0;
LABEL_499:
          objc_msgSend(a1, "setIsForegroundApp:", v226 != 0);
          continue;
        case 0x20u:
          v230 = 0;
          v231 = 0;
          v232 = 0;
          while (2)
          {
            v233 = *v3;
            v234 = *(_QWORD *)(a2 + v233);
            if (v234 == -1 || v234 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v235 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v234);
              *(_QWORD *)(a2 + v233) = v234 + 1;
              v232 |= (unint64_t)(v235 & 0x7F) << v230;
              if (v235 < 0)
              {
                v230 += 7;
                v14 = v231++ >= 9;
                if (v14)
                {
                  v236 = 0;
                  goto LABEL_504;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v236 = 0;
          else
            v236 = v232;
LABEL_504:
          objc_msgSend(a1, "setEntityAbsoluteCount28Day:", v236);
          continue;
        case 0x21u:
          v237 = 0;
          v238 = 0;
          v239 = 0;
          while (2)
          {
            v240 = *v3;
            v241 = *(_QWORD *)(a2 + v240);
            if (v241 == -1 || v241 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v242 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v241);
              *(_QWORD *)(a2 + v240) = v241 + 1;
              v239 |= (unint64_t)(v242 & 0x7F) << v237;
              if (v242 < 0)
              {
                v237 += 7;
                v14 = v238++ >= 9;
                if (v14)
                {
                  v243 = 0;
                  goto LABEL_509;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v243 = 0;
          else
            v243 = v239;
LABEL_509:
          objc_msgSend(a1, "setNowPlayingAbsoluteCount28Day:", v243);
          continue;
        case 0x22u:
          v244 = 0;
          v245 = 0;
          v246 = 0;
          while (2)
          {
            v247 = *v3;
            v248 = *(_QWORD *)(a2 + v247);
            if (v248 == -1 || v248 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v249 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v248);
              *(_QWORD *)(a2 + v247) = v248 + 1;
              v246 |= (unint64_t)(v249 & 0x7F) << v244;
              if (v249 < 0)
              {
                v244 += 7;
                v14 = v245++ >= 9;
                if (v14)
                {
                  v250 = 0;
                  goto LABEL_514;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v250 = 0;
          else
            v250 = v246;
LABEL_514:
          objc_msgSend(a1, "setEntityPartialSiriCount2Min:", v250);
          continue;
        case 0x23u:
          v251 = 0;
          v252 = 0;
          v253 = 0;
          while (2)
          {
            v254 = *v3;
            v255 = *(_QWORD *)(a2 + v254);
            if (v255 == -1 || v255 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v256 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v255);
              *(_QWORD *)(a2 + v254) = v255 + 1;
              v253 |= (unint64_t)(v256 & 0x7F) << v251;
              if (v256 < 0)
              {
                v251 += 7;
                v14 = v252++ >= 9;
                if (v14)
                {
                  v257 = 0;
                  goto LABEL_519;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v257 = 0;
          else
            v257 = v253;
LABEL_519:
          objc_msgSend(a1, "setEntityPartialSiriCount10Min:", v257);
          continue;
        case 0x24u:
          v258 = 0;
          v259 = 0;
          v260 = 0;
          while (2)
          {
            v261 = *v3;
            v262 = *(_QWORD *)(a2 + v261);
            if (v262 == -1 || v262 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v263 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v262);
              *(_QWORD *)(a2 + v261) = v262 + 1;
              v260 |= (unint64_t)(v263 & 0x7F) << v258;
              if (v263 < 0)
              {
                v258 += 7;
                v14 = v259++ >= 9;
                if (v14)
                {
                  v264 = 0;
                  goto LABEL_524;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v264 = 0;
          else
            v264 = v260;
LABEL_524:
          objc_msgSend(a1, "setEntityPartialSiriCount1Hr:", v264);
          continue;
        case 0x25u:
          v265 = 0;
          v266 = 0;
          v267 = 0;
          while (2)
          {
            v268 = *v3;
            v269 = *(_QWORD *)(a2 + v268);
            if (v269 == -1 || v269 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v270 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v269);
              *(_QWORD *)(a2 + v268) = v269 + 1;
              v267 |= (unint64_t)(v270 & 0x7F) << v265;
              if (v270 < 0)
              {
                v265 += 7;
                v14 = v266++ >= 9;
                if (v14)
                {
                  v271 = 0;
                  goto LABEL_529;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v271 = 0;
          else
            v271 = v267;
LABEL_529:
          objc_msgSend(a1, "setEntityPartialSiriCount6Hr:", v271);
          continue;
        case 0x26u:
          v272 = 0;
          v273 = 0;
          v274 = 0;
          while (2)
          {
            v275 = *v3;
            v276 = *(_QWORD *)(a2 + v275);
            if (v276 == -1 || v276 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v277 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v276);
              *(_QWORD *)(a2 + v275) = v276 + 1;
              v274 |= (unint64_t)(v277 & 0x7F) << v272;
              if (v277 < 0)
              {
                v272 += 7;
                v14 = v273++ >= 9;
                if (v14)
                {
                  v278 = 0;
                  goto LABEL_534;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v278 = 0;
          else
            v278 = v274;
LABEL_534:
          objc_msgSend(a1, "setEntityPartialSiriCount1Day:", v278);
          continue;
        case 0x27u:
          v279 = 0;
          v280 = 0;
          v281 = 0;
          while (2)
          {
            v282 = *v3;
            v283 = *(_QWORD *)(a2 + v282);
            if (v283 == -1 || v283 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v284 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v283);
              *(_QWORD *)(a2 + v282) = v283 + 1;
              v281 |= (unint64_t)(v284 & 0x7F) << v279;
              if (v284 < 0)
              {
                v279 += 7;
                v14 = v280++ >= 9;
                if (v14)
                {
                  v285 = 0;
                  goto LABEL_539;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v285 = 0;
          else
            v285 = v281;
LABEL_539:
          objc_msgSend(a1, "setEntityPartialSiriCount7Day:", v285);
          continue;
        case 0x28u:
          v286 = 0;
          v287 = 0;
          v288 = 0;
          while (2)
          {
            v289 = *v3;
            v290 = *(_QWORD *)(a2 + v289);
            if (v290 == -1 || v290 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v291 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v290);
              *(_QWORD *)(a2 + v289) = v290 + 1;
              v288 |= (unint64_t)(v291 & 0x7F) << v286;
              if (v291 < 0)
              {
                v286 += 7;
                v14 = v287++ >= 9;
                if (v14)
                {
                  v292 = 0;
                  goto LABEL_544;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v292 = 0;
          else
            v292 = v288;
LABEL_544:
          objc_msgSend(a1, "setEntityPartialSiriCount28Day:", v292);
          continue;
        case 0x29u:
          v293 = 0;
          v294 = 0;
          v295 = 0;
          while (2)
          {
            v296 = *v3;
            v297 = *(_QWORD *)(a2 + v296);
            if (v297 == -1 || v297 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v298 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v297);
              *(_QWORD *)(a2 + v296) = v297 + 1;
              v295 |= (unint64_t)(v298 & 0x7F) << v293;
              if (v298 < 0)
              {
                v293 += 7;
                v14 = v294++ >= 9;
                if (v14)
                {
                  v299 = 0;
                  goto LABEL_549;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v299 = 0;
          else
            v299 = v295;
LABEL_549:
          objc_msgSend(a1, "setEntityPartialAppCount2Min:", v299);
          continue;
        case 0x2Au:
          v300 = 0;
          v301 = 0;
          v302 = 0;
          while (2)
          {
            v303 = *v3;
            v304 = *(_QWORD *)(a2 + v303);
            if (v304 == -1 || v304 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v305 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v304);
              *(_QWORD *)(a2 + v303) = v304 + 1;
              v302 |= (unint64_t)(v305 & 0x7F) << v300;
              if (v305 < 0)
              {
                v300 += 7;
                v14 = v301++ >= 9;
                if (v14)
                {
                  v306 = 0;
                  goto LABEL_554;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v306 = 0;
          else
            v306 = v302;
LABEL_554:
          objc_msgSend(a1, "setEntityPartialAppCount10Min:", v306);
          continue;
        case 0x2Bu:
          v307 = 0;
          v308 = 0;
          v309 = 0;
          while (2)
          {
            v310 = *v3;
            v311 = *(_QWORD *)(a2 + v310);
            if (v311 == -1 || v311 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v312 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v311);
              *(_QWORD *)(a2 + v310) = v311 + 1;
              v309 |= (unint64_t)(v312 & 0x7F) << v307;
              if (v312 < 0)
              {
                v307 += 7;
                v14 = v308++ >= 9;
                if (v14)
                {
                  v313 = 0;
                  goto LABEL_559;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v313 = 0;
          else
            v313 = v309;
LABEL_559:
          objc_msgSend(a1, "setEntityPartialAppCount1Hr:", v313);
          continue;
        case 0x2Cu:
          v314 = 0;
          v315 = 0;
          v316 = 0;
          while (2)
          {
            v317 = *v3;
            v318 = *(_QWORD *)(a2 + v317);
            if (v318 == -1 || v318 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v319 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v318);
              *(_QWORD *)(a2 + v317) = v318 + 1;
              v316 |= (unint64_t)(v319 & 0x7F) << v314;
              if (v319 < 0)
              {
                v314 += 7;
                v14 = v315++ >= 9;
                if (v14)
                {
                  v320 = 0;
                  goto LABEL_564;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v320 = 0;
          else
            v320 = v316;
LABEL_564:
          objc_msgSend(a1, "setEntityPartialAppCount6Hr:", v320);
          continue;
        case 0x2Du:
          v321 = 0;
          v322 = 0;
          v323 = 0;
          while (2)
          {
            v324 = *v3;
            v325 = *(_QWORD *)(a2 + v324);
            if (v325 == -1 || v325 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v326 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v325);
              *(_QWORD *)(a2 + v324) = v325 + 1;
              v323 |= (unint64_t)(v326 & 0x7F) << v321;
              if (v326 < 0)
              {
                v321 += 7;
                v14 = v322++ >= 9;
                if (v14)
                {
                  v327 = 0;
                  goto LABEL_569;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v327 = 0;
          else
            v327 = v323;
LABEL_569:
          objc_msgSend(a1, "setEntityPartialAppCount1Day:", v327);
          continue;
        case 0x2Eu:
          v328 = 0;
          v329 = 0;
          v330 = 0;
          while (2)
          {
            v331 = *v3;
            v332 = *(_QWORD *)(a2 + v331);
            if (v332 == -1 || v332 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v333 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v332);
              *(_QWORD *)(a2 + v331) = v332 + 1;
              v330 |= (unint64_t)(v333 & 0x7F) << v328;
              if (v333 < 0)
              {
                v328 += 7;
                v14 = v329++ >= 9;
                if (v14)
                {
                  v334 = 0;
                  goto LABEL_574;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v334 = 0;
          else
            v334 = v330;
LABEL_574:
          objc_msgSend(a1, "setEntityPartialAppCount7Day:", v334);
          continue;
        case 0x2Fu:
          v335 = 0;
          v336 = 0;
          v337 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v338 = *v3;
        v339 = *(_QWORD *)(a2 + v338);
        if (v339 == -1 || v339 >= *(_QWORD *)(a2 + *v4))
          break;
        v340 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v339);
        *(_QWORD *)(a2 + v338) = v339 + 1;
        v337 |= (unint64_t)(v340 & 0x7F) << v335;
        if ((v340 & 0x80) == 0)
          goto LABEL_576;
        v335 += 7;
        v14 = v336++ >= 9;
        if (v14)
        {
          v341 = 0;
          goto LABEL_579;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_576:
      v341 = *(_BYTE *)(a2 + *v5) ? 0 : v337;
LABEL_579:
      objc_msgSend(a1, "setEntityPartialAppCount28Day:", v341);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL INFERENCESchemaINFERENCEVideoPlayOnThirdPartyAppGroundTruthGeneratedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  INFERENCESchemaINFERENCEVideoPlayOnThirdPartyAppIndependentSignals *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(INFERENCESchemaINFERENCEVideoPlayOnThirdPartyAppIndependentSignals);
        if (!PBReaderPlaceMark()
          || (INFERENCESchemaINFERENCEVideoPlayOnThirdPartyAppIndependentSignalsReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_32;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setIndependentSignal:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(INFERENCESchemaINFERENCEVideoPlayOnThirdPartyAppDependentSignals);
    if (!PBReaderPlaceMark()
      || !INFERENCESchemaINFERENCEVideoPlayOnThirdPartyAppDependentSignalsReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addDependentSignals:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SCSchemaSCCheckCorrectionResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  SCSchemaSCCheckCorrectionResult *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(SCSchemaSCCheckCorrectionResult);
        v26 = 0;
        v27 = 0;
        if (!PBReaderPlaceMark() || !SCSchemaSCCheckCorrectionResultReadFrom(v24, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v24)
          objc_msgSend(a1, "addResults:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_35;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_38;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_38:
        objc_msgSend(a1, "setCandidateCount:", v23, v26, v27);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INFERENCESchemaINFERENCEVideoPlayOnThirdPartyAppIndependentSignalsReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_92;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_94;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_92:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_94:
          objc_msgSend(a1, "setIsDeviceLockStatus:", v19 != 0);
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  v30 = 0;
                  goto LABEL_99;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v30 = 0;
          else
            v30 = v26;
LABEL_99:
          objc_msgSend(a1, "setDeviceMotionState:", v30);
          continue;
        case 3u:
          v31 = 0;
          v32 = 0;
          v33 = 0;
          while (2)
          {
            v34 = *v3;
            v35 = *(_QWORD *)(a2 + v34);
            if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
              *(_QWORD *)(a2 + v34) = v35 + 1;
              v33 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                v14 = v32++ >= 9;
                if (v14)
                {
                  v37 = 0;
                  goto LABEL_104;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v37 = 0;
          else
            v37 = v33;
LABEL_104:
          objc_msgSend(a1, "setIntentType:", v37);
          continue;
        case 4u:
          v38 = 0;
          v39 = 0;
          v40 = 0;
          while (2)
          {
            v41 = *v3;
            v42 = *(_QWORD *)(a2 + v41);
            if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
              *(_QWORD *)(a2 + v41) = v42 + 1;
              v40 |= (unint64_t)(v43 & 0x7F) << v38;
              if (v43 < 0)
              {
                v38 += 7;
                v14 = v39++ >= 9;
                if (v14)
                {
                  v44 = 0;
                  goto LABEL_109;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v44 = 0;
          else
            v44 = v40;
LABEL_109:
          objc_msgSend(a1, "setNowPlayingState:", v44);
          continue;
        case 5u:
          v45 = 0;
          v46 = 0;
          v47 = 0;
          while (2)
          {
            v48 = *v3;
            v49 = *(_QWORD *)(a2 + v48);
            if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v49);
              *(_QWORD *)(a2 + v48) = v49 + 1;
              v47 |= (unint64_t)(v50 & 0x7F) << v45;
              if (v50 < 0)
              {
                v45 += 7;
                v14 = v46++ >= 9;
                if (v14)
                {
                  v51 = 0;
                  goto LABEL_114;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v51 = 0;
          else
            v51 = v47;
LABEL_114:
          objc_msgSend(a1, "setDeviceClass:", v51);
          continue;
        case 6u:
          v52 = 0;
          v53 = 0;
          v54 = 0;
          while (2)
          {
            v55 = *v3;
            v56 = *(_QWORD *)(a2 + v55);
            if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
              *(_QWORD *)(a2 + v55) = v56 + 1;
              v54 |= (unint64_t)(v57 & 0x7F) << v52;
              if (v57 < 0)
              {
                v52 += 7;
                v14 = v53++ >= 9;
                if (v14)
                {
                  v58 = 0;
                  goto LABEL_119;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v58 = 0;
          else
            v58 = v54;
LABEL_119:
          objc_msgSend(a1, "setClientHourOfDay:", v58);
          continue;
        case 7u:
          v59 = 0;
          v60 = 0;
          v61 = 0;
          while (2)
          {
            v62 = *v3;
            v63 = *(_QWORD *)(a2 + v62);
            if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v63);
              *(_QWORD *)(a2 + v62) = v63 + 1;
              v61 |= (unint64_t)(v64 & 0x7F) << v59;
              if (v64 < 0)
              {
                v59 += 7;
                v14 = v60++ >= 9;
                if (v14)
                {
                  v65 = 0;
                  goto LABEL_124;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v65 = 0;
          else
            v65 = v61;
LABEL_124:
          objc_msgSend(a1, "setClientLocale:", v65);
          continue;
        case 8u:
          v66 = 0;
          v67 = 0;
          v68 = 0;
          while (2)
          {
            v69 = *v3;
            v70 = *(_QWORD *)(a2 + v69);
            if (v70 == -1 || v70 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v71 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v70);
              *(_QWORD *)(a2 + v69) = v70 + 1;
              v68 |= (unint64_t)(v71 & 0x7F) << v66;
              if (v71 < 0)
              {
                v66 += 7;
                v14 = v67++ >= 9;
                if (v14)
                {
                  v72 = 0;
                  goto LABEL_129;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v72 = 0;
          else
            v72 = v68;
LABEL_129:
          objc_msgSend(a1, "setClientLanguage:", v72);
          continue;
        case 9u:
          v73 = 0;
          v74 = 0;
          v75 = 0;
          while (2)
          {
            v76 = *v3;
            v77 = *(_QWORD *)(a2 + v76);
            if (v77 == -1 || v77 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v78 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v77);
              *(_QWORD *)(a2 + v76) = v77 + 1;
              v75 |= (unint64_t)(v78 & 0x7F) << v73;
              if (v78 < 0)
              {
                v73 += 7;
                v14 = v74++ >= 9;
                if (v14)
                {
                  v79 = 0;
                  goto LABEL_134;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v79 = 0;
          else
            v79 = v75;
LABEL_134:
          objc_msgSend(a1, "setClientRegion:", v79);
          continue;
        case 0xAu:
          v80 = 0;
          v81 = 0;
          v82 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v83 = *v3;
        v84 = *(_QWORD *)(a2 + v83);
        if (v84 == -1 || v84 >= *(_QWORD *)(a2 + *v4))
          break;
        v85 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v84);
        *(_QWORD *)(a2 + v83) = v84 + 1;
        v82 |= (unint64_t)(v85 & 0x7F) << v80;
        if ((v85 & 0x80) == 0)
          goto LABEL_136;
        v80 += 7;
        v14 = v81++ >= 9;
        if (v14)
        {
          v86 = 0;
          goto LABEL_139;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_136:
      v86 = *(_BYTE *)(a2 + *v5) ? 0 : v82;
LABEL_139:
      objc_msgSend(a1, "setBucketedDeviceMotionState:", v86);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INFERENCESchemaINFERENCEVideoSmartAppSelectionDisambiguationDependentSignalsReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0)
            goto LABEL_50;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            v27 = 0;
            goto LABEL_52;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
LABEL_52:
        objc_msgSend(a1, "setIsDisambiguatedApp:", v27 != 0);
      }
      else if ((_DWORD)v17 == 2)
      {
        v31 = 0;
        v32 = 0;
        v33 = 0;
        while (1)
        {
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
            break;
          v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
          *(_QWORD *)(a2 + v34) = v35 + 1;
          v33 |= (unint64_t)(v36 & 0x7F) << v31;
          if ((v36 & 0x80) == 0)
            goto LABEL_54;
          v31 += 7;
          v14 = v32++ >= 9;
          if (v14)
          {
            v37 = 0;
            goto LABEL_57;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_54:
        v37 = *(_BYTE *)(a2 + *v5) ? 0 : v33;
LABEL_57:
        objc_msgSend(a1, "setModelAppConfidence:", v37);
      }
      else if ((_DWORD)v17 == 3)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_45;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v24 = 0;
            goto LABEL_48;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        v24 = *(_BYTE *)(a2 + *v5) ? 0 : v20;
LABEL_48:
        objc_msgSend(a1, "setDisambiguationAppOrdinal:", v24);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t INFERENCESchemaINFERENCEVideoSmartAppSelectionDisambiguationIndependentSignalsReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  SISchemaUUID *v53;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_60;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_63;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_60:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_63:
        objc_msgSend(a1, "setDisambiguationAppsOrder:", v23);
        goto LABEL_84;
      case 2u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v31 = 0;
                goto LABEL_68;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
        else
          v31 = v27;
LABEL_68:
        objc_msgSend(a1, "setDisambiguationReasons:", v31);
        goto LABEL_84;
      case 3u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v38 = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v38 = 0;
        else
          v38 = v34;
LABEL_73:
        objc_msgSend(a1, "setModelVersion:", v38);
        goto LABEL_84;
      case 4u:
        v39 = 0;
        v40 = 0;
        v41 = 0;
        while (2)
        {
          v42 = *v3;
          v43 = *(_QWORD *)(a2 + v42);
          if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v43 + 1;
            v41 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              v14 = v40++ >= 9;
              if (v14)
              {
                v45 = 0;
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v45 = 0;
        else
          v45 = v41;
LABEL_78:
        objc_msgSend(a1, "setNumDisambiguationApps:", v45);
        goto LABEL_84;
      case 5u:
        v46 = 0;
        v47 = 0;
        v48 = 0;
        while (2)
        {
          v49 = *v3;
          v50 = *(_QWORD *)(a2 + v49);
          if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
            *(_QWORD *)(a2 + v49) = v50 + 1;
            v48 |= (unint64_t)(v51 & 0x7F) << v46;
            if (v51 < 0)
            {
              v46 += 7;
              v14 = v47++ >= 9;
              if (v14)
              {
                v52 = 0;
                goto LABEL_83;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v52 = 0;
        else
          v52 = v48;
LABEL_83:
        objc_msgSend(a1, "setTrialDeploymentId:", v52);
        goto LABEL_84;
      case 6u:
        v53 = objc_alloc_init(SISchemaUUID);
        if (PBReaderPlaceMark() && (SISchemaUUIDReadFrom(v53, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setTrialTreatmentId:", v53, 0, 0);

LABEL_84:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_84;
    }
  }
}

uint64_t SCSchemaSCCheckUndoResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_42;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            v30 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
        v30 = *(_BYTE *)(a2 + *v5) ? 0 : v26;
LABEL_45:
        objc_msgSend(a1, "setUndoType:", v30);
      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_40:
        objc_msgSend(a1, "setReason:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL INFERENCESchemaINFERENCEVideoSmartAppSelectionDisambiguationSignalsGeneratedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  INFERENCESchemaINFERENCEVideoSmartAppSelectionDisambiguationDependentSignals *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(INFERENCESchemaINFERENCEVideoSmartAppSelectionDisambiguationDependentSignals);
        if (!PBReaderPlaceMark()
          || !INFERENCESchemaINFERENCEVideoSmartAppSelectionDisambiguationDependentSignalsReadFrom(v18, a2))
        {
LABEL_36:

          return 0;
        }
        PBReaderRecallMark();
        if (v18)
          objc_msgSend(a1, "addDependentSignals:", v18, 0, 0);
        goto LABEL_31;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(INFERENCESchemaINFERENCEVideoPlayOnThirdPartyAppGroundTruthGenerated);
        if (!PBReaderPlaceMark()
          || !INFERENCESchemaINFERENCEVideoPlayOnThirdPartyAppGroundTruthGeneratedReadFrom(v18, a2))
        {
          goto LABEL_36;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPlayOnThirdPartyAppSignals:", v18, 0, 0);
LABEL_31:

        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_33:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(INFERENCESchemaINFERENCEVideoSmartAppSelectionDisambiguationIndependentSignals);
    if (!PBReaderPlaceMark()
      || (INFERENCESchemaINFERENCEVideoSmartAppSelectionDisambiguationIndependentSignalsReadFrom(v18, a2) & 1) == 0)
    {
      goto LABEL_36;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setIndependentSignal:", v18, 0, 0);
    goto LABEL_31;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t LCServiceApplicationConfigurationReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  LCServiceLoggingParameters *v17;
  uint64_t result;
  double v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (LCServiceLoggingParameters *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setBundleIdentifier:", v17);
        goto LABEL_29;
      case 2u:
        v17 = objc_alloc_init(LCServiceLoggingParameters);
        if (!PBReaderPlaceMark() || (LCServiceLoggingParametersReadFrom(v17, a2, v19) & 1) == 0)
          goto LABEL_44;
        PBReaderRecallMark();
        objc_msgSend(a1, "setApplicationParameters:", v17, 0, 0);
        goto LABEL_29;
      case 3u:
        v17 = objc_alloc_init(LCServiceCategoryConfiguration);
        v27 = 0;
        v28 = 0;
        if (PBReaderPlaceMark() && LCServiceCategoryConfigurationReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addCategories:", v17, 0, 0);
LABEL_29:

LABEL_42:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_44:

        return 0;
      case 4u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (v14)
              {
                v26 = 0;
                goto LABEL_41;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v26 = 0;
        else
          v26 = v22;
LABEL_41:
        objc_msgSend(a1, "addBlacklistedCategories:", v26, v27, v28);
        goto LABEL_42;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_42;
    }
  }
}

uint64_t LCServiceBlackListedFieldReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setFullyQualifiedPath:", v17);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t LCServiceBlacklistedFieldsReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  LCServiceBlackListedField *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(LCServiceBlackListedField);
        if (!PBReaderPlaceMark() || !LCServiceBlackListedFieldReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addBlackListedFields:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t LCServiceCategoryConfigurationReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  LCServiceBlacklistedFields *v25;
  double v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v25 = objc_alloc_init(LCServiceBlacklistedFields);
        if (!PBReaderPlaceMark() || (LCServiceBlacklistedFieldsReadFrom(v25, a2) & 1) == 0)
        {
LABEL_44:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setBlacklist:", v25, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_38;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_41;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_41:
            objc_msgSend(a1, "setEventType:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v25 = objc_alloc_init(LCServiceLoggingParameters);
        if (!PBReaderPlaceMark() || (LCServiceLoggingParametersReadFrom(v25, a2, v26) & 1) == 0)
          goto LABEL_44;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCategoryParameters:", v25, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL LCServiceConfigurationRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

uint64_t LCServiceConfigurationResponseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  LCServiceLoggingConfiguration *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(LCServiceLoggingConfiguration);
        if (!PBReaderPlaceMark() || (LCServiceLoggingConfigurationReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setConfiguration:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t LCServiceLoggingConfigurationReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  LCServiceLoggingParameters *v17;
  double v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(LCServiceLoggingParameters);
        if (!PBReaderPlaceMark() || (LCServiceLoggingParametersReadFrom(v17, a2, v18) & 1) == 0)
          goto LABEL_57;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDefaultParameters:", v17, 0, 0);
        goto LABEL_37;
      case 2u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (v14)
              {
                v26 = 0;
                goto LABEL_49;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v26 = 0;
        else
          v26 = v22;
LABEL_49:
        objc_msgSend(a1, "setConfigurationVersion:", v26, v34, v35);
        goto LABEL_55;
      case 3u:
        v17 = objc_alloc_init(LCServiceApplicationConfiguration);
        v34 = 0;
        v35 = 0;
        if (PBReaderPlaceMark() && LCServiceApplicationConfigurationReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addApplications:", v17, 0, 0);
LABEL_37:

LABEL_55:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_57:

        return 0;
      case 4u:
        PBReaderReadString();
        v17 = (LCServiceLoggingParameters *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addBlacklistedBundleIdentifiers:", v17);
        goto LABEL_37;
      case 5u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (v14)
              {
                v33 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v33 = 0;
        else
          v33 = v29;
LABEL_54:
        objc_msgSend(a1, "addDenyListedCategories:", v33, v34, v35);
        goto LABEL_55;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_55;
    }
  }
}

uint64_t LCServiceLoggingParametersReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v6))
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)(a2 + v12);
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        v16 = v10++ >= 9;
        if (v16)
        {
          v11 = 0;
          v17 = *v6;
          v18 = *(unsigned __int8 *)(a2 + v17);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
      v17 = *v6;
      v18 = *(unsigned __int8 *)(a2 + v17);
      if (*(_BYTE *)(a2 + v17))
        v11 = 0;
LABEL_14:
      if (v18 || (v11 & 7) == 4)
        break;
      switch((v11 >> 3))
      {
        case 1u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          while (1)
          {
            v23 = *v4;
            v24 = *(_QWORD *)(a2 + v23);
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v5))
              break;
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v24);
            *(_QWORD *)(a2 + v23) = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0)
              goto LABEL_66;
            v20 += 7;
            v16 = v21++ >= 9;
            if (v16)
            {
              v27 = 0;
              goto LABEL_69;
            }
          }
          *(_BYTE *)(a2 + *v6) = 1;
LABEL_66:
          if (*(_BYTE *)(a2 + *v6))
            v27 = 0;
          else
            v27 = v22;
LABEL_69:
          objc_msgSend(a1, "setQos:", v27);
          continue;
        case 2u:
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (2)
          {
            v32 = *v4;
            v33 = *(_QWORD *)(a2 + v32);
            v34 = v33 + 1;
            if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v33);
              *(_QWORD *)(a2 + v32) = v34;
              v31 |= (unint64_t)(v35 & 0x7F) << v29;
              if (v35 < 0)
              {
                v29 += 7;
                v16 = v30++ >= 9;
                if (v16)
                {
                  v36 = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v36 = 0;
          else
            v36 = v31;
LABEL_74:
          objc_msgSend(a1, "setMessageSizeQuotaInBytes:", v36);
          continue;
        case 3u:
          v37 = 0;
          v38 = 0;
          v39 = 0;
          while (2)
          {
            v40 = *v4;
            v41 = *(_QWORD *)(a2 + v40);
            v42 = v41 + 1;
            if (v41 == -1 || v42 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v41);
              *(_QWORD *)(a2 + v40) = v42;
              v39 |= (unint64_t)(v43 & 0x7F) << v37;
              if (v43 < 0)
              {
                v37 += 7;
                v16 = v38++ >= 9;
                if (v16)
                {
                  v44 = 0;
                  goto LABEL_79;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v44 = 0;
          else
            v44 = v39;
LABEL_79:
          objc_msgSend(a1, "setTotalDiskSizeQuotaInBytes:", v44);
          continue;
        case 4u:
          v45 = 0;
          v46 = 0;
          v47 = 0;
          while (2)
          {
            v48 = *v4;
            v49 = *(_QWORD *)(a2 + v48);
            v50 = v49 + 1;
            if (v49 == -1 || v50 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v49);
              *(_QWORD *)(a2 + v48) = v50;
              v47 |= (unint64_t)(v51 & 0x7F) << v45;
              if (v51 < 0)
              {
                v45 += 7;
                v16 = v46++ >= 9;
                if (v16)
                {
                  v47 = 0;
                  goto LABEL_83;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v47 = 0;
LABEL_83:
          objc_msgSend(a1, "setOptOutOfCompression:", v47 != 0);
          continue;
        case 5u:
          v52 = *v4;
          v53 = *(_QWORD *)(a2 + v52);
          if (v53 <= 0xFFFFFFFFFFFFFFFBLL && v53 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v53);
            *(_QWORD *)(a2 + v52) = v53 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setUploadSamplingRate:", a3);
          continue;
        case 6u:
          v54 = *v4;
          v55 = *(_QWORD *)(a2 + v54);
          if (v55 <= 0xFFFFFFFFFFFFFFFBLL && v55 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v55);
            *(_QWORD *)(a2 + v54) = v55 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setRealtimeSamplingRate:", a3);
          continue;
        case 7u:
          PBReaderReadData();
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setEntropy:", v56);
          goto LABEL_64;
        case 8u:
          v57 = 0;
          v58 = 0;
          v59 = 0;
          break;
        case 9u:
          PBReaderReadString();
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setUploadEndpointURL:", v56);
LABEL_64:

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v60 = *v4;
        v61 = *(_QWORD *)(a2 + v60);
        v62 = v61 + 1;
        if (v61 == -1 || v62 > *(_QWORD *)(a2 + *v5))
          break;
        v63 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v61);
        *(_QWORD *)(a2 + v60) = v62;
        v59 |= (unint64_t)(v63 & 0x7F) << v57;
        if ((v63 & 0x80) == 0)
          goto LABEL_85;
        v57 += 7;
        v16 = v58++ >= 9;
        if (v16)
        {
          v59 = 0;
          goto LABEL_87;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_85:
      if (*(_BYTE *)(a2 + *v6))
        v59 = 0;
LABEL_87:
      objc_msgSend(a1, "setOverrideIntoSamplePopulation:", v59 != 0);
    }
    while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5));
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

uint64_t LTSchemaASRSpeechTranslationEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  void *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  uint64_t v67;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setRequestID:", v17);
          goto LABEL_23;
        case 2u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setSelectedLocale:", v17);
LABEL_23:

          continue;
        case 3u:
          v19 = 0;
          v20 = 0;
          v21 = 0;
          while (2)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
              *(_QWORD *)(a2 + v22) = v23 + 1;
              v21 |= (unint64_t)(v24 & 0x7F) << v19;
              if (v24 < 0)
              {
                v19 += 7;
                v14 = v20++ >= 9;
                if (v14)
                {
                  v25 = 0;
                  goto LABEL_77;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v25 = 0;
          else
            v25 = v21;
LABEL_77:
          objc_msgSend(a1, "setTimeToFirstPartialMs:", v25);
          continue;
        case 4u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  v32 = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v32 = 0;
          else
            v32 = v28;
LABEL_82:
          objc_msgSend(a1, "setTimeToFinalResultMs:", v32);
          continue;
        case 5u:
          v33 = 0;
          v34 = 0;
          v35 = 0;
          while (2)
          {
            v36 = *v3;
            v37 = *(_QWORD *)(a2 + v36);
            if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
              *(_QWORD *)(a2 + v36) = v37 + 1;
              v35 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                v14 = v34++ >= 9;
                if (v14)
                {
                  v39 = 0;
                  goto LABEL_87;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v39 = 0;
          else
            v39 = v35;
LABEL_87:
          objc_msgSend(a1, "setLatencyFinalResultMs:", v39);
          continue;
        case 6u:
          v40 = 0;
          v41 = 0;
          v42 = 0;
          while (2)
          {
            v43 = *v3;
            v44 = *(_QWORD *)(a2 + v43);
            if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
              *(_QWORD *)(a2 + v43) = v44 + 1;
              v42 |= (unint64_t)(v45 & 0x7F) << v40;
              if (v45 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (v14)
                {
                  v46 = 0;
                  goto LABEL_92;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v46 = 0;
          else
            v46 = v42;
LABEL_92:
          objc_msgSend(a1, "setTimeToSendFirstAudioPacket:", v46);
          continue;
        case 7u:
          v47 = 0;
          v48 = 0;
          v49 = 0;
          while (2)
          {
            v50 = *v3;
            v51 = *(_QWORD *)(a2 + v50);
            if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
              *(_QWORD *)(a2 + v50) = v51 + 1;
              v49 |= (unint64_t)(v52 & 0x7F) << v47;
              if (v52 < 0)
              {
                v47 += 7;
                v14 = v48++ >= 9;
                if (v14)
                {
                  v53 = 0;
                  goto LABEL_97;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v53 = 0;
          else
            v53 = v49;
LABEL_97:
          objc_msgSend(a1, "setTimeToReceiveFirstAudioPacket:", v53);
          continue;
        case 8u:
          v54 = 0;
          v55 = 0;
          v56 = 0;
          while (2)
          {
            v57 = *v3;
            v58 = *(_QWORD *)(a2 + v57);
            if (v58 == -1 || v58 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v58);
              *(_QWORD *)(a2 + v57) = v58 + 1;
              v56 |= (unint64_t)(v59 & 0x7F) << v54;
              if (v59 < 0)
              {
                v54 += 7;
                v14 = v55++ >= 9;
                if (v14)
                {
                  v60 = 0;
                  goto LABEL_102;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v60 = 0;
          else
            v60 = v56;
LABEL_102:
          objc_msgSend(a1, "setNumAudioPacket:", v60);
          continue;
        case 9u:
          v61 = 0;
          v62 = 0;
          v63 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v64 = *v3;
        v65 = *(_QWORD *)(a2 + v64);
        if (v65 == -1 || v65 >= *(_QWORD *)(a2 + *v4))
          break;
        v66 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v65);
        *(_QWORD *)(a2 + v64) = v65 + 1;
        v63 |= (unint64_t)(v66 & 0x7F) << v61;
        if ((v66 & 0x80) == 0)
          goto LABEL_104;
        v61 += 7;
        v14 = v62++ >= 9;
        if (v14)
        {
          v67 = 0;
          goto LABEL_107;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_104:
      v67 = *(_BYTE *)(a2 + *v5) ? 0 : v63;
LABEL_107:
      objc_msgSend(a1, "setTimeToSendFinishAudio:", v67);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t LTSchemaBatchTranslationEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  LTSchemaTask *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(LTSchemaTask);
        if (!PBReaderPlaceMark() || !LTSchemaTaskReadFrom(v17, a2))
          goto LABEL_82;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTask:", v17, 0, 0);
        goto LABEL_58;
      case 2u:
        PBReaderReadString();
        v17 = (LTSchemaTask *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setSessionID:", v17);
        goto LABEL_58;
      case 3u:
        PBReaderReadString();
        v17 = (LTSchemaTask *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setRequestID:", v17);
        goto LABEL_58;
      case 4u:
        PBReaderReadString();
        v17 = (LTSchemaTask *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setSystemLocale:", v17);
        goto LABEL_58;
      case 5u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_65;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_65:
        objc_msgSend(a1, "setBatchSeqNo:", v25);
        goto LABEL_59;
      case 6u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_70;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_70:
        objc_msgSend(a1, "setNumberOfParagraphs:", v32);
        goto LABEL_59;
      case 7u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_75;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_75:
        objc_msgSend(a1, "setResponseTimeMs:", v39);
        goto LABEL_59;
      case 8u:
        v40 = 0;
        v41 = 0;
        v42 = 0;
        while (2)
        {
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              v14 = v41++ >= 9;
              if (v14)
              {
                v46 = 0;
                goto LABEL_80;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v46 = 0;
        else
          v46 = v42;
LABEL_80:
        objc_msgSend(a1, "setNumParagraphFailures:", v46);
        goto LABEL_59;
      case 9u:
        v17 = objc_alloc_init(LTSchemaError);
        if (PBReaderPlaceMark() && (LTSchemaErrorReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setError:", v17, 0, 0);
LABEL_58:

LABEL_59:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_82:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_59;
    }
  }
}

BOOL LTSchemaDisambiguationSpeechTranslationEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  void *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setSourceLocale:", v18);
        goto LABEL_24;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setRequestID:", v18);
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setSenseID:", v18);
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t LTSchemaErrorReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setDomain:", v24);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_34;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_34:
        objc_msgSend(a1, "setCode:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t LTSchemaLIDSpeechTranslationEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  LTSchemaLocaleConfidence *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (LTSchemaLocaleConfidence *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setRequestID:", v17);
        goto LABEL_29;
      case 2u:
        v17 = objc_alloc_init(LTSchemaLocaleConfidence);
        if (!PBReaderPlaceMark() || (LTSchemaLocaleConfidenceReadFrom(v17, a2) & 1) == 0)
          goto LABEL_56;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSelectedLocale:", v17, 0, 0);
        goto LABEL_29;
      case 3u:
        v17 = objc_alloc_init(LTSchemaLocaleConfidence);
        if (PBReaderPlaceMark() && (LTSchemaLocaleConfidenceReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setAlternateLocale:", v17, 0, 0);
LABEL_29:

LABEL_54:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_56:

        return 0;
      case 4u:
        PBReaderReadString();
        v17 = (LTSchemaLocaleConfidence *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setUserSelectedLocale:", v17);
        goto LABEL_29;
      case 5u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_48;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_48:
        objc_msgSend(a1, "setResponseTimeMs:", v25);
        goto LABEL_54;
      case 6u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_53;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_53:
        objc_msgSend(a1, "setSpeechElapsedTime:", v32);
        goto LABEL_54;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_54;
    }
  }
}

uint64_t LTSchemaLocaleConfidenceReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setLocale:", v24);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_34;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_34:
        objc_msgSend(a1, "setConfidence:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL LTSchemaMTClientEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  LTSchemaSafariFeedbackEvent *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 'e':
        v17 = objc_alloc_init(LTSchemaSafariFeedbackEvent);
        if (!PBReaderPlaceMark() || !LTSchemaSafariFeedbackEventReadFrom(v17, a2))
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSafariFeedbackEvent:", v17, 0, 0);
        goto LABEL_45;
      case 'f':
        v17 = objc_alloc_init(LTSchemaBatchTranslationEvent);
        if (!PBReaderPlaceMark() || (LTSchemaBatchTranslationEventReadFrom(v17, a2) & 1) == 0)
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setBatchTranslationEvent:", v17, 0, 0);
        goto LABEL_45;
      case 'g':
        v17 = objc_alloc_init(LTSchemaSpeechTranslationEvent);
        if (!PBReaderPlaceMark() || (LTSchemaSpeechTranslationEventReadFrom(v17, a2) & 1) == 0)
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSpeechTranslationEvent:", v17, 0, 0);
        goto LABEL_45;
      case 'h':
        v17 = objc_alloc_init(LTSchemaLIDSpeechTranslationEvent);
        if (!PBReaderPlaceMark() || (LTSchemaLIDSpeechTranslationEventReadFrom(v17, a2) & 1) == 0)
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLidSpeechTranslationEvent:", v17, 0, 0);
        goto LABEL_45;
      case 'i':
        v17 = objc_alloc_init(LTSchemaDisambiguationSpeechTranslationEvent);
        if (!PBReaderPlaceMark() || !LTSchemaDisambiguationSpeechTranslationEventReadFrom(v17, a2))
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDisambiguationSpeechTranslationEvent:", v17, 0, 0);
        goto LABEL_45;
      case 'j':
        v17 = objc_alloc_init(LTSchemaASRSpeechTranslationEvent);
        if (!PBReaderPlaceMark() || (LTSchemaASRSpeechTranslationEventReadFrom(v17, a2) & 1) == 0)
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAsrSpeechTranslationEvent:", v17, 0, 0);
        goto LABEL_45;
      case 'k':
        v17 = objc_alloc_init(LTSchemaMTSpeechTranslationEvent);
        if (!PBReaderPlaceMark() || (LTSchemaMTSpeechTranslationEventReadFrom(v17, a2) & 1) == 0)
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMtSpeechTranslationEvent:", v17, 0, 0);
        goto LABEL_45;
      case 'l':
        v17 = objc_alloc_init(LTSchemaTTSSpeechTranslationEvent);
        if (PBReaderPlaceMark() && (LTSchemaTTSSpeechTranslationEventReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setTtsspeechTranslationEvent:", v17, 0, 0);
LABEL_45:

LABEL_46:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_49:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_46;
    }
  }
}

uint64_t LTSchemaMTSpeechTranslationEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setRequestID:", v25);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 3)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_34;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_37;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_37:
            objc_msgSend(a1, "setResponseTimeMs:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setSelectedLocale:", v25);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL LTSchemaSafariFeedbackEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  LTSchemaTask *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = objc_alloc_init(LTSchemaTask);
          if (PBReaderPlaceMark() && LTSchemaTaskReadFrom(v17, a2))
          {
            PBReaderRecallMark();
            objc_msgSend(a1, "setTask:", v17, 0, 0);
            goto LABEL_27;
          }

          return 0;
        case 2u:
          PBReaderReadString();
          v17 = (LTSchemaTask *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setSessionID:", v17);
          goto LABEL_27;
        case 3u:
          PBReaderReadString();
          v17 = (LTSchemaTask *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setUserFeedbackContentSource:", v17);
          goto LABEL_27;
        case 4u:
          PBReaderReadString();
          v17 = (LTSchemaTask *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setUserFeedbackContentTarget:", v17);
LABEL_27:

          goto LABEL_28;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_28:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t LTSchemaSpeechTranslationEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  LTSchemaTask *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(LTSchemaTask);
        if (!PBReaderPlaceMark() || !LTSchemaTaskReadFrom(v17, a2))
          goto LABEL_128;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTask:", v17, 0, 0);
        goto LABEL_51;
      case 2u:
        PBReaderReadString();
        v17 = (LTSchemaTask *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setSessionID:", v17);
        goto LABEL_51;
      case 3u:
        PBReaderReadString();
        v17 = (LTSchemaTask *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setRequestID:", v17);
        goto LABEL_51;
      case 4u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_92;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_92:
        objc_msgSend(a1, "setInRestrictedMode:", v21 != 0);
        goto LABEL_52;
      case 5u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v27 = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
LABEL_96:
        objc_msgSend(a1, "setIsAutomaticLID:", v27 != 0);
        goto LABEL_52;
      case 6u:
        v17 = objc_alloc_init(LTSchemaError);
        if (PBReaderPlaceMark() && (LTSchemaErrorReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setError:", v17, 0, 0);
LABEL_51:

LABEL_52:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_128:

        return 0;
      case 7u:
        v31 = 0;
        v32 = 0;
        v33 = 0;
        while (2)
        {
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (v14)
              {
                v37 = 0;
                goto LABEL_101;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v37 = 0;
        else
          v37 = v33;
LABEL_101:
        objc_msgSend(a1, "setUiMode:", v37);
        goto LABEL_52;
      case 8u:
        PBReaderReadString();
        v17 = (LTSchemaTask *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setMobileAssetConfigVersion:", v17);
        goto LABEL_51;
      case 9u:
        v38 = 0;
        v39 = 0;
        v40 = 0;
        while (2)
        {
          v41 = *v3;
          v42 = *(_QWORD *)(a2 + v41);
          if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v42 + 1;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              v14 = v39++ >= 9;
              if (v14)
              {
                v44 = 0;
                goto LABEL_106;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v44 = 0;
        else
          v44 = v40;
LABEL_106:
        objc_msgSend(a1, "setTimeToFirstPartialDisplayed:", v44);
        goto LABEL_52;
      case 0xAu:
        v45 = 0;
        v46 = 0;
        v47 = 0;
        while (2)
        {
          v48 = *v3;
          v49 = *(_QWORD *)(a2 + v48);
          if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v49);
            *(_QWORD *)(a2 + v48) = v49 + 1;
            v47 |= (unint64_t)(v50 & 0x7F) << v45;
            if (v50 < 0)
            {
              v45 += 7;
              v14 = v46++ >= 9;
              if (v14)
              {
                v51 = 0;
                goto LABEL_111;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v51 = 0;
        else
          v51 = v47;
LABEL_111:
        objc_msgSend(a1, "setTimeToRecordingDialogDismissed:", v51);
        goto LABEL_52;
      case 0xBu:
        v52 = 0;
        v53 = 0;
        v54 = 0;
        while (2)
        {
          v55 = *v3;
          v56 = *(_QWORD *)(a2 + v55);
          if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
            *(_QWORD *)(a2 + v55) = v56 + 1;
            v54 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              v14 = v53++ >= 9;
              if (v14)
              {
                v58 = 0;
                goto LABEL_116;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v58 = 0;
        else
          v58 = v54;
LABEL_116:
        objc_msgSend(a1, "setTimeToShowTranslationCard:", v58);
        goto LABEL_52;
      case 0xCu:
        v59 = 0;
        v60 = 0;
        v61 = 0;
        while (2)
        {
          v62 = *v3;
          v63 = *(_QWORD *)(a2 + v62);
          if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v63);
            *(_QWORD *)(a2 + v62) = v63 + 1;
            v61 |= (unint64_t)(v64 & 0x7F) << v59;
            if (v64 < 0)
            {
              v59 += 7;
              v14 = v60++ >= 9;
              if (v14)
              {
                v65 = 0;
                goto LABEL_121;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v65 = 0;
        else
          v65 = v61;
LABEL_121:
        objc_msgSend(a1, "setTimeToCancel:", v65);
        goto LABEL_52;
      case 0xDu:
        v66 = 0;
        v67 = 0;
        v68 = 0;
        while (2)
        {
          v69 = *v3;
          v70 = *(_QWORD *)(a2 + v69);
          if (v70 == -1 || v70 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v71 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v70);
            *(_QWORD *)(a2 + v69) = v70 + 1;
            v68 |= (unint64_t)(v71 & 0x7F) << v66;
            if (v71 < 0)
            {
              v66 += 7;
              v14 = v67++ >= 9;
              if (v14)
              {
                v72 = 0;
                goto LABEL_126;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v72 = 0;
        else
          v72 = v68;
LABEL_126:
        objc_msgSend(a1, "setStatus:", v72);
        goto LABEL_52;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_52;
    }
  }
}

uint64_t LTSchemaTTSSpeechTranslationEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  void *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setRequestID:", v17);
          goto LABEL_23;
        case 2u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setSelectedLocale:", v17);
LABEL_23:

          continue;
        case 3u:
          v19 = 0;
          v20 = 0;
          v21 = 0;
          while (2)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
              *(_QWORD *)(a2 + v22) = v23 + 1;
              v21 |= (unint64_t)(v24 & 0x7F) << v19;
              if (v24 < 0)
              {
                v19 += 7;
                v14 = v20++ >= 9;
                if (v14)
                {
                  v25 = 0;
                  goto LABEL_42;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v25 = 0;
          else
            v25 = v21;
LABEL_42:
          objc_msgSend(a1, "setResponseTimeMs:", v25);
          continue;
        case 4u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          break;
        v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
        *(_QWORD *)(a2 + v29) = v30 + 1;
        v28 |= (unint64_t)(v31 & 0x7F) << v26;
        if ((v31 & 0x80) == 0)
          goto LABEL_44;
        v26 += 7;
        v14 = v27++ >= 9;
        if (v14)
        {
          v32 = 0;
          goto LABEL_47;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
      v32 = *(_BYTE *)(a2 + *v5) ? 0 : v28;
LABEL_47:
      objc_msgSend(a1, "setPlaybackBeginTimeMs:", v32);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL LTSchemaTaskReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setTranslationTask:", v17);
          goto LABEL_28;
        case 2u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setSourceLanguage:", v17);
          goto LABEL_28;
        case 3u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setTargetLanguage:", v17);
          goto LABEL_28;
        case 4u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setDeviceOS:", v17);
          goto LABEL_28;
        case 5u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setDeviceType:", v17);
          goto LABEL_28;
        case 6u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setOsVersion:", v17);
          goto LABEL_28;
        case 7u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setBundleIdentifier:", v17);
LABEL_28:

          goto LABEL_29;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_29:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaFirstPassChannelSelectionScoreReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v17;
  int v18;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v6))
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)(a2 + v12);
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        if (v10++ >= 9)
        {
          v11 = 0;
          v17 = *v6;
          v18 = *(unsigned __int8 *)(a2 + v17);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
      v17 = *v6;
      v18 = *(unsigned __int8 *)(a2 + v17);
      if (*(_BYTE *)(a2 + v17))
        v11 = 0;
LABEL_14:
      if (v18 || (v11 & 7) == 4)
        break;
      if ((v11 >> 3) == 2)
      {
        v21 = *v4;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setFirstPassScore:", a3);
      }
      else if ((v11 >> 3) == 1)
      {
        PBReaderReadString();
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setChannelString:", v20);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5));
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

uint64_t MHSchemaMHASRAudioConfigureStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0)
            goto LABEL_50;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            v31 = 0;
            goto LABEL_53;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
        v31 = *(_BYTE *)(a2 + *v5) ? 0 : v27;
LABEL_53:
        objc_msgSend(a1, "setAudioCodec:", v31);
      }
      else if ((_DWORD)v17 == 2)
      {
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (1)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            break;
          v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
          *(_QWORD *)(a2 + v35) = v36 + 1;
          v34 |= (unint64_t)(v37 & 0x7F) << v32;
          if ((v37 & 0x80) == 0)
            goto LABEL_55;
          v32 += 7;
          v14 = v33++ >= 9;
          if (v14)
          {
            v38 = 0;
            goto LABEL_58;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_55:
        v38 = *(_BYTE *)(a2 + *v5) ? 0 : v34;
LABEL_58:
        objc_msgSend(a1, "setAudioSkippedTimeInNs:", v38);
      }
      else if ((_DWORD)v17 == 3)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_45;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v24 = 0;
            goto LABEL_48;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        v24 = *(_BYTE *)(a2 + *v5) ? 0 : v20;
LABEL_48:
        objc_msgSend(a1, "setAudioSkippedNumSamples:", v24);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MHSchemaMHAcousticFalseTriggerMitigationEvaluationContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  MHSchemaMHAcousticFalseTriggerMitigationFailed *v18;
  double v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(MHSchemaMHAcousticFalseTriggerMitigationFailed);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHAcousticFalseTriggerMitigationFailedReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setFailed:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(MHSchemaMHAcousticFalseTriggerMitigationStarted);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHAcousticFalseTriggerMitigationStartedReadFrom(v18, a2) & 1) == 0)
        {
          goto LABEL_35;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(MHSchemaMHAcousticFalseTriggerMitigationScoreGenerated);
    if (!PBReaderPlaceMark()
      || (MHSchemaMHAcousticFalseTriggerMitigationScoreGeneratedReadFrom(v18, a2, v19) & 1) == 0)
    {
      goto LABEL_35;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setScoreGenerated:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAcousticFalseTriggerMitigationFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setErrorCode:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAcousticFalseTriggerMitigationScoreGeneratedReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  unint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t result;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v6))
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)(a2 + v12);
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        v16 = v10++ >= 9;
        if (v16)
        {
          v11 = 0;
          v17 = *v6;
          v18 = *(unsigned __int8 *)(a2 + v17);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
      v17 = *v6;
      v18 = *(unsigned __int8 *)(a2 + v17);
      if (*(_BYTE *)(a2 + v17))
        v11 = 0;
LABEL_14:
      if (v18 || (v11 & 7) == 4)
        break;
      v20 = v11 >> 3;
      if ((v11 >> 3) == 1)
      {
        v29 = *v4;
        v30 = *(_QWORD *)(a2 + v29);
        if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v30);
          *(_QWORD *)(a2 + v29) = v30 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setScore:", a3);
      }
      else if ((_DWORD)v20 == 3)
      {
        v31 = *v4;
        v32 = *(_QWORD *)(a2 + v31);
        if (v32 <= 0xFFFFFFFFFFFFFFFBLL && v32 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v32);
          *(_QWORD *)(a2 + v31) = v32 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setThreshold:", a3);
      }
      else if ((_DWORD)v20 == 2)
      {
        v21 = 0;
        v22 = 0;
        v23 = 0;
        while (1)
        {
          v24 = *v4;
          v25 = *(_QWORD *)(a2 + v24);
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v5))
            break;
          v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v25);
          *(_QWORD *)(a2 + v24) = v26;
          v23 |= (unint64_t)(v27 & 0x7F) << v21;
          if ((v27 & 0x80) == 0)
            goto LABEL_37;
          v21 += 7;
          v16 = v22++ >= 9;
          if (v16)
          {
            v28 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v6) = 1;
LABEL_37:
        v28 = *(_BYTE *)(a2 + *v6) ? 0 : v23;
LABEL_40:
        objc_msgSend(a1, "setAudioDurationInNs:", v28);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5));
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

uint64_t MHSchemaMHAcousticFalseTriggerMitigationStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setModelVersion:", v24);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_34;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_34:
        objc_msgSend(a1, "setMitigationType:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAdMatchingEndedReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v6))
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)(a2 + v12);
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        v16 = v10++ >= 9;
        if (v16)
        {
          v11 = 0;
          v17 = *v6;
          v18 = *(unsigned __int8 *)(a2 + v17);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
      v17 = *v6;
      v18 = *(unsigned __int8 *)(a2 + v17);
      if (*(_BYTE *)(a2 + v17))
        v11 = 0;
LABEL_14:
      if (v18 || (v11 & 7) == 4)
        break;
      switch((v11 >> 3))
      {
        case 1u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          while (1)
          {
            v23 = *v4;
            v24 = *(_QWORD *)(a2 + v23);
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v5))
              break;
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v24);
            *(_QWORD *)(a2 + v23) = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0)
              goto LABEL_40;
            v20 += 7;
            v16 = v21++ >= 9;
            if (v16)
            {
              v27 = 0;
              goto LABEL_43;
            }
          }
          *(_BYTE *)(a2 + *v6) = 1;
LABEL_40:
          if (*(_BYTE *)(a2 + *v6))
            v27 = 0;
          else
            v27 = v22;
LABEL_43:
          objc_msgSend(a1, "setAdBlockerDismissalType:", v27);
          continue;
        case 2u:
          PBReaderReadString();
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setAdName:", v29);

          continue;
        case 3u:
          v30 = *v4;
          v31 = *(_QWORD *)(a2 + v30);
          if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setShazamScore:", a3);
          continue;
        case 4u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v35 = *v4;
        v36 = *(_QWORD *)(a2 + v35);
        v37 = v36 + 1;
        if (v36 == -1 || v37 > *(_QWORD *)(a2 + *v5))
          break;
        v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v36);
        *(_QWORD *)(a2 + v35) = v37;
        v34 |= (unint64_t)(v38 & 0x7F) << v32;
        if ((v38 & 0x80) == 0)
          goto LABEL_45;
        v32 += 7;
        v16 = v33++ >= 9;
        if (v16)
        {
          v39 = 0;
          goto LABEL_48;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_45:
      v39 = *(_BYTE *)(a2 + *v6) ? 0 : v34;
LABEL_48:
      objc_msgSend(a1, "setAdBlockerSource:", v39);
    }
    while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5));
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

uint64_t MHSchemaMHAdMatchingFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setErrorCode:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAdMatchingStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setModelVersion:", v17);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MHSchemaMHApplicationPlaybackAttemptedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAppBundleName:", v17);
LABEL_22:

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setAppBundleVersion:", v17);
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioBluetoothInfoReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_42;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            v30 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
        v30 = *(_BYTE *)(a2 + *v5) ? 0 : v26;
LABEL_45:
        objc_msgSend(a1, "setState:", v30);
      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_40:
        objc_msgSend(a1, "setBluetoothAudioDeviceCategory:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MHSchemaMHAssistantDaemonAudioConfigureContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MHSchemaMHAssistantDaemonAudioConfigureStarted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioConfigureStarted);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHAssistantDaemonAudioConfigureStartedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioConfigureEnded);
    if (!PBReaderPlaceMark() || (MHSchemaMHAssistantDaemonAudioConfigureEndedReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioConfigureEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioConfigureStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioFanInfoReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0)
            goto LABEL_50;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            v31 = 0;
            goto LABEL_53;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
        v31 = *(_BYTE *)(a2 + *v5) ? 0 : v27;
LABEL_53:
        objc_msgSend(a1, "setFanId:", v31);
      }
      else if ((_DWORD)v17 == 2)
      {
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (1)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            break;
          v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
          *(_QWORD *)(a2 + v35) = v36 + 1;
          v34 |= (unint64_t)(v37 & 0x7F) << v32;
          if ((v37 & 0x80) == 0)
            goto LABEL_55;
          v32 += 7;
          v14 = v33++ >= 9;
          if (v14)
          {
            v38 = 0;
            goto LABEL_58;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_55:
        v38 = *(_BYTE *)(a2 + *v5) ? 0 : v34;
LABEL_58:
        objc_msgSend(a1, "setCurrentSpeed:", v38);
      }
      else if ((_DWORD)v17 == 3)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_45;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v24 = 0;
            goto LABEL_48;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        v24 = *(_BYTE *)(a2 + *v5) ? 0 : v20;
LABEL_48:
        objc_msgSend(a1, "setTargetSpeed:", v24);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MHSchemaMHAssistantDaemonAudioFetchRouteContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MHSchemaMHAssistantDaemonAudioFetchRouteStarted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioFetchRouteStarted);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHAssistantDaemonAudioFetchRouteStartedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioFetchRouteEnded);
    if (!PBReaderPlaceMark() || (MHSchemaMHAssistantDaemonAudioFetchRouteEndedReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioFetchRouteEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioFetchRouteStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MHSchemaMHAssistantDaemonAudioInitContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MHSchemaMHAssistantDaemonAudioInitStarted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioInitStarted);
        if (!PBReaderPlaceMark() || (MHSchemaMHAssistantDaemonAudioInitStartedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioInitEnded);
    if (!PBReaderPlaceMark() || (MHSchemaMHAssistantDaemonAudioInitEndedReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioInitEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioInitStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioLateBufferDetectedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setBufferReceiptTimeOffsetInNs:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MHSchemaMHAssistantDaemonAudioPrepareContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MHSchemaMHAssistantDaemonAudioPrepareStarted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioPrepareStarted);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHAssistantDaemonAudioPrepareStartedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioPrepareEnded);
    if (!PBReaderPlaceMark() || (MHSchemaMHAssistantDaemonAudioPrepareEndedReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioPrepareEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioPrepareStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MHSchemaMHAssistantDaemonAudioPrewarmContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MHSchemaMHAssistantDaemonAudioPrewarmStarted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioPrewarmStarted);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHAssistantDaemonAudioPrewarmStartedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioPrewarmEnded);
    if (!PBReaderPlaceMark() || (MHSchemaMHAssistantDaemonAudioPrewarmEndedReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioPrewarmEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioPrewarmStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioRecordinFirstBufferReceiptReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setFirstBufferReceiptTimeOffsetInNs:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MHSchemaMHAssistantDaemonAudioRecordingContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MHSchemaMHAssistantDaemonAudioRecordingStarted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioRecordingStarted);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHAssistantDaemonAudioRecordingStartedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioRecordingEnded);
    if (!PBReaderPlaceMark() || (MHSchemaMHAssistantDaemonAudioRecordingEndedReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioRecordingEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MHSchemaMHAssistantDaemonAudioRecordingFirstBufferContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MHSchemaMHAssistantDaemonAudioRecordingFirstBufferStart *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioRecordingFirstBufferStart);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHAssistantDaemonAudioRecordingFirstBufferStartReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioRecordinFirstBufferReceipt);
    if (!PBReaderPlaceMark()
      || (MHSchemaMHAssistantDaemonAudioRecordinFirstBufferReceiptReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioRecordingFirstBufferStartReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAudioInterfaceProductName:", v25);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_34;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_37;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_37:
            objc_msgSend(a1, "setFirstBufferStartTimeOffsetInNs:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAudioInterfaceVendorId:", v25);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SCSchemaSCUndoSetReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SCSchemaSCSetUndoArgs *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SCSchemaSCSetUndoArgs);
        if (!PBReaderPlaceMark() || (SCSchemaSCSetUndoArgsReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSetUndoArgs:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MHSchemaMHAssistantDaemonAudioRecordingInterruptionContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MHSchemaMHAssistantDaemonAudioRecordingInterruptionStarted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioRecordingInterruptionStarted);
        if (!PBReaderPlaceMark()
          || !MHSchemaMHAssistantDaemonAudioRecordingInterruptionStartedReadFrom(v17, a2))
        {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioRecordingInterruptionEnded);
    if (!PBReaderPlaceMark()
      || (MHSchemaMHAssistantDaemonAudioRecordingInterruptionEndedReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioRecordingInterruptionEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MHSchemaMHAssistantDaemonAudioRecordingInterruptionStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  SISchemaUUID *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setAvAudioSessionInterruptorName:", v18);
        goto LABEL_26;
      }
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v18, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v18, 0, 0);
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setAvAudioSessionInterruptionType:", v18);
LABEL_26:

    goto LABEL_28;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioRecordingInterruptionStartedTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = objc_alloc_init(SISchemaUUID);
          if (PBReaderPlaceMark() && (SISchemaUUIDReadFrom(v17, a2) & 1) != 0)
          {
            PBReaderRecallMark();
            objc_msgSend(a1, "setLinkId:", v17, 0, 0);
            goto LABEL_26;
          }

          return 0;
        case 2u:
          PBReaderReadString();
          v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
          if (v17)
            objc_msgSend(a1, "addActiveSessionDisplayIds:", v17);
LABEL_26:

          continue;
        case 3u:
          v19 = 0;
          v20 = 0;
          v21 = 0;
          while (2)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
              *(_QWORD *)(a2 + v22) = v23 + 1;
              v21 |= (unint64_t)(v24 & 0x7F) << v19;
              if (v24 < 0)
              {
                v19 += 7;
                v14 = v20++ >= 9;
                if (v14)
                {
                  v25 = 0;
                  goto LABEL_45;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v25 = 0;
          else
            v25 = v21;
LABEL_45:
          objc_msgSend(a1, "setAudioSessionCategory:", v25);
          continue;
        case 4u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          break;
        v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
        *(_QWORD *)(a2 + v29) = v30 + 1;
        v28 |= (unint64_t)(v31 & 0x7F) << v26;
        if ((v31 & 0x80) == 0)
          goto LABEL_47;
        v26 += 7;
        v14 = v27++ >= 9;
        if (v14)
        {
          v32 = 0;
          goto LABEL_50;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_47:
      v32 = *(_BYTE *)(a2 + *v5) ? 0 : v28;
LABEL_50:
      objc_msgSend(a1, "setAudioSessionMode:", v32);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MHSchemaMHAssistantDaemonAudioRecordingLastBufferContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MHSchemaMHAssistantDaemonAudioRecordingLastBufferStart *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioRecordingLastBufferStart);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHAssistantDaemonAudioRecordingLastBufferStartReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioRecordingLastBufferReceipt);
    if (!PBReaderPlaceMark()
      || (MHSchemaMHAssistantDaemonAudioRecordingLastBufferReceiptReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioRecordingLastBufferReceiptReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setLastAudioRecordBufferReceiptTimeOffsetInNs:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioRecordingLastBufferStartReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setLastAudioRecordBufferStartTimeOffsetInNs:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioRecordingMissedBufferDetectedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioRecordingStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  void *v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_39;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v23 = 0;
              goto LABEL_42;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
          else
            v23 = v19;
LABEL_42:
          objc_msgSend(a1, "setAudioInputRoute:", v23);
          continue;
        case 2u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          break;
        case 3u:
          PBReaderReadString();
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setAudioInterfaceVendorId:", v32);
          goto LABEL_37;
        case 4u:
          PBReaderReadString();
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setAudioInterfaceProductId:", v32);
LABEL_37:

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v28 = *v3;
        v29 = *(_QWORD *)(a2 + v28);
        if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          break;
        v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
        *(_QWORD *)(a2 + v28) = v29 + 1;
        v27 |= (unint64_t)(v30 & 0x7F) << v25;
        if ((v30 & 0x80) == 0)
          goto LABEL_44;
        v25 += 7;
        v14 = v26++ >= 9;
        if (v14)
        {
          v31 = 0;
          goto LABEL_47;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
      v31 = *(_BYTE *)(a2 + *v5) ? 0 : v27;
LABEL_47:
      objc_msgSend(a1, "setSource:", v31);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MHSchemaMHAssistantDaemonAudioSessionSetActiveContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MHSchemaMHAssistantDaemonAudioSessionSetActiveStarted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioSessionSetActiveStarted);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHAssistantDaemonAudioSessionSetActiveStartedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioSessionSetActiveEnded);
    if (!PBReaderPlaceMark()
      || (MHSchemaMHAssistantDaemonAudioSessionSetActiveEndedReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioSessionSetActiveEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioSessionSetActiveStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MHSchemaMHAssistantDaemonAudioSessionSetInactiveContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MHSchemaMHAssistantDaemonAudioSessionSetInactiveStarted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioSessionSetInactiveStarted);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHAssistantDaemonAudioSessionSetInactiveStartedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioSessionSetInactiveEnded);
    if (!PBReaderPlaceMark()
      || (MHSchemaMHAssistantDaemonAudioSessionSetInactiveEndedReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioSessionSetInactiveEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioSessionSetInactiveStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MHSchemaMHAssistantDaemonAudioStartRecordingContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MHSchemaMHAssistantDaemonAudioStartRecordingStarted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioStartRecordingStarted);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHAssistantDaemonAudioStartRecordingStartedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioStartRecordingEnded);
    if (!PBReaderPlaceMark() || !MHSchemaMHAssistantDaemonAudioStartRecordingEndedReadFrom(v17, a2))
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MHSchemaMHAssistantDaemonAudioStartRecordingEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MHSchemaMHAssistantDaemonAudioFanInfo *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (MHSchemaMHAssistantDaemonAudioFanInfo *)objc_claimAutoreleasedReturnValue();
        if (v17)
          objc_msgSend(a1, "addActiveSessionDisplayIds:", v17);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioFanInfo);
    if (!PBReaderPlaceMark() || !MHSchemaMHAssistantDaemonAudioFanInfoReadFrom(v17, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addFanInfo:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioStartRecordingStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MHSchemaMHAssistantDaemonAudioStopRecordingContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MHSchemaMHAssistantDaemonAudioStopRecordingeStarted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioStopRecordingeStarted);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHAssistantDaemonAudioStopRecordingeStartedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioStopRecordingEnded);
    if (!PBReaderPlaceMark()
      || (MHSchemaMHAssistantDaemonAudioStopRecordingEndedReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioStopRecordingEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MHSchemaMHAssistantDaemonAudioFanInfo *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioFanInfo);
        if (!PBReaderPlaceMark() || !MHSchemaMHAssistantDaemonAudioFanInfoReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addFanInfo:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioStopRecordingeStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setStopReason:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MHSchemaMHAssistantDaemonAudioTwoShotTransitionContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MHSchemaMHAssistantDaemonAudioTwoShotTransitionStarted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioTwoShotTransitionStarted);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHAssistantDaemonAudioTwoShotTransitionStartedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_31;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioTwoShotTransitionEnded);
    if (!PBReaderPlaceMark()
      || (MHSchemaMHAssistantDaemonAudioTwoShotTransitionEndedReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioTwoShotTransitionEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        while (1)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            break;
          v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0)
            goto LABEL_41;
          v23 += 7;
          v14 = v24++ >= 9;
          if (v14)
          {
            v25 = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
LABEL_43:
        objc_msgSend(a1, "setSuppresedAlert:", v25 != 0);
      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_39:
        objc_msgSend(a1, "setTimedOut:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHAssistantDaemonAudioTwoShotTransitionStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setPromptType:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHCarplayLanguageMismatchReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setCarHeadUnitSelectedLocale:", v24);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_34;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_34:
        objc_msgSend(a1, "setCarplayTriggerMode:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MHSchemaMHClientEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  MHSchemaMHAcousticFalseTriggerMitigationEvaluationContext *v18;
  double v19;
  double v20;
  double v21;
  double v22;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    v17 = v10 >> 3;
    switch((v10 >> 3))
    {
      case 0x64u:
        v18 = objc_alloc_init(MHSchemaMHAcousticFalseTriggerMitigationEvaluationContext);
        if (!PBReaderPlaceMark()
          || !MHSchemaMHAcousticFalseTriggerMitigationEvaluationContextReadFrom(v18, a2))
        {
          goto LABEL_214;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAcousticFalseTriggerMitigationEvaluationContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x65u:
        v18 = objc_alloc_init(MHSchemaMHLatticeFalseTriggerMitigationEvaluationContext);
        if (!PBReaderPlaceMark()
          || !MHSchemaMHLatticeFalseTriggerMitigationEvaluationContextReadFrom(v18, a2))
        {
          goto LABEL_214;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLatticeFalseTriggerMitigationEvaluationContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x66u:
        v18 = objc_alloc_init(MHSchemaMHUnintendedResponseSuppressionEvaluationContext);
        if (!PBReaderPlaceMark()
          || !MHSchemaMHUnintendedResponseSuppressionEvaluationContextReadFrom(v18, a2))
        {
          goto LABEL_214;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setUnintendedResponseSuppressionExecutionContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x67u:
        v18 = objc_alloc_init(MHSchemaMHCoreSpeechPreprocessorCompleted);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHCoreSpeechPreprocessorCompletedReadFrom(v18, a2, v19) & 1) == 0)
        {
          goto LABEL_214;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCoreSpeechPreprocessorCompleted:", v18, 0, 0);
        goto LABEL_207;
      case 0x68u:
        v18 = objc_alloc_init(MHSchemaMHASRAudioConfigureStarted);
        if (!PBReaderPlaceMark() || (MHSchemaMHASRAudioConfigureStartedReadFrom(v18, a2) & 1) == 0)
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAsrAudioConfigureStarted:", v18, 0, 0);
        goto LABEL_207;
      case 0x69u:
        v18 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioInitContext);
        if (!PBReaderPlaceMark() || !MHSchemaMHAssistantDaemonAudioInitContextReadFrom(v18, a2))
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAssistantDaemonAudioInitContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x6Au:
        v18 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioConfigureContext);
        if (!PBReaderPlaceMark() || !MHSchemaMHAssistantDaemonAudioConfigureContextReadFrom(v18, a2))
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAssistantDaemonAudioConfigureContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x6Bu:
        v18 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioPrepareContext);
        if (!PBReaderPlaceMark() || !MHSchemaMHAssistantDaemonAudioPrepareContextReadFrom(v18, a2))
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAssistantDaemonAudioPrepareContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x6Cu:
        v18 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioPrewarmContext);
        if (!PBReaderPlaceMark() || !MHSchemaMHAssistantDaemonAudioPrewarmContextReadFrom(v18, a2))
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAssistantDaemonAudioPrewarmContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x6Du:
        v18 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioStartRecordingContext);
        if (!PBReaderPlaceMark() || !MHSchemaMHAssistantDaemonAudioStartRecordingContextReadFrom(v18, a2))
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAssistantDaemonAudioStartRecordingContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x6Eu:
        v18 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioStopRecordingContext);
        if (!PBReaderPlaceMark() || !MHSchemaMHAssistantDaemonAudioStopRecordingContextReadFrom(v18, a2))
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAssistantDaemonAudioStopRecordingContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x6Fu:
        v18 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioSessionSetActiveContext);
        if (!PBReaderPlaceMark()
          || !MHSchemaMHAssistantDaemonAudioSessionSetActiveContextReadFrom(v18, a2))
        {
          goto LABEL_214;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAssistantDaemonAudioSessionSetActiveContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x70u:
        v18 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioSessionSetInactiveContext);
        if (!PBReaderPlaceMark()
          || !MHSchemaMHAssistantDaemonAudioSessionSetInactiveContextReadFrom(v18, a2))
        {
          goto LABEL_214;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAssistantDaemonAudioSessionSetInactiveContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x71u:
        v18 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioFetchRouteContext);
        if (!PBReaderPlaceMark() || !MHSchemaMHAssistantDaemonAudioFetchRouteContextReadFrom(v18, a2))
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAssistantDaemonAudioFetchRouteContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x72u:
        v18 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioRecordingContext);
        if (!PBReaderPlaceMark() || !MHSchemaMHAssistantDaemonAudioRecordingContextReadFrom(v18, a2))
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAssistantDaemonAudioRecordingContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x73u:
        v18 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioRecordingMissedBufferDetected);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHAssistantDaemonAudioRecordingMissedBufferDetectedReadFrom(v18, a2) & 1) == 0)
        {
          goto LABEL_214;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAssistantDaemonAudioRecordingMissedBufferDetected:", v18, 0, 0);
        goto LABEL_207;
      case 0x74u:
        v18 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioLateBufferDetected);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHAssistantDaemonAudioLateBufferDetectedReadFrom(v18, a2) & 1) == 0)
        {
          goto LABEL_214;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAssistantDaemonAudioLateBufferDetected:", v18, 0, 0);
        goto LABEL_207;
      case 0x75u:
        v18 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioRecordingFirstBufferContext);
        if (!PBReaderPlaceMark()
          || !MHSchemaMHAssistantDaemonAudioRecordingFirstBufferContextReadFrom(v18, a2))
        {
          goto LABEL_214;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAssistantDaemonAudioRecordingFirstBufferContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x76u:
        v18 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioRecordingLastBufferContext);
        if (!PBReaderPlaceMark()
          || !MHSchemaMHAssistantDaemonAudioRecordingLastBufferContextReadFrom(v18, a2))
        {
          goto LABEL_214;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAssistantDaemonAudioRecordingLastBufferContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x77u:
        v18 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioRecordingInterruptionContext);
        if (!PBReaderPlaceMark()
          || !MHSchemaMHAssistantDaemonAudioRecordingInterruptionContextReadFrom(v18, a2))
        {
          goto LABEL_214;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAssistantDaemonAudioRecordingInterruptionContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x78u:
        v18 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioRecordingInterruptionStartedTier1);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHAssistantDaemonAudioRecordingInterruptionStartedTier1ReadFrom(v18, a2) & 1) == 0)
        {
          goto LABEL_214;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAssistantDaemonAudioRecordingInterruptionStartedTier1:", v18, 0, 0);
        goto LABEL_207;
      case 0x79u:
        v18 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioBluetoothInfo);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHAssistantDaemonAudioBluetoothInfoReadFrom(v18, a2) & 1) == 0)
        {
          goto LABEL_214;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAssistantDaemonAudioBluetoothInfo:", v18, 0, 0);
        goto LABEL_207;
      case 0x7Au:
        v18 = objc_alloc_init(MHSchemaMHVoiceTriggerTwoShotDetected);
        if (!PBReaderPlaceMark() || (MHSchemaMHVoiceTriggerTwoShotDetectedReadFrom(v18, a2) & 1) == 0)
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setVoiceTriggerTwoShotDetected:", v18, 0, 0);
        goto LABEL_207;
      case 0x7Bu:
        v18 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioTwoShotTransitionContext);
        if (!PBReaderPlaceMark()
          || !MHSchemaMHAssistantDaemonAudioTwoShotTransitionContextReadFrom(v18, a2))
        {
          goto LABEL_214;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAssistantDaemonAudioTwoShotTransitionContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x7Cu:
        v18 = objc_alloc_init(MHSchemaMHVoiceTriggerContext);
        if (!PBReaderPlaceMark() || !MHSchemaMHVoiceTriggerContextReadFrom(v18, a2))
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setVoiceTriggerContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x7Du:
        v18 = objc_alloc_init(MHSchemaMHEndpointDetected);
        if (!PBReaderPlaceMark() || (MHSchemaMHEndpointDetectedReadFrom(v18, a2, v20) & 1) == 0)
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEndpointDetected:", v18, 0, 0);
        goto LABEL_207;
      case 0x7Eu:
        v18 = objc_alloc_init(MHSchemaMHEndpointLatencyInfoReported);
        if (!PBReaderPlaceMark() || (MHSchemaMHEndpointLatencyInfoReportedReadFrom(v18, a2) & 1) == 0)
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEndpointLatencyInfoReported:", v18, 0, 0);
        goto LABEL_207;
      case 0x7Fu:
        v18 = objc_alloc_init(MHSchemaMHVoiceAdBlockerContext);
        if (!PBReaderPlaceMark() || !MHSchemaMHVoiceAdBlockerContextReadFrom(v18, a2))
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAdblockerContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x80u:
        v18 = objc_alloc_init(MHSchemaMHOnDeviceEndpointerContext);
        if (!PBReaderPlaceMark() || (MHSchemaMHOnDeviceEndpointerContextReadFrom(v18, a2) & 1) == 0)
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setOnDeviceEndpointerContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x81u:
        v18 = objc_alloc_init(MHSchemaMHServerEndpointerContext);
        if (!PBReaderPlaceMark() || (MHSchemaMHServerEndpointerContextReadFrom(v18, a2) & 1) == 0)
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setServerEndpointerContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x82u:
        v18 = objc_alloc_init(MHSchemaMHEndpointerUsed);
        if (!PBReaderPlaceMark() || (MHSchemaMHEndpointerUsedReadFrom(v18, a2) & 1) == 0)
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEndpointerUsed:", v18, 0, 0);
        goto LABEL_207;
      case 0x83u:
        v18 = objc_alloc_init(MHSchemaMHEndpointDelayContext);
        if (!PBReaderPlaceMark() || (MHSchemaMHEndpointDelayContextReadFrom(v18, a2) & 1) == 0)
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEndpointDelayContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x84u:
        v18 = objc_alloc_init(MHSchemaMHMitigationDecisionRecommended);
        if (!PBReaderPlaceMark() || (MHSchemaMHMitigationDecisionRecommendedReadFrom(v18, a2) & 1) == 0)
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFinalMitigationRecommendation:", v18, 0, 0);
        goto LABEL_207;
      case 0x85u:
        v18 = objc_alloc_init(MHSchemaMHApplicationPlaybackAttempted);
        if (!PBReaderPlaceMark() || !MHSchemaMHApplicationPlaybackAttemptedReadFrom(v18, a2))
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setApplicationPlaybackAttempted:", v18, 0, 0);
        goto LABEL_207;
      case 0x86u:
        v18 = objc_alloc_init(MHSchemaMHSiriLaunchRequestContext);
        if (!PBReaderPlaceMark() || !MHSchemaMHSiriLaunchRequestContextReadFrom(v18, a2))
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSiriLaunchRequestContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x87u:
        v18 = objc_alloc_init(MHSchemaMHEndpointerAccessibleContext);
        if (!PBReaderPlaceMark() || (MHSchemaMHEndpointerAccessibleContextReadFrom(v18, a2) & 1) == 0)
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEndpointerAccessibleContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x88u:
        v18 = objc_alloc_init(MHSchemaMHCarplayLanguageMismatch);
        if (!PBReaderPlaceMark() || (MHSchemaMHCarplayLanguageMismatchReadFrom(v18, a2) & 1) == 0)
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCarPlayLangaugeMismatched:", v18, 0, 0);
        goto LABEL_207;
      case 0x89u:
        v18 = objc_alloc_init(MHSchemaMHDarwinConnectedDeviceWakeContext);
        if (!PBReaderPlaceMark() || !MHSchemaMHDarwinConnectedDeviceWakeContextReadFrom(v18, a2))
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDarwinConnectedDeviceWakeContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x8Au:
        v18 = objc_alloc_init(MHSchemaMHOdldFalseTriggerMitigated);
        if (!PBReaderPlaceMark() || (MHSchemaMHOdldFalseTriggerMitigatedReadFrom(v18, a2, v21) & 1) == 0)
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setOdldFalseTriggerMitigated:", v18, 0, 0);
        goto LABEL_207;
      case 0x8Bu:
        v18 = objc_alloc_init(MHSchemaMHSpeakerFalseTriggerMitigated);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHSpeakerFalseTriggerMitigatedReadFrom(v18, a2, v22) & 1) == 0)
        {
          goto LABEL_214;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSpeakerFalseTriggerMitigated:", v18, 0, 0);
        goto LABEL_207;
      case 0x8Cu:
        v18 = objc_alloc_init(MHSchemaMHSiriDirectedSpeechDetectionFailed);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHSiriDirectedSpeechDetectionFailedReadFrom(v18, a2) & 1) == 0)
        {
          goto LABEL_214;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSiriDirectedSpeechDetectionFailed:", v18, 0, 0);
        goto LABEL_207;
      case 0x8Du:
        v18 = objc_alloc_init(MHSchemaMHAudioDucked);
        if (!PBReaderPlaceMark() || (MHSchemaMHAudioDuckedReadFrom(v18, a2) & 1) == 0)
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAudioDucked:", v18, 0, 0);
        goto LABEL_207;
      case 0x8Eu:
        v18 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioRecordingFailed);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHAssistantDaemonAudioRecordingFailedReadFrom(v18, a2) & 1) == 0)
        {
          goto LABEL_214;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAudioRecordingFailed:", v18, 0, 0);
        goto LABEL_207;
      case 0x8Fu:
        v18 = objc_alloc_init(MHSchemaMHRTSFalseRejectDetected);
        if (!PBReaderPlaceMark() || (MHSchemaMHRTSFalseRejectDetectedReadFrom(v18, a2) & 1) == 0)
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setRtsFalseRejectDetected:", v18, 0, 0);
        goto LABEL_207;
      case 0x90u:
        v18 = objc_alloc_init(MHSchemaMHTRPCreated);
        if (!PBReaderPlaceMark() || !MHSchemaMHTRPCreatedReadFrom(v18, a2))
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTrpCreated:", v18, 0, 0);
        goto LABEL_207;
      case 0x91u:
        v18 = objc_alloc_init(MHSchemaMHUserSpeakingContext);
        if (!PBReaderPlaceMark() || !MHSchemaMHUserSpeakingContextReadFrom(v18, a2))
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setUserSpeakingContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x92u:
        v18 = objc_alloc_init(MHSchemaMHSpeechStopDetected);
        if (!PBReaderPlaceMark() || (MHSchemaMHSpeechStopDetectedReadFrom(v18, a2) & 1) == 0)
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSpeechStopDetected:", v18, 0, 0);
        goto LABEL_207;
      case 0x93u:
        v18 = objc_alloc_init(MHSchemaMHSpeechDetectorContext);
        if (!PBReaderPlaceMark() || (MHSchemaMHSpeechDetectorContextReadFrom(v18, a2) & 1) == 0)
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSpeechDetectorContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x94u:
        v18 = objc_alloc_init(MHSchemaMHStoppedListeningForSpeechContinuation);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHStoppedListeningForSpeechContinuationReadFrom(v18, a2) & 1) == 0)
        {
          goto LABEL_214;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStoppedListeningForSpeechContinuation:", v18, 0, 0);
        goto LABEL_207;
      case 0x95u:
        v18 = objc_alloc_init(MHSchemaMHUserEngagementFalseTriggerMitigationEvaluationContext);
        if (!PBReaderPlaceMark()
          || !MHSchemaMHUserEngagementFalseTriggerMitigationEvaluationContextReadFrom(v18, a2))
        {
          goto LABEL_214;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setUserEngagementModelContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x96u:
        v18 = objc_alloc_init(MHSchemaMHAttendingContext);
        if (!PBReaderPlaceMark() || !MHSchemaMHAttendingContextReadFrom(v18, a2))
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAttendingContext:", v18, 0, 0);
        goto LABEL_207;
      case 0x97u:
        v18 = objc_alloc_init(MHSchemaMHCrownPressed);
        if (!PBReaderPlaceMark() || (MHSchemaMHCrownPressedReadFrom(v18, a2) & 1) == 0)
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCrownPressed:", v18, 0, 0);
        goto LABEL_207;
      case 0x98u:
        v18 = objc_alloc_init(MHSchemaMHRaiseToSpeakTriggered);
        if (!PBReaderPlaceMark() || (MHSchemaMHRaiseToSpeakTriggeredReadFrom(v18, a2) & 1) == 0)
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setRtsTriggered:", v18, 0, 0);
        goto LABEL_207;
      case 0x99u:
        v18 = objc_alloc_init(MHSchemaMHRaiseToSpeakFirstPassPolicyTriggered);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHRaiseToSpeakFirstPassPolicyTriggeredReadFrom(v18, a2) & 1) == 0)
        {
          goto LABEL_214;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setRtsFirstPassPolicyTriggered:", v18, 0, 0);
        goto LABEL_207;
      case 0x9Au:
        v18 = objc_alloc_init(MHSchemaMHRaiseToSpeakSecondPassPolicyDecisionMade);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHRaiseToSpeakSecondPassPolicyDecisionMadeReadFrom(v18, a2) & 1) == 0)
        {
          goto LABEL_214;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setRtsSecondPassPolicyDecisionMade:", v18, 0, 0);
        goto LABEL_207;
      case 0x9Bu:
        v18 = objc_alloc_init(MHSchemaMHVoiceProfileOnboarded);
        if (!PBReaderPlaceMark() || (MHSchemaMHVoiceProfileOnboardedReadFrom(v18, a2) & 1) == 0)
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setVoiceProfileOnboarded:", v18, 0, 0);
        goto LABEL_207;
      case 0x9Cu:
        v18 = objc_alloc_init(MHSchemaMHSensorControlStatusReported);
        if (!PBReaderPlaceMark() || (MHSchemaMHSensorControlStatusReportedReadFrom(v18, a2) & 1) == 0)
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSensorControlStatusReported:", v18, 0, 0);
        goto LABEL_207;
      case 0x9Du:
        v18 = objc_alloc_init(MHSchemaMHVoiceTriggerRePrompted);
        if (!PBReaderPlaceMark() || (MHSchemaMHVoiceTriggerRePromptedReadFrom(v18, a2) & 1) == 0)
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setVoiceTriggerRePrompted:", v18, 0, 0);
        goto LABEL_207;
      case 0x9Eu:
        v18 = objc_alloc_init(MHSchemaMHAssistantDaemonAudioRecordingFailureInsufficientPriority);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHAssistantDaemonAudioRecordingFailureInsufficientPriorityReadFrom(v18, a2) & 1) == 0)
        {
          goto LABEL_214;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAssistantDaemonAudioRecordingFailureInsufficientPriority:", v18, 0, 0);
        goto LABEL_207;
      case 0x9Fu:
        v18 = objc_alloc_init(MHSchemaMHVoiceProfileICloudSyncFinished);
        if (!PBReaderPlaceMark() || (MHSchemaMHVoiceProfileICloudSyncFinishedReadFrom(v18, a2) & 1) == 0)
          goto LABEL_214;
        PBReaderRecallMark();
        objc_msgSend(a1, "setVoiceProfileICloudSyncFinished:", v18, 0, 0);
        goto LABEL_207;
      default:
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = objc_alloc_init(SISchemaUUID);
            if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v18, a2) & 1) == 0)
              goto LABEL_214;
            PBReaderRecallMark();
            objc_msgSend(a1, "setMhId:", v18, 0, 0);
            goto LABEL_207;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_208:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
        v18 = objc_alloc_init(MHSchemaMHClientEventMetadata);
        if (PBReaderPlaceMark() && (MHSchemaMHClientEventMetadataReadFrom(v18, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setEventMetadata:", v18, 0, 0);
LABEL_207:

          goto LABEL_208;
        }
LABEL_214:

        return 0;
    }
  }
}

uint64_t MHSchemaMHClientEventMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setMhId:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHCoreSpeechPreprocessorCompletedReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  MHSchemaMHCoreSpeechZeroFilterRunPair *v79;
  uint64_t v80;
  uint64_t v81;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v6) == 0;
  v8 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v6))
      return *(_BYTE *)(a2 + *v6) == 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *v4;
      v13 = *(_QWORD *)(a2 + v12);
      v14 = v13 + 1;
      if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
        break;
      v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
      *(_QWORD *)(a2 + v12) = v14;
      v11 |= (unint64_t)(v15 & 0x7F) << v9;
      if ((v15 & 0x80) == 0)
        goto LABEL_12;
      v9 += 7;
      v16 = v10++ >= 9;
      if (v16)
      {
        v11 = 0;
        v17 = *v6;
        v18 = *(unsigned __int8 *)(a2 + v17);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
    v17 = *v6;
    v18 = *(unsigned __int8 *)(a2 + v17);
    if (*(_BYTE *)(a2 + v17))
      v11 = 0;
LABEL_14:
    if (v18 || (v11 & 7) == 4)
      return *(_BYTE *)(a2 + *v6) == 0;
    switch((v11 >> 3))
    {
      case 1u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (1)
        {
          v23 = *v4;
          v24 = *(_QWORD *)(a2 + v23);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v5))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v24);
          *(_QWORD *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0)
            goto LABEL_84;
          v20 += 7;
          v16 = v21++ >= 9;
          if (v16)
          {
            v27 = 0;
            goto LABEL_87;
          }
        }
        *(_BYTE *)(a2 + *v6) = 1;
LABEL_84:
        if (*(_BYTE *)(a2 + *v6))
          v27 = 0;
        else
          v27 = v22;
LABEL_87:
        objc_msgSend(a1, "setBeepLocation:", v27, v80, v81);
        goto LABEL_123;
      case 2u:
        v29 = 0;
        v30 = 0;
        v31 = 0;
        while (2)
        {
          v32 = *v4;
          v33 = *(_QWORD *)(a2 + v32);
          v34 = v33 + 1;
          if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v33);
            *(_QWORD *)(a2 + v32) = v34;
            v31 |= (unint64_t)(v35 & 0x7F) << v29;
            if (v35 < 0)
            {
              v29 += 7;
              v16 = v30++ >= 9;
              if (v16)
              {
                v36 = 0;
                goto LABEL_92;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v36 = 0;
        else
          v36 = v31;
LABEL_92:
        objc_msgSend(a1, "setStatsComputed:", v36, v80, v81);
        goto LABEL_123;
      case 3u:
        v37 = *v4;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 <= 0xFFFFFFFFFFFFFFFBLL && v38 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v38);
          *(_QWORD *)(a2 + v37) = v38 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setBeepPower:", a3, v80, v81);
        goto LABEL_123;
      case 4u:
        v39 = *v4;
        v40 = *(_QWORD *)(a2 + v39);
        if (v40 <= 0xFFFFFFFFFFFFFFFBLL && v40 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v40);
          *(_QWORD *)(a2 + v39) = v40 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setSignalPower:", a3, v80, v81);
        goto LABEL_123;
      case 5u:
        v41 = *v4;
        v42 = *(_QWORD *)(a2 + v41);
        if (v42 <= 0xFFFFFFFFFFFFFFFBLL && v42 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v42);
          *(_QWORD *)(a2 + v41) = v42 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setOriginalPower:", a3, v80, v81);
        goto LABEL_123;
      case 6u:
        v43 = *v4;
        v44 = *(_QWORD *)(a2 + v43);
        if (v44 <= 0xFFFFFFFFFFFFFFFBLL && v44 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v44);
          *(_QWORD *)(a2 + v43) = v44 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setAbsMaxVal:", a3, v80, v81);
        goto LABEL_123;
      case 7u:
        v45 = *v4;
        v46 = *(_QWORD *)(a2 + v45);
        if (v46 <= 0xFFFFFFFFFFFFFFFBLL && v46 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v46);
          *(_QWORD *)(a2 + v45) = v46 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setAboveNinetyFivepcOfMax:", a3, v80, v81);
        goto LABEL_123;
      case 8u:
        v47 = 0;
        v48 = 0;
        v49 = 0;
        while (2)
        {
          v50 = *v4;
          v51 = *(_QWORD *)(a2 + v50);
          v52 = v51 + 1;
          if (v51 == -1 || v52 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v51);
            *(_QWORD *)(a2 + v50) = v52;
            v49 |= (unint64_t)(v53 & 0x7F) << v47;
            if (v53 < 0)
            {
              v47 += 7;
              v16 = v48++ >= 9;
              if (v16)
              {
                v54 = 0;
                goto LABEL_97;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v54 = 0;
        else
          v54 = v49;
LABEL_97:
        objc_msgSend(a1, "setNumTotalInputSamples:", v54, v80, v81);
        goto LABEL_123;
      case 9u:
        v55 = 0;
        v56 = 0;
        v57 = 0;
        while (2)
        {
          v58 = *v4;
          v59 = *(_QWORD *)(a2 + v58);
          v60 = v59 + 1;
          if (v59 == -1 || v60 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v61 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v59);
            *(_QWORD *)(a2 + v58) = v60;
            v57 |= (unint64_t)(v61 & 0x7F) << v55;
            if (v61 < 0)
            {
              v55 += 7;
              v16 = v56++ >= 9;
              if (v16)
              {
                v62 = 0;
                goto LABEL_102;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v62 = 0;
        else
          v62 = v57;
LABEL_102:
        objc_msgSend(a1, "setNumTotalOutputSamples:", v62, v80, v81);
        goto LABEL_123;
      case 0xAu:
        v63 = 0;
        v64 = 0;
        v65 = 0;
        while (2)
        {
          v66 = *v4;
          v67 = *(_QWORD *)(a2 + v66);
          v68 = v67 + 1;
          if (v67 == -1 || v68 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v69 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v67);
            *(_QWORD *)(a2 + v66) = v68;
            v65 |= (unint64_t)(v69 & 0x7F) << v63;
            if (v69 < 0)
            {
              v63 += 7;
              v16 = v64++ >= 9;
              if (v16)
              {
                v70 = 0;
                goto LABEL_107;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v70 = 0;
        else
          v70 = v65;
LABEL_107:
        objc_msgSend(a1, "setInitialContinousZeros:", v70, v80, v81);
        goto LABEL_123;
      case 0xBu:
        v71 = 0;
        v72 = 0;
        v73 = 0;
        while (2)
        {
          v74 = *v4;
          v75 = *(_QWORD *)(a2 + v74);
          v76 = v75 + 1;
          if (v75 == -1 || v76 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v77 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v75);
            *(_QWORD *)(a2 + v74) = v76;
            v73 |= (unint64_t)(v77 & 0x7F) << v71;
            if (v77 < 0)
            {
              v71 += 7;
              v16 = v72++ >= 9;
              if (v16)
              {
                v78 = 0;
                goto LABEL_112;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v78 = 0;
        else
          v78 = v73;
LABEL_112:
        objc_msgSend(a1, "setMaxContinousZeros:", v78, v80, v81);
        goto LABEL_123;
      case 0xCu:
        v79 = objc_alloc_init(MHSchemaMHCoreSpeechZeroFilterRunPair);
        v80 = 0;
        v81 = 0;
        if (PBReaderPlaceMark() && MHSchemaMHCoreSpeechZeroFilterRunPairReadFrom(v79, a2))
        {
          PBReaderRecallMark();
          if (v79)
            objc_msgSend(a1, "addMidSegmentContinousZeros:", v79, 0, 0);

LABEL_123:
          if (*(_QWORD *)(a2 + *v4) >= *(_QWORD *)(a2 + *v5))
            return *(_BYTE *)(a2 + *v6) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_123;
    }
  }
}

uint64_t MHSchemaMHCoreSpeechZeroFilterRunPairReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_42;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            v30 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
        v30 = *(_BYTE *)(a2 + *v5) ? 0 : v26;
LABEL_45:
        objc_msgSend(a1, "setZeroRunStartingSample:", v30);
      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_40:
        objc_msgSend(a1, "setZeroRunLength:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MHSchemaMHDarwinConnectedDeviceWakeContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  MHSchemaMHDarwinConnectedDeviceWakeFailed *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(MHSchemaMHDarwinConnectedDeviceWakeFailed);
        if (!PBReaderPlaceMark() || (MHSchemaMHDarwinConnectedDeviceWakeFailedReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setFailed:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(MHSchemaMHDarwinConnectedDeviceWakeStarted);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHDarwinConnectedDeviceWakeStartedReadFrom(v18, a2) & 1) == 0)
        {
          goto LABEL_35;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(MHSchemaMHDarwinConnectedDeviceWakeEnded);
    if (!PBReaderPlaceMark() || (MHSchemaMHDarwinConnectedDeviceWakeEndedReadFrom(v18, a2) & 1) == 0)
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHDarwinConnectedDeviceWakeEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHDarwinConnectedDeviceWakeFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHDarwinConnectedDeviceWakeStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHEndpointDelayContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_57;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v23 = 0;
              goto LABEL_60;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_57:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
          else
            v23 = v19;
LABEL_60:
          objc_msgSend(a1, "setSpeakingStartInNs:", v23);
          continue;
        case 2u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (v14)
                {
                  v31 = 0;
                  goto LABEL_65;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
          else
            v31 = v27;
LABEL_65:
          objc_msgSend(a1, "setSpeakingEndInNs:", v31);
          continue;
        case 3u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (2)
          {
            v35 = *v3;
            v36 = *(_QWORD *)(a2 + v35);
            if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
              *(_QWORD *)(a2 + v35) = v36 + 1;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                v14 = v33++ >= 9;
                if (v14)
                {
                  v38 = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
          else
            v38 = v34;
LABEL_70:
          objc_msgSend(a1, "setEndpointDelayInNs:", v38);
          continue;
        case 4u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                v14 = v40++ >= 9;
                if (v14)
                {
                  v45 = 0;
                  goto LABEL_75;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v45 = 0;
          else
            v45 = v41;
LABEL_75:
          objc_msgSend(a1, "setEndpointModelDelayInNs:", v45);
          continue;
        case 5u:
          v46 = 0;
          v47 = 0;
          v48 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v49 = *v3;
        v50 = *(_QWORD *)(a2 + v49);
        if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
          break;
        v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
        *(_QWORD *)(a2 + v49) = v50 + 1;
        v48 |= (unint64_t)(v51 & 0x7F) << v46;
        if ((v51 & 0x80) == 0)
          goto LABEL_77;
        v46 += 7;
        v14 = v47++ >= 9;
        if (v14)
        {
          v52 = 0;
          goto LABEL_80;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_77:
      v52 = *(_BYTE *)(a2 + *v5) ? 0 : v48;
LABEL_80:
      objc_msgSend(a1, "setEndpointDelayInNsV2:", v52);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHEndpointDetectedReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  MHSchemaMHEndpointFeaturesAtEndpoint *v53;
  double v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  double v98;
  char v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  uint64_t v106;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v6) == 0;
  v8 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v6))
      return *(_BYTE *)(a2 + *v6) == 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *v4;
      v13 = *(_QWORD *)(a2 + v12);
      v14 = v13 + 1;
      if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
        break;
      v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
      *(_QWORD *)(a2 + v12) = v14;
      v11 |= (unint64_t)(v15 & 0x7F) << v9;
      if ((v15 & 0x80) == 0)
        goto LABEL_12;
      v9 += 7;
      v16 = v10++ >= 9;
      if (v16)
      {
        v11 = 0;
        v17 = *v6;
        v18 = *(unsigned __int8 *)(a2 + v17);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
    v17 = *v6;
    v18 = *(unsigned __int8 *)(a2 + v17);
    if (*(_BYTE *)(a2 + v17))
      v11 = 0;
LABEL_14:
    if (v18 || (v11 & 7) == 4)
      return *(_BYTE *)(a2 + *v6) == 0;
    switch((v11 >> 3))
    {
      case 1u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (1)
        {
          v23 = *v4;
          v24 = *(_QWORD *)(a2 + v23);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v5))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v24);
          *(_QWORD *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0)
            goto LABEL_116;
          v20 += 7;
          v16 = v21++ >= 9;
          if (v16)
          {
            v27 = 0;
            goto LABEL_119;
          }
        }
        *(_BYTE *)(a2 + *v6) = 1;
LABEL_116:
        if (*(_BYTE *)(a2 + *v6))
          v27 = 0;
        else
          v27 = v22;
LABEL_119:
        objc_msgSend(a1, "setEndpointerType:", v27);
        goto LABEL_113;
      case 2u:
        v29 = 0;
        v30 = 0;
        v31 = 0;
        while (2)
        {
          v32 = *v4;
          v33 = *(_QWORD *)(a2 + v32);
          v34 = v33 + 1;
          if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v33);
            *(_QWORD *)(a2 + v32) = v34;
            v31 |= (unint64_t)(v35 & 0x7F) << v29;
            if (v35 < 0)
            {
              v29 += 7;
              v16 = v30++ >= 9;
              if (v16)
              {
                v36 = 0;
                goto LABEL_124;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v36 = 0;
        else
          v36 = v31;
LABEL_124:
        objc_msgSend(a1, "setEndpointAudioDurationInNs:", v36);
        goto LABEL_113;
      case 3u:
        v37 = 0;
        v38 = 0;
        v39 = 0;
        while (2)
        {
          v40 = *v4;
          v41 = *(_QWORD *)(a2 + v40);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v41);
            *(_QWORD *)(a2 + v40) = v42;
            v39 |= (unint64_t)(v43 & 0x7F) << v37;
            if (v43 < 0)
            {
              v37 += 7;
              v16 = v38++ >= 9;
              if (v16)
              {
                v44 = 0;
                goto LABEL_129;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v44 = 0;
        else
          v44 = v39;
LABEL_129:
        objc_msgSend(a1, "setFirstBufferTimeInNs:", v44);
        goto LABEL_113;
      case 4u:
        v45 = 0;
        v46 = 0;
        v47 = 0;
        while (2)
        {
          v48 = *v4;
          v49 = *(_QWORD *)(a2 + v48);
          v50 = v49 + 1;
          if (v49 == -1 || v50 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v49);
            *(_QWORD *)(a2 + v48) = v50;
            v47 |= (unint64_t)(v51 & 0x7F) << v45;
            if (v51 < 0)
            {
              v45 += 7;
              v16 = v46++ >= 9;
              if (v16)
              {
                v52 = 0;
                goto LABEL_134;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v52 = 0;
        else
          v52 = v47;
LABEL_134:
        objc_msgSend(a1, "setEndpointedBufferTimeInNs:", v52);
        goto LABEL_113;
      case 5u:
        v53 = objc_alloc_init(MHSchemaMHEndpointFeaturesAtEndpoint);
        if (!PBReaderPlaceMark() || (MHSchemaMHEndpointFeaturesAtEndpointReadFrom(v53, a2, v54) & 1) == 0)
          goto LABEL_169;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEndpointFeaturesAtEndpoint:", v53, 0, 0);
        goto LABEL_112;
      case 6u:
        v55 = 0;
        v56 = 0;
        v57 = 0;
        while (2)
        {
          v58 = *v4;
          v59 = *(_QWORD *)(a2 + v58);
          v60 = v59 + 1;
          if (v59 == -1 || v60 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v61 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v59);
            *(_QWORD *)(a2 + v58) = v60;
            v57 |= (unint64_t)(v61 & 0x7F) << v55;
            if (v61 < 0)
            {
              v55 += 7;
              v16 = v56++ >= 9;
              if (v16)
              {
                v62 = 0;
                goto LABEL_139;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v62 = 0;
        else
          v62 = v57;
LABEL_139:
        objc_msgSend(a1, "setEndpointerDecisionLagInNs:", v62);
        goto LABEL_113;
      case 7u:
        v63 = 0;
        v64 = 0;
        v65 = 0;
        while (2)
        {
          v66 = *v4;
          v67 = *(_QWORD *)(a2 + v66);
          v68 = v67 + 1;
          if (v67 == -1 || v68 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v69 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v67);
            *(_QWORD *)(a2 + v66) = v68;
            v65 |= (unint64_t)(v69 & 0x7F) << v63;
            if (v69 < 0)
            {
              v63 += 7;
              v16 = v64++ >= 9;
              if (v16)
              {
                v70 = 0;
                goto LABEL_144;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v70 = 0;
        else
          v70 = v65;
LABEL_144:
        objc_msgSend(a1, "setExtraDelayInNs:", v70);
        goto LABEL_113;
      case 8u:
        v53 = objc_alloc_init(SISchemaVersion);
        if (!PBReaderPlaceMark() || (SISchemaVersionReadFrom(v53, a2) & 1) == 0)
          goto LABEL_169;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEndpointModelConfigVersion:", v53, 0, 0);
        goto LABEL_112;
      case 9u:
        v71 = 0;
        v72 = 0;
        v73 = 0;
        while (2)
        {
          v74 = *v4;
          v75 = *(_QWORD *)(a2 + v74);
          v76 = v75 + 1;
          if (v75 == -1 || v76 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v77 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v75);
            *(_QWORD *)(a2 + v74) = v76;
            v73 |= (unint64_t)(v77 & 0x7F) << v71;
            if (v77 < 0)
            {
              v71 += 7;
              v16 = v72++ >= 9;
              if (v16)
              {
                v73 = 0;
                goto LABEL_148;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v73 = 0;
LABEL_148:
        objc_msgSend(a1, "setDerivedBufferTimeFromHistoricalAudio:", v73 != 0);
        goto LABEL_113;
      case 0xAu:
        v78 = *v4;
        v79 = *(_QWORD *)(a2 + v78);
        if (v79 <= 0xFFFFFFFFFFFFFFFBLL && v79 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v79);
          *(_QWORD *)(a2 + v78) = v79 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setEndpointerThreshold:", a3);
        goto LABEL_113;
      case 0xBu:
        v80 = *v4;
        v81 = *(_QWORD *)(a2 + v80);
        if (v81 <= 0xFFFFFFFFFFFFFFFBLL && v81 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v81);
          *(_QWORD *)(a2 + v80) = v81 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setEndpointerScore:", a3);
        goto LABEL_113;
      case 0xCu:
        v82 = 0;
        v83 = 0;
        v84 = 0;
        while (2)
        {
          v85 = *v4;
          v86 = *(_QWORD *)(a2 + v85);
          v87 = v86 + 1;
          if (v86 == -1 || v87 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v88 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v86);
            *(_QWORD *)(a2 + v85) = v87;
            v84 |= (unint64_t)(v88 & 0x7F) << v82;
            if (v88 < 0)
            {
              v82 += 7;
              v16 = v83++ >= 9;
              if (v16)
              {
                v89 = 0;
                goto LABEL_153;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v89 = 0;
        else
          v89 = v84;
LABEL_153:
        objc_msgSend(a1, "setAudioSkippedDurationInNs:", v89);
        goto LABEL_113;
      case 0xDu:
        v90 = 0;
        v91 = 0;
        v92 = 0;
        while (2)
        {
          v93 = *v4;
          v94 = *(_QWORD *)(a2 + v93);
          v95 = v94 + 1;
          if (v94 == -1 || v95 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v96 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v94);
            *(_QWORD *)(a2 + v93) = v95;
            v92 |= (unint64_t)(v96 & 0x7F) << v90;
            if (v96 < 0)
            {
              v90 += 7;
              v16 = v91++ >= 9;
              if (v16)
              {
                v97 = 0;
                goto LABEL_158;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v97 = 0;
        else
          v97 = v92;
LABEL_158:
        objc_msgSend(a1, "setEndpointResetPositionInNs:", v97);
        goto LABEL_113;
      case 0xEu:
        v53 = objc_alloc_init(MHSchemaMHStatisticDistributionInfo);
        if (!PBReaderPlaceMark() || (MHSchemaMHStatisticDistributionInfoReadFrom(v53, a2, v98) & 1) == 0)
          goto LABEL_169;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAsrFeatureLatencyDistribution:", v53, 0, 0);
        goto LABEL_112;
      case 0xFu:
        v53 = objc_alloc_init(MHSchemaMHEndpointerTimeoutMetadata);
        if (!PBReaderPlaceMark() || (MHSchemaMHEndpointerTimeoutMetadataReadFrom(v53, a2) & 1) == 0)
          goto LABEL_169;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTimeoutMetadata:", v53, 0, 0);
        goto LABEL_112;
      case 0x10u:
        v99 = 0;
        v100 = 0;
        v101 = 0;
        while (2)
        {
          v102 = *v4;
          v103 = *(_QWORD *)(a2 + v102);
          v104 = v103 + 1;
          if (v103 == -1 || v104 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v105 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v103);
            *(_QWORD *)(a2 + v102) = v104;
            v101 |= (unint64_t)(v105 & 0x7F) << v99;
            if (v105 < 0)
            {
              v99 += 7;
              v16 = v100++ >= 9;
              if (v16)
              {
                v106 = 0;
                goto LABEL_163;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v106 = 0;
        else
          v106 = v101;
LABEL_163:
        objc_msgSend(a1, "setTrpDetectionType:", v106);
        goto LABEL_113;
      case 0x11u:
        v53 = objc_alloc_init(SISchemaUUID);
        if (PBReaderPlaceMark() && (SISchemaUUIDReadFrom(v53, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setTrpId:", v53, 0, 0);
LABEL_112:

LABEL_113:
          if (*(_QWORD *)(a2 + *v4) >= *(_QWORD *)(a2 + *v5))
            return *(_BYTE *)(a2 + *v6) == 0;
          continue;
        }
LABEL_169:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_113;
    }
  }
}

uint64_t MHSchemaMHEndpointFeaturesAtEndpointReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v6))
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)(a2 + v12);
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        v16 = v10++ >= 9;
        if (v16)
        {
          v11 = 0;
          v17 = *v6;
          v18 = *(unsigned __int8 *)(a2 + v17);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
      v17 = *v6;
      v18 = *(unsigned __int8 *)(a2 + v17);
      if (*(_BYTE *)(a2 + v17))
        v11 = 0;
LABEL_14:
      if (v18 || (v11 & 7) == 4)
        break;
      switch((v11 >> 3))
      {
        case 1u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          while (1)
          {
            v23 = *v4;
            v24 = *(_QWORD *)(a2 + v23);
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v5))
              break;
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v24);
            *(_QWORD *)(a2 + v23) = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0)
              goto LABEL_89;
            v20 += 7;
            v16 = v21++ >= 9;
            if (v16)
            {
              v27 = 0;
              goto LABEL_92;
            }
          }
          *(_BYTE *)(a2 + *v6) = 1;
LABEL_89:
          if (*(_BYTE *)(a2 + *v6))
            v27 = 0;
          else
            v27 = v22;
LABEL_92:
          objc_msgSend(a1, "setTrailingSilenceDurationInNs:", v27);
          continue;
        case 2u:
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (2)
          {
            v32 = *v4;
            v33 = *(_QWORD *)(a2 + v32);
            v34 = v33 + 1;
            if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v33);
              *(_QWORD *)(a2 + v32) = v34;
              v31 |= (unint64_t)(v35 & 0x7F) << v29;
              if (v35 < 0)
              {
                v29 += 7;
                v16 = v30++ >= 9;
                if (v16)
                {
                  v36 = 0;
                  goto LABEL_97;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v36 = 0;
          else
            v36 = v31;
LABEL_97:
          objc_msgSend(a1, "setClientSilenceFramesCountInNs:", v36);
          continue;
        case 3u:
          v37 = *v4;
          v38 = *(_QWORD *)(a2 + v37);
          if (v38 <= 0xFFFFFFFFFFFFFFFBLL && v38 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setEndOfSentenceLikelihood:", a3);
          continue;
        case 4u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          while (2)
          {
            v42 = *v4;
            v43 = *(_QWORD *)(a2 + v42);
            v44 = v43 + 1;
            if (v43 == -1 || v44 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v43);
              *(_QWORD *)(a2 + v42) = v44;
              v41 |= (unint64_t)(v45 & 0x7F) << v39;
              if (v45 < 0)
              {
                v39 += 7;
                v16 = v40++ >= 9;
                if (v16)
                {
                  v46 = 0;
                  goto LABEL_102;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v46 = 0;
          else
            v46 = v41;
LABEL_102:
          objc_msgSend(a1, "setWordCount:", v46);
          continue;
        case 5u:
          v47 = 0;
          v48 = 0;
          v49 = 0;
          while (2)
          {
            v50 = *v4;
            v51 = *(_QWORD *)(a2 + v50);
            v52 = v51 + 1;
            if (v51 == -1 || v52 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v51);
              *(_QWORD *)(a2 + v50) = v52;
              v49 |= (unint64_t)(v53 & 0x7F) << v47;
              if (v53 < 0)
              {
                v47 += 7;
                v16 = v48++ >= 9;
                if (v16)
                {
                  v54 = 0;
                  goto LABEL_107;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v54 = 0;
          else
            v54 = v49;
LABEL_107:
          objc_msgSend(a1, "setServerFeaturesLatencyInNs:", v54);
          continue;
        case 6u:
          v55 = *v4;
          v56 = *(_QWORD *)(a2 + v55);
          if (v56 <= 0xFFFFFFFFFFFFFFFBLL && v56 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v56);
            *(_QWORD *)(a2 + v55) = v56 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setClientSilenceProbability:", a3);
          continue;
        case 7u:
          v57 = 0;
          v58 = 0;
          v59 = 0;
          while (2)
          {
            v60 = *v4;
            v61 = *(_QWORD *)(a2 + v60);
            v62 = v61 + 1;
            if (v61 == -1 || v62 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v63 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v61);
              *(_QWORD *)(a2 + v60) = v62;
              v59 |= (unint64_t)(v63 & 0x7F) << v57;
              if (v63 < 0)
              {
                v57 += 7;
                v16 = v58++ >= 9;
                if (v16)
                {
                  v64 = 0;
                  goto LABEL_112;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v64 = 0;
          else
            v64 = v59;
LABEL_112:
          objc_msgSend(a1, "setRcTrailingSilenceDuration:", v64);
          continue;
        case 8u:
          v65 = *v4;
          v66 = *(_QWORD *)(a2 + v65);
          if (v66 <= 0xFFFFFFFFFFFFFFFBLL && v66 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v66);
            *(_QWORD *)(a2 + v65) = v66 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setRcEndOfSentenceLikelihood:", a3);
          continue;
        case 9u:
          v67 = 0;
          v68 = 0;
          v69 = 0;
          while (2)
          {
            v70 = *v4;
            v71 = *(_QWORD *)(a2 + v70);
            v72 = v71 + 1;
            if (v71 == -1 || v72 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v73 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v71);
              *(_QWORD *)(a2 + v70) = v72;
              v69 |= (unint64_t)(v73 & 0x7F) << v67;
              if (v73 < 0)
              {
                v67 += 7;
                v16 = v68++ >= 9;
                if (v16)
                {
                  v74 = 0;
                  goto LABEL_117;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v74 = 0;
          else
            v74 = v69;
LABEL_117:
          objc_msgSend(a1, "setRcWordCount:", v74);
          continue;
        case 0xAu:
          v75 = 0;
          v76 = 0;
          v77 = 0;
          break;
        case 0xBu:
          v83 = *v4;
          v84 = *(_QWORD *)(a2 + v83);
          if (v84 <= 0xFFFFFFFFFFFFFFFBLL && v84 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v84);
            *(_QWORD *)(a2 + v83) = v84 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setSilencePosterior:", a3);
          continue;
        case 0xCu:
          v85 = *v4;
          v86 = *(_QWORD *)(a2 + v85);
          if (v86 <= 0xFFFFFFFFFFFFFFFBLL && v86 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v86);
            *(_QWORD *)(a2 + v85) = v86 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setAcousticEndpointerScore:", a3);
          continue;
        case 0xDu:
          v87 = *v4;
          v88 = *(_QWORD *)(a2 + v87);
          if (v88 <= 0xFFFFFFFFFFFFFFFBLL && v88 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v88);
            *(_QWORD *)(a2 + v87) = v88 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setSilencePosteriorFrameCountInNs:", a3);
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v78 = *v4;
        v79 = *(_QWORD *)(a2 + v78);
        v80 = v79 + 1;
        if (v79 == -1 || v80 > *(_QWORD *)(a2 + *v5))
          break;
        v81 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v79);
        *(_QWORD *)(a2 + v78) = v80;
        v77 |= (unint64_t)(v81 & 0x7F) << v75;
        if ((v81 & 0x80) == 0)
          goto LABEL_119;
        v75 += 7;
        v16 = v76++ >= 9;
        if (v16)
        {
          v82 = 0;
          goto LABEL_122;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_119:
      v82 = *(_BYTE *)(a2 + *v6) ? 0 : v77;
LABEL_122:
      objc_msgSend(a1, "setRcServerFeaturesLatency:", v82);
    }
    while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5));
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

uint64_t MHSchemaMHEndpointLatencyInfoReportedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  MHSchemaMHTrailingPacketLatencyInfo *v25;
  double v26;
  double v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_42;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_45:
        objc_msgSend(a1, "setFirstPacketLatencyInNs:", v23);
        goto LABEL_46;
      case 2u:
        v25 = objc_alloc_init(MHSchemaMHTrailingPacketLatencyInfo);
        if (!PBReaderPlaceMark() || (MHSchemaMHTrailingPacketLatencyInfoReadFrom(v25, a2) & 1) == 0)
          goto LABEL_48;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTrailingPacketLatencyInfo:", v25, 0, 0);
        goto LABEL_40;
      case 3u:
        v25 = objc_alloc_init(MHSchemaMHTrailingPacketLatencyInfo);
        if (!PBReaderPlaceMark() || (MHSchemaMHTrailingPacketLatencyInfoReadFrom(v25, a2) & 1) == 0)
          goto LABEL_48;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCoreSpeechTrailingPacketLatencyInfo:", v25, 0, 0);
        goto LABEL_40;
      case 4u:
        v25 = objc_alloc_init(MHSchemaMHStatisticDistributionInfo);
        if (!PBReaderPlaceMark() || (MHSchemaMHStatisticDistributionInfoReadFrom(v25, a2, v26) & 1) == 0)
          goto LABEL_48;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTrailingPacketLatency:", v25, 0, 0);
        goto LABEL_40;
      case 5u:
        v25 = objc_alloc_init(MHSchemaMHStatisticDistributionInfo);
        if (PBReaderPlaceMark() && (MHSchemaMHStatisticDistributionInfoReadFrom(v25, a2, v27) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCoreSpeechTrailingPacketLatency:", v25, 0, 0);
LABEL_40:

LABEL_46:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_48:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_46;
    }
  }
}

uint64_t MHSchemaMHEndpointerAccessibleContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setAccessibleEndpointerLevel:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHEndpointerTimeoutMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_42;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            v26 = 0;
            goto LABEL_44;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
        if (*(_BYTE *)(a2 + *v5))
          v26 = 0;
LABEL_44:
        objc_msgSend(a1, "setIsTimeout:", v26 != 0);
      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_40:
        objc_msgSend(a1, "setTimeoutThresholdInNs:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHEndpointerUsedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setEndpointer:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHLatticeFalseTriggerMitigationEndedReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v17;
  int v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v6))
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)(a2 + v12);
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        if (v10++ >= 9)
        {
          v11 = 0;
          v17 = *v6;
          v18 = *(unsigned __int8 *)(a2 + v17);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
      v17 = *v6;
      v18 = *(unsigned __int8 *)(a2 + v17);
      if (*(_BYTE *)(a2 + v17))
        v11 = 0;
LABEL_14:
      if (v18 || (v11 & 7) == 4)
        break;
      if ((v11 >> 3) == 2)
      {
        v22 = *v4;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setThreshold:", a3);
      }
      else if ((v11 >> 3) == 1)
      {
        v20 = *v4;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setScore:", a3);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5));
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

BOOL MHSchemaMHLatticeFalseTriggerMitigationEvaluationContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  MHSchemaMHLatticeFalseTriggerMitigationFailed *v18;
  double v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(MHSchemaMHLatticeFalseTriggerMitigationFailed);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHLatticeFalseTriggerMitigationFailedReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setFailed:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(MHSchemaMHLatticeFalseTriggerMitigationStarted);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHLatticeFalseTriggerMitigationStartedReadFrom(v18, a2) & 1) == 0)
        {
          goto LABEL_35;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(MHSchemaMHLatticeFalseTriggerMitigationEnded);
    if (!PBReaderPlaceMark()
      || (MHSchemaMHLatticeFalseTriggerMitigationEndedReadFrom(v18, a2, v19) & 1) == 0)
    {
      goto LABEL_35;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHLatticeFalseTriggerMitigationFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setErrorCode:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHLatticeFalseTriggerMitigationStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setModelVersion:", v17);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHMitigationDecisionRecommendedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setIsMitigationRecommended:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHOdldFalseTriggerMitigatedReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  SISchemaUUID *v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v6) == 0;
  v8 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v6))
      return *(_BYTE *)(a2 + *v6) == 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *v4;
      v13 = *(_QWORD *)(a2 + v12);
      v14 = v13 + 1;
      if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
        break;
      v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
      *(_QWORD *)(a2 + v12) = v14;
      v11 |= (unint64_t)(v15 & 0x7F) << v9;
      if ((v15 & 0x80) == 0)
        goto LABEL_12;
      v9 += 7;
      v16 = v10++ >= 9;
      if (v16)
      {
        v11 = 0;
        v17 = *v6;
        v18 = *(unsigned __int8 *)(a2 + v17);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
    v17 = *v6;
    v18 = *(unsigned __int8 *)(a2 + v17);
    if (*(_BYTE *)(a2 + v17))
      v11 = 0;
LABEL_14:
    if (v18 || (v11 & 7) == 4)
      return *(_BYTE *)(a2 + *v6) == 0;
    switch((v11 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v20 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setModelVersion:", v20);
        goto LABEL_42;
      case 2u:
        v22 = *v4;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setOdldScore:", a3);
        goto LABEL_62;
      case 3u:
        v24 = *v4;
        v25 = *(_QWORD *)(a2 + v24);
        if (v25 <= 0xFFFFFFFFFFFFFFFBLL && v25 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v25);
          *(_QWORD *)(a2 + v24) = v25 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setOdldScoreThreshold:", a3);
        goto LABEL_62;
      case 4u:
        PBReaderReadString();
        v20 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setErrorMessage:", v20);
        goto LABEL_42;
      case 5u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v4;
          v30 = *(_QWORD *)(a2 + v29);
          v31 = v30 + 1;
          if (v30 == -1 || v31 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v30);
            *(_QWORD *)(a2 + v29) = v31;
            v28 |= (unint64_t)(v32 & 0x7F) << v26;
            if (v32 < 0)
            {
              v26 += 7;
              v16 = v27++ >= 9;
              if (v16)
              {
                v33 = 0;
                goto LABEL_53;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v33 = 0;
        else
          v33 = v28;
LABEL_53:
        objc_msgSend(a1, "setErrorCode:", v33);
        goto LABEL_62;
      case 6u:
        v20 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v20, a2) & 1) == 0)
          goto LABEL_64;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAnchorRequestId:", v20, 0, 0);
        goto LABEL_42;
      case 7u:
        v20 = objc_alloc_init(SISchemaUUID);
        if (PBReaderPlaceMark() && (SISchemaUUIDReadFrom(v20, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setPreviousRequestId:", v20, 0, 0);
LABEL_42:

LABEL_62:
          if (*(_QWORD *)(a2 + *v4) >= *(_QWORD *)(a2 + *v5))
            return *(_BYTE *)(a2 + *v6) == 0;
          continue;
        }
LABEL_64:

        return 0;
      case 8u:
        v34 = *v4;
        v35 = *(_QWORD *)(a2 + v34);
        if (v35 <= 0xFFFFFFFFFFFFFFFBLL && v35 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v35);
          *(_QWORD *)(a2 + v34) = v35 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setAnchorSocialScore:", a3);
        goto LABEL_62;
      case 9u:
        v36 = *v4;
        v37 = *(_QWORD *)(a2 + v36);
        if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v37);
          *(_QWORD *)(a2 + v36) = v37 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setSocialScore:", a3);
        goto LABEL_62;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_62;
    }
  }
}

uint64_t MHSchemaMHOnDeviceEndpointerContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setEnabled:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHServerEndpointerContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setEnabled:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHSiriDirectedSpeechDetectionFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setErrorMessage:", v24);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_34;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_34:
        objc_msgSend(a1, "setErrorCode:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MHSchemaMHSiriLaunchRequestContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MHSchemaMHSiriLaunchRequestStarted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MHSchemaMHSiriLaunchRequestStarted);
        if (!PBReaderPlaceMark() || (MHSchemaMHSiriLaunchRequestStartedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(MHSchemaMHSiriLaunchRequestEnded);
    if (!PBReaderPlaceMark() || (MHSchemaMHSiriLaunchRequestEndedReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHSiriLaunchRequestEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHSiriLaunchRequestStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHSpeakerFalseTriggerMitigatedReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  void *v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v6))
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)(a2 + v12);
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        v16 = v10++ >= 9;
        if (v16)
        {
          v11 = 0;
          v17 = *v6;
          v18 = *(unsigned __int8 *)(a2 + v17);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
      v17 = *v6;
      v18 = *(unsigned __int8 *)(a2 + v17);
      if (*(_BYTE *)(a2 + v17))
        v11 = 0;
LABEL_14:
      if (v18 || (v11 & 7) == 4)
        break;
      switch((v11 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setModelVersion:", v20);
          goto LABEL_29;
        case 2u:
          v22 = *v4;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setSpeakerMatchScore:", a3);
          continue;
        case 3u:
          v24 = *v4;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 <= 0xFFFFFFFFFFFFFFFBLL && v25 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setThresholdScore:", a3);
          continue;
        case 4u:
          PBReaderReadString();
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setErrorMessage:", v20);
LABEL_29:

          continue;
        case 5u:
          v26 = *v4;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(_QWORD *)(a2 + *v5))
          {
            v28 = *(double *)(*(_QWORD *)(a2 + *v8) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            v28 = 0.0;
          }
          objc_msgSend(a1, "setProcessedAudioDurationInNs:", v28);
          continue;
        case 6u:
          v29 = 0;
          v30 = 0;
          v31 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v32 = *v4;
        v33 = *(_QWORD *)(a2 + v32);
        v34 = v33 + 1;
        if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v5))
          break;
        v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v33);
        *(_QWORD *)(a2 + v32) = v34;
        v31 |= (unint64_t)(v35 & 0x7F) << v29;
        if ((v35 & 0x80) == 0)
          goto LABEL_41;
        v29 += 7;
        v16 = v30++ >= 9;
        if (v16)
        {
          v36 = 0;
          goto LABEL_44;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_41:
      v36 = *(_BYTE *)(a2 + *v6) ? 0 : v31;
LABEL_44:
      objc_msgSend(a1, "setErrorCode:", v36);
    }
    while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5));
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

uint64_t MHSchemaMHStatisticDistributionInfoReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t v78;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v6))
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)(a2 + v12);
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        v16 = v10++ >= 9;
        if (v16)
        {
          v11 = 0;
          v17 = *v6;
          v18 = *(unsigned __int8 *)(a2 + v17);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
      v17 = *v6;
      v18 = *(unsigned __int8 *)(a2 + v17);
      if (*(_BYTE *)(a2 + v17))
        v11 = 0;
LABEL_14:
      if (v18 || (v11 & 7) == 4)
        break;
      switch((v11 >> 3))
      {
        case 1u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          while (1)
          {
            v23 = *v4;
            v24 = *(_QWORD *)(a2 + v23);
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v5))
              break;
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v24);
            *(_QWORD *)(a2 + v23) = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0)
              goto LABEL_74;
            v20 += 7;
            v16 = v21++ >= 9;
            if (v16)
            {
              v27 = 0;
              goto LABEL_77;
            }
          }
          *(_BYTE *)(a2 + *v6) = 1;
LABEL_74:
          if (*(_BYTE *)(a2 + *v6))
            v27 = 0;
          else
            v27 = v22;
LABEL_77:
          objc_msgSend(a1, "setNum:", v27);
          continue;
        case 2u:
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (2)
          {
            v32 = *v4;
            v33 = *(_QWORD *)(a2 + v32);
            v34 = v33 + 1;
            if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v33);
              *(_QWORD *)(a2 + v32) = v34;
              v31 |= (unint64_t)(v35 & 0x7F) << v29;
              if (v35 < 0)
              {
                v29 += 7;
                v16 = v30++ >= 9;
                if (v16)
                {
                  v36 = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v36 = 0;
          else
            v36 = v31;
LABEL_82:
          objc_msgSend(a1, "setMax:", v36);
          continue;
        case 3u:
          v37 = 0;
          v38 = 0;
          v39 = 0;
          while (2)
          {
            v40 = *v4;
            v41 = *(_QWORD *)(a2 + v40);
            v42 = v41 + 1;
            if (v41 == -1 || v42 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v41);
              *(_QWORD *)(a2 + v40) = v42;
              v39 |= (unint64_t)(v43 & 0x7F) << v37;
              if (v43 < 0)
              {
                v37 += 7;
                v16 = v38++ >= 9;
                if (v16)
                {
                  v44 = 0;
                  goto LABEL_87;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v44 = 0;
          else
            v44 = v39;
LABEL_87:
          objc_msgSend(a1, "setMin:", v44);
          continue;
        case 4u:
          v45 = 0;
          v46 = 0;
          v47 = 0;
          while (2)
          {
            v48 = *v4;
            v49 = *(_QWORD *)(a2 + v48);
            v50 = v49 + 1;
            if (v49 == -1 || v50 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v49);
              *(_QWORD *)(a2 + v48) = v50;
              v47 |= (unint64_t)(v51 & 0x7F) << v45;
              if (v51 < 0)
              {
                v45 += 7;
                v16 = v46++ >= 9;
                if (v16)
                {
                  v52 = 0;
                  goto LABEL_92;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v52 = 0;
          else
            v52 = v47;
LABEL_92:
          objc_msgSend(a1, "setAvg:", v52);
          continue;
        case 5u:
          v53 = 0;
          v54 = 0;
          v55 = 0;
          while (2)
          {
            v56 = *v4;
            v57 = *(_QWORD *)(a2 + v56);
            v58 = v57 + 1;
            if (v57 == -1 || v58 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v57);
              *(_QWORD *)(a2 + v56) = v58;
              v55 |= (unint64_t)(v59 & 0x7F) << v53;
              if (v59 < 0)
              {
                v53 += 7;
                v16 = v54++ >= 9;
                if (v16)
                {
                  v60 = 0;
                  goto LABEL_97;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v60 = 0;
          else
            v60 = v55;
LABEL_97:
          objc_msgSend(a1, "setMedian:", v60);
          continue;
        case 6u:
          v61 = 0;
          v62 = 0;
          v63 = 0;
          while (2)
          {
            v64 = *v4;
            v65 = *(_QWORD *)(a2 + v64);
            v66 = v65 + 1;
            if (v65 == -1 || v66 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v67 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v65);
              *(_QWORD *)(a2 + v64) = v66;
              v63 |= (unint64_t)(v67 & 0x7F) << v61;
              if (v67 < 0)
              {
                v61 += 7;
                v16 = v62++ >= 9;
                if (v16)
                {
                  v68 = 0;
                  goto LABEL_102;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v68 = 0;
          else
            v68 = v63;
LABEL_102:
          objc_msgSend(a1, "setP95:", v68);
          continue;
        case 7u:
          v69 = *v4;
          v70 = *(_QWORD *)(a2 + v69);
          if (v70 <= 0xFFFFFFFFFFFFFFFBLL && v70 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v70);
            *(_QWORD *)(a2 + v69) = v70 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setStd:", a3);
          continue;
        case 8u:
          v71 = 0;
          v72 = 0;
          v73 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v74 = *v4;
        v75 = *(_QWORD *)(a2 + v74);
        v76 = v75 + 1;
        if (v75 == -1 || v76 > *(_QWORD *)(a2 + *v5))
          break;
        v77 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v75);
        *(_QWORD *)(a2 + v74) = v76;
        v73 |= (unint64_t)(v77 & 0x7F) << v71;
        if ((v77 & 0x80) == 0)
          goto LABEL_104;
        v71 += 7;
        v16 = v72++ >= 9;
        if (v16)
        {
          v78 = 0;
          goto LABEL_107;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_104:
      v78 = *(_BYTE *)(a2 + *v6) ? 0 : v73;
LABEL_107:
      objc_msgSend(a1, "setWarmup:", v78);
    }
    while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5));
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

uint64_t MHSchemaMHTrailingPacketLatencyInfoReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_71;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v23 = 0;
              goto LABEL_74;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_71:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
          else
            v23 = v19;
LABEL_74:
          objc_msgSend(a1, "setNum:", v23);
          continue;
        case 2u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (v14)
                {
                  v31 = 0;
                  goto LABEL_79;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
          else
            v31 = v27;
LABEL_79:
          objc_msgSend(a1, "setMax:", v31);
          continue;
        case 3u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (2)
          {
            v35 = *v3;
            v36 = *(_QWORD *)(a2 + v35);
            if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
              *(_QWORD *)(a2 + v35) = v36 + 1;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                v14 = v33++ >= 9;
                if (v14)
                {
                  v38 = 0;
                  goto LABEL_84;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
          else
            v38 = v34;
LABEL_84:
          objc_msgSend(a1, "setMin:", v38);
          continue;
        case 4u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                v14 = v40++ >= 9;
                if (v14)
                {
                  v45 = 0;
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v45 = 0;
          else
            v45 = v41;
LABEL_89:
          objc_msgSend(a1, "setAvg:", v45);
          continue;
        case 5u:
          v46 = 0;
          v47 = 0;
          v48 = 0;
          while (2)
          {
            v49 = *v3;
            v50 = *(_QWORD *)(a2 + v49);
            if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
              *(_QWORD *)(a2 + v49) = v50 + 1;
              v48 |= (unint64_t)(v51 & 0x7F) << v46;
              if (v51 < 0)
              {
                v46 += 7;
                v14 = v47++ >= 9;
                if (v14)
                {
                  v52 = 0;
                  goto LABEL_94;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v52 = 0;
          else
            v52 = v48;
LABEL_94:
          objc_msgSend(a1, "setMedian:", v52);
          continue;
        case 6u:
          v53 = 0;
          v54 = 0;
          v55 = 0;
          while (2)
          {
            v56 = *v3;
            v57 = *(_QWORD *)(a2 + v56);
            if (v57 == -1 || v57 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
              *(_QWORD *)(a2 + v56) = v57 + 1;
              v55 |= (unint64_t)(v58 & 0x7F) << v53;
              if (v58 < 0)
              {
                v53 += 7;
                v14 = v54++ >= 9;
                if (v14)
                {
                  v59 = 0;
                  goto LABEL_99;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v59 = 0;
          else
            v59 = v55;
LABEL_99:
          objc_msgSend(a1, "setP95:", v59);
          continue;
        case 7u:
          v60 = 0;
          v61 = 0;
          v62 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v63 = *v3;
        v64 = *(_QWORD *)(a2 + v63);
        if (v64 == -1 || v64 >= *(_QWORD *)(a2 + *v4))
          break;
        v65 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v64);
        *(_QWORD *)(a2 + v63) = v64 + 1;
        v62 |= (unint64_t)(v65 & 0x7F) << v60;
        if ((v65 & 0x80) == 0)
          goto LABEL_101;
        v60 += 7;
        v14 = v61++ >= 9;
        if (v14)
        {
          v66 = 0;
          goto LABEL_104;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_101:
      v66 = *(_BYTE *)(a2 + *v5) ? 0 : v62;
LABEL_104:
      objc_msgSend(a1, "setStd:", v66);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHUnintendedResponseSuppressionEndedReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v17;
  int v18;
  BOOL v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t result;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v6))
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = *v4;
          v13 = *(_QWORD *)(a2 + v12);
          v14 = v13 + 1;
          if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
            break;
          v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
          *(_QWORD *)(a2 + v12) = v14;
          v11 |= (unint64_t)(v15 & 0x7F) << v9;
          if ((v15 & 0x80) == 0)
            goto LABEL_12;
          v9 += 7;
          if (v10++ >= 9)
          {
            v11 = 0;
            v17 = *v6;
            v18 = *(unsigned __int8 *)(a2 + v17);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
        v17 = *v6;
        v18 = *(unsigned __int8 *)(a2 + v17);
        if (*(_BYTE *)(a2 + v17))
          v11 = 0;
LABEL_14:
        if (v18)
          v19 = 1;
        else
          v19 = (v11 & 7) == 4;
        if (!v19)
        {
          switch((v11 >> 3))
          {
            case 1u:
              PBReaderReadString();
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(a1, "setModelVersion:", v20);
              goto LABEL_27;
            case 2u:
              v21 = *v4;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v22);
                *(_QWORD *)(a2 + v21) = v22 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setScore:", a3);
              goto LABEL_44;
            case 3u:
              v23 = *v4;
              v24 = *(_QWORD *)(a2 + v23);
              if (v24 <= 0xFFFFFFFFFFFFFFFBLL && v24 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v24);
                *(_QWORD *)(a2 + v23) = v24 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setThreshold:", a3);
              goto LABEL_44;
            case 4u:
              PBReaderReadString();
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(a1, "setMitigationAssetVersion:", v20);
LABEL_27:

              goto LABEL_44;
            case 5u:
              v25 = *v4;
              v26 = *(_QWORD *)(a2 + v25);
              if (v26 <= 0xFFFFFFFFFFFFFFFBLL && v26 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v26);
                *(_QWORD *)(a2 + v25) = v26 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setSpeakerIDThreshold:", a3);
              goto LABEL_44;
            case 6u:
              v27 = *v4;
              v28 = *(_QWORD *)(a2 + v27);
              if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= *(_QWORD *)(a2 + *v5))
              {
                LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v28);
                *(_QWORD *)(a2 + v27) = v28 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v17) = 1;
                LODWORD(a3) = 0;
              }
              objc_msgSend(a1, "setSpeakerIdScoreThreshold:", a3);
              goto LABEL_44;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_44:
              if (*(_QWORD *)(a2 + *v4) >= *(_QWORD *)(a2 + *v5))
                return *(_BYTE *)(a2 + *v6) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

BOOL MHSchemaMHUnintendedResponseSuppressionEvaluationContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  MHSchemaMHUnintendedResponseSuppressionFailed *v18;
  double v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(MHSchemaMHUnintendedResponseSuppressionFailed);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHUnintendedResponseSuppressionFailedReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setFailed:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(MHSchemaMHUnintendedResponseSuppressionStarted);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHUnintendedResponseSuppressionStartedReadFrom(v18, a2) & 1) == 0)
        {
          goto LABEL_35;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(MHSchemaMHUnintendedResponseSuppressionEnded);
    if (!PBReaderPlaceMark()
      || (MHSchemaMHUnintendedResponseSuppressionEndedReadFrom(v18, a2, v19) & 1) == 0)
    {
      goto LABEL_35;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHUnintendedResponseSuppressionFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setErrorCode:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHUnintendedResponseSuppressionStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  MHSchemaMHAcousticFalseTriggerMitigationScoreGenerated *v39;
  double v40;
  double v41;
  double v42;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_53;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_56;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_56:
        objc_msgSend(a1, "setNumAsrRecords:", v23);
        goto LABEL_67;
      case 2u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v31 = 0;
                goto LABEL_61;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
        else
          v31 = v27;
LABEL_61:
        objc_msgSend(a1, "setNumTokensTopPath:", v31);
        goto LABEL_67;
      case 3u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v38 = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v38 = 0;
        else
          v38 = v34;
LABEL_66:
        objc_msgSend(a1, "setTrailingSilenceDurationInNs:", v38);
        goto LABEL_67;
      case 4u:
        v39 = objc_alloc_init(MHSchemaMHAcousticFalseTriggerMitigationScoreGenerated);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHAcousticFalseTriggerMitigationScoreGeneratedReadFrom(v39, a2, v40) & 1) == 0)
        {
          goto LABEL_69;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setAftmScore:", v39, 0, 0);
        goto LABEL_51;
      case 5u:
        v39 = objc_alloc_init(MHSchemaMHLatticeFalseTriggerMitigationEnded);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHLatticeFalseTriggerMitigationEndedReadFrom(v39, a2, v41) & 1) == 0)
        {
          goto LABEL_69;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLrnnScore:", v39, 0, 0);
        goto LABEL_51;
      case 6u:
        v39 = objc_alloc_init(MHSchemaMHUserEngagementFalseTriggerMitigationScoreGenerated);
        if (PBReaderPlaceMark()
          && (MHSchemaMHUserEngagementFalseTriggerMitigationScoreGeneratedReadFrom(v39, a2, v42) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setUemScore:", v39, 0, 0);
LABEL_51:

LABEL_67:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_69:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_67;
    }
  }
}

BOOL MHSchemaMHVoiceAdBlockerContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  MHSchemaMHAdMatchingFailed *v18;
  double v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(MHSchemaMHAdMatchingFailed);
        if (!PBReaderPlaceMark() || (MHSchemaMHAdMatchingFailedReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setFailed:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(MHSchemaMHAdMatchingStarted);
        if (!PBReaderPlaceMark() || (MHSchemaMHAdMatchingStartedReadFrom(v18, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(MHSchemaMHAdMatchingEnded);
    if (!PBReaderPlaceMark() || (MHSchemaMHAdMatchingEndedReadFrom(v18, a2, v19) & 1) == 0)
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MHSchemaMHVoiceTriggerContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MHSchemaMHVoiceTriggerSecondPassStarted *v17;
  double v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(MHSchemaMHVoiceTriggerSecondPassStarted);
        if (!PBReaderPlaceMark()
          || (MHSchemaMHVoiceTriggerSecondPassStartedReadFrom(v17, a2, v18) & 1) == 0)
        {
          goto LABEL_36;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
        goto LABEL_33;
      case 2u:
        v17 = objc_alloc_init(MHSchemaMHVoiceTriggerSecondPassTriggered);
        if (!PBReaderPlaceMark() || (MHSchemaMHVoiceTriggerSecondPassTriggeredReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEnded:", v17, 0, 0);
        goto LABEL_33;
      case 3u:
        v17 = objc_alloc_init(MHSchemaMHVoiceTriggerSecondPassRejected);
        if (!PBReaderPlaceMark() || (MHSchemaMHVoiceTriggerSecondPassRejectedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFailed:", v17, 0, 0);
        goto LABEL_33;
      case 4u:
        v17 = objc_alloc_init(MHSchemaMHVoiceTriggerSecondPassCancelled);
        if (PBReaderPlaceMark() && (MHSchemaMHVoiceTriggerSecondPassCancelledReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCancelled:", v17, 0, 0);
LABEL_33:

LABEL_34:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_36:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_34;
    }
  }
}

uint64_t MHSchemaMHVoiceTriggerEventInfoReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  uint64_t v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  uint64_t v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char v138;
  uint64_t v139;
  char v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char v146;
  uint64_t v147;
  char v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  uint64_t v155;
  char v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char v162;
  uint64_t v163;
  char v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char v170;
  uint64_t v171;
  char v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char v178;
  uint64_t v179;
  char v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char v186;
  uint64_t v187;
  char v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  char v194;
  uint64_t v195;
  char v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  char v202;
  char v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  char v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  char v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  char v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  char v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  char v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  char v244;
  uint64_t v245;
  char v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  char v252;
  uint64_t v253;
  char v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  char v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  double v264;
  uint64_t v265;
  unint64_t v266;
  double v267;
  uint64_t v268;
  unint64_t v269;
  double v270;
  char v271;
  unsigned int v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  char v277;
  uint64_t v278;
  char v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  char v285;
  uint64_t v286;
  unint64_t v287;
  char v288;
  unsigned int v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  char v294;
  uint64_t v295;
  char v296;
  unsigned int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  char v302;
  uint64_t v303;
  char v304;
  unsigned int v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  char v310;
  uint64_t v311;
  SISchemaUUID *v312;
  char v313;
  unsigned int v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  char v319;
  char v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  char v326;
  char v327;
  unsigned int v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  char v333;
  uint64_t v334;
  char v335;
  unsigned int v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  char v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  unint64_t v346;
  char v347;
  unsigned int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  char v353;
  uint64_t v354;
  char v355;
  unsigned int v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  char v361;
  uint64_t v362;
  unint64_t v363;
  char v364;
  unsigned int v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  char v370;
  char v371;
  unsigned int v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  char v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  unint64_t v381;
  char v382;
  unsigned int v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  char v388;
  uint64_t v389;
  char v390;
  unsigned int v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unint64_t v395;
  char v396;
  char v397;
  unsigned int v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t v402;
  char v403;
  char v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  unint64_t v409;
  char v410;
  char v411;
  unsigned int v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  char v417;
  char v418;
  unsigned int v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  unint64_t v423;
  char v424;
  uint64_t v425;
  char v426;
  unsigned int v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  char v432;
  uint64_t v433;
  char v434;
  unsigned int v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t v439;
  char v440;
  uint64_t v441;
  char v442;
  unsigned int v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  char v447;
  uint64_t v448;
  char v449;
  unsigned int v450;
  uint64_t v451;
  uint64_t v452;
  unint64_t v453;
  char v454;
  uint64_t v455;
  char v456;
  unsigned int v457;
  uint64_t v458;
  uint64_t v459;
  unint64_t v460;
  char v461;
  uint64_t v462;
  char v463;
  unsigned int v464;
  uint64_t v465;
  uint64_t v466;
  unint64_t v467;
  char v468;
  uint64_t v469;
  char v470;
  unsigned int v471;
  uint64_t v472;
  uint64_t v473;
  unint64_t v474;
  char v475;
  uint64_t v476;
  char v477;
  unsigned int v478;
  uint64_t v479;
  uint64_t v480;
  unint64_t v481;
  char v482;
  uint64_t v483;
  char v484;
  unsigned int v485;
  uint64_t v486;
  uint64_t v487;
  unint64_t v488;
  char v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t v492;
  double v493;
  char v494;
  unsigned int v495;
  uint64_t v496;
  uint64_t v497;
  unint64_t v498;
  char v499;
  char v500;
  unsigned int v501;
  uint64_t v502;
  uint64_t v503;
  unint64_t v504;
  char v505;
  uint64_t v506;
  uint64_t v507;
  unint64_t v508;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v6) == 0;
  v8 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v6))
      return *(_BYTE *)(a2 + *v6) == 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *v4;
      v13 = *(_QWORD *)(a2 + v12);
      if (v13 == -1 || v13 >= *(_QWORD *)(a2 + *v5))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
      *(_QWORD *)(a2 + v12) = v13 + 1;
      v11 |= (unint64_t)(v14 & 0x7F) << v9;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v9 += 7;
      v15 = v10++ >= 9;
      if (v15)
      {
        v11 = 0;
        v16 = *v6;
        v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
    v16 = *v6;
    v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(_BYTE *)(a2 + v16))
      v11 = 0;
LABEL_14:
    if (v17 || (v11 & 7) == 4)
      return *(_BYTE *)(a2 + *v6) == 0;
    switch((v11 >> 3))
    {
      case 1u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (1)
        {
          v22 = *v4;
          v23 = *(_QWORD *)(a2 + v22);
          v24 = v23 + 1;
          if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v5))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v23);
          *(_QWORD *)(a2 + v22) = v24;
          v21 |= (unint64_t)(v25 & 0x7F) << v19;
          if ((v25 & 0x80) == 0)
            goto LABEL_515;
          v19 += 7;
          v15 = v20++ >= 9;
          if (v15)
          {
            v26 = 0;
            goto LABEL_518;
          }
        }
        *(_BYTE *)(a2 + *v6) = 1;
LABEL_515:
        if (*(_BYTE *)(a2 + *v6))
          v26 = 0;
        else
          v26 = v21;
LABEL_518:
        objc_msgSend(a1, "setSecondPassAnalyerStartSampleCount:", v26);
        goto LABEL_492;
      case 2u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        while (2)
        {
          v30 = *v4;
          v31 = *(_QWORD *)(a2 + v30);
          v32 = v31 + 1;
          if (v31 == -1 || v32 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v31);
            *(_QWORD *)(a2 + v30) = v32;
            v29 |= (unint64_t)(v33 & 0x7F) << v27;
            if (v33 < 0)
            {
              v27 += 7;
              v15 = v28++ >= 9;
              if (v15)
              {
                v34 = 0;
                goto LABEL_523;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v34 = 0;
        else
          v34 = v29;
LABEL_523:
        objc_msgSend(a1, "setSecondPassAnalyerEndSampleCount:", v34);
        goto LABEL_492;
      case 0xEu:
        v36 = *v4;
        v37 = *(_QWORD *)(a2 + v36);
        if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v37);
          *(_QWORD *)(a2 + v36) = v37 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setSatScore:", a3);
        goto LABEL_492;
      case 0xFu:
        v38 = 0;
        v39 = 0;
        v40 = 0;
        while (2)
        {
          v41 = *v4;
          v42 = *(_QWORD *)(a2 + v41);
          v43 = v42 + 1;
          if (v42 == -1 || v43 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v42);
            *(_QWORD *)(a2 + v41) = v43;
            v40 |= (unint64_t)(v44 & 0x7F) << v38;
            if (v44 < 0)
            {
              v38 += 7;
              v15 = v39++ >= 9;
              if (v15)
              {
                v45 = 0;
                goto LABEL_528;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v45 = 0;
        else
          v45 = v40;
LABEL_528:
        objc_msgSend(a1, "setSatNumTrainingUtterances:", v45);
        goto LABEL_492;
      case 0x10u:
        v46 = *v4;
        v47 = *(_QWORD *)(a2 + v46);
        if (v47 <= 0xFFFFFFFFFFFFFFFBLL && v47 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v47);
          *(_QWORD *)(a2 + v46) = v47 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setSatThreshold:", a3);
        goto LABEL_492;
      case 0x11u:
        v48 = 0;
        v49 = 0;
        v50 = 0;
        while (2)
        {
          v51 = *v4;
          v52 = *(_QWORD *)(a2 + v51);
          v53 = v52 + 1;
          if (v52 == -1 || v53 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v52);
            *(_QWORD *)(a2 + v51) = v53;
            v50 |= (unint64_t)(v54 & 0x7F) << v48;
            if (v54 < 0)
            {
              v48 += 7;
              v15 = v49++ >= 9;
              if (v15)
              {
                v50 = 0;
                goto LABEL_532;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v50 = 0;
LABEL_532:
        objc_msgSend(a1, "setSatTriggered:", v50 != 0);
        goto LABEL_492;
      case 0x12u:
        v55 = *v4;
        v56 = *(_QWORD *)(a2 + v55);
        if (v56 <= 0xFFFFFFFFFFFFFFFBLL && v56 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v56);
          *(_QWORD *)(a2 + v55) = v56 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setTdSpeakerRecognizerScore:", a3);
        goto LABEL_492;
      case 0x13u:
        v57 = *v4;
        v58 = *(_QWORD *)(a2 + v57);
        if (v58 <= 0xFFFFFFFFFFFFFFFBLL && v58 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v58);
          *(_QWORD *)(a2 + v57) = v58 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setTdSpeakerRecognizerCombinedScore:", a3);
        goto LABEL_492;
      case 0x14u:
        v59 = *v4;
        v60 = *(_QWORD *)(a2 + v59);
        if (v60 <= 0xFFFFFFFFFFFFFFFBLL && v60 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v60);
          *(_QWORD *)(a2 + v59) = v60 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setTdSpeakerRecognizerCombinedThreshold:", a3);
        goto LABEL_492;
      case 0x15u:
        v61 = *v4;
        v62 = *(_QWORD *)(a2 + v61);
        if (v62 <= 0xFFFFFFFFFFFFFFFBLL && v62 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v62);
          *(_QWORD *)(a2 + v61) = v62 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setTdSpeakerRecognizerCombinationWeight:", a3);
        goto LABEL_492;
      case 0x16u:
        v63 = 0;
        v64 = 0;
        v65 = 0;
        while (2)
        {
          v66 = *v4;
          v67 = *(_QWORD *)(a2 + v66);
          v68 = v67 + 1;
          if (v67 == -1 || v68 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v69 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v67);
            *(_QWORD *)(a2 + v66) = v68;
            v65 |= (unint64_t)(v69 & 0x7F) << v63;
            if (v69 < 0)
            {
              v63 += 7;
              v15 = v64++ >= 9;
              if (v15)
              {
                v70 = 0;
                goto LABEL_537;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v70 = 0;
        else
          v70 = v65;
LABEL_537:
        objc_msgSend(a1, "setBiometricClue:", v70);
        goto LABEL_492;
      case 0x17u:
        v71 = 0;
        v72 = 0;
        v73 = 0;
        while (2)
        {
          v74 = *v4;
          v75 = *(_QWORD *)(a2 + v74);
          v76 = v75 + 1;
          if (v75 == -1 || v76 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v77 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v75);
            *(_QWORD *)(a2 + v74) = v76;
            v73 |= (unint64_t)(v77 & 0x7F) << v71;
            if (v77 < 0)
            {
              v71 += 7;
              v15 = v72++ >= 9;
              if (v15)
              {
                v73 = 0;
                goto LABEL_541;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v73 = 0;
LABEL_541:
        objc_msgSend(a1, "setSatBeingTrained:", v73 != 0);
        goto LABEL_492;
      case 0x18u:
        v78 = 0;
        v79 = 0;
        v80 = 0;
        while (2)
        {
          v81 = *v4;
          v82 = *(_QWORD *)(a2 + v81);
          v83 = v82 + 1;
          if (v82 == -1 || v83 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v84 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v82);
            *(_QWORD *)(a2 + v81) = v83;
            v80 |= (unint64_t)(v84 & 0x7F) << v78;
            if (v84 < 0)
            {
              v78 += 7;
              v15 = v79++ >= 9;
              if (v15)
              {
                v85 = 0;
                goto LABEL_546;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v85 = 0;
        else
          v85 = v80;
LABEL_546:
        objc_msgSend(a1, "setLastConsecutivePHSRejects:", v85);
        goto LABEL_492;
      case 0x19u:
        v86 = 0;
        v87 = 0;
        v88 = 0;
        while (2)
        {
          v89 = *v4;
          v90 = *(_QWORD *)(a2 + v89);
          v91 = v90 + 1;
          if (v90 == -1 || v91 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v92 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v90);
            *(_QWORD *)(a2 + v89) = v91;
            v88 |= (unint64_t)(v92 & 0x7F) << v86;
            if (v92 < 0)
            {
              v86 += 7;
              v15 = v87++ >= 9;
              if (v15)
              {
                v93 = 0;
                goto LABEL_551;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v93 = 0;
        else
          v93 = v88;
LABEL_551:
        objc_msgSend(a1, "setDeltaTimeInNsFromlastPHSReject:", v93);
        goto LABEL_492;
      case 0x1Au:
        v94 = *v4;
        v95 = *(_QWORD *)(a2 + v94);
        if (v95 <= 0xFFFFFFFFFFFFFFFBLL && v95 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v95);
          *(_QWORD *)(a2 + v94) = v95 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setTriggerExplicitSatScore:", a3);
        goto LABEL_492;
      case 0x1Bu:
        v96 = *v4;
        v97 = *(_QWORD *)(a2 + v96);
        if (v97 <= 0xFFFFFFFFFFFFFFFBLL && v97 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v97);
          *(_QWORD *)(a2 + v96) = v97 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setTriggerExplicitTDSRSatScore:", a3);
        goto LABEL_492;
      case 0x1Cu:
        v98 = *v4;
        v99 = *(_QWORD *)(a2 + v98);
        if (v99 <= 0xFFFFFFFFFFFFFFFBLL && v99 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v99);
          *(_QWORD *)(a2 + v98) = v99 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setShadowMicScore:", a3);
        goto LABEL_492;
      case 0x1Du:
        v100 = *v4;
        v101 = *(_QWORD *)(a2 + v100);
        if (v101 <= 0xFFFFFFFFFFFFFFFBLL && v101 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v101);
          *(_QWORD *)(a2 + v100) = v101 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setShadowMicScoreThresholdForVAD:", a3);
        goto LABEL_492;
      case 0x1Eu:
        v102 = *v4;
        v103 = *(_QWORD *)(a2 + v102);
        if (v103 <= 0xFFFFFFFFFFFFFFFBLL && v103 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v103);
          *(_QWORD *)(a2 + v102) = v103 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setRemoteMicVADScore:", a3);
        goto LABEL_492;
      case 0x1Fu:
        v104 = *v4;
        v105 = *(_QWORD *)(a2 + v104);
        if (v105 <= 0xFFFFFFFFFFFFFFFBLL && v105 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v105);
          *(_QWORD *)(a2 + v104) = v105 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setRemoteMicVADThreshold:", a3);
        goto LABEL_492;
      case 0x20u:
        v106 = *v4;
        v107 = *(_QWORD *)(a2 + v106);
        if (v107 <= 0xFFFFFFFFFFFFFFFBLL && v107 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v107);
          *(_QWORD *)(a2 + v106) = v107 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setRemoteMicVADMyriadThreshold:", a3);
        goto LABEL_492;
      case 0x21u:
        v108 = 0;
        v109 = 0;
        v110 = 0;
        while (2)
        {
          v111 = *v4;
          v112 = *(_QWORD *)(a2 + v111);
          v113 = v112 + 1;
          if (v112 == -1 || v113 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v114 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v112);
            *(_QWORD *)(a2 + v111) = v113;
            v110 |= (unint64_t)(v114 & 0x7F) << v108;
            if (v114 < 0)
            {
              v108 += 7;
              v15 = v109++ >= 9;
              if (v15)
              {
                v115 = 0;
                goto LABEL_556;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v115 = 0;
        else
          v115 = v110;
LABEL_556:
        objc_msgSend(a1, "setEnhancedCarplayTriggerMode:", v115);
        goto LABEL_492;
      case 0x22u:
        v116 = 0;
        v117 = 0;
        v118 = 0;
        while (2)
        {
          v119 = *v4;
          v120 = *(_QWORD *)(a2 + v119);
          v121 = v120 + 1;
          if (v120 == -1 || v121 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v122 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v120);
            *(_QWORD *)(a2 + v119) = v121;
            v118 |= (unint64_t)(v122 & 0x7F) << v116;
            if (v122 < 0)
            {
              v116 += 7;
              v15 = v117++ >= 9;
              if (v15)
              {
                v123 = 0;
                goto LABEL_561;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v123 = 0;
        else
          v123 = v118;
LABEL_561:
        objc_msgSend(a1, "setTriggerStartSampleCount:", v123);
        goto LABEL_492;
      case 0x23u:
        v124 = 0;
        v125 = 0;
        v126 = 0;
        while (2)
        {
          v127 = *v4;
          v128 = *(_QWORD *)(a2 + v127);
          v129 = v128 + 1;
          if (v128 == -1 || v129 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v130 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v128);
            *(_QWORD *)(a2 + v127) = v129;
            v126 |= (unint64_t)(v130 & 0x7F) << v124;
            if (v130 < 0)
            {
              v124 += 7;
              v15 = v125++ >= 9;
              if (v15)
              {
                v131 = 0;
                goto LABEL_566;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v131 = 0;
        else
          v131 = v126;
LABEL_566:
        objc_msgSend(a1, "setClientStartSampleCount:", v131);
        goto LABEL_492;
      case 0x24u:
        v132 = 0;
        v133 = 0;
        v134 = 0;
        while (2)
        {
          v135 = *v4;
          v136 = *(_QWORD *)(a2 + v135);
          v137 = v136 + 1;
          if (v136 == -1 || v137 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v138 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v136);
            *(_QWORD *)(a2 + v135) = v137;
            v134 |= (unint64_t)(v138 & 0x7F) << v132;
            if (v138 < 0)
            {
              v132 += 7;
              v15 = v133++ >= 9;
              if (v15)
              {
                v139 = 0;
                goto LABEL_571;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v139 = 0;
        else
          v139 = v134;
LABEL_571:
        objc_msgSend(a1, "setTriggerEndSampleCount:", v139);
        goto LABEL_492;
      case 0x25u:
        v140 = 0;
        v141 = 0;
        v142 = 0;
        while (2)
        {
          v143 = *v4;
          v144 = *(_QWORD *)(a2 + v143);
          v145 = v144 + 1;
          if (v144 == -1 || v145 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v146 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v144);
            *(_QWORD *)(a2 + v143) = v145;
            v142 |= (unint64_t)(v146 & 0x7F) << v140;
            if (v146 < 0)
            {
              v140 += 7;
              v15 = v141++ >= 9;
              if (v15)
              {
                v147 = 0;
                goto LABEL_576;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v147 = 0;
        else
          v147 = v142;
LABEL_576:
        objc_msgSend(a1, "setTriggerFireSampleCount:", v147);
        goto LABEL_492;
      case 0x26u:
        v148 = 0;
        v149 = 0;
        v150 = 0;
        while (2)
        {
          v151 = *v4;
          v152 = *(_QWORD *)(a2 + v151);
          v153 = v152 + 1;
          if (v152 == -1 || v153 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v154 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v152);
            *(_QWORD *)(a2 + v151) = v153;
            v150 |= (unint64_t)(v154 & 0x7F) << v148;
            if (v154 < 0)
            {
              v148 += 7;
              v15 = v149++ >= 9;
              if (v15)
              {
                v155 = 0;
                goto LABEL_581;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v155 = 0;
        else
          v155 = v150;
LABEL_581:
        objc_msgSend(a1, "setTriggerStartNs:", v155);
        goto LABEL_492;
      case 0x27u:
        v156 = 0;
        v157 = 0;
        v158 = 0;
        while (2)
        {
          v159 = *v4;
          v160 = *(_QWORD *)(a2 + v159);
          v161 = v160 + 1;
          if (v160 == -1 || v161 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v162 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v160);
            *(_QWORD *)(a2 + v159) = v161;
            v158 |= (unint64_t)(v162 & 0x7F) << v156;
            if (v162 < 0)
            {
              v156 += 7;
              v15 = v157++ >= 9;
              if (v15)
              {
                v163 = 0;
                goto LABEL_586;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v163 = 0;
        else
          v163 = v158;
LABEL_586:
        objc_msgSend(a1, "setTriggerEndNs:", v163);
        goto LABEL_492;
      case 0x28u:
        v164 = 0;
        v165 = 0;
        v166 = 0;
        while (2)
        {
          v167 = *v4;
          v168 = *(_QWORD *)(a2 + v167);
          v169 = v168 + 1;
          if (v168 == -1 || v169 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v170 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v168);
            *(_QWORD *)(a2 + v167) = v169;
            v166 |= (unint64_t)(v170 & 0x7F) << v164;
            if (v170 < 0)
            {
              v164 += 7;
              v15 = v165++ >= 9;
              if (v15)
              {
                v171 = 0;
                goto LABEL_591;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v171 = 0;
        else
          v171 = v166;
LABEL_591:
        objc_msgSend(a1, "setTriggerFireNs:", v171);
        goto LABEL_492;
      case 0x29u:
        v172 = 0;
        v173 = 0;
        v174 = 0;
        while (2)
        {
          v175 = *v4;
          v176 = *(_QWORD *)(a2 + v175);
          v177 = v176 + 1;
          if (v176 == -1 || v177 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v178 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v176);
            *(_QWORD *)(a2 + v175) = v177;
            v174 |= (unint64_t)(v178 & 0x7F) << v172;
            if (v178 < 0)
            {
              v172 += 7;
              v15 = v173++ >= 9;
              if (v15)
              {
                v179 = 0;
                goto LABEL_596;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v179 = 0;
        else
          v179 = v174;
LABEL_596:
        objc_msgSend(a1, "setExtraSamplesAtStart:", v179);
        goto LABEL_492;
      case 0x2Au:
        v180 = 0;
        v181 = 0;
        v182 = 0;
        while (2)
        {
          v183 = *v4;
          v184 = *(_QWORD *)(a2 + v183);
          v185 = v184 + 1;
          if (v184 == -1 || v185 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v186 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v184);
            *(_QWORD *)(a2 + v183) = v185;
            v182 |= (unint64_t)(v186 & 0x7F) << v180;
            if (v186 < 0)
            {
              v180 += 7;
              v15 = v181++ >= 9;
              if (v15)
              {
                v187 = 0;
                goto LABEL_601;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v187 = 0;
        else
          v187 = v182;
LABEL_601:
        objc_msgSend(a1, "setAnalyzerPrependingSamples:", v187);
        goto LABEL_492;
      case 0x2Bu:
        v188 = 0;
        v189 = 0;
        v190 = 0;
        while (2)
        {
          v191 = *v4;
          v192 = *(_QWORD *)(a2 + v191);
          v193 = v192 + 1;
          if (v192 == -1 || v193 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v194 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v192);
            *(_QWORD *)(a2 + v191) = v193;
            v190 |= (unint64_t)(v194 & 0x7F) << v188;
            if (v194 < 0)
            {
              v188 += 7;
              v15 = v189++ >= 9;
              if (v15)
              {
                v195 = 0;
                goto LABEL_606;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v195 = 0;
        else
          v195 = v190;
LABEL_606:
        objc_msgSend(a1, "setAnalyzerTrailingSamples:", v195);
        goto LABEL_492;
      case 0x2Cu:
        v196 = 0;
        v197 = 0;
        v198 = 0;
        while (2)
        {
          v199 = *v4;
          v200 = *(_QWORD *)(a2 + v199);
          v201 = v200 + 1;
          if (v200 == -1 || v201 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v202 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v200);
            *(_QWORD *)(a2 + v199) = v201;
            v198 |= (unint64_t)(v202 & 0x7F) << v196;
            if (v202 < 0)
            {
              v196 += 7;
              v15 = v197++ >= 9;
              if (v15)
              {
                v198 = 0;
                goto LABEL_610;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v198 = 0;
LABEL_610:
        objc_msgSend(a1, "setIsTriggerEvent:", v198 != 0);
        goto LABEL_492;
      case 0x2Du:
        v203 = 0;
        v204 = 0;
        v205 = 0;
        while (2)
        {
          v206 = *v4;
          v207 = *(_QWORD *)(a2 + v206);
          v208 = v207 + 1;
          if (v207 == -1 || v208 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v209 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v207);
            *(_QWORD *)(a2 + v206) = v208;
            v205 |= (unint64_t)(v209 & 0x7F) << v203;
            if (v209 < 0)
            {
              v203 += 7;
              v15 = v204++ >= 9;
              if (v15)
              {
                v210 = 0;
                goto LABEL_615;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v210 = 0;
        else
          v210 = v205;
LABEL_615:
        objc_msgSend(a1, "setTotalSampleCount:", v210);
        goto LABEL_492;
      case 0x2Eu:
        v211 = *v4;
        v212 = *(_QWORD *)(a2 + v211);
        if (v212 <= 0xFFFFFFFFFFFFFFFBLL && v212 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v212);
          *(_QWORD *)(a2 + v211) = v212 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setTriggerScore:", a3);
        goto LABEL_492;
      case 0x2Fu:
        v213 = 0;
        v214 = 0;
        v215 = 0;
        while (2)
        {
          v216 = *v4;
          v217 = *(_QWORD *)(a2 + v216);
          v218 = v217 + 1;
          if (v217 == -1 || v218 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v219 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v217);
            *(_QWORD *)(a2 + v216) = v218;
            v215 |= (unint64_t)(v219 & 0x7F) << v213;
            if (v219 < 0)
            {
              v213 += 7;
              v15 = v214++ >= 9;
              if (v15)
              {
                v215 = 0;
                goto LABEL_619;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v215 = 0;
LABEL_619:
        objc_msgSend(a1, "setIsMaximized:", v215 != 0);
        goto LABEL_492;
      case 0x30u:
        v220 = *v4;
        v221 = *(_QWORD *)(a2 + v220);
        if (v221 <= 0xFFFFFFFFFFFFFFFBLL && v221 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v221);
          *(_QWORD *)(a2 + v220) = v221 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setEffectiveThreshold:", a3);
        goto LABEL_492;
      case 0x31u:
        v222 = *v4;
        v223 = *(_QWORD *)(a2 + v222);
        if (v223 <= 0xFFFFFFFFFFFFFFFBLL && v223 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v223);
          *(_QWORD *)(a2 + v222) = v223 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setRecognizerScore:", a3);
        goto LABEL_492;
      case 0x32u:
        v224 = *v4;
        v225 = *(_QWORD *)(a2 + v224);
        if (v225 <= 0xFFFFFFFFFFFFFFFBLL && v225 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v225);
          *(_QWORD *)(a2 + v224) = v225 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setRecognizerThresholdOffset:", a3);
        goto LABEL_492;
      case 0x33u:
        v226 = 0;
        v227 = 0;
        v228 = 0;
        while (2)
        {
          v229 = *v4;
          v230 = *(_QWORD *)(a2 + v229);
          v231 = v230 + 1;
          if (v230 == -1 || v231 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v232 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v230);
            *(_QWORD *)(a2 + v229) = v231;
            v228 |= (unint64_t)(v232 & 0x7F) << v226;
            if (v232 < 0)
            {
              v226 += 7;
              v15 = v227++ >= 9;
              if (v15)
              {
                v233 = 0;
                goto LABEL_624;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v233 = 0;
        else
          v233 = v228;
LABEL_624:
        objc_msgSend(a1, "setRecognizerWaitTimeInNs:", v233);
        goto LABEL_492;
      case 0x34u:
        v234 = *v4;
        v235 = *(_QWORD *)(a2 + v234);
        if (v235 <= 0xFFFFFFFFFFFFFFFBLL && v235 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v235);
          *(_QWORD *)(a2 + v234) = v235 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setRecognizerScaleFactor:", a3);
        goto LABEL_492;
      case 0x35u:
        v236 = *v4;
        v237 = *(_QWORD *)(a2 + v236);
        if (v237 <= 0xFFFFFFFFFFFFFFFBLL && v237 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v237);
          *(_QWORD *)(a2 + v236) = v237 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setThreshold:", a3);
        goto LABEL_492;
      case 0x37u:
        v238 = 0;
        v239 = 0;
        v240 = 0;
        while (2)
        {
          v241 = *v4;
          v242 = *(_QWORD *)(a2 + v241);
          v243 = v242 + 1;
          if (v242 == -1 || v243 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v244 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v242);
            *(_QWORD *)(a2 + v241) = v243;
            v240 |= (unint64_t)(v244 & 0x7F) << v238;
            if (v244 < 0)
            {
              v238 += 7;
              v15 = v239++ >= 9;
              if (v15)
              {
                v245 = 0;
                goto LABEL_629;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v245 = 0;
        else
          v245 = v240;
LABEL_629:
        objc_msgSend(a1, "setTriggerStartTimeOffsetInNs:", v245);
        goto LABEL_492;
      case 0x38u:
        v246 = 0;
        v247 = 0;
        v248 = 0;
        while (2)
        {
          v249 = *v4;
          v250 = *(_QWORD *)(a2 + v249);
          v251 = v250 + 1;
          if (v250 == -1 || v251 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v252 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v250);
            *(_QWORD *)(a2 + v249) = v251;
            v248 |= (unint64_t)(v252 & 0x7F) << v246;
            if (v252 < 0)
            {
              v246 += 7;
              v15 = v247++ >= 9;
              if (v15)
              {
                v253 = 0;
                goto LABEL_634;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v253 = 0;
        else
          v253 = v248;
LABEL_634:
        objc_msgSend(a1, "setTriggerEndTimeOffsetInNs:", v253);
        goto LABEL_492;
      case 0x39u:
        v254 = 0;
        v255 = 0;
        v256 = 0;
        while (2)
        {
          v257 = *v4;
          v258 = *(_QWORD *)(a2 + v257);
          v259 = v258 + 1;
          if (v258 == -1 || v259 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v260 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v258);
            *(_QWORD *)(a2 + v257) = v259;
            v256 |= (unint64_t)(v260 & 0x7F) << v254;
            if (v260 < 0)
            {
              v254 += 7;
              v15 = v255++ >= 9;
              if (v15)
              {
                v261 = 0;
                goto LABEL_639;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v261 = 0;
        else
          v261 = v256;
LABEL_639:
        objc_msgSend(a1, "setTriggerFireTimeOffsetInNs:", v261);
        goto LABEL_492;
      case 0x3Au:
        v262 = *v4;
        v263 = *(_QWORD *)(a2 + v262);
        if (v263 <= 0xFFFFFFFFFFFFFFF7 && v263 + 8 <= *(_QWORD *)(a2 + *v5))
        {
          v264 = *(double *)(*(_QWORD *)(a2 + *v8) + v263);
          *(_QWORD *)(a2 + v262) = v263 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v264 = 0.0;
        }
        objc_msgSend(a1, "setTriggerStartTime:", v264);
        goto LABEL_492;
      case 0x3Bu:
        v265 = *v4;
        v266 = *(_QWORD *)(a2 + v265);
        if (v266 <= 0xFFFFFFFFFFFFFFF7 && v266 + 8 <= *(_QWORD *)(a2 + *v5))
        {
          v267 = *(double *)(*(_QWORD *)(a2 + *v8) + v266);
          *(_QWORD *)(a2 + v265) = v266 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v267 = 0.0;
        }
        objc_msgSend(a1, "setTriggerEndTime:", v267);
        goto LABEL_492;
      case 0x3Cu:
        v268 = *v4;
        v269 = *(_QWORD *)(a2 + v268);
        if (v269 <= 0xFFFFFFFFFFFFFFF7 && v269 + 8 <= *(_QWORD *)(a2 + *v5))
        {
          v270 = *(double *)(*(_QWORD *)(a2 + *v8) + v269);
          *(_QWORD *)(a2 + v268) = v269 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v270 = 0.0;
        }
        objc_msgSend(a1, "setTriggerFiredTime:", v270);
        goto LABEL_492;
      case 0x3Du:
        v271 = 0;
        v272 = 0;
        v273 = 0;
        while (2)
        {
          v274 = *v4;
          v275 = *(_QWORD *)(a2 + v274);
          v276 = v275 + 1;
          if (v275 == -1 || v276 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v277 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v275);
            *(_QWORD *)(a2 + v274) = v276;
            v273 |= (unint64_t)(v277 & 0x7F) << v271;
            if (v277 < 0)
            {
              v271 += 7;
              v15 = v272++ >= 9;
              if (v15)
              {
                v278 = 0;
                goto LABEL_644;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v278 = 0;
        else
          v278 = v273;
LABEL_644:
        objc_msgSend(a1, "setHardwareSamplerate:", v278);
        goto LABEL_492;
      case 0x3Eu:
        v279 = 0;
        v280 = 0;
        v281 = 0;
        while (2)
        {
          v282 = *v4;
          v283 = *(_QWORD *)(a2 + v282);
          v284 = v283 + 1;
          if (v283 == -1 || v284 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v285 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v283);
            *(_QWORD *)(a2 + v282) = v284;
            v281 |= (unint64_t)(v285 & 0x7F) << v279;
            if (v285 < 0)
            {
              v279 += 7;
              v15 = v280++ >= 9;
              if (v15)
              {
                v281 = 0;
                goto LABEL_648;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v281 = 0;
LABEL_648:
        objc_msgSend(a1, "setIsContinuous:", v281 != 0);
        goto LABEL_492;
      case 0x3Fu:
        v286 = *v4;
        v287 = *(_QWORD *)(a2 + v286);
        if (v287 <= 0xFFFFFFFFFFFFFFFBLL && v287 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v287);
          *(_QWORD *)(a2 + v286) = v287 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setTriggerDurationInNs:", a3);
        goto LABEL_492;
      case 0x40u:
        v288 = 0;
        v289 = 0;
        v290 = 0;
        while (2)
        {
          v291 = *v4;
          v292 = *(_QWORD *)(a2 + v291);
          v293 = v292 + 1;
          if (v292 == -1 || v293 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v294 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v292);
            *(_QWORD *)(a2 + v291) = v293;
            v290 |= (unint64_t)(v294 & 0x7F) << v288;
            if (v294 < 0)
            {
              v288 += 7;
              v15 = v289++ >= 9;
              if (v15)
              {
                v295 = 0;
                goto LABEL_653;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v295 = 0;
        else
          v295 = v290;
LABEL_653:
        objc_msgSend(a1, "setTotalSamplesAtTriggerStart:", v295);
        goto LABEL_492;
      case 0x41u:
        v296 = 0;
        v297 = 0;
        v298 = 0;
        while (2)
        {
          v299 = *v4;
          v300 = *(_QWORD *)(a2 + v299);
          v301 = v300 + 1;
          if (v300 == -1 || v301 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v302 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v300);
            *(_QWORD *)(a2 + v299) = v301;
            v298 |= (unint64_t)(v302 & 0x7F) << v296;
            if (v302 < 0)
            {
              v296 += 7;
              v15 = v297++ >= 9;
              if (v15)
              {
                v303 = 0;
                goto LABEL_658;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v303 = 0;
        else
          v303 = v298;
LABEL_658:
        objc_msgSend(a1, "setTotalSamplesAtTriggerEnd:", v303);
        goto LABEL_492;
      case 0x42u:
        v304 = 0;
        v305 = 0;
        v306 = 0;
        while (2)
        {
          v307 = *v4;
          v308 = *(_QWORD *)(a2 + v307);
          v309 = v308 + 1;
          if (v308 == -1 || v309 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v310 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v308);
            *(_QWORD *)(a2 + v307) = v309;
            v306 |= (unint64_t)(v310 & 0x7F) << v304;
            if (v310 < 0)
            {
              v304 += 7;
              v15 = v305++ >= 9;
              if (v15)
              {
                v311 = 0;
                goto LABEL_663;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v311 = 0;
        else
          v311 = v306;
LABEL_663:
        objc_msgSend(a1, "setTotalSamplesAtEndOfCapture:", v311);
        goto LABEL_492;
      case 0x44u:
        PBReaderReadString();
        v312 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setConfigVersion:", v312);
        goto LABEL_491;
      case 0x45u:
        PBReaderReadString();
        v312 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setConfigPath:", v312);
        goto LABEL_491;
      case 0x46u:
        v313 = 0;
        v314 = 0;
        v315 = 0;
        while (2)
        {
          v316 = *v4;
          v317 = *(_QWORD *)(a2 + v316);
          v318 = v317 + 1;
          if (v317 == -1 || v318 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v319 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v317);
            *(_QWORD *)(a2 + v316) = v318;
            v315 |= (unint64_t)(v319 & 0x7F) << v313;
            if (v319 < 0)
            {
              v313 += 7;
              v15 = v314++ >= 9;
              if (v15)
              {
                v315 = 0;
                goto LABEL_667;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v315 = 0;
LABEL_667:
        objc_msgSend(a1, "setIsSecondChance:", v315 != 0);
        goto LABEL_492;
      case 0x47u:
        v320 = 0;
        v321 = 0;
        v322 = 0;
        while (2)
        {
          v323 = *v4;
          v324 = *(_QWORD *)(a2 + v323);
          v325 = v324 + 1;
          if (v324 == -1 || v325 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v326 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v324);
            *(_QWORD *)(a2 + v323) = v325;
            v322 |= (unint64_t)(v326 & 0x7F) << v320;
            if (v326 < 0)
            {
              v320 += 7;
              v15 = v321++ >= 9;
              if (v15)
              {
                v322 = 0;
                goto LABEL_671;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v322 = 0;
LABEL_671:
        objc_msgSend(a1, "setDeviceHandheld:", v322 != 0);
        goto LABEL_492;
      case 0x48u:
        v327 = 0;
        v328 = 0;
        v329 = 0;
        while (2)
        {
          v330 = *v4;
          v331 = *(_QWORD *)(a2 + v330);
          v332 = v331 + 1;
          if (v331 == -1 || v332 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v333 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v331);
            *(_QWORD *)(a2 + v330) = v332;
            v329 |= (unint64_t)(v333 & 0x7F) << v327;
            if (v333 < 0)
            {
              v327 += 7;
              v15 = v328++ >= 9;
              if (v15)
              {
                v334 = 0;
                goto LABEL_676;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v334 = 0;
        else
          v334 = v329;
LABEL_676:
        objc_msgSend(a1, "setActiveChannel:", v334);
        goto LABEL_492;
      case 0x49u:
        v335 = 0;
        v336 = 0;
        v337 = 0;
        while (2)
        {
          v338 = *v4;
          v339 = *(_QWORD *)(a2 + v338);
          v340 = v339 + 1;
          if (v339 == -1 || v340 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v341 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v339);
            *(_QWORD *)(a2 + v338) = v340;
            v337 |= (unint64_t)(v341 & 0x7F) << v335;
            if (v341 < 0)
            {
              v335 += 7;
              v15 = v336++ >= 9;
              if (v15)
              {
                v342 = 0;
                goto LABEL_681;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v342 = 0;
        else
          v342 = v337;
LABEL_681:
        objc_msgSend(a1, "setTwoShotAudibleFeedbackDelayInNs:", v342);
        goto LABEL_492;
      case 0x4Au:
        v343 = *v4;
        v344 = *(_QWORD *)(a2 + v343);
        if (v344 <= 0xFFFFFFFFFFFFFFFBLL && v344 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v344);
          *(_QWORD *)(a2 + v343) = v344 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setCumulativeUptimeInSec:", a3);
        goto LABEL_492;
      case 0x4Bu:
        v345 = *v4;
        v346 = *(_QWORD *)(a2 + v345);
        if (v346 <= 0xFFFFFFFFFFFFFFFBLL && v346 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v346);
          *(_QWORD *)(a2 + v345) = v346 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setCumulativeDowntimeInSec:", a3);
        goto LABEL_492;
      case 0x4Eu:
        v347 = 0;
        v348 = 0;
        v349 = 0;
        while (2)
        {
          v350 = *v4;
          v351 = *(_QWORD *)(a2 + v350);
          v352 = v351 + 1;
          if (v351 == -1 || v352 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v353 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v351);
            *(_QWORD *)(a2 + v350) = v352;
            v349 |= (unint64_t)(v353 & 0x7F) << v347;
            if (v353 < 0)
            {
              v347 += 7;
              v15 = v348++ >= 9;
              if (v15)
              {
                v354 = 0;
                goto LABEL_686;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v354 = 0;
        else
          v354 = v349;
LABEL_686:
        objc_msgSend(a1, "setHostPowerStateAtTrigger:", v354);
        goto LABEL_492;
      case 0x4Fu:
        v355 = 0;
        v356 = 0;
        v357 = 0;
        while (2)
        {
          v358 = *v4;
          v359 = *(_QWORD *)(a2 + v358);
          v360 = v359 + 1;
          if (v359 == -1 || v360 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v361 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v359);
            *(_QWORD *)(a2 + v358) = v360;
            v357 |= (unint64_t)(v361 & 0x7F) << v355;
            if (v361 < 0)
            {
              v355 += 7;
              v15 = v356++ >= 9;
              if (v15)
              {
                v357 = 0;
                goto LABEL_690;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v357 = 0;
LABEL_690:
        objc_msgSend(a1, "setIsMediaPlaying:", v357 != 0);
        goto LABEL_492;
      case 0x50u:
        v362 = *v4;
        v363 = *(_QWORD *)(a2 + v362);
        if (v363 <= 0xFFFFFFFFFFFFFFFBLL && v363 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v363);
          *(_QWORD *)(a2 + v362) = v363 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setMediaVolume:", a3);
        goto LABEL_492;
      case 0x51u:
        v312 = objc_alloc_init(SISchemaUUID);
        if (PBReaderPlaceMark() && (SISchemaUUIDReadFrom(v312, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setAudioProviderUUID:", v312, 0, 0);
LABEL_491:

LABEL_492:
          if (*(_QWORD *)(a2 + *v4) >= *(_QWORD *)(a2 + *v5))
            return *(_BYTE *)(a2 + *v6) == 0;
          continue;
        }

        return 0;
      case 0x52u:
        v364 = 0;
        v365 = 0;
        v366 = 0;
        while (2)
        {
          v367 = *v4;
          v368 = *(_QWORD *)(a2 + v367);
          v369 = v368 + 1;
          if (v368 == -1 || v369 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v370 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v368);
            *(_QWORD *)(a2 + v367) = v369;
            v366 |= (unint64_t)(v370 & 0x7F) << v364;
            if (v370 < 0)
            {
              v364 += 7;
              v15 = v365++ >= 9;
              if (v15)
              {
                v366 = 0;
                goto LABEL_694;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v366 = 0;
LABEL_694:
        objc_msgSend(a1, "setOnBatteryPower:", v366 != 0);
        goto LABEL_492;
      case 0x53u:
        v371 = 0;
        v372 = 0;
        v373 = 0;
        while (2)
        {
          v374 = *v4;
          v375 = *(_QWORD *)(a2 + v374);
          v376 = v375 + 1;
          if (v375 == -1 || v376 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v377 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v375);
            *(_QWORD *)(a2 + v374) = v376;
            v373 |= (unint64_t)(v377 & 0x7F) << v371;
            if (v377 < 0)
            {
              v371 += 7;
              v15 = v372++ >= 9;
              if (v15)
              {
                v373 = 0;
                goto LABEL_698;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v373 = 0;
LABEL_698:
        objc_msgSend(a1, "setDidWakeAP:", v373 != 0);
        goto LABEL_492;
      case 0x54u:
        v378 = *v4;
        v379 = *(_QWORD *)(a2 + v378);
        if (v379 <= 0xFFFFFFFFFFFFFFFBLL && v379 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v379);
          *(_QWORD *)(a2 + v378) = v379 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setUptimeInSec:", a3);
        goto LABEL_492;
      case 0x55u:
        v380 = *v4;
        v381 = *(_QWORD *)(a2 + v380);
        if (v381 <= 0xFFFFFFFFFFFFFFFBLL && v381 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v381);
          *(_QWORD *)(a2 + v380) = v381 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setDowntimeInSec:", a3);
        goto LABEL_492;
      case 0x56u:
        v382 = 0;
        v383 = 0;
        v384 = 0;
        while (2)
        {
          v385 = *v4;
          v386 = *(_QWORD *)(a2 + v385);
          v387 = v386 + 1;
          if (v386 == -1 || v387 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v388 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v386);
            *(_QWORD *)(a2 + v385) = v387;
            v384 |= (unint64_t)(v388 & 0x7F) << v382;
            if (v388 < 0)
            {
              v382 += 7;
              v15 = v383++ >= 9;
              if (v15)
              {
                v389 = 0;
                goto LABEL_703;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v389 = 0;
        else
          v389 = v384;
LABEL_703:
        objc_msgSend(a1, "setLastConsecutiveVTRejects:", v389);
        goto LABEL_492;
      case 0x58u:
        PBReaderReadString();
        v312 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setCaptureFilePath:", v312);
        goto LABEL_491;
      case 0x59u:
        PBReaderReadString();
        v312 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setConfigDataHash:", v312);
        goto LABEL_491;
      case 0x5Au:
        v390 = 0;
        v391 = 0;
        v392 = 0;
        while (2)
        {
          v393 = *v4;
          v394 = *(_QWORD *)(a2 + v393);
          v395 = v394 + 1;
          if (v394 == -1 || v395 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v396 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v394);
            *(_QWORD *)(a2 + v393) = v395;
            v392 |= (unint64_t)(v396 & 0x7F) << v390;
            if (v396 < 0)
            {
              v390 += 7;
              v15 = v391++ >= 9;
              if (v15)
              {
                v392 = 0;
                goto LABEL_707;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v392 = 0;
LABEL_707:
        objc_msgSend(a1, "setSiriIsActiveOrOtherAssertion:", v392 != 0);
        goto LABEL_492;
      case 0x5Bu:
        v397 = 0;
        v398 = 0;
        v399 = 0;
        while (2)
        {
          v400 = *v4;
          v401 = *(_QWORD *)(a2 + v400);
          v402 = v401 + 1;
          if (v401 == -1 || v402 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v403 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v401);
            *(_QWORD *)(a2 + v400) = v402;
            v399 |= (unint64_t)(v403 & 0x7F) << v397;
            if (v403 < 0)
            {
              v397 += 7;
              v15 = v398++ >= 9;
              if (v15)
              {
                v399 = 0;
                goto LABEL_711;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v399 = 0;
LABEL_711:
        objc_msgSend(a1, "setDidAudioStall:", v399 != 0);
        goto LABEL_492;
      case 0x5Cu:
        v404 = 0;
        v405 = 0;
        v406 = 0;
        while (2)
        {
          v407 = *v4;
          v408 = *(_QWORD *)(a2 + v407);
          v409 = v408 + 1;
          if (v408 == -1 || v409 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v410 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v408);
            *(_QWORD *)(a2 + v407) = v409;
            v406 |= (unint64_t)(v410 & 0x7F) << v404;
            if (v410 < 0)
            {
              v404 += 7;
              v15 = v405++ >= 9;
              if (v15)
              {
                v406 = 0;
                goto LABEL_715;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v406 = 0;
LABEL_715:
        objc_msgSend(a1, "setIsBargeIn:", v406 != 0);
        goto LABEL_492;
      case 0x5Du:
        v411 = 0;
        v412 = 0;
        v413 = 0;
        while (2)
        {
          v414 = *v4;
          v415 = *(_QWORD *)(a2 + v414);
          v416 = v415 + 1;
          if (v415 == -1 || v416 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v417 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v415);
            *(_QWORD *)(a2 + v414) = v416;
            v413 |= (unint64_t)(v417 & 0x7F) << v411;
            if (v417 < 0)
            {
              v411 += 7;
              v15 = v412++ >= 9;
              if (v15)
              {
                v413 = 0;
                goto LABEL_719;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v413 = 0;
LABEL_719:
        objc_msgSend(a1, "setIsWakeFromSleep:", v413 != 0);
        goto LABEL_492;
      case 0x5Eu:
        v418 = 0;
        v419 = 0;
        v420 = 0;
        while (2)
        {
          v421 = *v4;
          v422 = *(_QWORD *)(a2 + v421);
          v423 = v422 + 1;
          if (v422 == -1 || v423 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v424 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v422);
            *(_QWORD *)(a2 + v421) = v423;
            v420 |= (unint64_t)(v424 & 0x7F) << v418;
            if (v424 < 0)
            {
              v418 += 7;
              v15 = v419++ >= 9;
              if (v15)
              {
                v425 = 0;
                goto LABEL_724;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v425 = 0;
        else
          v425 = v420;
LABEL_724:
        objc_msgSend(a1, "setSecondPassAssetQueryStartTimeInNs:", v425);
        goto LABEL_492;
      case 0x5Fu:
        v426 = 0;
        v427 = 0;
        v428 = 0;
        while (2)
        {
          v429 = *v4;
          v430 = *(_QWORD *)(a2 + v429);
          v431 = v430 + 1;
          if (v430 == -1 || v431 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v432 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v430);
            *(_QWORD *)(a2 + v429) = v431;
            v428 |= (unint64_t)(v432 & 0x7F) << v426;
            if (v432 < 0)
            {
              v426 += 7;
              v15 = v427++ >= 9;
              if (v15)
              {
                v433 = 0;
                goto LABEL_729;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v433 = 0;
        else
          v433 = v428;
LABEL_729:
        objc_msgSend(a1, "setSecondPassAssetQueryCompleteTimeInNs:", v433);
        goto LABEL_492;
      case 0x60u:
        v434 = 0;
        v435 = 0;
        v436 = 0;
        while (2)
        {
          v437 = *v4;
          v438 = *(_QWORD *)(a2 + v437);
          v439 = v438 + 1;
          if (v438 == -1 || v439 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v440 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v438);
            *(_QWORD *)(a2 + v437) = v439;
            v436 |= (unint64_t)(v440 & 0x7F) << v434;
            if (v440 < 0)
            {
              v434 += 7;
              v15 = v435++ >= 9;
              if (v15)
              {
                v441 = 0;
                goto LABEL_734;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v441 = 0;
        else
          v441 = v436;
LABEL_734:
        objc_msgSend(a1, "setSecondPassAssetLoadStartTimeInNs:", v441);
        goto LABEL_492;
      case 0x61u:
        v442 = 0;
        v443 = 0;
        v444 = 0;
        while (2)
        {
          v445 = *v4;
          v446 = *(_QWORD *)(a2 + v445);
          if (v446 == -1 || v446 >= *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v447 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v446);
            *(_QWORD *)(a2 + v445) = v446 + 1;
            v444 |= (unint64_t)(v447 & 0x7F) << v442;
            if (v447 < 0)
            {
              v442 += 7;
              v15 = v443++ >= 9;
              if (v15)
              {
                v448 = 0;
                goto LABEL_739;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v448 = 0;
        else
          v448 = v444;
LABEL_739:
        objc_msgSend(a1, "setSecondPassAssetLoadCompleteTimeInNs:", v448);
        goto LABEL_492;
      case 0x62u:
        v449 = 0;
        v450 = 0;
        v451 = 0;
        while (2)
        {
          v452 = *v4;
          v453 = *(_QWORD *)(a2 + v452);
          if (v453 == -1 || v453 >= *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v454 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v453);
            *(_QWORD *)(a2 + v452) = v453 + 1;
            v451 |= (unint64_t)(v454 & 0x7F) << v449;
            if (v454 < 0)
            {
              v449 += 7;
              v15 = v450++ >= 9;
              if (v15)
              {
                v455 = 0;
                goto LABEL_744;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v455 = 0;
        else
          v455 = v451;
LABEL_744:
        objc_msgSend(a1, "setSecondPassAudioStreamStartTimeInNs:", v455);
        goto LABEL_492;
      case 0x63u:
        v456 = 0;
        v457 = 0;
        v458 = 0;
        while (2)
        {
          v459 = *v4;
          v460 = *(_QWORD *)(a2 + v459);
          if (v460 == -1 || v460 >= *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v461 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v460);
            *(_QWORD *)(a2 + v459) = v460 + 1;
            v458 |= (unint64_t)(v461 & 0x7F) << v456;
            if (v461 < 0)
            {
              v456 += 7;
              v15 = v457++ >= 9;
              if (v15)
              {
                v462 = 0;
                goto LABEL_749;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v462 = 0;
        else
          v462 = v458;
LABEL_749:
        objc_msgSend(a1, "setSecondPassAudioStreamReadyTimeInNs:", v462);
        goto LABEL_492;
      case 0x64u:
        v463 = 0;
        v464 = 0;
        v465 = 0;
        while (2)
        {
          v466 = *v4;
          v467 = *(_QWORD *)(a2 + v466);
          if (v467 == -1 || v467 >= *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v468 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v467);
            *(_QWORD *)(a2 + v466) = v467 + 1;
            v465 |= (unint64_t)(v468 & 0x7F) << v463;
            if (v468 < 0)
            {
              v463 += 7;
              v15 = v464++ >= 9;
              if (v15)
              {
                v469 = 0;
                goto LABEL_754;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v469 = 0;
        else
          v469 = v465;
LABEL_754:
        objc_msgSend(a1, "setSecondPassFirstAudioPacketReceptionTimeInNs:", v469);
        goto LABEL_492;
      case 0x65u:
        v470 = 0;
        v471 = 0;
        v472 = 0;
        while (2)
        {
          v473 = *v4;
          v474 = *(_QWORD *)(a2 + v473);
          if (v474 == -1 || v474 >= *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v475 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v474);
            *(_QWORD *)(a2 + v473) = v474 + 1;
            v472 |= (unint64_t)(v475 & 0x7F) << v470;
            if (v475 < 0)
            {
              v470 += 7;
              v15 = v471++ >= 9;
              if (v15)
              {
                v476 = 0;
                goto LABEL_759;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v476 = 0;
        else
          v476 = v472;
LABEL_759:
        objc_msgSend(a1, "setSecondPassLastAudioPacketReceptionTimeInNs:", v476);
        goto LABEL_492;
      case 0x66u:
        v477 = 0;
        v478 = 0;
        v479 = 0;
        while (2)
        {
          v480 = *v4;
          v481 = *(_QWORD *)(a2 + v480);
          if (v481 == -1 || v481 >= *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v482 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v481);
            *(_QWORD *)(a2 + v480) = v481 + 1;
            v479 |= (unint64_t)(v482 & 0x7F) << v477;
            if (v482 < 0)
            {
              v477 += 7;
              v15 = v478++ >= 9;
              if (v15)
              {
                v483 = 0;
                goto LABEL_764;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v483 = 0;
        else
          v483 = v479;
LABEL_764:
        objc_msgSend(a1, "setSecondPassCheckerModelKeywordDetectionStartTimeInNs:", v483);
        goto LABEL_492;
      case 0x67u:
        v484 = 0;
        v485 = 0;
        v486 = 0;
        while (2)
        {
          v487 = *v4;
          v488 = *(_QWORD *)(a2 + v487);
          if (v488 == -1 || v488 >= *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v489 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v488);
            *(_QWORD *)(a2 + v487) = v488 + 1;
            v486 |= (unint64_t)(v489 & 0x7F) << v484;
            if (v489 < 0)
            {
              v484 += 7;
              v15 = v485++ >= 9;
              if (v15)
              {
                v490 = 0;
                goto LABEL_769;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v490 = 0;
        else
          v490 = v486;
LABEL_769:
        objc_msgSend(a1, "setSecondPassCheckerModelKeywordDetectionEndTimeInNs:", v490);
        goto LABEL_492;
      case 0x68u:
        PBReaderReadString();
        v312 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setTriggerPhrase:", v312);
        goto LABEL_491;
      case 0x69u:
        v491 = *v4;
        v492 = *(_QWORD *)(a2 + v491);
        if (v492 <= 0xFFFFFFFFFFFFFFF7 && v492 + 8 <= *(_QWORD *)(a2 + *v5))
        {
          v493 = *(double *)(*(_QWORD *)(a2 + *v8) + v492);
          *(_QWORD *)(a2 + v491) = v492 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v493 = 0.0;
        }
        objc_msgSend(a1, "setLastDisplayWakeTimeOffsetInNs:", v493);
        goto LABEL_492;
      case 0x6Au:
        v494 = 0;
        v495 = 0;
        v496 = 0;
        while (2)
        {
          v497 = *v4;
          v498 = *(_QWORD *)(a2 + v497);
          if (v498 == -1 || v498 >= *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v499 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v498);
            *(_QWORD *)(a2 + v497) = v498 + 1;
            v496 |= (unint64_t)(v499 & 0x7F) << v494;
            if (v499 < 0)
            {
              v494 += 7;
              v15 = v495++ >= 9;
              if (v15)
              {
                v496 = 0;
                goto LABEL_773;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v496 = 0;
LABEL_773:
        objc_msgSend(a1, "setIsHSJSTriggerFromAlwaysOnMicBuffer:", v496 != 0);
        goto LABEL_492;
      case 0x6Bu:
        v500 = 0;
        v501 = 0;
        v502 = 0;
        while (2)
        {
          v503 = *v4;
          v504 = *(_QWORD *)(a2 + v503);
          if (v504 == -1 || v504 >= *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v505 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v504);
            *(_QWORD *)(a2 + v503) = v504 + 1;
            v502 |= (unint64_t)(v505 & 0x7F) << v500;
            if (v505 < 0)
            {
              v500 += 7;
              v15 = v501++ >= 9;
              if (v15)
              {
                v506 = 0;
                goto LABEL_778;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v506 = 0;
        else
          v506 = v502;
LABEL_778:
        objc_msgSend(a1, "setDisplayWakeTimeOffsetInNs:", v506);
        goto LABEL_492;
      case 0x6Cu:
        v507 = *v4;
        v508 = *(_QWORD *)(a2 + v507);
        if (v508 <= 0xFFFFFFFFFFFFFFFBLL && v508 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v508);
          *(_QWORD *)(a2 + v507) = v508 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setNeptuneDetectionApiScore:", a3);
        goto LABEL_492;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_492;
    }
  }
}

uint64_t MHSchemaMHVoiceTriggerFirstPassDailyMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setConfigVersion:", v25);
      }
      else
      {
        if ((_DWORD)v17 != 3)
        {
          if ((_DWORD)v17 == 2)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_34;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_37;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_37:
            objc_msgSend(a1, "setHardwareSampleRate:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setMitigationAssetVersion:", v25);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHVoiceTriggerFirstPassStatisticReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v6))
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)(a2 + v12);
        v14 = v13 + 1;
        if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v14;
        v11 |= (unint64_t)(v15 & 0x7F) << v9;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        v16 = v10++ >= 9;
        if (v16)
        {
          v11 = 0;
          v17 = *v6;
          v18 = *(unsigned __int8 *)(a2 + v17);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
      v17 = *v6;
      v18 = *(unsigned __int8 *)(a2 + v17);
      if (*(_BYTE *)(a2 + v17))
        v11 = 0;
LABEL_14:
      if (v18 || (v11 & 7) == 4)
        break;
      switch((v11 >> 3))
      {
        case 1u:
          v20 = *v4;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setFirstPassPeakScoreHS:", a3);
          continue;
        case 2u:
          v23 = *v4;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 <= 0xFFFFFFFFFFFFFFFBLL && v24 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setFirstPassPeakScoreJS:", a3);
          continue;
        case 3u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (2)
          {
            v28 = *v4;
            v29 = *(_QWORD *)(a2 + v28);
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v29);
              *(_QWORD *)(a2 + v28) = v30;
              v27 |= (unint64_t)(v31 & 0x7F) << v25;
              if (v31 < 0)
              {
                v25 += 7;
                v16 = v26++ >= 9;
                if (v16)
                {
                  v32 = 0;
                  goto LABEL_85;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v32 = 0;
          else
            v32 = v27;
LABEL_85:
          objc_msgSend(a1, "setFirstPassTriggerSource:", v32);
          continue;
        case 4u:
          v33 = *v4;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 <= 0xFFFFFFFFFFFFFFFBLL && v34 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setRecognizerScoreHS:", a3);
          continue;
        case 5u:
          v35 = *v4;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 <= 0xFFFFFFFFFFFFFFFBLL && v36 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setRecognizerScoreJS:", a3);
          continue;
        case 6u:
          v37 = *v4;
          v38 = *(_QWORD *)(a2 + v37);
          if (v38 <= 0xFFFFFFFFFFFFFFFBLL && v38 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setTriggerScoreHS:", a3);
          continue;
        case 7u:
          v39 = *v4;
          v40 = *(_QWORD *)(a2 + v39);
          if (v40 <= 0xFFFFFFFFFFFFFFFBLL && v40 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v40);
            *(_QWORD *)(a2 + v39) = v40 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setTriggerScoreJS:", a3);
          continue;
        case 8u:
          v41 = *v4;
          v42 = *(_QWORD *)(a2 + v41);
          if (v42 <= 0xFFFFFFFFFFFFFFFBLL && v42 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v42);
            *(_QWORD *)(a2 + v41) = v42 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setMitigationScore:", a3);
          continue;
        case 9u:
          v43 = 0;
          v44 = 0;
          v45 = 0;
          while (2)
          {
            v46 = *v4;
            v47 = *(_QWORD *)(a2 + v46);
            v48 = v47 + 1;
            if (v47 == -1 || v48 > *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v47);
              *(_QWORD *)(a2 + v46) = v48;
              v45 |= (unint64_t)(v49 & 0x7F) << v43;
              if (v49 < 0)
              {
                v43 += 7;
                v16 = v44++ >= 9;
                if (v16)
                {
                  v50 = 0;
                  goto LABEL_90;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            v50 = 0;
          else
            v50 = v45;
LABEL_90:
          objc_msgSend(a1, "setInvocationTypeId:", v50);
          continue;
        case 0xAu:
          v51 = 0;
          v52 = 0;
          v53 = 0;
          break;
        case 0xBu:
          v59 = *v4;
          v60 = *(_QWORD *)(a2 + v59);
          if (v60 <= 0xFFFFFFFFFFFFFFFBLL && v60 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v60);
            *(_QWORD *)(a2 + v59) = v60 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setRepetitionSimilarityScore:", a3);
          continue;
        case 0xCu:
          v61 = *v4;
          v62 = *(_QWORD *)(a2 + v61);
          if (v62 <= 0xFFFFFFFFFFFFFFFBLL && v62 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v62);
            *(_QWORD *)(a2 + v61) = v62 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setTdSpeakerRecognizerCombinedScore:", a3);
          continue;
        case 0xDu:
          v63 = *v4;
          v64 = *(_QWORD *)(a2 + v63);
          if (v64 <= 0xFFFFFFFFFFFFFFFBLL && v64 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v64);
            *(_QWORD *)(a2 + v63) = v64 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setKeywordThresholdHS:", a3);
          continue;
        case 0xEu:
          v65 = *v4;
          v66 = *(_QWORD *)(a2 + v65);
          if (v66 <= 0xFFFFFFFFFFFFFFFBLL && v66 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v66);
            *(_QWORD *)(a2 + v65) = v66 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setKeywordThresholdJS:", a3);
          continue;
        case 0xFu:
          v67 = *v4;
          v68 = *(_QWORD *)(a2 + v67);
          if (v68 <= 0xFFFFFFFFFFFFFFFBLL && v68 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v68);
            *(_QWORD *)(a2 + v67) = v68 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setTdSpeakerRecognizerCombinedThresholdHS:", a3);
          continue;
        case 0x10u:
          v69 = *v4;
          v70 = *(_QWORD *)(a2 + v69);
          if (v70 <= 0xFFFFFFFFFFFFFFFBLL && v70 + 4 <= *(_QWORD *)(a2 + *v5))
          {
            LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v70);
            *(_QWORD *)(a2 + v69) = v70 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v17) = 1;
            LODWORD(a3) = 0;
          }
          objc_msgSend(a1, "setTdSpeakerRecognizerCombinedThresholdJS:", a3);
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v54 = *v4;
        v55 = *(_QWORD *)(a2 + v54);
        v56 = v55 + 1;
        if (v55 == -1 || v56 > *(_QWORD *)(a2 + *v5))
          break;
        v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v55);
        *(_QWORD *)(a2 + v54) = v56;
        v53 |= (unint64_t)(v57 & 0x7F) << v51;
        if ((v57 & 0x80) == 0)
          goto LABEL_92;
        v51 += 7;
        v16 = v52++ >= 9;
        if (v16)
        {
          v58 = 0;
          goto LABEL_95;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_92:
      v58 = *(_BYTE *)(a2 + *v6) ? 0 : v53;
LABEL_95:
      objc_msgSend(a1, "setSecondsSinceEpoch:", v58);
    }
    while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5));
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

uint64_t MHSchemaMHVoiceTriggerSecondPassCancelledReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MHSchemaMHVoiceTriggerEventInfo *v17;
  double v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MHSchemaMHVoiceTriggerEventInfo);
        if (!PBReaderPlaceMark() || (MHSchemaMHVoiceTriggerEventInfoReadFrom(v17, a2, v18) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setVoiceTriggerEventInfo:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHVoiceTriggerSecondPassRejectedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  MHSchemaMHVoiceTriggerEventInfo *v24;
  double v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(MHSchemaMHVoiceTriggerEventInfo);
        if (!PBReaderPlaceMark() || (MHSchemaMHVoiceTriggerEventInfoReadFrom(v24, a2, v25) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setVoiceTriggerEventInfo:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_36:
        objc_msgSend(a1, "setReason:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHVoiceTriggerSecondPassStartedReadFrom(void *a1, uint64_t a2, double a3)
{
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  MHSchemaFirstPassChannelSelectionScore *v41;
  double v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  char v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v6) == 0;
  v8 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v6))
      return *(_BYTE *)(a2 + *v6) == 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *v4;
      v13 = *(_QWORD *)(a2 + v12);
      v14 = v13 + 1;
      if (v13 == -1 || v14 > *(_QWORD *)(a2 + *v5))
        break;
      v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
      *(_QWORD *)(a2 + v12) = v14;
      v11 |= (unint64_t)(v15 & 0x7F) << v9;
      if ((v15 & 0x80) == 0)
        goto LABEL_12;
      v9 += 7;
      v16 = v10++ >= 9;
      if (v16)
      {
        v11 = 0;
        v17 = *v6;
        v18 = *(unsigned __int8 *)(a2 + v17);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
    v17 = *v6;
    v18 = *(unsigned __int8 *)(a2 + v17);
    if (*(_BYTE *)(a2 + v17))
      v11 = 0;
LABEL_14:
    if (v18 || (v11 & 7) == 4)
      return *(_BYTE *)(a2 + *v6) == 0;
    switch((v11 >> 3))
    {
      case 1u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (1)
        {
          v23 = *v4;
          v24 = *(_QWORD *)(a2 + v23);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v5))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v24);
          *(_QWORD *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0)
            goto LABEL_112;
          v20 += 7;
          v16 = v21++ >= 9;
          if (v16)
          {
            v27 = 0;
            goto LABEL_115;
          }
        }
        *(_BYTE *)(a2 + *v6) = 1;
LABEL_112:
        if (*(_BYTE *)(a2 + *v6))
          v27 = 0;
        else
          v27 = v22;
LABEL_115:
        objc_msgSend(a1, "setFirstPassDetectedChannel:", v27, v113, v114);
        goto LABEL_171;
      case 2u:
        v29 = *v4;
        v30 = *(_QWORD *)(a2 + v29);
        if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v30);
          *(_QWORD *)(a2 + v29) = v30 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setFirstPassScore:", a3, v113, v114);
        goto LABEL_171;
      case 3u:
        v31 = 0;
        v32 = 0;
        v33 = 0;
        while (2)
        {
          v34 = *v4;
          v35 = *(_QWORD *)(a2 + v34);
          v36 = v35 + 1;
          if (v35 == -1 || v36 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v35);
            *(_QWORD *)(a2 + v34) = v36;
            v33 |= (unint64_t)(v37 & 0x7F) << v31;
            if (v37 < 0)
            {
              v31 += 7;
              v16 = v32++ >= 9;
              if (v16)
              {
                v38 = 0;
                goto LABEL_120;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v38 = 0;
        else
          v38 = v33;
LABEL_120:
        objc_msgSend(a1, "setFirstPassOnsetChannel:", v38, v113, v114);
        goto LABEL_171;
      case 4u:
        v39 = *v4;
        v40 = *(_QWORD *)(a2 + v39);
        if (v40 <= 0xFFFFFFFFFFFFFFFBLL && v40 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v40);
          *(_QWORD *)(a2 + v39) = v40 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setFirstPassOnsetScore:", a3, v113, v114);
        goto LABEL_171;
      case 5u:
        v41 = objc_alloc_init(MHSchemaFirstPassChannelSelectionScore);
        v113 = 0;
        v114 = 0;
        if (PBReaderPlaceMark()
          && MHSchemaFirstPassChannelSelectionScoreReadFrom(v41, a2, v42))
        {
          PBReaderRecallMark();
          if (v41)
            objc_msgSend(a1, "addChannelSelectionScores:", v41, 0, 0);

LABEL_171:
          if (*(_QWORD *)(a2 + *v4) >= *(_QWORD *)(a2 + *v5))
            return *(_BYTE *)(a2 + *v6) == 0;
          continue;
        }

        return 0;
      case 6u:
        v43 = 0;
        v44 = 0;
        v45 = 0;
        while (2)
        {
          v46 = *v4;
          v47 = *(_QWORD *)(a2 + v46);
          v48 = v47 + 1;
          if (v47 == -1 || v48 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v47);
            *(_QWORD *)(a2 + v46) = v48;
            v45 |= (unint64_t)(v49 & 0x7F) << v43;
            if (v49 < 0)
            {
              v43 += 7;
              v16 = v44++ >= 9;
              if (v16)
              {
                v50 = 0;
                goto LABEL_125;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v50 = 0;
        else
          v50 = v45;
LABEL_125:
        objc_msgSend(a1, "setFirstPassChannelSelectionDelayNs:", v50, v113, v114);
        goto LABEL_171;
      case 7u:
        v51 = *v4;
        v52 = *(_QWORD *)(a2 + v51);
        if (v52 <= 0xFFFFFFFFFFFFFFFBLL && v52 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v52);
          *(_QWORD *)(a2 + v51) = v52 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setFirstPassMasterChannelScoreBoost:", a3, v113, v114);
        goto LABEL_171;
      case 8u:
        v53 = 0;
        v54 = 0;
        v55 = 0;
        while (2)
        {
          v56 = *v4;
          v57 = *(_QWORD *)(a2 + v56);
          v58 = v57 + 1;
          if (v57 == -1 || v58 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v57);
            *(_QWORD *)(a2 + v56) = v58;
            v55 |= (unint64_t)(v59 & 0x7F) << v53;
            if (v59 < 0)
            {
              v53 += 7;
              v16 = v54++ >= 9;
              if (v16)
              {
                v60 = 0;
                goto LABEL_130;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v60 = 0;
        else
          v60 = v55;
LABEL_130:
        objc_msgSend(a1, "setFirstPassStartSampleCount:", v60, v113, v114);
        goto LABEL_171;
      case 9u:
        v61 = 0;
        v62 = 0;
        v63 = 0;
        while (2)
        {
          v64 = *v4;
          v65 = *(_QWORD *)(a2 + v64);
          v66 = v65 + 1;
          if (v65 == -1 || v66 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v67 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v65);
            *(_QWORD *)(a2 + v64) = v66;
            v63 |= (unint64_t)(v67 & 0x7F) << v61;
            if (v67 < 0)
            {
              v61 += 7;
              v16 = v62++ >= 9;
              if (v16)
              {
                v68 = 0;
                goto LABEL_135;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v68 = 0;
        else
          v68 = v63;
LABEL_135:
        objc_msgSend(a1, "setFirstPassEndSampleCount:", v68, v113, v114);
        goto LABEL_171;
      case 0xAu:
        v69 = 0;
        v70 = 0;
        v71 = 0;
        while (2)
        {
          v72 = *v4;
          v73 = *(_QWORD *)(a2 + v72);
          v74 = v73 + 1;
          if (v73 == -1 || v74 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v75 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v73);
            *(_QWORD *)(a2 + v72) = v74;
            v71 |= (unint64_t)(v75 & 0x7F) << v69;
            if (v75 < 0)
            {
              v69 += 7;
              v16 = v70++ >= 9;
              if (v16)
              {
                v76 = 0;
                goto LABEL_140;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v76 = 0;
        else
          v76 = v71;
LABEL_140:
        objc_msgSend(a1, "setFirstPassFireSampleCount:", v76, v113, v114);
        goto LABEL_171;
      case 0xBu:
        v77 = 0;
        v78 = 0;
        v79 = 0;
        while (2)
        {
          v80 = *v4;
          v81 = *(_QWORD *)(a2 + v80);
          v82 = v81 + 1;
          if (v81 == -1 || v82 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v83 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v81);
            *(_QWORD *)(a2 + v80) = v82;
            v79 |= (unint64_t)(v83 & 0x7F) << v77;
            if (v83 < 0)
            {
              v77 += 7;
              v16 = v78++ >= 9;
              if (v16)
              {
                v84 = 0;
                goto LABEL_145;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v84 = 0;
        else
          v84 = v79;
LABEL_145:
        objc_msgSend(a1, "setFirstPassTriggerSource:", v84, v113, v114);
        goto LABEL_171;
      case 0xCu:
        v85 = 0;
        v86 = 0;
        v87 = 0;
        while (2)
        {
          v88 = *v4;
          v89 = *(_QWORD *)(a2 + v88);
          v90 = v89 + 1;
          if (v89 == -1 || v90 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v91 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v89);
            *(_QWORD *)(a2 + v88) = v90;
            v87 |= (unint64_t)(v91 & 0x7F) << v85;
            if (v91 < 0)
            {
              v85 += 7;
              v16 = v86++ >= 9;
              if (v16)
              {
                v92 = 0;
                goto LABEL_150;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v92 = 0;
        else
          v92 = v87;
LABEL_150:
        objc_msgSend(a1, "setEarlyDetectFiredTimeOffsetInNs:", v92, v113, v114);
        goto LABEL_171;
      case 0xDu:
        v93 = *v4;
        v94 = *(_QWORD *)(a2 + v93);
        if (v94 <= 0xFFFFFFFFFFFFFFFBLL && v94 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v94);
          *(_QWORD *)(a2 + v93) = v94 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setEarlyDetectFiredTime:", a3, v113, v114);
        goto LABEL_171;
      case 0xEu:
        v95 = *v4;
        v96 = *(_QWORD *)(a2 + v95);
        if (v96 <= 0xFFFFFFFFFFFFFFFBLL && v96 + 4 <= *(_QWORD *)(a2 + *v5))
        {
          LODWORD(a3) = *(_DWORD *)(*(_QWORD *)(a2 + *v8) + v96);
          *(_QWORD *)(a2 + v95) = v96 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v17) = 1;
          LODWORD(a3) = 0;
        }
        objc_msgSend(a1, "setFirstPassPrimaryChannelScoreBoost:", a3, v113, v114);
        goto LABEL_171;
      case 0xFu:
        v97 = 0;
        v98 = 0;
        v99 = 0;
        while (2)
        {
          v100 = *v4;
          v101 = *(_QWORD *)(a2 + v100);
          v102 = v101 + 1;
          if (v101 == -1 || v102 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v103 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v101);
            *(_QWORD *)(a2 + v100) = v102;
            v99 |= (unint64_t)(v103 & 0x7F) << v97;
            if (v103 < 0)
            {
              v97 += 7;
              v16 = v98++ >= 9;
              if (v16)
              {
                v104 = 0;
                goto LABEL_155;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v104 = 0;
        else
          v104 = v99;
LABEL_155:
        objc_msgSend(a1, "setFirstPassInfoDispatchTimeInNs:", v104, v113, v114);
        goto LABEL_171;
      case 0x10u:
        v105 = 0;
        v106 = 0;
        v107 = 0;
        while (2)
        {
          v108 = *v4;
          v109 = *(_QWORD *)(a2 + v108);
          v110 = v109 + 1;
          if (v109 == -1 || v110 > *(_QWORD *)(a2 + *v5))
          {
            *(_BYTE *)(a2 + *v6) = 1;
          }
          else
          {
            v111 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v109);
            *(_QWORD *)(a2 + v108) = v110;
            v107 |= (unint64_t)(v111 & 0x7F) << v105;
            if (v111 < 0)
            {
              v105 += 7;
              v16 = v106++ >= 9;
              if (v16)
              {
                v112 = 0;
                goto LABEL_160;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v6))
          v112 = 0;
        else
          v112 = v107;
LABEL_160:
        objc_msgSend(a1, "setFirstPassInfoReceptionTimeInNs:", v112, v113, v114);
        goto LABEL_171;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_171;
    }
  }
}

uint64_t MHSchemaMHVoiceTriggerSecondPassTriggeredReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MHSchemaMHVoiceTriggerEventInfo *v17;
  double v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MHSchemaMHVoiceTriggerEventInfo);
        if (!PBReaderPlaceMark() || (MHSchemaMHVoiceTriggerEventInfoReadFrom(v17, a2, v18) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setVoiceTriggerEventInfo:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MHSchemaMHVoiceTriggerTwoShotDetectedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MTSchemaMTASRStateUpdatedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setAsrState:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MTSchemaMTBatchRequestCancelledReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MTSchemaMTBatchRequestContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setContextId:", v17, 0, 0);
        goto LABEL_36;
      case 2u:
        v17 = objc_alloc_init(MTSchemaMTBatchRequestStarted);
        if (!PBReaderPlaceMark() || (MTSchemaMTBatchRequestStartedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
        goto LABEL_36;
      case 3u:
        v17 = objc_alloc_init(MTSchemaMTBatchRequestEnded);
        if (!PBReaderPlaceMark() || (MTSchemaMTBatchRequestEndedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEnded:", v17, 0, 0);
        goto LABEL_36;
      case 4u:
        v17 = objc_alloc_init(MTSchemaMTBatchRequestFailed);
        if (!PBReaderPlaceMark() || (MTSchemaMTBatchRequestFailedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFailed:", v17, 0, 0);
        goto LABEL_36;
      case 5u:
        v17 = objc_alloc_init(MTSchemaMTBatchRequestCancelled);
        if (PBReaderPlaceMark() && (MTSchemaMTBatchRequestCancelledReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCancelled:", v17, 0, 0);
LABEL_36:

LABEL_37:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_40:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_37;
    }
  }
}

uint64_t MTSchemaMTBatchRequestEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MTSchemaMTBatchRequestFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  MTSchemaMTError *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v24 = objc_alloc_init(MTSchemaMTError);
        if (!PBReaderPlaceMark() || (MTSchemaMTErrorReadFrom(v24, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setError:", v24, 0, 0);

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_36:
        objc_msgSend(a1, "setNumParagraphFailures:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MTSchemaMTBatchRequestStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setSequenceNumber:", v24);

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_34;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_34:
        objc_msgSend(a1, "setNumParagraphs:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MTSchemaMTClientEventMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMtId:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SISchemaUUID);
    if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setSessionId:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MTSchemaMTClientEventV2ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MTSchemaMTBatchRequestContext *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 'e':
        v17 = objc_alloc_init(MTSchemaMTBatchRequestContext);
        if (!PBReaderPlaceMark() || !MTSchemaMTBatchRequestContextReadFrom(v17, a2))
          goto LABEL_75;
        PBReaderRecallMark();
        objc_msgSend(a1, "setBatchRequestContext:", v17, 0, 0);
        goto LABEL_68;
      case 'f':
        v17 = objc_alloc_init(MTSchemaMTInvocationContext);
        if (!PBReaderPlaceMark() || !MTSchemaMTInvocationContextReadFrom(v17, a2))
          goto LABEL_75;
        PBReaderRecallMark();
        objc_msgSend(a1, "setInvocationContext:", v17, 0, 0);
        goto LABEL_68;
      case 'g':
        v17 = objc_alloc_init(MTSchemaMTASRStateUpdated);
        if (!PBReaderPlaceMark() || (MTSchemaMTASRStateUpdatedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_75;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAsrStateUpdated:", v17, 0, 0);
        goto LABEL_68;
      case 'h':
        v17 = objc_alloc_init(MTSchemaMTLocalePairResolved);
        if (!PBReaderPlaceMark() || (MTSchemaMTLocalePairResolvedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_75;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLocalePairResolved:", v17, 0, 0);
        goto LABEL_68;
      case 'i':
        v17 = objc_alloc_init(MTSchemaMTInvocationStartedTier1);
        if (!PBReaderPlaceMark() || !MTSchemaMTInvocationStartedTier1ReadFrom(v17, a2))
          goto LABEL_75;
        PBReaderRecallMark();
        objc_msgSend(a1, "setInvocationStartedTier1:", v17, 0, 0);
        goto LABEL_68;
      case 'j':
        v17 = objc_alloc_init(MTSchemaMTAppNextButtonTappedTier1);
        if (!PBReaderPlaceMark() || !MTSchemaMTAppNextButtonTappedTier1ReadFrom(v17, a2))
          goto LABEL_75;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAppNextButtonTapped:", v17, 0, 0);
        goto LABEL_68;
      case 'k':
        v17 = objc_alloc_init(MTSchemaMTAppTextBoxDismissedTier1);
        if (!PBReaderPlaceMark() || !MTSchemaMTAppTextBoxDismissedTier1ReadFrom(v17, a2))
          goto LABEL_75;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAppTextBoxDismissed:", v17, 0, 0);
        goto LABEL_68;
      case 'l':
        v17 = objc_alloc_init(MTSchemaMTAppTimedOutTier1);
        if (!PBReaderPlaceMark() || !MTSchemaMTAppTimedOutTier1ReadFrom(v17, a2))
          goto LABEL_75;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAppTimedOut:", v17, 0, 0);
        goto LABEL_68;
      case 'm':
        v17 = objc_alloc_init(MTSchemaMTFrameworkRequestSent);
        if (!PBReaderPlaceMark() || (MTSchemaMTFrameworkRequestSentReadFrom(v17, a2) & 1) == 0)
          goto LABEL_75;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFrameworkRequestSent:", v17, 0, 0);
        goto LABEL_68;
      case 'n':
        v17 = objc_alloc_init(MTSchemaMTFrameworkRequestResponseReceived);
        if (!PBReaderPlaceMark()
          || (MTSchemaMTFrameworkRequestResponseReceivedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_75;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setFrameworkRequestResponseReceived:", v17, 0, 0);
        goto LABEL_68;
      case 'o':
        v17 = objc_alloc_init(MTSchemaMTAppBackgroundedTier1);
        if (!PBReaderPlaceMark() || !MTSchemaMTAppBackgroundedTier1ReadFrom(v17, a2))
          goto LABEL_75;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAppBackgrounded:", v17, 0, 0);
        goto LABEL_68;
      case 'p':
        v17 = objc_alloc_init(MTSchemaMTLanguageIdentificationCompleted);
        if (!PBReaderPlaceMark() || (MTSchemaMTLanguageIdentificationCompletedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_75;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLanguageIdentificationCompleted:", v17, 0, 0);
        goto LABEL_68;
      case 'q':
        v17 = objc_alloc_init(MTSchemaMTLanguageDisambiguationUIShown);
        if (!PBReaderPlaceMark() || (MTSchemaMTLanguageDisambiguationUIShownReadFrom(v17, a2) & 1) == 0)
          goto LABEL_75;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLanguageDisambiguationUIShown:", v17, 0, 0);
        goto LABEL_68;
      case 'r':
        v17 = objc_alloc_init(MTSchemaMTLanguageDisambiguationUISelected);
        if (!PBReaderPlaceMark()
          || (MTSchemaMTLanguageDisambiguationUISelectedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_75;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLanguageDisambiguationUISelected:", v17, 0, 0);
        goto LABEL_68;
      case 's':
        v17 = objc_alloc_init(MTSchemaMTTranslationTTSPlayed);
        if (!PBReaderPlaceMark() || (MTSchemaMTTranslationTTSPlayedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_75;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTranslationTTSPlayed:", v17, 0, 0);
        goto LABEL_68;
      default:
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_69:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
        v17 = objc_alloc_init(MTSchemaMTClientEventMetadata);
        if (PBReaderPlaceMark() && MTSchemaMTClientEventMetadataReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setEventMetadata:", v17, 0, 0);
LABEL_68:

          goto LABEL_69;
        }
LABEL_75:

        return 0;
    }
  }
}

uint64_t MTSchemaMTErrorReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setErrorDomain:", v25);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 3)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_34;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_37;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_37:
            objc_msgSend(a1, "setErrorCode:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setErrorMessage:", v25);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MTSchemaMTInvocationCancelledReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  MTSchemaMTLocalePair *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = objc_alloc_init(MTSchemaMTLocalePair);
        if (!PBReaderPlaceMark() || (MTSchemaMTLocalePairReadFrom(v24, a2) & 1) == 0)
        {
LABEL_43:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLocalePair:", v24, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_38;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_40;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_40:
            objc_msgSend(a1, "setExists:", v20 != 0);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v24 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v24, a2) & 1) == 0)
          goto LABEL_43;
        PBReaderRecallMark();
        objc_msgSend(a1, "setQssSessionId:", v24, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MTSchemaMTInvocationContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MTSchemaMTInvocationStarted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(MTSchemaMTInvocationStarted);
        if (!PBReaderPlaceMark() || (MTSchemaMTInvocationStartedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
        goto LABEL_33;
      case 2u:
        v17 = objc_alloc_init(MTSchemaMTInvocationEnded);
        if (!PBReaderPlaceMark() || (MTSchemaMTInvocationEndedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEnded:", v17, 0, 0);
        goto LABEL_33;
      case 3u:
        v17 = objc_alloc_init(MTSchemaMTInvocationFailed);
        if (!PBReaderPlaceMark() || !MTSchemaMTInvocationFailedReadFrom(v17, a2))
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFailed:", v17, 0, 0);
        goto LABEL_33;
      case 4u:
        v17 = objc_alloc_init(MTSchemaMTInvocationCancelled);
        if (PBReaderPlaceMark() && (MTSchemaMTInvocationCancelledReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCancelled:", v17, 0, 0);
LABEL_33:

LABEL_34:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_36:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_34;
    }
  }
}

uint64_t MTSchemaMTInvocationEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  MTSchemaMTLocalePair *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = objc_alloc_init(MTSchemaMTLocalePair);
        if (!PBReaderPlaceMark() || (MTSchemaMTLocalePairReadFrom(v24, a2) & 1) == 0)
        {
LABEL_43:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLocalePair:", v24, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_38;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_40;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_40:
            objc_msgSend(a1, "setExists:", v20 != 0);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v24 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v24, a2) & 1) == 0)
          goto LABEL_43;
        PBReaderRecallMark();
        objc_msgSend(a1, "setQssSessionId:", v24, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MTSchemaMTInvocationFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  MTSchemaMTLocalePair *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(MTSchemaMTLocalePair);
        if (!PBReaderPlaceMark() || (MTSchemaMTLocalePairReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLocalePair:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(MTSchemaMTError);
        if (!PBReaderPlaceMark() || (MTSchemaMTErrorReadFrom(v18, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setError:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(SISchemaUUID);
    if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v18, a2) & 1) == 0)
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setQssSessionId:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MTSchemaMTInvocationStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_129;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v17, 0, 0);
        goto LABEL_89;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_93;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_93:
        objc_msgSend(a1, "setIsOnDeviceTranslation:", v21 != 0);
        goto LABEL_127;
      case 3u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v31 = 0;
                goto LABEL_98;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
        else
          v31 = v27;
LABEL_98:
        objc_msgSend(a1, "setMobileAssetConfigVersion:", v31);
        goto LABEL_127;
      case 4u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v38 = 0;
                goto LABEL_103;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v38 = 0;
        else
          v38 = v34;
LABEL_103:
        objc_msgSend(a1, "setTask:", v38);
        goto LABEL_127;
      case 5u:
        v39 = 0;
        v40 = 0;
        v41 = 0;
        while (2)
        {
          v42 = *v3;
          v43 = *(_QWORD *)(a2 + v42);
          if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v43 + 1;
            v41 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              v14 = v40++ >= 9;
              if (v14)
              {
                v45 = 0;
                goto LABEL_108;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v45 = 0;
        else
          v45 = v41;
LABEL_108:
        objc_msgSend(a1, "setInputSource:", v45);
        goto LABEL_127;
      case 6u:
        v46 = 0;
        v47 = 0;
        v48 = 0;
        while (2)
        {
          v49 = *v3;
          v50 = *(_QWORD *)(a2 + v49);
          if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
            *(_QWORD *)(a2 + v49) = v50 + 1;
            v48 |= (unint64_t)(v51 & 0x7F) << v46;
            if (v51 < 0)
            {
              v46 += 7;
              v14 = v47++ >= 9;
              if (v14)
              {
                v48 = 0;
                goto LABEL_112;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v48 = 0;
LABEL_112:
        objc_msgSend(a1, "setIsExplicitLanguageFilterEnabled:", v48 != 0);
        goto LABEL_127;
      case 7u:
        v52 = 0;
        v53 = 0;
        v54 = 0;
        while (2)
        {
          v55 = *v3;
          v56 = *(_QWORD *)(a2 + v55);
          if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
            *(_QWORD *)(a2 + v55) = v56 + 1;
            v54 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              v14 = v53++ >= 9;
              if (v14)
              {
                v54 = 0;
                goto LABEL_116;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v54 = 0;
LABEL_116:
        objc_msgSend(a1, "setIsLanguageIdentificationEnabled:", v54 != 0);
        goto LABEL_127;
      case 8u:
        v58 = 0;
        v59 = 0;
        v60 = 0;
        while (2)
        {
          v61 = *v3;
          v62 = *(_QWORD *)(a2 + v61);
          if (v62 == -1 || v62 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v63 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v62);
            *(_QWORD *)(a2 + v61) = v62 + 1;
            v60 |= (unint64_t)(v63 & 0x7F) << v58;
            if (v63 < 0)
            {
              v58 += 7;
              v14 = v59++ >= 9;
              if (v14)
              {
                v64 = 0;
                goto LABEL_121;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v64 = 0;
        else
          v64 = v60;
LABEL_121:
        objc_msgSend(a1, "setDisplayMode:", v64);
        goto LABEL_127;
      case 9u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_129;
        PBReaderRecallMark();
        objc_msgSend(a1, "setQssSessionId:", v17, 0, 0);
        goto LABEL_89;
      case 0xAu:
        v65 = 0;
        v66 = 0;
        v67 = 0;
        while (2)
        {
          v68 = *v3;
          v69 = *(_QWORD *)(a2 + v68);
          if (v69 == -1 || v69 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v70 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v69);
            *(_QWORD *)(a2 + v68) = v69 + 1;
            v67 |= (unint64_t)(v70 & 0x7F) << v65;
            if (v70 < 0)
            {
              v65 += 7;
              v14 = v66++ >= 9;
              if (v14)
              {
                v71 = 0;
                goto LABEL_126;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v71 = 0;
        else
          v71 = v67;
LABEL_126:
        objc_msgSend(a1, "setInvocationType:", v71);
        goto LABEL_127;
      case 0xBu:
        v17 = objc_alloc_init(MTSchemaMTAppInvocationMetadata);
        if (!PBReaderPlaceMark() || (MTSchemaMTAppInvocationMetadataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_129;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAppInvocationMetadata:", v17, 0, 0);
        goto LABEL_89;
      case 0xCu:
        v17 = objc_alloc_init(MTSchemaMTApiInvocationMetadata);
        if (PBReaderPlaceMark() && (MTSchemaMTApiInvocationMetadataReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setApiInvocationMetadata:", v17, 0, 0);
LABEL_89:

LABEL_127:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_129:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_127;
    }
  }
}

BOOL MTSchemaMTInvocationStartedTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v17, 0, 0);
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setAppBundleId:", v17);
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MTSchemaMTLocalePairReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_42;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            v30 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
        v30 = *(_BYTE *)(a2 + *v5) ? 0 : v26;
LABEL_45:
        objc_msgSend(a1, "setSourceLocale:", v30);
      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_40:
        objc_msgSend(a1, "setTargetLocale:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MTSchemaMTLocalePairResolvedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  MTSchemaMTLocalePair *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(MTSchemaMTLocalePair);
        if (!PBReaderPlaceMark() || (MTSchemaMTLocalePairReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLocalePair:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MWTSchemaMWTCheckpointReportedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setStepType:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MWTSchemaMWTClientEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  MWTSchemaMWTMusicMetadataReported *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 101)
      {
        if ((_DWORD)v17 == 102)
        {
          v18 = objc_alloc_init(MWTSchemaMWTMusicMetadataReported);
          if (!PBReaderPlaceMark() || (MWTSchemaMWTMusicMetadataReportedReadFrom(v18, a2) & 1) == 0)
          {
LABEL_39:

            return 0;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "setMwtMusicMetadataReported:", v18, 0, 0);
          goto LABEL_35;
        }
        if ((_DWORD)v17 == 103)
        {
          v18 = objc_alloc_init(MWTSchemaMWTVMCPUStatsReported);
          if (!PBReaderPlaceMark() || (MWTSchemaMWTVMCPUStatsReportedReadFrom(v18, a2) & 1) == 0)
            goto LABEL_39;
          PBReaderRecallMark();
          objc_msgSend(a1, "setMwtVMCpuStatsReported:", v18, 0, 0);
          goto LABEL_35;
        }
      }
      else
      {
        if ((_DWORD)v17 == 1)
        {
          v18 = objc_alloc_init(MWTSchemaMWTEventMetadata);
          if (!PBReaderPlaceMark() || !MWTSchemaMWTEventMetadataReadFrom(v18, a2))
            goto LABEL_39;
          PBReaderRecallMark();
          objc_msgSend(a1, "setEventMetadata:", v18, 0, 0);
          goto LABEL_35;
        }
        if ((_DWORD)v17 == 101)
        {
          v18 = objc_alloc_init(MWTSchemaMWTCheckpointReported);
          if (!PBReaderPlaceMark() || (MWTSchemaMWTCheckpointReportedReadFrom(v18, a2) & 1) == 0)
            goto LABEL_39;
          PBReaderRecallMark();
          objc_msgSend(a1, "setMwtCheckpointReported:", v18, 0, 0);
LABEL_35:

          continue;
        }
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL MWTSchemaMWTEventMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  SISchemaUUID *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSubRequestId:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v18, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMwtId:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(SISchemaUUID);
    if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v18, a2) & 1) == 0)
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setRequestId:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MWTSchemaMWTMusicMetadataReportedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;
  char v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  uint64_t v100;
  char v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  uint64_t v107;
  char v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  uint64_t v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  uint64_t v121;
  char v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  uint64_t v128;
  char v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char v134;
  char v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  char v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char v146;
  char v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char v152;
  char v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char v158;
  char v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  char v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char v170;
  char v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char v176;
  char v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char v182;
  char v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char v188;
  char v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  char v194;
  char v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  char v200;
  char v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char v206;
  char v207;
  unsigned int v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  char v212;
  char v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  char v218;
  char v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  char v224;
  uint64_t v225;
  char v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  char v231;
  char v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  char v237;
  void *v238;
  char v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  char v244;
  uint64_t v245;
  char v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  char v251;
  uint64_t v252;
  char v253;
  unsigned int v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  char v258;
  uint64_t v259;
  char v260;
  unsigned int v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  char v265;
  uint64_t v266;
  char v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  char v272;
  uint64_t v273;
  char v274;
  unsigned int v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  char v279;
  uint64_t v280;
  char v281;
  unsigned int v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  char v286;
  char v287;
  unsigned int v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  char v292;
  char v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  char v298;
  char v299;
  unsigned int v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  char v304;
  char v305;
  unsigned int v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  char v310;
  char v311;
  unsigned int v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  char v316;
  char v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  char v322;
  uint64_t v323;
  char v324;
  unsigned int v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  char v329;
  uint64_t v330;
  char v331;
  unsigned int v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  char v336;
  uint64_t v337;
  char v338;
  unsigned int v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t v342;
  char v343;
  uint64_t v344;
  char v345;
  unsigned int v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  char v350;
  uint64_t v351;
  char v352;
  unsigned int v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  char v357;
  uint64_t v358;
  char v359;
  unsigned int v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  char v364;
  uint64_t v365;
  char v366;
  unsigned int v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  char v371;
  uint64_t v372;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_403;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v23 = 0;
              goto LABEL_406;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_403:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
          else
            v23 = v19;
LABEL_406:
          objc_msgSend(a1, "setMusicDomain:", v23);
          continue;
        case 2u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (v14)
                {
                  v31 = 0;
                  goto LABEL_411;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
          else
            v31 = v27;
LABEL_411:
          objc_msgSend(a1, "setQueueType:", v31);
          continue;
        case 3u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (2)
          {
            v35 = *v3;
            v36 = *(_QWORD *)(a2 + v35);
            if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
              *(_QWORD *)(a2 + v35) = v36 + 1;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                v14 = v33++ >= 9;
                if (v14)
                {
                  v38 = 0;
                  goto LABEL_416;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
          else
            v38 = v34;
LABEL_416:
          objc_msgSend(a1, "setQueueSize:", v38);
          continue;
        case 4u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                v14 = v40++ >= 9;
                if (v14)
                {
                  v41 = 0;
                  goto LABEL_420;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v41 = 0;
LABEL_420:
          objc_msgSend(a1, "setIsShuffled:", v41 != 0);
          continue;
        case 5u:
          v45 = 0;
          v46 = 0;
          v47 = 0;
          while (2)
          {
            v48 = *v3;
            v49 = *(_QWORD *)(a2 + v48);
            if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v49);
              *(_QWORD *)(a2 + v48) = v49 + 1;
              v47 |= (unint64_t)(v50 & 0x7F) << v45;
              if (v50 < 0)
              {
                v45 += 7;
                v14 = v46++ >= 9;
                if (v14)
                {
                  v51 = 0;
                  goto LABEL_425;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v51 = 0;
          else
            v51 = v47;
LABEL_425:
          objc_msgSend(a1, "setPrefetchedMetadataSource:", v51);
          continue;
        case 6u:
          v52 = 0;
          v53 = 0;
          v54 = 0;
          while (2)
          {
            v55 = *v3;
            v56 = *(_QWORD *)(a2 + v55);
            if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
              *(_QWORD *)(a2 + v55) = v56 + 1;
              v54 |= (unint64_t)(v57 & 0x7F) << v52;
              if (v57 < 0)
              {
                v52 += 7;
                v14 = v53++ >= 9;
                if (v14)
                {
                  v58 = 0;
                  goto LABEL_430;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v58 = 0;
          else
            v58 = v54;
LABEL_430:
          objc_msgSend(a1, "setAssetEndPoint:", v58);
          continue;
        case 7u:
          v59 = 0;
          v60 = 0;
          v61 = 0;
          while (2)
          {
            v62 = *v3;
            v63 = *(_QWORD *)(a2 + v62);
            if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v63);
              *(_QWORD *)(a2 + v62) = v63 + 1;
              v61 |= (unint64_t)(v64 & 0x7F) << v59;
              if (v64 < 0)
              {
                v59 += 7;
                v14 = v60++ >= 9;
                if (v14)
                {
                  v65 = 0;
                  goto LABEL_435;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v65 = 0;
          else
            v65 = v61;
LABEL_435:
          objc_msgSend(a1, "setStreamingContentType:", v65);
          continue;
        case 8u:
          v66 = 0;
          v67 = 0;
          v68 = 0;
          while (2)
          {
            v69 = *v3;
            v70 = *(_QWORD *)(a2 + v69);
            if (v70 == -1 || v70 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v71 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v70);
              *(_QWORD *)(a2 + v69) = v70 + 1;
              v68 |= (unint64_t)(v71 & 0x7F) << v66;
              if (v71 < 0)
              {
                v66 += 7;
                v14 = v67++ >= 9;
                if (v14)
                {
                  v72 = 0;
                  goto LABEL_440;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v72 = 0;
          else
            v72 = v68;
LABEL_440:
          objc_msgSend(a1, "setFormatCodec:", v72);
          continue;
        case 9u:
          v73 = 0;
          v74 = 0;
          v75 = 0;
          while (2)
          {
            v76 = *v3;
            v77 = *(_QWORD *)(a2 + v76);
            if (v77 == -1 || v77 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v78 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v77);
              *(_QWORD *)(a2 + v76) = v77 + 1;
              v75 |= (unint64_t)(v78 & 0x7F) << v73;
              if (v78 < 0)
              {
                v73 += 7;
                v14 = v74++ >= 9;
                if (v14)
                {
                  v79 = 0;
                  goto LABEL_445;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v79 = 0;
          else
            v79 = v75;
LABEL_445:
          objc_msgSend(a1, "setFormatBitrate:", v79);
          continue;
        case 0xAu:
          v80 = 0;
          v81 = 0;
          v82 = 0;
          while (2)
          {
            v83 = *v3;
            v84 = *(_QWORD *)(a2 + v83);
            if (v84 == -1 || v84 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v85 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v84);
              *(_QWORD *)(a2 + v83) = v84 + 1;
              v82 |= (unint64_t)(v85 & 0x7F) << v80;
              if (v85 < 0)
              {
                v80 += 7;
                v14 = v81++ >= 9;
                if (v14)
                {
                  v86 = 0;
                  goto LABEL_450;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v86 = 0;
          else
            v86 = v82;
LABEL_450:
          objc_msgSend(a1, "setFormatBitDepth:", v86);
          continue;
        case 0xBu:
          v87 = 0;
          v88 = 0;
          v89 = 0;
          while (2)
          {
            v90 = *v3;
            v91 = *(_QWORD *)(a2 + v90);
            if (v91 == -1 || v91 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v92 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v91);
              *(_QWORD *)(a2 + v90) = v91 + 1;
              v89 |= (unint64_t)(v92 & 0x7F) << v87;
              if (v92 < 0)
              {
                v87 += 7;
                v14 = v88++ >= 9;
                if (v14)
                {
                  v93 = 0;
                  goto LABEL_455;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v93 = 0;
          else
            v93 = v89;
LABEL_455:
          objc_msgSend(a1, "setFormatChannels:", v93);
          continue;
        case 0xCu:
          v94 = 0;
          v95 = 0;
          v96 = 0;
          while (2)
          {
            v97 = *v3;
            v98 = *(_QWORD *)(a2 + v97);
            if (v98 == -1 || v98 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v99 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v98);
              *(_QWORD *)(a2 + v97) = v98 + 1;
              v96 |= (unint64_t)(v99 & 0x7F) << v94;
              if (v99 < 0)
              {
                v94 += 7;
                v14 = v95++ >= 9;
                if (v14)
                {
                  v100 = 0;
                  goto LABEL_460;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v100 = 0;
          else
            v100 = v96;
LABEL_460:
          objc_msgSend(a1, "setFormatLayout:", v100);
          continue;
        case 0xDu:
          v101 = 0;
          v102 = 0;
          v103 = 0;
          while (2)
          {
            v104 = *v3;
            v105 = *(_QWORD *)(a2 + v104);
            if (v105 == -1 || v105 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v106 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v105);
              *(_QWORD *)(a2 + v104) = v105 + 1;
              v103 |= (unint64_t)(v106 & 0x7F) << v101;
              if (v106 < 0)
              {
                v101 += 7;
                v14 = v102++ >= 9;
                if (v14)
                {
                  v107 = 0;
                  goto LABEL_465;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v107 = 0;
          else
            v107 = v103;
LABEL_465:
          objc_msgSend(a1, "setFormatSampleRate:", v107);
          continue;
        case 0xEu:
          v108 = 0;
          v109 = 0;
          v110 = 0;
          while (2)
          {
            v111 = *v3;
            v112 = *(_QWORD *)(a2 + v111);
            if (v112 == -1 || v112 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v113 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v112);
              *(_QWORD *)(a2 + v111) = v112 + 1;
              v110 |= (unint64_t)(v113 & 0x7F) << v108;
              if (v113 < 0)
              {
                v108 += 7;
                v14 = v109++ >= 9;
                if (v14)
                {
                  v114 = 0;
                  goto LABEL_470;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v114 = 0;
          else
            v114 = v110;
LABEL_470:
          objc_msgSend(a1, "setFormatTier:", v114);
          continue;
        case 0xFu:
          v115 = 0;
          v116 = 0;
          v117 = 0;
          while (2)
          {
            v118 = *v3;
            v119 = *(_QWORD *)(a2 + v118);
            if (v119 == -1 || v119 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v120 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v119);
              *(_QWORD *)(a2 + v118) = v119 + 1;
              v117 |= (unint64_t)(v120 & 0x7F) << v115;
              if (v120 < 0)
              {
                v115 += 7;
                v14 = v116++ >= 9;
                if (v14)
                {
                  v121 = 0;
                  goto LABEL_475;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v121 = 0;
          else
            v121 = v117;
LABEL_475:
          objc_msgSend(a1, "setNumberOfSpeakers:", v121);
          continue;
        case 0x10u:
          v122 = 0;
          v123 = 0;
          v124 = 0;
          while (2)
          {
            v125 = *v3;
            v126 = *(_QWORD *)(a2 + v125);
            if (v126 == -1 || v126 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v127 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v126);
              *(_QWORD *)(a2 + v125) = v126 + 1;
              v124 |= (unint64_t)(v127 & 0x7F) << v122;
              if (v127 < 0)
              {
                v122 += 7;
                v14 = v123++ >= 9;
                if (v14)
                {
                  v128 = 0;
                  goto LABEL_480;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v128 = 0;
          else
            v128 = v124;
LABEL_480:
          objc_msgSend(a1, "setRouteConfiguration:", v128);
          continue;
        case 0x11u:
          v129 = 0;
          v130 = 0;
          v131 = 0;
          while (2)
          {
            v132 = *v3;
            v133 = *(_QWORD *)(a2 + v132);
            if (v133 == -1 || v133 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v134 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v133);
              *(_QWORD *)(a2 + v132) = v133 + 1;
              v131 |= (unint64_t)(v134 & 0x7F) << v129;
              if (v134 < 0)
              {
                v129 += 7;
                v14 = v130++ >= 9;
                if (v14)
                {
                  v131 = 0;
                  goto LABEL_484;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v131 = 0;
LABEL_484:
          objc_msgSend(a1, "setIsAccountDataReady:", v131 != 0);
          continue;
        case 0x12u:
          v135 = 0;
          v136 = 0;
          v137 = 0;
          while (2)
          {
            v138 = *v3;
            v139 = *(_QWORD *)(a2 + v138);
            if (v139 == -1 || v139 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v140 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v139);
              *(_QWORD *)(a2 + v138) = v139 + 1;
              v137 |= (unint64_t)(v140 & 0x7F) << v135;
              if (v140 < 0)
              {
                v135 += 7;
                v14 = v136++ >= 9;
                if (v14)
                {
                  v137 = 0;
                  goto LABEL_488;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v137 = 0;
LABEL_488:
          objc_msgSend(a1, "setIsStoreBagReady:", v137 != 0);
          continue;
        case 0x13u:
          v141 = 0;
          v142 = 0;
          v143 = 0;
          while (2)
          {
            v144 = *v3;
            v145 = *(_QWORD *)(a2 + v144);
            if (v145 == -1 || v145 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v146 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v145);
              *(_QWORD *)(a2 + v144) = v145 + 1;
              v143 |= (unint64_t)(v146 & 0x7F) << v141;
              if (v146 < 0)
              {
                v141 += 7;
                v14 = v142++ >= 9;
                if (v14)
                {
                  v143 = 0;
                  goto LABEL_492;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v143 = 0;
LABEL_492:
          objc_msgSend(a1, "setIsLeaseReady:", v143 != 0);
          continue;
        case 0x14u:
          v147 = 0;
          v148 = 0;
          v149 = 0;
          while (2)
          {
            v150 = *v3;
            v151 = *(_QWORD *)(a2 + v150);
            if (v151 == -1 || v151 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v152 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v151);
              *(_QWORD *)(a2 + v150) = v151 + 1;
              v149 |= (unint64_t)(v152 & 0x7F) << v147;
              if (v152 < 0)
              {
                v147 += 7;
                v14 = v148++ >= 9;
                if (v14)
                {
                  v149 = 0;
                  goto LABEL_496;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v149 = 0;
LABEL_496:
          objc_msgSend(a1, "setIsOnlineKeyReady:", v149 != 0);
          continue;
        case 0x15u:
          v153 = 0;
          v154 = 0;
          v155 = 0;
          while (2)
          {
            v156 = *v3;
            v157 = *(_QWORD *)(a2 + v156);
            if (v157 == -1 || v157 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v158 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v157);
              *(_QWORD *)(a2 + v156) = v157 + 1;
              v155 |= (unint64_t)(v158 & 0x7F) << v153;
              if (v158 < 0)
              {
                v153 += 7;
                v14 = v154++ >= 9;
                if (v14)
                {
                  v155 = 0;
                  goto LABEL_500;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v155 = 0;
LABEL_500:
          objc_msgSend(a1, "setIsOfflineKeyReady:", v155 != 0);
          continue;
        case 0x16u:
          v159 = 0;
          v160 = 0;
          v161 = 0;
          while (2)
          {
            v162 = *v3;
            v163 = *(_QWORD *)(a2 + v162);
            if (v163 == -1 || v163 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v164 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v163);
              *(_QWORD *)(a2 + v162) = v163 + 1;
              v161 |= (unint64_t)(v164 & 0x7F) << v159;
              if (v164 < 0)
              {
                v159 += 7;
                v14 = v160++ >= 9;
                if (v14)
                {
                  v161 = 0;
                  goto LABEL_504;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v161 = 0;
LABEL_504:
          objc_msgSend(a1, "setIsHlsKeysReady:", v161 != 0);
          continue;
        case 0x17u:
          v165 = 0;
          v166 = 0;
          v167 = 0;
          while (2)
          {
            v168 = *v3;
            v169 = *(_QWORD *)(a2 + v168);
            if (v169 == -1 || v169 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v170 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v169);
              *(_QWORD *)(a2 + v168) = v169 + 1;
              v167 |= (unint64_t)(v170 & 0x7F) << v165;
              if (v170 < 0)
              {
                v165 += 7;
                v14 = v166++ >= 9;
                if (v14)
                {
                  v167 = 0;
                  goto LABEL_508;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v167 = 0;
LABEL_508:
          objc_msgSend(a1, "setIsInterruptingPlayback:", v167 != 0);
          continue;
        case 0x18u:
          v171 = 0;
          v172 = 0;
          v173 = 0;
          while (2)
          {
            v174 = *v3;
            v175 = *(_QWORD *)(a2 + v174);
            if (v175 == -1 || v175 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v176 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v175);
              *(_QWORD *)(a2 + v174) = v175 + 1;
              v173 |= (unint64_t)(v176 & 0x7F) << v171;
              if (v176 < 0)
              {
                v171 += 7;
                v14 = v172++ >= 9;
                if (v14)
                {
                  v173 = 0;
                  goto LABEL_512;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v173 = 0;
LABEL_512:
          objc_msgSend(a1, "setIsRemoteSetQueue:", v173 != 0);
          continue;
        case 0x19u:
          v177 = 0;
          v178 = 0;
          v179 = 0;
          while (2)
          {
            v180 = *v3;
            v181 = *(_QWORD *)(a2 + v180);
            if (v181 == -1 || v181 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v182 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v181);
              *(_QWORD *)(a2 + v180) = v181 + 1;
              v179 |= (unint64_t)(v182 & 0x7F) << v177;
              if (v182 < 0)
              {
                v177 += 7;
                v14 = v178++ >= 9;
                if (v14)
                {
                  v179 = 0;
                  goto LABEL_516;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v179 = 0;
LABEL_516:
          objc_msgSend(a1, "setIsDelegatedPlayback:", v179 != 0);
          continue;
        case 0x1Au:
          v183 = 0;
          v184 = 0;
          v185 = 0;
          while (2)
          {
            v186 = *v3;
            v187 = *(_QWORD *)(a2 + v186);
            if (v187 == -1 || v187 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v188 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v187);
              *(_QWORD *)(a2 + v186) = v187 + 1;
              v185 |= (unint64_t)(v188 & 0x7F) << v183;
              if (v188 < 0)
              {
                v183 += 7;
                v14 = v184++ >= 9;
                if (v14)
                {
                  v185 = 0;
                  goto LABEL_520;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v185 = 0;
LABEL_520:
          objc_msgSend(a1, "setIsNonDefaultUser:", v185 != 0);
          continue;
        case 0x1Bu:
          v189 = 0;
          v190 = 0;
          v191 = 0;
          while (2)
          {
            v192 = *v3;
            v193 = *(_QWORD *)(a2 + v192);
            if (v193 == -1 || v193 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v194 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v193);
              *(_QWORD *)(a2 + v192) = v193 + 1;
              v191 |= (unint64_t)(v194 & 0x7F) << v189;
              if (v194 < 0)
              {
                v189 += 7;
                v14 = v190++ >= 9;
                if (v14)
                {
                  v191 = 0;
                  goto LABEL_524;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v191 = 0;
LABEL_524:
          objc_msgSend(a1, "setIsAutoPlay:", v191 != 0);
          continue;
        case 0x1Cu:
          v195 = 0;
          v196 = 0;
          v197 = 0;
          while (2)
          {
            v198 = *v3;
            v199 = *(_QWORD *)(a2 + v198);
            if (v199 == -1 || v199 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v200 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v199);
              *(_QWORD *)(a2 + v198) = v199 + 1;
              v197 |= (unint64_t)(v200 & 0x7F) << v195;
              if (v200 < 0)
              {
                v195 += 7;
                v14 = v196++ >= 9;
                if (v14)
                {
                  v197 = 0;
                  goto LABEL_528;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v197 = 0;
LABEL_528:
          objc_msgSend(a1, "setIsFirstPlayAfterAppLaunch:", v197 != 0);
          continue;
        case 0x1Du:
          v201 = 0;
          v202 = 0;
          v203 = 0;
          while (2)
          {
            v204 = *v3;
            v205 = *(_QWORD *)(a2 + v204);
            if (v205 == -1 || v205 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v206 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v205);
              *(_QWORD *)(a2 + v204) = v205 + 1;
              v203 |= (unint64_t)(v206 & 0x7F) << v201;
              if (v206 < 0)
              {
                v201 += 7;
                v14 = v202++ >= 9;
                if (v14)
                {
                  v203 = 0;
                  goto LABEL_532;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v203 = 0;
LABEL_532:
          objc_msgSend(a1, "setIsMiniSinfAvailable:", v203 != 0);
          continue;
        case 0x1Eu:
          v207 = 0;
          v208 = 0;
          v209 = 0;
          while (2)
          {
            v210 = *v3;
            v211 = *(_QWORD *)(a2 + v210);
            if (v211 == -1 || v211 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v212 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v211);
              *(_QWORD *)(a2 + v210) = v211 + 1;
              v209 |= (unint64_t)(v212 & 0x7F) << v207;
              if (v212 < 0)
              {
                v207 += 7;
                v14 = v208++ >= 9;
                if (v14)
                {
                  v209 = 0;
                  goto LABEL_536;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v209 = 0;
LABEL_536:
          objc_msgSend(a1, "setIsSharePlayPlayback:", v209 != 0);
          continue;
        case 0x1Fu:
          v213 = 0;
          v214 = 0;
          v215 = 0;
          while (2)
          {
            v216 = *v3;
            v217 = *(_QWORD *)(a2 + v216);
            if (v217 == -1 || v217 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v218 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v217);
              *(_QWORD *)(a2 + v216) = v217 + 1;
              v215 |= (unint64_t)(v218 & 0x7F) << v213;
              if (v218 < 0)
              {
                v213 += 7;
                v14 = v214++ >= 9;
                if (v14)
                {
                  v215 = 0;
                  goto LABEL_540;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v215 = 0;
LABEL_540:
          objc_msgSend(a1, "setIsSuzeLease:", v215 != 0);
          continue;
        case 0x20u:
          v219 = 0;
          v220 = 0;
          v221 = 0;
          while (2)
          {
            v222 = *v3;
            v223 = *(_QWORD *)(a2 + v222);
            if (v223 == -1 || v223 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v224 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v223);
              *(_QWORD *)(a2 + v222) = v223 + 1;
              v221 |= (unint64_t)(v224 & 0x7F) << v219;
              if (v224 < 0)
              {
                v219 += 7;
                v14 = v220++ >= 9;
                if (v14)
                {
                  v225 = 0;
                  goto LABEL_545;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v225 = 0;
          else
            v225 = v221;
LABEL_545:
          objc_msgSend(a1, "setNetworkConnectionType:", v225);
          continue;
        case 0x21u:
          v226 = 0;
          v227 = 0;
          v228 = 0;
          while (2)
          {
            v229 = *v3;
            v230 = *(_QWORD *)(a2 + v229);
            if (v230 == -1 || v230 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v231 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v230);
              *(_QWORD *)(a2 + v229) = v230 + 1;
              v228 |= (unint64_t)(v231 & 0x7F) << v226;
              if (v231 < 0)
              {
                v226 += 7;
                v14 = v227++ >= 9;
                if (v14)
                {
                  v228 = 0;
                  goto LABEL_549;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v228 = 0;
LABEL_549:
          objc_msgSend(a1, "setWasMediaLibraryDatabaseUpgraded:", v228 != 0);
          continue;
        case 0x22u:
          v232 = 0;
          v233 = 0;
          v234 = 0;
          while (2)
          {
            v235 = *v3;
            v236 = *(_QWORD *)(a2 + v235);
            if (v236 == -1 || v236 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v237 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v236);
              *(_QWORD *)(a2 + v235) = v236 + 1;
              v234 |= (unint64_t)(v237 & 0x7F) << v232;
              if (v237 < 0)
              {
                v232 += 7;
                v14 = v233++ >= 9;
                if (v14)
                {
                  v234 = 0;
                  goto LABEL_553;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v234 = 0;
LABEL_553:
          objc_msgSend(a1, "setIsPrimaryUser:", v234 != 0);
          continue;
        case 0x23u:
          PBReaderReadString();
          v238 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setErrorResolutionType:", v238);
          goto LABEL_401;
        case 0x24u:
          v239 = 0;
          v240 = 0;
          v241 = 0;
          while (2)
          {
            v242 = *v3;
            v243 = *(_QWORD *)(a2 + v242);
            if (v243 == -1 || v243 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v244 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v243);
              *(_QWORD *)(a2 + v242) = v243 + 1;
              v241 |= (unint64_t)(v244 & 0x7F) << v239;
              if (v244 < 0)
              {
                v239 += 7;
                v14 = v240++ >= 9;
                if (v14)
                {
                  v245 = 0;
                  goto LABEL_558;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v245 = 0;
          else
            v245 = v241;
LABEL_558:
          objc_msgSend(a1, "setEndPointType:", v245);
          continue;
        case 0x25u:
          v246 = 0;
          v247 = 0;
          v248 = 0;
          while (2)
          {
            v249 = *v3;
            v250 = *(_QWORD *)(a2 + v249);
            if (v250 == -1 || v250 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v251 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v250);
              *(_QWORD *)(a2 + v249) = v250 + 1;
              v248 |= (unint64_t)(v251 & 0x7F) << v246;
              if (v251 < 0)
              {
                v246 += 7;
                v14 = v247++ >= 9;
                if (v14)
                {
                  v252 = 0;
                  goto LABEL_563;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v252 = 0;
          else
            v252 = v248;
LABEL_563:
          objc_msgSend(a1, "setRouteType:", v252);
          continue;
        case 0x26u:
          v253 = 0;
          v254 = 0;
          v255 = 0;
          while (2)
          {
            v256 = *v3;
            v257 = *(_QWORD *)(a2 + v256);
            if (v257 == -1 || v257 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v258 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v257);
              *(_QWORD *)(a2 + v256) = v257 + 1;
              v255 |= (unint64_t)(v258 & 0x7F) << v253;
              if (v258 < 0)
              {
                v253 += 7;
                v14 = v254++ >= 9;
                if (v14)
                {
                  v259 = 0;
                  goto LABEL_568;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v259 = 0;
          else
            v259 = v255;
LABEL_568:
          objc_msgSend(a1, "setFormatLayoutValue:", v259);
          continue;
        case 0x27u:
          v260 = 0;
          v261 = 0;
          v262 = 0;
          while (2)
          {
            v263 = *v3;
            v264 = *(_QWORD *)(a2 + v263);
            if (v264 == -1 || v264 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v265 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v264);
              *(_QWORD *)(a2 + v263) = v264 + 1;
              v262 |= (unint64_t)(v265 & 0x7F) << v260;
              if (v265 < 0)
              {
                v260 += 7;
                v14 = v261++ >= 9;
                if (v14)
                {
                  v266 = 0;
                  goto LABEL_573;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v266 = 0;
          else
            v266 = v262;
LABEL_573:
          objc_msgSend(a1, "setAssetSource:", v266);
          continue;
        case 0x28u:
          v267 = 0;
          v268 = 0;
          v269 = 0;
          while (2)
          {
            v270 = *v3;
            v271 = *(_QWORD *)(a2 + v270);
            if (v271 == -1 || v271 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v272 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v271);
              *(_QWORD *)(a2 + v270) = v271 + 1;
              v269 |= (unint64_t)(v272 & 0x7F) << v267;
              if (v272 < 0)
              {
                v267 += 7;
                v14 = v268++ >= 9;
                if (v14)
                {
                  v273 = 0;
                  goto LABEL_578;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v273 = 0;
          else
            v273 = v269;
LABEL_578:
          objc_msgSend(a1, "setAssetLocation:", v273);
          continue;
        case 0x29u:
          v274 = 0;
          v275 = 0;
          v276 = 0;
          while (2)
          {
            v277 = *v3;
            v278 = *(_QWORD *)(a2 + v277);
            if (v278 == -1 || v278 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v279 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v278);
              *(_QWORD *)(a2 + v277) = v278 + 1;
              v276 |= (unint64_t)(v279 & 0x7F) << v274;
              if (v279 < 0)
              {
                v274 += 7;
                v14 = v275++ >= 9;
                if (v14)
                {
                  v280 = 0;
                  goto LABEL_583;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v280 = 0;
          else
            v280 = v276;
LABEL_583:
          objc_msgSend(a1, "setSubscriptionType:", v280);
          continue;
        case 0x2Au:
          v281 = 0;
          v282 = 0;
          v283 = 0;
          while (2)
          {
            v284 = *v3;
            v285 = *(_QWORD *)(a2 + v284);
            if (v285 == -1 || v285 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v286 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v285);
              *(_QWORD *)(a2 + v284) = v285 + 1;
              v283 |= (unint64_t)(v286 & 0x7F) << v281;
              if (v286 < 0)
              {
                v281 += 7;
                v14 = v282++ >= 9;
                if (v14)
                {
                  v283 = 0;
                  goto LABEL_587;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v283 = 0;
LABEL_587:
          objc_msgSend(a1, "setHasLookupWaitTime:", v283 != 0);
          continue;
        case 0x2Bu:
          v287 = 0;
          v288 = 0;
          v289 = 0;
          while (2)
          {
            v290 = *v3;
            v291 = *(_QWORD *)(a2 + v290);
            if (v291 == -1 || v291 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v292 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v291);
              *(_QWORD *)(a2 + v290) = v291 + 1;
              v289 |= (unint64_t)(v292 & 0x7F) << v287;
              if (v292 < 0)
              {
                v287 += 7;
                v14 = v288++ >= 9;
                if (v14)
                {
                  v289 = 0;
                  goto LABEL_591;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v289 = 0;
LABEL_591:
          objc_msgSend(a1, "setHasBagWaitTime:", v289 != 0);
          continue;
        case 0x2Cu:
          v293 = 0;
          v294 = 0;
          v295 = 0;
          while (2)
          {
            v296 = *v3;
            v297 = *(_QWORD *)(a2 + v296);
            if (v297 == -1 || v297 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v298 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v297);
              *(_QWORD *)(a2 + v296) = v297 + 1;
              v295 |= (unint64_t)(v298 & 0x7F) << v293;
              if (v298 < 0)
              {
                v293 += 7;
                v14 = v294++ >= 9;
                if (v14)
                {
                  v295 = 0;
                  goto LABEL_595;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v295 = 0;
LABEL_595:
          objc_msgSend(a1, "setHasLeaseWaitTime:", v295 != 0);
          continue;
        case 0x2Du:
          v299 = 0;
          v300 = 0;
          v301 = 0;
          while (2)
          {
            v302 = *v3;
            v303 = *(_QWORD *)(a2 + v302);
            if (v303 == -1 || v303 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v304 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v303);
              *(_QWORD *)(a2 + v302) = v303 + 1;
              v301 |= (unint64_t)(v304 & 0x7F) << v299;
              if (v304 < 0)
              {
                v299 += 7;
                v14 = v300++ >= 9;
                if (v14)
                {
                  v301 = 0;
                  goto LABEL_599;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v301 = 0;
LABEL_599:
          objc_msgSend(a1, "setHasSuzeLeaseWaitTime:", v301 != 0);
          continue;
        case 0x2Eu:
          v305 = 0;
          v306 = 0;
          v307 = 0;
          while (2)
          {
            v308 = *v3;
            v309 = *(_QWORD *)(a2 + v308);
            if (v309 == -1 || v309 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v310 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v309);
              *(_QWORD *)(a2 + v308) = v309 + 1;
              v307 |= (unint64_t)(v310 & 0x7F) << v305;
              if (v310 < 0)
              {
                v305 += 7;
                v14 = v306++ >= 9;
                if (v14)
                {
                  v307 = 0;
                  goto LABEL_603;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v307 = 0;
LABEL_603:
          objc_msgSend(a1, "setHasSubscriptionAssetLoadWaitTime:", v307 != 0);
          continue;
        case 0x2Fu:
          v311 = 0;
          v312 = 0;
          v313 = 0;
          while (2)
          {
            v314 = *v3;
            v315 = *(_QWORD *)(a2 + v314);
            if (v315 == -1 || v315 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v316 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v315);
              *(_QWORD *)(a2 + v314) = v315 + 1;
              v313 |= (unint64_t)(v316 & 0x7F) << v311;
              if (v316 < 0)
              {
                v311 += 7;
                v14 = v312++ >= 9;
                if (v14)
                {
                  v313 = 0;
                  goto LABEL_607;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v313 = 0;
LABEL_607:
          objc_msgSend(a1, "setHasMediaRedownloadWaitTime:", v313 != 0);
          continue;
        case 0x30u:
          v317 = 0;
          v318 = 0;
          v319 = 0;
          while (2)
          {
            v320 = *v3;
            v321 = *(_QWORD *)(a2 + v320);
            if (v321 == -1 || v321 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v322 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v321);
              *(_QWORD *)(a2 + v320) = v321 + 1;
              v319 |= (unint64_t)(v322 & 0x7F) << v317;
              if (v322 < 0)
              {
                v317 += 7;
                v14 = v318++ >= 9;
                if (v14)
                {
                  v323 = 0;
                  goto LABEL_612;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v323 = 0;
          else
            v323 = v319;
LABEL_612:
          objc_msgSend(a1, "setCmInitialStartupItemCreationToReadyToPlayDurationInMs:", v323);
          continue;
        case 0x31u:
          v324 = 0;
          v325 = 0;
          v326 = 0;
          while (2)
          {
            v327 = *v3;
            v328 = *(_QWORD *)(a2 + v327);
            if (v328 == -1 || v328 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v329 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v328);
              *(_QWORD *)(a2 + v327) = v328 + 1;
              v326 |= (unint64_t)(v329 & 0x7F) << v324;
              if (v329 < 0)
              {
                v324 += 7;
                v14 = v325++ >= 9;
                if (v14)
                {
                  v330 = 0;
                  goto LABEL_617;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v330 = 0;
          else
            v330 = v326;
LABEL_617:
          objc_msgSend(a1, "setCmInitialStartupItemCreationToLtluDurationInMs:", v330);
          continue;
        case 0x32u:
          v331 = 0;
          v332 = 0;
          v333 = 0;
          while (2)
          {
            v334 = *v3;
            v335 = *(_QWORD *)(a2 + v334);
            if (v335 == -1 || v335 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v336 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v335);
              *(_QWORD *)(a2 + v334) = v335 + 1;
              v333 |= (unint64_t)(v336 & 0x7F) << v331;
              if (v336 < 0)
              {
                v331 += 7;
                v14 = v332++ >= 9;
                if (v14)
                {
                  v337 = 0;
                  goto LABEL_622;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v337 = 0;
          else
            v337 = v333;
LABEL_622:
          objc_msgSend(a1, "setMasterPlaylistConnectionTlsHandshakeDurationInMs:", v337);
          continue;
        case 0x33u:
          v338 = 0;
          v339 = 0;
          v340 = 0;
          while (2)
          {
            v341 = *v3;
            v342 = *(_QWORD *)(a2 + v341);
            if (v342 == -1 || v342 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v343 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v342);
              *(_QWORD *)(a2 + v341) = v342 + 1;
              v340 |= (unint64_t)(v343 & 0x7F) << v338;
              if (v343 < 0)
              {
                v338 += 7;
                v14 = v339++ >= 9;
                if (v14)
                {
                  v344 = 0;
                  goto LABEL_627;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v344 = 0;
          else
            v344 = v340;
LABEL_627:
          objc_msgSend(a1, "setMasterPlaylistRequestDurationInMs:", v344);
          continue;
        case 0x34u:
          v345 = 0;
          v346 = 0;
          v347 = 0;
          while (2)
          {
            v348 = *v3;
            v349 = *(_QWORD *)(a2 + v348);
            if (v349 == -1 || v349 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v350 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v349);
              *(_QWORD *)(a2 + v348) = v349 + 1;
              v347 |= (unint64_t)(v350 & 0x7F) << v345;
              if (v350 < 0)
              {
                v345 += 7;
                v14 = v346++ >= 9;
                if (v14)
                {
                  v351 = 0;
                  goto LABEL_632;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v351 = 0;
          else
            v351 = v347;
LABEL_632:
          objc_msgSend(a1, "setSubPlaylistConnectionTlsHandshakeDurationInMs:", v351);
          continue;
        case 0x35u:
          v352 = 0;
          v353 = 0;
          v354 = 0;
          while (2)
          {
            v355 = *v3;
            v356 = *(_QWORD *)(a2 + v355);
            if (v356 == -1 || v356 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v357 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v356);
              *(_QWORD *)(a2 + v355) = v356 + 1;
              v354 |= (unint64_t)(v357 & 0x7F) << v352;
              if (v357 < 0)
              {
                v352 += 7;
                v14 = v353++ >= 9;
                if (v14)
                {
                  v358 = 0;
                  goto LABEL_637;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v358 = 0;
          else
            v358 = v354;
LABEL_637:
          objc_msgSend(a1, "setSubPlaylistRequestDurationInMs:", v358);
          continue;
        case 0x36u:
          v359 = 0;
          v360 = 0;
          v361 = 0;
          while (2)
          {
            v362 = *v3;
            v363 = *(_QWORD *)(a2 + v362);
            if (v363 == -1 || v363 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v364 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v363);
              *(_QWORD *)(a2 + v362) = v363 + 1;
              v361 |= (unint64_t)(v364 & 0x7F) << v359;
              if (v364 < 0)
              {
                v359 += 7;
                v14 = v360++ >= 9;
                if (v14)
                {
                  v365 = 0;
                  goto LABEL_642;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v365 = 0;
          else
            v365 = v361;
LABEL_642:
          objc_msgSend(a1, "setContentConnectionTlsHandshakeDurationInMs:", v365);
          continue;
        case 0x37u:
          v366 = 0;
          v367 = 0;
          v368 = 0;
          break;
        case 0x38u:
          PBReaderReadString();
          v238 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setAudioQueueType:", v238);
LABEL_401:

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v369 = *v3;
        v370 = *(_QWORD *)(a2 + v369);
        if (v370 == -1 || v370 >= *(_QWORD *)(a2 + *v4))
          break;
        v371 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v370);
        *(_QWORD *)(a2 + v369) = v370 + 1;
        v368 |= (unint64_t)(v371 & 0x7F) << v366;
        if ((v371 & 0x80) == 0)
          goto LABEL_644;
        v366 += 7;
        v14 = v367++ >= 9;
        if (v14)
        {
          v372 = 0;
          goto LABEL_647;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_644:
      v372 = *(_BYTE *)(a2 + *v5) ? 0 : v368;
LABEL_647:
      objc_msgSend(a1, "setContentFirstSegmentDurationInMs:", v372);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t MWTSchemaMWTVMCPUStatsReportedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_85;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v23 = 0;
              goto LABEL_88;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_85:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
          else
            v23 = v19;
LABEL_88:
          objc_msgSend(a1, "setSnapshotStage:", v23);
          continue;
        case 2u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (v14)
                {
                  v31 = 0;
                  goto LABEL_93;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
          else
            v31 = v27;
LABEL_93:
          objc_msgSend(a1, "setCpuTicksSystem:", v31);
          continue;
        case 3u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (2)
          {
            v35 = *v3;
            v36 = *(_QWORD *)(a2 + v35);
            if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
              *(_QWORD *)(a2 + v35) = v36 + 1;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                v14 = v33++ >= 9;
                if (v14)
                {
                  v38 = 0;
                  goto LABEL_98;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
          else
            v38 = v34;
LABEL_98:
          objc_msgSend(a1, "setCpuTicksUser:", v38);
          continue;
        case 4u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                v14 = v40++ >= 9;
                if (v14)
                {
                  v45 = 0;
                  goto LABEL_103;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v45 = 0;
          else
            v45 = v41;
LABEL_103:
          objc_msgSend(a1, "setCpuTicksIdle:", v45);
          continue;
        case 5u:
          v46 = 0;
          v47 = 0;
          v48 = 0;
          while (2)
          {
            v49 = *v3;
            v50 = *(_QWORD *)(a2 + v49);
            if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
              *(_QWORD *)(a2 + v49) = v50 + 1;
              v48 |= (unint64_t)(v51 & 0x7F) << v46;
              if (v51 < 0)
              {
                v46 += 7;
                v14 = v47++ >= 9;
                if (v14)
                {
                  v52 = 0;
                  goto LABEL_108;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v52 = 0;
          else
            v52 = v48;
LABEL_108:
          objc_msgSend(a1, "setCpuTicksNice:", v52);
          continue;
        case 6u:
          v53 = 0;
          v54 = 0;
          v55 = 0;
          while (2)
          {
            v56 = *v3;
            v57 = *(_QWORD *)(a2 + v56);
            if (v57 == -1 || v57 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
              *(_QWORD *)(a2 + v56) = v57 + 1;
              v55 |= (unint64_t)(v58 & 0x7F) << v53;
              if (v58 < 0)
              {
                v53 += 7;
                v14 = v54++ >= 9;
                if (v14)
                {
                  v59 = 0;
                  goto LABEL_113;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v59 = 0;
          else
            v59 = v55;
LABEL_113:
          objc_msgSend(a1, "setCompressions:", v59);
          continue;
        case 7u:
          v60 = 0;
          v61 = 0;
          v62 = 0;
          while (2)
          {
            v63 = *v3;
            v64 = *(_QWORD *)(a2 + v63);
            if (v64 == -1 || v64 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v65 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v64);
              *(_QWORD *)(a2 + v63) = v64 + 1;
              v62 |= (unint64_t)(v65 & 0x7F) << v60;
              if (v65 < 0)
              {
                v60 += 7;
                v14 = v61++ >= 9;
                if (v14)
                {
                  v66 = 0;
                  goto LABEL_118;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v66 = 0;
          else
            v66 = v62;
LABEL_118:
          objc_msgSend(a1, "setDecompressions:", v66);
          continue;
        case 8u:
          v67 = 0;
          v68 = 0;
          v69 = 0;
          while (2)
          {
            v70 = *v3;
            v71 = *(_QWORD *)(a2 + v70);
            if (v71 == -1 || v71 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v72 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v71);
              *(_QWORD *)(a2 + v70) = v71 + 1;
              v69 |= (unint64_t)(v72 & 0x7F) << v67;
              if (v72 < 0)
              {
                v67 += 7;
                v14 = v68++ >= 9;
                if (v14)
                {
                  v73 = 0;
                  goto LABEL_123;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v73 = 0;
          else
            v73 = v69;
LABEL_123:
          objc_msgSend(a1, "setPageins:", v73);
          continue;
        case 9u:
          v74 = 0;
          v75 = 0;
          v76 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v77 = *v3;
        v78 = *(_QWORD *)(a2 + v77);
        if (v78 == -1 || v78 >= *(_QWORD *)(a2 + *v4))
          break;
        v79 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v78);
        *(_QWORD *)(a2 + v77) = v78 + 1;
        v76 |= (unint64_t)(v79 & 0x7F) << v74;
        if ((v79 & 0x80) == 0)
          goto LABEL_125;
        v74 += 7;
        v14 = v75++ >= 9;
        if (v14)
        {
          v80 = 0;
          goto LABEL_128;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_125:
      v80 = *(_BYTE *)(a2 + *v5) ? 0 : v76;
LABEL_128:
      objc_msgSend(a1, "setFaults:", v80);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NETSchemaNETBluetoothDeviceReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  double v29;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v27 = *v3;
        v28 = *(_QWORD *)(a2 + v27);
        if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v29 = *(double *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v29 = 0.0;
        }
        objc_msgSend(a1, "setRssi:", v29);
      }
      else if ((v10 >> 3) == 1)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          v24 = v23 + 1;
          if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v24;
          v21 |= (unint64_t)(v25 & 0x7F) << v19;
          if ((v25 & 0x80) == 0)
            goto LABEL_33;
          v19 += 7;
          v15 = v20++ >= 9;
          if (v15)
          {
            v26 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        v26 = *(_BYTE *)(a2 + *v5) ? 0 : v21;
LABEL_36:
        objc_msgSend(a1, "setIndex:", v26);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NETSchemaNETClientEventReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  NETSchemaNETSessionConnectionHttpHeaderCreated *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 'e':
        v17 = objc_alloc_init(NETSchemaNETSessionConnectionHttpHeaderCreated);
        if (!PBReaderPlaceMark() || !NETSchemaNETSessionConnectionHttpHeaderCreatedReadFrom(v17, a2))
          goto LABEL_57;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSessionConnectionHttpHeaderCreated:", v17, 0, 0);
        goto LABEL_50;
      case 'f':
        v17 = objc_alloc_init(NETSchemaNETSessionConnectionSnapshotCaptured);
        if (!PBReaderPlaceMark()
          || (NETSchemaNETSessionConnectionSnapshotCapturedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_57;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSessionConnectionSnapshotCaptured:", v17, 0, 0);
        goto LABEL_50;
      case 'g':
        v17 = objc_alloc_init(NETSchemaNETDebugSessionConnectionSnapshotCaptured);
        if (!PBReaderPlaceMark()
          || (NETSchemaNETDebugSessionConnectionSnapshotCapturedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_57;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setDebugSessionConnectionSnapshotCaptured:", v17, 0, 0);
        goto LABEL_50;
      case 'h':
        v17 = objc_alloc_init(NETSchemaNETSessionConnectionFailed);
        if (!PBReaderPlaceMark() || (NETSchemaNETSessionConnectionFailedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_57;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSessionConnectionFailed:", v17, 0, 0);
        goto LABEL_50;
      case 'i':
        v17 = objc_alloc_init(NETSchemaNETPeerConnectionFailed);
        if (!PBReaderPlaceMark() || (NETSchemaNETPeerConnectionFailedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_57;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPeerConnectionFailed:", v17, 0, 0);
        goto LABEL_50;
      case 'j':
        v17 = objc_alloc_init(NETSchemaNETNetworkConnectionStatePreparationSnapshotCaptured);
        if (!PBReaderPlaceMark()
          || (NETSchemaNETNetworkConnectionStatePreparationSnapshotCapturedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_57;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setNetworkConnectionStatePreparationSnapshotCaptured:", v17, 0, 0);
        goto LABEL_50;
      case 'k':
        v17 = objc_alloc_init(NETSchemaNETDebugNetworkConnectionStatePreparationSnapshotCaptured);
        if (!PBReaderPlaceMark()
          || (NETSchemaNETDebugNetworkConnectionStatePreparationSnapshotCapturedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_57;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setDebugNetworkConnectionStatePreparationSnapshotCaptured:", v17, 0, 0);
        goto LABEL_50;
      case 'l':
        v17 = objc_alloc_init(NETSchemaNETNetworkConnectionStateReadySnapshotCaptured);
        if (!PBReaderPlaceMark()
          || (NETSchemaNETNetworkConnectionStateReadySnapshotCapturedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_57;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setNetworkConnectionStateReadySnapshotCaptured:", v17, 0, 0);
        goto LABEL_50;
      case 'm':
        v17 = objc_alloc_init(NETSchemaNETDebugNetworkConnectionStateReadySnapshotCaptured);
        if (!PBReaderPlaceMark()
          || (NETSchemaNETDebugNetworkConnectionStateReadySnapshotCapturedReadFrom(v17, a2) & 1) == 0)
        {
          goto LABEL_57;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setDebugNetworkConnectionStateReadySnapshotCaptured:", v17, 0, 0);
        goto LABEL_50;
      default:
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_51:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
        v17 = objc_alloc_init(NETSchemaNETClientEventMetadata);
        if (PBReaderPlaceMark() && (NETSchemaNETClientEventMetadataReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setEventMetadata:", v17, 0, 0);
LABEL_50:

          goto LABEL_51;
        }
LABEL_57:

        return 0;
    }
  }
}

uint64_t NETSchemaNETClientEventMetadataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  SISchemaUUID *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v25, a2) & 1) == 0)
        {
LABEL_44:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setNetId:", v25, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 3)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_38;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_41;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_41:
            objc_msgSend(a1, "setProvider:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v25 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v25, a2) & 1) == 0)
          goto LABEL_44;
        PBReaderRecallMark();
        objc_msgSend(a1, "setNetworkConnectionId:", v25, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NETSchemaNETDebugNetworkConnectionStatePreparationSnapshotCapturedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  NETSchemaNETEndpoint *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_67;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_69;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_67:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_69:
        objc_msgSend(a1, "setIsExpensive:", v19 != 0);
        goto LABEL_87;
      case 2u:
        v24 = objc_alloc_init(NETSchemaNETEndpoint);
        v50 = 0;
        v51 = 0;
        if (!PBReaderPlaceMark() || !NETSchemaNETEndpointReadFrom(v24, a2))
          goto LABEL_89;
        PBReaderRecallMark();
        if (v24)
          objc_msgSend(a1, "addPathGateways:", v24, 0, 0);
        goto LABEL_58;
      case 3u:
        PBReaderReadString();
        v24 = (NETSchemaNETEndpoint *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setConnectionInfo:", v24);
        goto LABEL_58;
      case 4u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v27 = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
LABEL_73:
        objc_msgSend(a1, "setHasIpv6:", v27 != 0);
        goto LABEL_87;
      case 5u:
        v31 = 0;
        v32 = 0;
        v33 = 0;
        while (2)
        {
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (v14)
              {
                v33 = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v33 = 0;
LABEL_77:
        objc_msgSend(a1, "setHasIpv4:", v33 != 0);
        goto LABEL_87;
      case 6u:
        v37 = 0;
        v38 = 0;
        v39 = 0;
        while (2)
        {
          v40 = *v3;
          v41 = *(_QWORD *)(a2 + v40);
          if (v41 == -1 || v41 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
            *(_QWORD *)(a2 + v40) = v41 + 1;
            v39 |= (unint64_t)(v42 & 0x7F) << v37;
            if (v42 < 0)
            {
              v37 += 7;
              v14 = v38++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_81;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
LABEL_81:
        objc_msgSend(a1, "setIsConstrained:", v39 != 0);
        goto LABEL_87;
      case 7u:
        v24 = objc_alloc_init(NETSchemaNETPathInterface);
        v50 = 0;
        v51 = 0;
        if (PBReaderPlaceMark() && NETSchemaNETPathInterfaceReadFrom(v24, a2))
        {
          PBReaderRecallMark();
          if (v24)
            objc_msgSend(a1, "addPathInterfaces:", v24, 0, 0);
LABEL_58:

LABEL_87:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_89:

        return 0;
      case 8u:
        v43 = 0;
        v44 = 0;
        v45 = 0;
        while (2)
        {
          v46 = *v3;
          v47 = *(_QWORD *)(a2 + v46);
          if (v47 == -1 || v47 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v47);
            *(_QWORD *)(a2 + v46) = v47 + 1;
            v45 |= (unint64_t)(v48 & 0x7F) << v43;
            if (v48 < 0)
            {
              v43 += 7;
              v14 = v44++ >= 9;
              if (v14)
              {
                v49 = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v49 = 0;
        else
          v49 = v45;
LABEL_86:
        objc_msgSend(a1, "setStatus:", v49, v50, v51);
        goto LABEL_87;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_87;
    }
  }
}

uint64_t NETSchemaNETDebugNetworkConnectionStateReadySnapshotCapturedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  NETSchemaNETEstablishmentResolution *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(NETSchemaNETEstablishmentResolution);
        v26 = 0;
        v27 = 0;
        if (!PBReaderPlaceMark() || !NETSchemaNETEstablishmentResolutionReadFrom(v17, a2))
          goto LABEL_47;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addResolution:", v17, 0, 0);
        goto LABEL_39;
      case 2u:
        v17 = objc_alloc_init(NETSchemaNETProxyConfiguration);
        v26 = 0;
        v27 = 0;
        if (!PBReaderPlaceMark() || (NETSchemaNETProxyConfigurationReadFrom(v17, a2) & 1) == 0)
          goto LABEL_47;
        PBReaderRecallMark();
        objc_msgSend(a1, "setProxyConfiguration:", v17);
        goto LABEL_39;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_44;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_44:
        objc_msgSend(a1, "setDurationInMs:", v25, v26, v27);
        goto LABEL_45;
      case 4u:
        v17 = objc_alloc_init(NETSchemaNETHandShakeProtocol);
        v26 = 0;
        v27 = 0;
        if (PBReaderPlaceMark() && NETSchemaNETHandShakeProtocolReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addConnectionEstablishmentProtocols:", v17, 0, 0);
LABEL_39:

LABEL_45:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_47:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_45;
    }
  }
}

uint64_t NETSchemaNETDebugNetworkInterfaceReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char v121;
  uint64_t v122;
  char v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  uint64_t v129;
  char v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char v135;
  uint64_t v136;
  NETSchemaNETNetworkInterface *v137;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_144;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_147;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_144:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_147:
        objc_msgSend(a1, "setRttCurrent:", v23);
        goto LABEL_228;
      case 2u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v31 = 0;
                goto LABEL_152;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
        else
          v31 = v27;
LABEL_152:
        objc_msgSend(a1, "setRttSmoothed:", v31);
        goto LABEL_228;
      case 3u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v38 = 0;
                goto LABEL_157;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v38 = 0;
        else
          v38 = v34;
LABEL_157:
        objc_msgSend(a1, "setRttVariance:", v38);
        goto LABEL_228;
      case 4u:
        v39 = 0;
        v40 = 0;
        v41 = 0;
        while (2)
        {
          v42 = *v3;
          v43 = *(_QWORD *)(a2 + v42);
          if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v43 + 1;
            v41 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              v14 = v40++ >= 9;
              if (v14)
              {
                v45 = 0;
                goto LABEL_162;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v45 = 0;
        else
          v45 = v41;
LABEL_162:
        objc_msgSend(a1, "setRttBest:", v45);
        goto LABEL_228;
      case 5u:
        v46 = 0;
        v47 = 0;
        v48 = 0;
        while (2)
        {
          v49 = *v3;
          v50 = *(_QWORD *)(a2 + v49);
          if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
            *(_QWORD *)(a2 + v49) = v50 + 1;
            v48 |= (unint64_t)(v51 & 0x7F) << v46;
            if (v51 < 0)
            {
              v46 += 7;
              v14 = v47++ >= 9;
              if (v14)
              {
                v52 = 0;
                goto LABEL_167;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v52 = 0;
        else
          v52 = v48;
LABEL_167:
        objc_msgSend(a1, "setPacketsSent:", v52);
        goto LABEL_228;
      case 6u:
        v53 = 0;
        v54 = 0;
        v55 = 0;
        while (2)
        {
          v56 = *v3;
          v57 = *(_QWORD *)(a2 + v56);
          if (v57 == -1 || v57 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
            *(_QWORD *)(a2 + v56) = v57 + 1;
            v55 |= (unint64_t)(v58 & 0x7F) << v53;
            if (v58 < 0)
            {
              v53 += 7;
              v14 = v54++ >= 9;
              if (v14)
              {
                v59 = 0;
                goto LABEL_172;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v59 = 0;
        else
          v59 = v55;
LABEL_172:
        objc_msgSend(a1, "setPacketsReceived:", v59);
        goto LABEL_228;
      case 7u:
        v60 = 0;
        v61 = 0;
        v62 = 0;
        while (2)
        {
          v63 = *v3;
          v64 = *(_QWORD *)(a2 + v63);
          if (v64 == -1 || v64 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v65 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v64);
            *(_QWORD *)(a2 + v63) = v64 + 1;
            v62 |= (unint64_t)(v65 & 0x7F) << v60;
            if (v65 < 0)
            {
              v60 += 7;
              v14 = v61++ >= 9;
              if (v14)
              {
                v66 = 0;
                goto LABEL_177;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v66 = 0;
        else
          v66 = v62;
LABEL_177:
        objc_msgSend(a1, "setBytesSent:", v66);
        goto LABEL_228;
      case 8u:
        v67 = 0;
        v68 = 0;
        v69 = 0;
        while (2)
        {
          v70 = *v3;
          v71 = *(_QWORD *)(a2 + v70);
          if (v71 == -1 || v71 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v72 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v71);
            *(_QWORD *)(a2 + v70) = v71 + 1;
            v69 |= (unint64_t)(v72 & 0x7F) << v67;
            if (v72 < 0)
            {
              v67 += 7;
              v14 = v68++ >= 9;
              if (v14)
              {
                v73 = 0;
                goto LABEL_182;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v73 = 0;
        else
          v73 = v69;
LABEL_182:
        objc_msgSend(a1, "setBytesRetransmitted:", v73);
        goto LABEL_228;
      case 9u:
        v74 = 0;
        v75 = 0;
        v76 = 0;
        while (2)
        {
          v77 = *v3;
          v78 = *(_QWORD *)(a2 + v77);
          if (v78 == -1 || v78 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v79 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v78);
            *(_QWORD *)(a2 + v77) = v78 + 1;
            v76 |= (unint64_t)(v79 & 0x7F) << v74;
            if (v79 < 0)
            {
              v74 += 7;
              v14 = v75++ >= 9;
              if (v14)
              {
                v80 = 0;
                goto LABEL_187;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v80 = 0;
        else
          v80 = v76;
LABEL_187:
        objc_msgSend(a1, "setBytesUnacked:", v80);
        goto LABEL_228;
      case 0xAu:
        v81 = 0;
        v82 = 0;
        v83 = 0;
        while (2)
        {
          v84 = *v3;
          v85 = *(_QWORD *)(a2 + v84);
          if (v85 == -1 || v85 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v86 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v85);
            *(_QWORD *)(a2 + v84) = v85 + 1;
            v83 |= (unint64_t)(v86 & 0x7F) << v81;
            if (v86 < 0)
            {
              v81 += 7;
              v14 = v82++ >= 9;
              if (v14)
              {
                v87 = 0;
                goto LABEL_192;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v87 = 0;
        else
          v87 = v83;
LABEL_192:
        objc_msgSend(a1, "setBytesReceived:", v87);
        goto LABEL_228;
      case 0xBu:
        v88 = 0;
        v89 = 0;
        v90 = 0;
        while (2)
        {
          v91 = *v3;
          v92 = *(_QWORD *)(a2 + v91);
          if (v92 == -1 || v92 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v93 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v92);
            *(_QWORD *)(a2 + v91) = v92 + 1;
            v90 |= (unint64_t)(v93 & 0x7F) << v88;
            if (v93 < 0)
            {
              v88 += 7;
              v14 = v89++ >= 9;
              if (v14)
              {
                v94 = 0;
                goto LABEL_197;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v94 = 0;
        else
          v94 = v90;
LABEL_197:
        objc_msgSend(a1, "setDuplicateBytesReceived:", v94);
        goto LABEL_228;
      case 0xCu:
        v95 = 0;
        v96 = 0;
        v97 = 0;
        while (2)
        {
          v98 = *v3;
          v99 = *(_QWORD *)(a2 + v98);
          if (v99 == -1 || v99 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v100 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v99);
            *(_QWORD *)(a2 + v98) = v99 + 1;
            v97 |= (unint64_t)(v100 & 0x7F) << v95;
            if (v100 < 0)
            {
              v95 += 7;
              v14 = v96++ >= 9;
              if (v14)
              {
                v101 = 0;
                goto LABEL_202;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v101 = 0;
        else
          v101 = v97;
LABEL_202:
        objc_msgSend(a1, "setOutOfOrderBytesReceived:", v101);
        goto LABEL_228;
      case 0xDu:
        v102 = 0;
        v103 = 0;
        v104 = 0;
        while (2)
        {
          v105 = *v3;
          v106 = *(_QWORD *)(a2 + v105);
          if (v106 == -1 || v106 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v107 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v106);
            *(_QWORD *)(a2 + v105) = v106 + 1;
            v104 |= (unint64_t)(v107 & 0x7F) << v102;
            if (v107 < 0)
            {
              v102 += 7;
              v14 = v103++ >= 9;
              if (v14)
              {
                v108 = 0;
                goto LABEL_207;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v108 = 0;
        else
          v108 = v104;
LABEL_207:
        objc_msgSend(a1, "setSendBufferBytes:", v108);
        goto LABEL_228;
      case 0xEu:
        v109 = 0;
        v110 = 0;
        v111 = 0;
        while (2)
        {
          v112 = *v3;
          v113 = *(_QWORD *)(a2 + v112);
          if (v113 == -1 || v113 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v114 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v113);
            *(_QWORD *)(a2 + v112) = v113 + 1;
            v111 |= (unint64_t)(v114 & 0x7F) << v109;
            if (v114 < 0)
            {
              v109 += 7;
              v14 = v110++ >= 9;
              if (v14)
              {
                v115 = 0;
                goto LABEL_212;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v115 = 0;
        else
          v115 = v111;
LABEL_212:
        objc_msgSend(a1, "setSendBandwidth:", v115);
        goto LABEL_228;
      case 0xFu:
        v116 = 0;
        v117 = 0;
        v118 = 0;
        while (2)
        {
          v119 = *v3;
          v120 = *(_QWORD *)(a2 + v119);
          if (v120 == -1 || v120 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v121 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v120);
            *(_QWORD *)(a2 + v119) = v120 + 1;
            v118 |= (unint64_t)(v121 & 0x7F) << v116;
            if (v121 < 0)
            {
              v116 += 7;
              v14 = v117++ >= 9;
              if (v14)
              {
                v122 = 0;
                goto LABEL_217;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v122 = 0;
        else
          v122 = v118;
LABEL_217:
        objc_msgSend(a1, "setSynRetransmits:", v122);
        goto LABEL_228;
      case 0x10u:
        v123 = 0;
        v124 = 0;
        v125 = 0;
        while (2)
        {
          v126 = *v3;
          v127 = *(_QWORD *)(a2 + v126);
          if (v127 == -1 || v127 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v128 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v127);
            *(_QWORD *)(a2 + v126) = v127 + 1;
            v125 |= (unint64_t)(v128 & 0x7F) << v123;
            if (v128 < 0)
            {
              v123 += 7;
              v14 = v124++ >= 9;
              if (v14)
              {
                v129 = 0;
                goto LABEL_222;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v129 = 0;
        else
          v129 = v125;
LABEL_222:
        objc_msgSend(a1, "setTfoSynDataAcked:", v129);
        goto LABEL_228;
      case 0x11u:
        v130 = 0;
        v131 = 0;
        v132 = 0;
        while (2)
        {
          v133 = *v3;
          v134 = *(_QWORD *)(a2 + v133);
          if (v134 == -1 || v134 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v135 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v134);
            *(_QWORD *)(a2 + v133) = v134 + 1;
            v132 |= (unint64_t)(v135 & 0x7F) << v130;
            if (v135 < 0)
            {
              v130 += 7;
              v14 = v131++ >= 9;
              if (v14)
              {
                v136 = 0;
                goto LABEL_227;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v136 = 0;
        else
          v136 = v132;
LABEL_227:
        objc_msgSend(a1, "setSubflowSwitchCount:", v136);
        goto LABEL_228;
      case 0x12u:
        v137 = objc_alloc_init(NETSchemaNETNetworkInterface);
        if (PBReaderPlaceMark() && (NETSchemaNETNetworkInterfaceReadFrom(v137, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setNetworkInterface:", v137, 0, 0);

LABEL_228:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_228;
    }
  }
}

uint64_t NETSchemaNETDebugSessionConnectionNetworkReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  unint64_t v29;
  double v30;
  uint64_t v31;
  unint64_t v32;
  double v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v19 = 0;
          v20 = 0;
          v21 = 0;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v4))
              break;
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              goto LABEL_42;
            v19 += 7;
            v15 = v20++ >= 9;
            if (v15)
            {
              v26 = 0;
              goto LABEL_45;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
          if (*(_BYTE *)(a2 + *v5))
            v26 = 0;
          else
            v26 = v21;
LABEL_45:
          objc_msgSend(a1, "setWiFiPhyMode:", v26);
          continue;
        case 2u:
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v30 = *(double *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v30 = 0.0;
          }
          objc_msgSend(a1, "setSignalStrengthBars:", v30);
          continue;
        case 3u:
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v33 = *(double *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v32 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v33 = 0.0;
          }
          objc_msgSend(a1, "setOpenTimeInMs:", v33);
          continue;
        case 4u:
          v34 = 0;
          v35 = 0;
          v36 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        v39 = v38 + 1;
        if (v38 == -1 || v39 > *(_QWORD *)(a2 + *v4))
          break;
        v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
        *(_QWORD *)(a2 + v37) = v39;
        v36 |= (unint64_t)(v40 & 0x7F) << v34;
        if ((v40 & 0x80) == 0)
          goto LABEL_47;
        v34 += 7;
        v15 = v35++ >= 9;
        if (v15)
        {
          v41 = 0;
          goto LABEL_50;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_47:
      v41 = *(_BYTE *)(a2 + *v5) ? 0 : v36;
LABEL_50:
      objc_msgSend(a1, "setConnectedSubflowCount:", v41);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NETSchemaNETDebugSessionConnectionPingInfoReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  double v38;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v28 = 0;
        v29 = 0;
        v30 = 0;
        while (1)
        {
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          v33 = v32 + 1;
          if (v32 == -1 || v33 > *(_QWORD *)(a2 + *v4))
            break;
          v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
          *(_QWORD *)(a2 + v31) = v33;
          v30 |= (unint64_t)(v34 & 0x7F) << v28;
          if ((v34 & 0x80) == 0)
            goto LABEL_46;
          v28 += 7;
          v15 = v29++ >= 9;
          if (v15)
          {
            v35 = 0;
            goto LABEL_49;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
        v35 = *(_BYTE *)(a2 + *v5) ? 0 : v30;
LABEL_49:
        objc_msgSend(a1, "setPingCount:", v35);
      }
      else if ((_DWORD)v19 == 2)
      {
        v36 = *v3;
        v37 = *(_QWORD *)(a2 + v36);
        if (v37 <= 0xFFFFFFFFFFFFFFF7 && v37 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v38 = *(double *)(*(_QWORD *)(a2 + *v7) + v37);
          *(_QWORD *)(a2 + v36) = v37 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v38 = 0.0;
        }
        objc_msgSend(a1, "setMeanPingInMs:", v38);
      }
      else if ((_DWORD)v19 == 3)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v4))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0)
            goto LABEL_41;
          v20 += 7;
          v15 = v21++ >= 9;
          if (v15)
          {
            v27 = 0;
            goto LABEL_44;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        v27 = *(_BYTE *)(a2 + *v5) ? 0 : v22;
LABEL_44:
        objc_msgSend(a1, "setUnacknowledgedPingCount:", v27);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NETSchemaNETDebugSessionConnectionQualityReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v23 = 0;
              goto LABEL_53;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
          else
            v23 = v19;
LABEL_53:
          objc_msgSend(a1, "setSymptomsCellularHistorical:", v23);
          continue;
        case 2u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (v14)
                {
                  v31 = 0;
                  goto LABEL_58;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
          else
            v31 = v27;
LABEL_58:
          objc_msgSend(a1, "setSymptomsCellularInstant:", v31);
          continue;
        case 3u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (2)
          {
            v35 = *v3;
            v36 = *(_QWORD *)(a2 + v35);
            if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
              *(_QWORD *)(a2 + v35) = v36 + 1;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                v14 = v33++ >= 9;
                if (v14)
                {
                  v38 = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
          else
            v38 = v34;
LABEL_63:
          objc_msgSend(a1, "setSymptomsWiFiHistorical:", v38);
          continue;
        case 4u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
        *(_QWORD *)(a2 + v42) = v43 + 1;
        v41 |= (unint64_t)(v44 & 0x7F) << v39;
        if ((v44 & 0x80) == 0)
          goto LABEL_65;
        v39 += 7;
        v14 = v40++ >= 9;
        if (v14)
        {
          v45 = 0;
          goto LABEL_68;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_65:
      v45 = *(_BYTE *)(a2 + *v5) ? 0 : v41;
LABEL_68:
      objc_msgSend(a1, "setSymptomsWiFiInstant:", v45);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NETSchemaNETDebugSessionConnectionSnapshotCapturedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  NETSchemaNETDebugSessionConnectionNetwork *v25;
  uint64_t v26;
  uint64_t v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_43;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_46;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_46:
        objc_msgSend(a1, "setSequenceNumber:", v23, v26, v27);
        goto LABEL_47;
      case 3u:
        v25 = objc_alloc_init(NETSchemaNETDebugSessionConnectionNetwork);
        if (!PBReaderPlaceMark() || (NETSchemaNETDebugSessionConnectionNetworkReadFrom(v25, a2) & 1) == 0)
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setNetwork:", v25, 0, 0);
        goto LABEL_41;
      case 4u:
        v25 = objc_alloc_init(NETSchemaNETDebugNetworkInterface);
        v26 = 0;
        v27 = 0;
        if (!PBReaderPlaceMark() || !NETSchemaNETDebugNetworkInterfaceReadFrom(v25, a2))
          goto LABEL_49;
        PBReaderRecallMark();
        if (v25)
          objc_msgSend(a1, "addNetworkInterfaces:", v25, 0, 0);
        goto LABEL_41;
      case 5u:
        v25 = objc_alloc_init(NETSchemaNETDebugSessionConnectionPingInfo);
        if (!PBReaderPlaceMark()
          || (NETSchemaNETDebugSessionConnectionPingInfoReadFrom(v25, a2) & 1) == 0)
        {
          goto LABEL_49;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setPingInfo:", v25, 0, 0);
        goto LABEL_41;
      case 6u:
        v25 = objc_alloc_init(NETSchemaNETDebugSessionConnectionQuality);
        if (PBReaderPlaceMark() && (NETSchemaNETDebugSessionConnectionQualityReadFrom(v25, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setQuality:", v25, 0, 0);
LABEL_41:

LABEL_47:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_49:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_47;
    }
  }
}

uint64_t NETSchemaNETEndpointReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_42;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            v30 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
        v30 = *(_BYTE *)(a2 + *v5) ? 0 : v26;
LABEL_45:
        objc_msgSend(a1, "setType:", v30);
      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_40:
        objc_msgSend(a1, "setPort:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NETSchemaNETErrorReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setDomain:", v25);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 3)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_34;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_37;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_37:
            objc_msgSend(a1, "setErrorCode:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setDescription:", v25);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NETSchemaNETEstablishmentResolutionReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  NETSchemaNETEndpoint *v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_50;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_53;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_53:
        objc_msgSend(a1, "setDuration:", v23);
        goto LABEL_64;
      case 2u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v31 = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
        else
          v31 = v27;
LABEL_58:
        objc_msgSend(a1, "setResolutionSource:", v31);
        goto LABEL_64;
      case 3u:
        v32 = objc_alloc_init(NETSchemaNETEndpoint);
        if (!PBReaderPlaceMark() || (NETSchemaNETEndpointReadFrom(v32, a2) & 1) == 0)
          goto LABEL_66;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSuccessfulEndpoint:", v32, 0, 0);
        goto LABEL_41;
      case 4u:
        v32 = objc_alloc_init(NETSchemaNETEndpoint);
        if (PBReaderPlaceMark() && (NETSchemaNETEndpointReadFrom(v32, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setPreferredEndpoint:", v32, 0, 0);
LABEL_41:

LABEL_64:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_66:

        return 0;
      case 5u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_63:
        objc_msgSend(a1, "setEndpointCount:", v39);
        goto LABEL_64;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_64;
    }
  }
}

uint64_t NETSchemaNETHandShakeProtocolReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0)
            goto LABEL_50;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            v31 = 0;
            goto LABEL_53;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
        v31 = *(_BYTE *)(a2 + *v5) ? 0 : v27;
LABEL_53:
        objc_msgSend(a1, "setProtocol:", v31);
      }
      else if ((_DWORD)v17 == 2)
      {
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (1)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            break;
          v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
          *(_QWORD *)(a2 + v35) = v36 + 1;
          v34 |= (unint64_t)(v37 & 0x7F) << v32;
          if ((v37 & 0x80) == 0)
            goto LABEL_55;
          v32 += 7;
          v14 = v33++ >= 9;
          if (v14)
          {
            v38 = 0;
            goto LABEL_58;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_55:
        v38 = *(_BYTE *)(a2 + *v5) ? 0 : v34;
LABEL_58:
        objc_msgSend(a1, "setHandShakeRTT:", v38);
      }
      else if ((_DWORD)v17 == 3)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_45;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v24 = 0;
            goto LABEL_48;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        v24 = *(_BYTE *)(a2 + *v5) ? 0 : v20;
LABEL_48:
        objc_msgSend(a1, "setHandShakeDuration:", v24);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NETSchemaNETNetworkConnectionStatePreparationSnapshotCapturedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setHasDNS:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NETSchemaNETNetworkConnectionStateReadySnapshotCapturedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setConnectionInfo:", v25);

      }
      else if ((_DWORD)v17 == 2)
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (1)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            break;
          v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
          *(_QWORD *)(a2 + v29) = v30 + 1;
          v28 |= (unint64_t)(v31 & 0x7F) << v26;
          if ((v31 & 0x80) == 0)
            goto LABEL_44;
          v26 += 7;
          v14 = v27++ >= 9;
          if (v14)
          {
            v32 = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
        v32 = *(_BYTE *)(a2 + *v5) ? 0 : v28;
LABEL_47:
        objc_msgSend(a1, "setConnectionEstablishmentPreviousAttemptCount:", v32);
      }
      else if ((_DWORD)v17 == 3)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_39;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v24 = 0;
            goto LABEL_42;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
        v24 = *(_BYTE *)(a2 + *v5) ? 0 : v20;
LABEL_42:
        objc_msgSend(a1, "setConnectionEstablishmentAttemptDelay:", v24);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NETSchemaNETNetworkInterfaceReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setName:", v24);

      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_34;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_34:
        objc_msgSend(a1, "setConnectionType:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NETSchemaNETPathInterfaceReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  void *v32;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0)
            goto LABEL_44;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            v31 = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
        v31 = *(_BYTE *)(a2 + *v5) ? 0 : v27;
LABEL_47:
        objc_msgSend(a1, "setType:", v31);
      }
      else if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setName:", v32);

      }
      else if ((_DWORD)v17 == 3)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_39;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v24 = 0;
            goto LABEL_42;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
        v24 = *(_BYTE *)(a2 + *v5) ? 0 : v20;
LABEL_42:
        objc_msgSend(a1, "setIndex:", v24);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NETSchemaNETPeerConnectionFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  NETSchemaNETBluetoothDevice *v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  double v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v19 = objc_alloc_init(NETSchemaNETBluetoothDevice);
          v59 = 0;
          v60 = 0;
          if (PBReaderPlaceMark() && NETSchemaNETBluetoothDeviceReadFrom(v19, a2))
          {
            PBReaderRecallMark();
            if (v19)
              objc_msgSend(a1, "addConnectedBtDevices:", v19, 0, 0);

            continue;
          }

          return 0;
        case 2u:
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v24 = *v3;
            v25 = *(_QWORD *)(a2 + v24);
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
              break;
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if ((v27 & 0x80) == 0)
              goto LABEL_65;
            v21 += 7;
            v15 = v22++ >= 9;
            if (v15)
            {
              v23 = 0;
              goto LABEL_67;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_65:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
LABEL_67:
          objc_msgSend(a1, "setIsCloudConnected:", v23 != 0);
          continue;
        case 3u:
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (2)
          {
            v31 = *v3;
            v32 = *(_QWORD *)(a2 + v31);
            v33 = v32 + 1;
            if (v32 == -1 || v33 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
              *(_QWORD *)(a2 + v31) = v33;
              v30 |= (unint64_t)(v34 & 0x7F) << v28;
              if (v34 < 0)
              {
                v28 += 7;
                v15 = v29++ >= 9;
                if (v15)
                {
                  v30 = 0;
                  goto LABEL_71;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v30 = 0;
LABEL_71:
          objc_msgSend(a1, "setIsConnected:", v30 != 0);
          continue;
        case 4u:
          v35 = 0;
          v36 = 0;
          v37 = 0;
          while (2)
          {
            v38 = *v3;
            v39 = *(_QWORD *)(a2 + v38);
            v40 = v39 + 1;
            if (v39 == -1 || v40 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v39);
              *(_QWORD *)(a2 + v38) = v40;
              v37 |= (unint64_t)(v41 & 0x7F) << v35;
              if (v41 < 0)
              {
                v35 += 7;
                v15 = v36++ >= 9;
                if (v15)
                {
                  v37 = 0;
                  goto LABEL_75;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v37 = 0;
LABEL_75:
          objc_msgSend(a1, "setHasDevice:", v37 != 0);
          continue;
        case 5u:
          v42 = *v3;
          v43 = *(_QWORD *)(a2 + v42);
          if (v43 <= 0xFFFFFFFFFFFFFFF7 && v43 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v44 = *(double *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v43 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v44 = 0.0;
          }
          objc_msgSend(a1, "setTimeSinceLastNearbyChangeInSeconds:", v44, v59, v60);
          continue;
        case 6u:
          v45 = 0;
          v46 = 0;
          v47 = 0;
          while (2)
          {
            v48 = *v3;
            v49 = *(_QWORD *)(a2 + v48);
            v50 = v49 + 1;
            if (v49 == -1 || v50 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v49);
              *(_QWORD *)(a2 + v48) = v50;
              v47 |= (unint64_t)(v51 & 0x7F) << v45;
              if (v51 < 0)
              {
                v45 += 7;
                v15 = v46++ >= 9;
                if (v15)
                {
                  v47 = 0;
                  goto LABEL_79;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v47 = 0;
LABEL_79:
          objc_msgSend(a1, "setIsNearby:", v47 != 0);
          continue;
        case 7u:
          v52 = 0;
          v53 = 0;
          v54 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v55 = *v3;
        v56 = *(_QWORD *)(a2 + v55);
        v57 = v56 + 1;
        if (v56 == -1 || v57 > *(_QWORD *)(a2 + *v4))
          break;
        v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
        *(_QWORD *)(a2 + v55) = v57;
        v54 |= (unint64_t)(v58 & 0x7F) << v52;
        if ((v58 & 0x80) == 0)
          goto LABEL_81;
        v52 += 7;
        v15 = v53++ >= 9;
        if (v15)
        {
          v54 = 0;
          goto LABEL_83;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_81:
      if (*(_BYTE *)(a2 + *v5))
        v54 = 0;
LABEL_83:
      objc_msgSend(a1, "setIsPreferringBtClassic:", v54 != 0, v59, v60);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NETSchemaNETProxyConfigurationReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        while (1)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            break;
          v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0)
            goto LABEL_41;
          v23 += 7;
          v14 = v24++ >= 9;
          if (v14)
          {
            v25 = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
LABEL_43:
        objc_msgSend(a1, "setIsProxyConfigured:", v25 != 0);
      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_39:
        objc_msgSend(a1, "setUsingConfiguredProxy:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NETSchemaNETSessionConnectionFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  NETSchemaNETError *v65;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_79;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_82;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_79:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_82:
        objc_msgSend(a1, "setConnectionType:", v23);
        goto LABEL_111;
      case 2u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v31 = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
        else
          v31 = v27;
LABEL_87:
        objc_msgSend(a1, "setConnectionMode:", v31);
        goto LABEL_111;
      case 3u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v38 = 0;
                goto LABEL_92;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v38 = 0;
        else
          v38 = v34;
LABEL_92:
        objc_msgSend(a1, "setSessionType:", v38);
        goto LABEL_111;
      case 4u:
        v39 = 0;
        v40 = 0;
        v41 = 0;
        while (2)
        {
          v42 = *v3;
          v43 = *(_QWORD *)(a2 + v42);
          if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v43 + 1;
            v41 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              v14 = v40++ >= 9;
              if (v14)
              {
                v45 = 0;
                goto LABEL_97;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v45 = 0;
        else
          v45 = v41;
LABEL_97:
        objc_msgSend(a1, "setNetworkSessionState:", v45);
        goto LABEL_111;
      case 5u:
        v46 = 0;
        v47 = 0;
        v48 = 0;
        while (2)
        {
          v49 = *v3;
          v50 = *(_QWORD *)(a2 + v49);
          if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
            *(_QWORD *)(a2 + v49) = v50 + 1;
            v48 |= (unint64_t)(v51 & 0x7F) << v46;
            if (v51 < 0)
            {
              v46 += 7;
              v14 = v47++ >= 9;
              if (v14)
              {
                v48 = 0;
                goto LABEL_101;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v48 = 0;
LABEL_101:
        objc_msgSend(a1, "setIsWwanPreferred:", v48 != 0);
        goto LABEL_111;
      case 6u:
        v52 = 0;
        v53 = 0;
        v54 = 0;
        while (2)
        {
          v55 = *v3;
          v56 = *(_QWORD *)(a2 + v55);
          if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
            *(_QWORD *)(a2 + v55) = v56 + 1;
            v54 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              v14 = v53++ >= 9;
              if (v14)
              {
                v54 = 0;
                goto LABEL_105;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v54 = 0;
LABEL_105:
        objc_msgSend(a1, "setIsDormant:", v54 != 0);
        goto LABEL_111;
      case 7u:
        v58 = 0;
        v59 = 0;
        v60 = 0;
        while (2)
        {
          v61 = *v3;
          v62 = *(_QWORD *)(a2 + v61);
          if (v62 == -1 || v62 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v63 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v62);
            *(_QWORD *)(a2 + v61) = v62 + 1;
            v60 |= (unint64_t)(v63 & 0x7F) << v58;
            if (v63 < 0)
            {
              v58 += 7;
              v14 = v59++ >= 9;
              if (v14)
              {
                v64 = 0;
                goto LABEL_110;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v64 = 0;
        else
          v64 = v60;
LABEL_110:
        objc_msgSend(a1, "setSendBufferSize:", v64);
        goto LABEL_111;
      case 8u:
        PBReaderReadString();
        v65 = (NETSchemaNETError *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setPolicyId:", v65);
        goto LABEL_77;
      case 9u:
        v65 = objc_alloc_init(NETSchemaNETError);
        if (!PBReaderPlaceMark() || (NETSchemaNETErrorReadFrom(v65, a2) & 1) == 0)
          goto LABEL_113;
        PBReaderRecallMark();
        objc_msgSend(a1, "setError:", v65, 0, 0);
        goto LABEL_77;
      case 0xAu:
        v65 = objc_alloc_init(NETSchemaNETError);
        if (PBReaderPlaceMark() && (NETSchemaNETErrorReadFrom(v65, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setUnderlyingError:", v65, 0, 0);
LABEL_77:

LABEL_111:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_113:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_111;
    }
  }
}

BOOL NETSchemaNETSessionConnectionHttpHeaderCreatedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  void *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setUserAgent:", v17);
LABEL_22:

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setAceHost:", v17);
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NETSchemaNETSessionConnectionNetworkReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  void *v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  double v38;
  uint64_t v39;
  unint64_t v40;
  double v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  uint64_t v105;
  char v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  double v116;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setCarrierName:", v19);
          goto LABEL_30;
        case 2u:
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (2)
          {
            v24 = *v3;
            v25 = *(_QWORD *)(a2 + v24);
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
              *(_QWORD *)(a2 + v24) = v26;
              v23 |= (unint64_t)(v27 & 0x7F) << v21;
              if (v27 < 0)
              {
                v21 += 7;
                v15 = v22++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_114;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v28 = 0;
          else
            v28 = v23;
LABEL_114:
          objc_msgSend(a1, "setConnectionMethod:", v28);
          continue;
        case 3u:
          PBReaderReadString();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setPrimarySubflowInterfaceName:", v19);
LABEL_30:

          continue;
        case 4u:
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            v34 = v33 + 1;
            if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v34;
              v31 |= (unint64_t)(v35 & 0x7F) << v29;
              if (v35 < 0)
              {
                v29 += 7;
                v15 = v30++ >= 9;
                if (v15)
                {
                  v31 = 0;
                  goto LABEL_118;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
LABEL_118:
          objc_msgSend(a1, "setIsCaptive:", v31 != 0);
          continue;
        case 5u:
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 <= 0xFFFFFFFFFFFFFFF7 && v37 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v38 = *(double *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v38 = 0.0;
          }
          objc_msgSend(a1, "setRssi:", v38);
          continue;
        case 6u:
          v39 = *v3;
          v40 = *(_QWORD *)(a2 + v39);
          if (v40 <= 0xFFFFFFFFFFFFFFF7 && v40 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v41 = *(double *)(*(_QWORD *)(a2 + *v7) + v40);
            *(_QWORD *)(a2 + v39) = v40 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v41 = 0.0;
          }
          objc_msgSend(a1, "setSnr:", v41);
          continue;
        case 7u:
          v42 = 0;
          v43 = 0;
          v44 = 0;
          while (2)
          {
            v45 = *v3;
            v46 = *(_QWORD *)(a2 + v45);
            v47 = v46 + 1;
            if (v46 == -1 || v47 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
              *(_QWORD *)(a2 + v45) = v47;
              v44 |= (unint64_t)(v48 & 0x7F) << v42;
              if (v48 < 0)
              {
                v42 += 7;
                v15 = v43++ >= 9;
                if (v15)
                {
                  v49 = 0;
                  goto LABEL_123;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v49 = 0;
          else
            v49 = v44;
LABEL_123:
          objc_msgSend(a1, "setAttempCount:", v49);
          continue;
        case 8u:
          v50 = 0;
          v51 = 0;
          v52 = 0;
          while (2)
          {
            v53 = *v3;
            v54 = *(_QWORD *)(a2 + v53);
            v55 = v54 + 1;
            if (v54 == -1 || v55 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v56 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v54);
              *(_QWORD *)(a2 + v53) = v55;
              v52 |= (unint64_t)(v56 & 0x7F) << v50;
              if (v56 < 0)
              {
                v50 += 7;
                v15 = v51++ >= 9;
                if (v15)
                {
                  v57 = 0;
                  goto LABEL_128;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v57 = 0;
          else
            v57 = v52;
LABEL_128:
          objc_msgSend(a1, "setFirstByteTime:", v57);
          continue;
        case 9u:
          v58 = 0;
          v59 = 0;
          v60 = 0;
          while (2)
          {
            v61 = *v3;
            v62 = *(_QWORD *)(a2 + v61);
            v63 = v62 + 1;
            if (v62 == -1 || v63 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v62);
              *(_QWORD *)(a2 + v61) = v63;
              v60 |= (unint64_t)(v64 & 0x7F) << v58;
              if (v64 < 0)
              {
                v58 += 7;
                v15 = v59++ >= 9;
                if (v15)
                {
                  v65 = 0;
                  goto LABEL_133;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v65 = 0;
          else
            v65 = v60;
LABEL_133:
          objc_msgSend(a1, "setStartToDNSResolution:", v65);
          continue;
        case 0xAu:
          v66 = 0;
          v67 = 0;
          v68 = 0;
          while (2)
          {
            v69 = *v3;
            v70 = *(_QWORD *)(a2 + v69);
            v71 = v70 + 1;
            if (v70 == -1 || v71 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v72 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v70);
              *(_QWORD *)(a2 + v69) = v71;
              v68 |= (unint64_t)(v72 & 0x7F) << v66;
              if (v72 < 0)
              {
                v66 += 7;
                v15 = v67++ >= 9;
                if (v15)
                {
                  v73 = 0;
                  goto LABEL_138;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v73 = 0;
          else
            v73 = v68;
LABEL_138:
          objc_msgSend(a1, "setDnsResolutionTime:", v73);
          continue;
        case 0xBu:
          v74 = 0;
          v75 = 0;
          v76 = 0;
          while (2)
          {
            v77 = *v3;
            v78 = *(_QWORD *)(a2 + v77);
            v79 = v78 + 1;
            if (v78 == -1 || v79 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v80 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v78);
              *(_QWORD *)(a2 + v77) = v79;
              v76 |= (unint64_t)(v80 & 0x7F) << v74;
              if (v80 < 0)
              {
                v74 += 7;
                v15 = v75++ >= 9;
                if (v15)
                {
                  v81 = 0;
                  goto LABEL_143;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v81 = 0;
          else
            v81 = v76;
LABEL_143:
          objc_msgSend(a1, "setTlsVersion:", v81);
          continue;
        case 0xCu:
          v82 = 0;
          v83 = 0;
          v84 = 0;
          while (2)
          {
            v85 = *v3;
            v86 = *(_QWORD *)(a2 + v85);
            v87 = v86 + 1;
            if (v86 == -1 || v87 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v88 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v86);
              *(_QWORD *)(a2 + v85) = v87;
              v84 |= (unint64_t)(v88 & 0x7F) << v82;
              if (v88 < 0)
              {
                v82 += 7;
                v15 = v83++ >= 9;
                if (v15)
                {
                  v89 = 0;
                  goto LABEL_148;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v89 = 0;
          else
            v89 = v84;
LABEL_148:
          objc_msgSend(a1, "setTlsHandshakeTime:", v89);
          continue;
        case 0xDu:
          v90 = 0;
          v91 = 0;
          v92 = 0;
          while (2)
          {
            v93 = *v3;
            v94 = *(_QWORD *)(a2 + v93);
            v95 = v94 + 1;
            if (v94 == -1 || v95 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v96 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v94);
              *(_QWORD *)(a2 + v93) = v95;
              v92 |= (unint64_t)(v96 & 0x7F) << v90;
              if (v96 < 0)
              {
                v90 += 7;
                v15 = v91++ >= 9;
                if (v15)
                {
                  v97 = 0;
                  goto LABEL_153;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v97 = 0;
          else
            v97 = v92;
LABEL_153:
          objc_msgSend(a1, "setConnectionEstablishmentTime:", v97);
          continue;
        case 0xEu:
          v98 = 0;
          v99 = 0;
          v100 = 0;
          while (2)
          {
            v101 = *v3;
            v102 = *(_QWORD *)(a2 + v101);
            v103 = v102 + 1;
            if (v102 == -1 || v103 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v104 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v102);
              *(_QWORD *)(a2 + v101) = v103;
              v100 |= (unint64_t)(v104 & 0x7F) << v98;
              if (v104 < 0)
              {
                v98 += 7;
                v15 = v99++ >= 9;
                if (v15)
                {
                  v105 = 0;
                  goto LABEL_158;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v105 = 0;
          else
            v105 = v100;
LABEL_158:
          objc_msgSend(a1, "setConnectionStartToEstablishmentTime:", v105);
          continue;
        case 0xFu:
          v106 = 0;
          v107 = 0;
          v108 = 0;
          break;
        case 0x10u:
          v114 = *v3;
          v115 = *(_QWORD *)(a2 + v114);
          if (v115 <= 0xFFFFFFFFFFFFFFF7 && v115 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v116 = *(double *)(*(_QWORD *)(a2 + *v7) + v115);
            *(_QWORD *)(a2 + v114) = v115 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v116 = 0.0;
          }
          objc_msgSend(a1, "setClearChannelAssessmentScore:", v116);
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v109 = *v3;
        v110 = *(_QWORD *)(a2 + v109);
        v111 = v110 + 1;
        if (v110 == -1 || v111 > *(_QWORD *)(a2 + *v4))
          break;
        v112 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v110);
        *(_QWORD *)(a2 + v109) = v111;
        v108 |= (unint64_t)(v112 & 0x7F) << v106;
        if ((v112 & 0x80) == 0)
          goto LABEL_160;
        v106 += 7;
        v15 = v107++ >= 9;
        if (v15)
        {
          v113 = 0;
          goto LABEL_163;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_160:
      v113 = *(_BYTE *)(a2 + *v5) ? 0 : v108;
LABEL_163:
      objc_msgSend(a1, "setConnectionStartToTLSHandshake:", v113);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NETSchemaNETSessionConnectionSnapshotCapturedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  NETSchemaNETSessionConnectionNetwork *v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_51;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_54;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_51:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_54:
        objc_msgSend(a1, "setSequenceNumber:", v23, v40, v41);
        goto LABEL_65;
      case 2u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v31 = 0;
                goto LABEL_59;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
        else
          v31 = v27;
LABEL_59:
        objc_msgSend(a1, "setSnapshotTriggerReason:", v31, v40, v41);
        goto LABEL_65;
      case 3u:
        v32 = objc_alloc_init(NETSchemaNETSessionConnectionNetwork);
        if (!PBReaderPlaceMark() || (NETSchemaNETSessionConnectionNetworkReadFrom(v32, a2) & 1) == 0)
          goto LABEL_67;
        PBReaderRecallMark();
        objc_msgSend(a1, "setNetwork:", v32, 0, 0);
        goto LABEL_42;
      case 4u:
        v32 = objc_alloc_init(NETSchemaNETNetworkInterface);
        v40 = 0;
        v41 = 0;
        if (PBReaderPlaceMark() && NETSchemaNETNetworkInterfaceReadFrom(v32, a2))
        {
          PBReaderRecallMark();
          if (v32)
            objc_msgSend(a1, "addNetworkInterfaces:", v32, 0, 0);
LABEL_42:

LABEL_65:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_67:

        return 0;
      case 5u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_64:
        objc_msgSend(a1, "setProvider:", v39, v40, v41);
        goto LABEL_65;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_65;
    }
  }
}

uint64_t NLXSchemaCDMAllServicesSetupFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMClientSetupFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0)
            goto LABEL_50;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            v31 = 0;
            goto LABEL_53;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
        v31 = *(_BYTE *)(a2 + *v5) ? 0 : v27;
LABEL_53:
        objc_msgSend(a1, "setReason:", v31);
      }
      else if ((_DWORD)v17 == 2)
      {
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (1)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            break;
          v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
          *(_QWORD *)(a2 + v35) = v36 + 1;
          v34 |= (unint64_t)(v37 & 0x7F) << v32;
          if ((v37 & 0x80) == 0)
            goto LABEL_55;
          v32 += 7;
          v14 = v33++ >= 9;
          if (v14)
          {
            v38 = 0;
            goto LABEL_58;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_55:
        v38 = *(_BYTE *)(a2 + *v5) ? 0 : v34;
LABEL_58:
        objc_msgSend(a1, "setErrorDomain:", v38);
      }
      else if ((_DWORD)v17 == 3)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_45;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v24 = 0;
            goto LABEL_48;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        v24 = *(_BYTE *)(a2 + *v5) ? 0 : v20;
LABEL_48:
        objc_msgSend(a1, "setErrorCode:", v24);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaCDMContextUpdateEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setContextId:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(NLXSchemaCDMReformedTurnInputBundle);
    if (!PBReaderPlaceMark() || !NLXSchemaCDMReformedTurnInputBundleReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addReformedTurnInputBundles:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMDelegatedUserDialogActReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  SISchemaUUID *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_62;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_65;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_62:
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
        else
          v23 = v19;
LABEL_65:
        objc_msgSend(a1, "setAsrHypothesisIndex:", v23);
        goto LABEL_86;
      case 2u:
        v25 = objc_alloc_init(SISchemaUUID);
        if (PBReaderPlaceMark() && (SISchemaUUIDReadFrom(v25, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setLinkId:", v25, 0, 0);
LABEL_32:

LABEL_86:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 3u:
        PBReaderReadString();
        v25 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setExternalParserId:", v25);
        goto LABEL_32;
      case 4u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_70;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_70:
        objc_msgSend(a1, "setSiriVocabularySpanCount:", v32);
        goto LABEL_86;
      case 5u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_75;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_75:
        objc_msgSend(a1, "setMentionResolverSpanCount:", v39);
        goto LABEL_86;
      case 6u:
        v40 = 0;
        v41 = 0;
        v42 = 0;
        while (2)
        {
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 1;
            v42 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              v14 = v41++ >= 9;
              if (v14)
              {
                v46 = 0;
                goto LABEL_80;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v46 = 0;
        else
          v46 = v42;
LABEL_80:
        objc_msgSend(a1, "setRewriteType:", v46);
        goto LABEL_86;
      case 7u:
        v47 = 0;
        v48 = 0;
        v49 = 0;
        while (2)
        {
          v50 = *v3;
          v51 = *(_QWORD *)(a2 + v50);
          if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
            *(_QWORD *)(a2 + v50) = v51 + 1;
            v49 |= (unint64_t)(v52 & 0x7F) << v47;
            if (v52 < 0)
            {
              v47 += 7;
              v14 = v48++ >= 9;
              if (v14)
              {
                v53 = 0;
                goto LABEL_85;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v53 = 0;
        else
          v53 = v49;
LABEL_85:
        objc_msgSend(a1, "setContextMatcherSpanCount:", v53);
        goto LABEL_86;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_86;
    }
  }
}

BOOL NLXSchemaCDMDelegatedUserDialogActTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v17, 0, 0);
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setRewrittenUtterance:", v17);
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMEntityCandidateReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  USOSchemaUSOGraph *v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(double *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v22 = 0.0;
        }
        objc_msgSend(a1, "setScore:", v22);
      }
      else if ((v10 >> 3) == 1)
      {
        v19 = objc_alloc_init(USOSchemaUSOGraph);
        if (!PBReaderPlaceMark() || !USOSchemaUSOGraphReadFrom(v19, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setEntity:", v19, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaCDMInternalSpanDataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  NLXSchemaCDMSiriVocabularySpanData *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(NLXSchemaCDMSiriVocabularySpanData);
        if (!PBReaderPlaceMark() || (NLXSchemaCDMSiriVocabularySpanDataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setSiriVocabularySpanData:", v17, 0, 0);
        goto LABEL_36;
      case 2u:
        v17 = objc_alloc_init(NLXSchemaPLUMSpanData);
        if (!PBReaderPlaceMark() || (NLXSchemaPLUMSpanDataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPlumSpanData:", v17, 0, 0);
        goto LABEL_36;
      case 3u:
        v17 = objc_alloc_init(NLXSchemaMentionDetectorSpanData);
        if (!PBReaderPlaceMark() || (NLXSchemaMentionDetectorSpanDataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMentionDetectorSpanData:", v17, 0, 0);
        goto LABEL_36;
      case 4u:
        v17 = objc_alloc_init(NLXSchemaMentionResolverSpanData);
        if (!PBReaderPlaceMark() || (NLXSchemaMentionResolverSpanDataReadFrom(v17, a2) & 1) == 0)
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setMentionResolverSpanData:", v17, 0, 0);
        goto LABEL_36;
      case 5u:
        v17 = objc_alloc_init(NLXSchemaContextualSpanData);
        if (PBReaderPlaceMark() && (NLXSchemaContextualSpanDataReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setContextualSpanData:", v17, 0, 0);
LABEL_36:

LABEL_37:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_40:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_37;
    }
  }
}

uint64_t NLXSchemaCDMInternalSpanDataTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  NLXSchemaCDMSiriVocabularySpanDataTier1 *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(NLXSchemaCDMSiriVocabularySpanDataTier1);
        if (!PBReaderPlaceMark() || (NLXSchemaCDMSiriVocabularySpanDataTier1ReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSiriVocabularySpanData:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMMatchingSpanReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setLabel:", v17);
        goto LABEL_52;
      case 2u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_70;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v17, 0, 0);
        goto LABEL_52;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v25 = 0;
                goto LABEL_57;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
        else
          v25 = v21;
LABEL_57:
        objc_msgSend(a1, "setStartTokenIndex:", v25);
        goto LABEL_68;
      case 4u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v32 = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
        else
          v32 = v28;
LABEL_62:
        objc_msgSend(a1, "setEndTokenIndex:", v32);
        goto LABEL_68;
      case 5u:
        v17 = objc_alloc_init(USOSchemaUSOGraph);
        if (!PBReaderPlaceMark() || !USOSchemaUSOGraphReadFrom(v17, a2))
          goto LABEL_70;
        PBReaderRecallMark();
        objc_msgSend(a1, "setUsoGraph:", v17, 0, 0);
        goto LABEL_52;
      case 6u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
        else
          v39 = v35;
LABEL_67:
        objc_msgSend(a1, "addMatcherNames:", v39);
        goto LABEL_68;
      case 7u:
        v17 = objc_alloc_init(NLXSchemaCDMInternalSpanData);
        if (PBReaderPlaceMark() && NLXSchemaCDMInternalSpanDataReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setInternalSpanData:", v17, 0, 0);
LABEL_52:

LABEL_68:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_70:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_68;
    }
  }
}

BOOL NLXSchemaCDMMatchingSpanEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  SISchemaUUID *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v18, a2) & 1) == 0)
        {
LABEL_36:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v18, 0, 0);
        goto LABEL_31;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v18, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setContextId:", v18, 0, 0);
LABEL_31:

        goto LABEL_33;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_33:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(NLXSchemaCDMMatchingSpan);
    if (!PBReaderPlaceMark() || !NLXSchemaCDMMatchingSpanReadFrom(v18, a2))
      goto LABEL_36;
    PBReaderRecallMark();
    if (v18)
      objc_msgSend(a1, "addMatchingSpans:", v18, 0, 0);
    goto LABEL_31;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaCDMMatchingSpanEndedTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(NLXSchemaCDMMatchingSpanTier1);
    if (!PBReaderPlaceMark() || !NLXSchemaCDMMatchingSpanTier1ReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addMatchingSpans:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaCDMMatchingSpanTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_33;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v17, 0, 0);
        goto LABEL_29;
      case 2u:
        PBReaderReadString();
        v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setInput:", v17);
        goto LABEL_29;
      case 3u:
        v17 = objc_alloc_init(NLXSchemaCDMInternalSpanDataTier1);
        if (PBReaderPlaceMark() && (NLXSchemaCDMInternalSpanDataTier1ReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setInternalSpanData:", v17, 0, 0);
LABEL_29:

LABEL_30:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_33:

        return 0;
      case 4u:
        PBReaderReadString();
        v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setSemanticValue:", v17);
        goto LABEL_29;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_30;
    }
  }
}

BOOL NLXSchemaCDMNLContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  NLXSchemaCDMTask *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(NLXSchemaCDMTask);
        if (!PBReaderPlaceMark() || !NLXSchemaCDMTaskReadFrom(v17, a2))
          goto LABEL_40;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addActiveTasks:", v17, 0, 0);
        goto LABEL_37;
      case 2u:
        v17 = objc_alloc_init(NLXSchemaCDMTask);
        if (!PBReaderPlaceMark() || !NLXSchemaCDMTaskReadFrom(v17, a2))
          goto LABEL_40;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addExecutedTasks:", v17, 0, 0);
        goto LABEL_37;
      case 3u:
        v17 = objc_alloc_init(NLXSchemaCDMEntityCandidate);
        if (!PBReaderPlaceMark() || !NLXSchemaCDMEntityCandidateReadFrom(v17, a2))
          goto LABEL_40;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addSalientEntities:", v17, 0, 0);
        goto LABEL_37;
      case 4u:
        v17 = objc_alloc_init(NLXSchemaCDMSystemDialogAct);
        if (PBReaderPlaceMark() && NLXSchemaCDMSystemDialogActReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          if (v17)
            objc_msgSend(a1, "addSystemDialogActs:", v17, 0, 0);
LABEL_37:

LABEL_38:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_40:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_38;
    }
  }
}

uint64_t NLXSchemaCDMParserReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_42;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            v30 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
        v30 = *(_BYTE *)(a2 + *v5) ? 0 : v26;
LABEL_45:
        objc_msgSend(a1, "setAlgorithm:", v30);
      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_40:
        objc_msgSend(a1, "setParserId:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMReformedTurnInputBundleReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  NLXSchemaCDMTurnInput *v32;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            break;
          v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0)
            goto LABEL_46;
          v25 += 7;
          v14 = v26++ >= 9;
          if (v14)
          {
            v31 = 0;
            goto LABEL_49;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
        else
          v31 = v27;
LABEL_49:
        objc_msgSend(a1, "setType:", v31);
      }
      else if ((_DWORD)v17 == 2)
      {
        v32 = objc_alloc_init(NLXSchemaCDMTurnInput);
        if (!PBReaderPlaceMark() || (NLXSchemaCDMTurnInputReadFrom(v32, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCurrentTurn:", v32, 0, 0);

      }
      else if ((_DWORD)v17 == 3)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_41;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v24 = 0;
            goto LABEL_44;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v24 = 0;
        else
          v24 = v20;
LABEL_44:
        objc_msgSend(a1, "setPreviousTurnsSkip:", v24);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMRepetitionResultReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_42;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            v30 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
        v30 = *(_BYTE *)(a2 + *v5) ? 0 : v26;
LABEL_45:
        objc_msgSend(a1, "setAsrHypothesisIndex:", v30);
      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_40:
        objc_msgSend(a1, "setRepetitionType:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaCDMRequestContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  NLXSchemaCDMRequestFailed *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(NLXSchemaCDMRequestFailed);
        if (!PBReaderPlaceMark() || (NLXSchemaCDMRequestFailedReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setFailed:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(NLXSchemaCDMRequestStarted);
        if (!PBReaderPlaceMark() || (NLXSchemaCDMRequestStartedReadFrom(v18, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(NLXSchemaCDMRequestEnded);
    if (!PBReaderPlaceMark() || !NLXSchemaCDMRequestEndedReadFrom(v18, a2))
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setEnded:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaCDMRequestEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  NLXSchemaCDMUserParse *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(NLXSchemaCDMUserParse);
        if (!PBReaderPlaceMark() || !NLXSchemaCDMUserParseReadFrom(v17, a2))
          goto LABEL_32;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addParses:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(NLXSchemaCDMLanguageVariantResult);
    if (!PBReaderPlaceMark() || !NLXSchemaCDMLanguageVariantResultReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setLanguageVariantClassifierResult:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMRequestFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v23 = 0;
              goto LABEL_53;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
          else
            v23 = v19;
LABEL_53:
          objc_msgSend(a1, "setCode:", v23);
          continue;
        case 2u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (v14)
                {
                  v31 = 0;
                  goto LABEL_58;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
          else
            v31 = v27;
LABEL_58:
          objc_msgSend(a1, "setOriginalCode:", v31);
          continue;
        case 3u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (2)
          {
            v35 = *v3;
            v36 = *(_QWORD *)(a2 + v35);
            if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
              *(_QWORD *)(a2 + v35) = v36 + 1;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                v14 = v33++ >= 9;
                if (v14)
                {
                  v38 = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
          else
            v38 = v34;
LABEL_63:
          objc_msgSend(a1, "setErrorCode:", v38);
          continue;
        case 4u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
        *(_QWORD *)(a2 + v42) = v43 + 1;
        v41 |= (unint64_t)(v44 & 0x7F) << v39;
        if ((v44 & 0x80) == 0)
          goto LABEL_65;
        v39 += 7;
        v14 = v40++ >= 9;
        if (v14)
        {
          v45 = 0;
          goto LABEL_68;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_65:
      v45 = *(_BYTE *)(a2 + *v5) ? 0 : v41;
LABEL_68:
      objc_msgSend(a1, "setErrorDomain:", v45);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMRequestStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  NLXSchemaCDMTurnInput *v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = objc_alloc_init(NLXSchemaCDMTurnInput);
        if (!PBReaderPlaceMark() || (NLXSchemaCDMTurnInputReadFrom(v25, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCurrentTurnInput:", v25, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 3)
        {
          if ((_DWORD)v17 == 2)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_36;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_39;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_36:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_39:
            objc_msgSend(a1, "setServiceGraphName:", v24);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v25 = (NLXSchemaCDMTurnInput *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "setLoggableSharedUserId:", v25);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaCDMServiceContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setContextId:", v17, 0, 0);
        goto LABEL_33;
      case 2u:
        v17 = objc_alloc_init(NLXSchemaCDMServiceStarted);
        if (!PBReaderPlaceMark() || (NLXSchemaCDMServiceStartedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
        goto LABEL_33;
      case 3u:
        v17 = objc_alloc_init(NLXSchemaCDMServiceEnded);
        if (!PBReaderPlaceMark() || (NLXSchemaCDMServiceEndedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_36;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEnded:", v17, 0, 0);
        goto LABEL_33;
      case 4u:
        v17 = objc_alloc_init(NLXSchemaCDMServiceFailed);
        if (PBReaderPlaceMark() && (NLXSchemaCDMServiceFailedReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setFailed:", v17, 0, 0);
LABEL_33:

LABEL_34:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_36:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_34;
    }
  }
}

uint64_t NLXSchemaCDMServiceEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMServiceFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_42;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            v30 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
        v30 = *(_BYTE *)(a2 + *v5) ? 0 : v26;
LABEL_45:
        objc_msgSend(a1, "setCode:", v30);
      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_40:
        objc_msgSend(a1, "setErrorCode:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMServiceStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setServiceName:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaCDMSingleServiceSetupAttemptContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  NLXSchemaCDMSingleServiceSetupAttemptEnded *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(NLXSchemaCDMSingleServiceSetupAttemptEnded);
        if (!PBReaderPlaceMark()
          || (NLXSchemaCDMSingleServiceSetupAttemptEndedReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setEnded:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v18, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setContextId:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(NLXSchemaCDMSingleServiceSetupAttemptStarted);
    if (!PBReaderPlaceMark() || (NLXSchemaCDMSingleServiceSetupAttemptStartedReadFrom(v18, a2) & 1) == 0)
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setStartedOrChanged:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMSingleServiceSetupAttemptEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMSingleServiceSetupAttemptFailedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_50;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v23 = 0;
              goto LABEL_53;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_50:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
          else
            v23 = v19;
LABEL_53:
          objc_msgSend(a1, "setServiceType:", v23);
          continue;
        case 2u:
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v27 |= (unint64_t)(v30 & 0x7F) << v25;
              if (v30 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (v14)
                {
                  v31 = 0;
                  goto LABEL_58;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
          else
            v31 = v27;
LABEL_58:
          objc_msgSend(a1, "setRetryNumber:", v31);
          continue;
        case 3u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (2)
          {
            v35 = *v3;
            v36 = *(_QWORD *)(a2 + v35);
            if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
              *(_QWORD *)(a2 + v35) = v36 + 1;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                v14 = v33++ >= 9;
                if (v14)
                {
                  v38 = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v38 = 0;
          else
            v38 = v34;
LABEL_63:
          objc_msgSend(a1, "setReason:", v38);
          continue;
        case 4u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
        *(_QWORD *)(a2 + v42) = v43 + 1;
        v41 |= (unint64_t)(v44 & 0x7F) << v39;
        if ((v44 & 0x80) == 0)
          goto LABEL_65;
        v39 += 7;
        v14 = v40++ >= 9;
        if (v14)
        {
          v45 = 0;
          goto LABEL_68;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_65:
      v45 = *(_BYTE *)(a2 + *v5) ? 0 : v41;
LABEL_68:
      objc_msgSend(a1, "setErrorCode:", v45);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMSingleServiceSetupAttemptStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_42;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            v30 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
        v30 = *(_BYTE *)(a2 + *v5) ? 0 : v26;
LABEL_45:
        objc_msgSend(a1, "setServiceType:", v30);
      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_40:
        objc_msgSend(a1, "setRetryNumber:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMSiriVocabularySpanDataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  double v21;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(double *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v21 = 0.0;
        }
        objc_msgSend(a1, "setMatchScore:", v21);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMSiriVocabularySpanDataTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  double v29;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v27 = *v3;
        v28 = *(_QWORD *)(a2 + v27);
        if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v29 = *(double *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v29 = 0.0;
        }
        objc_msgSend(a1, "setPriorScore:", v29);
      }
      else if ((v10 >> 3) == 1)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          v24 = v23 + 1;
          if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v24;
          v21 |= (unint64_t)(v25 & 0x7F) << v19;
          if ((v25 & 0x80) == 0)
            goto LABEL_33;
          v19 += 7;
          v15 = v20++ >= 9;
          if (v15)
          {
            v26 = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        v26 = *(_BYTE *)(a2 + *v5) ? 0 : v21;
LABEL_36:
        objc_msgSend(a1, "setPriorOrdinality:", v26);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaCDMSpanMatcherContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  NLXSchemaCDMSpanMatcherEnded *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(NLXSchemaCDMSpanMatcherEnded);
        if (!PBReaderPlaceMark() || (NLXSchemaCDMSpanMatcherEndedReadFrom(v18, a2) & 1) == 0)
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setEnded:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v18, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setContextId:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(NLXSchemaCDMSpanMatcherStarted);
    if (!PBReaderPlaceMark() || (NLXSchemaCDMSpanMatcherStartedReadFrom(v18, a2) & 1) == 0)
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setStartedOrChanged:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMSpanMatcherEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMSpanMatcherStartedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v23 = 0;
            goto LABEL_32;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        v23 = *(_BYTE *)(a2 + *v5) ? 0 : v19;
LABEL_32:
        objc_msgSend(a1, "setName:", v23);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaCDMSystemDialogActReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setId:", v17, 0, 0);
        goto LABEL_45;
      case 2u:
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v17, 0, 0);
        goto LABEL_45;
      case 3u:
        v17 = objc_alloc_init(NLXSchemaCDMSystemPrompted);
        if (!PBReaderPlaceMark() || !NLXSchemaCDMSystemPromptedReadFrom(v17, a2))
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setPrompted:", v17, 0, 0);
        goto LABEL_45;
      case 4u:
        v17 = objc_alloc_init(NLXSchemaCDMSystemOffered);
        if (!PBReaderPlaceMark() || (NLXSchemaCDMSystemOfferedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setOffered:", v17, 0, 0);
        goto LABEL_45;
      case 5u:
        v17 = objc_alloc_init(NLXSchemaCDMSystemGaveOptions);
        if (!PBReaderPlaceMark() || (NLXSchemaCDMSystemGaveOptionsReadFrom(v17, a2) & 1) == 0)
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setGaveOptions:", v17, 0, 0);
        goto LABEL_45;
      case 6u:
        v17 = objc_alloc_init(NLXSchemaCDMSystemInformed);
        if (!PBReaderPlaceMark() || !NLXSchemaCDMSystemInformedReadFrom(v17, a2))
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setInformed:", v17, 0, 0);
        goto LABEL_45;
      case 7u:
        v17 = objc_alloc_init(NLXSchemaCDMSystemReportedSuccess);
        if (!PBReaderPlaceMark() || !NLXSchemaCDMSystemReportedSuccessReadFrom(v17, a2))
          goto LABEL_49;
        PBReaderRecallMark();
        objc_msgSend(a1, "setReportedSuccess:", v17, 0, 0);
        goto LABEL_45;
      case 8u:
        v17 = objc_alloc_init(NLXSchemaCDMSystemReportedFailure);
        if (PBReaderPlaceMark() && NLXSchemaCDMSystemReportedFailureReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setReportedFailure:", v17, 0, 0);
LABEL_45:

LABEL_46:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_49:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_46;
    }
  }
}

BOOL NLXSchemaCDMSystemDialogActTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setLinkId:", v17, 0, 0);
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = (SISchemaUUID *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "setRenderedText:", v17);
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMSystemGaveOptionsReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  NLXSchemaCDMUserDialogAct *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(NLXSchemaCDMUserDialogAct);
        if (!PBReaderPlaceMark() || !NLXSchemaCDMUserDialogActReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addChoices:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaCDMSystemInformedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_32;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTaskId:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(USOSchemaUSOGraph);
    if (!PBReaderPlaceMark() || !USOSchemaUSOGraphReadFrom(v17, a2))
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    if (v17)
      objc_msgSend(a1, "addEntities:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMSystemOfferedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  NLXSchemaCDMUserDialogAct *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(NLXSchemaCDMUserDialogAct);
        if (!PBReaderPlaceMark() || !NLXSchemaCDMUserDialogActReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setOfferedAct:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaCDMSystemPromptedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTaskId:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(USOSchemaUSOGraph);
    if (!PBReaderPlaceMark() || !USOSchemaUSOGraphReadFrom(v17, a2))
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setTarget:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaCDMSystemReportedFailureReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  USOSchemaUSOGraph *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v18 = objc_alloc_init(USOSchemaUSOGraph);
        if (!PBReaderPlaceMark() || !USOSchemaUSOGraphReadFrom(v18, a2))
        {
LABEL_35:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTask:", v18, 0, 0);
        goto LABEL_30;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        v18 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v18, a2) & 1) == 0)
          goto LABEL_35;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTaskId:", v18, 0, 0);
LABEL_30:

        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_32:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(USOSchemaUSOGraph);
    if (!PBReaderPlaceMark() || !USOSchemaUSOGraphReadFrom(v18, a2))
      goto LABEL_35;
    PBReaderRecallMark();
    objc_msgSend(a1, "setReason:", v18, 0, 0);
    goto LABEL_30;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaCDMSystemReportedSuccessReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTaskId:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(USOSchemaUSOGraph);
    if (!PBReaderPlaceMark() || !USOSchemaUSOGraphReadFrom(v17, a2))
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setTask:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMTaskReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  unint64_t v19;
  USOSchemaUSOGraph *v20;
  uint64_t v21;
  unint64_t v22;
  double v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(double *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v23 = 0.0;
        }
        objc_msgSend(a1, "setScore:", v23);
      }
      else
      {
        if ((_DWORD)v19 == 2)
        {
          v20 = objc_alloc_init(USOSchemaUSOGraph);
          if (!PBReaderPlaceMark() || !USOSchemaUSOGraphReadFrom(v20, a2))
          {
LABEL_37:

            return 0;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "setTask:", v20, 0, 0);
        }
        else
        {
          if ((_DWORD)v19 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v20 = objc_alloc_init(SISchemaUUID);
          if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v20, a2) & 1) == 0)
            goto LABEL_37;
          PBReaderRecallMark();
          objc_msgSend(a1, "setTaskId:", v20, 0, 0);
        }

      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMTokenReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  void *v17;
  uint64_t result;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setValue:", v17);
          goto LABEL_67;
        case 2u:
          v19 = 0;
          v20 = 0;
          v21 = 0;
          while (2)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
              *(_QWORD *)(a2 + v22) = v23 + 1;
              v21 |= (unint64_t)(v24 & 0x7F) << v19;
              if (v24 < 0)
              {
                v19 += 7;
                v14 = v20++ >= 9;
                if (v14)
                {
                  v25 = 0;
                  goto LABEL_72;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v25 = 0;
          else
            v25 = v21;
LABEL_72:
          objc_msgSend(a1, "setBegin:", v25);
          continue;
        case 3u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
              *(_QWORD *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  v32 = 0;
                  goto LABEL_77;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v32 = 0;
          else
            v32 = v28;
LABEL_77:
          objc_msgSend(a1, "setEnd:", v32);
          continue;
        case 4u:
          v33 = 0;
          v34 = 0;
          v35 = 0;
          while (2)
          {
            v36 = *v3;
            v37 = *(_QWORD *)(a2 + v36);
            if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
              *(_QWORD *)(a2 + v36) = v37 + 1;
              v35 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                v14 = v34++ >= 9;
                if (v14)
                {
                  v35 = 0;
                  goto LABEL_81;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v35 = 0;
LABEL_81:
          objc_msgSend(a1, "setIsSignificant:", v35 != 0);
          continue;
        case 5u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                v14 = v40++ >= 9;
                if (v14)
                {
                  v41 = 0;
                  goto LABEL_85;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v41 = 0;
LABEL_85:
          objc_msgSend(a1, "setIsWhitespace:", v41 != 0);
          continue;
        case 6u:
          v45 = 0;
          v46 = 0;
          v47 = 0;
          while (2)
          {
            v48 = *v3;
            v49 = *(_QWORD *)(a2 + v48);
            if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v49);
              *(_QWORD *)(a2 + v48) = v49 + 1;
              v47 |= (unint64_t)(v50 & 0x7F) << v45;
              if (v50 < 0)
              {
                v45 += 7;
                v14 = v46++ >= 9;
                if (v14)
                {
                  v51 = 0;
                  goto LABEL_90;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v51 = 0;
          else
            v51 = v47;
LABEL_90:
          objc_msgSend(a1, "setTokenIndex:", v51);
          continue;
        case 7u:
          v52 = 0;
          v53 = 0;
          v54 = 0;
          break;
        case 8u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(a1, "setCleanValue:", v17);
          goto LABEL_67;
        case 9u:
          PBReaderReadString();
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          if (v17)
            objc_msgSend(a1, "addNormalizedValues:", v17);
LABEL_67:

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v55 = *v3;
        v56 = *(_QWORD *)(a2 + v55);
        if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
          break;
        v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
        *(_QWORD *)(a2 + v55) = v56 + 1;
        v54 |= (unint64_t)(v57 & 0x7F) << v52;
        if ((v57 & 0x80) == 0)
          goto LABEL_92;
        v52 += 7;
        v14 = v53++ >= 9;
        if (v14)
        {
          v58 = 0;
          goto LABEL_95;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_92:
      v58 = *(_BYTE *)(a2 + *v5) ? 0 : v54;
LABEL_95:
      objc_msgSend(a1, "setNonWhitespaceTokenIndex:", v58);
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t SCSchemaSCCorrectionCheckedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SCSchemaSCCheckCorrectionResponse *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SCSchemaSCCheckCorrectionResponse);
        if (!PBReaderPlaceMark() || (SCSchemaSCCheckCorrectionResponseReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setCheckCorrectionResponse:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaCDMTokenChainReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  NLXSchemaCDMToken *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 3)
        break;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(NLXSchemaCDMToken);
        if (!PBReaderPlaceMark() || !NLXSchemaCDMTokenReadFrom(v17, a2))
          goto LABEL_32;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addTokens:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SISchemaUUID);
    if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setAsrHypothesisId:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMTokenizationEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  SISchemaUUID *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v25 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v25, a2) & 1) == 0)
        {
LABEL_45:

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setContextId:", v25, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 3)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_39;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v24 = 0;
                goto LABEL_42;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
            if (*(_BYTE *)(a2 + *v5))
              v24 = 0;
            else
              v24 = v20;
LABEL_42:
            objc_msgSend(a1, "setInputType:", v24, v27, v28);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v25 = objc_alloc_init(NLXSchemaCDMTokenChain);
        v27 = 0;
        v28 = 0;
        if (!PBReaderPlaceMark() || !NLXSchemaCDMTokenChainReadFrom(v25, a2))
          goto LABEL_45;
        PBReaderRecallMark();
        if (v25)
          objc_msgSend(a1, "addTokenChains:", v25, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaCDMTurnContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  NLXSchemaCDMNLContext *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(NLXSchemaCDMNLContext);
        if (!PBReaderPlaceMark() || !NLXSchemaCDMNLContextReadFrom(v17, a2))
          goto LABEL_31;
        PBReaderRecallMark();
        objc_msgSend(a1, "setNlContext:", v17, 0, 0);
LABEL_26:

        goto LABEL_28;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_28:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(NLXSchemaNLXLegacyNLContext);
    if (!PBReaderPlaceMark() || (NLXSchemaNLXLegacyNLContextReadFrom(v17, a2) & 1) == 0)
    {
LABEL_31:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setLegacyNlContext:", v17, 0, 0);
    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMTurnInputReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  SISchemaUUID *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        v24 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || !SISchemaUUIDReadFrom(v24, a2))
        {
LABEL_44:

          return 0;
        }
        PBReaderRecallMark();
        if (v24)
          objc_msgSend(a1, "addAsrHypothesisIds:", v24, 0, 0);
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 3)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_39;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                v20 = 0;
                goto LABEL_41;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
            if (*(_BYTE *)(a2 + *v5))
              v20 = 0;
LABEL_41:
            objc_msgSend(a1, "setIsTapToEdit:", v20 != 0);
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v24 = objc_alloc_init(NLXSchemaCDMTurnContext);
        if (!PBReaderPlaceMark() || !NLXSchemaCDMTurnContextReadFrom(v24, a2))
          goto LABEL_44;
        PBReaderRecallMark();
        objc_msgSend(a1, "setTurnContext:", v24, 0, 0);
      }

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMUserAcceptedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setOfferId:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMUserAcknowledgedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSystemDialogActId:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMUserCancelledReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTaskId:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaCDMUserDialogActReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  USOSchemaUSOUtteranceAlignment *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(USOSchemaUSOUtteranceAlignment);
        if (!PBReaderPlaceMark() || (USOSchemaUSOUtteranceAlignmentReadFrom(v17, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAlignment:", v17, 0, 0);
        goto LABEL_54;
      case 2u:
        v17 = objc_alloc_init(USOSchemaUSOGraph);
        if (!PBReaderPlaceMark() || !USOSchemaUSOGraphReadFrom(v17, a2))
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setReference:", v17, 0, 0);
        goto LABEL_54;
      case 3u:
        v17 = objc_alloc_init(NLXSchemaCDMUserAccepted);
        if (!PBReaderPlaceMark() || (NLXSchemaCDMUserAcceptedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAccepted:", v17, 0, 0);
        goto LABEL_54;
      case 4u:
        v17 = objc_alloc_init(NLXSchemaCDMUserRejected);
        if (!PBReaderPlaceMark() || (NLXSchemaCDMUserRejectedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setRejected:", v17, 0, 0);
        goto LABEL_54;
      case 5u:
        v17 = objc_alloc_init(NLXSchemaCDMUserCancelled);
        if (!PBReaderPlaceMark() || (NLXSchemaCDMUserCancelledReadFrom(v17, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setCancelled:", v17, 0, 0);
        goto LABEL_54;
      case 6u:
        v17 = objc_alloc_init(NLXSchemaCDMUserWantedToRepeat);
        if (!PBReaderPlaceMark() || (NLXSchemaCDMUserWantedToRepeatReadFrom(v17, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setWantedToRepeat:", v17, 0, 0);
        goto LABEL_54;
      case 7u:
        v17 = objc_alloc_init(NLXSchemaCDMUserAcknowledged);
        if (!PBReaderPlaceMark() || (NLXSchemaCDMUserAcknowledgedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setAcknowledged:", v17, 0, 0);
        goto LABEL_54;
      case 8u:
        v17 = objc_alloc_init(NLXSchemaCDMUserWantedToProceed);
        if (!PBReaderPlaceMark() || (NLXSchemaCDMUserWantedToProceedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setWantedToProceed:", v17, 0, 0);
        goto LABEL_54;
      case 9u:
        v17 = objc_alloc_init(NLXSchemaCDMUserWantedToPause);
        if (!PBReaderPlaceMark() || (NLXSchemaCDMUserWantedToPauseReadFrom(v17, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setWantedToPause:", v17, 0, 0);
        goto LABEL_54;
      case 0xAu:
        v17 = objc_alloc_init(NLXSchemaCDMDelegatedUserDialogAct);
        if (!PBReaderPlaceMark() || (NLXSchemaCDMDelegatedUserDialogActReadFrom(v17, a2) & 1) == 0)
          goto LABEL_58;
        PBReaderRecallMark();
        objc_msgSend(a1, "setDelegated:", v17, 0, 0);
        goto LABEL_54;
      case 0xBu:
        v17 = objc_alloc_init(NLXSchemaCDMUserStatedTask);
        if (PBReaderPlaceMark() && (NLXSchemaCDMUserStatedTaskReadFrom(v17, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setUserStatedTask:", v17, 0, 0);
LABEL_54:

LABEL_55:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_58:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_55;
    }
  }
}

uint64_t NLXSchemaCDMUserParseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  SISchemaUUID *v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v16 = *v5;
        v17 = *(unsigned __int8 *)(a2 + v16);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *v5;
    v17 = *(unsigned __int8 *)(a2 + v16);
    if (*(_BYTE *)(a2 + v16))
      v10 = 0;
LABEL_14:
    if (v17 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v19 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v19, a2) & 1) == 0)
          goto LABEL_51;
        PBReaderRecallMark();
        objc_msgSend(a1, "setId:", v19, 0, 0);
        goto LABEL_43;
      case 2u:
        v19 = objc_alloc_init(NLXSchemaCDMUserDialogAct);
        v27 = 0;
        v28 = 0;
        if (!PBReaderPlaceMark() || !NLXSchemaCDMUserDialogActReadFrom(v19, a2))
          goto LABEL_51;
        PBReaderRecallMark();
        if (v19)
          objc_msgSend(a1, "addUserDialogActs:", v19, 0, 0);
        goto LABEL_43;
      case 3u:
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v23 = *(double *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v23 = 0.0;
        }
        objc_msgSend(a1, "setProbability:", v23, v27, v28);
        goto LABEL_44;
      case 4u:
        v19 = objc_alloc_init(NLXSchemaCDMRepetitionResult);
        if (!PBReaderPlaceMark() || (NLXSchemaCDMRepetitionResultReadFrom(v19, a2) & 1) == 0)
          goto LABEL_51;
        PBReaderRecallMark();
        objc_msgSend(a1, "setRepetitionResult:", v19, 0, 0);
        goto LABEL_43;
      case 5u:
        v19 = objc_alloc_init(NLXSchemaCDMParser);
        if (!PBReaderPlaceMark() || (NLXSchemaCDMParserReadFrom(v19, a2) & 1) == 0)
          goto LABEL_51;
        PBReaderRecallMark();
        objc_msgSend(a1, "setParser:", v19, 0, 0);
        goto LABEL_43;
      case 6u:
        v24 = *v3;
        v25 = *(_QWORD *)(a2 + v24);
        if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v26 = *(double *)(*(_QWORD *)(a2 + *v7) + v25);
          *(_QWORD *)(a2 + v24) = v25 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v26 = 0.0;
        }
        objc_msgSend(a1, "setComparableProbability:", v26, v27, v28);
        goto LABEL_44;
      case 7u:
        v19 = objc_alloc_init(NLXSchemaCDMCorrectionOutcome);
        if (PBReaderPlaceMark() && (NLXSchemaCDMCorrectionOutcomeReadFrom(v19, a2) & 1) != 0)
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setCorrectionOutcome:", v19, 0, 0);
LABEL_43:

LABEL_44:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_51:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_44;
    }
  }
}

uint64_t NLXSchemaCDMUserRejectedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setOfferId:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMUserStatedTaskReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setExists:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMUserWantedToPauseReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTaskId:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMUserWantedToProceedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setTaskId:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMUserWantedToRepeatReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  SISchemaUUID *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(SISchemaUUID);
        if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setSystemDialogActId:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaCDMUsoGraphTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  USOSchemaUSOGraphTier1 *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(USOSchemaUSOGraphTier1);
        if (!PBReaderPlaceMark() || !USOSchemaUSOGraphTier1ReadFrom(v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        objc_msgSend(a1, "setUsoGraphTier1:", v17, 0, 0);

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NLXSchemaContextualSpanDataReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_31:
        objc_msgSend(a1, "setIsSurroundingTextMatched:", v19 != 0);
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaMARRSContextualSpanMatcherEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  NLXSchemaCDMMatchingSpan *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(NLXSchemaCDMMatchingSpan);
        if (!PBReaderPlaceMark() || !NLXSchemaCDMMatchingSpanReadFrom(v17, a2))
          goto LABEL_32;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addContextualSpans:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SISchemaUUID);
    if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setLinkId:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaMARRSContextualSpanMatcherEndedTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  NLXSchemaCDMMatchingSpanTier1 *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(NLXSchemaCDMMatchingSpanTier1);
        if (!PBReaderPlaceMark() || !NLXSchemaCDMMatchingSpanTier1ReadFrom(v17, a2))
          goto LABEL_32;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addContextualSpansTier1:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SISchemaUUID);
    if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setLinkId:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaMARRSMentionDetectorEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  NLXSchemaCDMMatchingSpan *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(NLXSchemaCDMMatchingSpan);
        if (!PBReaderPlaceMark() || !NLXSchemaCDMMatchingSpanReadFrom(v17, a2))
          goto LABEL_32;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addMentionDetectorSpans:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SISchemaUUID);
    if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setLinkId:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaMARRSMentionDetectorEndedTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  NLXSchemaCDMMatchingSpanTier1 *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(NLXSchemaCDMMatchingSpanTier1);
        if (!PBReaderPlaceMark() || !NLXSchemaCDMMatchingSpanTier1ReadFrom(v17, a2))
          goto LABEL_32;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addMentionDetectorSpansTier1:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SISchemaUUID);
    if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setLinkId:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaMARRSMentionResolverEndedReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  NLXSchemaCDMMatchingSpan *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(NLXSchemaCDMMatchingSpan);
        if (!PBReaderPlaceMark() || !NLXSchemaCDMMatchingSpanReadFrom(v17, a2))
          goto LABEL_32;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addMentionResolverSpans:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SISchemaUUID);
    if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setLinkId:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaMARRSMentionResolverEndedTier1ReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  NLXSchemaCDMMatchingSpanTier1 *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(NLXSchemaCDMMatchingSpanTier1);
        if (!PBReaderPlaceMark() || !NLXSchemaCDMMatchingSpanTier1ReadFrom(v17, a2))
          goto LABEL_32;
        PBReaderRecallMark();
        if (v17)
          objc_msgSend(a1, "addMentionResolverSpansTier1:", v17, 0, 0);
LABEL_27:

        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(SISchemaUUID);
    if (!PBReaderPlaceMark() || (SISchemaUUIDReadFrom(v17, a2) & 1) == 0)
    {
LABEL_32:

      return 0;
    }
    PBReaderRecallMark();
    objc_msgSend(a1, "setLinkId:", v17, 0, 0);
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NLXSchemaMARRSQueryRewriteContextReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  NLXSchemaMARRSQueryRewriteStarted *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(NLXSchemaMARRSQueryRewriteStarted);
        if (!PBReaderPlaceMark() || (NLXSchemaMARRSQueryRewriteStartedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setStarted:", v17, 0, 0);
        goto LABEL_36;
      case 2u:
        v17 = objc_alloc_init(NLXSchemaMARRSQueryRewriteEvaluated);
        if (!PBReaderPlaceMark() || !NLXSchemaMARRSQueryRewriteEvaluatedReadFrom(v17, a2))
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setEvaluated:", v17, 0, 0);
        goto LABEL_36;
      case 3u:
        v17 = objc_alloc_init(NLXSchemaMARRSQueryRewriteFailed);
        if (!PBReaderPlaceMark() || (NLXSchemaMARRSQueryRewriteFailedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setFailed:", v17, 0, 0);
        goto LABEL_36;
      case 4u:
        v17 = objc_alloc_init(NLXSchemaMARRSQueryRewriteStarted);
        if (!PBReaderPlaceMark() || (NLXSchemaMARRSQueryRewriteStartedReadFrom(v17, a2) & 1) == 0)
          goto LABEL_40;
        PBReaderRecallMark();
        objc_msgSend(a1, "setStartedOrChanged:", v17, 0, 0);
        goto LABEL_36;
      case 5u:
        v17 = objc_alloc_init(NLXSchemaMARRSQueryRewriteEvaluated);
        if (PBReaderPlaceMark() && NLXSchemaMARRSQueryRewriteEvaluatedReadFrom(v17, a2))
        {
          PBReaderRecallMark();
          objc_msgSend(a1, "setEnded:", v17, 0, 0);
LABEL_36:

LABEL_37:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_40:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_37;
    }
  }
}

