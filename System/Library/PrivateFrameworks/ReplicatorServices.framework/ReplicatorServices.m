ReplicatorServices::ZoneReplicationPriority_optional __swiftcall ZoneReplicationPriority.init(rawValue:)(Swift::Int64 rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (ReplicatorServices::ZoneReplicationPriority_optional)rawValue;
}

uint64_t ZoneReplicationPriority.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t sub_2453B8498()
{
  unint64_t result;

  result = qword_257464630;
  if (!qword_257464630)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ZoneReplicationPriority, &type metadata for ZoneReplicationPriority);
    atomic_store(result, (unint64_t *)&qword_257464630);
  }
  return result;
}

uint64_t sub_2453B84DC()
{
  sub_245444414();
  sub_245444438();
  return sub_245444444();
}

uint64_t sub_2453B8520()
{
  return sub_245444438();
}

uint64_t sub_2453B8548()
{
  sub_245444414();
  sub_245444438();
  return sub_245444444();
}

ReplicatorServices::ZoneReplicationPriority_optional sub_2453B8588(Swift::Int64 *a1)
{
  return ZoneReplicationPriority.init(rawValue:)(*a1);
}

void sub_2453B8590(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t sub_2453B859C()
{
  sub_2453B8E54();
  return sub_245443E74();
}

uint64_t sub_2453B85F8()
{
  sub_2453B8E54();
  return sub_245443E5C();
}

BOOL sub_2453B8644(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ZoneReplicationPriority(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ZoneReplicationPriority(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2453B8744 + 4 * byte_245445055[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2453B8778 + 4 * byte_245445050[v4]))();
}

uint64_t sub_2453B8778(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2453B8780(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2453B8788);
  return result;
}

uint64_t sub_2453B8794(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2453B879CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_2453B87A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2453B87A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2453B87B4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_2453B87C0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ZoneReplicationPriority()
{
  return &type metadata for ZoneReplicationPriority;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ReplicatorProtocolVersion(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ReplicatorProtocolVersion(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_2453B887C(a1, (unint64_t *)&unk_257464638);
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
  sub_2453B887C(a1, &qword_25440E110);
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
  sub_2453B887C(a1, &qword_25440E108);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_2453B887C(a1, (unint64_t *)&unk_25440E6B0);
}

void sub_2453B887C(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_2453B88C0(uint64_t a1, uint64_t a2)
{
  return sub_2453B8D3C(a1, a2, MEMORY[0x24BEE0CD8]);
}

uint64_t sub_2453B88D4(uint64_t a1, uint64_t a2)
{
  return sub_2453B8D3C(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

uint64_t sub_2453B88EC(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_245443D84();
  *a2 = 0;
  return result;
}

uint64_t sub_2453B8960(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_245443D90();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_2453B89DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_245443D9C();
  v2 = sub_245443D78();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_2453B8A20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_245443D9C();
  v2 = v1;
  if (v0 == sub_245443D9C() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_245444390();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_2453B8AAC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_245443D78();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_2453B8AF0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_245443D9C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_2453B8B18()
{
  sub_2453B8BF4((unint64_t *)&qword_25440E0F8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_245445488);
  sub_2453B8BF4((unint64_t *)&unk_257464690, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_245445284);
  return sub_245444240();
}

uint64_t sub_2453B8B9C()
{
  return sub_2453B8BF4(&qword_257464648, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_245445248);
}

uint64_t sub_2453B8BC8()
{
  return sub_2453B8BF4(&qword_257464650, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_24544521C);
}

uint64_t sub_2453B8BF4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x249534380](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2453B8C34()
{
  sub_2453B8BF4(&qword_257464678, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_2454453F8);
  sub_2453B8BF4((unint64_t *)&unk_257464680, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_245445398);
  return sub_245444240();
}

uint64_t sub_2453B8CB8()
{
  return sub_2453B8BF4(&qword_257464658, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_24544535C);
}

uint64_t sub_2453B8CE4()
{
  return sub_2453B8BF4(&qword_257464660, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_245445330);
}

uint64_t sub_2453B8D10()
{
  return sub_2453B8BF4((unint64_t *)&unk_257464668, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_2454453CC);
}

uint64_t sub_2453B8D3C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_245443D9C();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_2453B8D78()
{
  sub_245443D9C();
  sub_245443DF0();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2453B8DB8()
{
  uint64_t v0;

  sub_245443D9C();
  sub_245444414();
  sub_245443DF0();
  v0 = sub_245444444();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_2453B8E28()
{
  return sub_2453B8BF4(&qword_25440E100, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_2454452B8);
}

unint64_t sub_2453B8E54()
{
  unint64_t result;

  result = qword_25440E9E8;
  if (!qword_25440E9E8)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ZoneReplicationPriority, &type metadata for ZoneReplicationPriority);
    atomic_store(result, (unint64_t *)&qword_25440E9E8);
  }
  return result;
}

uint64_t ReplicatorProtocolVersion.current.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ReplicatorProtocolVersion.minimum.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t ReplicatorProtocolVersion.init(current:minimum:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

BOOL ReplicatorProtocolVersion.isCompatible(with:)(_QWORD *a1)
{
  _QWORD *v1;

  return *v1 >= a1[1] && *a1 >= v1[1];
}

Swift::Bool __swiftcall ReplicatorProtocolVersion.isCompatible(with:)(Swift::UInt64 with)
{
  Swift::UInt64 *v1;

  return *v1 >= with && v1[1] <= with;
}

unint64_t ReplicatorProtocolVersion.highestCompatibleProtocolVersion(with:)(unint64_t *a1)
{
  unint64_t *v1;
  unint64_t v2;
  _BOOL4 v4;

  v2 = *a1;
  v4 = *v1 < a1[1] || v2 < v1[1];
  if (*v1 < v2)
    v2 = *v1;
  if (v4)
    return 0;
  else
    return v2;
}

Swift::UInt64_optional __swiftcall ReplicatorProtocolVersion.highestCompatibleProtocolVersion(with:)(Swift::UInt64 with)
{
  Swift::UInt64 *v1;
  _BOOL4 v3;
  Swift::UInt64_optional result;

  v3 = v1[1] > with || *v1 < with;
  if (v3)
    with = 0;
  result.value = with;
  result.is_nil = v3;
  return result;
}

uint64_t ReplicatorProtocolVersion.description.getter()
{
  sub_24544412C();
  swift_bridgeObjectRelease();
  sub_245444384();
  sub_245443E14();
  swift_bridgeObjectRelease();
  sub_245443E14();
  sub_245444384();
  sub_245443E14();
  swift_bridgeObjectRelease();
  return 0x3A746E6572727563;
}

uint64_t ReplicatorProtocolVersion.hash(into:)()
{
  sub_245444438();
  return sub_245444438();
}

BOOL static ReplicatorProtocolVersion.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL sub_2453B9090(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_2453B90A8()
{
  sub_245444414();
  sub_245444420();
  return sub_245444444();
}

uint64_t sub_2453B90EC()
{
  return sub_245444420();
}

uint64_t sub_2453B9114()
{
  sub_245444414();
  sub_245444420();
  return sub_245444444();
}

uint64_t sub_2453B9154()
{
  _BYTE *v0;

  if (*v0)
    return 0x6D756D696E696DLL;
  else
    return 0x746E6572727563;
}

uint64_t sub_2453B9188@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2453B995C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2453B91AC()
{
  return 0;
}

void sub_2453B91B8(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_2453B91C4()
{
  sub_2453B9398();
  return sub_245444468();
}

uint64_t sub_2453B91EC()
{
  sub_2453B9398();
  return sub_245444474();
}

uint64_t ReplicatorProtocolVersion.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v9[2];
  char v10;
  char v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB20);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[1] = *(_QWORD *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2453B9398();
  sub_24544445C();
  v11 = 0;
  sub_24544436C();
  if (!v2)
  {
    v10 = 1;
    sub_24544436C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x249534368]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_2453B9398()
{
  unint64_t result;

  result = qword_25440E908;
  if (!qword_25440E908)
  {
    result = MEMORY[0x249534380](&unk_2454456B0, &type metadata for ReplicatorProtocolVersion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E908);
  }
  return result;
}

uint64_t ReplicatorProtocolVersion.hashValue.getter()
{
  sub_245444414();
  sub_245444438();
  sub_245444438();
  return sub_245444444();
}

uint64_t ReplicatorProtocolVersion.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  char v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB70);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2453B9398();
  sub_245444450();
  if (!v2)
  {
    v14 = 0;
    v9 = sub_2454442E8();
    v13 = 1;
    v10 = sub_2454442E8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_2453B957C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ReplicatorProtocolVersion.init(from:)(a1, a2);
}

uint64_t sub_2453B9590(_QWORD *a1)
{
  return ReplicatorProtocolVersion.encode(to:)(a1);
}

uint64_t sub_2453B95A4()
{
  sub_245444414();
  sub_245444438();
  sub_245444438();
  return sub_245444444();
}

uint64_t sub_2453B95FC()
{
  sub_245444438();
  return sub_245444438();
}

uint64_t sub_2453B9634()
{
  sub_245444414();
  sub_245444438();
  sub_245444438();
  return sub_245444444();
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_2453B96AC()
{
  unint64_t result;

  result = qword_2574647C0;
  if (!qword_2574647C0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorProtocolVersion, &type metadata for ReplicatorProtocolVersion);
    atomic_store(result, (unint64_t *)&qword_2574647C0);
  }
  return result;
}

BOOL sub_2453B96F0(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

ValueMetadata *type metadata accessor for ReplicatorProtocolVersion()
{
  return &type metadata for ReplicatorProtocolVersion;
}

uint64_t getEnumTagSinglePayload for ReplicatorProtocolVersion.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplicatorProtocolVersion.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2453B97F8 + 4 * byte_2454454D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2453B982C + 4 * byte_2454454D0[v4]))();
}

uint64_t sub_2453B982C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2453B9834(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2453B983CLL);
  return result;
}

uint64_t sub_2453B9848(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2453B9850);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2453B9854(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2453B985C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_2453B9868(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorProtocolVersion.CodingKeys()
{
  return &type metadata for ReplicatorProtocolVersion.CodingKeys;
}

unint64_t sub_2453B9888()
{
  unint64_t result;

  result = qword_2574647C8;
  if (!qword_2574647C8)
  {
    result = MEMORY[0x249534380](&unk_245445688, &type metadata for ReplicatorProtocolVersion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574647C8);
  }
  return result;
}

unint64_t sub_2453B98D0()
{
  unint64_t result;

  result = qword_25440E918;
  if (!qword_25440E918)
  {
    result = MEMORY[0x249534380](&unk_2454455F8, &type metadata for ReplicatorProtocolVersion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E918);
  }
  return result;
}

unint64_t sub_2453B9918()
{
  unint64_t result;

  result = qword_25440E910;
  if (!qword_25440E910)
  {
    result = MEMORY[0x249534380](&unk_245445620, &type metadata for ReplicatorProtocolVersion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E910);
  }
  return result;
}

uint64_t sub_2453B995C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746E6572727563 && a2 == 0xE700000000000000;
  if (v2 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D756D696E696DLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_245444390();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t static ReplicatorCoder.encode(_:version:)()
{
  sub_245443B68();
  return sub_245443B5C();
}

uint64_t static ReplicatorCoder.decode<A>(_:from:version:)()
{
  sub_245443B68();
  return sub_245443B50();
}

uint64_t static ReplicatorCoder.encodeNSSecureCoding(_:)()
{
  sub_245443B68();
  return sub_245443B44();
}

uint64_t static ReplicatorCoder.decodeNSSecureCoding<A>(_:from:)()
{
  sub_245443B68();
  return sub_245443B38();
}

uint64_t ReplicatorCoder.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t ReplicatorCoder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ReplicatorCoder()
{
  return objc_opt_self();
}

uint64_t method lookup function for ReplicatorCoder()
{
  return swift_lookUpClassMethod();
}

uint64_t ReplicatorRecordVersion.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2453BA364(v1, a1, type metadata accessor for ReplicatorRecord.ID);
}

uint64_t ReplicatorRecordVersion.id.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_2453B9C44(a1, v1);
}

uint64_t sub_2453B9C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReplicatorRecord.ID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*ReplicatorRecordVersion.id.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorRecordVersion.version.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReplicatorRecordVersion() + 20);
  v4 = sub_245443B14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for ReplicatorRecordVersion()
{
  uint64_t result;

  result = qword_25440E7D8;
  if (!qword_25440E7D8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ReplicatorRecordVersion.version.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReplicatorRecordVersion() + 20);
  v4 = sub_245443B14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReplicatorRecordVersion.version.modify())()
{
  type metadata accessor for ReplicatorRecordVersion();
  return nullsub_1;
}

uint64_t ReplicatorRecordVersion.init(id:version:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  sub_2453B9DE0(a1, a3);
  v5 = a3 + *(int *)(type metadata accessor for ReplicatorRecordVersion() + 20);
  v6 = sub_245443B14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a2, v6);
}

uint64_t sub_2453B9DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReplicatorRecord.ID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2453B9E24()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E6F6973726576;
  else
    return 25705;
}

uint64_t sub_2453B9E54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2453BAF48(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_2453B9E78()
{
  sub_2453BA04C();
  return sub_245444468();
}

uint64_t sub_2453B9EA0()
{
  sub_2453BA04C();
  return sub_245444474();
}

uint64_t ReplicatorRecordVersion.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_257463B98);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2453BA04C();
  sub_24544445C();
  v8[15] = 0;
  type metadata accessor for ReplicatorRecord.ID(0);
  sub_2453B8BF4(&qword_25440E7A0, type metadata accessor for ReplicatorRecord.ID, (uint64_t)&protocol conformance descriptor for ReplicatorRecord.ID);
  sub_245444360();
  if (!v1)
  {
    type metadata accessor for ReplicatorRecordVersion();
    v8[14] = 1;
    sub_245443B14();
    sub_2453B8BF4(&qword_2574639F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
    sub_245444360();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_2453BA04C()
{
  unint64_t result;

  result = qword_25440E458;
  if (!qword_25440E458)
  {
    result = MEMORY[0x249534380](&unk_2454458BC, &type metadata for ReplicatorRecordVersion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E458);
  }
  return result;
}

uint64_t ReplicatorRecordVersion.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  char v28;

  v21 = a2;
  v22 = sub_245443B14();
  v20 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8]();
  v23 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x24BDAC7A8]();
  v25 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E218);
  v6 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReplicatorRecordVersion();
  MEMORY[0x24BDAC7A8]();
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2453BA04C();
  sub_245444450();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v19 = a1;
  v12 = v6;
  v13 = (uint64_t)v11;
  v14 = v23;
  v28 = 0;
  sub_2453B8BF4(&qword_25440E550, type metadata accessor for ReplicatorRecord.ID, (uint64_t)&protocol conformance descriptor for ReplicatorRecord.ID);
  v15 = (uint64_t)v25;
  sub_2454442DC();
  sub_2453B9DE0(v15, v13);
  v27 = 1;
  sub_2453B8BF4(&qword_25440E1B8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
  v16 = v22;
  v17 = v26;
  sub_2454442DC();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v13 + *(int *)(v9 + 20), v14, v16);
  sub_2453BA364(v13, v21, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordVersion);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  return sub_2453BA3A8(v13, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordVersion);
}

uint64_t sub_2453BA364(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2453BA3A8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2453BA3E4()
{
  return sub_2453B8BF4(&qword_257464530, type metadata accessor for ReplicatorRecord.ID, (uint64_t)&protocol conformance descriptor for ReplicatorRecord.ID);
}

uint64_t sub_2453BA410@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2453BA364(v1, a1, type metadata accessor for ReplicatorRecord.ID);
}

uint64_t sub_2453BA434@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorRecordVersion.init(from:)(a1, a2);
}

uint64_t sub_2453BA448(_QWORD *a1)
{
  return ReplicatorRecordVersion.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for ReplicatorRecordVersion(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  char *__dst;
  uint64_t v28;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    v10 = type metadata accessor for ReplicatorRecord.ID(0);
    v11 = *(int *)(v10 + 28);
    __dst = (char *)v4 + v11;
    v28 = v10;
    v12 = (char *)a2 + v11;
    v13 = sub_245443B14();
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v15(v12, 1, v13))
    {
      v16 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
      memcpy(__dst, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(__dst, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
    }
    v18 = *(int *)(v28 + 32);
    v19 = (uint64_t *)((char *)v4 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = *(int *)(a3 + 20);
    v23 = (char *)v4 + v22;
    v24 = (char *)a2 + v22;
    v25 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    swift_bridgeObjectRetain();
    v25(v23, v24, v13);
  }
  return v4;
}

uint64_t destroy for ReplicatorRecordVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(type metadata accessor for ReplicatorRecord.ID(0) + 28);
  v5 = sub_245443B14();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1 + *(int *)(a2 + 20), v5);
}

_QWORD *initializeWithCopy for ReplicatorRecordVersion(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  char *__dst;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v8 = type metadata accessor for ReplicatorRecord.ID(0);
  v9 = *(int *)(v8 + 28);
  __dst = (char *)a1 + v9;
  v10 = (char *)a2 + v9;
  v11 = sub_245443B14();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    v14 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v15 = *(int *)(v8 + 32);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = *(int *)(a3 + 20);
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  swift_bridgeObjectRetain();
  v22(v20, v21, v11);
  return a1;
}

char *assignWithCopy for ReplicatorRecordVersion(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = type metadata accessor for ReplicatorRecord.ID(0);
  v7 = *(int *)(v6 + 28);
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = sub_245443B14();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  v16 = *(int *)(v6 + 32);
  v17 = &a1[v16];
  v18 = &a2[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v10);
  return a1;
}

char *initializeWithTake for ReplicatorRecordVersion(char *a1, char *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);

  v6 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v6;
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  v7 = type metadata accessor for ReplicatorRecord.ID(0);
  v8 = *(int *)(v7 + 28);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_245443B14();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    v14 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  }
  else
  {
    v14 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v14(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(_OWORD *)&a1[*(int *)(v7 + 32)] = *(_OWORD *)&a2[*(int *)(v7 + 32)];
  v14(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v11);
  return a1;
}

char *assignWithTake for ReplicatorRecordVersion(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  v7 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a1 + 3) = v7;
  swift_bridgeObjectRelease();
  v8 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a1 + 5) = v8;
  swift_bridgeObjectRelease();
  v9 = type metadata accessor for ReplicatorRecord.ID(0);
  v10 = *(int *)(v9 + 28);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = sub_245443B14();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v19 = *(int *)(v9 + 32);
  v20 = &a1[v19];
  v21 = &a2[v19];
  v23 = *(_QWORD *)v21;
  v22 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v20 = v23;
  *((_QWORD *)v20 + 1) = v22;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v14 + 40))(&a1[*(int *)(a3 + 20)], &a2[*(int *)(a3 + 20)], v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorRecordVersion()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2453BAC24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for ReplicatorRecord.ID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_245443B14();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ReplicatorRecordVersion()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2453BACA4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for ReplicatorRecord.ID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_245443B14();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_2453BAD20()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for ReplicatorRecord.ID(319);
  if (v1 <= 0x3F)
  {
    result = sub_245443B14();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ReplicatorRecordVersion.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2453BADF0 + 4 * byte_245445735[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2453BAE24 + 4 * byte_245445730[v4]))();
}

uint64_t sub_2453BAE24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2453BAE2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2453BAE34);
  return result;
}

uint64_t sub_2453BAE40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2453BAE48);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2453BAE4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2453BAE54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorRecordVersion.CodingKeys()
{
  return &type metadata for ReplicatorRecordVersion.CodingKeys;
}

unint64_t sub_2453BAE74()
{
  unint64_t result;

  result = qword_2574647D0;
  if (!qword_2574647D0)
  {
    result = MEMORY[0x249534380](&unk_245445894, &type metadata for ReplicatorRecordVersion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574647D0);
  }
  return result;
}

unint64_t sub_2453BAEBC()
{
  unint64_t result;

  result = qword_25440E468;
  if (!qword_25440E468)
  {
    result = MEMORY[0x249534380](&unk_245445804, &type metadata for ReplicatorRecordVersion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E468);
  }
  return result;
}

unint64_t sub_2453BAF04()
{
  unint64_t result;

  result = qword_25440E460;
  if (!qword_25440E460)
  {
    result = MEMORY[0x249534380](&unk_24544582C, &type metadata for ReplicatorRecordVersion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E460);
  }
  return result;
}

uint64_t sub_2453BAF48(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_245444390();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t XPCInterfaceDomain.domain.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t XPCInterfaceDomain.domain.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*XPCInterfaceDomain.domain.modify())()
{
  return nullsub_1;
}

uint64_t XPCInterfaceDomain.machName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t XPCInterfaceDomain.machName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*XPCInterfaceDomain.machName.modify())()
{
  return nullsub_1;
}

ReplicatorServices::XPCInterfaceDomain __swiftcall XPCInterfaceDomain.init(domain:machName:)(Swift::String domain, Swift::String machName)
{
  Swift::String *v2;
  ReplicatorServices::XPCInterfaceDomain result;

  *v2 = domain;
  v2[1] = machName;
  result.machName = machName;
  result.domain = domain;
  return result;
}

void static XPCInterfaceDomain.replicatorServices.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000014;
  a1[1] = 0x800000024544DCB0;
  a1[2] = 0xD00000000000001CLL;
  a1[3] = 0x800000024544DCD0;
}

id BSServiceConnectionEndpoint.init<A>(definition:instance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v13;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 24))(&v13, a4, a5);
  swift_bridgeObjectRelease();
  v8 = (void *)sub_245443D78();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(a5 + 32))(a4, a5);
  v9 = (void *)sub_245443D78();
  swift_bridgeObjectRelease();
  if (a3)
  {
    v10 = (void *)sub_245443D78();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  v11 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_endpointForMachName_service_instance_, v8, v9, v10);

  return v11;
}

Swift::Void __swiftcall BSServiceConnectionListenerConfiguring.setDomain(_:)(ReplicatorServices::XPCInterfaceDomain a1)
{
  void *v1;
  id v2;

  v2 = (id)sub_245443D78();
  objc_msgSend(v1, sel_setDomain_, v2);

}

id BSServiceConnection.init<A>(endpointedDefinedBy:instance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v15[2];
  unint64_t v16;
  unint64_t v17;

  swift_bridgeObjectRelease();
  sub_2453BB414();
  v8 = BSServiceConnectionEndpoint.init<A>(definition:instance:)(a1, 0, 0, a4, a5);
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_connectionWithEndpoint_, v8);

    if (v10)
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2574647D8);
    v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_245445910;
    v15[0] = 0;
    v15[1] = 0xE000000000000000;
    sub_24544412C();
    swift_bridgeObjectRelease();
    v16 = 0xD000000000000025;
    v17 = 0x800000024544DCF0;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a5 + 24))(v15, a4, a5);
    swift_bridgeObjectRelease();
    sub_245443E14();
    swift_bridgeObjectRelease();
    v12 = v16;
    v13 = v17;
    *(_QWORD *)(v11 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v11 + 32) = v12;
    *(_QWORD *)(v11 + 40) = v13;
    sub_2454443FC();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v10;
}

unint64_t sub_2453BB414()
{
  unint64_t result;

  result = qword_2574638E0;
  if (!qword_2574638E0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2574638E0);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for XPCInterfaceDomain(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for XPCInterfaceDomain()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for XPCInterfaceDomain(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for XPCInterfaceDomain(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for XPCInterfaceDomain(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCInterfaceDomain(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCInterfaceDomain(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCInterfaceDomain()
{
  return &type metadata for XPCInterfaceDomain;
}

uint64_t dispatch thunk of static XPCInterfaceDefinition.domain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static XPCInterfaceDefinition.serviceName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ReplicatorServices::ReplicatorSchedule_optional __swiftcall ReplicatorSchedule.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (ReplicatorServices::ReplicatorSchedule_optional)rawValue;
}

uint64_t ReplicatorSchedule.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t sub_2453BB670()
{
  unint64_t result;

  result = qword_2574647E0;
  if (!qword_2574647E0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorSchedule, &type metadata for ReplicatorSchedule);
    atomic_store(result, (unint64_t *)&qword_2574647E0);
  }
  return result;
}

_QWORD *sub_2453BB6B4@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

uint64_t sub_2453BB6D4()
{
  sub_2453BB848();
  return sub_245443E68();
}

uint64_t sub_2453BB730()
{
  sub_2453BB848();
  return sub_245443E50();
}

uint64_t storeEnumTagSinglePayload for ReplicatorSchedule(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2453BB7C8 + 4 * byte_245445995[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2453BB7FC + 4 * asc_245445990[v4]))();
}

uint64_t sub_2453BB7FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2453BB804(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2453BB80CLL);
  return result;
}

uint64_t sub_2453BB818(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2453BB820);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2453BB824(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2453BB82C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorSchedule()
{
  return &type metadata for ReplicatorSchedule;
}

unint64_t sub_2453BB848()
{
  unint64_t result;

  result = qword_25440E980;
  if (!qword_25440E980)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorSchedule, &type metadata for ReplicatorSchedule);
    atomic_store(result, (unint64_t *)&qword_25440E980);
  }
  return result;
}

uint64_t ZoneDescriptor.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ZoneDescriptor.id.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ZoneDescriptor.id.modify())()
{
  return nullsub_1;
}

void ZoneDescriptor.publicationMethod.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

_BYTE *ZoneDescriptor.publicationMethod.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = *result;
  return result;
}

uint64_t (*ZoneDescriptor.publicationMethod.modify())()
{
  return nullsub_1;
}

void ZoneDescriptor.replicationPriority.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 17);
}

_BYTE *ZoneDescriptor.replicationPriority.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = *result;
  return result;
}

uint64_t (*ZoneDescriptor.replicationPriority.modify())()
{
  return nullsub_1;
}

__n128 ZoneDescriptor.protocolVersion.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 + 24);
  *a1 = result;
  return result;
}

uint64_t ZoneDescriptor.compressFiles.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t ZoneDescriptor.compressFiles.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = result;
  return result;
}

uint64_t (*ZoneDescriptor.compressFiles.modify())()
{
  return nullsub_1;
}

__n128 ZoneDescriptor.init(id:publicationMethod:replicationPriority:protocolVersion:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, char *a4@<X3>, __n128 *a5@<X4>, uint64_t a6@<X8>)
{
  char v6;
  char v7;
  __n128 result;

  v6 = *a3;
  v7 = *a4;
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_BYTE *)(a6 + 16) = v6;
  *(_BYTE *)(a6 + 17) = v7;
  result = *a5;
  *(__n128 *)(a6 + 24) = *a5;
  *(_BYTE *)(a6 + 40) = 0;
  return result;
}

__n128 ZoneDescriptor.init(id:publicationMethod:replicationPriority:protocolVersion:compressFiles:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, char *a4@<X3>, __n128 *a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  char v7;
  char v8;
  __n128 result;

  v7 = *a3;
  v8 = *a4;
  *(_QWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  *(_BYTE *)(a7 + 16) = v7;
  *(_BYTE *)(a7 + 17) = v8;
  result = *a5;
  *(__n128 *)(a7 + 24) = *a5;
  *(_BYTE *)(a7 + 40) = a6;
  return result;
}

uint64_t ZoneDescriptor.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  sub_245444438();
  sub_245444438();
  sub_245444438();
  sub_245444438();
  return sub_24544442C();
}

uint64_t ZoneDescriptor.hashValue.getter()
{
  sub_245444414();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  sub_245444438();
  sub_245444438();
  sub_245444438();
  sub_245444438();
  sub_24544442C();
  return sub_245444444();
}

uint64_t sub_2453BBB1C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2453BBB34()
{
  sub_245444414();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  sub_245444438();
  sub_245444438();
  sub_245444438();
  sub_245444438();
  sub_24544442C();
  return sub_245444444();
}

ReplicatorServices::ZoneDescriptor::CodingKeys_optional __swiftcall ZoneDescriptor.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  ReplicatorServices::ZoneDescriptor::CodingKeys_optional result;
  char v5;

  v2 = v1;
  v3 = sub_245444258();
  result.value = swift_bridgeObjectRelease();
  v5 = 5;
  if (v3 < 5)
    v5 = v3;
  *v2 = v5;
  return result;
}

ReplicatorServices::ZoneDescriptor::CodingKeys_optional __swiftcall ZoneDescriptor.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  _BYTE *v1;
  _BYTE *v2;
  ReplicatorServices::ZoneDescriptor::CodingKeys_optional result;
  char v4;

  v2 = v1;
  result.value = ZoneDescriptor.CodingKeys.init(rawValue:)(stringValue).value;
  *v2 = v4;
  return result;
}

ReplicatorServices::ZoneDescriptor::CodingKeys_optional __swiftcall ZoneDescriptor.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  _BYTE *v1;

  *v1 = 5;
  return (ReplicatorServices::ZoneDescriptor::CodingKeys_optional)intValue;
}

uint64_t ZoneDescriptor.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t ZoneDescriptor.CodingKeys.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2453BBCB4 + 4 * byte_245445AB0[*v0]))(25705, 0xE200000000000000);
}

unint64_t sub_2453BBCB4()
{
  return 0xD000000000000011;
}

unint64_t sub_2453BBCD0()
{
  return 0xD000000000000013;
}

uint64_t sub_2453BBCF0()
{
  return 0x6C6F636F746F7270;
}

uint64_t sub_2453BBD14()
{
  return 0x73736572706D6F63;
}

uint64_t ZoneDescriptor.CodingKeys.stringValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2453BBD5C + 4 * byte_245445AB5[*v0]))(25705, 0xE200000000000000);
}

unint64_t sub_2453BBD5C()
{
  return 0xD000000000000011;
}

unint64_t sub_2453BBD78()
{
  return 0xD000000000000013;
}

uint64_t sub_2453BBD98()
{
  return 0x6C6F636F746F7270;
}

uint64_t sub_2453BBDBC()
{
  return 0x73736572706D6F63;
}

void sub_2453BBDE0(char *a1)
{
  sub_24542B3C4(*a1);
}

void sub_2453BBDEC()
{
  char *v0;

  sub_24542AD24(*v0);
}

void sub_2453BBDF4(uint64_t a1)
{
  char *v1;

  sub_24542AFAC(a1, *v1);
}

void sub_2453BBDFC(uint64_t a1)
{
  char *v1;

  sub_24542B078(a1, *v1);
}

ReplicatorServices::ZoneDescriptor::CodingKeys_optional sub_2453BBE04(Swift::String *a1)
{
  return ZoneDescriptor.CodingKeys.init(rawValue:)(*a1);
}

uint64_t sub_2453BBE10@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ZoneDescriptor.CodingKeys.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

ReplicatorServices::ZoneDescriptor::CodingKeys_optional sub_2453BBE38@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  ReplicatorServices::ZoneDescriptor::CodingKeys_optional result;
  char v5;

  result.value = ZoneDescriptor.CodingKeys.init(rawValue:)(*(Swift::String *)&a1).value;
  *a2 = v5;
  return result;
}

void sub_2453BBE6C(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_2453BBE78()
{
  sub_2453BC440();
  return sub_245444468();
}

uint64_t sub_2453BBEA0()
{
  sub_2453BC440();
  return sub_245444474();
}

uint64_t ZoneDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440EC18);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2453BC440();
  sub_245444450();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v19) = 0;
  v9 = sub_2454442C4();
  v11 = v10;
  v22 = 1;
  sub_2453BC484();
  swift_bridgeObjectRetain();
  sub_2454442DC();
  v21 = v19;
  v22 = 2;
  sub_2453BC4C8();
  sub_2454442DC();
  v18 = v19;
  v22 = 3;
  sub_2453BC50C();
  sub_2454442DC();
  v16 = v20;
  v17 = v19;
  LOBYTE(v19) = 4;
  v13 = sub_245444288();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v11;
  *(_BYTE *)(a2 + 16) = v21;
  *(_BYTE *)(a2 + 17) = v18;
  v14 = v16;
  *(_QWORD *)(a2 + 24) = v17;
  *(_QWORD *)(a2 + 32) = v14;
  *(_BYTE *)(a2 + 40) = v13 & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t ZoneDescriptor.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_25440EC20) - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(unsigned __int8 *)(v1 + 16);
  v19 = *(unsigned __int8 *)(v1 + 17);
  v7 = *(_QWORD *)(v1 + 24);
  v17 = *(_QWORD *)(v1 + 32);
  v18 = v7;
  v16[1] = *(unsigned __int8 *)(v1 + 40);
  v8 = a1[3];
  v9 = a1;
  v11 = v10;
  __swift_project_boxed_opaque_existential_1(v9, v8);
  sub_2453BC440();
  sub_24544445C();
  LOBYTE(v20) = 0;
  sub_245444348();
  if (!v2)
  {
    v12 = v19;
    v14 = v17;
    v13 = v18;
    LOBYTE(v20) = v22;
    v23 = 1;
    sub_2453BC550();
    sub_245444360();
    LOBYTE(v20) = v12;
    v23 = 2;
    sub_2453BC594();
    sub_245444360();
    v20 = v13;
    v21 = v14;
    v23 = 3;
    sub_2453BC5D8();
    sub_245444360();
    LOBYTE(v20) = 4;
    sub_245444354();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v11);
}

uint64_t sub_2453BC34C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ZoneDescriptor.init(from:)(a1, a2);
}

uint64_t sub_2453BC360(_QWORD *a1)
{
  return ZoneDescriptor.encode(to:)(a1);
}

uint64_t _s18ReplicatorServices14ZoneDescriptorV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  char v13;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a1 + 17);
  v5 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v6 = *(unsigned __int8 *)(a1 + 40);
  v7 = *(unsigned __int8 *)(a2 + 16);
  v8 = *(unsigned __int8 *)(a2 + 17);
  v10 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v11 = *(unsigned __int8 *)(a2 + 40);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    result = 0;
    if ((v2 ^ v7) == 1)
      return result;
  }
  else
  {
    v13 = sub_245444390();
    result = 0;
    if ((v13 & 1) == 0 || v2 != v7)
      return result;
  }
  if (v3 == v8 && v5 == v10 && v4 == v9)
    return v6 ^ v11 ^ 1u;
  return result;
}

unint64_t sub_2453BC440()
{
  unint64_t result;

  result = qword_25440EB80;
  if (!qword_25440EB80)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ZoneDescriptor.CodingKeys, &type metadata for ZoneDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EB80);
  }
  return result;
}

unint64_t sub_2453BC484()
{
  unint64_t result;

  result = qword_25440EB50;
  if (!qword_25440EB50)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ZonePublicationMethod, &type metadata for ZonePublicationMethod);
    atomic_store(result, (unint64_t *)&qword_25440EB50);
  }
  return result;
}

unint64_t sub_2453BC4C8()
{
  unint64_t result;

  result = qword_25440EB58;
  if (!qword_25440EB58)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ZoneReplicationPriority, &type metadata for ZoneReplicationPriority);
    atomic_store(result, (unint64_t *)&qword_25440EB58);
  }
  return result;
}

unint64_t sub_2453BC50C()
{
  unint64_t result;

  result = qword_25440EB30;
  if (!qword_25440EB30)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorProtocolVersion, &type metadata for ReplicatorProtocolVersion);
    atomic_store(result, (unint64_t *)&qword_25440EB30);
  }
  return result;
}

unint64_t sub_2453BC550()
{
  unint64_t result;

  result = qword_25440E9C8;
  if (!qword_25440E9C8)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ZonePublicationMethod, &type metadata for ZonePublicationMethod);
    atomic_store(result, (unint64_t *)&qword_25440E9C8);
  }
  return result;
}

unint64_t sub_2453BC594()
{
  unint64_t result;

  result = qword_25440E9D8;
  if (!qword_25440E9D8)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ZoneReplicationPriority, &type metadata for ZoneReplicationPriority);
    atomic_store(result, (unint64_t *)&qword_25440E9D8);
  }
  return result;
}

unint64_t sub_2453BC5D8()
{
  unint64_t result;

  result = qword_25440E920;
  if (!qword_25440E920)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorProtocolVersion, &type metadata for ReplicatorProtocolVersion);
    atomic_store(result, (unint64_t *)&qword_25440E920);
  }
  return result;
}

uint64_t sub_2453BC61C()
{
  return MEMORY[0x24BEE0D10];
}

unint64_t sub_2453BC62C()
{
  unint64_t result;

  result = qword_2574647E8;
  if (!qword_2574647E8)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ZoneDescriptor, &type metadata for ZoneDescriptor);
    atomic_store(result, (unint64_t *)&qword_2574647E8);
  }
  return result;
}

unint64_t sub_2453BC674()
{
  unint64_t result;

  result = qword_2574647F0;
  if (!qword_2574647F0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ZoneDescriptor.CodingKeys, &type metadata for ZoneDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574647F0);
  }
  return result;
}

unint64_t sub_2453BC6BC()
{
  unint64_t result;

  result = qword_25440EB90;
  if (!qword_25440EB90)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ZoneDescriptor.CodingKeys, &type metadata for ZoneDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EB90);
  }
  return result;
}

unint64_t sub_2453BC704()
{
  unint64_t result;

  result = qword_25440EB88;
  if (!qword_25440EB88)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ZoneDescriptor.CodingKeys, &type metadata for ZoneDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EB88);
  }
  return result;
}

uint64_t destroy for ZoneDescriptor()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ZoneDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ZoneDescriptor(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ZoneDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ZoneDescriptor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ZoneDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ZoneDescriptor()
{
  return &type metadata for ZoneDescriptor;
}

uint64_t getEnumTagSinglePayload for ZoneDescriptor.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ZoneDescriptor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_2453BC9F8 + 4 * byte_245445ABF[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_2453BCA2C + 4 * byte_245445ABA[v4]))();
}

uint64_t sub_2453BCA2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2453BCA34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2453BCA3CLL);
  return result;
}

uint64_t sub_2453BCA48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2453BCA50);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_2453BCA54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2453BCA5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ZoneDescriptor.CodingKeys()
{
  return &type metadata for ZoneDescriptor.CodingKeys;
}

uint64_t dispatch thunk of ReplicatorClientRegistering.isRegistered.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ReplicatorClientRegistering.registrationUpdates.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ReplicatorClientRegistering.register()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ReplicatorClientRegistering.unregister()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_2453BCAB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = type metadata accessor for ReplicatorDevice(0);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(*(_QWORD *)(v0
                              + OBJC_IVAR____TtC18ReplicatorServices33ReplicatorControlClientObjcBridge_controlClient)
                  + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_singleton);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB00);
  sub_245444030();
  v5 = v21;
  v6 = *(_QWORD *)(v21 + 16);
  if (v6)
  {
    v21 = MEMORY[0x24BEE4AF8];
    sub_2454441A4();
    v7 = v5 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v8 = *(_QWORD *)(v2 + 72);
    v16 = v5;
    v17 = v8;
    v18 = v1;
    do
    {
      sub_2453BD9C8(v7, (uint64_t)v4);
      v19 = qword_245445DC0[v4[*(int *)(v1 + 32)]];
      v9 = objc_allocWithZone((Class)RPLReplicatorDevice);
      swift_bridgeObjectRetain();
      v10 = (void *)sub_245443AE4();
      v11 = (void *)sub_245443AE4();
      v12 = (void *)sub_245443D78();
      swift_bridgeObjectRelease();
      v13 = (void *)sub_245443A84();
      objc_msgSend(v9, sel_initWithDeviceID_relationshipID_name_deviceType_initialDiscoveryDate_, v10, v11, v12, v19, v13, v16);

      v1 = v18;
      sub_2453BDA0C((uint64_t)v4);
      sub_245444180();
      sub_2454441B0();
      sub_2454441BC();
      sub_24544418C();
      v7 += v17;
      --v6;
    }
    while (v6);
    v14 = v21;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  return v14;
}

uint64_t sub_2453BCD40()
{
  return sub_2453BCF88();
}

void sub_2453BCD58(Swift::Bool a1)
{
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  id v8;
  NSObject *oslog;
  uint64_t v10;

  ReplicatorControlClient.setEnabled(_:)(a1);
  if (v1)
  {
    if (qword_257463BF8 != -1)
      swift_once();
    v2 = sub_245443C04();
    __swift_project_value_buffer(v2, (uint64_t)qword_257463BE0);
    v3 = v1;
    v4 = v1;
    oslog = sub_245443BEC();
    v5 = sub_245443FE8();
    if (os_log_type_enabled(oslog, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v6 = 138543362;
      v8 = v1;
      v10 = _swift_stdlib_bridgeErrorToNSError();
      sub_245444078();
      *v7 = v10;

      _os_log_impl(&dword_2453B6000, oslog, v5, "Could not set replicator enabled state: %{public}@", v6, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_257464800);
      swift_arrayDestroy();
      MEMORY[0x249534440](v7, -1, -1);
      MEMORY[0x249534440](v6, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_2453BCF7C()
{
  return sub_2453BCF88();
}

uint64_t sub_2453BCF88()
{
  unsigned __int8 v1;

  sub_245444030();
  return v1;
}

uint64_t sub_2453BD000(void *a1)
{
  id v1;
  unsigned __int8 v3;

  v1 = a1;
  sub_245444030();

  return v3;
}

uint64_t sub_2453BD080()
{
  uint64_t result;
  uint64_t v1;

  sub_245444030();
  result = 0;
  if (v1 == 1)
  {
    MEMORY[0x24BDAC7A8](0);
    __swift_instantiateConcreteTypeFromMangledName(&qword_257464808);
    sub_245444030();
    return v1;
  }
  return result;
}

void sub_2453BD1C0(Swift::OpaquePointer a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;

  if (a1._rawValue)
  {
    sub_245444030();
    ReplicatorControlClient.setAllowList(idsIDs:)(a1);
    if (v2)
    {
      if (qword_257463BF8 != -1)
        swift_once();
      v3 = sub_245443C04();
      __swift_project_value_buffer(v3, (uint64_t)qword_257463BE0);
      v4 = v2;
      v5 = v2;
      v6 = sub_245443BEC();
      v7 = sub_245443FE8();
      if (os_log_type_enabled(v6, v7))
      {
        v8 = (uint8_t *)swift_slowAlloc();
        v9 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v8 = 138543362;
        v10 = v2;
        v11 = _swift_stdlib_bridgeErrorToNSError();
        sub_245444078();
        *v9 = v11;

        _os_log_impl(&dword_2453B6000, v6, v7, "Could not set replicator allow list: %{public}@", v8, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_257464800);
        swift_arrayDestroy();
        MEMORY[0x249534440](v9, -1, -1);
        MEMORY[0x249534440](v8, -1, -1);

      }
      else
      {

      }
    }
  }
  else
  {
    sub_245444030();
  }
}

uint64_t sub_2453BD478()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_245443B14();
  MEMORY[0x24BDAC7A8](v0);
  sub_245444030();
  return v2;
}

id ReplicatorControlClientObjcBridge.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id ReplicatorControlClientObjcBridge.init()()
{
  char *v0;
  uint64_t v1;
  char *v2;
  objc_super v4;

  v1 = OBJC_IVAR____TtC18ReplicatorServices33ReplicatorControlClientObjcBridge_controlClient;
  type metadata accessor for ReplicatorControlClient();
  swift_allocObject();
  v2 = v0;
  *(_QWORD *)&v0[v1] = ReplicatorControlClient.init()();

  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for ReplicatorControlClientObjcBridge();
  return objc_msgSendSuper2(&v4, sel_init);
}

id ReplicatorControlClientObjcBridge.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ReplicatorControlClientObjcBridge();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_2453BD9B0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_24541B2C4(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_2453BD9C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReplicatorDevice(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2453BDA0C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ReplicatorDevice(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_2453BDA48(_BYTE *a1@<X8>)
{
  uint64_t v1;

  sub_24541E434(*(_QWORD *)(v1 + 16), a1);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_2453BDA78@<X0>(_BYTE *a1@<X8>)
{
  return sub_24541DA08(a1);
}

uint64_t sub_2453BDA90@<X0>(uint64_t *a1@<X8>)
{
  return sub_24541DEA8(a1);
}

uint64_t sub_2453BDAA8()
{
  uint64_t v0;

  return sub_24541D5D8(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_2453BDAC4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_24541C5D8(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_2453BDADC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257464D40;
  if (!qword_257464D40)
  {
    v1 = sub_245443B14();
    result = MEMORY[0x249534380](MEMORY[0x24BDCEAB8], v1);
    atomic_store(result, (unint64_t *)&qword_257464D40);
  }
  return result;
}

uint64_t sub_2453BDB24(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_2453BDD78(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_2453BDF30((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_2453BDF30((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t type metadata accessor for ReplicatorControlClientObjcBridge()
{
  return objc_opt_self();
}

uint64_t method lookup function for ReplicatorControlClientObjcBridge()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ReplicatorControlClientObjcBridge.devices()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x58))();
}

uint64_t dispatch thunk of ReplicatorControlClientObjcBridge.isEnabled()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ReplicatorControlClientObjcBridge.setEnabled(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of ReplicatorControlClientObjcBridge.isAllowListEnabled()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of ReplicatorControlClientObjcBridge.allowList()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ReplicatorControlClientObjcBridge.setAllowList(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of ReplicatorControlClientObjcBridge.pushToken(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t sub_2453BDCE4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_2453BDCF8(a1, a2);
  return a1;
}

uint64_t sub_2453BDCF8(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

unint64_t sub_2453BDD3C()
{
  unint64_t result;

  result = qword_257464810;
  if (!qword_257464810)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_257464810);
  }
  return result;
}

uint64_t sub_2453BDD78(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_245444084();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_2453BDF6C(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_245444174();
  if (!v8)
  {
    sub_2454441F8();
    __break(1u);
LABEL_17:
    result = sub_245444234();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_2453BDF30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_2453BDF6C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_2453BE000(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_2453BE1D8(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_2453BE1D8(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_2453BE000(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_2453BE174(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_245444138();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_2454441F8();
      __break(1u);
LABEL_10:
      v2 = sub_245443E20();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_245444234();
    __break(1u);
LABEL_14:
    result = sub_2454441F8();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_2453BE174(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E328);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_2453BE1D8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25440E328);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_245444234();
  __break(1u);
  return result;
}

uint64_t sub_2453BE328@<X0>(_BYTE *a1@<X8>)
{
  return sub_2453BDA78(a1);
}

void sub_2453BE33C(_BYTE *a1@<X8>)
{
  sub_2453BDA48(a1);
}

uint64_t sub_2453BE350()
{
  return sub_2453BDAA8();
}

uint64_t sub_2453BE364(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char *v21;
  void (*v22)(char *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38[32];
  uint64_t v39;

  v27 = a5;
  v28 = a8;
  v33 = a1;
  v34 = a2;
  v26 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v35 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v31 = (char *)&v24 - v13;
  v36 = a4;
  MEMORY[0x24BDAC7A8](v12);
  v30 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v24 - v16;
  v18 = sub_245443FA0();
  if (!v18)
    return sub_245443EC8();
  v19 = v18;
  v25 = v15;
  v39 = sub_245443D00();
  v32 = sub_2454441E0();
  sub_245444198();
  v36 = v17;
  result = sub_245443F94();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    v21 = v31;
    while (1)
    {
      v22 = (void (*)(char *, _QWORD))sub_245443FB8();
      (*(void (**)(char *))(v11 + 16))(v21);
      v22(v38, 0);
      v23 = v37;
      v33(v21, v35);
      if (v23)
        break;
      v37 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
      sub_2454441C8();
      sub_245443FAC();
      if (!--v19)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
        return v39;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v28, v35, v27);
  }
  return result;
}

uint64_t sub_2453BE640()
{
  uint64_t *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v4;

  v1 = v0[30];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  sub_245443D30();
  v2 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(_QWORD *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v2);
  sub_2453BE710(v0);
  os_unfair_lock_unlock(v2);
  return v4;
}

uint64_t sub_2453BE710(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *a1;
  swift_beginAccess();
  v4 = v1 + 80;
  v3 = *(_QWORD *)(v1 + 80);
  v2 = *(_QWORD *)(v4 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_bridgeObjectRetain();
  sub_245443CF4();
  type metadata accessor for ReplicatorStore.Entry(255, v3, v2, v5);
  v6 = sub_245443D30();
  sub_245443D30();
  MEMORY[0x249534380](MEMORY[0x24BEE04D8], v6);
  sub_245443E44();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2453BE86C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(void);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  v40 = a1;
  v7 = sub_24544406C();
  MEMORY[0x24BDAC7A8](v7);
  v8 = *(_QWORD *)(a4 + 24);
  v38 = (char *)&v33 - v9;
  v39 = v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for ReplicatorStore.Entry(255, a3, a4, v11);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v14 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = *(int *)(TupleTypeMetadata2 + 48);
  v19 = (char *)&v33 + v18 - v17;
  v35 = (char *)&v33 - v17;
  v36 = v19;
  v33 = a2;
  v20 = a2 + v18;
  v37 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v21 = *(void (**)(void))(v37 + 16);
  v21();
  v22 = v12;
  v23 = *(_QWORD *)(v12 - 8);
  v24 = *(void (**)(char *, uint64_t))(v23 + 16);
  v25 = v19;
  v26 = v22;
  v24(v25, v20);
  v27 = *(int *)(TupleTypeMetadata2 + 48);
  v34 = v16;
  v28 = &v16[v27];
  ((void (*)(char *, uint64_t, uint64_t))v21)(v16, v33, AssociatedTypeWitness);
  ((void (*)(char *, uint64_t, uint64_t))v24)(v28, v20, v26);
  v29 = *(_QWORD *)(a3 - 8);
  v30 = v38;
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v38, v28, a3);
  v31 = *(void (**)(char *, uint64_t))(v23 + 8);
  v31(v28, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v30, 0, 1, a3);
  swift_getAssociatedConformanceWitness();
  sub_245443D30();
  sub_245443D48();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v34, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))v31)(v36, v26);
}

uint64_t sub_2453BEABC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464540);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReplicatorRecord.Value(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_2453D055C(a1, &qword_257464540);
    v13 = sub_2453C653C(a2);
    if ((v14 & 1) != 0)
    {
      v15 = v13;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v17 = *v3;
      v22 = *v3;
      *v3 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_2453CA058();
        v17 = v22;
      }
      sub_2453D062C(*(_QWORD *)(v17 + 56) + *(_QWORD *)(v10 + 72) * v15, (uint64_t)v8, type metadata accessor for ReplicatorRecord.Value);
      sub_245420330(v15, v17);
      *v3 = v17;
      swift_bridgeObjectRelease();
      v18 = 0;
    }
    else
    {
      v18 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v18, 1, v9);
    return sub_2453D055C((uint64_t)v8, &qword_257464540);
  }
  else
  {
    sub_2453D062C(a1, (uint64_t)v12, type metadata accessor for ReplicatorRecord.Value);
    v19 = swift_isUniquelyReferenced_nonNull_native();
    v22 = *v3;
    *v3 = 0x8000000000000000;
    sub_2453C8E78((uint64_t)v12, a2, v19);
    *v3 = v22;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_2453BEC94(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464548);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReplicatorRecord(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    sub_2453D055C(a1, &qword_257464548);
    sub_2453C639C(a2, (uint64_t)v8);
    sub_2453BA3A8((uint64_t)a2, type metadata accessor for ReplicatorRecord.ID);
    return sub_2453D055C((uint64_t)v8, &qword_257464548);
  }
  else
  {
    sub_2453D062C(a1, (uint64_t)v11, type metadata accessor for ReplicatorRecord);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = *v3;
    *v3 = 0x8000000000000000;
    sub_2453C9144((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v16;
    swift_bridgeObjectRelease();
    return sub_2453BA3A8((uint64_t)a2, type metadata accessor for ReplicatorRecord.ID);
  }
}

uint64_t sub_2453BEDFC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E1A0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_245443A24();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_2453D055C(a1, &qword_25440E1A0);
    v13 = sub_2453C653C(a2);
    if ((v14 & 1) != 0)
    {
      v15 = v13;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v17 = *v3;
      v22 = *v3;
      *v3 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_2453CB3DC();
        v17 = v22;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v8, *(_QWORD *)(v17 + 56) + *(_QWORD *)(v10 + 72) * v15, v9);
      sub_245420EDC(v15, v17);
      *v3 = v17;
      swift_bridgeObjectRelease();
      v18 = 0;
    }
    else
    {
      v18 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v18, 1, v9);
    return sub_2453D055C((uint64_t)v8, &qword_25440E1A0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    v19 = swift_isUniquelyReferenced_nonNull_native();
    v22 = *v3;
    *v3 = 0x8000000000000000;
    sub_2453C9410((uint64_t)v12, a2, v19);
    *v3 = v22;
    return swift_bridgeObjectRelease();
  }
}

_QWORD *ReplicatorStore.__allocating_init(replicator:zoneDescriptor:coder:recordIDProvider:recordVersionProvider:recordValueProvider:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v17;

  swift_allocObject();
  v17 = sub_2453CB5FC(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  swift_release();
  swift_release();
  swift_release();
  return v17;
}

_QWORD *ReplicatorStore.init(replicator:zoneDescriptor:coder:recordIDProvider:recordVersionProvider:recordValueProvider:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  v9 = sub_2453CB5FC(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  swift_release();
  swift_release();
  swift_release();
  return v9;
}

uint64_t sub_2453BF0F0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v4 = *v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464570);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_245443F1C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = swift_allocObject();
  swift_weakInit();
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = *(_QWORD *)(v4 + 80);
  v10[5] = *(_QWORD *)(v4 + 88);
  v10[6] = v9;
  sub_2453C3C80((uint64_t)v7, a2, (uint64_t)v10);
  return swift_release();
}

void sub_2453BF1E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_unfair_lock_s *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  id v70;
  id v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  _QWORD *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  uint64_t v80;
  int64_t v81;
  uint64_t v82;
  int64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v5 = v4;
  v6 = type metadata accessor for ReplicatorStore.Entry(255, *(_QWORD *)(*v4 + 80), *(_QWORD *)(*v4 + 88), a4);
  v7 = sub_24544406C();
  v87 = *(_QWORD *)(v7 - 8);
  v88 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v93 = (char *)&v78 - v9;
  v94 = v6;
  v95 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v86 = (char *)&v78 - v10;
  v11 = type metadata accessor for ReplicatorRecord(0);
  v92 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v96 = (uint64_t)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ReplicatorRecord.ID(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464528);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v78 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E1A0);
  MEMORY[0x24BDAC7A8](v23);
  v85 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = v5[5];
  v26 = v5[10];
  __swift_project_boxed_opaque_existential_1(v5 + 2, v25);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 56))(v25, v26);
  v89 = v14;
  v90 = v22;
  v84 = v20;
  v91 = v16;
  v28 = sub_2453C2C78((void (*)(uint64_t))sub_2453D0410, (uint64_t)v5, v27);
  swift_bridgeObjectRelease();
  v29 = v5[5];
  v30 = v5[10];
  __swift_project_boxed_opaque_existential_1(v5 + 2, v29);
  v31 = sub_245443A24();
  v32 = (uint64_t)v85;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v85, 1, 1, v31);
  v33 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v30 + 40))(v28, v32, v5[15], 0, v29, v30);
  v34 = (uint64_t)v5;
  sub_2453D055C(v32, &qword_25440E1A0);
  swift_bridgeObjectRelease();
  v35 = 0;
  v85 = (char *)v33;
  v38 = *(_QWORD *)(v33 + 64);
  v37 = v33 + 64;
  v36 = v38;
  v39 = 1 << *(_BYTE *)(v37 - 32);
  v40 = -1;
  if (v39 < 64)
    v40 = ~(-1 << v39);
  v41 = v40 & v36;
  v82 = v37;
  v83 = (unint64_t)(v39 + 63) >> 6;
  v81 = v83 - 5;
  v79 = v83 - 1;
  v80 = v37 + 40;
  v42 = (uint64_t *)&unk_257464520;
  v43 = v94;
  v44 = (uint64_t)v91;
  v45 = (uint64_t)v84;
  if ((v40 & v36) == 0)
    goto LABEL_8;
LABEL_6:
  v49 = __clz(__rbit64(v41));
  v41 &= v41 - 1;
  v50 = v49 | (v35 << 6);
  v51 = v85;
LABEL_7:
  sub_2453BA364(*((_QWORD *)v51 + 6) + *(_QWORD *)(v89 + 72) * v50, v45, type metadata accessor for ReplicatorRecord.ID);
  v52 = *((_QWORD *)v51 + 7) + *(_QWORD *)(v92 + 72) * v50;
  v53 = __swift_instantiateConcreteTypeFromMangledName(v42);
  sub_2453BA364(v52, v45 + *(int *)(v53 + 48), type metadata accessor for ReplicatorRecord);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v45, 0, 1, v53);
  v43 = v94;
  v54 = (uint64_t)v90;
  while (1)
  {
    sub_2453D0428(v45, v54, &qword_257464528);
    v58 = v42;
    v59 = __swift_instantiateConcreteTypeFromMangledName(v42);
    v60 = v54;
    v61 = v59;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 48))(v60, 1, v59) == 1)
    {
      swift_release();
      return;
    }
    v62 = v60 + *(int *)(v61 + 48);
    sub_2453D062C(v60, v44, type metadata accessor for ReplicatorRecord.ID);
    v63 = v62;
    v64 = v96;
    sub_2453D062C(v63, v96, type metadata accessor for ReplicatorRecord);
    v65 = v93;
    sub_2453C5350(v64, v93);
    v66 = v95;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v65, 1, v43) == 1)
    {
      sub_2453BA3A8(v96, type metadata accessor for ReplicatorRecord);
      v67 = (uint64_t)v91;
      sub_2453BA3A8((uint64_t)v91, type metadata accessor for ReplicatorRecord.ID);
      v68 = v65;
      v44 = v67;
      (*(void (**)(char *, uint64_t))(v87 + 8))(v68, v88);
      v42 = v58;
      if (v41)
        goto LABEL_6;
    }
    else
    {
      v46 = (uint64_t)v86;
      (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v86, v65, v43);
      v47 = (os_unfair_lock_s *)(*(_QWORD *)(v34 + 240) + 16);
      os_unfair_lock_lock(v47);
      v44 = (uint64_t)v91;
      sub_2453C6008(v34, v46, (uint64_t)v91);
      os_unfair_lock_unlock(v47);
      v43 = v94;
      sub_2453BA3A8(v96, type metadata accessor for ReplicatorRecord);
      v48 = v46;
      v45 = (uint64_t)v84;
      (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v48, v43);
      sub_2453BA3A8(v44, type metadata accessor for ReplicatorRecord.ID);
      v42 = v58;
      if (v41)
        goto LABEL_6;
    }
LABEL_8:
    v55 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v55 >= v83)
      goto LABEL_16;
    v56 = *(_QWORD *)(v82 + 8 * v55);
    if (v56)
      goto LABEL_11;
    if (v35 + 2 >= v83)
    {
      ++v35;
LABEL_16:
      v54 = (uint64_t)v90;
      goto LABEL_17;
    }
    v56 = *(_QWORD *)(v82 + 8 * (v35 + 2));
    if (v56)
    {
      v55 = v35 + 2;
LABEL_11:
      v51 = v85;
      v41 = (v56 - 1) & v56;
      v50 = __clz(__rbit64(v56)) + (v55 << 6);
      v35 = v55;
      goto LABEL_7;
    }
    if (v35 + 3 >= v83)
    {
      v35 += 2;
      goto LABEL_16;
    }
    v56 = *(_QWORD *)(v82 + 8 * (v35 + 3));
    if (v56)
    {
      v55 = v35 + 3;
      goto LABEL_11;
    }
    v55 = v35 + 4;
    if (v35 + 4 >= v83)
    {
      v35 += 3;
      goto LABEL_16;
    }
    v56 = *(_QWORD *)(v82 + 8 * v55);
    if (v56)
      goto LABEL_11;
    v54 = (uint64_t)v90;
    while (v81 != v35)
    {
      v56 = *(_QWORD *)(v80 + 8 * v35++);
      if (v56)
      {
        v55 = v35 + 4;
        goto LABEL_11;
      }
    }
    v35 = v79;
LABEL_17:
    v57 = __swift_instantiateConcreteTypeFromMangledName(v42);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v45, 1, 1, v57);
    v41 = 0;
  }
  __break(1u);
  swift_once();
  v69 = sub_245443C04();
  __swift_project_value_buffer(v69, (uint64_t)qword_25440EBF8);
  v70 = 0;
  v71 = 0;
  v72 = sub_245443BEC();
  v73 = sub_245443FE8();
  if (os_log_type_enabled(v72, v73))
  {
    v74 = (uint8_t *)swift_slowAlloc();
    v75 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v74 = 138543362;
    v76 = 0;
    v77 = _swift_stdlib_bridgeErrorToNSError();
    v97 = v77;
    sub_245444078();
    *v75 = v77;

    _os_log_impl(&dword_2453B6000, v72, v73, "Could not fetch initial record set: %{public}@", v74, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_257464800);
    swift_arrayDestroy();
    MEMORY[0x249534440](v75, -1, -1);
    MEMORY[0x249534440](v74, -1, -1);

  }
  else
  {

  }
}

void sub_2453BF9E8(uint64_t a1)
{
  sub_2453C0258(a1, (void (*)(_QWORD *, uint64_t))sub_2453BFA04);
}

uint64_t sub_2453BFA04@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v30 = a2;
  v31 = a3;
  v4 = *a1;
  v28 = type metadata accessor for ReplicatorRecord(0);
  MEMORY[0x24BDAC7A8](v28);
  v29 = (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ReplicatorStore.Entry(255, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), v6);
  v8 = sub_24544406C();
  v26 = *(_QWORD *)(v8 - 8);
  v27 = v8;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v25 - v10;
  v12 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v25 - v13;
  swift_beginAccess();
  v15 = a1[31];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_bridgeObjectRetain();
  MEMORY[0x249533744](v30, v15, AssociatedTypeWitness, v7, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v27);
    v18 = sub_245443B14();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v31, 1, 1, v18);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v11, v7);
    v20 = v29;
    sub_2453BA364((uint64_t)&v14[*(int *)(v7 + 36)], v29, type metadata accessor for ReplicatorRecord);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v7);
    v21 = v20 + *(int *)(v28 + 20);
    v22 = sub_245443B14();
    v23 = *(_QWORD *)(v22 - 8);
    v24 = v31;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v31, v21, v22);
    sub_2453BA3A8(v20, type metadata accessor for ReplicatorRecord);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v24, 0, 1, v22);
  }
}

void sub_2453BFC88(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;

  v6 = v5;
  v12 = v5[5];
  v13 = v5[7];
  __swift_project_boxed_opaque_existential_1(v5 + 2, v12);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13) & 1) != 0)
  {
    v14 = (os_unfair_lock_s *)(v5[30] + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(v6[30] + 16));
    sub_2453BFE38(v6, a1, a2, a3 & 1, a4, a5);
    os_unfair_lock_unlock(v14);
  }
  else
  {
    if (qword_25440EC10 != -1)
      swift_once();
    v15 = sub_245443C04();
    __swift_project_value_buffer(v15, (uint64_t)qword_25440EBF8);
    v16 = sub_245443BEC();
    v17 = sub_245443FE8();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_2453B6000, v16, v17, "Client is not registered", v18, 2u);
      MEMORY[0x249534440](v18, -1, -1);
    }

    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v19 = 2;
    *(_QWORD *)(v19 + 8) = 0;
    swift_willThrow();
  }
}

uint64_t sub_2453BFE38@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v49 = a5;
  v50 = a6;
  v48 = a4;
  v51 = a3;
  v52 = a2;
  v7 = type metadata accessor for ReplicatorStore.Entry(255, *(_QWORD *)(*a1 + 80), *(_QWORD *)(*a1 + 88), a4);
  v8 = sub_24544406C();
  v46 = *(_QWORD *)(v8 - 8);
  v47 = v8;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v44 - v10;
  v12 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v45 = (char *)&v44 - v13;
  swift_beginAccess();
  v14 = a1[31];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_bridgeObjectRetain();
  MEMORY[0x249533744](v52, v14, AssociatedTypeWitness, v7, AssociatedConformanceWitness);
  v17 = v7;
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v47);
    v18 = sub_245443A24();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v50, 1, 1, v18);
  }
  v52 = v12;
  v20 = v45;
  (*(void (**)(void))(v12 + 32))();
  if ((v48 & 1) != 0)
    v51 = a1[15];
  v21 = a1[5];
  v22 = a1[10];
  __swift_project_boxed_opaque_existential_1(a1 + 2, v21);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E250);
  v23 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ReplicatorRecord.ID(0) - 8) + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_245445910;
  v26 = &v20[*(int *)(v17 + 36)];
  sub_2453BA364((uint64_t)v26, v25 + v24, type metadata accessor for ReplicatorRecord.ID);
  v27 = v53;
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 48))(v25, v49, v51, 0, v21, v22);
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v52 + 8))(v20, v17);
    return swift_bridgeObjectRelease();
  }
  v29 = v28;
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v29 + 16) || (v30 = sub_2453C656C(v26), (v31 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v20, v17);
    v40 = sub_245443A24();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v50, 1, 1, v40);
  }
  v32 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 8 * v30);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v32 + 16))
  {
    v41 = sub_245443A24();
    v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56);
    v43 = v50;
LABEL_15:
    v42(v43, 1, 1, v41);
    goto LABEL_16;
  }
  v33 = sub_2453C653C(v51);
  v34 = v50;
  if ((v35 & 1) == 0)
  {
    v41 = sub_245443A24();
    v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56);
    v43 = v34;
    goto LABEL_15;
  }
  v36 = v33;
  v37 = *(_QWORD *)(v32 + 56);
  v38 = sub_245443A24();
  v39 = *(_QWORD *)(v38 - 8);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v39 + 16))(v34, v37 + *(_QWORD *)(v39 + 72) * v36, v38);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v34, 0, 1, v38);
LABEL_16:
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v20, v17);
}

void sub_2453C023C(uint64_t a1)
{
  sub_2453C0258(a1, (void (*)(_QWORD *, uint64_t))sub_2453C03F8);
}

void sub_2453C0258(uint64_t a1, void (*a2)(_QWORD *, uint64_t))
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;

  v5 = v2;
  v7 = v2[5];
  v8 = v2[7];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v7);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8) & 1) != 0)
  {
    v9 = (os_unfair_lock_s *)(v2[30] + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(v5[30] + 16));
    a2(v5, a1);
    os_unfair_lock_unlock(v9);
    if (v3)
      __break(1u);
  }
  else
  {
    if (qword_25440EC10 != -1)
      swift_once();
    v10 = sub_245443C04();
    __swift_project_value_buffer(v10, (uint64_t)qword_25440EBF8);
    v11 = sub_245443BEC();
    v12 = sub_245443FE8();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_2453B6000, v11, v12, "Client is not registered", v13, 2u);
      MEMORY[0x249534440](v13, -1, -1);
    }

    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v14 = 2;
    *(_QWORD *)(v14 + 8) = 0;
    swift_willThrow();
  }
}

uint64_t sub_2453C03F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a2;
  v24 = a4;
  v5 = type metadata accessor for ReplicatorStore.Entry(255, *(_QWORD *)(*a1 + 80), *(_QWORD *)(*a1 + 88), a3);
  v6 = sub_24544406C();
  v21 = *(_QWORD *)(v6 - 8);
  v22 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v20 - v8;
  v10 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v20 - v11;
  swift_beginAccess();
  v13 = a1[31];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_bridgeObjectRetain();
  MEMORY[0x249533744](v23, v13, AssociatedTypeWitness, v5, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v22);
    v16 = type metadata accessor for ReplicatorRecord(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v24, 1, 1, v16);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v9, v5);
    v18 = v24;
    sub_2453BA364((uint64_t)&v12[*(int *)(v5 + 36)], v24, type metadata accessor for ReplicatorRecord);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v5);
    v19 = type metadata accessor for ReplicatorRecord(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 0, 1, v19);
  }
}

uint64_t sub_2453C0604(uint64_t a1, uint64_t *a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E420);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a3;
  v13 = *a2;
  HIBYTE(v12) = v9;
  v10 = sub_245443AC0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 1, 1, v10);
  sub_2453C06E0(a1, &v13, (unsigned __int8 *)&v12 + 7, (uint64_t)v8);
  return sub_2453D055C((uint64_t)v8, (uint64_t *)&unk_25440E420);
}

uint64_t sub_2453C06E0(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *boxed_opaque_existential_2;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, __int128 *, unint64_t);
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  BOOL v71;
  uint64_t v72;
  void (*v73)(uint64_t, __int128 *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  char v81;
  unint64_t v82;
  uint64_t v83;
  _BOOL8 v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t (*v93)(uint64_t);
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t);
  int isUniquelyReferenced_nonNull_native;
  char v101;
  unint64_t v102;
  uint64_t v103;
  _BOOL8 v104;
  uint64_t v105;
  char v106;
  unint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  __int128 v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  void (*v156)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v157;
  char *v158;
  __int128 v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(uint64_t, __int128 *, unint64_t);
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  __int128 v172;
  _BYTE v173[24];
  int v174;
  char v175;

  v5 = v4;
  v140 = a4;
  v166 = a1;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E420);
  MEMORY[0x24BDAC7A8](v8);
  v143 = (uint64_t)&v137 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = type metadata accessor for ReplicatorRecord(0);
  v144 = *(_QWORD *)(v142 - 8);
  v10 = MEMORY[0x24BDAC7A8](v142);
  v141 = (char *)&v137 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v137 - v12;
  v14 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x24BDAC7A8](v14);
  v148 = (char *)&v137 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ReplicatorRecord.ID(0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v139 = (uint64_t)&v137 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v149 = (char *)&v137 - v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_257463C90);
  MEMORY[0x24BDAC7A8](v20);
  *(_QWORD *)&v167 = (char *)&v137 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = (void (*)(uint64_t, __int128 *, unint64_t))type metadata accessor for ReplicatorDevice(0);
  v162 = *((_QWORD *)v163 - 1);
  MEMORY[0x24BDAC7A8](v163);
  v160 = (unint64_t)&v137 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_245443B14();
  v161 = *(_QWORD *)(v23 - 8);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v145 = (char *)&v137 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v146 = (char *)&v137 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v155 = (char *)&v137 - v28;
  v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v137 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for ReplicatorRecord.Value(0);
  v165 = *(_QWORD *)(v32 - 8);
  v33 = MEMORY[0x24BDAC7A8](v32);
  v154 = (uint64_t)&v137 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x24BDAC7A8](v33);
  v152 = (char *)&v137 - v36;
  v37 = MEMORY[0x24BDAC7A8](v35);
  v39 = (char *)&v137 - v38;
  MEMORY[0x24BDAC7A8](v37);
  v41 = (char *)&v137 - v40;
  v153 = *a2;
  v174 = *a3;
  v42 = *(_QWORD *)(v5 + 40);
  v43 = *(_QWORD *)(v5 + 56);
  v164 = (_QWORD *)(v5 + 16);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v5 + 16), v42);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v42, v43) & 1) == 0)
  {
    if (qword_25440EC10 == -1)
    {
LABEL_5:
      v44 = sub_245443C04();
      __swift_project_value_buffer(v44, (uint64_t)qword_25440EBF8);
      v45 = sub_245443BEC();
      v46 = sub_245443FE8();
      if (os_log_type_enabled(v45, v46))
      {
        v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v47 = 0;
        _os_log_impl(&dword_2453B6000, v45, v46, "Client is not registered", v47, 2u);
        MEMORY[0x249534440](v47, -1, -1);
      }

      sub_2453CBA28();
      swift_allocError();
      *(_BYTE *)v48 = 2;
      *(_QWORD *)(v48 + 8) = 0;
      return swift_willThrow();
    }
LABEL_68:
    swift_once();
    goto LABEL_5;
  }
  sub_2453D02E0(v5 + 144, (uint64_t)&v169, (uint64_t *)&unk_257464550);
  if ((_QWORD)v170)
  {
    sub_2453CBAF0(&v169, &v172);
  }
  else
  {
    v50 = *(_QWORD *)(v5 + 40);
    v159 = *(_OWORD *)(v5 + 64);
    v51 = __swift_project_boxed_opaque_existential_1(v164, v50);
    *(_QWORD *)v173 = v50;
    *(_OWORD *)&v173[8] = v159;
    boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2((uint64_t *)&v172);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(boxed_opaque_existential_2, v51, v50);
    sub_2453D055C((uint64_t)&v169, (uint64_t *)&unk_257464550);
  }
  v138 = v13;
  v150 = v5;
  v151 = v23;
  v53 = v161;
  v54 = v155;
  if (!v153)
  {
    v92 = *(_QWORD *)(v5 + 128);
    v160 = *(_QWORD *)(v5 + 120);
    if (v160 < v92)
    {
LABEL_70:
      __break(1u);
LABEL_71:
      result = sub_2454443A8();
      __break(1u);
      return result;
    }
    v163 = *(void (**)(uint64_t, __int128 *, unint64_t))(v5 + 224);
    v162 = *(_QWORD *)(v5 + 232);
    v57 = (_QWORD *)MEMORY[0x24BEE4B00];
    v93 = type metadata accessor for ReplicatorRecord.Value;
    while (1)
    {
      v94 = *(_QWORD *)&v173[16];
      v167 = *(_OWORD *)v173;
      v95 = *(_QWORD *)v173;
      v96 = __swift_project_boxed_opaque_existential_1(&v172, *(uint64_t *)v173);
      v170 = v167;
      v171 = *(_QWORD *)(v94 + 16);
      v97 = __swift_allocate_boxed_opaque_existential_2((uint64_t *)&v169);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v95 - 8) + 16))(v97, v96, v95);
      v98 = v168;
      v163(v166, &v169, v92);
      if (v98)
      {
LABEL_55:
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v169);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v172);
      }
      v168 = 0;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v169);
      v99 = v93;
      sub_2453D062C((uint64_t)v41, (uint64_t)v39, v93);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v169 = v57;
      v102 = sub_2453C653C(v92);
      v103 = v57[2];
      v104 = (v101 & 1) == 0;
      v105 = v103 + v104;
      if (__OFADD__(v103, v104))
        break;
      v106 = v101;
      if (v57[3] >= v105)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_2453CA058();
      }
      else
      {
        sub_2453C66B0(v105, isUniquelyReferenced_nonNull_native);
        v107 = sub_2453C653C(v92);
        if ((v106 & 1) != (v108 & 1))
          goto LABEL_71;
        v102 = v107;
      }
      v93 = v99;
      v57 = (_QWORD *)v169;
      if ((v106 & 1) != 0)
      {
        sub_2453D0034((uint64_t)v39, *(_QWORD *)(v169 + 56) + *(_QWORD *)(v165 + 72) * v102, v99);
      }
      else
      {
        *(_QWORD *)(v169 + 8 * (v102 >> 6) + 64) |= 1 << v102;
        *(_QWORD *)(v57[6] + 8 * v102) = v92;
        sub_2453D062C((uint64_t)v39, v57[7] + *(_QWORD *)(v165 + 72) * v102, v99);
        v109 = v57[2];
        v90 = __OFADD__(v109, 1);
        v110 = v109 + 1;
        if (v90)
          goto LABEL_66;
        v57[2] = v110;
      }
      swift_bridgeObjectRelease();
      if (v160 == v92)
      {
        v5 = v150;
        goto LABEL_59;
      }
      v71 = __CFADD__(v92++, 1);
      if (v71)
        goto LABEL_65;
    }
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  v55 = *(_QWORD *)(v153 + 16);
  if (v55)
  {
    v56 = v153 + ((*(unsigned __int8 *)(v161 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80));
    v157 = *(_QWORD *)(v161 + 72);
    *(_QWORD *)&v159 = *(_QWORD *)(v161 + 16);
    swift_bridgeObjectRetain();
    v57 = (_QWORD *)MEMORY[0x24BEE4B00];
    v158 = v31;
    while (1)
    {
      ((void (*)(char *, uint64_t, uint64_t))v159)(v31, v56, v23);
      v156 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56);
      v156(v31, 0, 1, v23);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v31, 1, v23) == 1)
        goto LABEL_58;
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v54, v31, v23);
      v58 = v53;
      v59 = *(_QWORD *)(v5 + 40);
      v60 = v54;
      v61 = *(_QWORD *)(v5 + 88);
      __swift_project_boxed_opaque_existential_1(v164, v59);
      v62 = v59;
      v63 = v167;
      ReplicatorRemoteDeviceProviding.device(relationshipID:)(v62, v61, v167);
      v64 = v163;
      if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD *))(v162 + 48))(v63, 1, v163) == 1)
      {
        (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v23);
        sub_2453D055C(v63, &qword_257463C90);
        v53 = v58;
        v54 = v60;
      }
      else
      {
        v65 = v63;
        v66 = v160;
        sub_2453D062C(v65, v160, type metadata accessor for ReplicatorDevice);
        v67 = (unint64_t *)(v66 + *((int *)v64 + 7));
        v68 = *v67;
        v69 = v67[1];
        v70 = *(_QWORD *)(v5 + 120);
        v71 = v68 >= *(_QWORD *)(v5 + 128) && v70 >= v69;
        if (v71)
        {
          if (v68 >= v70)
            v72 = *(_QWORD *)(v5 + 120);
          else
            v72 = v68;
          v73 = *(void (**)(uint64_t, __int128 *, uint64_t))(v5 + 224);
          v74 = *(_QWORD *)&v173[16];
          v147 = *(_OWORD *)v173;
          v75 = *(_QWORD *)v173;
          v76 = __swift_project_boxed_opaque_existential_1(&v172, *(uint64_t *)v173);
          v170 = v147;
          v171 = *(_QWORD *)(v74 + 16);
          v77 = __swift_allocate_boxed_opaque_existential_2((uint64_t *)&v169);
          (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v77, v76, v75);
          v78 = (uint64_t)v152;
          v79 = v168;
          v73(v166, &v169, v72);
          v31 = v158;
          if (v79)
          {
            sub_2453BA3A8(v160, type metadata accessor for ReplicatorDevice);
            (*(void (**)(char *, uint64_t))(v161 + 8))(v155, v151);
            swift_bridgeObjectRelease();
            goto LABEL_55;
          }
          v168 = 0;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v169);
          sub_2453D062C(v78, v154, type metadata accessor for ReplicatorRecord.Value);
          v80 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v169 = v57;
          v82 = sub_2453C653C(v72);
          v83 = v57[2];
          v84 = (v81 & 1) == 0;
          v85 = v83 + v84;
          if (__OFADD__(v83, v84))
            goto LABEL_67;
          v86 = v81;
          if (v57[3] >= v85)
          {
            v54 = v155;
            if ((v80 & 1) == 0)
            {
              sub_2453CA058();
              v54 = v155;
            }
            v5 = v150;
            v57 = (_QWORD *)v169;
            if ((v86 & 1) == 0)
              goto LABEL_30;
          }
          else
          {
            sub_2453C66B0(v85, v80);
            v87 = sub_2453C653C(v72);
            if ((v86 & 1) != (v88 & 1))
              goto LABEL_71;
            v82 = v87;
            v5 = v150;
            v54 = v155;
            v57 = (_QWORD *)v169;
            if ((v86 & 1) == 0)
            {
LABEL_30:
              v57[(v82 >> 6) + 8] |= 1 << v82;
              *(_QWORD *)(v57[6] + 8 * v82) = v72;
              sub_2453D062C(v154, v57[7] + *(_QWORD *)(v165 + 72) * v82, type metadata accessor for ReplicatorRecord.Value);
              v89 = v57[2];
              v90 = __OFADD__(v89, 1);
              v91 = v89 + 1;
              if (v90)
              {
                __break(1u);
                goto LABEL_70;
              }
              v57[2] = v91;
              goto LABEL_36;
            }
          }
          sub_2453D0034(v154, v57[7] + *(_QWORD *)(v165 + 72) * v82, type metadata accessor for ReplicatorRecord.Value);
LABEL_36:
          swift_bridgeObjectRelease();
          sub_2453BA3A8(v160, type metadata accessor for ReplicatorDevice);
          v53 = v161;
          v23 = v151;
          (*(void (**)(char *, uint64_t))(v161 + 8))(v54, v151);
          goto LABEL_14;
        }
        sub_2453BA3A8(v66, type metadata accessor for ReplicatorDevice);
        v53 = v161;
        v54 = v155;
        (*(void (**)(char *, uint64_t))(v161 + 8))(v155, v23);
      }
      v31 = v158;
LABEL_14:
      v56 += v157;
      if (!--v55)
      {
        v156(v31, 1, 1, v23);
        goto LABEL_58;
      }
    }
  }
  v111 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v161 + 56);
  swift_bridgeObjectRetain();
  v57 = (_QWORD *)MEMORY[0x24BEE4B00];
  v111(v31, 1, 1, v23);
LABEL_58:
  swift_bridgeObjectRelease();
LABEL_59:
  *(_QWORD *)&v167 = *(_QWORD *)(v5 + 192);
  v165 = *(_QWORD *)(v5 + 200);
  v112 = *(_QWORD *)(v5 + 96);
  v113 = *(_QWORD *)(v5 + 104);
  v114 = *(_QWORD *)(v5 + 40);
  v115 = *(_QWORD *)(v5 + 48);
  __swift_project_boxed_opaque_existential_1(v164, v114);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v115 + 8))(&v169, v114, v115);
  v116 = v169;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v117 = (uint64_t)v148;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v161 + 56))(v148, 1, 1, v151);
  v118 = (uint64_t)v149;
  v119 = v166;
  v120 = v168;
  ((void (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))v167)(v166, v112, v113, v116, *((_QWORD *)&v116 + 1), v117);
  if (v120)
  {
    swift_bridgeObjectRelease();
    sub_2453BA3A8(v117, type metadata accessor for ReplicatorRecord.ID.Ownership);
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v172);
  }
  else
  {
    sub_2453BA3A8(v117, type metadata accessor for ReplicatorRecord.ID.Ownership);
    swift_bridgeObjectRelease();
    v121 = v146;
    (*(void (**)(uint64_t))(v150 + 208))(v119);
    v168 = 0;
    v122 = v139;
    sub_2453BA364(v118, v139, type metadata accessor for ReplicatorRecord.ID);
    v123 = v161;
    v124 = v151;
    (*(void (**)(char *, char *, uint64_t))(v161 + 16))(v145, v121, v151);
    v125 = v143;
    sub_2453D02E0(v140, v143, (uint64_t *)&unk_25440E420);
    v126 = v142;
    v127 = (uint64_t)v141;
    v128 = (uint64_t)&v141[*(int *)(v142 + 28)];
    v129 = sub_245443AC0();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v129 - 8) + 56))(v128, 1, 1, v129);
    sub_2453D062C(v122, v127, type metadata accessor for ReplicatorRecord.ID);
    (*(void (**)(uint64_t, char *, uint64_t))(v123 + 32))(v127 + *(int *)(v126 + 20), v145, v124);
    *(_QWORD *)(v127 + *(int *)(v126 + 24)) = v57;
    sub_2453CBAA8(v125, v128);
    v130 = v127;
    v131 = v150;
    v132 = (uint64_t)v138;
    sub_2453D062C(v130, (uint64_t)v138, type metadata accessor for ReplicatorRecord);
    v133 = *(_QWORD *)(v131 + 40);
    v134 = *(_QWORD *)(v131 + 80);
    __swift_project_boxed_opaque_existential_1(v164, v133);
    __swift_instantiateConcreteTypeFromMangledName(&qword_25440E258);
    v135 = (*(unsigned __int8 *)(v144 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v144 + 80);
    v136 = swift_allocObject();
    *(_OWORD *)(v136 + 16) = xmmword_245445910;
    sub_2453BA364(v132, v136 + v135, type metadata accessor for ReplicatorRecord);
    *(_QWORD *)&v169 = v153;
    v175 = v174;
    (*(void (**)(uint64_t, __int128 *, char *, uint64_t, uint64_t))(v134 + 24))(v136, &v169, &v175, v133, v134);
    swift_bridgeObjectRelease();
    sub_2453BA3A8(v132, type metadata accessor for ReplicatorRecord);
    (*(void (**)(char *, uint64_t))(v161 + 8))(v146, v124);
    sub_2453BA3A8(v118, type metadata accessor for ReplicatorRecord.ID);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v172);
  }
}

void sub_2453C1688(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;

  v33 = a1;
  v3 = v2;
  v5 = type metadata accessor for ReplicatorRecord.ID(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v32 = (uint64_t)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464538);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v31 - v12;
  v35 = *a2;
  v14 = v3 + 2;
  v15 = v3[5];
  v16 = v3[7];
  __swift_project_boxed_opaque_existential_1(v3 + 2, v15);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16) & 1) != 0)
  {
    v17 = (os_unfair_lock_s *)(v3[30] + 16);
    os_unfair_lock_lock(v17);
    v18 = v34;
    sub_2453C19E4(v3, v33, v19, (uint64_t)v13);
    if (v18)
    {
      os_unfair_lock_unlock(v17);
      __break(1u);
    }
    else
    {
      os_unfair_lock_unlock(v17);
      sub_2453D02E0((uint64_t)v13, (uint64_t)v11, &qword_257464538);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
      {
        sub_2453D055C((uint64_t)v13, &qword_257464538);
        v20 = (uint64_t)v11;
      }
      else
      {
        v26 = v32;
        sub_2453D062C((uint64_t)v11, v32, type metadata accessor for ReplicatorRecord.ID);
        v27 = v3[5];
        v28 = v3[10];
        __swift_project_boxed_opaque_existential_1(v14, v27);
        __swift_instantiateConcreteTypeFromMangledName(&qword_25440E250);
        v29 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
        v30 = swift_allocObject();
        *(_OWORD *)(v30 + 16) = xmmword_245445910;
        sub_2453BA364(v26, v30 + v29, type metadata accessor for ReplicatorRecord.ID);
        v36 = v35;
        (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v28 + 32))(v30, &v36, v27, v28);
        swift_bridgeObjectRelease();
        sub_2453BA3A8(v26, type metadata accessor for ReplicatorRecord.ID);
        v20 = (uint64_t)v13;
      }
      sub_2453D055C(v20, &qword_257464538);
    }
  }
  else
  {
    if (qword_25440EC10 != -1)
      swift_once();
    v21 = sub_245443C04();
    __swift_project_value_buffer(v21, (uint64_t)qword_25440EBF8);
    v22 = sub_245443BEC();
    v23 = sub_245443FE8();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_2453B6000, v22, v23, "Client is not registered", v24, 2u);
      MEMORY[0x249534440](v24, -1, -1);
    }

    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v25 = 2;
    *(_QWORD *)(v25 + 8) = 0;
    swift_willThrow();
  }
}

uint64_t sub_2453C19E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v19 = a2;
  v23 = a4;
  v5 = type metadata accessor for ReplicatorStore.Entry(255, *(_QWORD *)(*a1 + 80), *(_QWORD *)(*a1 + 88), a3);
  v20 = sub_24544406C();
  v6 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v8 = (char *)&v19 - v7;
  v9 = type metadata accessor for ReplicatorRecord.ID(0);
  v21 = *(_QWORD *)(v9 - 8);
  v22 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v12 = a1[31];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_bridgeObjectRetain();
  MEMORY[0x249533744](v19, v12, AssociatedTypeWitness, v5, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v8, 1, v5))
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v20);
    v15 = 1;
    v16 = v23;
  }
  else
  {
    sub_2453BA364((uint64_t)&v8[*(int *)(v5 + 36)], (uint64_t)v11, type metadata accessor for ReplicatorRecord.ID);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v20);
    v17 = v23;
    sub_2453D062C((uint64_t)v11, v23, type metadata accessor for ReplicatorRecord.ID);
    v15 = 0;
    v16 = v17;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v16, v15, 1, v22);
}

uint64_t sub_2453C1BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  type metadata accessor for ReplicatorStore.Change(255, *(_QWORD *)(*(_QWORD *)v4 + 80), *(_QWORD *)(*(_QWORD *)v4 + 88), a4);
  sub_245443EF8();
  v5 = sub_245443F40();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v11 - v6;
  swift_checkMetadataState();
  v8 = *MEMORY[0x24BEE6A10];
  v9 = sub_245443F40();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
  return sub_245443F7C();
}

uint64_t sub_2453C1CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a1;
  v30 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 88);
  type metadata accessor for ReplicatorStore.Change(255, v6, v5, a4);
  sub_245443EF8();
  v7 = sub_245443F58();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v25 - v9;
  v28 = sub_245443B14();
  v11 = *(_QWORD *)(v28 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x24BDAC7A8](v28);
  v26 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v25 - v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v27 = v7;
  v16(v10, a1, v7);
  v17 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v6;
  *(_QWORD *)(v18 + 24) = v5;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, v10, v7);
  v19 = v30;
  sub_2453C1F98((uint64_t)sub_2453D00F4, v18, (uint64_t)v15);
  swift_release();
  v20 = v26;
  v21 = v28;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v26, v15, v28);
  v22 = (*(unsigned __int8 *)(v11 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v23 = (char *)swift_allocObject();
  *((_QWORD *)v23 + 2) = v6;
  *((_QWORD *)v23 + 3) = v5;
  *((_QWORD *)v23 + 4) = v19;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v23[v22], v20, v21);
  swift_retain();
  sub_245443F34();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v15, v21);
}

uint64_t sub_2453C1ECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  type metadata accessor for ReplicatorStore.Change(255, a3, a4, a4);
  sub_245443EF8();
  v5 = sub_245443F28();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v10 - v7;
  v10[1] = a1;
  sub_245443F58();
  swift_bridgeObjectRetain();
  sub_245443F4C();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_2453C1F98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  id v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD aBlock[6];
  uint64_t v37;

  v4 = v3;
  v29 = a2;
  v7 = *v4;
  v32 = sub_245443C88();
  v35 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v31 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_245443CAC();
  v33 = *(_QWORD *)(v9 - 8);
  v34 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v30 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_245443B08();
  v11 = v4[30];
  v12 = *(_QWORD *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 88);
  swift_getAssociatedTypeWitness();
  type metadata accessor for ReplicatorStore.Entry(255, v12, v13, v14);
  swift_getAssociatedConformanceWitness();
  v15 = sub_245443D30();
  v16 = (os_unfair_lock_s *)(v11 + ((*(unsigned int *)(*(_QWORD *)v11 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v16);
  v17 = v29;
  sub_2453C23B4(v4, a3, a1, v29, aBlock);
  os_unfair_lock_unlock(v16);
  v37 = aBlock[0];
  type metadata accessor for ReplicatorStore.Change(0, v12, v13, v18);
  MEMORY[0x249534380](MEMORY[0x24BEE04D8], v15);
  v19 = sub_245443E38();
  swift_bridgeObjectRelease();
  v20 = (void *)v4[34];
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = v12;
  v21[3] = v13;
  v21[4] = a1;
  v21[5] = v17;
  v21[6] = v19;
  aBlock[4] = sub_2453D025C;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2453D0CCC;
  aBlock[3] = &block_descriptor;
  v22 = _Block_copy(aBlock);
  v23 = v20;
  swift_retain();
  v24 = v30;
  sub_245443C94();
  v37 = MEMORY[0x24BEE4AF8];
  sub_2453B8BF4(&qword_25440E640, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E670);
  sub_2453D0384(&qword_25440E678, &qword_25440E670);
  v26 = v31;
  v25 = v32;
  sub_2454440A8();
  MEMORY[0x249533A44](0, v24, v26, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v26, v25);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v24, v34);
  return swift_release();
}

void sub_2453C22D0(uint64_t a1)
{
  uint64_t *v1;
  os_unfair_lock_s *v3;

  v3 = (os_unfair_lock_s *)(v1[30] + 16);
  os_unfair_lock_lock(v3);
  sub_2453C30CC(v1, a1);
  os_unfair_lock_unlock(v3);
}

uint64_t ReplicatorStore.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  sub_2453D055C(v0 + 144, (uint64_t *)&unk_257464550);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t ReplicatorStore.__deallocating_deinit()
{
  ReplicatorStore.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_2453C23B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[3];

  v10 = *a1;
  v11 = sub_245443B14();
  MEMORY[0x24BDAC7A8](v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v11);
  v14 = (_QWORD *)swift_allocObject();
  v15 = *(_QWORD *)(v10 + 80);
  v14[2] = v15;
  v16 = *(_QWORD *)(v10 + 88);
  v14[3] = v16;
  v14[4] = a3;
  v14[5] = a4;
  v19[1] = sub_2453D0324;
  v19[2] = v14;
  swift_beginAccess();
  type metadata accessor for ReplicatorStore.Change(255, v15, v16, v17);
  sub_245443EF8();
  swift_getFunctionTypeMetadata1();
  sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  sub_245443D30();
  swift_retain();
  sub_245443D48();
  swift_endAccess();
  swift_beginAccess();
  *a5 = a1[31];
  return swift_bridgeObjectRetain();
}

uint64_t sub_2453C2560@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t TupleTypeMetadata2;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void (*v55)(char *, uint64_t);
  void (*v56)(char *, uint64_t);
  char *v57;
  void (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *TupleTypeMetadata;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t, uint64_t);
  void (*v86)(char *, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v84 = a3;
  v72 = a2;
  v4 = *a2;
  v82 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x24BDAC7A8](v82);
  v83 = (uint64_t)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_245443B14();
  v94 = *(_QWORD *)(v6 - 8);
  v95 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v92 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v4 + 80);
  v91 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v90 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ReplicatorRecord(0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v80 = (uint64_t)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v72 - v14;
  v16 = *(_QWORD *)(v4 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v93 = v9;
  v81 = v16;
  v19 = type metadata accessor for ReplicatorStore.Entry(255, v9, v16, v18);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v21 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v78 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v72 - v23;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464540);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E1A0);
  MEMORY[0x24BDAC7A8](v77);
  v88 = TupleTypeMetadata2;
  v89 = (uint64_t)&v72 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(int *)(TupleTypeMetadata2 + 48);
  v30 = &v24[v29];
  v31 = a1 + v29;
  v73 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 16);
  v100 = a1;
  v74 = AssociatedTypeWitness;
  v86 = v32;
  v32(v24, a1, AssociatedTypeWitness);
  v33 = *(_QWORD *)(v19 - 8);
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
  v87 = v31;
  v34(v30, v31, v19);
  sub_2453BA364((uint64_t)&v30[*(int *)(v19 + 36)], (uint64_t)v15, type metadata accessor for ReplicatorRecord);
  v35 = *(void (**)(char *, uint64_t))(v33 + 8);
  v75 = v19;
  v76 = v35;
  v35(v30, v19);
  v79 = v11;
  v36 = *(_QWORD *)&v15[*(int *)(v11 + 24)];
  swift_bridgeObjectRetain();
  sub_2453BA3A8((uint64_t)v15, type metadata accessor for ReplicatorRecord);
  if (*(_QWORD *)(v36 + 16) && (v37 = sub_2453C653C(v72[15]), (v38 & 1) != 0))
  {
    v39 = v37;
    v40 = *(_QWORD *)(v36 + 56);
    v41 = type metadata accessor for ReplicatorRecord.Value(0);
    v42 = *(_QWORD *)(v41 - 8);
    sub_2453BA364(v40 + *(_QWORD *)(v42 + 72) * v39, (uint64_t)v27, type metadata accessor for ReplicatorRecord.Value);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v27, 0, 1, v41);
  }
  else
  {
    v41 = type metadata accessor for ReplicatorRecord.Value(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v27, 1, 1, v41);
  }
  v43 = v89;
  swift_bridgeObjectRelease();
  type metadata accessor for ReplicatorRecord.Value(0);
  v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v27, 1, v41);
  v85 = v34;
  if (v44 == 1)
  {
    v45 = *(void (**)(char *, uint64_t))(v73 + 8);
    v46 = v74;
    v45(v24, v74);
    sub_2453D055C((uint64_t)v27, &qword_257464540);
    v47 = sub_245443A24();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v43, 1, 1, v47);
  }
  else
  {
    sub_2453D02E0((uint64_t)&v27[*(int *)(v41 + 20)], v43, &qword_25440E1A0);
    sub_2453BA3A8((uint64_t)v27, type metadata accessor for ReplicatorRecord.Value);
    v45 = *(void (**)(char *, uint64_t))(v73 + 8);
    v46 = v74;
    v45(v24, v74);
  }
  v48 = v88;
  v49 = v78;
  v50 = &v78[*(int *)(v88 + 48)];
  v51 = v86;
  v86(v78, v100, v46);
  v52 = v87;
  v53 = v75;
  v85(v50, v87, v75);
  (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v90, v50, v93);
  v54 = v50;
  v55 = v76;
  v76(v54, v53);
  v45(v49, v46);
  v56 = v45;
  v57 = &v49[*(int *)(v48 + 48)];
  v51(v49, v100, v46);
  v58 = v85;
  v85(v57, v52, v53);
  v59 = v80;
  sub_2453BA364((uint64_t)&v57[*(int *)(v53 + 36)], v80, type metadata accessor for ReplicatorRecord);
  v55(v57, v53);
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v92, v59 + *(int *)(v79 + 20), v95);
  sub_2453BA3A8(v59, type metadata accessor for ReplicatorRecord);
  v56(v49, v46);
  v60 = &v49[*(int *)(v88 + 48)];
  v86(v49, v100, v46);
  v58(v60, v87, v53);
  sub_2453BA364((uint64_t)&v60[*(int *)(v53 + 36)], v59, type metadata accessor for ReplicatorRecord);
  v55(v60, v53);
  v61 = v83;
  sub_2453BA364(v59, v83, type metadata accessor for ReplicatorRecord.ID);
  sub_2453BA3A8(v59, type metadata accessor for ReplicatorRecord);
  v56(v49, v46);
  v62 = v93;
  v96 = v93;
  v97 = v82;
  v63 = v95;
  v98 = v77;
  v99 = v95;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v65 = v84;
  v66 = v84 + TupleTypeMetadata[12];
  v67 = v84 + TupleTypeMetadata[16];
  v68 = v84 + TupleTypeMetadata[20];
  (*(void (**)(uint64_t, char *, uint64_t))(v91 + 32))(v84, v90, v62);
  sub_2453D062C(v61, v66, type metadata accessor for ReplicatorRecord.ID);
  sub_2453D0428(v89, v67, &qword_25440E1A0);
  (*(void (**)(uint64_t, char *, uint64_t))(v94 + 32))(v68, v92, v63);
  v70 = type metadata accessor for ReplicatorStore.Change(0, v62, v81, v69);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v65, 0, 1, v70);
}

uint64_t sub_2453C2C78(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;

  v51 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464538);
  MEMORY[0x24BDAC7A8](v5);
  v50 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for ReplicatorRecord.ID(0);
  v52 = *(_QWORD *)(v46 - 8);
  v7 = MEMORY[0x24BDAC7A8](v46);
  v42 = (uint64_t)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v41 = (uint64_t)&v41 - v9;
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E4F0);
  v10 = MEMORY[0x24BDAC7A8](v49);
  v48 = (uint64_t)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v47 = (uint64_t)&v41 - v12;
  v13 = *(_QWORD *)(a3 + 64);
  v44 = a3 + 64;
  v14 = 1 << *(_BYTE *)(a3 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v45 = (unint64_t)(v14 + 63) >> 6;
  v53 = a3;
  result = swift_bridgeObjectRetain();
  v18 = 0;
  v43 = MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v20 = v19 | (v18 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v18++, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v18 >= v45)
      goto LABEL_32;
    v22 = *(_QWORD *)(v44 + 8 * v18);
    if (!v22)
      break;
LABEL_18:
    v16 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_19:
    v24 = v53;
    v25 = v52;
    v26 = *(_QWORD *)(v52 + 72);
    v27 = v47;
    sub_2453BA364(*(_QWORD *)(v53 + 48) + v26 * v20, v47, type metadata accessor for ReplicatorRecord.ID);
    v28 = *(_QWORD *)(v24 + 56);
    v29 = sub_245443B14();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27 + *(int *)(v49 + 48), v28 + *(_QWORD *)(*(_QWORD *)(v29 - 8) + 72) * v20, v29);
    v30 = v27;
    v31 = v48;
    sub_2453D0428(v30, v48, &qword_25440E4F0);
    v32 = (uint64_t)v50;
    v51(v31);
    if (v3)
    {
      sub_2453D055C(v31, &qword_25440E4F0);
      v40 = v43;
      swift_bridgeObjectRelease();
LABEL_33:
      swift_release();
      return v40;
    }
    sub_2453D055C(v31, &qword_25440E4F0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v32, 1, v46) == 1)
    {
      result = sub_2453D055C(v32, &qword_257464538);
    }
    else
    {
      v33 = v41;
      sub_2453D062C(v32, v41, type metadata accessor for ReplicatorRecord.ID);
      sub_2453D062C(v33, v42, type metadata accessor for ReplicatorRecord.ID);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v43 = sub_2453F1658(0, *(_QWORD *)(v43 + 16) + 1, 1, v43);
      v35 = *(_QWORD *)(v43 + 16);
      v34 = *(_QWORD *)(v43 + 24);
      v36 = v52;
      if (v35 >= v34 >> 1)
      {
        v39 = sub_2453F1658(v34 > 1, v35 + 1, 1, v43);
        v36 = v52;
        v43 = v39;
      }
      v37 = v42;
      v38 = v43;
      *(_QWORD *)(v43 + 16) = v35 + 1;
      result = sub_2453D062C(v37, v38+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ v35 * v26, type metadata accessor for ReplicatorRecord.ID);
    }
  }
  v23 = v18 + 1;
  if (v18 + 1 >= v45)
    goto LABEL_32;
  v22 = *(_QWORD *)(v44 + 8 * v23);
  if (v22)
    goto LABEL_17;
  v23 = v18 + 2;
  if (v18 + 2 >= v45)
    goto LABEL_32;
  v22 = *(_QWORD *)(v44 + 8 * v23);
  if (v22)
    goto LABEL_17;
  v23 = v18 + 3;
  if (v18 + 3 >= v45)
    goto LABEL_32;
  v22 = *(_QWORD *)(v44 + 8 * v23);
  if (v22)
    goto LABEL_17;
  v23 = v18 + 4;
  if (v18 + 4 >= v45)
  {
LABEL_32:
    v40 = v43;
    goto LABEL_33;
  }
  v22 = *(_QWORD *)(v44 + 8 * v23);
  if (v22)
  {
LABEL_17:
    v18 = v23;
    goto LABEL_18;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v45)
      goto LABEL_32;
    v22 = *(_QWORD *)(v44 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_18;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_2453C30CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];

  v3 = *a1;
  v4 = sub_245443B14();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
  MEMORY[0x24BDAC7A8](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v4);
  v10[4] = 0;
  v10[5] = 0;
  swift_beginAccess();
  type metadata accessor for ReplicatorStore.Change(255, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v8);
  sub_245443EF8();
  swift_getFunctionTypeMetadata1();
  sub_2453B8BF4(&qword_25440E440, v5, MEMORY[0x24BDCEA88]);
  sub_245443D30();
  sub_245443D48();
  return swift_endAccess();
}

uint64_t sub_2453C3208(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[6];

  v22 = a1;
  v2 = *v1;
  v3 = sub_245443C88();
  v25 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_245443CAC();
  v23 = *(_QWORD *)(v6 - 8);
  v24 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v1[30];
  sub_245443B14();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
  v11 = *(_QWORD *)(v2 + 80);
  v12 = *(_QWORD *)(v2 + 88);
  type metadata accessor for ReplicatorStore.Change(255, v11, v12, v13);
  sub_245443EF8();
  swift_getFunctionTypeMetadata1();
  sub_2453B8BF4(&qword_25440E440, v10, MEMORY[0x24BDCEA88]);
  sub_245443D30();
  v14 = (os_unfair_lock_s *)(v9 + ((*(unsigned int *)(*(_QWORD *)v9 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v14);
  swift_beginAccess();
  v15 = v1[33];
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v14);
  v16 = (void *)v1[34];
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v11;
  v17[3] = v12;
  v18 = v22;
  v17[4] = v15;
  v17[5] = v18;
  aBlock[4] = sub_2453D06B8;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2453D0CCC;
  aBlock[3] = &block_descriptor_30;
  v19 = _Block_copy(aBlock);
  v20 = v16;
  swift_bridgeObjectRetain();
  sub_245443C94();
  v26 = MEMORY[0x24BEE4AF8];
  sub_2453B8BF4(&qword_25440E640, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E670);
  sub_2453D0384(&qword_25440E678, &qword_25440E670);
  sub_2454440A8();
  MEMORY[0x249533A44](0, v8, v5, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v24);
  return swift_release();
}

uint64_t sub_2453C34CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(void);
  uint64_t v38;
  uint64_t v39;
  uint64_t (**v40)(uint64_t);
  char *v41;
  char *v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  int64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;

  v50 = a3;
  v51 = a4;
  v54 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E330);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v49 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_245443B14();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v52 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E438);
  v56 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v59 = (char *)&v43 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v55 = (char *)&v43 - v17;
  v18 = *(_QWORD *)(a1 + 64);
  v45 = a1 + 64;
  v19 = 1 << *(_BYTE *)(a1 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v46 = (unint64_t)(v19 + 63) >> 6;
  v44 = v46 - 1;
  v53 = a1;
  result = swift_bridgeObjectRetain();
  v57 = 0;
  v58 = v14;
  v47 = v11;
  v48 = v6;
  if (!v21)
    goto LABEL_6;
LABEL_4:
  v60 = (v21 - 1) & v21;
  v23 = __clz(__rbit64(v21)) | (v57 << 6);
LABEL_5:
  v25 = v52;
  v24 = v53;
  (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v52, *(_QWORD *)(v53 + 48) + *(_QWORD *)(v9 + 72) * v23, v8);
  v26 = *(int *)(v5 + 48);
  v27 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v61 = *(_OWORD *)(*(_QWORD *)(v24 + 56) + 16 * v23);
  v14 = v58;
  v27(v58, v25, v8);
  *(_OWORD *)&v14[v26] = v61;
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v28(v14, 0, 1, v5);
  swift_retain();
  while (1)
  {
    v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
    v34 = 1;
    if (v33(v14, 1, v5) != 1)
    {
      v35 = *(int *)(v5 + 48);
      v36 = v9;
      v37 = *(void (**)(void))(v9 + 32);
      ((void (*)(char *, char *, uint64_t))v37)(v49, v14, v8);
      v38 = swift_allocObject();
      v39 = v51;
      *(_QWORD *)(v38 + 16) = v50;
      *(_QWORD *)(v38 + 24) = v39;
      *(_OWORD *)(v38 + 32) = *(_OWORD *)&v14[v35];
      v40 = (uint64_t (**)(uint64_t))&v59[*(int *)(v5 + 48)];
      v11 = v47;
      v37();
      v9 = v36;
      v34 = 0;
      *v40 = sub_2453D06E8;
      v40[1] = (uint64_t (*)(uint64_t))v38;
      v14 = v58;
      v6 = v48;
    }
    v41 = v59;
    v28(v59, v34, 1, v5);
    v42 = v55;
    (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v55, v41, v11);
    if (v33(v42, 1, v5) == 1)
      return swift_release();
    (*(void (**)(uint64_t))&v42[*(int *)(v5 + 48)])(v54);
    swift_release();
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v42, v8);
    v21 = v60;
    if (v60)
      goto LABEL_4;
LABEL_6:
    v29 = v57 + 1;
    if (__OFADD__(v57, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v29 < v46)
    {
      v30 = *(_QWORD *)(v45 + 8 * v29);
      if (v30)
        goto LABEL_9;
      v31 = v57 + 2;
      ++v57;
      if (v29 + 1 < v46)
      {
        v30 = *(_QWORD *)(v45 + 8 * v31);
        if (v30)
        {
          ++v29;
LABEL_9:
          v60 = (v30 - 1) & v30;
          v23 = __clz(__rbit64(v30)) + (v29 << 6);
          v57 = v29;
          goto LABEL_5;
        }
        v32 = v29 + 2;
        v57 = v29 + 1;
        if (v29 + 2 < v46)
          break;
      }
    }
LABEL_21:
    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v28(v14, 1, 1, v5);
    v60 = 0;
  }
  v30 = *(_QWORD *)(v45 + 8 * v32);
  if (v30)
  {
    v29 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    v29 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v29 >= v46)
    {
      v57 = v44;
      goto LABEL_21;
    }
    v30 = *(_QWORD *)(v45 + 8 * v29);
    ++v32;
    if (v30)
      goto LABEL_9;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_2453C391C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E030);
  v4[6] = v5;
  v4[7] = *(_QWORD *)(v5 - 8);
  v4[8] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464598);
  v4[9] = v6;
  v4[10] = *(_QWORD *)(v6 - 8);
  v4[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2453C39AC()
{
  uint64_t v0;
  _QWORD *Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  swift_beginAccess();
  Strong = (_QWORD *)swift_weakLoadStrong();
  *(_QWORD *)(v0 + 96) = Strong;
  if (Strong)
  {
    v3 = *(_QWORD *)(v0 + 56);
    v2 = *(_QWORD *)(v0 + 64);
    v4 = *(_QWORD *)(v0 + 48);
    v5 = Strong[5];
    v6 = Strong[7];
    __swift_project_boxed_opaque_existential_1(Strong + 2, v5);
    (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
    sub_245443F64();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 104) = v7;
    *v7 = v0;
    v7[1] = sub_2453C3AE4;
    return sub_245443F70();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_2453C3AE4()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2453C3B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  _QWORD *v7;

  v5 = *(unsigned __int8 *)(v4 + 112);
  if (v5 == 2)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v4 + 80) + 8))(*(_QWORD *)(v4 + 88), *(_QWORD *)(v4 + 72));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else
  {
    if ((v5 & 1) == 0)
      sub_2453C3BF4(a1, a2, a3, a4);
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v4 + 104) = v7;
    *v7 = v4;
    v7[1] = sub_2453C3AE4;
    return sub_245443F70();
  }
}

uint64_t sub_2453C3BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v8;

  v5 = v4[30];
  type metadata accessor for ReplicatorStore.Change(255, *(_QWORD *)(*v4 + 80), *(_QWORD *)(*v4 + 88), a4);
  sub_245443EF8();
  v6 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(_QWORD *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  sub_2453C597C(v4, &v8);
  os_unfair_lock_unlock(v6);
  sub_2453C3208(v8);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2453C3C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_245443F1C();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_245443F10();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_2453D055C(a1, &qword_257464570);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_245443F04();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_2453C3DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6[15] = a4;
  v6[16] = a5;
  v9 = type metadata accessor for ReplicatorRecord.Value(0);
  v6[17] = v9;
  v6[18] = *(_QWORD *)(v9 - 8);
  v6[19] = swift_task_alloc();
  v11 = type metadata accessor for ReplicatorStore.Entry(255, a5, a6, v10);
  v6[20] = v11;
  v12 = sub_24544406C();
  v6[21] = v12;
  v6[22] = *(_QWORD *)(v12 - 8);
  v6[23] = swift_task_alloc();
  v6[24] = *(_QWORD *)(v11 - 8);
  v6[25] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_257464548);
  v6[26] = swift_task_alloc();
  v6[27] = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E1A0);
  v6[28] = swift_task_alloc();
  v6[29] = swift_task_alloc();
  v13 = type metadata accessor for ReplicatorRecord(0);
  v6[30] = v13;
  v6[31] = *(_QWORD *)(v13 - 8);
  v6[32] = swift_task_alloc();
  type metadata accessor for ReplicatorRecordVersion();
  v6[33] = swift_task_alloc();
  v6[34] = swift_task_alloc();
  v6[35] = type metadata accessor for ReplicatorStore.Change(0, a5, a6, v14);
  v6[36] = swift_task_alloc();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[37] = AssociatedTypeWitness;
  v6[38] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[39] = swift_task_alloc();
  v16 = sub_24544406C();
  v6[40] = v16;
  v6[41] = *(_QWORD *)(v16 - 8);
  v6[42] = swift_task_alloc();
  v6[43] = swift_task_alloc();
  v17 = type metadata accessor for ReplicatorRecord.ID(0);
  v6[44] = v17;
  v6[45] = *(_QWORD *)(v17 - 8);
  v6[46] = swift_task_alloc();
  v18 = type metadata accessor for ReplicatorRecordChange();
  v6[47] = v18;
  v6[48] = *(_QWORD *)(v18 - 8);
  v6[49] = swift_task_alloc();
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574645A0);
  v6[50] = v19;
  v6[51] = *(_QWORD *)(v19 - 8);
  v6[52] = swift_task_alloc();
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464590);
  v6[53] = v20;
  v6[54] = *(_QWORD *)(v20 - 8);
  v6[55] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_2453C40A4()
{
  uint64_t v0;
  _QWORD *Strong;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v10;
  uint64_t v12;

  swift_beginAccess();
  Strong = (_QWORD *)swift_weakLoadStrong();
  *(_QWORD *)(v0 + 448) = Strong;
  if (Strong)
  {
    v2 = Strong;
    v3 = *(_QWORD *)(v0 + 416);
    v12 = *(_QWORD *)(v0 + 408);
    v4 = *(_QWORD *)(v0 + 400);
    v5 = Strong[5];
    v6 = Strong[10];
    __swift_project_boxed_opaque_existential_1(Strong + 2, v5);
    v8 = v2[12];
    v7 = v2[13];
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain();
    v9(v8, v7, v5, v6);
    swift_bridgeObjectRelease();
    sub_245443F64();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v3, v4);
    *(_QWORD *)(v0 + 456) = 0;
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 464) = v10;
    *v10 = v0;
    v10[1] = sub_2453C42D4;
    return sub_245443F70();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_2453C42D4()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_2453C4328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  BOOL v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  os_unfair_lock_s *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int *TupleTypeMetadata;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114[3];

  if (*(_QWORD *)(v0 + 104))
  {
    v103 = *(_QWORD *)(v0 + 104);
    v1 = sub_245443D00();
    *(_QWORD *)(v0 + 112) = v1;
    v2 = *(_QWORD *)(v103 + 16);
    if (v2)
    {
      v3 = *(_QWORD *)(v0 + 384);
      v4 = v103 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
      v108 = *(_QWORD *)(v3 + 72);
      v112 = *(void **)(v0 + 456);
      while (1)
      {
        sub_2453BA364(v4, *(_QWORD *)(v0 + 392), (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordChange);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        v12 = *(_QWORD *)(v0 + 448);
        v13 = *(_QWORD *)(v0 + 392);
        if (EnumCaseMultiPayload != 1)
          break;
        v14 = *(_QWORD *)(v0 + 368);
        sub_2453D062C(v13, v14, type metadata accessor for ReplicatorRecord.ID);
        v15 = *(_QWORD *)(v14 + 16) == *(_QWORD *)(v12 + 96) && *(_QWORD *)(v14 + 24) == *(_QWORD *)(v12 + 104);
        if (!v15 && (sub_245444390() & 1) == 0)
        {
          sub_2453BA3A8(*(_QWORD *)(v0 + 368), type metadata accessor for ReplicatorRecord.ID);
          goto LABEL_7;
        }
        v109 = v4;
        v110 = v2;
        v16 = *(_QWORD *)(v0 + 448);
        v17 = *(_QWORD *)(v0 + 368);
        v18 = *(_QWORD *)(v0 + 336);
        v19 = *(_QWORD *)(v0 + 344);
        v20 = *(_QWORD *)(v0 + 320);
        v21 = *(_QWORD *)(v0 + 328);
        v22 = *(_QWORD *)(v0 + 304);
        v106 = *(_QWORD *)(v0 + 296);
        v23 = *(_QWORD *)(v16 + 240);
        v24 = swift_task_alloc();
        *(_QWORD *)(v24 + 16) = v16;
        *(_QWORD *)(v24 + 24) = v17;
        v25 = (os_unfair_lock_s *)(v23 + ((*(unsigned int *)(*(_QWORD *)v23 + 48) + 3) & 0x1FFFFFFFCLL));
        swift_retain();
        os_unfair_lock_lock(v25);
        sub_2453C4FBC(*(uint64_t **)(v24 + 16), *(_QWORD *)(v24 + 24), v19);
        os_unfair_lock_unlock(v25);
        swift_release();
        swift_task_dealloc();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v18, v19, v20);
        v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v18, 1, v106);
        v27 = *(_QWORD *)(v0 + 368);
        if (v26 == 1)
        {
          v28 = *(_QWORD *)(v0 + 336);
          v29 = *(_QWORD *)(v0 + 320);
          v30 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 328) + 8);
          v30(*(_QWORD *)(v0 + 344), v29);
          sub_2453BA3A8(v27, type metadata accessor for ReplicatorRecord.ID);
          v30(v28, v29);
        }
        else
        {
          v105 = *(_QWORD *)(v0 + 344);
          v5 = *(_QWORD *)(v0 + 328);
          v6 = *(_QWORD *)(v0 + 312);
          v104 = *(_QWORD *)(v0 + 320);
          v8 = *(_QWORD *)(v0 + 296);
          v7 = *(_QWORD *)(v0 + 304);
          v9 = *(_QWORD *)(v0 + 288);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 32))(v6, *(_QWORD *)(v0 + 336), v8);
          v10 = v9 + *(int *)(swift_getTupleTypeMetadata2() + 48);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v9, v6, v8);
          sub_2453BA364(v27, v10, type metadata accessor for ReplicatorRecord.ID);
          swift_storeEnumTagMultiPayload();
          sub_245443EF8();
          sub_245443EEC();
          (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
          (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v105, v104);
          sub_2453BA3A8(v27, type metadata accessor for ReplicatorRecord.ID);
        }
        v2 = v110;
LABEL_6:
        v4 = v109;
LABEL_7:
        v4 += v108;
        if (!--v2)
        {
          swift_bridgeObjectRelease();
          v95 = *(_QWORD *)(v0 + 112);
          v96 = v112;
          goto LABEL_48;
        }
      }
      v31 = *(_QWORD *)(v0 + 272);
      sub_2453D062C(v13, v31, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordVersion);
      v32 = *(_QWORD *)(v31 + 16) == *(_QWORD *)(v12 + 96) && *(_QWORD *)(v31 + 24) == *(_QWORD *)(v12 + 104);
      if (!v32 && (sub_245444390() & 1) == 0)
      {
        sub_2453BA3A8(*(_QWORD *)(v0 + 272), (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordVersion);
        goto LABEL_7;
      }
      v109 = v4;
      v111 = v2;
      v33 = *(_QWORD **)(v0 + 448);
      v34 = *(_QWORD *)(v0 + 360);
      v35 = *(_QWORD *)(v0 + 272);
      v36 = *(_QWORD *)(v0 + 232);
      v37 = v33[5];
      v38 = v33[10];
      __swift_project_boxed_opaque_existential_1(v33 + 2, v37);
      __swift_instantiateConcreteTypeFromMangledName(&qword_25440E250);
      v39 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
      v40 = swift_allocObject();
      *(_OWORD *)(v40 + 16) = xmmword_245445910;
      sub_2453BA364(v35, v40 + v39, type metadata accessor for ReplicatorRecord.ID);
      v41 = sub_245443A24();
      v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56);
      v42(v36, 1, 1, v41);
      v43 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v38 + 40))(v40, v36, v33[15], 0, v37, v38);
      v44 = *(_QWORD *)(v0 + 232);
      swift_bridgeObjectRelease();
      sub_2453D055C(v44, &qword_25440E1A0);
      if (v112)
      {
        if (qword_25440EC10 != -1)
          swift_once();
        v45 = *(_QWORD *)(v0 + 264);
        v46 = *(_QWORD *)(v0 + 272);
        v47 = sub_245443C04();
        __swift_project_value_buffer(v47, (uint64_t)qword_25440EBF8);
        sub_2453BA364(v46, v45, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordVersion);
        v48 = sub_245443BEC();
        v49 = sub_245443FE8();
        if (os_log_type_enabled(v48, v49))
        {
          v50 = *(_QWORD *)(v0 + 264);
          v51 = swift_slowAlloc();
          v52 = swift_slowAlloc();
          v114[0] = v52;
          *(_DWORD *)v51 = 136446210;
          *(_QWORD *)(v0 + 88) = 0;
          *(_QWORD *)(v0 + 96) = 0xE000000000000000;
          sub_24544412C();
          v53 = *(_QWORD *)(v0 + 96);
          *(_QWORD *)(v0 + 72) = *(_QWORD *)(v0 + 88);
          *(_QWORD *)(v0 + 80) = v53;
          sub_245443E14();
          swift_bridgeObjectRetain();
          sub_245443E14();
          swift_bridgeObjectRelease();
          sub_245443E14();
          swift_bridgeObjectRetain();
          sub_245443E14();
          swift_bridgeObjectRelease();
          sub_245443E14();
          swift_bridgeObjectRetain();
          sub_245443E14();
          swift_bridgeObjectRelease();
          sub_245443E14();
          type metadata accessor for ReplicatorRecord.ID.Ownership(0);
          sub_2454441EC();
          *(_QWORD *)(v51 + 4) = sub_2453BDB24(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), v114);
          swift_bridgeObjectRelease();
          sub_2453BA3A8(v50, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordVersion);
          _os_log_impl(&dword_2453B6000, v48, v49, "Failed to fetch record for update with record ID: %{public}s", (uint8_t *)v51, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x249534440](v52, -1, -1);
          MEMORY[0x249534440](v51, -1, -1);
        }
        else
        {
          sub_2453BA3A8(*(_QWORD *)(v0 + 264), (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordVersion);
        }

        v57 = *(_QWORD *)(v0 + 272);
      }
      else
      {
        if (*(_QWORD *)(v43 + 16) && (v54 = sub_2453C656C(*(_QWORD **)(v0 + 272)), (v55 & 1) != 0))
        {
          sub_2453BA364(*(_QWORD *)(v43 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 248) + 72) * v54, *(_QWORD *)(v0 + 208), type metadata accessor for ReplicatorRecord);
          v56 = 0;
        }
        else
        {
          v56 = 1;
        }
        v58 = *(_QWORD *)(v0 + 240);
        v59 = *(_QWORD *)(v0 + 248);
        v60 = *(_QWORD *)(v0 + 208);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56))(v60, v56, 1, v58);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v60, 1, v58) == 1)
        {
          v61 = *(_QWORD *)(v0 + 208);
          sub_2453BA3A8(*(_QWORD *)(v0 + 272), (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordVersion);
          sub_2453D055C(v61, &qword_257464548);
          goto LABEL_32;
        }
        v62 = *(_QWORD *)(v0 + 256);
        v63 = *(char **)(v0 + 184);
        sub_2453D062C(*(_QWORD *)(v0 + 208), v62, type metadata accessor for ReplicatorRecord);
        sub_2453C5350(v62, v63);
        v64 = *(_QWORD *)(v0 + 184);
        v65 = *(_QWORD *)(v0 + 192);
        v66 = *(_QWORD *)(v0 + 160);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v64, 1, v66) == 1)
        {
          v67 = *(_QWORD *)(v0 + 272);
          v68 = *(_QWORD *)(v0 + 168);
          v69 = *(_QWORD *)(v0 + 176);
          sub_2453BA3A8(*(_QWORD *)(v0 + 256), type metadata accessor for ReplicatorRecord);
          sub_2453BA3A8(v67, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordVersion);
          (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v64, v68);
          goto LABEL_32;
        }
        v70 = *(_QWORD *)(v0 + 256);
        v71 = *(_QWORD *)(v0 + 240);
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v65 + 32))(*(_QWORD *)(v0 + 200), v64, v66);
        v72 = *(_QWORD *)(v70 + *(int *)(v71 + 24));
        if (*(_QWORD *)(v72 + 16) && (v73 = sub_2453C653C(*(_QWORD *)(*(_QWORD *)(v0 + 448) + 120)), (v74 & 1) != 0))
        {
          v75 = *(_QWORD *)(v0 + 224);
          v76 = *(_QWORD *)(v0 + 152);
          v77 = *(_QWORD *)(v0 + 136);
          sub_2453BA364(*(_QWORD *)(v72 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 144) + 72) * v73, v76, type metadata accessor for ReplicatorRecord.Value);
          sub_2453D02E0(v76 + *(int *)(v77 + 20), v75, &qword_25440E1A0);
          sub_2453BA3A8(v76, type metadata accessor for ReplicatorRecord.Value);
        }
        else
        {
          v42(*(_QWORD *)(v0 + 224), 1, 1, v41);
        }
        v78 = *(_QWORD *)(v0 + 448);
        v79 = *(_QWORD *)(v0 + 272);
        v80 = *(_QWORD *)(v0 + 200);
        v81 = *(os_unfair_lock_s **)(v78 + 240);
        v82 = (_QWORD *)swift_task_alloc();
        v82[2] = v78;
        v82[3] = v79;
        v82[4] = v80;
        v83 = swift_task_alloc();
        *(_QWORD *)(v83 + 16) = sub_2453D0670;
        *(_QWORD *)(v83 + 24) = v82;
        swift_retain();
        os_unfair_lock_lock(v81 + 4);
        (*(void (**)(void))(v83 + 16))();
        v84 = *(_QWORD *)(v0 + 352);
        v85 = *(_QWORD *)(v0 + 288);
        v113 = *(_QWORD *)(v0 + 272);
        v101 = *(_QWORD *)(v0 + 240);
        v102 = *(_QWORD *)(v0 + 256);
        v86 = *(_QWORD *)(v0 + 216);
        v87 = *(_QWORD *)(v0 + 200);
        v107 = *(_QWORD *)(v0 + 192);
        v99 = *(_QWORD *)(v0 + 160);
        v100 = *(_QWORD *)(v0 + 224);
        v88 = *(_QWORD *)(v0 + 128);
        os_unfair_lock_unlock(v81 + 4);
        swift_release();
        swift_task_dealloc();
        swift_task_dealloc();
        *(_QWORD *)(v0 + 16) = v88;
        *(_QWORD *)(v0 + 24) = v84;
        *(_QWORD *)(v0 + 32) = v86;
        *(_QWORD *)(v0 + 40) = sub_245443B14();
        TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
        v90 = v85 + TupleTypeMetadata[12];
        v91 = v85 + TupleTypeMetadata[16];
        v92 = v85 + TupleTypeMetadata[20];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(v85, v87, v88);
        sub_2453BA364(v87 + *(int *)(v99 + 36), v90, type metadata accessor for ReplicatorRecord.ID);
        sub_2453D02E0(v100, v91, &qword_25440E1A0);
        v93 = v102 + *(int *)(v101 + 20);
        v94 = sub_245443B14();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 16))(v92, v93, v94);
        swift_storeEnumTagMultiPayload();
        sub_245443EF8();
        sub_245443EEC();
        sub_2453D055C(v100, &qword_25440E1A0);
        sub_2453BA3A8(v102, type metadata accessor for ReplicatorRecord);
        (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v87, v99);
        v57 = v113;
      }
      sub_2453BA3A8(v57, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordVersion);
LABEL_32:
      v112 = 0;
      v2 = v111;
      goto LABEL_6;
    }
    v95 = v1;
    swift_bridgeObjectRelease();
    v96 = *(void **)(v0 + 456);
LABEL_48:
    sub_2453C3208(v95);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 456) = v96;
    v98 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 464) = v98;
    *v98 = v0;
    v98[1] = sub_2453C42D4;
    return sub_245443F70();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 432) + 8))(*(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 424));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_2453C4FBC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = a3;
  v5 = *a1;
  v6 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x24BDAC7A8](v6);
  v36 = (uint64_t)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v5 + 80);
  v8 = *(_QWORD *)(v5 + 88);
  v33 = type metadata accessor for ReplicatorStore.Entry(255, v9, v8, v10);
  v11 = sub_24544406C();
  MEMORY[0x24BDAC7A8](v11);
  v32 = (char *)&v27 - v12;
  v29 = *(_QWORD *)(v8 + 24);
  v34 = v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v28 = (char *)&v27 - v15;
  v16 = sub_24544406C();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v31 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v27 - v20;
  v30 = a1 + 32;
  swift_beginAccess();
  v22 = a1[32];
  v23 = sub_2453B8BF4(&qword_257464530, type metadata accessor for ReplicatorRecord.ID, (uint64_t)&protocol conformance descriptor for ReplicatorRecord.ID);
  swift_bridgeObjectRetain();
  v35 = a2;
  v37 = v6;
  MEMORY[0x249533744](a2, v22, v6, AssociatedTypeWitness, v23);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v21, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v16);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v38, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    v25 = v38;
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v38, v21, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v28, v25, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
    swift_beginAccess();
    swift_getAssociatedConformanceWitness();
    sub_245443D30();
    sub_245443D48();
    swift_endAccess();
    sub_2453BA364(v35, v36, type metadata accessor for ReplicatorRecord.ID);
    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v26(v31, 1, 1, AssociatedTypeWitness);
    swift_beginAccess();
    sub_245443D30();
    sub_245443D48();
    swift_endAccess();
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v26)(v25, 0, 1, AssociatedTypeWitness);
  }
}

uint64_t sub_2453C5350@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *boxed_opaque_existential_2;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58[3];
  uint64_t v59;
  __int128 v60;
  uint64_t v61;

  v3 = v2;
  v6 = *v2;
  v7 = type metadata accessor for ReplicatorRecord(0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v54 = (uint64_t)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v6 + 80);
  v51 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v52 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v55 = (char *)&v48 - v13;
  v14 = type metadata accessor for ReplicatorRecord.Value(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v21 = (uint64_t *)((char *)&v48 - v20);
  v22 = *(int *)(v7 + 24);
  v53 = a1;
  v23 = *(_QWORD *)(a1 + v22);
  if (*(_QWORD *)(v23 + 16) && (v24 = v3[15], v25 = sub_2453C653C(v24), (v26 & 1) != 0))
  {
    sub_2453BA364(*(_QWORD *)(v23 + 56) + *(_QWORD *)(v15 + 72) * v25, (uint64_t)v18, type metadata accessor for ReplicatorRecord.Value);
    sub_2453D062C((uint64_t)v18, (uint64_t)v21, type metadata accessor for ReplicatorRecord.Value);
    sub_2453D02E0((uint64_t)(v3 + 18), (uint64_t)&v56, (uint64_t *)&unk_257464550);
    v49 = a2;
    v50 = v24;
    if (v57)
    {
      sub_2453CBAF0(&v56, v58);
    }
    else
    {
      v29 = v3[5];
      v48 = *((_OWORD *)v3 + 4);
      v30 = __swift_project_boxed_opaque_existential_1(v3 + 2, v29);
      v59 = v29;
      v60 = v48;
      boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2(v58);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(boxed_opaque_existential_2, v30, v29);
      sub_2453D055C((uint64_t)&v56, (uint64_t *)&unk_257464550);
    }
    v32 = v59;
    v33 = *((_QWORD *)&v60 + 1);
    __swift_project_boxed_opaque_existential_1(v58, v59);
    v34 = *v21;
    v35 = v21[1];
    v36 = *(_QWORD *)(v33 + 8);
    v37 = *(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v36 + 8);
    sub_2453CFFAC(*v21, v35);
    v38 = *(_QWORD *)(v6 + 88);
    v47 = v36;
    v39 = v55;
    v40 = v61;
    v37(v10, v34, v35, v50, v10, *(_QWORD *)(v38 + 8), *(_QWORD *)(v38 + 16), v32, v47);
    sub_2453BA3A8((uint64_t)v21, type metadata accessor for ReplicatorRecord.Value);
    sub_2453BDCF8(v34, v35);
    v61 = v40;
    if (!v40)
    {
      v41 = v52;
      v42 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
      v42(v52, v39, v10);
      v43 = v54;
      sub_2453BA364(v53, v54, type metadata accessor for ReplicatorRecord);
      v44 = v49;
      v42(v49, v41, v10);
      v46 = type metadata accessor for ReplicatorStore.Entry(0, v10, v38, v45);
      sub_2453D062C(v43, (uint64_t)&v44[*(int *)(v46 + 36)], type metadata accessor for ReplicatorRecord);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v44, 0, 1, v46);
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  }
  else
  {
    v27 = type metadata accessor for ReplicatorStore.Entry(0, v10, *(_QWORD *)(v6 + 88), v19);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(a2, 1, 1, v27);
  }
}

uint64_t sub_2453C56B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD);
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  char *v24;
  _QWORD *v25;

  v22[1] = a1;
  v6 = *a1;
  v25 = a1 + 31;
  v23 = type metadata accessor for ReplicatorStore.Entry(255, *(_QWORD *)(v6 + 80), *(_QWORD *)(v6 + 88), a4);
  v7 = sub_24544406C();
  MEMORY[0x24BDAC7A8](v7);
  v24 = (char *)v22 - v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v22[0] = (char *)v22 - v11;
  v12 = sub_24544406C();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v22 - v13;
  v15 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x24BDAC7A8](v15);
  sub_2453BA364(a2, (uint64_t)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
  sub_245444144();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, AssociatedTypeWitness);
  swift_beginAccess();
  sub_2453B8BF4(&qword_257464530, type metadata accessor for ReplicatorRecord.ID, (uint64_t)&protocol conformance descriptor for ReplicatorRecord.ID);
  sub_245443D30();
  sub_245443D48();
  swift_endAccess();
  sub_245444144();
  v19 = v23;
  v18 = v24;
  v20 = *(_QWORD *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v24, a3, v23);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v19);
  swift_beginAccess();
  swift_getAssociatedConformanceWitness();
  sub_245443D30();
  sub_245443D48();
  return swift_endAccess();
}

uint64_t sub_2453C597C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  char v14[16];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;

  v18 = a2;
  v3 = *a1;
  swift_beginAccess();
  v4 = a1[31];
  v5 = *(_QWORD *)(v3 + 88);
  v15 = *(_QWORD *)(v3 + 80);
  v16 = v5;
  v17 = v4;
  swift_getAssociatedTypeWitness();
  type metadata accessor for ReplicatorStore.Entry(255, v15, v5, v6);
  swift_getAssociatedConformanceWitness();
  v7 = sub_245443D30();
  v9 = (char *)type metadata accessor for ReplicatorStore.Change(0, v15, v5, v8);
  swift_bridgeObjectRetain();
  v10 = MEMORY[0x249534380](MEMORY[0x24BEE04E8], v7);
  v12 = sub_2453BE364((void (*)(char *, char *))sub_2453D07C8, (uint64_t)v14, v7, v9, MEMORY[0x24BEE4078], v10, MEMORY[0x24BEE40A8], v11);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  type metadata accessor for ReplicatorRecord.ID(255);
  sub_2453B8BF4(&qword_257464530, type metadata accessor for ReplicatorRecord.ID, (uint64_t)&protocol conformance descriptor for ReplicatorRecord.ID);
  sub_245443D30();
  sub_245443D24();
  swift_endAccess();
  swift_beginAccess();
  sub_245443D24();
  result = swift_endAccess();
  *v18 = v12;
  return result;
}

uint64_t sub_2453C5B78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t, uint64_t);
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v40 = a2;
  v41 = a3;
  v8 = type metadata accessor for ReplicatorRecord(0);
  MEMORY[0x24BDAC7A8](v8);
  v39 = (uint64_t)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = type metadata accessor for ReplicatorStore.Entry(255, a2, a3, v11);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v33 = TupleTypeMetadata2;
  v14 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v35 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v32 - v16;
  type metadata accessor for ReplicatorRecord.ID(255);
  v18 = a4 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v36 = a4;
  v37 = v18;
  v19 = *(int *)(TupleTypeMetadata2 + 48);
  v20 = &v17[v19];
  v38 = &v17[v19];
  v21 = a1;
  v32 = a1;
  v22 = a1 + v19;
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v24(v17, v21, AssociatedTypeWitness);
  v34 = *(_QWORD *)(v12 - 8);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
  v25(v20, v22, v12);
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a4, v17, AssociatedTypeWitness);
  v26 = v35;
  v27 = &v35[*(int *)(v33 + 48)];
  v24(v35, v32, AssociatedTypeWitness);
  v25(v27, v22, v12);
  v28 = v39;
  sub_2453BA364((uint64_t)&v27[*(int *)(v12 + 36)], v39, type metadata accessor for ReplicatorRecord);
  v29 = *(void (**)(char *, uint64_t))(v34 + 8);
  v29(v27, v12);
  sub_2453BA364(v28, v37, type metadata accessor for ReplicatorRecord.ID);
  sub_2453BA3A8(v28, type metadata accessor for ReplicatorRecord);
  type metadata accessor for ReplicatorStore.Change(0, v40, v41, v30);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v26, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))v29)(v38, v12);
}

uint64_t sub_2453C5DF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E4F0);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v27 - v10;
  v12 = *(int *)(v9 + 48);
  v13 = (char *)&v27 + v12 - v10;
  v14 = a1 + v12;
  v29 = a1;
  sub_2453BA364(a1, (uint64_t)&v27 - v10, type metadata accessor for ReplicatorRecord.ID);
  v15 = sub_245443B14();
  v16 = *(_QWORD *)(v15 - 8);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v28 = v14;
  v27(v13, v14, v15);
  v18 = *((_QWORD *)v11 + 2);
  v17 = *((_QWORD *)v11 + 3);
  swift_bridgeObjectRetain();
  sub_2453BA3A8((uint64_t)v11, type metadata accessor for ReplicatorRecord.ID);
  if (v18 == *(_QWORD *)(a2 + 96) && v17 == *(_QWORD *)(a2 + 104))
  {
    swift_bridgeObjectRelease();
    v21 = *(void (**)(char *, uint64_t))(v16 + 8);
    v21(v13, v15);
    v22 = v30;
  }
  else
  {
    v20 = sub_245444390();
    swift_bridgeObjectRelease();
    v21 = *(void (**)(char *, uint64_t))(v16 + 8);
    v21(v13, v15);
    v22 = v30;
    if ((v20 & 1) == 0)
    {
      v23 = type metadata accessor for ReplicatorRecord.ID(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
    }
  }
  v25 = &v8[*(int *)(v5 + 48)];
  sub_2453BA364(v29, (uint64_t)v8, type metadata accessor for ReplicatorRecord.ID);
  v27(v25, v28, v15);
  sub_2453D062C((uint64_t)v8, v22, type metadata accessor for ReplicatorRecord.ID);
  v26 = type metadata accessor for ReplicatorRecord.ID(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v22, 0, 1, v26);
  return ((uint64_t (*)(char *, uint64_t))v21)(v25, v15);
}

uint64_t sub_2453C6008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a3;
  v25 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7 = sub_24544406C();
  MEMORY[0x24BDAC7A8](v7);
  v22 = (char *)&v19 - v8;
  v23 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x24BDAC7A8](v23);
  v21 = (uint64_t)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ReplicatorStore.Entry(255, v5, v4, v10);
  v12 = sub_24544406C();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v19 - v14;
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v13);
  v19 = a2;
  sub_245444144();
  v16 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v15, a2, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v15, 0, 1, v11);
  swift_beginAccess();
  swift_getAssociatedConformanceWitness();
  sub_245443D30();
  sub_245443D48();
  swift_endAccess();
  sub_2453BA364(v24, v21, type metadata accessor for ReplicatorRecord.ID);
  v17 = v22;
  sub_245444144();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, AssociatedTypeWitness);
  swift_beginAccess();
  sub_2453B8BF4(&qword_257464530, type metadata accessor for ReplicatorRecord.ID, (uint64_t)&protocol conformance descriptor for ReplicatorRecord.ID);
  sub_245443D30();
  sub_245443D48();
  return swift_endAccess();
}

uint64_t sub_2453C62CC(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_2453C62EC(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_2453C6350;
  return v6(a1);
}

uint64_t sub_2453C6350()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_2453C639C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_2453C656C(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v17 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_2453CAA58();
      v9 = v17;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for ReplicatorRecord.ID(0);
    sub_2453BA3A8(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, type metadata accessor for ReplicatorRecord.ID);
    v12 = *(_QWORD *)(v9 + 56);
    v13 = type metadata accessor for ReplicatorRecord(0);
    v14 = *(_QWORD *)(v13 - 8);
    sub_2453D062C(v12 + *(_QWORD *)(v14 + 72) * v6, a2, type metadata accessor for ReplicatorRecord);
    sub_2454205E0(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v13);
  }
  else
  {
    v16 = type metadata accessor for ReplicatorRecord(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a2, 1, 1, v16);
  }
}

unint64_t sub_2453C64D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_245444414();
  sub_245443DF0();
  v4 = sub_245444444();
  return sub_2453C983C(a1, a2, v4);
}

unint64_t sub_2453C653C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_245444408();
  return sub_2453C991C(a1, v2);
}

unint64_t sub_2453C656C(_QWORD *a1)
{
  uint64_t v2;

  sub_245444414();
  ReplicatorRecord.ID.hash(into:)();
  v2 = sub_245444444();
  return sub_2453C99B8(a1, v2);
}

unint64_t sub_2453C65C4(uint64_t a1)
{
  uint64_t v2;

  sub_245443D9C();
  sub_245444414();
  sub_245443DF0();
  v2 = sub_245444444();
  swift_bridgeObjectRelease();
  return sub_2453C9DA4(a1, v2);
}

unint64_t sub_2453C6644(uint64_t a1)
{
  uint64_t v2;

  sub_245443B14();
  sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  v2 = sub_245443D54();
  return sub_2453C9F18(a1, v2);
}

uint64_t sub_2453C66B0(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;

  v3 = v2;
  v5 = type metadata accessor for ReplicatorRecord.Value(0);
  v38 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2574645B8);
  v39 = a2;
  result = sub_24544421C();
  v10 = result;
  if (*(_QWORD *)(v8 + 16))
  {
    v35 = v3;
    v11 = 0;
    v12 = *(_QWORD *)(v8 + 64);
    v37 = (_QWORD *)(v8 + 64);
    v13 = 1 << *(_BYTE *)(v8 + 32);
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v15 = v14 & v12;
    v36 = (unint64_t)(v13 + 63) >> 6;
    v16 = result + 64;
    while (1)
    {
      if (v15)
      {
        v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v19 = v18 | (v11 << 6);
      }
      else
      {
        v20 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = (uint64_t)v37;
        if (v20 >= v36)
          goto LABEL_34;
        v21 = v37[v20];
        ++v11;
        if (!v21)
        {
          v11 = v20 + 1;
          if (v20 + 1 >= v36)
            goto LABEL_34;
          v21 = v37[v11];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v36)
            {
LABEL_34:
              if ((v39 & 1) == 0)
              {
                result = swift_release();
                v3 = v35;
                goto LABEL_41;
              }
              v33 = 1 << *(_BYTE *)(v8 + 32);
              if (v33 >= 64)
                bzero(v37, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v37 = -1 << v33;
              v3 = v35;
              *(_QWORD *)(v8 + 16) = 0;
              break;
            }
            v21 = v37[v22];
            if (!v21)
            {
              while (1)
              {
                v11 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_43;
                if (v11 >= v36)
                  goto LABEL_34;
                v21 = v37[v11];
                ++v22;
                if (v21)
                  goto LABEL_21;
              }
            }
            v11 = v22;
          }
        }
LABEL_21:
        v15 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v11 << 6);
      }
      v23 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v19);
      v24 = *(_QWORD *)(v38 + 72);
      v25 = *(_QWORD *)(v8 + 56) + v24 * v19;
      if ((v39 & 1) != 0)
        sub_2453D062C(v25, (uint64_t)v7, type metadata accessor for ReplicatorRecord.Value);
      else
        sub_2453BA364(v25, (uint64_t)v7, type metadata accessor for ReplicatorRecord.Value);
      result = sub_245444408();
      v26 = -1 << *(_BYTE *)(v10 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v16 + 8 * v28);
        }
        while (v32 == -1);
        v17 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v17) = v23;
      result = sub_2453D062C((uint64_t)v7, *(_QWORD *)(v10 + 56) + v24 * v17, type metadata accessor for ReplicatorRecord.Value);
      ++*(_QWORD *)(v10 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v10;
  return result;
}

uint64_t sub_2453C69E0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  __int128 v41;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E040);
  v40 = a2;
  v6 = sub_24544421C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v39 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v37 = v2;
  v38 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v38)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v39 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v38)
        goto LABEL_33;
      v24 = *(_QWORD *)(v39 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_33:
          swift_release();
          v3 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v39 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v13 >= v38)
              goto LABEL_33;
            v24 = *(_QWORD *)(v39 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v13 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v5 + 56) + 32 * v21;
    v34 = *(_QWORD *)v33;
    v35 = *(_QWORD *)(v33 + 8);
    v41 = *(_OWORD *)(v33 + 16);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_245444414();
    sub_245443DF0();
    result = sub_245444444();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v16 == v27;
        if (v16 == v27)
          v16 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v32;
    v18[1] = v31;
    v19 = *(_QWORD *)(v7 + 56) + 32 * v17;
    *(_QWORD *)v19 = v34;
    *(_QWORD *)(v19 + 8) = v35;
    *(_OWORD *)(v19 + 16) = v41;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v37;
  v23 = (_QWORD *)(v5 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_2453C6D0C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t i;
  char v40;
  char v41;
  char v42;
  __int128 v43;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E170);
  v40 = a2;
  v6 = sub_24544421C();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37)
          goto LABEL_33;
        v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v37)
            goto LABEL_33;
          v23 = v38[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v40 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v5 + 32);
                if (v36 >= 64)
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v36;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v37)
                  goto LABEL_33;
                v23 = v38[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v31 = *v29;
      v30 = v29[1];
      v32 = *(_QWORD *)(v5 + 56) + 48 * v21;
      v33 = *(_QWORD *)v32;
      v34 = *(_QWORD *)(v32 + 8);
      v35 = *(_BYTE *)(v32 + 16);
      v43 = *(_OWORD *)(v32 + 24);
      v41 = *(_BYTE *)(v32 + 40);
      v42 = *(_BYTE *)(v32 + 17);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      sub_245444414();
      sub_245443DF0();
      result = sub_245444444();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v31;
      v18[1] = v30;
      v19 = *(_QWORD *)(v7 + 56) + 48 * v17;
      *(_QWORD *)v19 = v33;
      *(_QWORD *)(v19 + 8) = v34;
      *(_BYTE *)(v19 + 16) = v35;
      *(_BYTE *)(v19 + 17) = v42;
      *(_OWORD *)(v19 + 24) = v43;
      *(_BYTE *)(v19 + 40) = v41;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_2453C705C(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  int v41;
  __int128 v42;

  v5 = v3;
  v7 = sub_245443B14();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v41 = a2;
  v12 = sub_24544421C();
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_41;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v40 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v38 = v3;
  v39 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain();
  v20 = 0;
  while (1)
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v39)
      break;
    v25 = v40;
    v26 = v40[v24];
    ++v20;
    if (!v26)
    {
      v20 = v24 + 1;
      if (v24 + 1 >= v39)
        goto LABEL_34;
      v26 = v40[v20];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v39)
        {
LABEL_34:
          swift_release();
          v5 = v38;
          if ((v41 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v26 = v40[v27];
        if (!v26)
        {
          while (1)
          {
            v20 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_43;
            if (v20 >= v39)
              goto LABEL_34;
            v26 = v40[v20];
            ++v27;
            if (v26)
              goto LABEL_21;
          }
        }
        v20 = v27;
      }
    }
LABEL_21:
    v17 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    v28 = *(_QWORD *)(v8 + 72);
    v29 = *(_QWORD *)(v11 + 48) + v28 * v23;
    if ((v41 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 32))(v10, v29, v7);
      v42 = *(_OWORD *)(*(_QWORD *)(v11 + 56) + 16 * v23);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, v29, v7);
      v42 = *(_OWORD *)(*(_QWORD *)(v11 + 56) + 16 * v23);
      swift_retain();
    }
    sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = sub_245443D54();
    v30 = -1 << *(_BYTE *)(v13 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v18 + 8 * (v31 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v18 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v18 + 8 * v32);
      }
      while (v36 == -1);
      v21 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(_QWORD *)(v13 + 48) + v28 * v21, v10, v7);
    *(_OWORD *)(*(_QWORD *)(v13 + 56) + 16 * v21) = v42;
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release();
  v5 = v38;
  v25 = v40;
  if ((v41 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v37 = 1 << *(_BYTE *)(v11 + 32);
  if (v37 >= 64)
    bzero(v25, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v37;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v5 = v13;
  return result;
}

uint64_t sub_2453C73F8(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  __int128 v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257464818);
  v6 = a2;
  v7 = sub_24544421C();
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v14 << 6);
      }
      else
      {
        v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35)
          goto LABEL_33;
        v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          v14 = v23 + 1;
          if (v23 + 1 >= v35)
            goto LABEL_33;
          v24 = v36[v14];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v6 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                v14 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_40;
                if (v14 >= v35)
                  goto LABEL_33;
                v24 = v36[v14];
                ++v25;
                if (v24)
                  goto LABEL_30;
              }
            }
            v14 = v25;
          }
        }
LABEL_30:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      v30 = 16 * v22;
      v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v30);
      v33 = *v31;
      v32 = v31[1];
      v37 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_2453CFFAC(v37, *((unint64_t *)&v37 + 1));
      }
      sub_245444414();
      sub_245443DF0();
      result = sub_245444444();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 16 * v18;
      v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
      *v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + v19) = v37;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_2453C7704(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;

  v3 = v2;
  v56 = sub_245443B14();
  v5 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v50 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ReplicatorRecord(0);
  v54 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v51 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for ReplicatorRecord.ID(0);
  v55 = *(_QWORD *)(v60 - 8);
  MEMORY[0x24BDAC7A8](v60);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2574645B0);
  v57 = a2;
  v15 = sub_24544421C();
  v16 = v15;
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_44;
  v53 = v5;
  v47 = v2;
  v17 = 1 << *(_BYTE *)(v14 + 32);
  v18 = *(_QWORD *)(v14 + 64);
  v49 = (_QWORD *)(v14 + 64);
  if (v17 < 64)
    v19 = ~(-1 << v17);
  else
    v19 = -1;
  v20 = v19 & v18;
  v48 = (unint64_t)(v17 + 63) >> 6;
  v21 = v15 + 64;
  result = swift_retain();
  v23 = 0;
  v52 = v14;
  v24 = (uint64_t)v51;
  while (1)
  {
    if (v20)
    {
      v26 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v27 = v26 | (v23 << 6);
      goto LABEL_22;
    }
    v28 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v28 >= v48)
      break;
    v29 = v49;
    v30 = v49[v28];
    ++v23;
    if (!v30)
    {
      v23 = v28 + 1;
      if (v28 + 1 >= v48)
        goto LABEL_37;
      v30 = v49[v23];
      if (!v30)
      {
        v31 = v28 + 2;
        if (v31 >= v48)
        {
LABEL_37:
          swift_release();
          v3 = v47;
          if ((v57 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v30 = v49[v31];
        if (!v30)
        {
          while (1)
          {
            v23 = v31 + 1;
            if (__OFADD__(v31, 1))
              goto LABEL_46;
            if (v23 >= v48)
              goto LABEL_37;
            v30 = v49[v23];
            ++v31;
            if (v30)
              goto LABEL_21;
          }
        }
        v23 = v31;
      }
    }
LABEL_21:
    v20 = (v30 - 1) & v30;
    v27 = __clz(__rbit64(v30)) + (v23 << 6);
LABEL_22:
    v32 = *(_QWORD *)(v14 + 48) + *(_QWORD *)(v55 + 72) * v27;
    v58 = *(_QWORD *)(v55 + 72);
    v59 = v23;
    if ((v57 & 1) != 0)
    {
      sub_2453D062C(v32, (uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
      v33 = *(_QWORD *)(v54 + 72);
      sub_2453D062C(*(_QWORD *)(v14 + 56) + v33 * v27, v24, type metadata accessor for ReplicatorRecord);
    }
    else
    {
      sub_2453BA364(v32, (uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
      v33 = *(_QWORD *)(v54 + 72);
      sub_2453BA364(*(_QWORD *)(v14 + 56) + v33 * v27, v24, type metadata accessor for ReplicatorRecord);
    }
    sub_245444414();
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    sub_2453BA364((uint64_t)&v13[*(int *)(v60 + 28)], (uint64_t)v9, type metadata accessor for ReplicatorRecord.ID.Ownership);
    v34 = v53;
    v35 = v56;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v9, 1, v56) == 1)
    {
      sub_245444420();
    }
    else
    {
      v36 = v9;
      v37 = v50;
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v50, v36, v35);
      sub_245444420();
      sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
      sub_245443D60();
      v38 = v37;
      v9 = v36;
      v24 = (uint64_t)v51;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v38, v35);
    }
    v14 = v52;
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    result = sub_245444444();
    v39 = -1 << *(_BYTE *)(v16 + 32);
    v40 = result & ~v39;
    v41 = v40 >> 6;
    if (((-1 << v40) & ~*(_QWORD *)(v21 + 8 * (v40 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v21 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v42 = 0;
      v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v44 = v41 == v43;
        if (v41 == v43)
          v41 = 0;
        v42 |= v44;
        v45 = *(_QWORD *)(v21 + 8 * v41);
      }
      while (v45 == -1);
      v25 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(_QWORD *)(v21 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    sub_2453D062C((uint64_t)v13, *(_QWORD *)(v16 + 48) + v58 * v25, type metadata accessor for ReplicatorRecord.ID);
    result = sub_2453D062C(v24, *(_QWORD *)(v16 + 56) + v33 * v25, type metadata accessor for ReplicatorRecord);
    ++*(_QWORD *)(v16 + 16);
    v23 = v59;
  }
  swift_release();
  v3 = v47;
  v29 = v49;
  if ((v57 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v46 = 1 << *(_BYTE *)(v14 + 32);
  if (v46 >= 64)
    bzero(v29, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v29 = -1 << v46;
  *(_QWORD *)(v14 + 16) = 0;
LABEL_44:
  result = swift_release();
  *v3 = v16;
  return result;
}

uint64_t sub_2453C7CF0(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;

  v3 = v2;
  v53 = sub_245443B14();
  v5 = *(_QWORD *)(v53 - 8);
  MEMORY[0x24BDAC7A8](v53);
  v47 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x24BDAC7A8](v7);
  v52 = (uint64_t)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for ReplicatorRecord.ID(0);
  v51 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257464820);
  v54 = a2;
  v12 = sub_24544421C();
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_44;
  v50 = v5;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v46 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v44 = v2;
  v45 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain();
  v20 = 0;
  v49 = v11;
  v21 = v48;
  while (1)
  {
    if (v17)
    {
      v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v25 >= v45)
      break;
    v26 = v46;
    v27 = v46[v25];
    ++v20;
    if (!v27)
    {
      v20 = v25 + 1;
      if (v25 + 1 >= v45)
        goto LABEL_37;
      v27 = v46[v20];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v45)
        {
LABEL_37:
          swift_release();
          v3 = v44;
          if ((v54 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v27 = v46[v28];
        if (!v27)
        {
          while (1)
          {
            v20 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_46;
            if (v20 >= v45)
              goto LABEL_37;
            v27 = v46[v20];
            ++v28;
            if (v27)
              goto LABEL_21;
          }
        }
        v20 = v28;
      }
    }
LABEL_21:
    v17 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_22:
    v29 = *(_QWORD *)(v51 + 72);
    v30 = *(_QWORD *)(v11 + 48) + v29 * v24;
    if ((v54 & 1) != 0)
    {
      sub_2453D062C(v30, (uint64_t)v10, type metadata accessor for ReplicatorRecord.ID);
      v55 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v24);
    }
    else
    {
      sub_2453BA364(v30, (uint64_t)v10, type metadata accessor for ReplicatorRecord.ID);
      v55 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v24);
      swift_bridgeObjectRetain();
    }
    sub_245444414();
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    v31 = v52;
    sub_2453BA364((uint64_t)&v10[*(int *)(v21 + 28)], v52, type metadata accessor for ReplicatorRecord.ID.Ownership);
    v32 = v50;
    v33 = v53;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v31, 1, v53) == 1)
    {
      sub_245444420();
    }
    else
    {
      v34 = v47;
      (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v47, v31, v33);
      sub_245444420();
      sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
      sub_245443D60();
      v35 = v34;
      v21 = v48;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v33);
    }
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    result = sub_245444444();
    v36 = -1 << *(_BYTE *)(v13 + 32);
    v37 = result & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v18 + 8 * (v37 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v18 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
      v11 = v49;
    }
    else
    {
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      v11 = v49;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)(v18 + 8 * v38);
      }
      while (v42 == -1);
      v22 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(_QWORD *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = sub_2453D062C((uint64_t)v10, *(_QWORD *)(v13 + 48) + v29 * v22, type metadata accessor for ReplicatorRecord.ID);
    *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v22) = v55;
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release();
  v3 = v44;
  v26 = v46;
  if ((v54 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v43 = 1 << *(_BYTE *)(v11 + 32);
  if (v43 >= 64)
    bzero(v26, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v43;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_44:
  result = swift_release();
  *v3 = v13;
  return result;
}

uint64_t sub_2453C824C(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  _QWORD *v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  void (**v34)(char *, unint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  int64_t v53;
  _QWORD *v54;
  void (**v55)(char *, unint64_t, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t (**v63)(unint64_t, char *, uint64_t);
  uint64_t v64;
  int64_t v65;
  uint64_t v66;

  v3 = v2;
  v5 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x24BDAC7A8](v5);
  v61 = (uint64_t)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_245443B14();
  v7 = *(_QWORD *)(v66 - 8);
  v8 = MEMORY[0x24BDAC7A8](v66);
  v56 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v51 - v10;
  v57 = type metadata accessor for ReplicatorRecord.ID(0);
  v60 = *(_QWORD *)(v57 - 8);
  MEMORY[0x24BDAC7A8](v57);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E210);
  v62 = a2;
  v15 = sub_24544421C();
  v16 = v15;
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_44;
  v52 = v2;
  v17 = 1 << *(_BYTE *)(v14 + 32);
  v18 = *(_QWORD *)(v14 + 64);
  v54 = (_QWORD *)(v14 + 64);
  if (v17 < 64)
    v19 = ~(-1 << v17);
  else
    v19 = -1;
  v20 = v19 & v18;
  v53 = (unint64_t)(v17 + 63) >> 6;
  v55 = (void (**)(char *, unint64_t, uint64_t))(v7 + 16);
  v59 = v7;
  v63 = (uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32);
  v21 = v15 + 64;
  result = swift_retain();
  v23 = 0;
  v24 = v66;
  v25 = v57;
  v58 = v14;
  while (1)
  {
    if (v20)
    {
      v27 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v28 = v27 | (v23 << 6);
      goto LABEL_22;
    }
    v29 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v29 >= v53)
      break;
    v30 = v54;
    v31 = v54[v29];
    ++v23;
    if (!v31)
    {
      v23 = v29 + 1;
      if (v29 + 1 >= v53)
        goto LABEL_37;
      v31 = v54[v23];
      if (!v31)
      {
        v32 = v29 + 2;
        if (v32 >= v53)
        {
LABEL_37:
          swift_release();
          v3 = v52;
          if ((v62 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v31 = v54[v32];
        if (!v31)
        {
          while (1)
          {
            v23 = v32 + 1;
            if (__OFADD__(v32, 1))
              goto LABEL_46;
            if (v23 >= v53)
              goto LABEL_37;
            v31 = v54[v23];
            ++v32;
            if (v31)
              goto LABEL_21;
          }
        }
        v23 = v32;
      }
    }
LABEL_21:
    v20 = (v31 - 1) & v31;
    v28 = __clz(__rbit64(v31)) + (v23 << 6);
LABEL_22:
    v33 = *(_QWORD *)(v14 + 48) + *(_QWORD *)(v60 + 72) * v28;
    v64 = *(_QWORD *)(v60 + 72);
    v65 = v23;
    if ((v62 & 1) != 0)
    {
      sub_2453D062C(v33, (uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
      v34 = (void (**)(char *, unint64_t, uint64_t))v63;
    }
    else
    {
      sub_2453BA364(v33, (uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
      v34 = v55;
    }
    v35 = *(_QWORD *)(v14 + 56);
    v36 = v59;
    v37 = *(_QWORD *)(v59 + 72);
    (*v34)(v11, v35 + v37 * v28, v24);
    sub_245444414();
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_245443DF0();
    v38 = v66;
    swift_bridgeObjectRelease();
    v39 = v61;
    sub_2453BA364((uint64_t)&v13[*(int *)(v25 + 28)], v61, type metadata accessor for ReplicatorRecord.ID.Ownership);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v39, 1, v38) == 1)
    {
      sub_245444420();
    }
    else
    {
      v40 = v11;
      v41 = v56;
      (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v56, v39, v38);
      sub_245444420();
      sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
      sub_245443D60();
      v42 = v41;
      v11 = v40;
      v25 = v57;
      (*(void (**)(char *, uint64_t))(v36 + 8))(v42, v38);
    }
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    result = sub_245444444();
    v43 = -1 << *(_BYTE *)(v16 + 32);
    v44 = result & ~v43;
    v45 = v44 >> 6;
    if (((-1 << v44) & ~*(_QWORD *)(v21 + 8 * (v44 >> 6))) != 0)
    {
      v26 = __clz(__rbit64((-1 << v44) & ~*(_QWORD *)(v21 + 8 * (v44 >> 6)))) | v44 & 0x7FFFFFFFFFFFFFC0;
      v24 = v66;
    }
    else
    {
      v46 = 0;
      v47 = (unint64_t)(63 - v43) >> 6;
      v24 = v66;
      do
      {
        if (++v45 == v47 && (v46 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v48 = v45 == v47;
        if (v45 == v47)
          v45 = 0;
        v46 |= v48;
        v49 = *(_QWORD *)(v21 + 8 * v45);
      }
      while (v49 == -1);
      v26 = __clz(__rbit64(~v49)) + (v45 << 6);
    }
    *(_QWORD *)(v21 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    sub_2453D062C((uint64_t)v13, *(_QWORD *)(v16 + 48) + v64 * v26, type metadata accessor for ReplicatorRecord.ID);
    result = (*v63)(*(_QWORD *)(v16 + 56) + v37 * v26, v11, v24);
    ++*(_QWORD *)(v16 + 16);
    v14 = v58;
    v23 = v65;
  }
  swift_release();
  v3 = v52;
  v30 = v54;
  if ((v62 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v50 = 1 << *(_BYTE *)(v14 + 32);
  if (v50 >= 64)
    bzero(v30, ((unint64_t)(v50 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v30 = -1 << v50;
  *(_QWORD *)(v14 + 16) = 0;
LABEL_44:
  result = swift_release();
  *v3 = v16;
  return result;
}

uint64_t sub_2453C8824(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38[3];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257464830);
  v37 = a2;
  v6 = sub_24544421C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v35)
        goto LABEL_34;
      v20 = *(_QWORD *)(v36 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v20 = *(_QWORD *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_43;
            if (v13 >= v35)
              goto LABEL_34;
            v20 = *(_QWORD *)(v36 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v13 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v24 = *v22;
    v23 = v22[1];
    v25 = (__int128 *)(*(_QWORD *)(v5 + 56) + 48 * v17);
    if ((v37 & 1) != 0)
    {
      sub_2453CBAF0(v25, v38);
    }
    else
    {
      sub_2453CFFF0((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    sub_245444414();
    sub_245443DF0();
    result = sub_245444444();
    v26 = -1 << *(_BYTE *)(v7 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
    *v15 = v24;
    v15[1] = v23;
    result = (uint64_t)sub_2453CBAF0(v38, (_OWORD *)(*(_QWORD *)(v7 + 56) + 48 * v14));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v19 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_2453C8B48(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;

  v3 = v2;
  v5 = sub_245443A24();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257464828);
  result = sub_24544421C();
  v11 = result;
  if (*(_QWORD *)(v9 + 16))
  {
    v36 = v3;
    v12 = 0;
    v13 = *(_QWORD *)(v9 + 64);
    v39 = (_QWORD *)(v9 + 64);
    v14 = 1 << *(_BYTE *)(v9 + 32);
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v16 = v15 & v13;
    v38 = (unint64_t)(v14 + 63) >> 6;
    v17 = result + 64;
    v37 = a2;
    v18 = 16;
    if ((a2 & 1) != 0)
      v18 = 32;
    v40 = v18;
    while (1)
    {
      if (v16)
      {
        v20 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v21 = v20 | (v12 << 6);
      }
      else
      {
        v22 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = (uint64_t)v39;
        if (v22 >= v38)
          goto LABEL_33;
        v23 = v39[v22];
        ++v12;
        if (!v23)
        {
          v12 = v22 + 1;
          if (v22 + 1 >= v38)
            goto LABEL_33;
          v23 = v39[v12];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_33:
              if ((v37 & 1) == 0)
              {
                result = swift_release();
                v3 = v36;
                goto LABEL_40;
              }
              v34 = 1 << *(_BYTE *)(v9 + 32);
              if (v34 >= 64)
                bzero(v39, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v39 = -1 << v34;
              v3 = v36;
              *(_QWORD *)(v9 + 16) = 0;
              break;
            }
            v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                v12 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_42;
                if (v12 >= v38)
                  goto LABEL_33;
                v23 = v39[v12];
                ++v24;
                if (v23)
                  goto LABEL_23;
              }
            }
            v12 = v24;
          }
        }
LABEL_23:
        v16 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v12 << 6);
      }
      v25 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v21);
      v26 = *(_QWORD *)(v6 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + v40))(v8, *(_QWORD *)(v9 + 56) + v26 * v21, v5);
      result = sub_245444408();
      v27 = -1 << *(_BYTE *)(v11 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v17 + 8 * v29);
        }
        while (v33 == -1);
        v19 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v17 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v19) = v25;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 56) + v26 * v19, v8, v5);
      ++*(_QWORD *)(v11 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v11;
  return result;
}

uint64_t sub_2453C8E78(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_2453C653C(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = type metadata accessor for ReplicatorRecord.Value(0);
        return sub_2453D0034(a1, v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v10, type metadata accessor for ReplicatorRecord.Value);
      }
      return sub_2453C9534(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_2453CA058();
      goto LABEL_7;
    }
    sub_2453C66B0(v13, a3 & 1);
    v20 = sub_2453C653C(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_2453C9534(v10, a2, a1, v16);
    }
  }
  result = sub_2454443A8();
  __break(1u);
  return result;
}

uint64_t sub_2453C8FA0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_2453C8FD0(a1, a2, a3, a4, &qword_2574639D0);
}

uint64_t sub_2453C8FAC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_2453C8FD0(a1, a2, a3, a4, &qword_25440E038);
}

uint64_t sub_2453C8FB8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_2453C8FD0(a1, a2, a3, a4, &qword_25440E6F8);
}

uint64_t sub_2453C8FC4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_2453C8FD0(a1, a2, a3, a4, &qword_2574645A8);
}

uint64_t sub_2453C8FD0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  _QWORD *v5;
  _QWORD **v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v7 = (_QWORD **)v5;
  v28 = a1;
  v29 = a2;
  v10 = sub_245443B14();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v5;
  v16 = sub_2453C6644(a3);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a4 & 1) != 0)
  {
LABEL_7:
    v22 = *v7;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = (_QWORD *)(v22[7] + 16 * v16);
      result = swift_release();
      v25 = v29;
      *v23 = v28;
      v23[1] = v25;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    sub_2453CA658(a5);
    goto LABEL_7;
  }
  sub_2453C705C(v19, a4 & 1, a5);
  v26 = sub_2453C6644(a3);
  if ((v20 & 1) != (v27 & 1))
  {
LABEL_14:
    result = sub_2454443A8();
    __break(1u);
    return result;
  }
  v16 = v26;
  v22 = *v7;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
  return sub_2453C95C0(v16, (uint64_t)v13, v28, v29, v22);
}

uint64_t sub_2453C9144(uint64_t a1, _QWORD *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_2453C656C(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];
      v21 = type metadata accessor for ReplicatorRecord(0);
      return sub_2453D0034(a1, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v13, type metadata accessor for ReplicatorRecord);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_2453CAA58();
    goto LABEL_7;
  }
  sub_2453C7704(v16, a3 & 1);
  v23 = sub_2453C656C(a2);
  if ((v17 & 1) != (v24 & 1))
  {
LABEL_14:
    result = sub_2454443A8();
    __break(1u);
    return result;
  }
  v13 = v23;
  v19 = *v4;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_2453BA364((uint64_t)a2, (uint64_t)v10, type metadata accessor for ReplicatorRecord.ID);
  return sub_2453C9660(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_2453C92B4(uint64_t a1, _QWORD *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_2453C656C(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v20 + 8 * v13) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_2453CACF0();
    goto LABEL_7;
  }
  sub_2453C7CF0(v16, a3 & 1);
  v22 = sub_2453C656C(a2);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    result = sub_2454443A8();
    __break(1u);
    return result;
  }
  v13 = v22;
  v19 = *v4;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_2453BA364((uint64_t)a2, (uint64_t)v10, type metadata accessor for ReplicatorRecord.ID);
  return sub_2453C9718(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_2453C9410(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_2453C653C(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = sub_245443A24();
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v10, a1, v18);
      }
      return sub_2453C97B0(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_2453CB3DC();
      goto LABEL_7;
    }
    sub_2453C8B48(v13, a3 & 1);
    v20 = sub_2453C653C(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_2453C97B0(v10, a2, a1, v16);
    }
  }
  result = sub_2454443A8();
  __break(1u);
  return result;
}

uint64_t sub_2453C9534(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  v7 = a4[7];
  v8 = type metadata accessor for ReplicatorRecord.Value(0);
  result = sub_2453D062C(a3, v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, type metadata accessor for ReplicatorRecord.Value);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

uint64_t sub_2453C95C0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = sub_245443B14();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = (_QWORD *)(a5[7] + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

uint64_t sub_2453C9660(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for ReplicatorRecord.ID(0);
  sub_2453D062C(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, type metadata accessor for ReplicatorRecord.ID);
  v10 = a4[7];
  v11 = type metadata accessor for ReplicatorRecord(0);
  result = sub_2453D062C(a3, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, type metadata accessor for ReplicatorRecord);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t sub_2453C9718(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for ReplicatorRecord.ID(0);
  result = sub_2453D062C(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, type metadata accessor for ReplicatorRecord.ID);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_2453C97B0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  v7 = a4[7];
  v8 = sub_245443A24();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, a3, v8);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

unint64_t sub_2453C983C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_245444390() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_245444390() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_2453C991C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_2453C99B8(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v5 = sub_245443B14();
  v48 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v40 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x24BDAC7A8](v7);
  v45 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E540);
  MEMORY[0x24BDAC7A8](v46);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x24BDAC7A8](v47);
  v13 = (uint64_t *)((char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = v2 + 64;
  v15 = -1 << *(_BYTE *)(v2 + 32);
  v16 = a2 & ~v15;
  if (((*(_QWORD *)(v2 + 64 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v44 = v5;
    v17 = ~v15;
    v18 = *(_QWORD *)(v11 + 72);
    v42 = v18;
    v43 = ~v15;
    v41 = v10;
    do
    {
      sub_2453BA364(*(_QWORD *)(v2 + 48) + v18 * v16, (uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
      v19 = *v13 == *a1 && v13[1] == a1[1];
      if (!v19 && (sub_245444390() & 1) == 0)
        goto LABEL_4;
      v20 = v13[2] == a1[2] && v13[3] == a1[3];
      if (!v20 && (sub_245444390() & 1) == 0 || (v13[4] != a1[4] || v13[5] != a1[5]) && (sub_245444390() & 1) == 0)
        goto LABEL_4;
      v21 = v14;
      v22 = *(int *)(v47 + 28);
      v23 = (uint64_t)a1 + v22;
      v24 = (uint64_t)&v10[*(int *)(v46 + 48)];
      sub_2453BA364((uint64_t)v13 + v22, (uint64_t)v10, type metadata accessor for ReplicatorRecord.ID.Ownership);
      sub_2453BA364(v23, v24, type metadata accessor for ReplicatorRecord.ID.Ownership);
      v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
      v26 = v44;
      if (v25((uint64_t)v10, 1, v44) == 1)
      {
        v27 = v25(v24, 1, v26);
        v14 = v21;
        v18 = v42;
        v17 = v43;
        if (v27 != 1)
          goto LABEL_23;
      }
      else
      {
        v28 = (uint64_t)v10;
        v29 = (uint64_t)v45;
        sub_2453BA364(v28, (uint64_t)v45, type metadata accessor for ReplicatorRecord.ID.Ownership);
        if (v25(v24, 1, v26) == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v29, v26);
          v14 = v21;
          v18 = v42;
          v17 = v43;
          v10 = v41;
LABEL_23:
          sub_2453D055C((uint64_t)v10, (uint64_t *)&unk_25440E540);
          goto LABEL_4;
        }
        v30 = v48;
        v31 = v40;
        (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v40, v24, v26);
        v32 = sub_245443AF0();
        v33 = *(void (**)(char *, uint64_t))(v30 + 8);
        v33(v31, v26);
        v33(v45, v26);
        v14 = v21;
        v18 = v42;
        v17 = v43;
        v10 = v41;
        if ((v32 & 1) == 0)
        {
          sub_2453BA3A8((uint64_t)v41, type metadata accessor for ReplicatorRecord.ID.Ownership);
          goto LABEL_4;
        }
      }
      sub_2453BA3A8((uint64_t)v10, type metadata accessor for ReplicatorRecord.ID.Ownership);
      v34 = *(int *)(v47 + 32);
      v35 = *(_QWORD *)((char *)v13 + v34);
      v36 = *(_QWORD *)((char *)v13 + v34 + 8);
      v37 = (_QWORD *)((char *)a1 + v34);
      if (v35 == *v37 && v36 == v37[1] || (sub_245444390() & 1) != 0)
      {
        sub_2453BA3A8((uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
        return v16;
      }
LABEL_4:
      sub_2453BA3A8((uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
      v16 = (v16 + 1) & v17;
    }
    while (((*(_QWORD *)(v14 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0);
  }
  return v16;
}

unint64_t sub_2453C9DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_245443D9C();
    v8 = v7;
    if (v6 == sub_245443D9C() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_245444390();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_245443D9C();
          v15 = v14;
          if (v13 == sub_245443D9C() && v15 == v16)
            break;
          v18 = sub_245444390();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_2453C9F18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_245443B14();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      sub_2453B8BF4(&qword_25440E1B0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v14 = sub_245443D6C();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

void *sub_2453CA058()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = type metadata accessor for ReplicatorRecord.Value(0);
  v27 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2574645B8);
  v5 = *v0;
  v6 = sub_245444210();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v26 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v15)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v11);
      if (!v22)
        break;
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_12:
    v18 = 8 * v17;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v20 = *(_QWORD *)(v27 + 72) * v17;
    sub_2453BA364(*(_QWORD *)(v5 + 56) + v20, (uint64_t)v4, type metadata accessor for ReplicatorRecord.Value);
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v19;
    result = (void *)sub_2453D062C((uint64_t)v4, *(_QWORD *)(v7 + 56) + v20, type metadata accessor for ReplicatorRecord.Value);
  }
  v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v11 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v11);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_2453CA284()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E040);
  v2 = *v0;
  v3 = sub_245444210();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v25 = *(_OWORD *)(v21 + 16);
    *v24 = v19;
    v24[1] = v18;
    v26 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v26 = v22;
    *(_QWORD *)(v26 + 8) = v23;
    *(_OWORD *)(v26 + 16) = v25;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2453CA448()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  _QWORD *v27;
  __int128 v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E170);
  v2 = *v0;
  v3 = sub_245444210();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v30 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v30 >= v13)
      goto LABEL_26;
    v31 = *(_QWORD *)(v6 + 8 * v30);
    ++v9;
    if (!v31)
    {
      v9 = v30 + 1;
      if (v30 + 1 >= v13)
        goto LABEL_26;
      v31 = *(_QWORD *)(v6 + 8 * v9);
      if (!v31)
        break;
    }
LABEL_25:
    v12 = (v31 - 1) & v31;
    v15 = __clz(__rbit64(v31)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 48 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = *(_BYTE *)(v21 + 16);
    v25 = *(_BYTE *)(v21 + 17);
    v26 = *(_BYTE *)(v21 + 40);
    v27 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v28 = *(_OWORD *)(v21 + 24);
    *v27 = v19;
    v27[1] = v18;
    v29 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v29 = v22;
    *(_QWORD *)(v29 + 8) = v23;
    *(_BYTE *)(v29 + 16) = v24;
    *(_BYTE *)(v29 + 17) = v25;
    *(_OWORD *)(v29 + 24) = v28;
    *(_BYTE *)(v29 + 40) = v26;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v32 = v30 + 2;
  if (v32 >= v13)
    goto LABEL_26;
  v31 = *(_QWORD *)(v6 + 8 * v32);
  if (v31)
  {
    v9 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v31 = *(_QWORD *)(v6 + 8 * v9);
    ++v32;
    if (v31)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2453CA628()
{
  return sub_2453CA658(&qword_2574639D0);
}

void *sub_2453CA634()
{
  return sub_2453CA658(&qword_25440E038);
}

void *sub_2453CA640()
{
  return sub_2453CA658(&qword_25440E6F8);
}

void *sub_2453CA64C()
{
  return sub_2453CA658(&qword_2574645A8);
}

void *sub_2453CA658(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(unint64_t, char *, uint64_t);
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;

  v3 = v1;
  v4 = sub_245443B14();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v8 = *v1;
  v9 = sub_245444210();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v3 = v10;
    return result;
  }
  v28 = v3;
  result = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v29 = v8 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    v25 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v18)
      goto LABEL_26;
    v26 = *(_QWORD *)(v29 + 8 * v25);
    ++v14;
    if (!v26)
    {
      v14 = v25 + 1;
      if (v25 + 1 >= v18)
        goto LABEL_26;
      v26 = *(_QWORD *)(v29 + 8 * v14);
      if (!v26)
        break;
    }
LABEL_25:
    v17 = (v26 - 1) & v26;
    v20 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_12:
    v21 = *(_QWORD *)(v5 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v21, v4);
    v22 = 16 * v20;
    v23 = *(_QWORD *)(v10 + 48) + v21;
    v24 = *(void (**)(unint64_t, char *, uint64_t))(v5 + 32);
    v30 = *(_OWORD *)(*(_QWORD *)(v8 + 56) + v22);
    v24(v23, v7, v4);
    *(_OWORD *)(*(_QWORD *)(v10 + 56) + v22) = v30;
    result = (void *)swift_retain();
  }
  v27 = v25 + 2;
  if (v27 >= v18)
  {
LABEL_26:
    result = (void *)swift_release();
    v3 = v28;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v29 + 8 * v27);
  if (v26)
  {
    v14 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v14 >= v18)
      goto LABEL_26;
    v26 = *(_QWORD *)(v29 + 8 * v14);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_2453CA894()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257464818);
  v2 = *v0;
  v3 = sub_245444210();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v24 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    result = (void *)sub_2453CFFAC(v24, *((unint64_t *)&v24 + 1));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_2453CAA58()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for ReplicatorRecord(0);
  v29 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ReplicatorRecord.ID(0);
  v28 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2574645B0);
  v8 = *v0;
  v9 = sub_245444210();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = (void *)swift_release();
LABEL_25:
    *v1 = v10;
    return result;
  }
  v25 = v1;
  result = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v13 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v14 = 1 << *(_BYTE *)(v8 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v8 + 64);
  v26 = v8 + 64;
  v27 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v27)
      goto LABEL_23;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v27)
        goto LABEL_23;
      v22 = *(_QWORD *)(v26 + 8 * v13);
      if (!v22)
        break;
    }
LABEL_22:
    v16 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    v19 = *(_QWORD *)(v28 + 72) * v18;
    sub_2453BA364(*(_QWORD *)(v8 + 48) + v19, (uint64_t)v7, type metadata accessor for ReplicatorRecord.ID);
    v20 = *(_QWORD *)(v29 + 72) * v18;
    sub_2453BA364(*(_QWORD *)(v8 + 56) + v20, (uint64_t)v4, type metadata accessor for ReplicatorRecord);
    sub_2453D062C((uint64_t)v7, *(_QWORD *)(v10 + 48) + v19, type metadata accessor for ReplicatorRecord.ID);
    result = (void *)sub_2453D062C((uint64_t)v4, *(_QWORD *)(v10 + 56) + v20, type metadata accessor for ReplicatorRecord);
  }
  v23 = v21 + 2;
  if (v23 >= v27)
  {
LABEL_23:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_25;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v27)
      goto LABEL_23;
    v22 = *(_QWORD *)(v26 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_2453CACF0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = type metadata accessor for ReplicatorRecord.ID(0);
  v27 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257464820);
  v5 = *v0;
  v6 = sub_245444210();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v26 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v15)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v11);
      if (!v22)
        break;
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v27 + 72) * v17;
    sub_2453BA364(*(_QWORD *)(v5 + 48) + v18, (uint64_t)v4, type metadata accessor for ReplicatorRecord.ID);
    v19 = 8 * v17;
    v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
    sub_2453D062C((uint64_t)v4, *(_QWORD *)(v7 + 48) + v18, type metadata accessor for ReplicatorRecord.ID);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v11 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v11);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_2453CAF28()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v36 = sub_245443B14();
  v1 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v35 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ReplicatorRecord.ID(0);
  v37 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v34 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E210);
  v31 = v0;
  v5 = *v0;
  v6 = sub_245444210();
  v7 = *(_QWORD *)(v5 + 16);
  v39 = v6;
  if (!v7)
  {
    result = (void *)swift_release();
    v29 = v39;
    v28 = v31;
LABEL_25:
    *v28 = v29;
    return result;
  }
  v8 = v6;
  result = (void *)(v6 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
  {
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
    v8 = v39;
  }
  v11 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v38 = v5;
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v32 = v5 + 64;
  v33 = (unint64_t)(v12 + 63) >> 6;
  v15 = (uint64_t)v34;
  v16 = v36;
  for (i = v39;
        ;
        result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(i + 56) + v22, v24, v16))
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v11 << 6);
      v20 = v38;
      goto LABEL_9;
    }
    v25 = v11 + 1;
    v20 = v38;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v25 >= v33)
      goto LABEL_23;
    v26 = *(_QWORD *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      v11 = v25 + 1;
      if (v25 + 1 >= v33)
        goto LABEL_23;
      v26 = *(_QWORD *)(v32 + 8 * v11);
      if (!v26)
        break;
    }
LABEL_22:
    v14 = (v26 - 1) & v26;
    v19 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_9:
    v21 = *(_QWORD *)(v37 + 72) * v19;
    sub_2453BA364(*(_QWORD *)(v20 + 48) + v21, v15, type metadata accessor for ReplicatorRecord.ID);
    v22 = *(_QWORD *)(v1 + 72) * v19;
    v23 = *(_QWORD *)(v20 + 56) + v22;
    v24 = v35;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v35, v23, v16);
    sub_2453D062C(v15, *(_QWORD *)(i + 48) + v21, type metadata accessor for ReplicatorRecord.ID);
  }
  v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_23:
    result = (void *)swift_release();
    v28 = v31;
    v29 = v39;
    goto LABEL_25;
  }
  v26 = *(_QWORD *)(v32 + 8 * v27);
  if (v26)
  {
    v11 = v27;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v11 >= v33)
      goto LABEL_23;
    v26 = *(_QWORD *)(v32 + 8 * v11);
    ++v27;
    if (v26)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_2453CB1F4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  __int128 v26[3];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257464830);
  v2 = *v0;
  v3 = sub_245444210();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 48 * v15;
    sub_2453CFFF0(*(_QWORD *)(v2 + 56) + 48 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_2453CBAF0(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_2453CB3DC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = sub_245443A24();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257464828);
  v24 = v0;
  v5 = *v0;
  v6 = sub_245444210();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v25 = v5 + 64;
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
    v19 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 56) + v19, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v17) = v18;
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 56) + v19, v4, v1);
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

_QWORD *sub_2453CB5FC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v10 = v9;
  v54 = a7;
  v55 = a8;
  v52 = a5;
  v53 = a6;
  v49 = a3;
  v50 = a4;
  v48 = a1;
  v51 = a9;
  v12 = *v9;
  v13 = sub_245444024();
  v46 = *(_QWORD *)(v13 - 8);
  v47 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v45 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_24544400C();
  MEMORY[0x24BDAC7A8](v15);
  v16 = sub_245443CAC();
  MEMORY[0x24BDAC7A8](v16);
  v17 = *a2;
  v42 = a2[1];
  v43 = v17;
  LODWORD(v17) = *((unsigned __int8 *)a2 + 16);
  v40 = *((unsigned __int8 *)a2 + 17);
  v41 = v17;
  v18 = a2[3];
  v38 = a2[4];
  v39 = v18;
  v44 = *((unsigned __int8 *)a2 + 40);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E6F0);
  v19 = swift_allocObject();
  *(_DWORD *)(v19 + 16) = 0;
  v9[30] = v19;
  v22 = v12 + 80;
  v21 = *(_QWORD *)(v12 + 80);
  v20 = *(_QWORD *)(v22 + 8);
  swift_getAssociatedTypeWitness();
  type metadata accessor for ReplicatorStore.Entry(0, v21, v20, v23);
  swift_getAssociatedConformanceWitness();
  v9[31] = sub_245443CF4();
  type metadata accessor for ReplicatorRecord.ID(0);
  sub_2453B8BF4(&qword_257464530, type metadata accessor for ReplicatorRecord.ID, (uint64_t)&protocol conformance descriptor for ReplicatorRecord.ID);
  v9[32] = sub_245443CF4();
  sub_245443B14();
  v24 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
  type metadata accessor for ReplicatorStore.Change(255, v21, v20, v25);
  sub_245443EF8();
  swift_getFunctionTypeMetadata1();
  sub_2453B8BF4(&qword_25440E440, v24, MEMORY[0x24BDCEA88]);
  v9[33] = sub_245443CF4();
  sub_2453D0348();
  sub_245443C94();
  v56 = MEMORY[0x24BEE4AF8];
  sub_2453B8BF4((unint64_t *)&qword_25440E6C0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E688);
  sub_2453D0384((unint64_t *)&qword_25440E690, &qword_25440E688);
  sub_2454440A8();
  (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v45, *MEMORY[0x24BEE5750], v47);
  v9[34] = sub_245444048();
  v26 = v48;
  sub_2453D03C4(v48, (uint64_t)(v9 + 2));
  v27 = v42;
  v9[12] = v43;
  v9[13] = v27;
  *((_BYTE *)v9 + 112) = v41;
  *((_BYTE *)v9 + 113) = v40;
  v28 = v38;
  v9[15] = v39;
  v9[16] = v28;
  *((_BYTE *)v9 + 136) = v44;
  v29 = v49;
  sub_2453D02E0(v49, (uint64_t)(v9 + 18), (uint64_t *)&unk_257464550);
  v30 = v51;
  v31 = v52;
  v9[24] = v50;
  v9[25] = v31;
  v32 = v54;
  v10[26] = v53;
  v10[27] = v32;
  v10[28] = v55;
  v10[29] = v30;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_2453BF0F0((uint64_t)&unk_2516554C0, (uint64_t)&unk_257464860);
  v33 = sub_2453BF0F0((uint64_t)&unk_251655420, (uint64_t)&unk_257464840);
  sub_2453BF1E0(v33, v34, v35, v36);
  sub_2453D055C(v29, (uint64_t *)&unk_257464550);
  __swift_destroy_boxed_opaque_existential_1(v26);
  return v10;
}

unint64_t sub_2453CBA28()
{
  unint64_t result;

  result = qword_2574642E8;
  if (!qword_2574642E8)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationServiceError, &type metadata for ReplicationServiceError);
    atomic_store(result, (unint64_t *)&qword_2574642E8);
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_2(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_2453CBAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E420);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

_OWORD *sub_2453CBAF0(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t type metadata accessor for ReplicatorStore.Change(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReplicatorStore.Change);
}

uint64_t sub_2453CBB14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_2453C1CC8(a1, v4, a3, a4);
}

uint64_t sub_2453CBB20()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ReplicatorStore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReplicatorStore);
}

uint64_t method lookup function for ReplicatorStore()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ReplicatorStore.entries.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of ReplicatorStore.__allocating_init(replicator:zoneDescriptor:coder:recordIDProvider:recordVersionProvider:recordValueProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t dispatch thunk of ReplicatorStore.version(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of ReplicatorStore.retrieveFile(for:protocolVersion:path:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 304))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of ReplicatorStore.record(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of ReplicatorStore.add(_:destination:schedule:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of ReplicatorStore.add(_:destination:schedule:expiration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of ReplicatorStore.delete(id:schedule:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of ReplicatorStore.entryUpdates.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t sub_2453CBCA0()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_2453CBCA8()
{
  uint64_t AssociatedTypeWitness;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v9;
  char v10;
  char *v11;
  char *v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    v2 = type metadata accessor for ReplicatorRecord.ID(319);
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      swift_getTupleTypeLayout2();
      v11 = &v10;
      AssociatedTypeWitness = swift_checkMetadataState();
      if (v4 <= 0x3F)
      {
        sub_2453CE5F0();
        AssociatedTypeWitness = v5;
        if (v6 <= 0x3F)
        {
          AssociatedTypeWitness = sub_245443B14();
          if (v7 <= 0x3F)
          {
            swift_getTupleTypeLayout();
            v12 = &v9;
            swift_initEnumMetadataMultiPayload();
            return 0;
          }
        }
      }
    }
  }
  return AssociatedTypeWitness;
}

uint64_t *sub_2453CBDEC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  const void *v41;
  unsigned int (*v42)(const void *, uint64_t, uint64_t);
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  void *v49;
  const void *v50;
  unsigned int (*v51)(const void *, uint64_t, uint64_t);
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  const void *v55;
  unsigned int (*v56)(const void *, uint64_t, uint64_t);
  _QWORD *v57;
  _QWORD *v58;
  size_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t AssociatedTypeWitness;
  uint64_t v68;
  uint64_t v69;
  size_t __n;
  size_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v75;

  v4 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_245443B14();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v9;
  v11 = v9 | 7;
  v65 = v11 + v6;
  v72 = v8;
  v73 = v7;
  v12 = *(_QWORD *)(v8 + 64);
  if (*(_DWORD *)(v8 + 84))
    v13 = *(_QWORD *)(v8 + 64);
  else
    v13 = v12 + 1;
  __n = v13;
  v71 = v13 + 7;
  v14 = ((v13 + 7 + ((v9 + 48) & ~(unint64_t)v9)) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  v15 = *(_QWORD *)(v4 - 8);
  v64 = *(_QWORD *)(v15 + 64) + v11;
  v16 = sub_245443A24();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_DWORD *)(v17 + 80);
  v19 = v18;
  v20 = v14 + v18;
  if (*(_DWORD *)(v17 + 84))
    v22 = *(_QWORD *)(v17 + 64);
  else
    v22 = *(_QWORD *)(v17 + 64) + 1;
  v21 = (v14 + v18 + (v64 & ~v11)) & ~(unint64_t)v18;
  if (((v22 + v9 + v21) & ~(unint64_t)v9) + v12 <= v14
                                                                                           + (v65 & ~(v9 | 7)))
    v23 = v14 + (v65 & ~(v9 | 7));
  else
    v23 = ((v22 + v9 + v21) & ~(unint64_t)v9) + v12;
  v24 = v11 | (v18 | *(_BYTE *)(v15 + 80) | *(_BYTE *)(v5 + 80));
  v25 = (*(_DWORD *)(v15 + 80) | *(_DWORD *)(v5 + 80) | v9 | v18) & 0x100000;
  if (v24 != 7 || v25 != 0 || v23 + 1 > 0x18)
  {
    v28 = *a2;
    *a1 = *a2;
    v29 = (uint64_t *)(v28 + ((v24 + 16) & ~v24));
    swift_retain();
  }
  else
  {
    v29 = a1;
    v30 = *((unsigned __int8 *)a2 + v23);
    if (v30 >= 2)
    {
      if (v23 <= 3)
        v31 = v23;
      else
        v31 = 4;
      __asm { BR              X13 }
    }
    v75 = v23;
    v32 = ~v11;
    v33 = ~v10;
    if (v30 == 1)
    {
      v62 = v20;
      v63 = *(_QWORD *)(v16 - 8);
      v66 = v16;
      v68 = v22 + v10;
      v60 = v22;
      v61 = ~v19;
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v15 + 16))(v29, a2, v4);
      v34 = (_QWORD *)(((unint64_t)v29 + v64) & v32);
      v35 = (_QWORD *)(((unint64_t)a2 + v64) & v32);
      *v34 = *v35;
      v34[1] = v35[1];
      v36 = (_QWORD *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8);
      v37 = (_QWORD *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v36 = *v37;
      v36[1] = v37[1];
      v38 = (_QWORD *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
      v39 = (_QWORD *)(((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v38 = *v39;
      v38[1] = v39[1];
      v40 = (void *)(((unint64_t)v38 + v10 + 16) & v33);
      v69 = ~v10;
      v41 = (const void *)(((unint64_t)v39 + v10 + 16) & v33);
      v42 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v72 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v42(v41, 1, v73))
      {
        memcpy(v40, v41, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v72 + 16))(v40, v41, v73);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v40, 0, 1, v73);
      }
      v52 = (_QWORD *)(((unint64_t)v40 + v71) & 0xFFFFFFFFFFFFFFF8);
      v53 = (_QWORD *)(((unint64_t)v41 + v71) & 0xFFFFFFFFFFFFFFF8);
      *v52 = *v53;
      v52[1] = v53[1];
      v54 = (void *)(((unint64_t)v34 + v62) & v61);
      v55 = (const void *)(((unint64_t)v35 + v62) & v61);
      v56 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v63 + 48);
      swift_bridgeObjectRetain();
      if (v56(v55, 1, v66))
      {
        memcpy(v54, v55, v60);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v63 + 16))(v54, v55, v66);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v54, 0, 1, v66);
      }
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v72 + 16))(((unint64_t)v54 + v68) & v69, ((unint64_t)v55 + v68) & v69, v73);
      *((_BYTE *)v29 + v75) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(v29, a2, AssociatedTypeWitness);
      v43 = (_QWORD *)(((unint64_t)v29 + v65) & v32);
      v44 = (_QWORD *)(((unint64_t)a2 + v65) & v32);
      *v43 = *v44;
      v43[1] = v44[1];
      v45 = (_QWORD *)(((unint64_t)v43 + 23) & 0xFFFFFFFFFFFFFFF8);
      v46 = (_QWORD *)(((unint64_t)v44 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v45 = *v46;
      v45[1] = v46[1];
      v47 = (_QWORD *)(((unint64_t)v45 + 23) & 0xFFFFFFFFFFFFFFF8);
      v48 = (_QWORD *)(((unint64_t)v46 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v47 = *v48;
      v47[1] = v48[1];
      v49 = (void *)(((unint64_t)v47 + v10 + 16) & v33);
      v50 = (const void *)(((unint64_t)v48 + v10 + 16) & v33);
      v51 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v72 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v51(v50, 1, v73))
      {
        memcpy(v49, v50, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v72 + 16))(v49, v50, v73);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v49, 0, 1, v73);
      }
      v57 = (_QWORD *)(((unint64_t)v49 + v71) & 0xFFFFFFFFFFFFFFF8);
      v58 = (_QWORD *)(((unint64_t)v50 + v71) & 0xFFFFFFFFFFFFFFF8);
      *v57 = *v58;
      v57[1] = v58[1];
      *((_BYTE *)v29 + v75) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return v29;
}

uint64_t sub_2453CC324(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v3 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v31 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v32 = AssociatedTypeWitness;
  v5 = *(_QWORD *)(v31 + 64);
  v37 = sub_245443B14();
  v6 = *(_QWORD *)(v37 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = v7 | 7;
  v30 = (v7 | 7) + v5;
  v9 = v6;
  v10 = *(_QWORD *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84))
    v11 = *(_QWORD *)(v6 + 64);
  else
    v11 = v10 + 1;
  v34 = v11;
  v35 = (v7 + 48) & ~v7;
  v33 = v3;
  v12 = ((v11 + 7 + v35) & 0xFFFFFFFFFFFFFFF8) + 16;
  v13 = v12 + (v30 & ~(v7 | 7));
  v28 = *(_QWORD *)(v3 - 8);
  v29 = *(_QWORD *)(v28 + 64) + v8;
  v36 = sub_245443A24();
  v14 = *(_QWORD *)(v36 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (v12 + (v29 & ~v8) + v15) & ~v15;
  if (*(_DWORD *)(v14 + 84))
    v17 = *(_QWORD *)(v14 + 64);
  else
    v17 = *(_QWORD *)(v14 + 64) + 1;
  v18 = v17 + v7;
  v19 = ((v17 + v7 + v16) & ~v7) + v10;
  if (v19 <= v13)
    v19 = v13;
  v20 = *(unsigned __int8 *)(a1 + v19);
  if (v20 >= 2)
  {
    if (v19 <= 3)
      v21 = v19;
    else
      v21 = 4;
    __asm { BR              X13 }
  }
  v22 = ~v8;
  v23 = ~v7;
  if (v20 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(a1, v33);
    v24 = (v29 + a1) & v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = (v7 + ((((v24 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & v23;
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v25, 1, v37))
      (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v25, v37);
    swift_bridgeObjectRelease();
    v26 = (v24 + v15 + ((v35 + v34 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v15;
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v14 + 48))(v26, 1, v36))
      (*(void (**)(unint64_t, uint64_t))(v14 + 8))(v26, v36);
    return (*(uint64_t (**)(unint64_t, uint64_t))(v9 + 8))((v18 + v26) & v23, v37);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(a1, v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))((v7 + ((((((v30 + a1) & v22) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & v23, 1, v37))(*(void (**)(unint64_t, uint64_t))(v9 + 8))((v7 + ((((((v30 + a1) & v22) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & v23, v37);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_2453CC6BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  size_t v24;
  size_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  const void *v38;
  unsigned int (*v39)(const void *, uint64_t, uint64_t);
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  const void *v47;
  unsigned int (*v48)(const void *, uint64_t, uint64_t);
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  const void *v52;
  unsigned int (*v53)(const void *, uint64_t, uint64_t);
  _QWORD *v54;
  _QWORD *v55;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  size_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  size_t __n;
  size_t v67;
  uint64_t v68;
  uint64_t v69;

  v4 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v61 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v63 = AssociatedTypeWitness;
  v6 = *(_QWORD *)(v61 + 64);
  v7 = sub_245443B14();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v9 | 7;
  v11 = (v9 | 7) + v6;
  v68 = v8;
  v69 = v7;
  v12 = *(_QWORD *)(v8 + 64);
  if (*(_DWORD *)(v8 + 84))
    v13 = *(_QWORD *)(v8 + 64);
  else
    v13 = v12 + 1;
  __n = v13;
  v67 = v13 + 7;
  v14 = ((v13 + 7 + ((v9 + 48) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 16;
  v15 = v14 + (v11 & ~(v9 | 7));
  v60 = *(_QWORD *)(v4 - 8);
  v16 = *(_QWORD *)(v60 + 64);
  v17 = v16 + v10;
  v18 = (v16 + v10) & ~v10;
  v19 = sub_245443A24();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned __int8 *)(v20 + 80);
  v22 = v14 + v21;
  v23 = *(_DWORD *)(v20 + 84);
  v64 = v20;
  v65 = v19;
  v24 = *(_QWORD *)(v20 + 64);
  if (v23)
    v25 = v24;
  else
    v25 = v24 + 1;
  if (((v25 + v9 + ((v14 + v21 + v18) & ~v21)) & ~v9) + v12 > v15)
    v15 = ((v25 + v9 + ((v14 + v21 + v18) & ~v21)) & ~v9) + v12;
  v26 = *(unsigned __int8 *)(a2 + v15);
  if (v26 >= 2)
  {
    if (v15 <= 3)
      v27 = v15;
    else
      v27 = 4;
    __asm { BR              X13 }
  }
  v28 = a1;
  v29 = ~v10;
  v30 = ~v9;
  if (v26 == 1)
  {
    v57 = v25;
    v62 = v25 + v9;
    v58 = ~v21;
    v59 = v22;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(a1, a2, v4);
    v31 = (_QWORD *)((v17 + a1) & v29);
    v32 = (_QWORD *)((v17 + a2) & v29);
    *v31 = *v32;
    v31[1] = v32[1];
    v33 = (_QWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
    v34 = (_QWORD *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v33 = *v34;
    v33[1] = v34[1];
    v35 = (_QWORD *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8);
    v36 = (_QWORD *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v35 = *v36;
    v35[1] = v36[1];
    v37 = (void *)(((unint64_t)v35 + v9 + 16) & v30);
    v38 = (const void *)(((unint64_t)v36 + v9 + 16) & v30);
    v39 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v68 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v39(v38, 1, v69))
    {
      memcpy(v37, v38, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v68 + 16))(v37, v38, v69);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v37, 0, 1, v69);
    }
    v49 = (_QWORD *)(((unint64_t)v37 + v67) & 0xFFFFFFFFFFFFFFF8);
    v50 = (_QWORD *)(((unint64_t)v38 + v67) & 0xFFFFFFFFFFFFFFF8);
    *v49 = *v50;
    v49[1] = v50[1];
    v51 = (void *)(((unint64_t)v31 + v59) & v58);
    v52 = (const void *)(((unint64_t)v32 + v59) & v58);
    v53 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v64 + 48);
    swift_bridgeObjectRetain();
    v28 = a1;
    if (v53(v52, 1, v65))
    {
      memcpy(v51, v52, v57);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v64 + 16))(v51, v52, v65);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v51, 0, 1, v65);
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v68 + 16))(((unint64_t)v51 + v62) & v30, ((unint64_t)v52 + v62) & v30, v69);
    *(_BYTE *)(a1 + v15) = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(a1, a2, v63);
    v40 = (_QWORD *)((v11 + a1) & v29);
    v41 = (_QWORD *)((v11 + a2) & v29);
    *v40 = *v41;
    v40[1] = v41[1];
    v42 = (_QWORD *)(((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF8);
    v43 = (_QWORD *)(((unint64_t)v41 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v42 = *v43;
    v42[1] = v43[1];
    v44 = (_QWORD *)(((unint64_t)v42 + 23) & 0xFFFFFFFFFFFFFFF8);
    v45 = (_QWORD *)(((unint64_t)v43 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v44 = *v45;
    v44[1] = v45[1];
    v46 = (void *)(((unint64_t)v44 + v9 + 16) & v30);
    v47 = (const void *)(((unint64_t)v45 + v9 + 16) & v30);
    v48 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v68 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v48(v47, 1, v69))
    {
      memcpy(v46, v47, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v68 + 16))(v46, v47, v69);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v46, 0, 1, v69);
    }
    v54 = (_QWORD *)(((unint64_t)v46 + v67) & 0xFFFFFFFFFFFFFFF8);
    v55 = (_QWORD *)(((unint64_t)v47 + v67) & 0xFFFFFFFFFFFFFFF8);
    *v54 = *v55;
    v54[1] = v55[1];
    *(_BYTE *)(a1 + v15) = 0;
    swift_bridgeObjectRetain();
  }
  return v28;
}

uint64_t sub_2453CCB98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  size_t v19;
  size_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  const void *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  const void *v45;
  unsigned int (*v46)(const void *, uint64_t, uint64_t);
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  void *v53;
  const void *v54;
  _QWORD *v55;
  _QWORD *v56;
  size_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(unint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  size_t v70;
  size_t __n;
  uint64_t v72;
  uint64_t v73;
  size_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v66 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v67 = AssociatedTypeWitness;
    v7 = *(_QWORD *)(v66 + 64);
    v76 = sub_245443B14();
    v8 = *(_QWORD *)(v76 - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = v9 | 7;
    v65 = (v9 | 7) + v7;
    v77 = v8;
    v11 = *(_QWORD *)(v8 + 64);
    if (*(_DWORD *)(v8 + 84))
      v12 = *(_QWORD *)(v8 + 64);
    else
      v12 = v11 + 1;
    __n = v12;
    v74 = v12 + 7;
    v59 = (v9 + 48) & ~v9;
    v13 = ((v12 + 7 + v59) & 0xFFFFFFFFFFFFFFF8) + 16;
    v68 = v5;
    v62 = *(_QWORD *)(v5 - 8);
    v64 = *(_QWORD *)(v62 + 64) + v10;
    v14 = v64 & ~v10;
    v15 = sub_245443A24();
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned __int8 *)(v16 + 80);
    v60 = v13 + v17;
    v18 = *(_DWORD *)(v16 + 84);
    v72 = v16;
    v73 = v15;
    v19 = *(_QWORD *)(v16 + 64);
    if (v18)
      v20 = v19;
    else
      v20 = v19 + 1;
    v58 = v20;
    v70 = v20 + v9;
    if (((v20 + v9 + ((v13 + v17 + v14) & ~v17)) & ~v9) + v11 <= v13 + (v65 & ~(v9 | 7)))
      v21 = v13 + (v65 & ~(v9 | 7));
    else
      v21 = ((v20 + v9 + ((v13 + v17 + v14) & ~v17)) & ~v9) + v11;
    v22 = *(unsigned __int8 *)(a1 + v21);
    if (v22 >= 2)
    {
      if (v21 <= 3)
        v23 = v21;
      else
        v23 = 4;
      __asm { BR              X12 }
    }
    v24 = ~v10;
    v25 = ~v9;
    v63 = ~v17;
    v75 = v21;
    v69 = ~v9;
    if (v22 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(a1, v68);
      v26 = (v64 + a1) & v24;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v27 = (((v26 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
      swift_bridgeObjectRelease();
      v61 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v77 + 48);
      if (!v61((v9 + v27 + 16) & v25, 1, v76))
        (*(void (**)(unint64_t, uint64_t))(v77 + 8))((v9 + v27 + 16) & v25, v76);
      swift_bridgeObjectRelease();
      v28 = (v26 + v17 + ((v59 + __n + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & v63;
      v21 = v75;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v72 + 48))(v28, 1, v73))
        (*(void (**)(unint64_t, uint64_t))(v72 + 8))(v28, v73);
      v29 = ~v9;
      v30 = v76;
      (*(void (**)(size_t, uint64_t))(v77 + 8))((v70 + v28) & v69, v76);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(a1, v67);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v31 = (v9 + ((((((v65 + a1) & v24) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & v25;
      v61 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v77 + 48);
      v29 = ~v9;
      v30 = v76;
      if (!v61(v31, 1, v76))
        (*(void (**)(unint64_t, uint64_t))(v77 + 8))(v31, v76);
      swift_bridgeObjectRelease();
    }
    v32 = *(unsigned __int8 *)(a2 + v21);
    if (v32 >= 2)
    {
      if (v21 <= 3)
        v33 = v21;
      else
        v33 = 4;
      __asm { BR              X12 }
    }
    if (v32 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(a1, a2, v68);
      v34 = (_QWORD *)((v64 + a1) & v24);
      v35 = (_QWORD *)((v64 + a2) & v24);
      *v34 = *v35;
      v34[1] = v35[1];
      v36 = (_QWORD *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8);
      v37 = (_QWORD *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v36 = *v37;
      v36[1] = v37[1];
      v38 = (_QWORD *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
      v39 = (_QWORD *)(((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v38 = *v39;
      v38[1] = v39[1];
      v40 = (void *)(((unint64_t)v38 + v9 + 16) & v29);
      v41 = (const void *)(((unint64_t)v39 + v9 + 16) & v29);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v61((unint64_t)v41, 1, v30))
      {
        memcpy(v40, v41, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v77 + 16))(v40, v41, v30);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v40, 0, 1, v30);
      }
      v42 = (_QWORD *)(((unint64_t)v40 + v74) & 0xFFFFFFFFFFFFFFF8);
      v43 = (_QWORD *)(((unint64_t)v41 + v74) & 0xFFFFFFFFFFFFFFF8);
      *v42 = *v43;
      v42[1] = v43[1];
      v44 = (void *)(((unint64_t)v34 + v60) & v63);
      v45 = (const void *)(((unint64_t)v35 + v60) & v63);
      v46 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v72 + 48);
      swift_bridgeObjectRetain();
      if (v46(v45, 1, v73))
      {
        memcpy(v44, v45, v58);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v72 + 16))(v44, v45, v73);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v44, 0, 1, v73);
      }
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v77 + 16))(((unint64_t)v44 + v70) & v69, ((unint64_t)v45 + v70) & v69, v30);
      *(_BYTE *)(a1 + v75) = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(a1, a2, v67);
      v47 = (_QWORD *)((v65 + a1) & v24);
      v48 = (_QWORD *)((v65 + a2) & v24);
      *v47 = *v48;
      v47[1] = v48[1];
      v49 = (_QWORD *)(((unint64_t)v47 + 23) & 0xFFFFFFFFFFFFFFF8);
      v50 = (_QWORD *)(((unint64_t)v48 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v49 = *v50;
      v49[1] = v50[1];
      v51 = (_QWORD *)(((unint64_t)v49 + 23) & 0xFFFFFFFFFFFFFFF8);
      v52 = (_QWORD *)(((unint64_t)v50 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v51 = *v52;
      v51[1] = v52[1];
      v53 = (void *)(((unint64_t)v51 + v9 + 16) & v29);
      v54 = (const void *)(((unint64_t)v52 + v9 + 16) & v29);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v61((unint64_t)v54, 1, v30))
      {
        memcpy(v53, v54, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v77 + 16))(v53, v54, v30);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v53, 0, 1, v30);
      }
      v55 = (_QWORD *)(((unint64_t)v53 + v74) & 0xFFFFFFFFFFFFFFF8);
      v56 = (_QWORD *)(((unint64_t)v54 + v74) & 0xFFFFFFFFFFFFFFF8);
      *v55 = *v56;
      v55[1] = v56[1];
      *(_BYTE *)(a1 + v75) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t sub_2453CD2E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  _OWORD *v27;
  _OWORD *v28;
  _OWORD *v29;
  _OWORD *v30;
  void *v31;
  const void *v32;
  _OWORD *v33;
  _OWORD *v34;
  _OWORD *v35;
  _OWORD *v36;
  _OWORD *v37;
  _OWORD *v38;
  void *v39;
  const void *v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  char v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  size_t __n;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = *(_QWORD *)(a3 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v49 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v51 = AssociatedTypeWitness;
  v6 = *(_QWORD *)(v49 + 64);
  v64 = sub_245443B14();
  v7 = *(_QWORD *)(v64 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v8 | 7;
  v48 = (v8 | 7) + v6;
  v63 = v7;
  v10 = *(_QWORD *)(v7 + 64);
  v61 = *(_DWORD *)(v7 + 84);
  if (v61)
    v11 = *(_QWORD *)(v7 + 64);
  else
    v11 = v10 + 1;
  __n = v11;
  v53 = v4;
  v54 = (((v8 + 48) & ~v8) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v57 = v48 & ~(v8 | 7);
  v12 = v54 + 16 + v57;
  v47 = *(_QWORD *)(v4 - 8);
  v13 = *(_QWORD *)(v47 + 64);
  v14 = v13 + v9;
  v15 = (v13 + v9) & ~v9;
  v59 = sub_245443A24();
  v16 = *(_QWORD *)(v59 - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v56 = v54 + 16;
  if (*(_DWORD *)(v16 + 84))
    v19 = *(_QWORD *)(v16 + 64);
  else
    v19 = *(_QWORD *)(v16 + 64) + 1;
  v62 = v10;
  v18 = (v54 + 16 + v15 + v17) & ~v17;
  v20 = ((v19 + v8 + v18) & ~v8) + v10;
  if (v20 > v12)
    v12 = ((v19 + v8 + v18) & ~v8) + v10;
  v21 = *(unsigned __int8 *)(a2 + v12);
  if (v21 >= 2)
  {
    if (v12 <= 3)
      v22 = v12;
    else
      v22 = 4;
    __asm { BR              X12 }
  }
  v23 = ~v9;
  v24 = ~v8;
  if (v21 == 1)
  {
    v58 = v19 + v8;
    v50 = v19;
    v52 = ~v17;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(a1, a2, v53);
    v25 = (_OWORD *)((v14 + a1) & v23);
    v26 = (_OWORD *)((v14 + a2) & v23);
    *v25 = *v26;
    v27 = (_OWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
    v28 = (_OWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v27 = *v28;
    v29 = (_OWORD *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8);
    v30 = (_OWORD *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v29 = *v30;
    v31 = (void *)(((unint64_t)v29 + v8 + 16) & v24);
    v55 = ~v8;
    v32 = (const void *)(((unint64_t)v30 + v8 + 16) & v24);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v63 + 48))(v32, 1, v64))
    {
      memcpy(v31, v32, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v63 + 32))(v31, v32, v64);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v31, 0, 1, v64);
    }
    v41 = 7;
    if (!v61)
      v41 = 8;
    *(_OWORD *)(((unint64_t)v31 + v62 + v41) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v32
                                                                                       + v62
                                                                                       + v41) & 0xFFFFFFFFFFFFF8);
    v42 = (void *)(((unint64_t)v25 + v17 + v56) & v52);
    v43 = (const void *)(((unint64_t)v26 + v17 + v56) & v52);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v43, 1, v59))
    {
      memcpy(v42, v43, v50);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v42, v43, v59);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v42, 0, 1, v59);
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v63 + 32))(((unint64_t)v42 + v58) & v55, ((unint64_t)v43 + v58) & v55, v64);
    v44 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(a1, a2, v51);
    v33 = (_OWORD *)((v48 + a1) & v23);
    v34 = (_OWORD *)((v48 + a2) & v23);
    *v33 = *v34;
    v35 = (_OWORD *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8);
    v36 = (_OWORD *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v35 = *v36;
    v37 = (_OWORD *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
    v38 = (_OWORD *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v37 = *v38;
    v39 = (void *)(((unint64_t)v37 + v8 + 16) & v24);
    v40 = (const void *)(((unint64_t)v38 + v8 + 16) & v24);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v63 + 48))(v40, 1, v64))
    {
      memcpy(v39, v40, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v63 + 32))(v39, v40, v64);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v39, 0, 1, v64);
    }
    v44 = 0;
    v45 = 7;
    if (!v61)
      v45 = 8;
    *(_OWORD *)(((unint64_t)v39 + v10 + v45) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v40
                                                                                       + v10
                                                                                       + v45) & 0xFFFFFFFFFFFFF8);
    if (v20 <= v57 + v54 + 16)
      v12 = v57 + v54 + 16;
    else
      v12 = v20;
  }
  result = a1;
  *(_BYTE *)(a1 + v12) = v44;
  return result;
}

uint64_t sub_2453CD78C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  size_t v18;
  size_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  _OWORD *v33;
  _OWORD *v34;
  _OWORD *v35;
  _OWORD *v36;
  void *v37;
  const void *v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  _OWORD *v42;
  _OWORD *v43;
  _OWORD *v44;
  _OWORD *v45;
  _OWORD *v46;
  _OWORD *v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  unint64_t v51;
  size_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int (*v56)(unint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  size_t v65;
  size_t __n;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v61 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v62 = AssociatedTypeWitness;
    v7 = *(_QWORD *)(v61 + 64);
    v71 = sub_245443B14();
    v8 = *(_QWORD *)(v71 - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = v9 | 7;
    v60 = (v9 | 7) + v7;
    v11 = *(_QWORD *)(v8 + 64);
    v69 = *(_DWORD *)(v8 + 84);
    if (v69)
      v12 = *(_QWORD *)(v8 + 64);
    else
      v12 = v11 + 1;
    __n = v12;
    v63 = v5;
    v64 = (((v9 + 48) & ~v9) + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    v13 = v64 + 16;
    v58 = *(_QWORD *)(v5 - 8);
    v59 = *(_QWORD *)(v58 + 64) + v10;
    v14 = v59 & ~v10;
    v68 = sub_245443A24();
    v15 = *(_QWORD *)(v68 - 8);
    v16 = *(unsigned __int8 *)(v15 + 80);
    v55 = v64 + 16;
    v17 = *(_DWORD *)(v15 + 84);
    v67 = v15;
    v18 = *(_QWORD *)(v15 + 64);
    if (v17)
      v19 = v18;
    else
      v19 = v18 + 1;
    v53 = v19;
    v65 = v19 + v9;
    v70 = v11;
    v54 = ((v19 + v9 + ((v13 + v14 + v16) & ~v16)) & ~v9) + v11;
    if (v54 <= v64 + 16 + (v60 & ~(v9 | 7)))
      v20 = v64 + 16 + (v60 & ~(v9 | 7));
    else
      v20 = ((v19 + v9 + ((v13 + v14 + v16) & ~v16)) & ~v9) + v11;
    v21 = *(unsigned __int8 *)(a1 + v20);
    if (v21 >= 2)
    {
      if (v20 <= 3)
        v22 = v20;
      else
        v22 = 4;
      __asm { BR              X12 }
    }
    v23 = ~v10;
    v24 = ~v9;
    v57 = ~v16;
    if (v21 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(a1, v63);
      v25 = (v59 + a1) & v23;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v26 = (v9 + ((((v25 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & v24;
      v56 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
      if (!v56(v26, 1, v71))
        (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v26, v71);
      swift_bridgeObjectRelease();
      v27 = (v25 + v16 + v64 + 16) & v57;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v27, 1, v68))
        (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v27, v68);
      (*(void (**)(size_t, uint64_t))(v8 + 8))((v65 + v27) & v24, v71);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(a1, v62);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v28 = (((((v60 + a1) & v23) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
      swift_bridgeObjectRelease();
      v56 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
      if (!v56((v9 + v28 + 16) & v24, 1, v71))
        (*(void (**)(unint64_t, uint64_t))(v8 + 8))((v9 + v28 + 16) & v24, v71);
      swift_bridgeObjectRelease();
    }
    v29 = *(unsigned __int8 *)(a2 + v20);
    if (v29 >= 2)
    {
      if (v20 <= 3)
        v30 = v20;
      else
        v30 = 4;
      __asm { BR              X12 }
    }
    if (v29 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 32))(a1, a2, v63);
      v31 = (_OWORD *)((v59 + a1) & v23);
      v32 = (_OWORD *)((v59 + a2) & v23);
      *v31 = *v32;
      v33 = (_OWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
      v34 = (_OWORD *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v33 = *v34;
      v35 = (_OWORD *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8);
      v36 = (_OWORD *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v35 = *v36;
      v37 = (void *)(((unint64_t)v35 + v9 + 16) & v24);
      v38 = (const void *)(((unint64_t)v36 + v9 + 16) & v24);
      if (v56((unint64_t)v38, 1, v71))
      {
        memcpy(v37, v38, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v37, v38, v71);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v37, 0, 1, v71);
      }
      v39 = 7;
      if (!v69)
        v39 = 8;
      *(_OWORD *)(((unint64_t)v37 + v70 + v39) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v38
                                                                                         + v70
                                                                                         + v39) & 0xFFFFFFFFFFFFF8);
      v40 = (void *)(((unint64_t)v31 + v16 + v55) & v57);
      v41 = (const void *)(((unint64_t)v32 + v16 + v55) & v57);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v67 + 48))(v41, 1, v68))
      {
        memcpy(v40, v41, v53);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v67 + 32))(v40, v41, v68);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v40, 0, 1, v68);
      }
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(((unint64_t)v40 + v65) & v24, ((unint64_t)v41 + v65) & v24, v71);
      *(_BYTE *)(a1 + v20) = 1;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 32))(a1, a2, v62);
      v42 = (_OWORD *)((v60 + a1) & v23);
      v43 = (_OWORD *)((v60 + a2) & v23);
      *v42 = *v43;
      v44 = (_OWORD *)(((unint64_t)v42 + 23) & 0xFFFFFFFFFFFFFFF8);
      v45 = (_OWORD *)(((unint64_t)v43 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v44 = *v45;
      v46 = (_OWORD *)(((unint64_t)v44 + 23) & 0xFFFFFFFFFFFFFFF8);
      v47 = (_OWORD *)(((unint64_t)v45 + 23) & 0xFFFFFFFFFFFFFFF8);
      *v46 = *v47;
      v48 = (void *)(((unint64_t)v46 + v9 + 16) & v24);
      v49 = (const void *)(((unint64_t)v47 + v9 + 16) & v24);
      if (v56((unint64_t)v49, 1, v71))
      {
        memcpy(v48, v49, __n);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v48, v49, v71);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v48, 0, 1, v71);
      }
      v50 = 7;
      if (!v69)
        v50 = 8;
      *(_OWORD *)(((unint64_t)v48 + v70 + v50) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v49
                                                                                         + v70
                                                                                         + v50) & 0xFFFFFFFFFFFFF8);
      v51 = (v60 & ~(v9 | 7)) + v64 + 16;
      if (v54 > v51)
        v51 = v54;
      *(_BYTE *)(a1 + v51) = 0;
    }
  }
  return a1;
}

uint64_t sub_2453CDE74(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  int v25;
  unsigned int v27;
  int v28;
  unsigned int v29;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v7 = *(_QWORD *)(sub_245443B14() - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v10 = ((v8 | 7) + v6) & ~(v8 | 7);
  v11 = *(_DWORD *)(v7 + 84);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v14 = *(_QWORD *)(sub_245443A24() - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = *(_DWORD *)(v14 + 84);
  v17 = *(_QWORD *)(v14 + 64);
  if (v11)
    v18 = v12;
  else
    v18 = v12 + 1;
  v19 = v16 == 0;
  v20 = ((v18 + ((v8 + 48) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v21 = v17 + v8;
  if (v19)
    ++v21;
  v9 = v8 | 7;
  if (((v21 + ((v20 + ((v13 + v9) & ~v9) + v15) & ~v15)) & ~v8) + v12 <= v20 + v10)
    v22 = v20 + v10;
  else
    v22 = ((v21 + ((v20 + ((v13 + v9) & ~v9) + v15) & ~v15)) & ~v8) + v12;
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_27;
  v23 = v22 + 1;
  v24 = 8 * (v22 + 1);
  if ((v22 + 1) <= 3)
  {
    v27 = ((a2 + ~(-1 << v24) - 254) >> v24) + 1;
    if (HIWORD(v27))
    {
      v25 = *(_DWORD *)(a1 + v23);
      if (!v25)
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v27 > 0xFF)
    {
      v25 = *(unsigned __int16 *)(a1 + v23);
      if (!*(_WORD *)(a1 + v23))
        goto LABEL_27;
      goto LABEL_20;
    }
    if (v27 < 2)
    {
LABEL_27:
      v29 = *(unsigned __int8 *)(a1 + v22);
      if (v29 >= 2)
        return (v29 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v25 = *(unsigned __int8 *)(a1 + v23);
  if (!*(_BYTE *)(a1 + v23))
    goto LABEL_27;
LABEL_20:
  v28 = (v25 - 1) << v24;
  if (v23 > 3)
    v28 = 0;
  if ((_DWORD)v23)
  {
    if (v23 > 3)
      LODWORD(v23) = 4;
    __asm { BR              X11 }
  }
  return (v28 + 255);
}

void sub_2453CE070(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;

  v7 = *(_QWORD *)(a4 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v9 = *(_QWORD *)(sub_245443B14() - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((v10 | 7) + v8) & ~(v10 | 7);
  v12 = *(_DWORD *)(v9 + 84);
  v13 = *(_QWORD *)(v9 + 64);
  v14 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v15 = *(_QWORD *)(sub_245443A24() - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = *(_DWORD *)(v15 + 84);
  v18 = *(_QWORD *)(v15 + 64);
  if (v12)
    v19 = v13;
  else
    v19 = v13 + 1;
  v20 = v17 == 0;
  v21 = ((v19 + ((v10 + 48) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v22 = v18 + v10;
  if (v20)
    ++v22;
  v23 = ((v22 + ((v21 + ((v14 + (v10 | 7)) & ~(v10 | 7)) + v16) & ~v16)) & ~v10) + v13;
  if (v23 <= v21 + v11)
    v23 = v21 + v11;
  v24 = v23 + 1;
  if (a3 < 0xFF)
  {
    v25 = 0;
  }
  else if (v24 <= 3)
  {
    v27 = ((a3 + ~(-1 << (8 * v24)) - 254) >> (8 * v24)) + 1;
    if (HIWORD(v27))
    {
      v25 = 4u;
    }
    else if (v27 >= 0x100)
    {
      v25 = 2;
    }
    else
    {
      v25 = v27 > 1;
    }
  }
  else
  {
    v25 = 1u;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v26 = a2 - 255;
  if (v24 < 4)
  {
    if ((_DWORD)v23 != -1)
    {
      v28 = v26 & ~(-1 << (8 * v24));
      bzero(a1, v24);
      if ((_DWORD)v24 == 3)
      {
        *(_WORD *)a1 = v28;
        a1[2] = BYTE2(v28);
      }
      else if ((_DWORD)v24 == 2)
      {
        *(_WORD *)a1 = v28;
      }
      else
      {
        *a1 = v28;
      }
    }
  }
  else
  {
    bzero(a1, v23 + 1);
    *(_DWORD *)a1 = v26;
  }
  __asm { BR              X10 }
}

uint64_t sub_2453CE2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v5 = *(_QWORD *)(sub_245443B14() - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = ((v6 | 7) + v4) & ~(v6 | 7);
  v8 = *(_QWORD *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84))
    v9 = *(_QWORD *)(v5 + 64);
  else
    v9 = v8 + 1;
  v10 = ((v9 + ((v6 + 48) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v11 = v10 + v7;
  v12 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + (v6 | 7)) & ~(v6 | 7);
  v13 = *(_QWORD *)(sub_245443A24() - 8);
  v14 = (v10 + v12 + *(unsigned __int8 *)(v13 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = *(_DWORD *)(v13 + 84);
  v16 = *(_QWORD *)(v13 + 64) + v6;
  if (!v15)
    ++v16;
  v17 = ((v16 + v14) & ~v6) + v8;
  if (v17 <= v11)
    v17 = v11;
  result = *(unsigned __int8 *)(a1 + v17);
  if (result >= 2)
  {
    if (v17 <= 3)
      v19 = v17;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  return result;
}

uint64_t sub_2453CE45C(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  char v22;
  int v23;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness() - 8) + 64);
  v7 = *(_QWORD *)(sub_245443B14() - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((v8 | 7) + v6) & ~(v8 | 7);
  v10 = *(_QWORD *)(v7 + 64);
  if (*(_DWORD *)(v7 + 84))
    v11 = *(_QWORD *)(v7 + 64);
  else
    v11 = v10 + 1;
  v12 = ((v11 + ((v8 + 48) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v13 = v12 + v9;
  v14 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + (v8 | 7)) & ~(v8 | 7);
  result = sub_245443A24();
  v16 = *(_QWORD *)(result - 8);
  v17 = (v12 + v14 + *(unsigned __int8 *)(v16 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = *(_DWORD *)(v16 + 84);
  v19 = *(_QWORD *)(v16 + 64) + v8;
  if (!v18)
    ++v19;
  v20 = ((v19 + v17) & ~v8) + v10;
  if (v20 <= v13)
    v21 = v13;
  else
    v21 = v20;
  if (a2 > 1)
  {
    if (v21 <= 3)
      v22 = ((a2 - 2) >> (8 * v21)) + 2;
    else
      v22 = 2;
    a1[v21] = v22;
    if (v21 >= 4)
      v23 = 4;
    else
      v23 = v21;
    bzero(a1, v21);
    __asm { BR              X10 }
  }
  a1[v21] = a2;
  return result;
}

void sub_2453CE5F0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25440E1A8)
  {
    sub_245443A24();
    v0 = sub_24544406C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25440E1A8);
  }
}

uint64_t sub_2453CE644()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for ReplicatorRecord(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_2453CE6CC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  size_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  const void *v35;
  unsigned int (*v36)(const void *, uint64_t, uint64_t);
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  void (*v42)(unint64_t, unint64_t, uint64_t);
  _QWORD *v43;
  _QWORD *v44;
  void *v45;
  const void *v46;
  uint64_t (*v47)(const void *, uint64_t, uint64_t);
  int v48;
  size_t __n;
  size_t v51;
  void *__dst;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v60 = sub_245443B14();
  v8 = *(_QWORD *)(v60 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v9;
  v61 = sub_245443AC0();
  v11 = *(_QWORD *)(v61 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v9 | v12 | 7;
  v14 = v13 + v7;
  v15 = (v13 + v7) & ~v13;
  v17 = *(_QWORD *)(v8 + 64);
  if (*(_DWORD *)(v8 + 84))
    v18 = *(_QWORD *)(v8 + 64);
  else
    v18 = v17 + 1;
  v19 = v18 + 7;
  v16 = (v9 + 48) & ~(unint64_t)v9;
  v20 = *(_QWORD *)(v11 + 64);
  if (!*(_DWORD *)(v11 + 84))
    ++v20;
  v21 = v20
      + v15
      + ((v12
        + 8
        + ((v17
          + 7
          + ((((v18 + 7 + v16) & 0xFFFFFFFFFFFFFFF8) + 16 + v9) & ~(unint64_t)v9)) & 0xFFFFFFFFFFFFFFF8)) & ~v12);
  v22 = v13 | *(_DWORD *)(v6 + 80);
  if (v22 != 7 || ((*(_DWORD *)(v11 + 80) | v9 | *(_DWORD *)(v6 + 80)) & 0x100000) != 0 || v21 > 0x18)
  {
    v25 = *a2;
    *a1 = *a2;
    v26 = (uint64_t *)(v25 + ((v22 + 16) & ~v22));
    swift_retain();
  }
  else
  {
    __n = v18;
    v51 = v20;
    v53 = *(_QWORD *)(v61 - 8);
    v57 = v17 + 7;
    v58 = v12 + 8;
    v27 = a1;
    v28 = ~v13;
    v55 = ((v18 + 7 + v16) & 0xFFFFFFFFFFFFFFF8) + 16;
    v56 = ~v12;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(v27, a2, v5);
    v59 = v27;
    v29 = (_QWORD *)(((unint64_t)v27 + v14) & v28);
    v30 = (_QWORD *)(((unint64_t)a2 + v14) & v28);
    *v29 = *v30;
    v29[1] = v30[1];
    v31 = (_QWORD *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
    v32 = (_QWORD *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v31 = *v32;
    v31[1] = v32[1];
    v33 = (_QWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
    v34 = (_QWORD *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v33 = *v34;
    v33[1] = v34[1];
    __dst = (void *)(((unint64_t)v33 + v10 + 16) & ~v10);
    v54 = ~v10;
    v35 = (const void *)(((unint64_t)v34 + v10 + 16) & ~v10);
    v36 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v8 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v36(v35, 1, v60))
    {
      memcpy(__dst, v35, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(__dst, v35, v60);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(__dst, 0, 1, v60);
    }
    v38 = (_QWORD *)(((unint64_t)__dst + v19) & 0xFFFFFFFFFFFFFFF8);
    v39 = (_QWORD *)(((unint64_t)v35 + v19) & 0xFFFFFFFFFFFFFFF8);
    *v38 = *v39;
    v38[1] = v39[1];
    v40 = ((unint64_t)v29 + v10 + v55) & v54;
    v41 = ((unint64_t)v30 + v10 + v55) & v54;
    v42 = *(void (**)(_QWORD, _QWORD, _QWORD))(v8 + 16);
    swift_bridgeObjectRetain();
    v42(v40, v41, v60);
    v43 = (_QWORD *)((v57 + v40) & 0xFFFFFFFFFFFFFFF8);
    v44 = (_QWORD *)((v57 + v41) & 0xFFFFFFFFFFFFFFF8);
    *v43 = *v44;
    v45 = (void *)(((unint64_t)v43 + v58) & v56);
    v46 = (const void *)(((unint64_t)v44 + v58) & v56);
    v47 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v53 + 48);
    swift_bridgeObjectRetain();
    v48 = v47(v46, 1, v61);
    v26 = v59;
    if (v48)
    {
      memcpy(v45, v46, v51);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v53 + 16))(v45, v46, v61);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v45, 0, 1, v61);
    }
  }
  return v26;
}

uint64_t sub_2453CEA1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64);
  v5 = sub_245443B14();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = sub_245443AC0();
  v18 = *(_QWORD *)(v8 - 8);
  v19 = v8;
  v9 = *(unsigned __int8 *)(v18 + 80);
  v10 = (v4 + a1 + (v7 | v9 | 7)) & ~(v7 | v9 | 7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v7 + 16;
  v12 = ~v7;
  v13 = (v7 + 16 + ((((v10 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v7;
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v13, 1, v5))
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v13, v5);
  v14 = *(_QWORD *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84))
    v15 = *(_QWORD *)(v6 + 64);
  else
    v15 = v14 + 1;
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))((v11 + v10 + ((v15 + ((v7 + 48) & v12) + 7) & 0xFFFFFFFFFFFFFFF8)) & v12, v5);
  swift_bridgeObjectRelease();
  v16 = (v9
       + ((v14 + ((v11 + v10 + ((v15 + ((v7 + 48) & v12) + 7) & 0xFFFFFFFFFFFFFFF8)) & v12) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8) & ~v9;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v19);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v18 + 8))(v16, v19);
  return result;
}

uint64_t sub_2453CEBCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  const void *v18;
  unsigned int (*v19)(const void *, uint64_t, uint64_t);
  uint64_t v20;
  int v21;
  uint64_t v22;
  size_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(unint64_t, unint64_t, uint64_t);
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  const void *v36;
  unsigned int (*v37)(const void *, uint64_t, uint64_t);
  size_t v38;
  void *__dst;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_245443B14();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = sub_245443AC0();
  v43 = *(_QWORD *)(v10 - 8);
  v44 = v10;
  v42 = *(unsigned __int8 *)(v43 + 80);
  v11 = v9 | v42 | 7;
  v45 = a1;
  v12 = (_QWORD *)((v11 + v6 + a1) & ~v11);
  v13 = (_QWORD *)((v11 + v6 + a2) & ~v11);
  *v12 = *v13;
  v12[1] = v13[1];
  v14 = (_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  v14[1] = v15[1];
  v16 = (_QWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v16[1] = v17[1];
  __dst = (void *)(((unint64_t)v16 + v9 + 16) & ~v9);
  v41 = ~v9;
  v18 = (const void *)(((unint64_t)v17 + v9 + 16) & ~v9);
  v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = v7;
  if (v19(v18, 1, v7))
  {
    v21 = *(_DWORD *)(v8 + 84);
    v22 = *(_QWORD *)(v8 + 64);
    if (v21)
      v23 = *(_QWORD *)(v8 + 64);
    else
      v23 = v22 + 1;
    v24 = __dst;
    memcpy(__dst, v18, v23);
  }
  else
  {
    v24 = __dst;
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(__dst, v18, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(__dst, 0, 1, v20);
    v21 = *(_DWORD *)(v8 + 84);
    v22 = *(_QWORD *)(v8 + 64);
  }
  v25 = v20;
  if (v21)
    v26 = v22;
  else
    v26 = v22 + 1;
  v27 = (_QWORD *)(((unint64_t)v24 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
  v28 = (_QWORD *)(((unint64_t)v18 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v27 = *v28;
  v27[1] = v28[1];
  v29 = ((v26 + ((v9 + 48) & v41) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v30 = ((unint64_t)v12 + v9 + v29) & v41;
  v31 = ((unint64_t)v13 + v9 + v29) & v41;
  v32 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
  swift_bridgeObjectRetain();
  v32(v30, v31, v25);
  v33 = (_QWORD *)((v22 + 7 + v30) & 0xFFFFFFFFFFFFFFF8);
  v34 = (_QWORD *)((v22 + 7 + v31) & 0xFFFFFFFFFFFFFFF8);
  *v33 = *v34;
  v35 = (void *)(((unint64_t)v33 + v42 + 8) & ~v42);
  v36 = (const void *)(((unint64_t)v34 + v42 + 8) & ~v42);
  v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v43 + 48);
  swift_bridgeObjectRetain();
  if (v37(v36, 1, v44))
  {
    if (*(_DWORD *)(v43 + 84))
      v38 = *(_QWORD *)(v43 + 64);
    else
      v38 = *(_QWORD *)(v43 + 64) + 1;
    memcpy(v35, v36, v38);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v43 + 16))(v35, v36, v44);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v35, 0, 1, v44);
  }
  return v45;
}

uint64_t sub_2453CEE90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  uint64_t (*v35)(void *, uint64_t, uint64_t);
  int v36;
  size_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_245443B14();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = sub_245443AC0();
  v40 = *(_QWORD *)(v10 - 8);
  v41 = v10;
  v39 = *(unsigned __int8 *)(v40 + 80);
  v11 = v9 | v39 | 7;
  v42 = a1;
  v12 = (_QWORD *)((v11 + v6 + a1) & ~v11);
  v13 = (_QWORD *)((v11 + v6 + a2) & ~v11);
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = (_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = (_QWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = ~v9;
  v19 = (void *)(((unint64_t)v16 + v9 + 16) & ~v9);
  v20 = (void *)(((unint64_t)v17 + v9 + 16) & ~v9);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  LODWORD(v17) = v21(v19, 1, v7);
  v22 = v21(v20, 1, v7);
  if ((_DWORD)v17)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v19, v20, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v19, 0, 1, v7);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v19, v20, v7);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v19, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v23 = *(_QWORD *)(v8 + 64);
  else
    v23 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v19, v20, v23);
LABEL_10:
  v24 = *(_QWORD *)(v8 + 64);
  if (*(_DWORD *)(v8 + 84))
    v25 = *(_QWORD *)(v8 + 64);
  else
    v25 = v24 + 1;
  v26 = (_QWORD *)(((unint64_t)v19 + v25 + 7) & 0xFFFFFFFFFFFFFFF8);
  v27 = (_QWORD *)(((unint64_t)v20 + v25 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v28 = ((v25 + ((v9 + 48) & v18) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v29 = ((unint64_t)v12 + v9 + v28) & v18;
  v30 = ((unint64_t)v13 + v9 + v28) & v18;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))(v29, v30, v7);
  v31 = (_QWORD *)((v24 + 7 + v29) & 0xFFFFFFFFFFFFFFF8);
  v32 = (_QWORD *)((v24 + 7 + v30) & 0xFFFFFFFFFFFFFFF8);
  *v31 = *v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33 = (void *)(((unint64_t)v31 + v39 + 8) & ~v39);
  v34 = (void *)(((unint64_t)v32 + v39 + 8) & ~v39);
  v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v40 + 48);
  LODWORD(v30) = v35(v33, 1, v41);
  v36 = v35(v34, 1, v41);
  if ((_DWORD)v30)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v40 + 16))(v33, v34, v41);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v33, 0, 1, v41);
      return v42;
    }
  }
  else
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v40 + 24))(v33, v34, v41);
      return v42;
    }
    (*(void (**)(void *, uint64_t))(v40 + 8))(v33, v41);
  }
  if (*(_DWORD *)(v40 + 84))
    v37 = *(_QWORD *)(v40 + 64);
  else
    v37 = *(_QWORD *)(v40 + 64) + 1;
  memcpy(v33, v34, v37);
  return v42;
}

uint64_t sub_2453CF1F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  _OWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  int v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  void (*v29)(unint64_t, unint64_t, uint64_t);
  void (*v30)(void *, const void *, uint64_t);
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  const void *v38;
  size_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_245443B14();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = sub_245443AC0();
  v42 = *(_QWORD *)(v10 - 8);
  v43 = v10;
  v11 = *(unsigned __int8 *)(v42 + 80);
  v12 = v9 | v11 | 7;
  v44 = a1;
  v13 = (_OWORD *)((v12 + v6 + a1) & ~v12);
  v14 = (_OWORD *)((v12 + v6 + a2) & ~v12);
  *v13 = *v14;
  v15 = (_OWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_OWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v17 = (_OWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_OWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  v19 = ~v9;
  v20 = (void *)(((unint64_t)v17 + v9 + 16) & ~v9);
  v21 = (const void *)(((unint64_t)v18 + v9 + 16) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v21, 1, v7))
  {
    v22 = *(_DWORD *)(v8 + 84);
    v41 = v11;
    v23 = v13;
    v24 = v14;
    v25 = v7;
    v26 = *(_QWORD *)(v8 + 64);
    if (v22)
      v27 = *(_QWORD *)(v8 + 64);
    else
      v27 = v26 + 1;
    memcpy(v20, v21, v27);
    v28 = v25;
    v14 = v24;
    v13 = v23;
    v11 = v41;
    v29 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32);
  }
  else
  {
    v30 = *(void (**)(void *, const void *, uint64_t))(v8 + 32);
    v30(v20, v21, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v20, 0, 1, v7);
    v29 = (void (*)(unint64_t, unint64_t, uint64_t))v30;
    v22 = *(_DWORD *)(v8 + 84);
    v28 = v7;
    v26 = *(_QWORD *)(v8 + 64);
  }
  if (v22)
    v31 = v26;
  else
    v31 = v26 + 1;
  *(_OWORD *)(((unint64_t)v20 + v31 + 7) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v21 + v31 + 7) & 0xFFFFFFFFFFFFF8);
  v32 = ((v31 + ((v9 + 48) & v19) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v33 = ((unint64_t)v13 + v9 + v32) & v19;
  v34 = ((unint64_t)v14 + v9 + v32) & v19;
  v29(v33, v34, v28);
  v35 = (_QWORD *)((v26 + 7 + v33) & 0xFFFFFFFFFFFFFFF8);
  v36 = (_QWORD *)((v26 + 7 + v34) & 0xFFFFFFFFFFFFFFF8);
  *v35 = *v36;
  v37 = (void *)(((unint64_t)v35 + v11 + 8) & ~v11);
  v38 = (const void *)(((unint64_t)v36 + v11 + 8) & ~v11);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v42 + 48))(v38, 1, v43))
  {
    if (*(_DWORD *)(v42 + 84))
      v39 = *(_QWORD *)(v42 + 64);
    else
      v39 = *(_QWORD *)(v42 + 64) + 1;
    memcpy(v37, v38, v39);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v42 + 32))(v37, v38, v43);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v37, 0, 1, v43);
  }
  return v44;
}

uint64_t sub_2453CF47C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  uint64_t (*v36)(void *, uint64_t, uint64_t);
  int v37;
  size_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = sub_245443B14();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = sub_245443AC0();
  v41 = *(_QWORD *)(v10 - 8);
  v42 = v10;
  v40 = *(unsigned __int8 *)(v41 + 80);
  v11 = v9 | v40 | 7;
  v43 = a1;
  v12 = (_QWORD *)((v11 + v6 + a1) & ~v11);
  v13 = (_QWORD *)((v11 + v6 + a2) & ~v11);
  *v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRelease();
  v14 = (_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRelease();
  v16 = (_QWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  v17 = (_QWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRelease();
  v18 = ~v9;
  v19 = (void *)(((unint64_t)v16 + v9 + 16) & ~v9);
  v20 = (void *)(((unint64_t)v17 + v9 + 16) & ~v9);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  v22 = v21(v19, 1, v7);
  v23 = v21(v20, 1, v7);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v19, v20, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v19, 0, 1, v7);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v19, v20, v7);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v19, v7);
  }
  if (*(_DWORD *)(v8 + 84))
    v24 = *(_QWORD *)(v8 + 64);
  else
    v24 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(v19, v20, v24);
LABEL_10:
  v25 = *(_QWORD *)(v8 + 64);
  if (*(_DWORD *)(v8 + 84))
    v26 = *(_QWORD *)(v8 + 64);
  else
    v26 = v25 + 1;
  v27 = (_QWORD *)(((unint64_t)v19 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
  v28 = (_QWORD *)(((unint64_t)v20 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
  *v27 = *v28;
  v27[1] = v28[1];
  swift_bridgeObjectRelease();
  v29 = ((v26 + ((v9 + 48) & v18) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v30 = ((unint64_t)v12 + v9 + v29) & v18;
  v31 = ((unint64_t)v13 + v9 + v29) & v18;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(v30, v31, v7);
  v32 = (_QWORD *)((v25 + 7 + v30) & 0xFFFFFFFFFFFFFFF8);
  v33 = (_QWORD *)((v25 + 7 + v31) & 0xFFFFFFFFFFFFFFF8);
  *v32 = *v33;
  swift_bridgeObjectRelease();
  v34 = (void *)(((unint64_t)v32 + v40 + 8) & ~v40);
  v35 = (void *)(((unint64_t)v33 + v40 + 8) & ~v40);
  v36 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v41 + 48);
  LODWORD(v31) = v36(v34, 1, v42);
  v37 = v36(v35, 1, v42);
  if ((_DWORD)v31)
  {
    if (!v37)
    {
      (*(void (**)(void *, void *, uint64_t))(v41 + 32))(v34, v35, v42);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v34, 0, 1, v42);
      return v43;
    }
  }
  else
  {
    if (!v37)
    {
      (*(void (**)(void *, void *, uint64_t))(v41 + 40))(v34, v35, v42);
      return v43;
    }
    (*(void (**)(void *, uint64_t))(v41 + 8))(v34, v42);
  }
  if (*(_DWORD *)(v41 + 84))
    v38 = *(_QWORD *)(v41 + 64);
  else
    v38 = *(_QWORD *)(v41 + 64) + 1;
  memcpy(v34, v35, v38);
  return v43;
}

uint64_t sub_2453CF7BC(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t (*v41)(unint64_t, uint64_t, uint64_t);
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unsigned int v46;
  uint64_t v47;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v47 = sub_245443B14();
  v8 = *(_QWORD *)(v47 - 8);
  v9 = *(unsigned int *)(v8 + 84);
  if ((_DWORD)v9)
    v10 = v9 - 1;
  else
    v10 = 0;
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = v10;
  if (v9 <= v11)
    v12 = v11;
  else
    v12 = *(_DWORD *)(v8 + 84);
  v13 = sub_245443AC0();
  v15 = *(_QWORD *)(v13 - 8);
  v16 = *(unsigned int *)(v15 + 84);
  v17 = v16 - 1;
  if (!(_DWORD)v16)
    v17 = 0;
  if (v12 <= v17)
    v18 = v17;
  else
    v18 = v12;
  if (v18 <= v7)
    v19 = v7;
  else
    v19 = v18;
  v20 = *(_QWORD *)(v8 + 64);
  v21 = v20 + 7;
  v22 = v20 + 8;
  if ((_DWORD)v9)
    v23 = v21;
  else
    v23 = v22;
  if ((_DWORD)v16)
    v24 = *(_QWORD *)(v15 + 64);
  else
    v24 = *(_QWORD *)(v15 + 64) + 1;
  if (!a2)
    return 0;
  v25 = v13;
  v26 = *(unsigned __int8 *)(v8 + 80);
  v27 = *(unsigned __int8 *)(v15 + 80);
  v28 = v26 | v27 | 7;
  v29 = v28 + *(_QWORD *)(v6 + 64);
  v30 = ((v23 + ((v26 + 48) & ~v26)) & 0xFFFFFFFFFFFFFFF8) + 16;
  v31 = v27 + 8;
  if (a2 <= v19)
    goto LABEL_44;
  v32 = v24 + (v29 & ~v28) + ((v31 + ((v21 + ((v30 + v26) & ~v26)) & 0xFFFFFFFFFFFFFFF8)) & ~v27);
  v14 = (8 * v32);
  if (v32 <= 3)
  {
    v35 = ((a2 - v19 + ~(-1 << (8 * v32))) >> (8 * v32)) + 1;
    if (HIWORD(v35))
    {
      v33 = *(_DWORD *)(a1 + v32);
      if (!v33)
        goto LABEL_44;
      goto LABEL_35;
    }
    if (v35 > 0xFF)
    {
      v33 = *(unsigned __int16 *)(a1 + v32);
      if (!*(_WORD *)(a1 + v32))
        goto LABEL_44;
      goto LABEL_35;
    }
    if (v35 < 2)
    {
LABEL_44:
      if (v7 >= v18)
      {
        v41 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
        v42 = a1;
        v43 = v7;
        v44 = v5;
      }
      else
      {
        v38 = ~v26;
        v39 = (v29 + a1) & ~v28;
        if (v11 == v18)
        {
          if ((v10 & 0x80000000) == 0)
          {
            v40 = *(_QWORD *)(v39 + 8);
LABEL_54:
            if (v40 >= 0xFFFFFFFF)
              LODWORD(v40) = -1;
            return (v40 + 1);
          }
          v46 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v8 + 48))((v26 + ((((v39 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & v38, v9, v47, v14);
          goto LABEL_59;
        }
        v42 = (v39 + v26 + v30) & v38;
        if ((_DWORD)v9 != v18)
        {
          v45 = (unint64_t *)((v21 + v42) & 0xFFFFFFFFFFFFFFF8);
          if ((v18 & 0x80000000) == 0)
          {
            v40 = *v45;
            goto LABEL_54;
          }
          v46 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v15 + 48))(((unint64_t)v45 + v31) & ~v27, v16, v25, v14);
LABEL_59:
          if (v46 >= 2)
            return v46 - 1;
          else
            return 0;
        }
        v41 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
        v43 = v9;
        v44 = v47;
      }
      return v41(v42, v43, v44);
    }
  }
  v33 = *(unsigned __int8 *)(a1 + v32);
  if (!*(_BYTE *)(a1 + v32))
    goto LABEL_44;
LABEL_35:
  v36 = (v33 - 1) << (8 * v32);
  if (v32 > 3)
    v36 = 0;
  if ((_DWORD)v32)
  {
    if (v32 <= 3)
      v37 = v32;
    else
      v37 = 4;
    __asm { BR              X12 }
  }
  return v19 + v36 + 1;
}

void sub_2453CFAB8(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  size_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(sub_245443B14() - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9)
    v10 = v9 - 1;
  else
    v10 = 0;
  if (v10 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = v10;
  if (v9 <= v11)
    v12 = v11;
  else
    v12 = *(_DWORD *)(v8 + 84);
  v13 = 0;
  v14 = *(_QWORD *)(sub_245443AC0() - 8);
  v15 = *(_DWORD *)(v14 + 84);
  if (v15)
    v16 = v15 - 1;
  else
    v16 = 0;
  if (v12 <= v16)
    v17 = v16;
  else
    v17 = v12;
  if (v17 <= v7)
    v18 = v7;
  else
    v18 = v17;
  v19 = *(_QWORD *)(v8 + 64);
  if (v9)
    v20 = *(_QWORD *)(v8 + 64);
  else
    v20 = v19 + 1;
  v21 = *(unsigned __int8 *)(v8 + 80);
  v22 = *(unsigned __int8 *)(v14 + 80);
  v23 = (v22
       + 8
       + ((v19 + 7 + ((((((v21 + 48) & ~v21) + v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 + v21) & ~v21)) & 0xFFFFFFFFFFFFFFF8)) & ~v22;
  v24 = *(_QWORD *)(v14 + 64);
  if (!v15)
    ++v24;
  v25 = (((v21 | v22 | 7) + *(_QWORD *)(v6 + 64)) & ~(v21 | v22 | 7)) + v24 + v23;
  if (a3 > v18)
  {
    if (v25 > 3)
    {
      v13 = 1u;
      if (v18 >= a2)
        goto LABEL_27;
LABEL_33:
      v27 = ~v18 + a2;
      if (v25 < 4)
      {
        if ((_DWORD)v25)
        {
          v28 = v27 & ~(-1 << (8 * v25));
          bzero(a1, v25);
          if ((_DWORD)v25 == 3)
          {
            *(_WORD *)a1 = v28;
            a1[2] = BYTE2(v28);
          }
          else if ((_DWORD)v25 == 2)
          {
            *(_WORD *)a1 = v28;
          }
          else
          {
            *a1 = v28;
          }
        }
      }
      else
      {
        bzero(a1, v25);
        *(_DWORD *)a1 = v27;
      }
      __asm { BR              X10 }
    }
    v26 = ((a3 - v18 + ~(-1 << (8 * v25))) >> (8 * v25)) + 1;
    if (HIWORD(v26))
    {
      v13 = 4u;
      if (v18 < a2)
        goto LABEL_33;
LABEL_27:
      __asm { BR              X20 }
    }
    if (v26 >= 0x100)
      v13 = 2;
    else
      v13 = v26 > 1;
  }
  if (v18 < a2)
    goto LABEL_33;
  goto LABEL_27;
}

uint64_t type metadata accessor for ReplicatorStore.Entry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReplicatorStore.Entry);
}

uint64_t sub_2453CFFAC(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_2453CFFF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_2453D0034(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_2453D0078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for ReplicatorStore.Change(255, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  sub_245443EF8();
  v5 = sub_245443F58();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4+ ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80)), v5);
  return swift_deallocObject();
}

uint64_t sub_2453D00F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  type metadata accessor for ReplicatorStore.Change(255, v6, v7, a4);
  sub_245443EF8();
  v8 = *(unsigned __int8 *)(*(_QWORD *)(sub_245443F58() - 8) + 80);
  return sub_2453C1ECC(a1, v4 + ((v8 + 32) & ~v8), v6, v7);
}

uint64_t sub_2453D0164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_245443B14();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void sub_2453D01D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_245443B14() - 8) + 80);
  sub_2453C22D0(v0 + ((v1 + 40) & ~v1));
}

uint64_t sub_2453D0218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;

  return sub_2453C2560(a1, v2, a2);
}

uint64_t sub_2453D0230()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2453D025C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 32))(*(_QWORD *)(v0 + 48));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x249534374](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_2453D02E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_2453D0324(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 32))(*a1);
}

unint64_t sub_2453D0348()
{
  unint64_t result;

  result = qword_25440E6C8;
  if (!qword_25440E6C8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25440E6C8);
  }
  return result;
}

uint64_t sub_2453D0384(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x249534380](MEMORY[0x24BEE12C8], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2453D03C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v5 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_2453D0410@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2453C5DF4(a1, v2, a2);
}

uint64_t sub_2453D0428(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_2453D046C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_2453D0494(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[4];
  v5 = v1[5];
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_2453D0514;
  return sub_2453C3DCC(a1, v6, v7, v8, v4, v5);
}

uint64_t sub_2453D0514()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_2453D055C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_2453D0598()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2453D05BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_2453D0514;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_257464848 + dword_257464848))(a1, v4);
}

uint64_t sub_2453D062C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_2453D0670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_2453C56B4(*(uint64_t **)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), a4);
}

uint64_t sub_2453D068C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2453D06B8()
{
  uint64_t *v0;

  return sub_2453C34CC(v0[4], v0[5], v0[2], v0[3]);
}

uint64_t sub_2453D06C4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2453D06E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 32);
  v4 = a1;
  return v2(&v4);
}

uint64_t objectdestroy_15Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2453D0748(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_2453D0828;
  return sub_2453C391C(a1, v4, v5, v6);
}

uint64_t sub_2453D07C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_2453C5B78(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_2453D07E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_2453BE86C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x2495342F0](a1, v6, a5);
}

uint64_t sub_2453D0838(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  objc_class *v32;
  uint64_t v33;
  objc_super v34;
  uint64_t v35;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v35 = MEMORY[0x24BEE4AF8];
    sub_2454441A4();
    result = sub_245431A6C(v1);
    v5 = result;
    v6 = 0;
    v7 = v1 + 64;
    v26 = v1 + 80;
    v30 = v1;
    v27 = v2;
    v28 = v4;
    v29 = v1 + 64;
    while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(v1 + 32))
    {
      v9 = (unint64_t)v5 >> 6;
      if ((*(_QWORD *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0)
        goto LABEL_22;
      if (*(_DWORD *)(v1 + 36) != v4)
        goto LABEL_23;
      v31 = v6;
      v10 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v5);
      v11 = v10[1];
      v33 = *v10;
      v12 = (uint64_t *)(*(_QWORD *)(v1 + 56) + 16 * v5);
      v14 = *v12;
      v13 = v12[1];
      swift_bridgeObjectRetain();
      sub_2453CFFAC(v14, v13);
      swift_bridgeObjectRetain();
      sub_2453CFFAC(v14, v13);
      swift_bridgeObjectRelease();
      sub_2453BDCF8(v14, v13);
      swift_bridgeObjectRetain();
      sub_2453CFFAC(v14, v13);
      sub_2453BDCF8(v14, v13);
      swift_bridgeObjectRetain();
      sub_2453CFFAC(v14, v13);
      swift_bridgeObjectRelease();
      v32 = (objc_class *)type metadata accessor for ReplicationXPCServerParametersExtendedAttribute();
      v15 = (char *)objc_allocWithZone(v32);
      v16 = &v15[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_name];
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      v17 = (uint64_t *)&v15[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data];
      *(_OWORD *)&v15[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data] = xmmword_245445F70;
      swift_beginAccess();
      *(_QWORD *)v16 = v33;
      *((_QWORD *)v16 + 1) = v11;
      v18 = v15;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v19 = *v17;
      v20 = v17[1];
      *v17 = v14;
      v17[1] = v13;
      sub_2453CFFAC(v14, v13);
      sub_2453BDCE4(v19, v20);

      v34.receiver = v18;
      v34.super_class = v32;
      objc_msgSendSuper2(&v34, sel_init);
      sub_2453BDCF8(v14, v13);
      swift_bridgeObjectRelease();
      sub_2453BDCF8(v14, v13);
      sub_245444180();
      sub_2454441B0();
      v1 = v30;
      sub_2454441BC();
      result = sub_24544418C();
      v8 = 1 << *(_BYTE *)(v30 + 32);
      if (v5 >= v8)
        goto LABEL_24;
      v7 = v29;
      v21 = *(_QWORD *)(v29 + 8 * v9);
      if ((v21 & (1 << v5)) == 0)
        goto LABEL_25;
      v4 = v28;
      if (*(_DWORD *)(v30 + 36) != v28)
        goto LABEL_26;
      v22 = v21 & (-2 << (v5 & 0x3F));
      if (v22)
      {
        v8 = __clz(__rbit64(v22)) | v5 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = v9 + 1;
        v24 = (unint64_t)(v8 + 63) >> 6;
        if (v9 + 1 < v24)
        {
          v25 = *(_QWORD *)(v29 + 8 * v23);
          if (v25)
          {
LABEL_18:
            v8 = __clz(__rbit64(v25)) + (v23 << 6);
          }
          else
          {
            while (v24 - 2 != v9)
            {
              v25 = *(_QWORD *)(v26 + 8 * v9++);
              if (v25)
              {
                v23 = v9 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      v6 = v31 + 1;
      v5 = v8;
      if (v31 + 1 == v27)
        return v35;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

void *sub_2453D0B98(void *a1, void (*a2)(void **, id *), uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  void *v7;
  uint64_t v8;
  uint64_t i;
  id v10;
  uint64_t v11;
  id v13;
  void *v14;

  v14 = a1;
  v7 = a1;
  if (a4 >> 62)
    goto LABEL_13;
  v8 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v8; v8 = sub_245444204())
  {
    for (i = 4; ; ++i)
    {
      v10 = (a4 & 0xC000000000000001) != 0 ? (id)MEMORY[0x249533B58](i - 4, a4) : *(id *)(a4 + 8 * i);
      v7 = v10;
      v11 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v13 = v10;
      a2(&v14, &v13);
      if (v4)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        return v7;
      }

      if (v11 == v8)
      {
        swift_bridgeObjectRelease();
        return v14;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_2453D0CCC(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t static ReplicatorClient.maximumRecordSize.getter()
{
  return 102400;
}

uint64_t static ReplicatorClient.maximumMessageSize.getter()
{
  return 102400;
}

uint64_t static ReplicatorClient.maximumRecordBatchSize.getter()
{
  return 512000;
}

uint64_t static ReplicatorClient.maximumRecordIDSize.getter()
{
  return 1024;
}

uint64_t static ReplicatorClient.maximumBatchIDSize.getter()
{
  return 102400;
}

uint64_t ReplicatorClient.descriptor.getter()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = *(os_unfair_lock_s **)(v0 + 80);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  sub_2453C62CC(v2, (uint64_t (*)(void))sub_2453D0E80);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

uint64_t sub_2453D0DA0@<X0>(_QWORD *a1@<X0>, ReplicatorServices::ClientDescriptor *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  void *v18;
  uint64_t v19;
  uint64_t v20;

  v3 = a1[18];
  v4 = a1[19];
  v5 = a1[20];
  v6 = (void *)a1[21];
  v7 = a1[22];
  v8 = (void *)a1[23];
  v9 = a1[24];
  v10 = (void *)a1[25];
  v11 = (void *)a1[26];
  v12 = (void *)a1[27];
  if (v4)
  {
    a2->id._countAndFlagsBits = v3;
    a2->id._object = (void *)v4;
    a2->entitlement._countAndFlagsBits = v5;
    a2->entitlement._object = v6;
    a2->messageNotificationName._countAndFlagsBits = v7;
    a2->messageNotificationName._object = v8;
    a2->recordNotificationName._countAndFlagsBits = v9;
    a2->recordNotificationName._object = v10;
    a2->zoneDescriptors._rawValue = v11;
    a2->messageDescriptors._rawValue = v12;
  }
  else
  {
    v18 = (void *)a1[3];
    v19 = a1[2];
    v20 = a1[18];
    swift_bridgeObjectRetain();
    v13._object = v18;
    v13._countAndFlagsBits = v19;
    v14._countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    v15._countAndFlagsBits = 0;
    v15._object = (void *)0xE000000000000000;
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    ClientDescriptor.init(id:entitlement:messageNotificationName:recordNotificationName:zoneDescriptors:messageDescriptors:)(a2, v13, v14, v15, v16, MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4AF8]);
    v3 = v20;
  }
  return sub_2453F76A4(v3, v4);
}

uint64_t sub_2453D0E80@<X0>(ReplicatorServices::ClientDescriptor *a1@<X8>)
{
  _QWORD *v1;

  return sub_2453D0DA0(v1, a1);
}

uint64_t ReplicatorClient.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReplicatorClient.messageUpdates.getter()
{
  return sub_2453D1F80(&qword_257463998, &qword_25440EB08);
}

uint64_t sub_2453D0EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  v20[0] = a2;
  v20[1] = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574639A0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_245443B14();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v20 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v14 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v15 + v14, v6, v3);
  v16 = v20[0];
  sub_2453D10A4((uint64_t)sub_2453F7C14, v15, (uint64_t)v13);
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  v17 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, v11, v7);
  swift_retain();
  sub_245443F34();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_2453D10A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;

  v4 = v3;
  v8 = sub_245443B14();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_245443B08();
  v12 = *(os_unfair_lock_s **)(v4 + 80);
  swift_retain();
  os_unfair_lock_lock(v12 + 4);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)(v13 + 24) = a2;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = *(_QWORD *)(v4 + 128);
  *(_QWORD *)(v4 + 128) = 0x8000000000000000;
  sub_2453C8FA0((uint64_t)sub_2453F7CF0, v13, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v4 + 128) = v16;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_endAccess();
  os_unfair_lock_unlock(v12 + 4);
  return swift_release();
}

uint64_t ReplicatorClient.deviceUpdates.getter()
{
  return sub_2453D1F80(&qword_25440E020, &qword_25440EB00);
}

uint64_t sub_2453D1220(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  v20[0] = a2;
  v20[1] = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E028);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_245443B14();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v20 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v14 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v15 + v14, v6, v3);
  v16 = v20[0];
  sub_2453D13E4((uint64_t)sub_2453F7AD8, v15, (uint64_t)v13);
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  v17 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, v11, v7);
  swift_retain();
  sub_245443F34();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_2453D13E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  id v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[7];
  uint64_t v35;

  v4 = v3;
  v29 = sub_245443C88();
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v28 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_245443CAC();
  v30 = *(_QWORD *)(v9 - 8);
  v31 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v27 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_245443B14();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_245443B08();
  v15 = (os_unfair_lock_s *)v4[10];
  swift_retain();
  os_unfair_lock_lock(v15 + 4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v35 = v4[14];
  v4[14] = 0x8000000000000000;
  sub_2453C8FAC((uint64_t)sub_2453F7E04, v16, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
  v4[14] = v35;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_endAccess();
  os_unfair_lock_unlock(v15 + 4);
  swift_release();
  v33 = v4[7];
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB00);
  sub_245444030();
  v18 = aBlock[0];
  v19 = (void *)v4[9];
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = a1;
  v20[3] = a2;
  v20[4] = v18;
  aBlock[4] = sub_2453F7A38;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2453D0CCC;
  aBlock[3] = &block_descriptor_286;
  v21 = _Block_copy(aBlock);
  swift_retain();
  v22 = v19;
  v23 = v27;
  sub_245443C94();
  v35 = MEMORY[0x24BEE4AF8];
  sub_2453B8BF4(&qword_25440E640, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E670);
  sub_2453F75AC(&qword_25440E678, &qword_25440E670, MEMORY[0x24BEE12C8]);
  v25 = v28;
  v24 = v29;
  sub_2454440A8();
  MEMORY[0x249533A44](0, v23, v25, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v25, v24);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v23, v31);
  return swift_release();
}

uint64_t ReplicatorClient.pairedDeviceUpdates.getter()
{
  return sub_2453D1F80(&qword_25440E020, &qword_25440EB00);
}

uint64_t sub_2453D1768(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  v20[0] = a2;
  v20[1] = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E028);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_245443B14();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v20 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v14 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v15 + v14, v6, v3);
  v16 = v20[0];
  sub_2453D192C((uint64_t)sub_2453F7AD8, v15, (uint64_t)v13);
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  v17 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, v11, v7);
  swift_retain();
  sub_245443F34();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_2453D192C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  id v45;
  char *v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD aBlock[7];
  uint64_t v67;

  v4 = v3;
  v57 = a1;
  v7 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x24BDAC7A8](v7);
  v61 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_245443C88();
  v55 = *(_QWORD *)(v9 - 8);
  v56 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v54 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_245443CAC();
  v52 = *(_QWORD *)(v53 - 8);
  MEMORY[0x24BDAC7A8](v53);
  v51 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for ReplicatorDevice(0);
  v64 = *(_QWORD *)(v60 - 8);
  v12 = MEMORY[0x24BDAC7A8](v60);
  v62 = (uint64_t)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v49 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v49 - v17;
  v19 = sub_245443B14();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_245443B08();
  v23 = (os_unfair_lock_s *)v4[10];
  swift_retain();
  os_unfair_lock_lock(v23 + 4);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a3, v19);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = v57;
  *(_QWORD *)(v24 + 24) = a2;
  swift_beginAccess();
  v50 = a2;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v67 = v4[15];
  v4[15] = 0x8000000000000000;
  sub_2453C8FAC((uint64_t)sub_2453F7B14, v24, (uint64_t)v22, isUniquelyReferenced_nonNull_native);
  v4[15] = v67;
  swift_bridgeObjectRelease();
  v58 = *(void (**)(char *, uint64_t))(v20 + 8);
  v59 = v19;
  v58(v22, v19);
  swift_endAccess();
  os_unfair_lock_unlock(v23 + 4);
  swift_release();
  v49 = v4;
  v65 = v4[7];
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB00);
  result = sub_245444030();
  v27 = aBlock[0];
  v28 = MEMORY[0x24BEE4AF8];
  aBlock[0] = MEMORY[0x24BEE4AF8];
  v63 = *(_QWORD *)(v27 + 16);
  if (v63)
  {
    v29 = 0;
    v31 = v60;
    v30 = (uint64_t)v61;
    while (1)
    {
      if (v29 >= *(_QWORD *)(v27 + 16))
      {
        __break(1u);
        return result;
      }
      v32 = (*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
      v33 = *(_QWORD *)(v64 + 72);
      sub_2453BA364(v27 + v32 + v33 * v29, (uint64_t)v18, type metadata accessor for ReplicatorDevice);
      sub_2453BA364((uint64_t)&v18[*(int *)(v31 + 48)], v30, type metadata accessor for ReplicatorDevice.RelationshipState);
      v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
      v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v30, 4, v34);
      if ((v35 - 2) >= 2)
      {
        if (v35)
        {
          sub_2453BA3A8(v30, type metadata accessor for ReplicatorDevice.RelationshipState);
          sub_2453BA364((uint64_t)v18, (uint64_t)v16, type metadata accessor for ReplicatorDevice);
          sub_2453BA3A8((uint64_t)v16, type metadata accessor for ReplicatorDevice);
          goto LABEL_4;
        }
        v58((char *)v30, v59);
      }
      sub_2453BA364((uint64_t)v18, (uint64_t)v16, type metadata accessor for ReplicatorDevice);
      v36 = v16[*(int *)(v31 + 56)];
      sub_2453BA3A8((uint64_t)v16, type metadata accessor for ReplicatorDevice);
      if ((v36 & 1) == 0)
      {
        sub_2453D062C((uint64_t)v18, v62, type metadata accessor for ReplicatorDevice);
        v37 = aBlock[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_2453F1BF4(0, *(_QWORD *)(v37 + 16) + 1, 1);
          v37 = aBlock[0];
        }
        v39 = *(_QWORD *)(v37 + 16);
        v38 = *(_QWORD *)(v37 + 24);
        if (v39 >= v38 >> 1)
        {
          sub_2453F1BF4(v38 > 1, v39 + 1, 1);
          v37 = aBlock[0];
        }
        *(_QWORD *)(v37 + 16) = v39 + 1;
        result = sub_2453D062C(v62, v37 + v32 + v39 * v33, type metadata accessor for ReplicatorDevice);
        v31 = v60;
        v30 = (uint64_t)v61;
        goto LABEL_5;
      }
LABEL_4:
      result = sub_2453BA3A8((uint64_t)v18, type metadata accessor for ReplicatorDevice);
LABEL_5:
      if (v63 == ++v29)
      {
        v40 = aBlock[0];
        v28 = MEMORY[0x24BEE4AF8];
        goto LABEL_18;
      }
    }
  }
  v40 = MEMORY[0x24BEE4AF8];
LABEL_18:
  swift_bridgeObjectRelease();
  v41 = (void *)v49[9];
  v42 = (_QWORD *)swift_allocObject();
  v43 = v50;
  v42[2] = v57;
  v42[3] = v43;
  v42[4] = v40;
  aBlock[4] = sub_2453F7A38;
  aBlock[5] = v42;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2453D0CCC;
  aBlock[3] = &block_descriptor_268;
  v44 = _Block_copy(aBlock);
  swift_retain();
  v45 = v41;
  v46 = v51;
  sub_245443C94();
  v67 = v28;
  sub_2453B8BF4(&qword_25440E640, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E670);
  sub_2453F75AC(&qword_25440E678, &qword_25440E670, MEMORY[0x24BEE12C8]);
  v47 = v54;
  v48 = v56;
  sub_2454440A8();
  MEMORY[0x249533A44](0, v46, v47, v44);
  _Block_release(v44);

  (*(void (**)(char *, uint64_t))(v55 + 8))(v47, v48);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v46, v53);
  return swift_release();
}

uint64_t ReplicatorClient.recordUpdates.getter()
{
  return sub_2453D1F80(&qword_25440E6A0, (uint64_t *)&unk_25440E648);
}

uint64_t sub_2453D1F80(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a1);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BEE6A10], v3);
  return sub_245443F7C();
}

uint64_t sub_2453D2038(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  v20[0] = a2;
  v20[1] = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E6A8);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_245443B14();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v20 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v14 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v15 + v14, v6, v3);
  v16 = v20[0];
  sub_2453D21FC((uint64_t)sub_2453F7938, v15, (uint64_t)v13);
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  v17 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, v11, v7);
  swift_retain();
  sub_245443F34();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_2453D21FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  id v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[6];
  uint64_t v38;

  v4 = v3;
  v33 = sub_245443C88();
  v36 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v32 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_245443CAC();
  v34 = *(_QWORD *)(v9 - 8);
  v35 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v31 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_245443B14();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_245443B08();
  v15 = (os_unfair_lock_s *)v4[10];
  swift_retain();
  os_unfair_lock_lock(v15 + 4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v38 = v4[12];
  v4[12] = 0x8000000000000000;
  sub_2453C8FB8((uint64_t)sub_2453F7CF0, v16, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
  v4[12] = v38;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_endAccess();
  v18 = v4[17];
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v15 + 4);
  swift_release();
  v19 = MEMORY[0x24BEE4AF8];
  v20 = sub_245434AC0(MEMORY[0x24BEE4AF8]);
  v21 = sub_2453F412C(v18, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = (void *)v4[9];
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = a1;
  v23[3] = a2;
  v23[4] = v21;
  aBlock[4] = sub_2453F7A38;
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2453D0CCC;
  aBlock[3] = &block_descriptor_251;
  v24 = _Block_copy(aBlock);
  swift_retain();
  v25 = v22;
  v26 = v31;
  sub_245443C94();
  v38 = v19;
  sub_2453B8BF4(&qword_25440E640, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E670);
  sub_2453F75AC(&qword_25440E678, &qword_25440E670, MEMORY[0x24BEE12C8]);
  v28 = v32;
  v27 = v33;
  sub_2454440A8();
  MEMORY[0x249533A44](0, v26, v28, v24);
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v28, v27);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v26, v35);
  return swift_release();
}

uint64_t ReplicatorClient.zoneUpdates(zone:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E6A0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = v2;
  v12 = a1;
  v13 = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E648);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEE6A10], v5);
  return sub_245443F7C();
}

uint64_t sub_2453D2630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v22 = a3;
  v23 = a4;
  v24 = a2;
  v25 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E6A8);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_245443B14();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v22 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  v16 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v17 + v16, v8, v5);
  v18 = v24;
  sub_2453D28A4(v22, v23, (uint64_t)sub_2453F7938, v17, (uint64_t)v15);
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  v19 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v18;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v20 + v19, v13, v9);
  swift_retain();
  sub_245443F34();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
}

uint64_t sub_2453D27FC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  v6 = __swift_instantiateConcreteTypeFromMangledName(a3);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[1] = a1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(a4);
  sub_245443F4C();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_2453D28A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  id v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD aBlock[6];
  uint64_t v43;

  v6 = v5;
  v38 = sub_245443C88();
  v41 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v37 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_245443CAC();
  v39 = *(_QWORD *)(v13 - 8);
  v40 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v36 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_245443B14();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = a1;
  v19[3] = a2;
  v19[4] = a3;
  v19[5] = a4;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_245443B08();
  v20 = (os_unfair_lock_s *)v6[10];
  swift_retain();
  os_unfair_lock_lock(v20 + 4);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a5, v15);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = sub_2453F7A04;
  *(_QWORD *)(v21 + 24) = v19;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v43 = v6[12];
  v6[12] = 0x8000000000000000;
  sub_2453C8FB8((uint64_t)sub_2453F7A10, v21, (uint64_t)v18, isUniquelyReferenced_nonNull_native);
  v6[12] = v43;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  swift_endAccess();
  v23 = v6[17];
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v20 + 4);
  swift_release();
  v24 = MEMORY[0x24BEE4AF8];
  v25 = sub_245434AC0(MEMORY[0x24BEE4AF8]);
  v26 = sub_2453F412C(v23, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v27 = (void *)v6[9];
  v28 = (_QWORD *)swift_allocObject();
  v28[2] = sub_2453F7A04;
  v28[3] = v19;
  v28[4] = v26;
  aBlock[4] = sub_2453F7A38;
  aBlock[5] = v28;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2453D0CCC;
  aBlock[3] = &block_descriptor_234;
  v29 = _Block_copy(aBlock);
  swift_retain();
  v30 = v27;
  v31 = v36;
  sub_245443C94();
  v43 = v24;
  sub_2453B8BF4(&qword_25440E640, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E670);
  sub_2453F75AC(&qword_25440E678, &qword_25440E670, MEMORY[0x24BEE12C8]);
  v33 = v37;
  v32 = v38;
  sub_2454440A8();
  MEMORY[0x249533A44](0, v31, v33, v29);
  _Block_release(v29);
  swift_release();

  (*(void (**)(char *, uint64_t))(v41 + 8))(v33, v32);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v31, v40);
  return swift_release();
}

uint64_t ReplicatorClient.registrationUpdates.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464580);
  MEMORY[0x24BDAC7A8](v0);
  (*(void (**)(char *, _QWORD))(v2 + 104))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x24BEE6A10]);
  return sub_245443F7C();
}

uint64_t sub_2453D2CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  v20[0] = a2;
  v20[1] = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464588);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_245443B14();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v20 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v14 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v15 + v14, v6, v3);
  v16 = v20[0];
  sub_2453D2F5C((uint64_t)sub_2453F7870, v15, (uint64_t)v13);
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  v17 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, v11, v7);
  swift_retain();
  sub_245443F34();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_2453D2EB8(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE v7[16];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464578);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = &v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7[15] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257464588);
  sub_245443F4C();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_2453D2F5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[6];
  uint64_t v35;

  v4 = v3;
  v30 = sub_245443C88();
  v33 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v29 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_245443CAC();
  v31 = *(_QWORD *)(v9 - 8);
  v32 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v28 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_245443B14();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_245443B08();
  v15 = (os_unfair_lock_s *)v4[10];
  swift_retain();
  os_unfair_lock_lock(v15 + 4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v35 = v4[11];
  v4[11] = 0x8000000000000000;
  sub_2453C8FC4((uint64_t)sub_2453F78D8, v16, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
  v4[11] = v35;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_endAccess();
  os_unfair_lock_unlock(v15 + 4);
  swift_release();
  v18 = v4[8];
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v18 + 20));
  LOBYTE(v12) = *(_BYTE *)(v18 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v18 + 20));
  swift_release();
  v19 = (void *)v4[9];
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = a2;
  *(_BYTE *)(v20 + 32) = v12;
  aBlock[4] = sub_2453F7904;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2453D0CCC;
  aBlock[3] = &block_descriptor_215;
  v21 = _Block_copy(aBlock);
  swift_retain();
  v22 = v19;
  v23 = v28;
  sub_245443C94();
  v35 = MEMORY[0x24BEE4AF8];
  sub_2453B8BF4(&qword_25440E640, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E670);
  sub_2453F75AC(&qword_25440E678, &qword_25440E670, MEMORY[0x24BEE12C8]);
  v25 = v29;
  v24 = v30;
  sub_2454440A8();
  MEMORY[0x249533A44](0, v23, v25, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v33 + 8))(v25, v24);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v23, v32);
  return swift_release();
}

uint64_t sub_2453D32B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  os_unfair_lock_s *v5;
  uint64_t v6;

  v5 = *(os_unfair_lock_s **)(a2 + 80);
  swift_retain();
  os_unfair_lock_lock(v5 + 4);
  sub_2453C62CC(v6, a4);
  os_unfair_lock_unlock(v5 + 4);
  return swift_release();
}

uint64_t ReplicatorClient.localDeviceID.getter()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
  return sub_245444030();
}

uint64_t ReplicatorClient.devices.getter()
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB00);
  sub_245444030();
  return v1;
}

uint64_t ReplicatorClient.pairedDevices.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x24BDAC7A8](v1);
  v31 = (uint64_t)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ReplicatorDevice(0);
  v28 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v29 = (uint64_t)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v26 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v26 - v9;
  v32 = *(_QWORD *)(v0 + 56);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB00);
  sub_245444030();
  result = v33;
  v12 = MEMORY[0x24BEE4AF8];
  v33 = MEMORY[0x24BEE4AF8];
  v30 = *(_QWORD *)(result + 16);
  if (!v30)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return v12;
  }
  v13 = 0;
  v27 = v3;
  v14 = v28;
  while (v13 < *(_QWORD *)(result + 16))
  {
    v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v16 = *(_QWORD *)(v14 + 72);
    v17 = result;
    sub_2453BA364(result + v15 + v16 * v13, (uint64_t)v10, type metadata accessor for ReplicatorDevice);
    v18 = v31;
    sub_2453BA364((uint64_t)&v10[*(int *)(v3 + 48)], v31, type metadata accessor for ReplicatorDevice.RelationshipState);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 4, v19);
    if ((v20 - 2) >= 2)
    {
      if (v20)
      {
        sub_2453BA3A8(v31, type metadata accessor for ReplicatorDevice.RelationshipState);
        sub_2453BA364((uint64_t)v10, (uint64_t)v8, type metadata accessor for ReplicatorDevice);
        sub_2453BA3A8((uint64_t)v8, type metadata accessor for ReplicatorDevice);
        goto LABEL_4;
      }
      v21 = sub_245443B14();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v31, v21);
    }
    sub_2453BA364((uint64_t)v10, (uint64_t)v8, type metadata accessor for ReplicatorDevice);
    v22 = v8[*(int *)(v3 + 56)];
    sub_2453BA3A8((uint64_t)v8, type metadata accessor for ReplicatorDevice);
    if ((v22 & 1) == 0)
    {
      sub_2453D062C((uint64_t)v10, v29, type metadata accessor for ReplicatorDevice);
      v23 = v33;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2453F1BF4(0, *(_QWORD *)(v23 + 16) + 1, 1);
        v23 = v33;
      }
      v25 = *(_QWORD *)(v23 + 16);
      v24 = *(_QWORD *)(v23 + 24);
      if (v25 >= v24 >> 1)
      {
        sub_2453F1BF4(v24 > 1, v25 + 1, 1);
        v23 = v33;
      }
      *(_QWORD *)(v23 + 16) = v25 + 1;
      sub_2453D062C(v29, v23 + v15 + v25 * v16, type metadata accessor for ReplicatorDevice);
      v3 = v27;
      v14 = v28;
      goto LABEL_5;
    }
LABEL_4:
    sub_2453BA3A8((uint64_t)v10, type metadata accessor for ReplicatorDevice);
LABEL_5:
    ++v13;
    result = v17;
    if (v30 == v13)
    {
      v12 = v33;
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

uint64_t ReplicatorClient.isRegistered.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 20));
  v2 = *(unsigned __int8 *)(v1 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 20));
  swift_release();
  return v2;
}

_BYTE *sub_2453D3748@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

__n128 ReplicatorClient.replicatorProtocolVersion.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[2];
  *a1 = result;
  return result;
}

uint64_t ReplicatorClient.__allocating_init(descriptor:recordVersions:)(__int128 *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  ReplicatorClient.init(descriptor:recordVersions:)(a1, a2);
  return v4;
}

uint64_t ReplicatorClient.init(descriptor:recordVersions:)(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  void *v27;
  id v28;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[5];
  __int128 v41;

  v3 = v2;
  v39 = a2;
  v5 = sub_245444024();
  v37 = *(_QWORD *)(v5 - 8);
  v38 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v36 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_24544400C();
  MEMORY[0x24BDAC7A8](v7);
  v8 = sub_245443CAC();
  MEMORY[0x24BDAC7A8](v8);
  v9 = sub_245443BE0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v30 - v14;
  v16 = a1[2];
  v35 = a1[1];
  v17 = a1[3];
  v34 = a1[2];
  v40[2] = v16;
  v40[3] = v17;
  v40[4] = a1[4];
  v18 = a1[1];
  v31 = *a1;
  v40[0] = v31;
  v40[1] = v18;
  v32 = *((_QWORD *)a1 + 6);
  v33 = *((_QWORD *)a1 + 9);
  sub_245443B20();
  v19 = sub_245443BC8();
  v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v30 = *(__int128 *)((char *)a1 + 56);
  v20(v15, v9);
  sub_245443B20();
  v21 = sub_245443BD4();
  v20(v13, v9);
  *(_QWORD *)(v3 + 32) = v19;
  *(_QWORD *)(v3 + 40) = v21;
  *(_QWORD *)(v3 + 48) = MEMORY[0x24BEE4B08];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E6E0);
  v22 = swift_allocObject();
  *(_DWORD *)(v22 + 20) = 0;
  *(_BYTE *)(v22 + 16) = 0;
  *(_QWORD *)(v3 + 64) = v22;
  sub_2453D0348();
  sub_245443C94();
  *(_QWORD *)&v41 = MEMORY[0x24BEE4AF8];
  sub_2453B8BF4((unint64_t *)&qword_25440E6C0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E688);
  sub_2453F75AC((unint64_t *)&qword_25440E690, &qword_25440E688, MEMORY[0x24BEE12C8]);
  sub_2454440A8();
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v36, *MEMORY[0x24BEE5750], v38);
  *(_QWORD *)(v3 + 72) = sub_245444048();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E6F0);
  v23 = swift_allocObject();
  *(_DWORD *)(v23 + 16) = 0;
  v24 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v3 + 80) = v23;
  *(_QWORD *)(v3 + 88) = v24;
  *(_QWORD *)(v3 + 96) = v24;
  *(_QWORD *)(v3 + 104) = v24;
  *(_QWORD *)(v3 + 112) = v24;
  *(_QWORD *)(v3 + 120) = v24;
  *(_QWORD *)(v3 + 128) = v24;
  *(_QWORD *)(v3 + 136) = v24;
  *(_BYTE *)(v3 + 224) = 2;
  v25 = v35;
  *(_OWORD *)(v3 + 144) = v31;
  *(_OWORD *)(v3 + 160) = v25;
  *(_OWORD *)(v3 + 176) = v34;
  *(_QWORD *)(v3 + 192) = v32;
  *(_OWORD *)(v3 + 200) = v30;
  *(_QWORD *)(v3 + 216) = v33;
  sub_2453F1C20((uint64_t)v40);
  sub_2453F1C90(0, 0);
  v41 = v40[0];
  *(_OWORD *)(v3 + 16) = v40[0];
  sub_2453F1C20((uint64_t)v40);
  sub_2453F5090((uint64_t)&v41);
  v26 = sub_2453F6894(v39, (uint64_t)v40, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_2453F4C68);
  sub_2453F50B8((uint64_t)v40);
  swift_bridgeObjectRelease();
  sub_2453F50B8((uint64_t)v40);
  *(_QWORD *)(v3 + 136) = v26;
  swift_bridgeObjectRelease();
  if (qword_25440E340 != -1)
    swift_once();
  v27 = (void *)qword_25440E5D0;
  *(_QWORD *)(v3 + 56) = qword_25440E5D0;
  v28 = v27;
  return v3;
}

uint64_t ReplicatorClient.__allocating_init(id:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  ReplicatorClient.init(id:)(a1, a2);
  return v4;
}

uint64_t ReplicatorClient.init(id:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a2;
  v3 = v2;
  v28 = a1;
  v4 = sub_245444024();
  v26 = *(_QWORD *)(v4 - 8);
  v27 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v25 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_24544400C();
  MEMORY[0x24BDAC7A8](v6);
  v7 = sub_245443CAC();
  MEMORY[0x24BDAC7A8](v7);
  v8 = sub_245443BE0();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v25 - v13;
  sub_245443B20();
  v15 = sub_245443BC8();
  v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v14, v8);
  sub_245443B20();
  v17 = sub_245443BD4();
  v16(v12, v8);
  *(_QWORD *)(v3 + 32) = v15;
  *(_QWORD *)(v3 + 40) = v17;
  *(_QWORD *)(v3 + 48) = MEMORY[0x24BEE4B08];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E6E0);
  v18 = swift_allocObject();
  *(_DWORD *)(v18 + 20) = 0;
  *(_BYTE *)(v18 + 16) = 0;
  *(_QWORD *)(v3 + 64) = v18;
  sub_2453D0348();
  sub_245443C94();
  v30 = MEMORY[0x24BEE4AF8];
  sub_2453B8BF4((unint64_t *)&qword_25440E6C0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E688);
  sub_2453F75AC((unint64_t *)&qword_25440E690, &qword_25440E688, MEMORY[0x24BEE12C8]);
  sub_2454440A8();
  (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v25, *MEMORY[0x24BEE5750], v27);
  *(_QWORD *)(v3 + 72) = sub_245444048();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E6F0);
  v19 = swift_allocObject();
  *(_DWORD *)(v19 + 16) = 0;
  v20 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v3 + 80) = v19;
  *(_QWORD *)(v3 + 88) = v20;
  *(_QWORD *)(v3 + 96) = v20;
  *(_QWORD *)(v3 + 104) = v20;
  *(_QWORD *)(v3 + 112) = v20;
  *(_QWORD *)(v3 + 120) = v20;
  *(_QWORD *)(v3 + 128) = v20;
  *(_QWORD *)(v3 + 136) = v20;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_BYTE *)(v3 + 224) = 2;
  v21 = v29;
  *(_QWORD *)(v3 + 16) = v28;
  *(_QWORD *)(v3 + 24) = v21;
  if (qword_25440E340 != -1)
    swift_once();
  v22 = (void *)qword_25440E5D0;
  *(_QWORD *)(v3 + 56) = qword_25440E5D0;
  v23 = v22;
  return v3;
}

uint64_t ReplicatorClient.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2453F1C90(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  return v0;
}

uint64_t ReplicatorClient.__deallocating_deinit()
{
  ReplicatorClient.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_2453D4034()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = *(os_unfair_lock_s **)(*(_QWORD *)v0 + 80);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  sub_2453F5D7C(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorClient.setEnabled(_:)(Swift::Bool a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[3];
  uint64_t v31;

  v3 = v1;
  v5 = *(_QWORD *)(v3 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 20));
  if (v2)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 20));
    __break(1u);
    os_unfair_lock_unlock((os_unfair_lock_t)v3);
    __break(1u);
  }
  else
  {
    v6 = *(_BYTE *)(v5 + 16);
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 20));
    swift_release();
    if ((v6 & 1) != 0)
    {
      v7 = *(os_unfair_lock_s **)(v3 + 80);
      swift_retain();
      os_unfair_lock_lock(v7 + 4);
      sub_2453C62CC(v8, (uint64_t (*)(void))sub_2453D0E80);
      os_unfair_lock_unlock(v7 + 4);
      swift_release();
      v9 = v30[1];
      v29 = v30[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a1)
      {
        if (qword_25440EC10 != -1)
          swift_once();
        v10 = sub_245443C04();
        __swift_project_value_buffer(v10, (uint64_t)qword_25440EBF8);
        swift_bridgeObjectRetain_n();
        v11 = sub_245443BEC();
        v12 = sub_245444000();
        if (os_log_type_enabled(v11, v12))
        {
          v13 = (uint8_t *)swift_slowAlloc();
          v14 = swift_slowAlloc();
          v30[0] = v14;
          *(_DWORD *)v13 = 136446210;
          swift_bridgeObjectRetain();
          v31 = sub_2453BDB24(v29, v9, v30);
          sub_245444078();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_2453B6000, v11, v12, "Enabling client %{public}s", v13, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x249534440](v14, -1, -1);
          MEMORY[0x249534440](v13, -1, -1);

        }
        else
        {

          v15 = swift_bridgeObjectRelease_n();
        }
        if (qword_25440E340 == -1)
          goto LABEL_22;
      }
      else
      {
        if (qword_25440EC10 != -1)
          swift_once();
        v21 = sub_245443C04();
        __swift_project_value_buffer(v21, (uint64_t)qword_25440EBF8);
        swift_bridgeObjectRetain_n();
        v22 = sub_245443BEC();
        v23 = sub_245444000();
        if (os_log_type_enabled(v22, v23))
        {
          v24 = (uint8_t *)swift_slowAlloc();
          v25 = swift_slowAlloc();
          v30[0] = v25;
          *(_DWORD *)v24 = 136446210;
          swift_bridgeObjectRetain();
          v31 = sub_2453BDB24(v29, v9, v30);
          sub_245444078();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_2453B6000, v22, v23, "Disabling client %{public}s", v24, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x249534440](v25, -1, -1);
          MEMORY[0x249534440](v24, -1, -1);

        }
        else
        {

          v15 = swift_bridgeObjectRelease_n();
        }
        if (qword_25440E340 == -1)
          goto LABEL_22;
      }
      v15 = swift_once();
LABEL_22:
      MEMORY[0x24BDAC7A8](v15);
      sub_245444030();
      v26 = swift_bridgeObjectRelease();
      v27 = *(os_unfair_lock_s **)(v3 + 80);
      MEMORY[0x24BDAC7A8](v26);
      swift_retain();
      os_unfair_lock_lock(v27 + 4);
      sub_2453C62CC(v28, (uint64_t (*)(void))sub_2453F515C);
      os_unfair_lock_unlock(v27 + 4);
      swift_release();
      return;
    }
    if (qword_25440EC10 != -1)
      swift_once();
    v16 = sub_245443C04();
    __swift_project_value_buffer(v16, (uint64_t)qword_25440EBF8);
    v17 = sub_245443BEC();
    v18 = sub_245443FE8();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_2453B6000, v17, v18, "Client is not registered", v19, 2u);
      MEMORY[0x249534440](v19, -1, -1);
    }

    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v20 = 2;
    *(_QWORD *)(v20 + 8) = 0;
    swift_willThrow();
  }
}

uint64_t ReplicatorClient.isEnabled.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  os_unfair_lock_s *v4;
  int v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  unsigned __int8 v18;
  uint64_t v19;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 20));
  v3 = *(unsigned __int8 *)(v2 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 20));
  swift_release();
  if (v3 == 1)
  {
    v4 = *(os_unfair_lock_s **)(v1 + 80);
    swift_retain();
    os_unfair_lock_lock(v4 + 4);
    sub_2453F51A0(&v19);
    v5 = v19;
    os_unfair_lock_unlock(v4 + 4);
    swift_release();
    if (v5 == 2)
    {
      v6 = *(os_unfair_lock_s **)(v1 + 80);
      swift_retain();
      os_unfair_lock_lock(v6 + 4);
      sub_2453C62CC(v7, (uint64_t (*)(void))sub_2453D0E80);
      os_unfair_lock_unlock(v6 + 4);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 = swift_bridgeObjectRelease();
      MEMORY[0x24BDAC7A8](v8);
      sub_245444030();
      v13 = swift_bridgeObjectRelease();
      v14 = v18;
      v15 = *(os_unfair_lock_s **)(v1 + 80);
      MEMORY[0x24BDAC7A8](v13);
      swift_retain();
      os_unfair_lock_lock(v15 + 4);
      sub_2453C62CC(v16, (uint64_t (*)(void))sub_2453F515C);
      os_unfair_lock_unlock(v15 + 4);
      swift_release();
    }
    else
    {
      return v5 & 1;
    }
  }
  else
  {
    if (qword_25440EC10 != -1)
      swift_once();
    v9 = sub_245443C04();
    __swift_project_value_buffer(v9, (uint64_t)qword_25440EBF8);
    v10 = sub_245443BEC();
    v11 = sub_245443FE8();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_2453B6000, v10, v11, "Client is not registered", v12, 2u);
      MEMORY[0x249534440](v12, -1, -1);
    }

    return 0;
  }
  return v14;
}

uint64_t sub_2453D4B30()
{
  return ReplicatorClient.isEnabled.getter() & 1;
}

void sub_2453D4B54(Swift::Bool a1)
{
  ReplicatorClient.setEnabled(_:)(a1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorClient.register()()
{
  NSObject *v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Class isa;
  char v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  uint8_t *v18;
  NSObject *v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  os_log_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  objc_class *v31;
  uint64_t v32;
  uint64_t v33;
  objc_class *v34;
  NSObject *v35;
  uint64_t *v36;
  os_unfair_lock_s *v37;
  objc_class *v38;
  NSObject *v39;
  os_log_t v40;
  uint64_t v41;
  NSObject *v42;
  os_unfair_lock_s *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_unfair_lock_s *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  NSObject *v54;
  os_unfair_lock_s *v55;
  uint64_t v56;
  uint64_t v57;
  os_unfair_lock_s *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  objc_class *v62;
  objc_class *v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  objc_class *v68;
  os_unfair_lock_s *v69;
  NSObject *v70;
  NSObject *v71;
  objc_class *v72;
  uint64_t v73;
  NSObject *v74;
  os_log_t v75;
  uint64_t v76;
  objc_class *v77;
  objc_class *v78;
  NSObject *v79;
  NSObject *v80;
  NSObject *v81;
  Class v82;
  Class v83;
  Class v84;
  Class v85;
  _QWORD *v86;
  os_unfair_lock_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_t v96;
  uint64_t v97[3];
  objc_class *v98;
  objc_class *v99;
  NSObject *v100;
  NSObject *v101;
  objc_class *v102;
  uint64_t v103;
  NSObject *v104;
  uint64_t v105;
  os_unfair_lock_s *v106;
  uint64_t v107;
  objc_class *v108;
  uint64_t v109;
  NSObject *v110;
  uint64_t v111;
  objc_class *v112;
  NSObject *v113;
  NSObject *v114;
  _QWORD v115[5];
  _QWORD v116[5];
  uint64_t v117;
  os_unfair_lock_s *v118;

  v3 = v1;
  v4 = v0;
  v5 = sub_245443C04();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  isa = v4[8].isa;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)isa + 5);
  if (v1)
  {
    v26 = (os_unfair_lock_s *)((char *)isa + 20);
    goto LABEL_29;
  }
  v10 = *((_BYTE *)isa + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)isa + 5);
  swift_release();
  if ((v10 & 1) == 0)
  {
    if (qword_25440EC10 != -1)
      swift_once();
    v15 = __swift_project_value_buffer(v5, (uint64_t)qword_25440EBF8);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v15, v5);
    swift_retain_n();
    v16 = sub_245443BEC();
    v17 = sub_245444000();
    if (os_log_type_enabled(v16, (os_log_type_t)v17))
    {
      LODWORD(v94) = v17;
      v96 = v16;
      v18 = (uint8_t *)swift_slowAlloc();
      v93 = swift_slowAlloc();
      v97[0] = v93;
      *(_DWORD *)v18 = 136446210;
      v19 = v4;
      v20 = (os_unfair_lock_s *)v4[10].isa;
      swift_retain();
      os_unfair_lock_lock(v20 + 4);
      v95 = v19;
      sub_2453C62CC(v21, (uint64_t (*)(void))sub_2453D0E80);
      v118 = 0;
      v92 = (uint64_t)(v18 + 4);
      os_unfair_lock_unlock(v20 + 4);
      swift_release();
      v2 = v106;
      v91 = v105;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v105 = sub_2453BDB24(v91, (unint64_t)v2, v97);
      sub_245444078();
      v4 = v95;
      swift_release_n();
      swift_bridgeObjectRelease();
      v22 = v96;
      _os_log_impl(&dword_2453B6000, v96, (os_log_type_t)v94, "Registering client %{public}s", v18, 0xCu);
      v23 = v93;
      swift_arrayDestroy();
      MEMORY[0x249534440](v23, -1, -1);
      MEMORY[0x249534440](v18, -1, -1);

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v3 = v118;
    }
    else
    {

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    v24 = (os_unfair_lock_s *)v4[10].isa;
    swift_retain();
    os_unfair_lock_lock(v24 + 4);
    sub_2453C62CC(v25, (uint64_t (*)(void))sub_2453F51E0);
    v118 = v3;
    v26 = v24 + 4;
    if (!v3)
    {
      os_unfair_lock_unlock(v26);
      v27 = swift_release();
      v28 = v105;
      v29 = (uint64_t)v106;
      v30 = v107;
      v31 = v108;
      v32 = v109;
      v33 = v111;
      v34 = v112;
      v35 = v113;
      v96 = v114;
      v95 = v110;
      if (v106)
      {
        v36 = v116;
      }
      else
      {
        v85 = v112;
        v93 = v105;
        v94 = v107;
        if (qword_25440E340 != -1)
          v27 = swift_once();
        MEMORY[0x24BDAC7A8](v27);
        *(&v76 - 4) = v46;
        *(&v76 - 3) = v47;
        v74 = v48;
        v49 = v118;
        sub_245444030();
        if (v49)
        {
          v74 = v35;
          v75 = v96;
          v44 = v93;
          v45 = 0;
          goto LABEL_27;
        }
        v118 = 0;
        v92 = v97[0];
        v29 = v97[1];
        v91 = v97[2];
        v62 = v98;
        v77 = v98;
        v63 = v99;
        v79 = v100;
        v90 = v101;
        v78 = v102;
        v64 = v103;
        v89 = v103;
        v80 = v104;
        v74 = v35;
        v75 = v96;
        sub_2453F1C90(v93, 0);
        v65 = v92;
        v105 = v92;
        v106 = (os_unfair_lock_s *)v29;
        v66 = v91;
        v107 = v91;
        v108 = v62;
        v88 = (uint64_t)v63;
        v67 = v79;
        v109 = (uint64_t)v63;
        v110 = v79;
        v68 = (objc_class *)v90;
        v34 = v78;
        v111 = (uint64_t)v90;
        v112 = v78;
        v95 = v4[10].isa;
        v69 = (os_unfair_lock_s *)&v95[2];
        v96 = v95 + 2;
        v113 = v64;
        v70 = v80;
        v114 = v80;
        swift_retain();
        os_unfair_lock_lock(v69);
        v94 = (uint64_t)v4[18].isa;
        v93 = (uint64_t)v4[19].isa;
        v87 = (os_unfair_lock_t)v4[20].isa;
        v86 = v4[21].isa;
        v85 = v4[22].isa;
        v84 = v4[23].isa;
        v83 = v4[24].isa;
        v82 = v4[25].isa;
        v71 = v4[27].isa;
        v81 = v4[26].isa;
        v4[18].isa = (Class)v65;
        v4[19].isa = (Class)v29;
        v72 = v77;
        v4[20].isa = (Class)v66;
        v4[21].isa = v72;
        v4[22].isa = v63;
        v4[23].isa = (Class)v67;
        v4[24].isa = v68;
        v4[25].isa = v34;
        v4[26].isa = (Class)v89;
        v4[27].isa = (Class)v70;
        swift_bridgeObjectRetain();
        v31 = v72;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v35 = v70;
        swift_bridgeObjectRetain();
        v75 = v71;
        v74 = v81;
        sub_2453F1C90(v94, v93);
        os_unfair_lock_unlock((os_unfair_lock_t)v96);
        swift_release();
        v32 = v88;
        v95 = v67;
        v33 = (uint64_t)v90;
        v28 = v92;
        v30 = v91;
        v90 = v89;
        v36 = &v117;
      }
      *(v36 - 32) = (uint64_t)v35;
      v94 = v30;
      v92 = v33;
      v91 = v32;
      v37 = (os_unfair_lock_s *)((char *)v4[8].isa + 20);
      v88 = (uint64_t)v4[8].isa;
      swift_retain();
      v87 = v37;
      os_unfair_lock_lock(v37);
      v86 = &v76;
      v115[0] = v28;
      v115[1] = v29;
      v115[2] = v30;
      v115[3] = v31;
      v115[4] = v32;
      v116[0] = v95;
      v116[1] = v33;
      v116[2] = v34;
      v38 = v34;
      v39 = v90;
      v40 = v96;
      v116[3] = v90;
      v116[4] = v96;
      MEMORY[0x24BDAC7A8](v41);
      v74 = v42;
      v75 = (os_log_t)v115;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v43 = v118;
      sub_245444030();
      v89 = v29;
      v93 = v28;
      if (v43)
      {
        v74 = v39;
        v75 = v40;
        sub_2453F1C90(v28, v29);
        os_unfair_lock_unlock(v87);
        swift_release();
        v74 = v39;
        v75 = v40;
        v44 = v93;
        v45 = v89;
LABEL_27:
        sub_2453F1C90(v44, v45);
        return;
      }
      v118 = 0;
      v74 = v39;
      v75 = v40;
      v84 = v31;
      v85 = v38;
      sub_2453F1C90(v28, v29);
      *(_BYTE *)(v88 + 16) = 1;
      os_unfair_lock_unlock(v87);
      v50 = swift_release();
      if (qword_25440E340 != -1)
        v50 = swift_once();
      MEMORY[0x24BDAC7A8](v50);
      *(&v76 - 4) = v51;
      *(&v76 - 3) = v52;
      v88 = v52;
      v54 = v53;
      v74 = v53;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E350);
      v55 = v118;
      v56 = sub_245444030();
      v57 = v97[0];
      v58 = (os_unfair_lock_s *)v4[10].isa;
      MEMORY[0x24BDAC7A8](v56);
      v74 = v4;
      v75 = (os_log_t)v57;
      v3 = v58 + 4;
      swift_retain();
      os_unfair_lock_lock(v58 + 4);
      sub_2453F7598(v97);
      if (!v55)
      {
        v59 = v97[0];
        os_unfair_lock_unlock(v58 + 4);
        swift_release();
        sub_2453D5BA4(v57, v59);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v97[0] = sub_2453E0E10();
        swift_allocObject();
        swift_weakInit();
        __swift_instantiateConcreteTypeFromMangledName(&qword_25440E5F0);
        sub_2453F75AC(&qword_25440E5E8, &qword_25440E5F0, MEMORY[0x24BDB9AF8]);
        sub_245443C70();
        swift_release();
        swift_release();
        swift_beginAccess();
        sub_245443C28();
        swift_endAccess();
        v60 = swift_release();
        MEMORY[0x24BDAC7A8](v60);
        *(&v76 - 4) = v88;
        *(&v76 - 3) = (uint64_t)v54;
        __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB08);
        sub_245444030();
        v61 = v89;
        v118 = 0;
        sub_2453D5F48(v97[0]);
        swift_bridgeObjectRelease();
        v97[0] = sub_2453E0E34();
        swift_allocObject();
        swift_weakInit();
        __swift_instantiateConcreteTypeFromMangledName(&qword_25440E610);
        v73 = MEMORY[0x24BDB9AF8];
        sub_2453F75AC(&qword_25440E608, &qword_25440E610, MEMORY[0x24BDB9AF8]);
        sub_245443C70();
        swift_release();
        swift_release();
        swift_beginAccess();
        sub_245443C28();
        swift_endAccess();
        swift_release();
        v97[0] = sub_2453E0EE8();
        swift_allocObject();
        swift_weakInit();
        __swift_instantiateConcreteTypeFromMangledName(&qword_25440E600);
        sub_2453F75AC(&qword_25440E5F8, &qword_25440E600, v73);
        sub_245443C70();
        swift_release();
        swift_release();
        swift_beginAccess();
        sub_245443C28();
        swift_endAccess();
        swift_release();
        v97[0] = sub_2453E0FBC();
        swift_allocObject();
        swift_weakInit();
        sub_245443C70();
        swift_release();
        swift_release();
        swift_beginAccess();
        sub_245443C28();
        swift_endAccess();
        swift_release();
        sub_2453D6718(1);
        v75 = v96;
        v74 = v90;
        v44 = v93;
        v45 = v61;
        goto LABEL_27;
      }
LABEL_30:
      os_unfair_lock_unlock(v3);
      __break(1u);
      return;
    }
LABEL_29:
    os_unfair_lock_unlock(v26);
    __break(1u);
    swift_release();
    os_unfair_lock_unlock(v2);
    __break(1u);
    goto LABEL_30;
  }
  if (qword_25440EC10 != -1)
    swift_once();
  __swift_project_value_buffer(v5, (uint64_t)qword_25440EBF8);
  v11 = sub_245443BEC();
  v12 = sub_245443FE8();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_2453B6000, v11, v12, "Client is already registered", v13, 2u);
    MEMORY[0x249534440](v13, -1, -1);
  }

  sub_2453CBA28();
  swift_allocError();
  *(_BYTE *)v14 = 2;
  *(_QWORD *)(v14 + 8) = 0;
  swift_willThrow();
}

uint64_t sub_2453D5B48@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1[18];
  v2 = a1[19];
  v4 = a1[20];
  v5 = a1[21];
  v6 = a1[22];
  v7 = a1[23];
  v8 = a1[24];
  v9 = a1[25];
  v10 = a1[26];
  v11 = a1[27];
  *a2 = v3;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  a2[6] = v8;
  a2[7] = v9;
  a2[8] = v10;
  a2[9] = v11;
  return sub_2453F76A4(v3, v2);
}

uint64_t sub_2453D5BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = sub_245443C88();
  v22 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_245443CAC();
  v20 = *(_QWORD *)(v9 - 8);
  v21 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(os_unfair_lock_s **)(v2 + 80);
  swift_retain();
  os_unfair_lock_lock(v12 + 4);
  swift_beginAccess();
  v13 = *(_QWORD *)(v2 + 96);
  swift_beginAccess();
  v14 = *(_QWORD *)(v3 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v12 + 4);
  swift_release();
  v15 = *(void **)(v3 + 72);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v3;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = v13;
  v16[6] = v14;
  aBlock[4] = sub_2453F7630;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2453D0CCC;
  aBlock[3] = &block_descriptor_182;
  v17 = _Block_copy(aBlock);
  v18 = v15;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_245443C94();
  v23 = MEMORY[0x24BEE4AF8];
  sub_2453B8BF4(&qword_25440E640, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E670);
  sub_2453F75AC(&qword_25440E678, &qword_25440E670, MEMORY[0x24BEE12C8]);
  sub_2454440A8();
  MEMORY[0x249533A44](0, v11, v8, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v21);
  return swift_release();
}

uint64_t sub_2453D5E24()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    swift_retain();
    v2 = swift_bridgeObjectRetain();
    v3 = sub_2453F5968(v2, v1);
    swift_bridgeObjectRelease();
    v4 = swift_release();
    v5 = *(os_unfair_lock_s **)(v1 + 80);
    MEMORY[0x24BDAC7A8](v4);
    swift_retain();
    os_unfair_lock_lock(v5 + 4);
    sub_2453F7598(&v7);
    v6 = v7;
    os_unfair_lock_unlock(v5 + 4);
    swift_release();
    sub_2453D5BA4(v3, v6);
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2453D5F48(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];

  v3 = sub_245443C88();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v18 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_245443CAC();
  v7 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (os_unfair_lock_s *)v1[10];
  swift_retain();
  os_unfair_lock_lock(v10 + 4);
  swift_beginAccess();
  v11 = v1[16];
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v10 + 4);
  swift_release();
  v12 = (void *)v1[9];
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v11;
  *(_QWORD *)(v13 + 24) = a1;
  aBlock[4] = sub_2453F7570;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2453D0CCC;
  aBlock[3] = &block_descriptor_170;
  v14 = _Block_copy(aBlock);
  v15 = v12;
  swift_bridgeObjectRetain();
  sub_245443C94();
  v19 = MEMORY[0x24BEE4AF8];
  sub_2453B8BF4(&qword_25440E640, v4, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E670);
  sub_2453F75AC(&qword_25440E678, &qword_25440E670, MEMORY[0x24BEE12C8]);
  sub_2454440A8();
  MEMORY[0x249533A44](0, v9, v6, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v18 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v17);
  return swift_release();
}

uint64_t sub_2453D618C()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    swift_retain();
    v2 = swift_bridgeObjectRetain();
    v3 = sub_2453F4A88(v2, v1);
    swift_bridgeObjectRelease();
    swift_release();
    sub_2453D5F48(v3);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2453D6224(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];

  v3 = sub_245443C88();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v18 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_245443CAC();
  v7 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (os_unfair_lock_s *)v1[10];
  swift_retain();
  os_unfair_lock_lock(v10 + 4);
  swift_beginAccess();
  v11 = v1[14];
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v10 + 4);
  swift_release();
  v12 = (void *)v1[9];
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v11;
  *(_QWORD *)(v13 + 24) = a1;
  aBlock[4] = sub_2453F7518;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2453D0CCC;
  aBlock[3] = &block_descriptor_160;
  v14 = _Block_copy(aBlock);
  v15 = v12;
  swift_bridgeObjectRetain();
  sub_245443C94();
  v19 = MEMORY[0x24BEE4AF8];
  sub_2453B8BF4(&qword_25440E640, v4, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E670);
  sub_2453F75AC(&qword_25440E678, &qword_25440E670, MEMORY[0x24BEE12C8]);
  sub_2454440A8();
  MEMORY[0x249533A44](0, v9, v6, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v18 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v17);
  return swift_release();
}

uint64_t sub_2453D6468(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    a3(v4);
    return swift_release();
  }
  return result;
}

uint64_t sub_2453D64D4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];

  v3 = sub_245443C88();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v18 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_245443CAC();
  v7 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (os_unfair_lock_s *)v1[10];
  swift_retain();
  os_unfair_lock_lock(v10 + 4);
  swift_beginAccess();
  v11 = v1[15];
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v10 + 4);
  swift_release();
  v12 = (void *)v1[9];
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v11;
  *(_QWORD *)(v13 + 24) = a1;
  aBlock[4] = sub_2453F74E4;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2453D0CCC;
  aBlock[3] = &block_descriptor_151;
  v14 = _Block_copy(aBlock);
  v15 = v12;
  swift_bridgeObjectRetain();
  sub_245443C94();
  v19 = MEMORY[0x24BEE4AF8];
  sub_2453B8BF4(&qword_25440E640, v4, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E670);
  sub_2453F75AC(&qword_25440E678, &qword_25440E670, MEMORY[0x24BEE12C8]);
  sub_2454440A8();
  MEMORY[0x249533A44](0, v9, v6, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v18 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v17);
  return swift_release();
}

uint64_t sub_2453D6718(char a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];

  v3 = sub_245443C88();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v18 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_245443CAC();
  v7 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (os_unfair_lock_s *)v1[10];
  swift_retain();
  os_unfair_lock_lock(v10 + 4);
  swift_beginAccess();
  v11 = v1[11];
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v10 + 4);
  swift_release();
  v12 = (void *)v1[9];
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v11;
  *(_BYTE *)(v13 + 24) = a1;
  aBlock[4] = sub_2453F74A8;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2453D0CCC;
  aBlock[3] = &block_descriptor_142;
  v14 = _Block_copy(aBlock);
  v15 = v12;
  sub_245443C94();
  v19 = MEMORY[0x24BEE4AF8];
  sub_2453B8BF4(&qword_25440E640, v4, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E670);
  sub_2453F75AC(&qword_25440E678, &qword_25440E670, MEMORY[0x24BEE12C8]);
  sub_2454440A8();
  MEMORY[0x249533A44](0, v9, v6, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v18 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v17);
  return swift_release();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorClient.unregister()()
{
  _QWORD *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  _QWORD *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  _DWORD *v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  os_log_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  int v35;
  os_log_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD v43[6];
  uint64_t v44;

  v3 = v0;
  v4 = (os_unfair_lock_s *)sub_245443C04();
  v5 = *(_QWORD *)&v4[-2]._os_unfair_lock_opaque;
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v3[8];
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 20));
  if (v1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 20));
    __break(1u);
    os_unfair_lock_unlock(v4);
    __break(1u);
    swift_release();
    os_unfair_lock_unlock(v2);
    __break(1u);
  }
  else
  {
    v9 = *(_BYTE *)(v8 + 16);
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 20));
    swift_release();
    if ((v9 & 1) != 0)
    {
      if (qword_25440EC10 != -1)
        swift_once();
      v10 = __swift_project_value_buffer((uint64_t)v4, (uint64_t)qword_25440EBF8);
      (*(void (**)(char *, uint64_t, os_unfair_lock_s *))(v5 + 16))(v7, v10, v4);
      swift_retain_n();
      v11 = sub_245443BEC();
      v12 = sub_245444000();
      if (os_log_type_enabled(v11, (os_log_type_t)v12))
      {
        v35 = v12;
        v36 = v11;
        v44 = v5;
        v13 = (_DWORD *)swift_slowAlloc();
        v34 = swift_slowAlloc();
        v37 = v34;
        *v13 = 136446210;
        v14 = (os_unfair_lock_s *)v3[10];
        swift_retain();
        os_unfair_lock_lock(v14 + 4);
        sub_2453C62CC(v15, (uint64_t (*)(void))sub_2453D0E80);
        v33 = v13 + 1;
        os_unfair_lock_unlock(v14 + 4);
        swift_release();
        v16 = *((_QWORD *)&v38 + 1);
        v32 = v38;
        v31 = (uint8_t *)v13;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v17 = sub_2453BDB24(v32, v16, &v37);
        v18 = v31;
        *(_QWORD *)&v38 = v17;
        sub_245444078();
        swift_release_n();
        swift_bridgeObjectRelease();
        v19 = v36;
        _os_log_impl(&dword_2453B6000, v36, (os_log_type_t)v35, "Unregistering client %{public}s", v18, 0xCu);
        v20 = v34;
        swift_arrayDestroy();
        MEMORY[0x249534440](v20, -1, -1);
        MEMORY[0x249534440](v18, -1, -1);

        (*(void (**)(char *, os_unfair_lock_s *))(v44 + 8))(v7, v4);
      }
      else
      {

        swift_release_n();
        (*(void (**)(char *, os_unfair_lock_s *))(v5 + 8))(v7, v4);
      }
      v25 = v3[8];
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v25 + 20));
      *(_BYTE *)(v25 + 16) = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)(v25 + 20));
      swift_release();
      v26 = v3[7];
      v27 = (os_unfair_lock_s *)v3[10];
      swift_retain();
      os_unfair_lock_lock(v27 + 4);
      sub_2453C62CC(v28, (uint64_t (*)(void))sub_2453D0E80);
      os_unfair_lock_unlock(v27 + 4);
      v29 = swift_release();
      v43[3] = v41;
      v43[4] = v42;
      v43[1] = v39;
      v43[2] = v40;
      v43[0] = v38;
      MEMORY[0x24BDAC7A8](v29);
      *(&v30 - 2) = v26;
      *(&v30 - 1) = (uint64_t)v43;
      sub_245444030();
      sub_2453F50B8((uint64_t)v43);
      sub_2453D6718(0);
    }
    else
    {
      if (qword_25440EC10 != -1)
        swift_once();
      __swift_project_value_buffer((uint64_t)v4, (uint64_t)qword_25440EBF8);
      v21 = sub_245443BEC();
      v22 = sub_245443FE8();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v23 = 0;
        _os_log_impl(&dword_2453B6000, v21, v22, "Client is not registered", v23, 2u);
        MEMORY[0x249534440](v23, -1, -1);
      }

      sub_2453CBA28();
      swift_allocError();
      *(_BYTE *)v24 = 2;
      *(_QWORD *)(v24 + 8) = 0;
      swift_willThrow();
    }
  }
}

uint64_t sub_2453D6E7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v4;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 20));
  sub_2453D3748((_BYTE *)(v1 + 16), &v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 20));
  v2 = v4;
  swift_release();
  return v2;
}

uint64_t sub_2453D6EF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464580);
  MEMORY[0x24BDAC7A8](v0);
  (*(void (**)(char *, _QWORD))(v2 + 104))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x24BEE6A10]);
  return sub_245443F7C();
}

void sub_2453D6F94()
{
  ReplicatorClient.register()();
}

void sub_2453D6FB4()
{
  ReplicatorClient.unregister()();
}

uint64_t ReplicatorClient.add(records:destination:schedule:)(uint64_t a1, uint64_t *a2, os_unfair_lock_s *a3)
{
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  uint64_t v88;
  int64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  void (*v118)(char *, unint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  os_unfair_lock_s *v132;
  uint64_t v133;
  __int128 v134;
  char v135;
  os_unfair_lock_s *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  id v172;
  void *v173;
  id v174;
  void *v175;
  uint64_t v176;
  id v177;
  int *v178;
  unint64_t v179;
  char v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  NSObject *v192;
  os_log_type_t v193;
  uint8_t *v194;
  char *v195;
  uint64_t v196;
  NSObject *v197;
  os_log_type_t v198;
  uint8_t *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  void (*v203)(char *, uint64_t);
  NSObject *v204;
  os_log_type_t v205;
  uint8_t *v206;
  uint64_t v207;
  id v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int *v213;
  __int128 v214;
  char *v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  int64_t v225;
  unint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  char *v238;
  int64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  NSObject *v248;
  os_log_type_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  char *v261;
  int64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  NSObject *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  NSObject *v287;
  os_log_type_t v288;
  uint8_t *v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  NSObject *v296;
  os_log_type_t v297;
  uint8_t *v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  NSObject *v304;
  os_log_type_t v305;
  uint8_t *v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  const char *v310;
  NSObject *v312;
  os_log_type_t v313;
  uint8_t *v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  char *v320;
  unint64_t v321;
  uint64_t v322;
  char *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  int os_unfair_lock_opaque_low;
  char *v334;
  uint64_t v335;
  char *v336;
  char *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  char *v347;
  _QWORD *v348;
  uint64_t v349;
  __int128 v350;
  uint64_t *v351;
  char *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  unint64_t v359;
  uint64_t v360;
  char *v361;
  char *v362;
  uint64_t v363;
  char *v364;
  _QWORD *v365;
  char *v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  void (*v370)(_QWORD, _QWORD, _QWORD, _QWORD);
  void *v371;
  __int128 v372;
  __int128 v373;
  uint64_t v374;
  uint64_t v375;

  v335 = a1;
  v375 = *MEMORY[0x24BDAC8D0];
  v330 = type metadata accessor for ReplicatorRecord.ID(0);
  v356 = *(_QWORD *)(v330 - 8);
  v8 = MEMORY[0x24BDAC7A8](v330);
  v336 = (char *)&v320 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v353 = (uint64_t)&v320 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E1A0);
  MEMORY[0x24BDAC7A8](v11);
  *(_QWORD *)&v350 = (char *)&v320 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v338 = sub_245443A24();
  v345 = *(_QWORD *)(v338 - 8);
  MEMORY[0x24BDAC7A8](v338);
  v347 = (char *)&v320 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E268);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v365 = (char **)((char *)&v320 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v320 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v348 = (char **)((char *)&v320 - v21);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v320 - v22;
  v339 = type metadata accessor for ReplicatorRecord(0);
  v332 = *(_QWORD *)(v339 - 8);
  v24 = MEMORY[0x24BDAC7A8](v339);
  v355 = (uint64_t)&v320 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v342 = (uint64_t)&v320 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v343 = (uint64_t)&v320 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v325 = (uint64_t)&v320 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v326 = (uint64_t)&v320 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v324 = (uint64_t)&v320 - v35;
  v36 = MEMORY[0x24BDAC7A8](v34);
  v327 = (uint64_t)&v320 - v37;
  v38 = MEMORY[0x24BDAC7A8](v36);
  v328 = (uint64_t)&v320 - v39;
  v40 = MEMORY[0x24BDAC7A8](v38);
  v331 = (uint64_t)&v320 - v41;
  MEMORY[0x24BDAC7A8](v40);
  v337 = (char *)&v320 - v42;
  v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
  MEMORY[0x24BDAC7A8](v43);
  v334 = (char *)&v320 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v349 = sub_245443B14();
  v357 = *(_QWORD *)(v349 - 8);
  v45 = MEMORY[0x24BDAC7A8](v349);
  v329 = (char *)&v320 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = MEMORY[0x24BDAC7A8](v45);
  v352 = (char *)&v320 - v48;
  MEMORY[0x24BDAC7A8](v47);
  v50 = (char *)&v320 - v49;
  v51 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x24BDAC7A8](v51);
  v363 = (uint64_t)&v320 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v362 = (char *)type metadata accessor for ReplicatorDevice(0);
  v361 = (char *)*((_QWORD *)v362 - 1);
  v53 = MEMORY[0x24BDAC7A8](v362);
  v351 = (uint64_t *)((char *)&v320 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0));
  v55 = MEMORY[0x24BDAC7A8](v53);
  v360 = (uint64_t)&v320 - v56;
  v57 = MEMORY[0x24BDAC7A8](v55);
  v354 = (uint64_t)&v320 - v58;
  v59 = MEMORY[0x24BDAC7A8](v57);
  v359 = (unint64_t)&v320 - v60;
  MEMORY[0x24BDAC7A8](v59);
  v62 = (char *)&v320 - v61;
  v341 = *a2;
  os_unfair_lock_opaque_low = LOBYTE(a3->_os_unfair_lock_opaque);
  v340 = v3;
  v63 = *(_QWORD *)(v3 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v63 + 20));
  if (v4)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v63 + 20));
    __break(1u);
LABEL_226:
    os_unfair_lock_unlock(v5);
    __break(1u);
    os_unfair_lock_unlock(a3);
    __break(1u);
    JUMPOUT(0x2453DA0A8);
  }
  v64 = *(_BYTE *)(v63 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v63 + 20));
  v65 = swift_release();
  if ((v64 & 1) == 0)
  {
    if (qword_25440EC10 != -1)
      goto LABEL_220;
    goto LABEL_19;
  }
  v322 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue;
  MEMORY[0x24BDAC7A8](v65);
  v323 = v66;
  *(&v320 - 2) = v66;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB00);
  sub_245444030();
  v344 = 0;
  v67 = v372;
  v68 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v372 = MEMORY[0x24BEE4AF8];
  v69 = *(char **)(v67 + 16);
  v366 = v19;
  v346 = v23;
  v364 = v50;
  v358 = v69;
  if (v69)
  {
    v70 = 0;
    v71 = v362;
    while (1)
    {
      if (v70 >= *(_QWORD *)(v67 + 16))
      {
        __break(1u);
        __break(1u);
LABEL_211:
        swift_bridgeObjectRelease();
        v303 = v325;
        sub_2453BA364((uint64_t)v50, v325, type metadata accessor for ReplicatorRecord);
        v304 = sub_245443BEC();
        v305 = sub_245443FE8();
        if (os_log_type_enabled(v304, v305))
        {
          v306 = (uint8_t *)swift_slowAlloc();
          v307 = swift_slowAlloc();
          *(_QWORD *)&v372 = v307;
          *(_DWORD *)v306 = 136446210;
          v315 = ReplicatorRecord.ID.description.getter();
          v371 = (void *)sub_2453BDB24(v315, v316, (uint64_t *)&v372);
          sub_245444078();
          swift_bridgeObjectRelease();
          sub_2453BA3A8(v303, type metadata accessor for ReplicatorRecord);
          v310 = "Client ID mismatch: %{public}s";
          goto LABEL_215;
        }
        goto LABEL_216;
      }
      v73 = (v361[80] + 32) & ~(unint64_t)v361[80];
      v74 = *((_QWORD *)v361 + 9);
      v75 = v67;
      sub_2453BA364(v67 + v73 + v74 * v70, (uint64_t)v62, type metadata accessor for ReplicatorDevice);
      v76 = v363;
      sub_2453BA364((uint64_t)&v62[*((int *)v71 + 12)], v363, type metadata accessor for ReplicatorDevice.RelationshipState);
      v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
      v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 48))(v76, 4, v77);
      if ((v78 - 2) >= 2)
      {
        if (v78)
        {
          sub_2453BA3A8(v363, type metadata accessor for ReplicatorDevice.RelationshipState);
          v72 = v359;
          sub_2453BA364((uint64_t)v62, v359, type metadata accessor for ReplicatorDevice);
          sub_2453BA3A8(v72, type metadata accessor for ReplicatorDevice);
          goto LABEL_6;
        }
        (*(void (**)(uint64_t, uint64_t))(v357 + 8))(v363, v349);
      }
      v79 = v359;
      sub_2453BA364((uint64_t)v62, v359, type metadata accessor for ReplicatorDevice);
      v80 = *(_BYTE *)(v79 + *((int *)v71 + 14));
      sub_2453BA3A8(v79, type metadata accessor for ReplicatorDevice);
      if ((v80 & 1) == 0)
      {
        sub_2453D062C((uint64_t)v62, v354, type metadata accessor for ReplicatorDevice);
        v81 = v372;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_2453F1BF4(0, *(_QWORD *)(v81 + 16) + 1, 1);
          v81 = v372;
        }
        v83 = *(_QWORD *)(v81 + 16);
        v82 = *(_QWORD *)(v81 + 24);
        if (v83 >= v82 >> 1)
        {
          sub_2453F1BF4(v82 > 1, v83 + 1, 1);
          v81 = v372;
        }
        *(_QWORD *)(v81 + 16) = v83 + 1;
        sub_2453D062C(v354, v81 + v73 + v83 * v74, type metadata accessor for ReplicatorDevice);
        v71 = v362;
        goto LABEL_7;
      }
LABEL_6:
      sub_2453BA3A8((uint64_t)v62, type metadata accessor for ReplicatorDevice);
LABEL_7:
      ++v70;
      v50 = v364;
      v67 = v75;
      if (v358 == (char *)v70)
      {
        v68 = v372;
        v19 = v366;
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  v90 = *(_QWORD *)(v68 + 16);
  v91 = v349;
  v363 = v68;
  if (v90)
  {
    *(_QWORD *)&v372 = MEMORY[0x24BEE4AF8];
    sub_2453F1BC8(0, v90, 0);
    v92 = v357;
    v93 = v68 + ((v361[80] + 32) & ~(unint64_t)v361[80]);
    v94 = *((_QWORD *)v361 + 9);
    do
    {
      v95 = v360;
      sub_2453BA364(v93, v360, type metadata accessor for ReplicatorDevice);
      (*(void (**)(char *, uint64_t, uint64_t))(v92 + 16))(v50, v95 + *((int *)v362 + 5), v91);
      sub_2453BA3A8(v95, type metadata accessor for ReplicatorDevice);
      v96 = v372;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2453F1BC8(0, *(_QWORD *)(v96 + 16) + 1, 1);
        v92 = v357;
        v96 = v372;
      }
      v98 = *(_QWORD *)(v96 + 16);
      v97 = *(_QWORD *)(v96 + 24);
      if (v98 >= v97 >> 1)
      {
        sub_2453F1BC8(v97 > 1, v98 + 1, 1);
        v92 = v357;
        v96 = v372;
      }
      *(_QWORD *)(v96 + 16) = v98 + 1;
      v99 = v96
          + ((*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80))
          + *(_QWORD *)(v92 + 72) * v98;
      v50 = v364;
      (*(void (**)(unint64_t, char *, uint64_t))(v92 + 32))(v99, v364, v91);
      *(_QWORD *)&v372 = v96;
      v93 += v94;
      --v90;
    }
    while (v90);
    v19 = v366;
    v68 = v363;
  }
  if (qword_25440EC10 != -1)
    swift_once();
  v100 = sub_245443C04();
  v101 = __swift_project_value_buffer(v100, (uint64_t)qword_25440EBF8);
  swift_bridgeObjectRetain();
  v360 = v101;
  v102 = sub_245443BEC();
  v103 = sub_245444000();
  if (os_log_type_enabled(v102, v103))
  {
    v104 = (uint8_t *)swift_slowAlloc();
    v105 = swift_slowAlloc();
    *(_QWORD *)&v372 = v105;
    *(_DWORD *)v104 = 136380675;
    v106 = swift_bridgeObjectRetain();
    v107 = MEMORY[0x2495338AC](v106, v91);
    v109 = v108;
    swift_bridgeObjectRelease();
    v110 = v107;
    v68 = v363;
    v371 = (void *)sub_2453BDB24(v110, v109, (uint64_t *)&v372);
    sub_245444078();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2453B6000, v102, v103, "Retrieved paired relationships: %{private}s", v104, 0xCu);
    swift_arrayDestroy();
    v111 = v105;
    v19 = v366;
    MEMORY[0x249534440](v111, -1, -1);
    MEMORY[0x249534440](v104, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v112 = v344;
  v113 = v341;
  if (!v341)
  {
    swift_release();
    goto LABEL_51;
  }
  v364 = *(char **)(v341 + 16);
  if (!v364)
  {
    swift_release();
    v204 = sub_245443BEC();
    v205 = sub_245443FE8();
    if (os_log_type_enabled(v204, v205))
    {
      v206 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v206 = 0;
      _os_log_impl(&dword_2453B6000, v204, v205, "No destination relationship IDs specified", v206, 2u);
      MEMORY[0x249534440](v206, -1, -1);
    }

    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v88 = 0;
    goto LABEL_22;
  }
  v114 = v341 + ((*(unsigned __int8 *)(v357 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v357 + 80));
  swift_bridgeObjectRetain();
  v115 = 0;
  v359 = v114;
LABEL_40:
  v116 = v334;
  if (v115 >= *(_QWORD *)(v113 + 16))
  {
    __break(1u);
LABEL_222:
    __break(1u);
    goto LABEL_223;
  }
  v117 = v357;
  v118 = *(void (**)(char *, unint64_t, uint64_t))(v357 + 16);
  v119 = v349;
  v118(v334, v114 + *(_QWORD *)(v357 + 72) * v115, v349);
  v358 = *(char **)(v117 + 56);
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v358)(v116, 0, 1, v119);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48))(v116, 1, v119) == 1)
    goto LABEL_49;
  (*(void (**)(char *, char *, uint64_t))(v117 + 32))(v352, v116, v119);
  v120 = *(_QWORD *)(v68 + 16);
  if (!v120)
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_114;
  }
  ++v115;
  v121 = v361;
  v122 = v68 + ((v361[80] + 32) & ~(unint64_t)v361[80]);
  swift_retain();
  v123 = *((_QWORD *)v121 + 9);
  do
  {
    v124 = (uint64_t)v351;
    sub_2453BA364(v122, (uint64_t)v351, type metadata accessor for ReplicatorDevice);
    v125 = sub_245443AF0();
    sub_2453BA3A8(v124, type metadata accessor for ReplicatorDevice);
    if ((v125 & 1) != 0)
    {
      v68 = v363;
      swift_release();
      (*(void (**)(char *, uint64_t))(v357 + 8))(v352, v349);
      v112 = v344;
      v113 = v341;
      v114 = v359;
      if ((char *)v115 == v364)
      {
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v358)(v334, 1, 1, v349);
LABEL_49:
        swift_release();
        swift_bridgeObjectRelease();
        v19 = v366;
LABEL_51:
        v126 = *(char **)(v335 + 16);
        v361 = v126;
        if (!v126)
          goto LABEL_112;
        v127 = (char *)(v335
                      + ((*(unsigned __int8 *)(v332 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v332 + 80)));
        v128 = *(_QWORD *)(v332 + 72);
        v362 = (char *)*MEMORY[0x24BDD0CF0];
        v357 = *MEMORY[0x24BDD0CD0];
        v354 = *MEMORY[0x24BDD0CD8];
        swift_bridgeObjectRetain();
        v129 = 0;
        v320 = "licatorClient.callout";
        v321 = 0x800000024544E190;
        v363 = MEMORY[0x24BEE4AD8] + 8;
        v130 = (uint64_t)v337;
        v352 = v127;
        v351 = (uint64_t *)v128;
        while (1)
        {
          v358 = v129;
          sub_2453BA364((uint64_t)&v127[v128 * (_QWORD)v129], v130, type metadata accessor for ReplicatorRecord);
          a3 = *(os_unfair_lock_s **)(v130 + 32);
          v131 = *(_QWORD *)(v130 + 40);
          v132 = *(os_unfair_lock_s **)(v340 + 80);
          v5 = v132 + 4;
          swift_bridgeObjectRetain();
          swift_retain();
          os_unfair_lock_lock(v132 + 4);
          sub_2453C62CC(v133, (uint64_t (*)(void))sub_2453D0E80);
          if (v112)
            goto LABEL_226;
          os_unfair_lock_unlock(v132 + 4);
          swift_release();
          v134 = v372;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (__PAIR128__(v131, (unint64_t)a3) == v134)
          {
            swift_bridgeObjectRelease_n();
            v50 = v337;
          }
          else
          {
            v135 = sub_245444390();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v50 = v337;
            if ((v135 & 1) == 0)
              goto LABEL_211;
          }
          v136 = *(os_unfair_lock_s **)(v340 + 80);
          swift_retain();
          os_unfair_lock_lock(v136 + 4);
          sub_2453C62CC(v137, (uint64_t (*)(void))sub_2453D0E80);
          os_unfair_lock_unlock(v136 + 4);
          swift_release();
          v138 = v374;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!*(_QWORD *)(v138 + 16))
            break;
          v140 = *((_QWORD *)v50 + 2);
          v139 = *((_QWORD *)v50 + 3);
          swift_bridgeObjectRetain();
          sub_2453C64D8(v140, v139);
          v142 = v141;
          swift_bridgeObjectRelease();
          if ((v142 & 1) == 0)
            break;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v143 = sub_245443DFC();
          swift_bridgeObjectRelease();
          v144 = v331;
          sub_2453BA364((uint64_t)v50, v331, type metadata accessor for ReplicatorRecord);
          if (v143 < 1025 || *(_QWORD *)(v144 + 32) == 0xD000000000000011 && *(_QWORD *)(v144 + 40) == v321)
          {
            sub_2453BA3A8(v144, type metadata accessor for ReplicatorRecord);
            v145 = v338;
            v146 = v345;
            v147 = v350;
          }
          else
          {
            v148 = sub_245444390();
            sub_2453BA3A8(v144, type metadata accessor for ReplicatorRecord);
            v145 = v338;
            v146 = v345;
            v147 = v350;
            if ((v148 & 1) == 0)
            {
              swift_bridgeObjectRelease();
              v303 = v324;
              sub_2453BA364((uint64_t)v50, v324, type metadata accessor for ReplicatorRecord);
              v304 = sub_245443BEC();
              v305 = sub_245443FE8();
              if (os_log_type_enabled(v304, v305))
              {
                v306 = (uint8_t *)swift_slowAlloc();
                v307 = swift_slowAlloc();
                *(_QWORD *)&v372 = v307;
                *(_DWORD *)v306 = 136446210;
                v317 = ReplicatorRecord.ID.description.getter();
                v371 = (void *)sub_2453BDB24(v317, v318, (uint64_t *)&v372);
                sub_245444078();
                swift_bridgeObjectRelease();
                sub_2453BA3A8(v303, type metadata accessor for ReplicatorRecord);
                v310 = "Record ID is too long: %{public}s";
LABEL_215:
                _os_log_impl(&dword_2453B6000, v304, v305, v310, v306, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x249534440](v307, -1, -1);
                MEMORY[0x249534440](v306, -1, -1);
LABEL_217:

                sub_2453CBA28();
                swift_allocError();
                *(_BYTE *)v319 = 0;
                *(_QWORD *)(v319 + 8) = 0;
                swift_willThrow();
                return sub_2453BA3A8((uint64_t)v337, type metadata accessor for ReplicatorRecord);
              }
LABEL_216:
              sub_2453BA3A8(v303, type metadata accessor for ReplicatorRecord);
              goto LABEL_217;
            }
          }
          v344 = 0;
          ++v358;
          v149 = *(_QWORD *)&v50[*(int *)(v339 + 24)];
          v150 = *(_QWORD *)(v149 + 64);
          v359 = v149 + 64;
          v151 = 1 << *(_BYTE *)(v149 + 32);
          if (v151 < 64)
            v152 = ~(-1 << v151);
          else
            v152 = -1;
          v153 = v152 & v150;
          v154 = (unint64_t)(v151 + 63) >> 6;
          v329 = (char *)(v154 - 1);
          swift_bridgeObjectRetain();
          v155 = 0;
          v364 = (char *)v154;
          v349 = v154 - 5;
          v334 = (char *)(v149 + 104);
          while (1)
          {
            if (v153)
            {
              v156 = __clz(__rbit64(v153));
              v153 &= v153 - 1;
              v157 = v156 | ((_QWORD)v155 << 6);
              goto LABEL_71;
            }
            v164 = (uint64_t)(v155 + 1);
            if (__OFADD__(v155, 1))
            {
              __break(1u);
LABEL_219:
              __break(1u);
LABEL_220:
              swift_once();
LABEL_19:
              v84 = sub_245443C04();
              __swift_project_value_buffer(v84, (uint64_t)qword_25440EBF8);
              v85 = sub_245443BEC();
              v86 = sub_245443FE8();
              if (os_log_type_enabled(v85, v86))
              {
                v87 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v87 = 0;
                _os_log_impl(&dword_2453B6000, v85, v86, "Client is not registered", v87, 2u);
                MEMORY[0x249534440](v87, -1, -1);
              }

              sub_2453CBA28();
              swift_allocError();
              *(_BYTE *)v88 = 2;
LABEL_22:
              *(_QWORD *)(v88 + 8) = 0;
              return swift_willThrow();
            }
            if (v164 >= (uint64_t)v364)
            {
              v166 = v155;
LABEL_77:
              v167 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E260);
              v163 = (uint64_t)v348;
              (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v167 - 8) + 56))(v348, 1, 1, v167);
              v153 = 0;
              v155 = v166;
              goto LABEL_78;
            }
            v165 = *(_QWORD *)(v359 + 8 * v164);
            if (v165)
              goto LABEL_75;
            v166 = v155 + 1;
            if ((uint64_t)(v155 + 2) >= (uint64_t)v364)
              goto LABEL_77;
            v165 = *(_QWORD *)(v359 + 8 * (_QWORD)(v155 + 2));
            if (v165)
            {
              v164 = (uint64_t)(v155 + 2);
              goto LABEL_75;
            }
            v166 = v155 + 2;
            if ((uint64_t)(v155 + 3) >= (uint64_t)v364)
              goto LABEL_77;
            v165 = *(_QWORD *)(v359 + 8 * (_QWORD)(v155 + 3));
            if (v165)
            {
              v164 = (uint64_t)(v155 + 3);
              goto LABEL_75;
            }
            v164 = (uint64_t)(v155 + 4);
            v166 = v155 + 3;
            if ((uint64_t)(v155 + 4) >= (uint64_t)v364)
              goto LABEL_77;
            v165 = *(_QWORD *)(v359 + 8 * v164);
            if (v165)
              goto LABEL_75;
            do
            {
              if ((char *)v349 == v155)
              {
                v166 = v329;
                goto LABEL_77;
              }
              v165 = *(_QWORD *)&v334[8 * (_QWORD)v155++];
            }
            while (!v165);
            v164 = (uint64_t)(v155 + 4);
LABEL_75:
            v153 = (v165 - 1) & v165;
            v157 = __clz(__rbit64(v165)) + (v164 << 6);
            v155 = (char *)v164;
LABEL_71:
            v158 = *(_QWORD *)(v149 + 56);
            v159 = v348;
            *v348 = *(_QWORD *)(*(_QWORD *)(v149 + 48) + 8 * v157);
            v160 = v158
                 + *(_QWORD *)(*(_QWORD *)(type metadata accessor for ReplicatorRecord.Value(0) - 8) + 72) * v157;
            v161 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E260);
            v162 = v160;
            v163 = (uint64_t)v159;
            sub_2453BA364(v162, (uint64_t)v159 + *(int *)(v161 + 48), type metadata accessor for ReplicatorRecord.Value);
            (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v161 - 8) + 56))(v159, 0, 1, v161);
            v147 = v350;
LABEL_78:
            v168 = (uint64_t)v346;
            sub_2453D0428(v163, (uint64_t)v346, &qword_25440E268);
            v169 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E260);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v169 - 8) + 48))(v168, 1, v169) == 1)break;
            v170 = v168 + *(int *)(v169 + 48);
            v171 = type metadata accessor for ReplicatorRecord.Value(0);
            sub_2453D02E0(v170 + *(int *)(v171 + 20), v147, &qword_25440E1A0);
            sub_2453BA3A8(v170, type metadata accessor for ReplicatorRecord.Value);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v146 + 48))(v147, 1, v145) == 1)
            {
              sub_2453D055C(v147, &qword_25440E1A0);
              continue;
            }
            (*(void (**)(char *, uint64_t, uint64_t))(v146 + 32))(v347, v147, v145);
            v172 = objc_msgSend((id)objc_opt_self(), sel_defaultManager, v320);
            sub_245443A00();
            v173 = (void *)sub_245443D78();
            swift_bridgeObjectRelease();
            *(_QWORD *)&v372 = 0;
            v174 = objc_msgSend(v172, sel_attributesOfItemAtPath_error_, v173, &v372);

            v175 = (void *)v372;
            if (!v174)
            {
              v208 = (id)v372;
              swift_bridgeObjectRelease();
              sub_2454439B8();

              swift_willThrow();
              (*(void (**)(char *, uint64_t))(v345 + 8))(v347, v145);
              goto LABEL_199;
            }
            type metadata accessor for FileAttributeKey(0);
            sub_2453B8BF4((unint64_t *)&qword_25440E0F8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_245445488);
            v176 = sub_245443D18();
            v177 = v175;

            if (*(_QWORD *)(v176 + 16))
            {
              v178 = v362;
              v179 = sub_2453C65C4((uint64_t)v178);
              v146 = v345;
              if ((v180 & 1) != 0)
              {
                sub_2453BDF30(*(_QWORD *)(v176 + 56) + 32 * v179, (uint64_t)&v372);
              }
              else
              {
                v372 = 0u;
                v373 = 0u;
              }

            }
            else
            {
              v372 = 0u;
              v373 = 0u;
              v146 = v345;
            }
            swift_bridgeObjectRelease();
            if (*((_QWORD *)&v373 + 1))
            {
              type metadata accessor for FileProtectionType(0);
              if ((swift_dynamicCast() & 1) != 0)
              {
                v181 = v371;
                v182 = sub_245443D9C();
                v184 = v183;
                if (v182 == sub_245443D9C() && v184 == v185)
                {
                  swift_bridgeObjectRelease_n();
                }
                else
                {
                  v186 = sub_245444390();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v186 & 1) == 0)
                  {
                    v187 = sub_245443D9C();
                    v189 = v188;
                    if (v187 == sub_245443D9C() && v189 == v190)
                    {
                      swift_bridgeObjectRelease_n();
                    }
                    else
                    {
                      v191 = sub_245444390();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v191 & 1) == 0)
                      {
                        v146 = v345;
                        v145 = v338;
                        (*(void (**)(char *, uint64_t))(v345 + 8))(v347, v338);

                        v147 = v350;
                        continue;
                      }
                    }
                    swift_bridgeObjectRelease();
                    v295 = v327;
                    sub_2453BA364((uint64_t)v337, v327, type metadata accessor for ReplicatorRecord);
                    v296 = sub_245443BEC();
                    v297 = sub_245443FE8();
                    if (os_log_type_enabled(v296, v297))
                    {
                      v298 = (uint8_t *)swift_slowAlloc();
                      v299 = swift_slowAlloc();
                      *(_QWORD *)&v372 = v299;
                      *(_DWORD *)v298 = 136446210;
                      v300 = ReplicatorRecord.ID.description.getter();
                      v371 = (void *)sub_2453BDB24(v300, v301, (uint64_t *)&v372);
                      sub_245444078();
                      swift_bridgeObjectRelease();
                      sub_2453BA3A8(v327, type metadata accessor for ReplicatorRecord);
                      _os_log_impl(&dword_2453B6000, v296, v297, "Files with class B protection should not be replicated: %{public}s", v298, 0xCu);
                      swift_arrayDestroy();
                      MEMORY[0x249534440](v299, -1, -1);
                      MEMORY[0x249534440](v298, -1, -1);
                    }
                    else
                    {
                      sub_2453BA3A8(v295, type metadata accessor for ReplicatorRecord);
                    }

                    sub_2453CBA28();
                    swift_allocError();
                    *(_BYTE *)v302 = 0;
                    *(_QWORD *)(v302 + 8) = 0;
                    swift_willThrow();

                    (*(void (**)(char *, uint64_t))(v345 + 8))(v347, v338);
LABEL_199:
                    swift_release();
                    return sub_2453BA3A8((uint64_t)v337, type metadata accessor for ReplicatorRecord);
                  }
                }
                swift_bridgeObjectRelease();
                v286 = v328;
                sub_2453BA364((uint64_t)v337, v328, type metadata accessor for ReplicatorRecord);
                v287 = sub_245443BEC();
                v288 = sub_245443FE8();
                if (os_log_type_enabled(v287, v288))
                {
                  v289 = (uint8_t *)swift_slowAlloc();
                  v290 = swift_slowAlloc();
                  *(_QWORD *)&v372 = v290;
                  *(_DWORD *)v289 = 136446210;
                  v291 = ReplicatorRecord.ID.description.getter();
                  v371 = (void *)sub_2453BDB24(v291, v292, (uint64_t *)&v372);
                  sub_245444078();
                  swift_bridgeObjectRelease();
                  sub_2453BA3A8(v328, type metadata accessor for ReplicatorRecord);
                  _os_log_impl(&dword_2453B6000, v287, v288, "Files with class A protection should not be replicated: %{public}s", v289, 0xCu);
                  swift_arrayDestroy();
                  MEMORY[0x249534440](v290, -1, -1);
                  MEMORY[0x249534440](v289, -1, -1);
                }
                else
                {
                  sub_2453BA3A8(v286, type metadata accessor for ReplicatorRecord);
                }

                v293 = v338;
                sub_2453CBA28();
                swift_allocError();
                *(_BYTE *)v294 = 0;
                *(_QWORD *)(v294 + 8) = 0;
                swift_willThrow();

                (*(void (**)(char *, uint64_t))(v345 + 8))(v347, v293);
                goto LABEL_199;
              }
            }
            else
            {
              sub_2453D055C((uint64_t)&v372, &qword_25440E7F8);
            }
            v147 = v350;
            (*(void (**)(char *, uint64_t))(v146 + 8))(v347, v145);
          }
          swift_release();
          v130 = (uint64_t)v337;
          sub_2453BA3A8((uint64_t)v337, type metadata accessor for ReplicatorRecord);
          v126 = v361;
          v129 = v358;
          v112 = v344;
          v127 = v352;
          v128 = (uint64_t)v351;
          if (v358 == v361)
          {
            swift_bridgeObjectRelease();
            v19 = v366;
LABEL_112:
            v368 = 0;
            v369 = MEMORY[0x24BEE4AF8];
            swift_bridgeObjectRetain();
            v192 = sub_245443BEC();
            v193 = sub_245444000();
            if (os_log_type_enabled(v192, v193))
            {
              v194 = (uint8_t *)swift_slowAlloc();
              *(_DWORD *)v194 = 134349056;
              *(_QWORD *)&v372 = v126;
              sub_245444078();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_2453B6000, v192, v193, "Beginning batched add with %{public}ld records", v194, 0xCu);
              MEMORY[0x249534440](v194, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease();
            }
            v209 = v343;
            v210 = MEMORY[0x24BEE4AE0];
            v211 = (uint64_t)v365;
            if (!v126)
            {
              v344 = v112;
              v358 = 0;
              goto LABEL_176;
            }
            v212 = v332;
            v359 = (*(unsigned __int8 *)(v212 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v212 + 80);
            v357 = v335 + v359;
            swift_bridgeObjectRetain();
            swift_beginAccess();
            v358 = 0;
            v213 = 0;
            v363 = *(_QWORD *)(v212 + 72);
            v351 = (uint64_t *)&v371;
            *(_QWORD *)&v214 = 134349570;
            v350 = v214;
            v349 = MEMORY[0x24BEE4AD8] + 8;
            v352 = (char *)(v210 + 8);
            while (2)
            {
              sub_2453BA364(v357 + v363 * (_QWORD)v213, v209, type metadata accessor for ReplicatorRecord);
              swift_bridgeObjectRetain();
              v216 = sub_245443DFC();
              swift_bridgeObjectRelease();
              if (__OFADD__(v368, v216))
                goto LABEL_219;
              v368 += v216;
              sub_2453BA364(v209, v342, type metadata accessor for ReplicatorRecord);
              swift_beginAccess();
              v217 = v369;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v217 = sub_2453F166C(0, *(_QWORD *)(v217 + 16) + 1, 1, v217, &qword_25440E258, type metadata accessor for ReplicatorRecord);
              v219 = *(_QWORD *)(v217 + 16);
              v218 = *(_QWORD *)(v217 + 24);
              v344 = v112;
              if (v219 >= v218 >> 1)
                v217 = sub_2453F166C(v218 > 1, v219 + 1, 1, v217, &qword_25440E258, type metadata accessor for ReplicatorRecord);
              v362 = (char *)v213 + 1;
              *(_QWORD *)(v217 + 16) = v219 + 1;
              sub_2453D062C(v342, v217 + v359 + v219 * v363, type metadata accessor for ReplicatorRecord);
              v369 = v217;
              swift_endAccess();
              v220 = *(_QWORD *)(v343 + *(int *)(v339 + 24));
              v221 = *(_QWORD *)(v220 + 64);
              v364 = (char *)(v220 + 64);
              v222 = 1 << *(_BYTE *)(v220 + 32);
              if (v222 < 64)
                v223 = ~(-1 << v222);
              else
                v223 = -1;
              v224 = v223 & v221;
              v225 = (unint64_t)(v222 + 63) >> 6;
              v354 = v225 - 1;
              swift_bridgeObjectRetain();
              if (v224)
              {
                v226 = __clz(__rbit64(v224));
                goto LABEL_137;
              }
              v231 = 1;
              if (v225 > 1)
              {
                v232 = *((_QWORD *)v364 + 1);
                if (v232)
                {
LABEL_140:
                  v226 = __clz(__rbit64(v232)) + (v231 << 6);
LABEL_137:
                  v227 = *(_QWORD *)(v220 + 56);
                  v228 = v365;
                  *v365 = *(_QWORD *)(*(_QWORD *)(v220 + 48) + 8 * v226);
                  v229 = v227
                       + *(_QWORD *)(*(_QWORD *)(type metadata accessor for ReplicatorRecord.Value(0) - 8) + 72)
                       * v226;
                  v211 = (uint64_t)v228;
                  v230 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E260);
                  sub_2453BA364(v229, v211 + *(int *)(v230 + 48), type metadata accessor for ReplicatorRecord.Value);
                  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v230 - 8) + 56))(v211, 0, 1, v230);
                  v19 = v366;
LABEL_145:
                  sub_2453D0428(v211, (uint64_t)v19, &qword_25440E268);
                  v234 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E260);
                  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v234 - 8) + 48))(v19, 1, v234) != 1)
                  {
                    v235 = (uint64_t *)&v19[*(int *)(v234 + 48)];
                    v236 = v235[1];
                    sub_2453CFFAC(*v235, v236);
                    sub_2453BA3A8((uint64_t)v235, type metadata accessor for ReplicatorRecord.Value);
                    __asm { BR              X8 }
                  }
                  swift_release();
                  if (v368 <= 512000)
                  {
                    v112 = v344;
                    v215 = v361;
                  }
                  else
                  {
                    v238 = (char *)v369;
                    v239 = *(_QWORD *)(v369 + 16);
                    v240 = v353;
                    v215 = v361;
                    if (v239)
                    {
                      v371 = (void *)MEMORY[0x24BEE4AF8];
                      swift_bridgeObjectRetain();
                      sub_2453F1B9C(0, v239, 0);
                      v364 = v238;
                      v241 = (uint64_t)&v238[v359];
                      v242 = (uint64_t)v371;
                      v243 = v363;
                      do
                      {
                        v244 = v355;
                        sub_2453BA364(v241, v355, type metadata accessor for ReplicatorRecord);
                        sub_2453BA364(v244, v240, type metadata accessor for ReplicatorRecord.ID);
                        sub_2453BA3A8(v244, type metadata accessor for ReplicatorRecord);
                        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                        {
                          sub_2453F1B9C(0, *(_QWORD *)(v242 + 16) + 1, 1);
                          v242 = (uint64_t)v371;
                        }
                        v246 = *(_QWORD *)(v242 + 16);
                        v245 = *(_QWORD *)(v242 + 24);
                        if (v246 >= v245 >> 1)
                        {
                          sub_2453F1B9C(v245 > 1, v246 + 1, 1);
                          v242 = (uint64_t)v371;
                        }
                        *(_QWORD *)(v242 + 16) = v246 + 1;
                        v247 = v242
                             + ((*(unsigned __int8 *)(v356 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v356 + 80))
                             + *(_QWORD *)(v356 + 72) * v246;
                        v240 = v353;
                        sub_2453D062C(v353, v247, type metadata accessor for ReplicatorRecord.ID);
                        v241 += v243;
                        --v239;
                      }
                      while (v239);
                      swift_bridgeObjectRelease();
                      v215 = v361;
                    }
                    swift_bridgeObjectRetain();
                    v248 = sub_245443BEC();
                    v249 = sub_245444000();
                    if (os_log_type_enabled(v248, v249))
                    {
                      v250 = swift_slowAlloc();
                      v251 = swift_slowAlloc();
                      v364 = (char *)v251;
                      *(_DWORD *)v250 = v350;
                      v370 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v368;
                      v371 = (void *)v251;
                      sub_245444078();
                      *(_WORD *)(v250 + 12) = 2050;
                      v370 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v369 + 16);
                      sub_245444078();
                      *(_WORD *)(v250 + 22) = 2082;
                      v354 = v250 + 24;
                      v252 = swift_bridgeObjectRetain();
                      v253 = MEMORY[0x2495338AC](v252, v330);
                      v255 = v254;
                      swift_bridgeObjectRelease();
                      v370 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))sub_2453BDB24(v253, v255, (uint64_t *)&v371);
                      sub_245444078();
                      swift_bridgeObjectRelease_n();
                      swift_bridgeObjectRelease();
                      _os_log_impl(&dword_2453B6000, v248, v249, "Adding record batch of size %{public}ld with %{public}ld records: %{public}s", (uint8_t *)v250, 0x20u);
                      v256 = v364;
                      swift_arrayDestroy();
                      MEMORY[0x249534440](v256, -1, -1);
                      MEMORY[0x249534440](v250, -1, -1);

                    }
                    else
                    {

                      v257 = swift_bridgeObjectRelease_n();
                    }
                    v258 = v344;
                    v259 = (char *)v369;
                    MEMORY[0x24BDAC7A8](v257);
                    *(&v320 - 4) = v260;
                    *(&v320 - 3) = v259;
                    *(&v320 - 2) = (char *)v341;
                    *((_BYTE *)&v320 - 8) = os_unfair_lock_opaque_low;
                    swift_bridgeObjectRetain();
                    sub_245444030();
                    v112 = v258;
                    v19 = v366;
                    if (v258)
                    {
                      swift_bridgeObjectRelease();
                      sub_2453BA3A8(v343, type metadata accessor for ReplicatorRecord);
                      swift_bridgeObjectRelease();
                      return swift_bridgeObjectRelease();
                    }
                    swift_bridgeObjectRelease();
                    if (__OFADD__(v358, 1))
                      goto LABEL_222;
                    ++v358;
                    v368 = 0;
                    v369 = MEMORY[0x24BEE4AF8];
                    swift_bridgeObjectRelease();
                    v211 = (uint64_t)v365;
                  }
                  v209 = v343;
                  sub_2453BA3A8(v343, type metadata accessor for ReplicatorRecord);
                  v213 = (int *)v362;
                  if (v362 == v215)
                  {
                    v344 = v112;
                    swift_bridgeObjectRelease();
LABEL_176:
                    swift_beginAccess();
                    v261 = (char *)v369;
                    v262 = *(_QWORD *)(v369 + 16);
                    if (!v262)
                      goto LABEL_204;
                    v370 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BEE4AF8];
                    swift_bridgeObjectRetain();
                    sub_2453F1B9C(0, v262, 0);
                    v263 = *(unsigned __int8 *)(v332 + 80);
                    v366 = v261;
                    v264 = (uint64_t)&v261[(v263 + 32) & ~v263];
                    v265 = *(_QWORD *)(v332 + 72);
                    v266 = (uint64_t)v370;
                    v267 = (uint64_t)v336;
                    do
                    {
                      v268 = v355;
                      sub_2453BA364(v264, v355, type metadata accessor for ReplicatorRecord);
                      sub_2453BA364(v268, v267, type metadata accessor for ReplicatorRecord.ID);
                      sub_2453BA3A8(v268, type metadata accessor for ReplicatorRecord);
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      {
                        sub_2453F1B9C(0, *(_QWORD *)(v266 + 16) + 1, 1);
                        v267 = (uint64_t)v336;
                        v266 = (uint64_t)v370;
                      }
                      v270 = *(_QWORD *)(v266 + 16);
                      v269 = *(_QWORD *)(v266 + 24);
                      if (v270 >= v269 >> 1)
                      {
                        sub_2453F1B9C(v269 > 1, v270 + 1, 1);
                        v267 = (uint64_t)v336;
                        v266 = (uint64_t)v370;
                      }
                      *(_QWORD *)(v266 + 16) = v270 + 1;
                      sub_2453D062C(v267, v266+ ((*(unsigned __int8 *)(v356 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v356 + 80))+ *(_QWORD *)(v356 + 72) * v270, type metadata accessor for ReplicatorRecord.ID);
                      v264 += v265;
                      --v262;
                    }
                    while (v262);
                    swift_bridgeObjectRelease();
                    v272 = v368;
                    v271 = v369;
                    swift_bridgeObjectRetain_n();
                    swift_retain();
                    v273 = sub_245443BEC();
                    v274 = sub_245444000();
                    if (os_log_type_enabled(v273, (os_log_type_t)v274))
                    {
                      v275 = swift_slowAlloc();
                      v276 = swift_slowAlloc();
                      v370 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v276;
                      *(_DWORD *)v275 = 134349570;
                      v367 = v272;
                      sub_245444078();
                      *(_WORD *)(v275 + 12) = 2050;
                      v277 = *(_QWORD *)(v271 + 16);
                      swift_bridgeObjectRelease();
                      v367 = v277;
                      sub_245444078();
                      swift_bridgeObjectRelease();
                      *(_WORD *)(v275 + 22) = 2082;
                      v278 = swift_bridgeObjectRetain();
                      v279 = MEMORY[0x2495338AC](v278, v330);
                      v281 = v280;
                      swift_release();
                      v367 = sub_2453BDB24(v279, v281, (uint64_t *)&v370);
                      sub_245444078();
                      swift_release_n();
                      swift_bridgeObjectRelease();
                      _os_log_impl(&dword_2453B6000, v273, (os_log_type_t)v274, "Adding record batch of size %{public}ld with %{public}ld records: %{public}s", (uint8_t *)v275, 0x20u);
                      swift_arrayDestroy();
                      MEMORY[0x249534440](v276, -1, -1);
                      MEMORY[0x249534440](v275, -1, -1);

                    }
                    else
                    {

                      swift_release_n();
                      v282 = swift_bridgeObjectRelease_n();
                    }
                    v283 = v344;
                    v284 = (char *)v369;
                    MEMORY[0x24BDAC7A8](v282);
                    *(&v320 - 4) = v285;
                    *(&v320 - 3) = v284;
                    *(&v320 - 2) = (char *)v341;
                    *((_BYTE *)&v320 - 8) = os_unfair_lock_opaque_low;
                    swift_bridgeObjectRetain();
                    sub_245444030();
                    swift_bridgeObjectRelease();
                    if (v283)
                      return swift_bridgeObjectRelease();
                    if (!__OFADD__(v358++, 1))
                    {
LABEL_204:
                      v312 = sub_245443BEC();
                      v313 = sub_245444000();
                      if (os_log_type_enabled(v312, v313))
                      {
                        v314 = (uint8_t *)swift_slowAlloc();
                        *(_DWORD *)v314 = 134349056;
                        v370 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v358;
                        sub_245444078();
                        _os_log_impl(&dword_2453B6000, v312, v313, "Ended batched add with %{public}ld batches", v314, 0xCu);
                        MEMORY[0x249534440](v314, -1, -1);
                      }

                      return swift_bridgeObjectRelease();
                    }
LABEL_224:
                    __break(1u);
                  }
                  continue;
                }
                if (v225 > 2)
                {
                  v232 = *((_QWORD *)v364 + 2);
                  if (v232)
                  {
                    v231 = 2;
                    goto LABEL_140;
                  }
                  if (v225 > 3)
                  {
                    v232 = *((_QWORD *)v364 + 3);
                    if (v232)
                    {
                      v231 = 3;
                      goto LABEL_140;
                    }
                    v237 = 4;
                    if (v225 > 4)
                    {
                      v232 = *((_QWORD *)v364 + 4);
                      if (!v232)
                      {
                        while (1)
                        {
                          v231 = v237 + 1;
                          if (__OFADD__(v237, 1))
                            break;
                          if (v231 >= v225)
                            goto LABEL_144;
                          v232 = *(_QWORD *)&v364[8 * v231];
                          ++v237;
                          if (v232)
                            goto LABEL_140;
                        }
LABEL_223:
                        __break(1u);
                        goto LABEL_224;
                      }
                      v231 = 4;
                      goto LABEL_140;
                    }
                  }
                }
              }
              break;
            }
LABEL_144:
            v233 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E260);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v233 - 8) + 56))(v211, 1, 1, v233);
            goto LABEL_145;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v303 = v326;
        sub_2453BA364((uint64_t)v50, v326, type metadata accessor for ReplicatorRecord);
        v304 = sub_245443BEC();
        v305 = sub_245443FE8();
        if (os_log_type_enabled(v304, v305))
        {
          v306 = (uint8_t *)swift_slowAlloc();
          v307 = swift_slowAlloc();
          *(_QWORD *)&v372 = v307;
          *(_DWORD *)v306 = 136446210;
          v308 = ReplicatorRecord.ID.description.getter();
          v371 = (void *)sub_2453BDB24(v308, v309, (uint64_t *)&v372);
          sub_245444078();
          swift_bridgeObjectRelease();
          sub_2453BA3A8(v303, type metadata accessor for ReplicatorRecord);
          v310 = "Zone does not exist: %{public}s";
          goto LABEL_215;
        }
        goto LABEL_216;
      }
      goto LABEL_40;
    }
    v122 += v123;
    --v120;
  }
  while (v120);
  swift_bridgeObjectRelease();
  swift_release_n();
LABEL_114:
  v195 = v329;
  v196 = v349;
  v118(v329, (unint64_t)v352, v349);
  v197 = sub_245443BEC();
  v198 = sub_245443FE8();
  if (os_log_type_enabled(v197, v198))
  {
    v199 = (uint8_t *)swift_slowAlloc();
    v200 = swift_slowAlloc();
    *(_QWORD *)&v372 = v200;
    *(_DWORD *)v199 = 136446210;
    sub_2453B8BF4((unint64_t *)&qword_257464D40, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v201 = sub_245444384();
    v371 = (void *)sub_2453BDB24(v201, v202, (uint64_t *)&v372);
    sub_245444078();
    swift_bridgeObjectRelease();
    v203 = *(void (**)(char *, uint64_t))(v357 + 8);
    v203(v195, v196);
    _os_log_impl(&dword_2453B6000, v197, v198, "Unpaired or unknown destination relationship ID: %{public}s", v199, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x249534440](v200, -1, -1);
    MEMORY[0x249534440](v199, -1, -1);
  }
  else
  {
    v203 = *(void (**)(char *, uint64_t))(v357 + 8);
    v203(v195, v196);
  }

  sub_2453CBA28();
  swift_allocError();
  *(_BYTE *)v207 = 0;
  *(_QWORD *)(v207 + 8) = 0;
  swift_willThrow();
  return ((uint64_t (*)(char *, uint64_t))v203)(v352, v196);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorClient.delete(recordIDs:schedule:)(Swift::OpaquePointer recordIDs, ReplicatorServices::ReplicatorSchedule schedule)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  uint8_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *rawValue;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79[9];
  uint64_t v80;

  v4 = (unsigned __int8 *)schedule;
  v71 = type metadata accessor for ReplicatorRecord.ID(0);
  v6 = *(_QWORD *)(v71 - 8);
  v7 = MEMORY[0x24BDAC7A8](v71);
  v70 = (uint64_t)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v72 = (uint64_t)&v68 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (uint64_t *)((char *)&v68 - v11);
  v73 = *v4;
  v78 = v2;
  v13 = *(_QWORD *)(v2 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 20));
  if (v3)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 20));
    __break(1u);
    return;
  }
  v14 = *(_BYTE *)(v13 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 20));
  swift_release();
  if ((v14 & 1) == 0)
  {
    if (qword_25440EC10 != -1)
      swift_once();
    v41 = sub_245443C04();
    __swift_project_value_buffer(v41, (uint64_t)qword_25440EBF8);
    v42 = sub_245443BEC();
    v43 = sub_245443FE8();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v44 = 0;
      _os_log_impl(&dword_2453B6000, v42, v43, "Client is not registered", v44, 2u);
      MEMORY[0x249534440](v44, -1, -1);
    }

    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v45 = 2;
    *(_QWORD *)(v45 + 8) = 0;
    swift_willThrow();
    return;
  }
  v15 = (uint8_t *)*((_QWORD *)recordIDs._rawValue + 2);
  if (!v15)
  {
LABEL_13:
    if (qword_25440EC10 != -1)
      swift_once();
    v31 = sub_245443C04();
    __swift_project_value_buffer(v31, (uint64_t)qword_25440EBF8);
    swift_bridgeObjectRetain_n();
    v32 = sub_245443BEC();
    v33 = sub_245444000();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      v35 = swift_slowAlloc();
      v79[0] = v35;
      *(_DWORD *)v34 = 136446210;
      v77 = v34 + 4;
      v36 = swift_bridgeObjectRetain();
      v37 = MEMORY[0x2495338AC](v36, v71);
      v39 = v38;
      swift_bridgeObjectRelease();
      v80 = sub_2453BDB24(v37, v39, v79);
      sub_245444078();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2453B6000, v32, v33, "Deleting record IDsL %{public}s", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x249534440](v35, -1, -1);
      MEMORY[0x249534440](v34, -1, -1);

    }
    else
    {

      v40 = swift_bridgeObjectRelease_n();
    }
    MEMORY[0x24BDAC7A8](v40);
    *(&v68 - 4) = v54;
    *(&v68 - 3) = (uint64_t)recordIDs._rawValue;
    *((_BYTE *)&v68 - 16) = v55;
    sub_245444030();
    return;
  }
  v16 = (char *)recordIDs._rawValue
      + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v74 = *(_QWORD *)(v6 + 72);
  rawValue = recordIDs._rawValue;
  swift_bridgeObjectRetain();
  v75 = v12;
  while (1)
  {
    v76 = v16;
    v77 = v15;
    sub_2453BA364((uint64_t)v16, (uint64_t)v12, type metadata accessor for ReplicatorRecord.ID);
    v18 = v12[4];
    v17 = v12[5];
    v19 = *(os_unfair_lock_s **)(v78 + 80);
    swift_bridgeObjectRetain();
    swift_retain();
    os_unfair_lock_lock(v19 + 4);
    sub_2453C62CC(v20, (uint64_t (*)(void))sub_2453D0E80);
    os_unfair_lock_unlock(v19 + 4);
    swift_release();
    v21 = v79[0];
    v22 = v79[1];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v18 != v21 || v17 != v22)
      break;
    swift_bridgeObjectRelease_n();
LABEL_9:
    v24 = *(os_unfair_lock_s **)(v78 + 80);
    swift_retain();
    os_unfair_lock_lock(v24 + 4);
    sub_2453C62CC(v25, (uint64_t (*)(void))sub_2453D0E80);
    v12 = v75;
    os_unfair_lock_unlock(v24 + 4);
    swift_release();
    v26 = v79[8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!*(_QWORD *)(v26 + 16)
      || (v28 = v12[2],
          v27 = v12[3],
          swift_bridgeObjectRetain(),
          sub_2453C64D8(v28, v27),
          v30 = v29,
          swift_bridgeObjectRelease(),
          (v30 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_25440EC10 != -1)
        swift_once();
      v46 = sub_245443C04();
      __swift_project_value_buffer(v46, (uint64_t)qword_25440EBF8);
      v47 = v72;
      sub_2453BA364((uint64_t)v12, v72, type metadata accessor for ReplicatorRecord.ID);
      v48 = sub_245443BEC();
      v49 = sub_245443FE8();
      if (os_log_type_enabled(v48, v49))
      {
        v50 = (uint8_t *)swift_slowAlloc();
        v51 = swift_slowAlloc();
        v79[0] = v51;
        *(_DWORD *)v50 = 136446210;
        v52 = ReplicatorRecord.ID.description.getter();
        v80 = sub_2453BDB24(v52, v53, v79);
        sub_245444078();
        swift_bridgeObjectRelease();
        sub_2453BA3A8(v47, type metadata accessor for ReplicatorRecord.ID);
        _os_log_impl(&dword_2453B6000, v48, v49, "Zone does not exist: %{public}s", v50, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x249534440](v51, -1, -1);
        MEMORY[0x249534440](v50, -1, -1);
      }
      else
      {
        sub_2453BA3A8(v47, type metadata accessor for ReplicatorRecord.ID);
      }

      sub_2453CBA28();
      swift_allocError();
      *(_BYTE *)v56 = 0;
      *(_QWORD *)(v56 + 8) = 0;
      swift_willThrow();
      v57 = (uint64_t)v12;
      goto LABEL_36;
    }
    swift_bridgeObjectRelease();
    sub_2453BA3A8((uint64_t)v12, type metadata accessor for ReplicatorRecord.ID);
    v16 = &v76[v74];
    v15 = v77 - 1;
    if (v77 == (uint8_t *)1)
    {
      recordIDs._rawValue = rawValue;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
  }
  v23 = sub_245444390();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v23 & 1) != 0)
    goto LABEL_9;
  swift_bridgeObjectRelease();
  v58 = (uint64_t)v75;
  if (qword_25440EC10 != -1)
    swift_once();
  v59 = sub_245443C04();
  __swift_project_value_buffer(v59, (uint64_t)qword_25440EBF8);
  v60 = v70;
  sub_2453BA364(v58, v70, type metadata accessor for ReplicatorRecord.ID);
  v61 = sub_245443BEC();
  v62 = sub_245443FE8();
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc();
    v64 = swift_slowAlloc();
    v79[0] = v64;
    *(_DWORD *)v63 = 136446210;
    v65 = ReplicatorRecord.ID.description.getter();
    v80 = sub_2453BDB24(v65, v66, v79);
    sub_245444078();
    swift_bridgeObjectRelease();
    sub_2453BA3A8(v60, type metadata accessor for ReplicatorRecord.ID);
    _os_log_impl(&dword_2453B6000, v61, v62, "Client ID mismatch: %{public}s", v63, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x249534440](v64, -1, -1);
    MEMORY[0x249534440](v63, -1, -1);
  }
  else
  {
    sub_2453BA3A8(v60, type metadata accessor for ReplicatorRecord.ID);
  }

  sub_2453CBA28();
  swift_allocError();
  *(_BYTE *)v67 = 0;
  *(_QWORD *)(v67 + 8) = 0;
  swift_willThrow();
  v57 = v58;
LABEL_36:
  sub_2453BA3A8(v57, type metadata accessor for ReplicatorRecord.ID);
}

void ReplicatorClient.records(recordIDs:url:protocolVersion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_2453DAD08(a1, a2, a3, a4, "Fetching full records for IDs: %{public}s", &qword_257464568);
}

void ReplicatorClient.recordVersions()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 20));
  if (v1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 20));
    __break(1u);
  }
  else
  {
    v3 = *(_BYTE *)(v2 + 16);
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 20));
    swift_release();
    if ((v3 & 1) != 0)
    {
      v4 = *(os_unfair_lock_s **)(v0 + 80);
      swift_retain();
      os_unfair_lock_lock(v4 + 4);
      sub_2453C62CC(v5, (uint64_t (*)(void))sub_2453D0E80);
      os_unfair_lock_unlock(v4 + 4);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = swift_bridgeObjectRelease();
      MEMORY[0x24BDAC7A8](v6);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E350);
      sub_245444030();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_25440EC10 != -1)
        swift_once();
      v7 = sub_245443C04();
      __swift_project_value_buffer(v7, (uint64_t)qword_25440EBF8);
      v8 = sub_245443BEC();
      v9 = sub_245443FE8();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_2453B6000, v8, v9, "Client is not registered", v10, 2u);
        MEMORY[0x249534440](v10, -1, -1);
      }

      sub_2453CBA28();
      swift_allocError();
      *(_BYTE *)v11 = 2;
      *(_QWORD *)(v11 + 8) = 0;
      swift_willThrow();
    }
  }
}

void ReplicatorClient.urls(recordIDs:url:protocolVersion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_2453DAD08(a1, a2, a3, a4, "Fetching files for IDs: %{public}s", &qword_257464878);
}

void sub_2453DAD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v29;

  v9 = *(_QWORD *)(v6 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 20));
  if (v7)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 20));
    __break(1u);
  }
  else
  {
    v10 = *(_BYTE *)(v9 + 16);
    os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 20));
    swift_release();
    if ((v10 & 1) != 0)
    {
      if (qword_25440EC10 != -1)
        swift_once();
      v27 = a6;
      v11 = sub_245443C04();
      __swift_project_value_buffer(v11, (uint64_t)qword_25440EBF8);
      swift_bridgeObjectRetain_n();
      v12 = sub_245443BEC();
      v13 = sub_245444000();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc();
        v15 = swift_slowAlloc();
        v29 = v15;
        *(_DWORD *)v14 = 136446210;
        v16 = type metadata accessor for ReplicatorRecord.ID(0);
        v17 = swift_bridgeObjectRetain();
        v18 = MEMORY[0x2495338AC](v17, v16);
        v20 = v19;
        swift_bridgeObjectRelease();
        sub_2453BDB24(v18, v20, &v29);
        sub_245444078();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2453B6000, v12, v13, a5, v14, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x249534440](v15, -1, -1);
        MEMORY[0x249534440](v14, -1, -1);

      }
      else
      {

        v21 = swift_bridgeObjectRelease_n();
      }
      MEMORY[0x24BDAC7A8](v21);
      __swift_instantiateConcreteTypeFromMangledName(v27);
      sub_245444030();
    }
    else
    {
      if (qword_25440EC10 != -1)
        swift_once();
      v22 = sub_245443C04();
      __swift_project_value_buffer(v22, (uint64_t)qword_25440EBF8);
      v23 = sub_245443BEC();
      v24 = sub_245443FE8();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v25 = 0;
        _os_log_impl(&dword_2453B6000, v23, v24, "Client is not registered", v25, 2u);
        MEMORY[0x249534440](v25, -1, -1);
      }

      sub_2453CBA28();
      swift_allocError();
      *(_BYTE *)v26 = 2;
      *(_QWORD *)(v26 + 8) = 0;
      swift_willThrow();
    }
  }
}

uint64_t sub_2453DB0A8(uint64_t a1, uint64_t a2)
{
  return sub_2453DF030(a1, a2, &qword_25440E6A0, (uint64_t *)&unk_25440E648);
}

uint64_t sub_2453DB0C4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E6A0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *v2;
  v12 = a1;
  v13 = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E648);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEE6A10], v5);
  return sub_245443F7C();
}

uint64_t sub_2453DB19C(uint64_t a1, uint64_t *a2, os_unfair_lock_s *a3)
{
  return ReplicatorClient.add(records:destination:schedule:)(a1, a2, a3);
}

void sub_2453DB1BC(Swift::OpaquePointer a1, ReplicatorServices::ReplicatorSchedule a2)
{
  ReplicatorClient.delete(recordIDs:schedule:)(a1, a2);
}

void sub_2453DB1DC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  ReplicatorClient.records(recordIDs:url:protocolVersion:)(a1, a2, a3, a4 & 1);
}

void sub_2453DB200(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  ReplicatorClient.urls(recordIDs:url:protocolVersion:)(a1, a2, a3, a4 & 1);
}

void sub_2453DB224()
{
  ReplicatorClient.recordVersions()();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorClient.sync()()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  _DWORD *v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  os_log_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  os_log_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v3 = v0;
  v4 = sub_245443C04();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v3 + 64);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 20));
  if (v1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 20));
    __break(1u);
    swift_release();
    os_unfair_lock_unlock(v2);
    __break(1u);
  }
  else
  {
    v9 = *(_BYTE *)(v8 + 16);
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 20));
    swift_release();
    if ((v9 & 1) != 0)
    {
      if (qword_25440EC10 != -1)
        swift_once();
      v10 = __swift_project_value_buffer(v4, (uint64_t)qword_25440EBF8);
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v10, v4);
      swift_retain_n();
      v11 = sub_245443BEC();
      v12 = sub_245444000();
      if (os_log_type_enabled(v11, (os_log_type_t)v12))
      {
        v32 = v12;
        v33 = v11;
        v13 = (_DWORD *)swift_slowAlloc();
        v31 = swift_slowAlloc();
        v37 = v31;
        *v13 = 136315138;
        v14 = *(os_unfair_lock_s **)(v3 + 80);
        swift_retain();
        os_unfair_lock_lock(v14 + 4);
        sub_2453C62CC(v15, (uint64_t (*)(void))sub_2453D0E80);
        v34 = 0;
        v30 = v13 + 1;
        os_unfair_lock_unlock(v14 + 4);
        swift_release();
        v16 = v36;
        v28 = v35;
        v29 = (uint8_t *)v13;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v17 = sub_2453BDB24(v28, v16, &v37);
        v18 = v29;
        v35 = v17;
        sub_245444078();
        swift_release_n();
        swift_bridgeObjectRelease();
        v19 = v33;
        _os_log_impl(&dword_2453B6000, v33, (os_log_type_t)v32, "Client %s requesting sync", v18, 0xCu);
        v20 = v31;
        swift_arrayDestroy();
        MEMORY[0x249534440](v20, -1, -1);
        MEMORY[0x249534440](v18, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v21 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      MEMORY[0x24BDAC7A8](v21);
      *(&v27 - 2) = v26;
      sub_245444030();
    }
    else
    {
      if (qword_25440EC10 != -1)
        swift_once();
      __swift_project_value_buffer(v4, (uint64_t)qword_25440EBF8);
      v22 = sub_245443BEC();
      v23 = sub_245443FE8();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v24 = 0;
        _os_log_impl(&dword_2453B6000, v22, v23, "Client is not registered", v24, 2u);
        MEMORY[0x249534440](v24, -1, -1);
      }

      sub_2453CBA28();
      swift_allocError();
      *(_BYTE *)v25 = 2;
      *(_QWORD *)(v25 + 8) = 0;
      swift_willThrow();
    }
  }
}

void sub_2453DB674()
{
  ReplicatorClient.sync()();
}

uint64_t sub_2453DB694(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = (uint64_t *)(a1 + 96);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v4 = sub_2453C6644(a2);
  v6 = v5;
  swift_bridgeObjectRelease();
  v7 = 0;
  if ((v6 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_2453CA640();
      v9 = v13;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = sub_245443B14();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v4, v11);
    v7 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 16 * v4);
    sub_24542033C(v4, v13);
    *v3 = v13;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return sub_2453F79C8(v7);
}

uint64_t sub_2453DB7AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t result;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, _QWORD, uint64_t, uint64_t);
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  unsigned int (*v45)(_QWORD, _QWORD, _QWORD);
  uint64_t v46;
  unsigned int (*v47)(_QWORD, _QWORD, _QWORD);
  void (*v48)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  void (*v51)(void);
  uint64_t v52;
  uint64_t v53;
  uint64_t (**v54)(uint64_t);
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, _QWORD, uint64_t, uint64_t);
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  void (*v78)(void);
  uint64_t v79;
  uint64_t (**v80)(uint64_t);
  uint64_t v81;
  int64_t v82;
  uint64_t v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  int64_t v92;
  uint64_t v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;

  v87 = a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E330);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v90 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E438);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v13 = MEMORY[0x24BDAC7A8](v12);
  *(_QWORD *)&v96 = (char *)&v81 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v88 = (char *)&v81 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v81 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v94 = (char *)&v81 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v91 = (uint64_t)&v81 - v22;
  v23 = a2;
  v25 = v24;
  v97 = sub_2453F412C(v23, a3);
  v26 = *(_QWORD *)(a4 + 64);
  v83 = a4 + 64;
  v27 = 1 << *(_BYTE *)(a4 + 32);
  v28 = -1;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  v29 = v28 & v26;
  v84 = (unint64_t)(v27 + 63) >> 6;
  v82 = v84 - 1;
  v86 = a4;
  result = swift_bridgeObjectRetain();
  v92 = 0;
  v93 = v25;
  v89 = v19;
  v85 = v9;
  if (!v29)
    goto LABEL_8;
LABEL_6:
  v32 = __clz(__rbit64(v29));
  v29 &= v29 - 1;
  v33 = v32 | (v92 << 6);
LABEL_7:
  v34 = v86;
  v35 = *(_QWORD *)(v86 + 48);
  v36 = sub_245443B14();
  v37 = v96;
  (*(void (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(v96, v35 + *(_QWORD *)(*(_QWORD *)(v36 - 8) + 72) * v33, v36);
  v38 = *(_QWORD *)(v34 + 56);
  v39 = v37;
  v40 = *(int *)(v8 + 48);
  v95 = *(_OWORD *)(v38 + 16 * v33);
  *(_OWORD *)(v37 + v40) = v95;
  v41 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56);
  v41(v39, 0, 1, v8);
  swift_retain();
  while (1)
  {
    v45 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v9 + 48);
    v46 = 1;
    if (v45(v39, 1, v8) != 1)
    {
      v47 = v45;
      v48 = v41;
      v49 = *(int *)(v8 + 48);
      v50 = sub_245443B14();
      v51 = *(void (**)(void))(*(_QWORD *)(v50 - 8) + 32);
      v52 = v96;
      ((void (*)(char *, _QWORD, uint64_t))v51)(v90, v96, v50);
      v53 = swift_allocObject();
      *(_OWORD *)(v53 + 16) = *(_OWORD *)(v52 + v49);
      v54 = (uint64_t (**)(uint64_t))&v94[*(int *)(v8 + 48)];
      v19 = v89;
      v51();
      v46 = 0;
      *v54 = sub_2453F7D38;
      v54[1] = (uint64_t (*)(uint64_t))v53;
      v41 = v48;
      v9 = v85;
      v45 = v47;
      v25 = v93;
    }
    v55 = v94;
    v41((uint64_t)v94, v46, 1, v8);
    v56 = (uint64_t)v55;
    v57 = v91;
    sub_2453D0428(v56, v91, &qword_25440E438);
    if (v45(v57, 1, v8) == 1)
      break;
    (*(void (**)(uint64_t))(v57 + *(int *)(v8 + 48)))(v97);
    swift_release();
    v31 = sub_245443B14();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 8))(v57, v31);
    if (v29)
      goto LABEL_6;
LABEL_8:
    v42 = v92 + 1;
    if (__OFADD__(v92, 1))
    {
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    v39 = v96;
    if (v42 < v84)
    {
      v43 = *(_QWORD *)(v83 + 8 * v42);
      if (v43)
        goto LABEL_11;
      v44 = v92 + 2;
      ++v92;
      if (v42 + 1 < v84)
      {
        v43 = *(_QWORD *)(v83 + 8 * v44);
        if (v43)
          goto LABEL_14;
        v92 = v42 + 1;
        if (v42 + 2 < v84)
        {
          v43 = *(_QWORD *)(v83 + 8 * (v42 + 2));
          if (v43)
          {
            v42 += 2;
            goto LABEL_11;
          }
          v44 = v42 + 3;
          v92 = v42 + 2;
          if (v42 + 3 < v84)
          {
            v43 = *(_QWORD *)(v83 + 8 * v44);
            if (v43)
            {
LABEL_14:
              v42 = v44;
LABEL_11:
              v29 = (v43 - 1) & v43;
              v33 = __clz(__rbit64(v43)) + (v42 << 6);
              v92 = v42;
              goto LABEL_7;
            }
            while (1)
            {
              v42 = v44 + 1;
              if (__OFADD__(v44, 1))
                goto LABEL_61;
              if (v42 >= v84)
                break;
              v43 = *(_QWORD *)(v83 + 8 * v42);
              ++v44;
              if (v43)
                goto LABEL_11;
            }
            v92 = v82;
          }
        }
      }
    }
    v41 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56);
    v41(v96, 1, 1, v8);
    v29 = 0;
  }
  swift_release();
  v58 = *(_QWORD *)(v87 + 64);
  v94 = (char *)(v87 + 64);
  v59 = 1 << *(_BYTE *)(v87 + 32);
  v60 = -1;
  if (v59 < 64)
    v60 = ~(-1 << v59);
  v61 = v60 & v58;
  *(_QWORD *)&v95 = (unint64_t)(v59 + 63) >> 6;
  v92 = v95 - 1;
  result = swift_bridgeObjectRetain();
  v62 = 0;
  if (!v61)
    goto LABEL_36;
LABEL_34:
  v64 = v41;
  v65 = __clz(__rbit64(v61));
  v61 &= v61 - 1;
  v66 = v65 | (v62 << 6);
  while (2)
  {
    v67 = v87;
    v68 = *(_QWORD *)(v87 + 48);
    v69 = sub_245443B14();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v25, v68 + *(_QWORD *)(*(_QWORD *)(v69 - 8) + 72) * v66, v69);
    v70 = *(int *)(v8 + 48);
    v96 = *(_OWORD *)(*(_QWORD *)(v67 + 56) + 16 * v66);
    *(_OWORD *)(v25 + v70) = v96;
    v41 = v64;
    v64(v25, 0, 1, v8);
    swift_retain();
    while (1)
    {
      if (v45(v25, 1, v8) == 1)
      {
        v74 = (uint64_t)v88;
        v41((uint64_t)v88, 1, 1, v8);
      }
      else
      {
        v75 = v41;
        v76 = *(int *)(v8 + 48);
        v77 = sub_245443B14();
        v78 = *(void (**)(void))(*(_QWORD *)(v77 - 8) + 32);
        ((void (*)(char *, uint64_t, uint64_t))v78)(v90, v25, v77);
        v79 = swift_allocObject();
        *(_OWORD *)(v79 + 16) = *(_OWORD *)(v93 + v76);
        v80 = (uint64_t (**)(uint64_t))&v88[*(int *)(v8 + 48)];
        v19 = v89;
        v74 = (uint64_t)v88;
        v78();
        *v80 = sub_2453F7640;
        v80[1] = (uint64_t (*)(uint64_t))v79;
        v41 = v75;
        v25 = v93;
        v75(v74, 0, 1, v8);
      }
      sub_2453D0428(v74, (uint64_t)v19, &qword_25440E438);
      if (v45(v19, 1, v8) == 1)
      {
        swift_bridgeObjectRelease();
        return swift_release();
      }
      (*(void (**)(uint64_t))&v19[*(int *)(v8 + 48)])(v97);
      swift_release();
      v63 = sub_245443B14();
      result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v63 - 8) + 8))(v19, v63);
      if (v61)
        goto LABEL_34;
LABEL_36:
      v71 = v62 + 1;
      if (__OFADD__(v62, 1))
        goto LABEL_60;
      if (v71 < (uint64_t)v95)
      {
        v72 = *(_QWORD *)&v94[8 * v71];
        if (v72)
          goto LABEL_39;
        v73 = v62 + 2;
        ++v62;
        if (v71 + 1 < (uint64_t)v95)
        {
          v72 = *(_QWORD *)&v94[8 * v73];
          if (v72)
            goto LABEL_42;
          v62 = v71 + 1;
          if (v71 + 2 < (uint64_t)v95)
          {
            v72 = *(_QWORD *)&v94[8 * v71 + 16];
            if (v72)
            {
              v71 += 2;
              goto LABEL_39;
            }
            v73 = v71 + 3;
            v62 = v71 + 2;
            if (v71 + 3 < (uint64_t)v95)
              break;
          }
        }
      }
LABEL_53:
      v41(v25, 1, 1, v8);
      v61 = 0;
    }
    v72 = *(_QWORD *)&v94[8 * v73];
    if (v72)
    {
LABEL_42:
      v71 = v73;
LABEL_39:
      v64 = v41;
      v61 = (v72 - 1) & v72;
      v66 = __clz(__rbit64(v72)) + (v71 << 6);
      v62 = v71;
      continue;
    }
    break;
  }
  while (1)
  {
    v71 = v73 + 1;
    if (__OFADD__(v73, 1))
      break;
    if (v71 >= (uint64_t)v95)
    {
      v62 = v92;
      goto LABEL_53;
    }
    v72 = *(_QWORD *)&v94[8 * v71];
    ++v73;
    if (v72)
      goto LABEL_39;
  }
LABEL_62:
  __break(1u);
  return result;
}

uint64_t sub_2453DBF74(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v24 = v4 + v2;
  else
    v24 = v4;
  v3 = sub_2453F166C(isUniquelyReferenced_nonNull_native, v24, 1, v3, &qword_25440E248, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordChange);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *(_QWORD *)(v3 + 16);
  v10 = (*(_QWORD *)(v3 + 24) >> 1) - v9;
  v11 = type metadata accessor for ReplicatorRecordChange();
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v3 + v13 + v14 * v9;
  v16 = a1 + v13;
  v17 = v14 * v8;
  v18 = v15 + v17;
  v19 = v16 + v17;
  if (v16 < v18 && v15 < v19)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFADD__(v21, v8);
  v23 = v21 + v8;
  if (!v22)
  {
    *(_QWORD *)(v3 + 16) = v23;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_245444234();
  __break(1u);
  return result;
}

uint64_t sub_2453DC0F8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unint64_t), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(_QWORD);
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(_QWORD);
  _QWORD v40[2];
  void (*v41)(unint64_t);
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = a2;
  v9 = type metadata accessor for ReplicatorRecordVersion();
  MEMORY[0x24BDAC7A8](v9);
  v47 = (uint64_t)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for ReplicatorRecordChange();
  v14 = MEMORY[0x24BDAC7A8](v46);
  v45 = (uint64_t)v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v44 = (uint64_t)v40 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)v40 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)v40 - v22;
  v24 = *(_QWORD *)(a1 + 16);
  if (!v24)
  {
    a4(MEMORY[0x24BEE4AF8]);
    return swift_bridgeObjectRelease();
  }
  v40[1] = a5;
  v41 = a4;
  v42 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v25 = a1 + v42;
  v26 = *(_QWORD *)(v21 + 72);
  v40[0] = a1;
  swift_bridgeObjectRetain();
  v27 = MEMORY[0x24BEE4AF8];
  v43 = a3;
  do
  {
    sub_2453BA364(v25, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordChange);
    sub_2453BA364((uint64_t)v23, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordChange);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_2453D062C((uint64_t)v20, (uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
      v30 = *((_QWORD *)v13 + 2) == v48 && *((_QWORD *)v13 + 3) == a3;
      if (v30 || (sub_245444390() & 1) != 0)
      {
        sub_2453BA364((uint64_t)v23, v44, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordChange);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v27 = sub_2453F166C(0, *(_QWORD *)(v27 + 16) + 1, 1, v27, &qword_25440E248, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordChange);
        v32 = *(_QWORD *)(v27 + 16);
        v31 = *(_QWORD *)(v27 + 24);
        if (v32 >= v31 >> 1)
          v27 = sub_2453F166C(v31 > 1, v32 + 1, 1, v27, &qword_25440E248, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordChange);
        *(_QWORD *)(v27 + 16) = v32 + 1;
        sub_2453D062C(v44, v27 + v42 + v32 * v26, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordChange);
        sub_2453BA3A8((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordChange);
        v28 = (uint64_t)v13;
        v29 = type metadata accessor for ReplicatorRecord.ID;
LABEL_4:
        sub_2453BA3A8(v28, v29);
        a3 = v43;
        goto LABEL_5;
      }
      sub_2453BA3A8((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordChange);
      v37 = (uint64_t)v13;
      v38 = type metadata accessor for ReplicatorRecord.ID;
    }
    else
    {
      v33 = v47;
      sub_2453D062C((uint64_t)v20, v47, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordVersion);
      v34 = *(_QWORD *)(v33 + 16) == v48 && *(_QWORD *)(v33 + 24) == a3;
      if (v34 || (sub_245444390() & 1) != 0)
      {
        sub_2453BA364((uint64_t)v23, v45, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordChange);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v27 = sub_2453F166C(0, *(_QWORD *)(v27 + 16) + 1, 1, v27, &qword_25440E248, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordChange);
        v36 = *(_QWORD *)(v27 + 16);
        v35 = *(_QWORD *)(v27 + 24);
        if (v36 >= v35 >> 1)
          v27 = sub_2453F166C(v35 > 1, v36 + 1, 1, v27, &qword_25440E248, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordChange);
        *(_QWORD *)(v27 + 16) = v36 + 1;
        sub_2453D062C(v45, v27 + v42 + v36 * v26, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordChange);
        sub_2453BA3A8((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordChange);
        v28 = v47;
        v29 = (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordVersion;
        goto LABEL_4;
      }
      sub_2453BA3A8((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordChange);
      v37 = v47;
      v38 = (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordVersion;
    }
    sub_2453BA3A8(v37, v38);
LABEL_5:
    v25 += v26;
    --v24;
  }
  while (v24);
  swift_bridgeObjectRelease();
  v41(v27);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2453DC534(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = (uint64_t *)(a1 + 104);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v4 = sub_2453C6644(a2);
  v6 = v5;
  swift_bridgeObjectRelease();
  v7 = 0;
  if ((v6 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_2453CA640();
      v9 = v13;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = sub_245443B14();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v4, v11);
    v7 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 16 * v4);
    sub_24542033C(v4, v13);
    *v3 = v13;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return sub_2453F79C8(v7);
}

uint64_t sub_2453DC64C(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = (uint64_t *)(a1 + 112);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v4 = sub_2453C6644(a2);
  v6 = v5;
  swift_bridgeObjectRelease();
  v7 = 0;
  if ((v6 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_2453CA634();
      v9 = v13;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = sub_245443B14();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v4, v11);
    v7 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 16 * v4);
    sub_24542033C(v4, v13);
    *v3 = v13;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return sub_2453F79C8(v7);
}

uint64_t sub_2453DC764(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = (uint64_t *)(a1 + 120);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v4 = sub_2453C6644(a2);
  v6 = v5;
  swift_bridgeObjectRelease();
  v7 = 0;
  if ((v6 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_2453CA634();
      v9 = v13;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = sub_245443B14();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v4, v11);
    v7 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 16 * v4);
    sub_24542033C(v4, v13);
    *v3 = v13;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return sub_2453F79C8(v7);
}

uint64_t sub_2453DC87C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  int64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  char *v51;
  __int128 v52;
  uint64_t v53;

  v47 = a3;
  v48 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E330);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v45 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E438);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v51 = (char *)&v40 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v40 - v15;
  v17 = *(_QWORD *)(a1 + 64);
  v41 = a1 + 64;
  v18 = 1 << *(_BYTE *)(a1 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v42 = (unint64_t)(v18 + 63) >> 6;
  v40 = v42 - 1;
  v49 = a1;
  result = swift_bridgeObjectRetain();
  v50 = 0;
  v46 = v7;
  v43 = v16;
  v44 = a2;
  if (!v20)
    goto LABEL_8;
LABEL_6:
  v53 = (v20 - 1) & v20;
  v23 = __clz(__rbit64(v20)) | (v50 << 6);
  while (2)
  {
    v24 = v49;
    v25 = *(_QWORD *)(v49 + 48);
    v26 = sub_245443B14();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v12, v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v23, v26);
    v27 = *(int *)(v6 + 48);
    v52 = *(_OWORD *)(*(_QWORD *)(v24 + 56) + 16 * v23);
    *(_OWORD *)&v12[v27] = v52;
    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v28(v12, 0, 1, v6);
    swift_retain();
    while (1)
    {
      v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
      v33 = 1;
      if (v32(v12, 1, v6) != 1)
      {
        v34 = *(int *)(v6 + 48);
        v35 = sub_245443B14();
        v36 = *(void (**)(void))(*(_QWORD *)(v35 - 8) + 32);
        ((void (*)(char *, char *, uint64_t))v36)(v45, v12, v35);
        v37 = swift_allocObject();
        *(_OWORD *)(v37 + 16) = *(_OWORD *)&v12[v34];
        v38 = &v51[*(int *)(v6 + 48)];
        v36();
        v33 = 0;
        *(_QWORD *)v38 = v48;
        *((_QWORD *)v38 + 1) = v37;
        v16 = v43;
        a2 = v44;
        v7 = v46;
      }
      v39 = (uint64_t)v51;
      v28(v51, v33, 1, v6);
      sub_2453D0428(v39, (uint64_t)v16, &qword_25440E438);
      if (v32(v16, 1, v6) == 1)
        return swift_release();
      (*(void (**)(uint64_t))&v16[*(int *)(v6 + 48)])(a2);
      swift_release();
      v22 = sub_245443B14();
      result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v16, v22);
      v20 = v53;
      if (v53)
        goto LABEL_6;
LABEL_8:
      v29 = v50 + 1;
      if (__OFADD__(v50, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
      if (v29 < v42)
      {
        v30 = *(_QWORD *)(v41 + 8 * v29);
        if (v30)
          goto LABEL_11;
        v31 = v50 + 2;
        ++v50;
        if (v29 + 1 < v42)
        {
          v30 = *(_QWORD *)(v41 + 8 * v31);
          if (v30)
            goto LABEL_14;
          v50 = v29 + 1;
          if (v29 + 2 < v42)
          {
            v30 = *(_QWORD *)(v41 + 8 * (v29 + 2));
            if (v30)
            {
              v29 += 2;
              goto LABEL_11;
            }
            v31 = v29 + 3;
            v50 = v29 + 2;
            if (v29 + 3 < v42)
              break;
          }
        }
      }
LABEL_25:
      v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
      v28(v12, 1, 1, v6);
      v53 = 0;
    }
    v30 = *(_QWORD *)(v41 + 8 * v31);
    if (v30)
    {
LABEL_14:
      v29 = v31;
LABEL_11:
      v53 = (v30 - 1) & v30;
      v23 = __clz(__rbit64(v30)) + (v29 << 6);
      v50 = v29;
      continue;
    }
    break;
  }
  while (1)
  {
    v29 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v29 >= v42)
    {
      v50 = v40;
      goto LABEL_25;
    }
    v30 = *(_QWORD *)(v41 + 8 * v29);
    ++v31;
    if (v30)
      goto LABEL_11;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_2453DCC90(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = (uint64_t *)(a1 + 128);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v4 = sub_2453C6644(a2);
  v6 = v5;
  swift_bridgeObjectRelease();
  v7 = 0;
  if ((v6 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_2453CA628();
      v9 = v13;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = sub_245443B14();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v4, v11);
    v7 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 16 * v4);
    sub_24542033C(v4, v13);
    *v3 = v13;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return sub_2453F79C8(v7);
}

uint64_t sub_2453DCDA8(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = (uint64_t *)(a1 + 88);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v4 = sub_2453C6644(a2);
  v6 = v5;
  swift_bridgeObjectRelease();
  v7 = 0;
  if ((v6 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_2453CA64C();
      v9 = v13;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = sub_245443B14();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v4, v11);
    v7 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 16 * v4);
    sub_24542033C(v4, v13);
    *v3 = v13;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return sub_2453F79C8(v7);
}

uint64_t sub_2453DCEC0(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t (**v41)(char);
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  int64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  uint64_t v52;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E330);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v48 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E438);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v50 = (char *)&v43 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v43 - v13;
  v15 = *(_QWORD *)(a1 + 64);
  v44 = a1 + 64;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v45 = (unint64_t)(v16 + 63) >> 6;
  v43 = v45 - 1;
  v49 = a1;
  result = swift_bridgeObjectRetain();
  v20 = 0;
  v21 = a2 & 1;
  v46 = v14;
  v47 = v5;
  if (!v18)
    goto LABEL_8;
LABEL_6:
  v52 = (v18 - 1) & v18;
  v23 = __clz(__rbit64(v18)) | (v20 << 6);
  while (2)
  {
    v24 = v49;
    v25 = *(_QWORD *)(v49 + 48);
    v26 = sub_245443B14();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v10, v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v23, v26);
    v27 = *(int *)(v4 + 48);
    v51 = *(_OWORD *)(*(_QWORD *)(v24 + 56) + 16 * v23);
    *(_OWORD *)&v10[v27] = v51;
    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v28(v10, 0, 1, v4);
    swift_retain();
    while (1)
    {
      v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
      v33 = 1;
      if (v32(v10, 1, v4) != 1)
      {
        v34 = *(int *)(v4 + 48);
        v35 = sub_245443B14();
        v36 = *(void (**)(void))(*(_QWORD *)(v35 - 8) + 32);
        ((void (*)(char *, char *, uint64_t))v36)(v48, v10, v35);
        v37 = swift_allocObject();
        *(_QWORD *)&v51 = v20;
        v38 = v21;
        v39 = v10;
        v40 = v37;
        *(_OWORD *)(v37 + 16) = *(_OWORD *)&v39[v34];
        v41 = (uint64_t (**)(char))&v50[*(int *)(v4 + 48)];
        v14 = v46;
        v36();
        v33 = 0;
        *v41 = sub_2453F74D8;
        v41[1] = (uint64_t (*)(char))v40;
        v10 = v39;
        v21 = v38;
        v20 = v51;
        v5 = v47;
      }
      v42 = (uint64_t)v50;
      v28(v50, v33, 1, v4);
      sub_2453D0428(v42, (uint64_t)v14, &qword_25440E438);
      if (v32(v14, 1, v4) == 1)
        return swift_release();
      (*(void (**)(uint64_t))&v14[*(int *)(v4 + 48)])(v21);
      swift_release();
      v22 = sub_245443B14();
      result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v14, v22);
      v18 = v52;
      if (v52)
        goto LABEL_6;
LABEL_8:
      v29 = v20 + 1;
      if (__OFADD__(v20, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
      if (v29 < v45)
      {
        v30 = *(_QWORD *)(v44 + 8 * v29);
        if (v30)
          goto LABEL_11;
        v31 = v20 + 2;
        ++v20;
        if (v29 + 1 < v45)
        {
          v30 = *(_QWORD *)(v44 + 8 * v31);
          if (v30)
            goto LABEL_14;
          v20 = v29 + 1;
          if (v29 + 2 < v45)
          {
            v30 = *(_QWORD *)(v44 + 8 * (v29 + 2));
            if (v30)
            {
              v29 += 2;
              goto LABEL_11;
            }
            v31 = v29 + 3;
            v20 = v29 + 2;
            if (v29 + 3 < v45)
              break;
          }
        }
      }
LABEL_25:
      v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v28(v10, 1, 1, v4);
      v52 = 0;
    }
    v30 = *(_QWORD *)(v44 + 8 * v31);
    if (v30)
    {
LABEL_14:
      v29 = v31;
LABEL_11:
      v52 = (v30 - 1) & v30;
      v23 = __clz(__rbit64(v30)) + (v29 << 6);
      v20 = v29;
      continue;
    }
    break;
  }
  while (1)
  {
    v29 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v29 >= v45)
    {
      v20 = v43;
      goto LABEL_25;
    }
    v30 = *(_QWORD *)(v44 + 8 * v29);
    ++v31;
    if (v30)
      goto LABEL_11;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_2453DD2DC()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
  return sub_245444030();
}

__n128 sub_2453DD348@<Q0>(__n128 *a1@<X8>)
{
  __n128 **v1;
  __n128 result;

  result = (*v1)[2];
  *a1 = result;
  return result;
}

uint64_t sub_2453DD358()
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB00);
  sub_245444030();
  return v1;
}

uint64_t sub_2453DD3C4(uint64_t a1, uint64_t a2)
{
  return sub_2453DF030(a1, a2, &qword_25440E020, &qword_25440EB00);
}

uint64_t sub_2453DD3E0(uint64_t a1, uint64_t a2)
{
  return sub_2453DF030(a1, a2, &qword_25440E020, &qword_25440EB00);
}

void ReplicatorClient.send(message:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  os_unfair_lock_s *v14;
  char os_unfair_lock_opaque;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  _BOOL4 v39;
  uint64_t v40;
  os_unfair_lock_s *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  os_log_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  os_log_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;

  v3 = v1;
  v72 = type metadata accessor for ReplicatorMessage();
  v5 = MEMORY[0x24BDAC7A8](v72);
  v73 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v71 = (char *)&v61 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v70 = (char *)&v61 - v9;
  v10 = sub_245443C04();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(os_unfair_lock_s **)(v1 + 64);
  swift_retain();
  os_unfair_lock_lock(v14 + 5);
  if (v2)
  {
    os_unfair_lock_unlock(v14 + 5);
    __break(1u);
    goto LABEL_26;
  }
  os_unfair_lock_opaque = v14[4]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v14 + 5);
  swift_release();
  if ((os_unfair_lock_opaque & 1) == 0)
  {
    if (qword_25440EC10 != -1)
      swift_once();
    __swift_project_value_buffer(v10, (uint64_t)qword_25440EBF8);
    v30 = sub_245443BEC();
    v31 = sub_245443FE8();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_2453B6000, v30, v31, "Client is not registered", v32, 2u);
      MEMORY[0x249534440](v32, -1, -1);
    }

    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v33 = 2;
    goto LABEL_11;
  }
  v66 = v13;
  v67 = v11;
  v68 = v10;
  v16 = *(int *)(v72 + 20);
  v65 = a1;
  v17 = (uint64_t *)(a1 + v16);
  v19 = *v17;
  v18 = v17[1];
  v20 = *(os_unfair_lock_s **)(v3 + 80);
  swift_retain();
  os_unfair_lock_lock(v20 + 4);
  sub_2453C62CC(v21, (uint64_t (*)(void))sub_2453D0E80);
  v69 = 0;
  os_unfair_lock_unlock(v20 + 4);
  swift_release();
  v23 = v74;
  v22 = v75;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19 != v23 || v18 != v22)
  {
    v34 = sub_245444390();
    swift_bridgeObjectRelease();
    v25 = v67;
    v24 = v68;
    v26 = v66;
    v27 = (uint64_t)v73;
    v29 = (uint64_t)v70;
    v28 = (uint64_t)v71;
    if ((v34 & 1) != 0)
      goto LABEL_13;
    if (qword_25440EC10 != -1)
      swift_once();
    __swift_project_value_buffer(v24, (uint64_t)qword_25440EBF8);
    v58 = sub_245443BEC();
    v59 = sub_245443FE8();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v60 = 0;
      _os_log_impl(&dword_2453B6000, v58, v59, "Wrong client ID", v60, 2u);
      MEMORY[0x249534440](v60, -1, -1);
    }

    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v33 = 0;
LABEL_11:
    *(_QWORD *)(v33 + 8) = 0;
    swift_willThrow();
    return;
  }
  swift_bridgeObjectRelease();
  v25 = v67;
  v24 = v68;
  v26 = v66;
  v27 = (uint64_t)v73;
  v29 = (uint64_t)v70;
  v28 = (uint64_t)v71;
LABEL_13:
  if (qword_25440EC10 != -1)
    swift_once();
  v35 = __swift_project_value_buffer(v24, (uint64_t)qword_25440EBF8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v26, v35, v24);
  v36 = v65;
  sub_2453BA364(v65, v29, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
  sub_2453BA364(v36, v28, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
  sub_2453BA364(v36, v27, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
  swift_retain_n();
  v37 = v3;
  v38 = sub_245443BEC();
  v63 = sub_245444000();
  v39 = os_log_type_enabled(v38, (os_log_type_t)v63);
  v64 = v37;
  if (!v39)
  {
    swift_release_n();
    sub_2453BA3A8(v29, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
    sub_2453BA3A8(v28, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
    sub_2453BA3A8(v27, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);

    (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v24);
    goto LABEL_19;
  }
  v61 = v38;
  v40 = swift_slowAlloc();
  v62 = swift_slowAlloc();
  v76 = v62;
  *(_DWORD *)v40 = 136446978;
  v41 = *(os_unfair_lock_s **)(v37 + 80);
  v14 = v41 + 4;
  swift_retain();
  os_unfair_lock_lock(v41 + 4);
  v42 = v69;
  sub_2453C62CC(v43, (uint64_t (*)(void))sub_2453D0E80);
  v69 = v42;
  if (!v42)
  {
    os_unfair_lock_unlock(v41 + 4);
    swift_release();
    v44 = v74;
    v45 = v75;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v74 = sub_2453BDB24(v44, v45, &v76);
    sub_245444078();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v40 + 12) = 2082;
    sub_245443B14();
    sub_2453B8BF4((unint64_t *)&qword_257464D40, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v46 = (uint64_t)v70;
    v47 = sub_245444384();
    v74 = sub_2453BDB24(v47, v48, &v76);
    sub_245444078();
    swift_bridgeObjectRelease();
    sub_2453BA3A8(v46, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
    *(_WORD *)(v40 + 22) = 2082;
    v49 = (uint64_t)v71;
    v50 = (uint64_t *)&v71[*(int *)(v72 + 28)];
    v51 = *v50;
    v52 = v50[1];
    swift_bridgeObjectRetain();
    v74 = sub_2453BDB24(v51, v52, &v76);
    sub_245444078();
    swift_bridgeObjectRelease();
    sub_2453BA3A8(v49, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
    *(_WORD *)(v40 + 32) = 2082;
    v53 = (uint64_t)v73;
    v54 = sub_245444384();
    v74 = sub_2453BDB24(v54, v55, &v76);
    sub_245444078();
    swift_bridgeObjectRelease();
    sub_2453BA3A8(v53, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
    v56 = v61;
    _os_log_impl(&dword_2453B6000, v61, (os_log_type_t)v63, "Client %{public}s sending fire-and-forget message %{public}s of type %{public}s to %{public}s", (uint8_t *)v40, 0x2Au);
    v57 = v62;
    swift_arrayDestroy();
    MEMORY[0x249534440](v57, -1, -1);
    MEMORY[0x249534440](v40, -1, -1);

    (*(void (**)(char *, uint64_t))(v67 + 8))(v66, v68);
    v36 = v65;
LABEL_19:
    sub_2453DDC10(v36);
    return;
  }
LABEL_26:
  swift_release();
  os_unfair_lock_unlock(v14);
  __break(1u);
}

void sub_2453DDC10(uint64_t a1)
{
  char *v1;

  v1 = (char *)&loc_2453DDC48
     + *((int *)qword_2453DDD30
       + (*(_QWORD *)(a1 + *(int *)(type metadata accessor for ReplicatorMessage() + 36) + 8) >> 62));
  __asm { BR              X11 }
}

void ReplicatorClient.sendExpectingResponse(message:timeout:retries:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  char os_unfair_lock_opaque;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  id v37;
  char *v38;
  char *v39;
  os_log_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  int v48;
  uint64_t v49;
  os_unfair_lock_s *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  os_log_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  char *v74;
  char *v75;
  os_log_t v76;
  _QWORD v77[2];
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t isa;
  uint64_t v88;
  os_log_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t aBlock;
  uint64_t v97;
  uint64_t (*v98)(uint64_t);
  void *v99;
  uint64_t (*v100)();
  uint64_t v101;
  uint64_t v102[2];

  v89 = (os_log_t)sub_245443C88();
  isa = (uint64_t)v89[-1].isa;
  MEMORY[0x24BDAC7A8](v89);
  v86 = (char *)v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_245443CAC();
  v85 = *(_QWORD *)(v88 - 8);
  MEMORY[0x24BDAC7A8](v88);
  v84 = (char *)v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for ReplicatorMessage();
  v12 = MEMORY[0x24BDAC7A8](v91);
  v83 = (uint64_t)v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v94 = (uint64_t)v77 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v90 = (char *)v77 - v16;
  v93 = sub_245443C04();
  v95 = *(_QWORD *)(v93 - 8);
  MEMORY[0x24BDAC7A8](v93);
  v92 = (char *)v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (os_unfair_lock_s *)v4[8];
  swift_retain();
  os_unfair_lock_lock(v18 + 5);
  if (v5)
  {
    os_unfair_lock_unlock(v18 + 5);
    __break(1u);
  }
  else
  {
    os_unfair_lock_opaque = v18[4]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v18 + 5);
    swift_release();
    if ((os_unfair_lock_opaque & 1) == 0)
    {
      v34 = (void *)v4[9];
      v35 = swift_allocObject();
      *(_QWORD *)(v35 + 16) = a3;
      *(_QWORD *)(v35 + 24) = a4;
      v100 = sub_2453F53B4;
      v101 = v35;
      aBlock = MEMORY[0x24BDAC760];
      v97 = 1107296256;
      v98 = sub_2453D0CCC;
      v99 = &block_descriptor_0;
      v36 = _Block_copy(&aBlock);
      swift_retain();
      v37 = v34;
      v38 = v84;
      sub_245443C94();
      v102[0] = MEMORY[0x24BEE4AF8];
      sub_2453B8BF4(&qword_25440E640, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      __swift_instantiateConcreteTypeFromMangledName(&qword_25440E670);
      sub_2453F75AC(&qword_25440E678, &qword_25440E670, MEMORY[0x24BEE12C8]);
      v39 = v86;
      v40 = v89;
      sub_2454440A8();
      MEMORY[0x249533A44](0, v38, v39, v36);
      _Block_release(v36);

      (*(void (**)(char *, os_log_t))(isa + 8))(v39, v40);
      (*(void (**)(char *, uint64_t))(v85 + 8))(v38, v88);
LABEL_15:
      swift_release();
      return;
    }
    v77[1] = a2;
    v79 = a3;
    v80 = a4;
    v20 = *(int *)(v91 + 20);
    v78 = a1;
    v21 = (uint64_t *)(a1 + v20);
    v23 = *v21;
    v22 = v21[1];
    v24 = (os_unfair_lock_s *)v4[10];
    swift_retain();
    os_unfair_lock_lock(v24 + 4);
    v81 = v4;
    sub_2453C62CC(v25, (uint64_t (*)(void))sub_2453D0E80);
    v82 = 0;
    os_unfair_lock_unlock(v24 + 4);
    swift_release();
    v26 = aBlock;
    v27 = v97;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v28 = v92;
    if (v23 == v26 && v22 == v27)
    {
      swift_bridgeObjectRelease();
      v29 = v81;
      v31 = v93;
      v30 = v94;
      v32 = v95;
      v33 = (uint64_t)v90;
    }
    else
    {
      v41 = sub_245444390();
      swift_bridgeObjectRelease();
      v42 = v79;
      v29 = v81;
      v31 = v93;
      v30 = v94;
      v32 = v95;
      v33 = (uint64_t)v90;
      if ((v41 & 1) == 0)
      {
        v69 = (void *)v81[9];
        v70 = swift_allocObject();
        v71 = v80;
        *(_QWORD *)(v70 + 16) = v42;
        *(_QWORD *)(v70 + 24) = v71;
        v100 = sub_2453F53D4;
        v101 = v70;
        aBlock = MEMORY[0x24BDAC760];
        v97 = 1107296256;
        v98 = sub_2453D0CCC;
        v99 = &block_descriptor_45;
        v72 = _Block_copy(&aBlock);
        swift_retain();
        v73 = v69;
        v74 = v84;
        sub_245443C94();
        v102[0] = MEMORY[0x24BEE4AF8];
        sub_2453B8BF4(&qword_25440E640, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
        __swift_instantiateConcreteTypeFromMangledName(&qword_25440E670);
        sub_2453F75AC(&qword_25440E678, &qword_25440E670, MEMORY[0x24BEE12C8]);
        v75 = v86;
        v76 = v89;
        sub_2454440A8();
        MEMORY[0x249533A44](0, v74, v75, v72);
        _Block_release(v72);

        (*(void (**)(char *, os_log_t))(isa + 8))(v75, v76);
        (*(void (**)(char *, uint64_t))(v85 + 8))(v74, v88);
        swift_release();
        return;
      }
    }
    v43 = v80;
    if (qword_25440EC10 != -1)
      swift_once();
    v44 = __swift_project_value_buffer(v31, (uint64_t)qword_25440EBF8);
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v28, v44, v31);
    v45 = v78;
    sub_2453BA364(v78, v33, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
    sub_2453BA364(v45, v30, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
    v46 = v83;
    sub_2453BA364(v45, v83, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
    swift_retain_n();
    v47 = sub_245443BEC();
    v48 = sub_245444000();
    if (!os_log_type_enabled(v47, (os_log_type_t)v48))
    {
      swift_release_n();
      sub_2453BA3A8(v33, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
      sub_2453BA3A8(v94, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
      sub_2453BA3A8(v46, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);

      (*(void (**)(char *, uint64_t))(v95 + 8))(v28, v31);
      v67 = v79;
      goto LABEL_14;
    }
    LODWORD(v88) = v48;
    v89 = v47;
    v49 = swift_slowAlloc();
    isa = swift_slowAlloc();
    v102[0] = isa;
    *(_DWORD *)v49 = 136446978;
    v50 = (os_unfair_lock_s *)v29[10];
    v18 = v50 + 4;
    swift_retain();
    os_unfair_lock_lock(v50 + 4);
    v51 = v82;
    sub_2453C62CC(v52, (uint64_t (*)(void))sub_2453D0E80);
    v82 = v51;
    if (!v51)
    {
      os_unfair_lock_unlock(v50 + 4);
      swift_release();
      v53 = aBlock;
      v54 = v97;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      aBlock = sub_2453BDB24(v53, v54, v102);
      sub_245444078();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 12) = 2082;
      sub_245443B14();
      sub_2453B8BF4((unint64_t *)&qword_257464D40, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v55 = (uint64_t)v90;
      v56 = sub_245444384();
      aBlock = sub_2453BDB24(v56, v57, v102);
      sub_245444078();
      swift_bridgeObjectRelease();
      sub_2453BA3A8(v55, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
      *(_WORD *)(v49 + 22) = 2082;
      v58 = v94;
      v59 = (uint64_t *)(v94 + *(int *)(v91 + 28));
      v61 = *v59;
      v60 = v59[1];
      swift_bridgeObjectRetain();
      aBlock = sub_2453BDB24(v61, v60, v102);
      sub_245444078();
      swift_bridgeObjectRelease();
      sub_2453BA3A8(v58, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
      *(_WORD *)(v49 + 32) = 2082;
      v62 = v83;
      v63 = sub_245444384();
      aBlock = sub_2453BDB24(v63, v64, v102);
      sub_245444078();
      swift_bridgeObjectRelease();
      sub_2453BA3A8(v62, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
      v65 = v89;
      _os_log_impl(&dword_2453B6000, v89, (os_log_type_t)v88, "Client %{public}s sending message %{public}s of type %{public}s to %{public}s", (uint8_t *)v49, 0x2Au);
      v66 = isa;
      swift_arrayDestroy();
      MEMORY[0x249534440](v66, -1, -1);
      MEMORY[0x249534440](v49, -1, -1);

      (*(void (**)(char *, uint64_t))(v95 + 8))(v92, v93);
      v43 = v80;
      v67 = v79;
      v29 = v81;
      v45 = v78;
LABEL_14:
      v68 = (_QWORD *)swift_allocObject();
      v68[2] = v29;
      v68[3] = v67;
      v68[4] = v43;
      swift_retain();
      swift_retain();
      sub_2453DED48(v45);
      goto LABEL_15;
    }
  }
  swift_release();
  os_unfair_lock_unlock(v18);
  __break(1u);
}

uint64_t sub_2453DE7E4(void (*a1)(uint64_t *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464918);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (uint64_t *)((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_25440EC10 != -1)
    swift_once();
  v5 = sub_245443C04();
  __swift_project_value_buffer(v5, (uint64_t)qword_25440EBF8);
  v6 = sub_245443BEC();
  v7 = sub_245443FE8();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_2453B6000, v6, v7, "Client is not registered", v8, 2u);
    MEMORY[0x249534440](v8, -1, -1);
  }

  sub_2453CBA28();
  v9 = swift_allocError();
  *(_BYTE *)v10 = 2;
  *(_QWORD *)(v10 + 8) = 0;
  *v4 = v9;
  swift_storeEnumTagMultiPayload();
  a1(v4);
  return sub_2453D055C((uint64_t)v4, &qword_257464918);
}

uint64_t sub_2453DE960(void (*a1)(uint64_t *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464918);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (uint64_t *)((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_25440EC10 != -1)
    swift_once();
  v5 = sub_245443C04();
  __swift_project_value_buffer(v5, (uint64_t)qword_25440EBF8);
  v6 = sub_245443BEC();
  v7 = sub_245443FE8();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_2453B6000, v6, v7, "Wrong client ID", v8, 2u);
    MEMORY[0x249534440](v8, -1, -1);
  }

  sub_2453CBA28();
  v9 = swift_allocError();
  *(_BYTE *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *v4 = v9;
  swift_storeEnumTagMultiPayload();
  a1(v4);
  return sub_2453D055C((uint64_t)v4, &qword_257464918);
}

uint64_t sub_2453DEAD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[6];

  v23 = a3;
  v24 = a4;
  v6 = sub_245443C88();
  v27 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_245443CAC();
  v25 = *(_QWORD *)(v9 - 8);
  v26 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464918);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(void **)(a2 + 72);
  sub_2453D02E0(a1, (uint64_t)v15, &qword_257464918);
  v17 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v18 = swift_allocObject();
  v19 = v24;
  *(_QWORD *)(v18 + 16) = v23;
  *(_QWORD *)(v18 + 24) = v19;
  sub_2453D0428((uint64_t)v15, v18 + v17, &qword_257464918);
  aBlock[4] = sub_2453F6FA8;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2453D0CCC;
  aBlock[3] = &block_descriptor_116;
  v20 = _Block_copy(aBlock);
  v21 = v16;
  swift_retain();
  sub_245443C94();
  v28 = MEMORY[0x24BEE4AF8];
  sub_2453B8BF4(&qword_25440E640, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E670);
  sub_2453F75AC(&qword_25440E678, &qword_25440E670, MEMORY[0x24BEE12C8]);
  sub_2454440A8();
  MEMORY[0x249533A44](0, v11, v8, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v26);
  return swift_release();
}

void sub_2453DED48(uint64_t a1)
{
  uint64_t v2;
  char *v3;

  v2 = type metadata accessor for ReplicatorMessage();
  v3 = (char *)&loc_2453DEDD4 + dword_2453DF004[*(_QWORD *)(a1 + *(int *)(MEMORY[0x24BDAC7A8](v2) + 36) + 8) >> 62];
  __asm { BR              X11 }
}

uint64_t sub_2453DF014(uint64_t a1, uint64_t a2)
{
  return sub_2453DF030(a1, a2, &qword_257463998, &qword_25440EB08);
}

uint64_t sub_2453DF030(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a4);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEE6A10], v5);
  return sub_245443F7C();
}

void sub_2453DF0F0(uint64_t a1)
{
  ReplicatorClient.send(message:)(a1);
}

void sub_2453DF110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ReplicatorClient.sendExpectingResponse(message:timeout:retries:completion:)(a1, a2, a3, a4);
}

void ReplicatorClient.encode<A>(_:messageType:relationshipID:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint8_t *v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  os_unfair_lock_s *v42;
  uint64_t v43;
  uint64_t v44;
  os_unfair_lock_s *v45;
  os_unfair_lock_s *v46;
  uint8_t *v47;
  uint64_t v48;
  os_unfair_lock_s *v49;
  uint64_t v50;
  uint64_t v51;
  os_unfair_lock_s *v52;
  char v53;
  os_unfair_lock_s *v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t *boxed_opaque_existential_2;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD v79[2];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95[11];
  uint64_t v96;

  v80 = a7;
  v82 = a5;
  v87 = a3;
  v90 = a2;
  v81 = a1;
  v92 = sub_245443B14();
  v89 = *(_QWORD *)(v92 - 8);
  MEMORY[0x24BDAC7A8](v92);
  v11 = (char *)v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ReplicatorDevice(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v79 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_257463C90);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v84 = (uint64_t)v79 - v23;
  v88 = v7;
  v94 = *(_QWORD *)(v7 + 56);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB00);
  sub_245444030();
  v93 = v8;
  v24 = *(_QWORD *)(v95[0] + 16);
  v83 = v18;
  v91 = v13;
  if (v24)
  {
    v86 = v11;
    v25 = v95[0] + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v26 = *(_QWORD *)(v13 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_2453BA364(v25, (uint64_t)v16, type metadata accessor for ReplicatorDevice);
      if ((sub_245443AF0() & 1) != 0)
        break;
      sub_2453BA3A8((uint64_t)v16, type metadata accessor for ReplicatorDevice);
      v25 += v26;
      if (!--v24)
      {
        swift_bridgeObjectRelease();
        v27 = 1;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    sub_2453D062C((uint64_t)v16, v84, type metadata accessor for ReplicatorDevice);
    v27 = 0;
LABEL_8:
    v18 = v83;
    v28 = v92;
    v11 = v86;
  }
  else
  {
    v27 = 1;
    v28 = v92;
  }
  v29 = v91;
  v30 = v84;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56))(v84, v27, 1, v12);
  swift_bridgeObjectRelease();
  sub_2453D02E0(v30, (uint64_t)v22, &qword_257463C90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v22, 1, v12) == 1)
  {
    sub_2453D055C((uint64_t)v22, &qword_257463C90);
    if (qword_25440EC10 != -1)
      swift_once();
    v31 = sub_245443C04();
    __swift_project_value_buffer(v31, (uint64_t)qword_25440EBF8);
    v32 = v89;
    (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v11, a4, v28);
    v33 = sub_245443BEC();
    v34 = sub_245443FE8();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      v36 = swift_slowAlloc();
      v95[0] = v36;
      *(_DWORD *)v35 = 136446210;
      v93 = v35 + 4;
      sub_2453B8BF4((unint64_t *)&qword_257464D40, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v37 = sub_245444384();
      v96 = sub_2453BDB24(v37, v38, v95);
      sub_245444078();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v28);
      _os_log_impl(&dword_2453B6000, v33, v34, "Relationship does not exist: %{public}s", v35, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x249534440](v36, -1, -1);
      MEMORY[0x249534440](v35, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v28);
    }

    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v66 = 0;
    *(_QWORD *)(v66 + 8) = 0;
    swift_willThrow();
    goto LABEL_50;
  }
  sub_2453D062C((uint64_t)v22, (uint64_t)v18, type metadata accessor for ReplicatorDevice);
  v39 = *(_QWORD *)&v18[*(int *)(v12 + 44)];
  v40 = *(_QWORD *)(v39 + 16);
  if (!v40)
  {
LABEL_34:
    if (qword_25440EC10 != -1)
      swift_once();
    v67 = sub_245443C04();
    __swift_project_value_buffer(v67, (uint64_t)qword_25440EBF8);
    v68 = v87;
    swift_bridgeObjectRetain_n();
    v69 = sub_245443BEC();
    v70 = sub_245443FE8();
    if (!os_log_type_enabled(v69, v70))
      goto LABEL_48;
    v71 = (uint8_t *)swift_slowAlloc();
    v72 = swift_slowAlloc();
    v95[0] = v72;
    *(_DWORD *)v71 = 136446210;
    swift_bridgeObjectRetain();
    v96 = sub_2453BDB24(v90, v68, v95);
    sub_245444078();
    swift_bridgeObjectRelease_n();
    v73 = "Message type does not exist remotely: %{public}s";
LABEL_43:
    _os_log_impl(&dword_2453B6000, v69, v70, v73, v71, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x249534440](v72, -1, -1);
    MEMORY[0x249534440](v71, -1, -1);

    goto LABEL_49;
  }
  swift_bridgeObjectRetain_n();
  v79[1] = v39;
  v41 = (unint64_t *)(v39 + 72);
  while (1)
  {
    v91 = v40;
    v42 = (os_unfair_lock_s *)*(v41 - 4);
    v89 = *(v41 - 5);
    v44 = *(v41 - 3);
    v43 = *(v41 - 2);
    v86 = (char *)*(v41 - 1);
    v85 = *v41;
    v45 = *(os_unfair_lock_s **)(v88 + 80);
    v46 = v42;
    swift_bridgeObjectRetain();
    v92 = v43;
    swift_bridgeObjectRetain();
    swift_retain();
    os_unfair_lock_lock(v45 + 4);
    v47 = v93;
    sub_2453C62CC(v48, (uint64_t (*)(void))sub_2453D0E80);
    v93 = v47;
    v49 = v45 + 4;
    if (v47)
    {
      os_unfair_lock_unlock(v49);
      __break(1u);
      goto LABEL_52;
    }
    os_unfair_lock_unlock(v49);
    swift_release();
    v50 = v95[0];
    v51 = v95[1];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v44 == v50 && v92 == v51)
      break;
    v53 = sub_245444390();
    swift_bridgeObjectRelease();
    v52 = v46;
    if ((v53 & 1) != 0)
      goto LABEL_23;
LABEL_17:
    v41 += 6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v40 = v91 - 1;
    if (v91 == 1)
    {
      swift_bridgeObjectRelease_n();
      v18 = v83;
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRelease();
  v52 = v46;
LABEL_23:
  if ((v89 != v90 || v52 != (os_unfair_lock_s *)v87) && (sub_245444390() & 1) == 0)
    goto LABEL_17;
  swift_bridgeObjectRelease_n();
  v54 = *(os_unfair_lock_s **)(v88 + 80);
  v46 = v54 + 4;
  swift_retain();
  os_unfair_lock_lock(v54 + 4);
  v55 = v93;
  sub_2453C62CC(v56, (uint64_t (*)(void))sub_2453D0E80);
  v18 = v83;
  if (v55)
  {
LABEL_52:
    os_unfair_lock_unlock(v46);
    __break(1u);
    return;
  }
  os_unfair_lock_unlock(v54 + 4);
  swift_release();
  v57 = v95[9];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v57 + 16))
    goto LABEL_39;
  v58 = v87;
  swift_bridgeObjectRetain();
  v59 = sub_2453C64D8(v90, v58);
  if ((v60 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_39:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_25440EC10 != -1)
      swift_once();
    v74 = sub_245443C04();
    __swift_project_value_buffer(v74, (uint64_t)qword_25440EBF8);
    v75 = v87;
    swift_bridgeObjectRetain_n();
    v69 = sub_245443BEC();
    v70 = sub_245443FE8();
    if (os_log_type_enabled(v69, v70))
    {
      v71 = (uint8_t *)swift_slowAlloc();
      v72 = swift_slowAlloc();
      v95[0] = v72;
      *(_DWORD *)v71 = 136446210;
      swift_bridgeObjectRetain();
      v96 = sub_2453BDB24(v90, v75, v95);
      sub_245444078();
      swift_bridgeObjectRelease_n();
      v73 = "Message type does not exist locally: %{public}s";
      goto LABEL_43;
    }
    goto LABEL_48;
  }
  v61 = *(_QWORD *)(v57 + 56) + 32 * v59;
  v62 = *(_QWORD *)(v61 + 16);
  v63 = *(_QWORD *)(v61 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((unint64_t)v86 >= v63 && v62 >= v85)
  {
    sub_245443B68();
    v64 = v82;
    v95[3] = v82;
    v95[4] = v80;
    boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2(v95);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(boxed_opaque_existential_2, v81, v64);
    sub_245443B5C();
    sub_2453BA3A8((uint64_t)v18, type metadata accessor for ReplicatorDevice);
    sub_2453D055C(v84, &qword_257463C90);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
    return;
  }
  if (qword_25440EC10 != -1)
    swift_once();
  v76 = sub_245443C04();
  __swift_project_value_buffer(v76, (uint64_t)qword_25440EBF8);
  v77 = v87;
  swift_bridgeObjectRetain_n();
  v69 = sub_245443BEC();
  v70 = sub_245443FE8();
  if (os_log_type_enabled(v69, v70))
  {
    v71 = (uint8_t *)swift_slowAlloc();
    v72 = swift_slowAlloc();
    v95[0] = v72;
    *(_DWORD *)v71 = 136446210;
    swift_bridgeObjectRetain();
    v96 = sub_2453BDB24(v90, v77, v95);
    sub_245444078();
    swift_bridgeObjectRelease_n();
    v73 = "Protocol version is incompatible: %{public}s";
    goto LABEL_43;
  }
LABEL_48:

  swift_bridgeObjectRelease_n();
LABEL_49:
  sub_2453CBA28();
  swift_allocError();
  *(_BYTE *)v78 = 0;
  *(_QWORD *)(v78 + 8) = 0;
  swift_willThrow();
  sub_2453BA3A8((uint64_t)v18, type metadata accessor for ReplicatorDevice);
LABEL_50:
  sub_2453D055C(v84, &qword_257463C90);
}

uint64_t sub_2453DFD58@<X0>(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v25 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = &a2[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id];
  swift_bridgeObjectRetain();
  result = swift_beginAccess();
  v8 = 0;
  v26 = (unint64_t)(v3 + 63) >> 6;
  while (v5)
  {
    v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v10 = v9 | (v8 << 6);
LABEL_21:
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 80 * v10);
    v15 = *v14;
    v16 = v14[1];
    v17 = v14[3];
    v18 = v14[5];
    v28 = v14[4];
    v29 = v14[2];
    v19 = v14[7];
    v27 = v14[6];
    v21 = v14[8];
    v20 = v14[9];
    if (*v14 != *((_QWORD *)v6 + 4) || v16 != *((_QWORD *)v6 + 5))
    {
      result = sub_245444390();
      if ((result & 1) == 0)
        continue;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();

    result = swift_release();
    *a3 = v15;
    a3[1] = v16;
    a3[2] = v29;
    a3[3] = v17;
    a3[4] = v28;
    a3[5] = v18;
    a3[6] = v27;
    a3[7] = v19;
    a3[8] = v21;
    a3[9] = v20;
    return result;
  }
  v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v11 >= v26)
    goto LABEL_27;
  v12 = *(_QWORD *)(v25 + 8 * v11);
  ++v8;
  if (v12)
    goto LABEL_20;
  v8 = v11 + 1;
  if (v11 + 1 >= v26)
    goto LABEL_27;
  v12 = *(_QWORD *)(v25 + 8 * v8);
  if (v12)
    goto LABEL_20;
  v8 = v11 + 2;
  if (v11 + 2 >= v26)
    goto LABEL_27;
  v12 = *(_QWORD *)(v25 + 8 * v8);
  if (v12)
    goto LABEL_20;
  v8 = v11 + 3;
  if (v11 + 3 >= v26)
    goto LABEL_27;
  v12 = *(_QWORD *)(v25 + 8 * v8);
  if (v12)
    goto LABEL_20;
  v13 = v11 + 4;
  if (v13 >= v26)
  {
LABEL_27:

    result = swift_release();
    *((_OWORD *)a3 + 3) = 0u;
    *((_OWORD *)a3 + 4) = 0u;
    *((_OWORD *)a3 + 1) = 0u;
    *((_OWORD *)a3 + 2) = 0u;
    *(_OWORD *)a3 = 0u;
    return result;
  }
  v12 = *(_QWORD *)(v25 + 8 * v13);
  v8 = v13;
  if (v12)
  {
LABEL_20:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v26)
      goto LABEL_27;
    v12 = *(_QWORD *)(v25 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t ReplicatorClient.decode<A>(_:from:version:)()
{
  sub_245443B68();
  return sub_245443B50();
}

uint64_t sub_2453E0068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_2453E0D00(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))ReplicatorClient.encode<A>(_:messageType:relationshipID:));
}

uint64_t sub_2453E0094()
{
  return ReplicatorClient.decode<A>(_:from:version:)();
}

void ReplicatorClient.encode<A>(_:zone:relationshipID:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint8_t *v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  os_unfair_lock_s *v42;
  uint64_t v43;
  uint64_t v44;
  os_unfair_lock_s *v45;
  os_unfair_lock_s *v46;
  uint8_t *v47;
  uint64_t v48;
  os_unfair_lock_s *v49;
  uint64_t v50;
  uint64_t v51;
  os_unfair_lock_s *v52;
  char v53;
  os_unfair_lock_s *v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t *boxed_opaque_existential_2;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD v79[2];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95[9];
  uint64_t v96;

  v80 = a7;
  v82 = a5;
  v87 = a3;
  v90 = a2;
  v81 = a1;
  v92 = sub_245443B14();
  v89 = *(_QWORD *)(v92 - 8);
  MEMORY[0x24BDAC7A8](v92);
  v11 = (char *)v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ReplicatorDevice(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)v79 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_257463C90);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v84 = (uint64_t)v79 - v23;
  v88 = v7;
  v94 = *(_QWORD *)(v7 + 56);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB00);
  sub_245444030();
  v93 = v8;
  v24 = *(_QWORD *)(v95[0] + 16);
  v83 = v18;
  v91 = v13;
  if (v24)
  {
    v86 = v11;
    v25 = v95[0] + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v26 = *(_QWORD *)(v13 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_2453BA364(v25, (uint64_t)v16, type metadata accessor for ReplicatorDevice);
      if ((sub_245443AF0() & 1) != 0)
        break;
      sub_2453BA3A8((uint64_t)v16, type metadata accessor for ReplicatorDevice);
      v25 += v26;
      if (!--v24)
      {
        swift_bridgeObjectRelease();
        v27 = 1;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    sub_2453D062C((uint64_t)v16, v84, type metadata accessor for ReplicatorDevice);
    v27 = 0;
LABEL_8:
    v18 = v83;
    v28 = v92;
    v11 = v86;
  }
  else
  {
    v27 = 1;
    v28 = v92;
  }
  v29 = v91;
  v30 = v84;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56))(v84, v27, 1, v12);
  swift_bridgeObjectRelease();
  sub_2453D02E0(v30, (uint64_t)v22, &qword_257463C90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v22, 1, v12) == 1)
  {
    sub_2453D055C((uint64_t)v22, &qword_257463C90);
    if (qword_25440EC10 != -1)
      swift_once();
    v31 = sub_245443C04();
    __swift_project_value_buffer(v31, (uint64_t)qword_25440EBF8);
    v32 = v89;
    (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v11, a4, v28);
    v33 = sub_245443BEC();
    v34 = sub_245443FE8();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      v36 = swift_slowAlloc();
      v95[0] = v36;
      *(_DWORD *)v35 = 136446210;
      v93 = v35 + 4;
      sub_2453B8BF4((unint64_t *)&qword_257464D40, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v37 = sub_245444384();
      v96 = sub_2453BDB24(v37, v38, v95);
      sub_245444078();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v28);
      _os_log_impl(&dword_2453B6000, v33, v34, "Relationship does not exist: %{public}s", v35, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x249534440](v36, -1, -1);
      MEMORY[0x249534440](v35, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v28);
    }

    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v66 = 0;
    *(_QWORD *)(v66 + 8) = 0;
    swift_willThrow();
    goto LABEL_50;
  }
  sub_2453D062C((uint64_t)v22, (uint64_t)v18, type metadata accessor for ReplicatorDevice);
  v39 = *(_QWORD *)&v18[*(int *)(v12 + 40)];
  v40 = *(_QWORD *)(v39 + 16);
  if (!v40)
  {
LABEL_34:
    if (qword_25440EC10 != -1)
      swift_once();
    v67 = sub_245443C04();
    __swift_project_value_buffer(v67, (uint64_t)qword_25440EBF8);
    v68 = v87;
    swift_bridgeObjectRetain_n();
    v69 = sub_245443BEC();
    v70 = sub_245443FE8();
    if (!os_log_type_enabled(v69, v70))
      goto LABEL_48;
    v71 = (uint8_t *)swift_slowAlloc();
    v72 = swift_slowAlloc();
    v95[0] = v72;
    *(_DWORD *)v71 = 136446210;
    swift_bridgeObjectRetain();
    v96 = sub_2453BDB24(v90, v68, v95);
    sub_245444078();
    swift_bridgeObjectRelease_n();
    v73 = "Zone does not exist remotely: %{public}s";
LABEL_43:
    _os_log_impl(&dword_2453B6000, v69, v70, v73, v71, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x249534440](v72, -1, -1);
    MEMORY[0x249534440](v71, -1, -1);

    goto LABEL_49;
  }
  swift_bridgeObjectRetain_n();
  v79[1] = v39;
  v41 = (unint64_t *)(v39 + 72);
  while (1)
  {
    v91 = v40;
    v42 = (os_unfair_lock_s *)*(v41 - 4);
    v89 = *(v41 - 5);
    v44 = *(v41 - 3);
    v43 = *(v41 - 2);
    v86 = (char *)*(v41 - 1);
    v85 = *v41;
    v45 = *(os_unfair_lock_s **)(v88 + 80);
    v46 = v42;
    swift_bridgeObjectRetain();
    v92 = v43;
    swift_bridgeObjectRetain();
    swift_retain();
    os_unfair_lock_lock(v45 + 4);
    v47 = v93;
    sub_2453C62CC(v48, (uint64_t (*)(void))sub_2453D0E80);
    v93 = v47;
    v49 = v45 + 4;
    if (v47)
    {
      os_unfair_lock_unlock(v49);
      __break(1u);
      goto LABEL_52;
    }
    os_unfair_lock_unlock(v49);
    swift_release();
    v50 = v95[0];
    v51 = v95[1];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v44 == v50 && v92 == v51)
      break;
    v53 = sub_245444390();
    swift_bridgeObjectRelease();
    v52 = v46;
    if ((v53 & 1) != 0)
      goto LABEL_23;
LABEL_17:
    v41 += 6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v40 = v91 - 1;
    if (v91 == 1)
    {
      swift_bridgeObjectRelease_n();
      v18 = v83;
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRelease();
  v52 = v46;
LABEL_23:
  if ((v89 != v90 || v52 != (os_unfair_lock_s *)v87) && (sub_245444390() & 1) == 0)
    goto LABEL_17;
  swift_bridgeObjectRelease_n();
  v54 = *(os_unfair_lock_s **)(v88 + 80);
  v46 = v54 + 4;
  swift_retain();
  os_unfair_lock_lock(v54 + 4);
  v55 = v93;
  sub_2453C62CC(v56, (uint64_t (*)(void))sub_2453D0E80);
  v18 = v83;
  if (v55)
  {
LABEL_52:
    os_unfair_lock_unlock(v46);
    __break(1u);
    return;
  }
  os_unfair_lock_unlock(v54 + 4);
  swift_release();
  v57 = v95[8];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v57 + 16))
    goto LABEL_39;
  v58 = v87;
  swift_bridgeObjectRetain();
  v59 = sub_2453C64D8(v90, v58);
  if ((v60 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_39:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_25440EC10 != -1)
      swift_once();
    v74 = sub_245443C04();
    __swift_project_value_buffer(v74, (uint64_t)qword_25440EBF8);
    v75 = v87;
    swift_bridgeObjectRetain_n();
    v69 = sub_245443BEC();
    v70 = sub_245443FE8();
    if (os_log_type_enabled(v69, v70))
    {
      v71 = (uint8_t *)swift_slowAlloc();
      v72 = swift_slowAlloc();
      v95[0] = v72;
      *(_DWORD *)v71 = 136446210;
      swift_bridgeObjectRetain();
      v96 = sub_2453BDB24(v90, v75, v95);
      sub_245444078();
      swift_bridgeObjectRelease_n();
      v73 = "Zone does not exist locally: %{public}s";
      goto LABEL_43;
    }
    goto LABEL_48;
  }
  v61 = *(_QWORD *)(v57 + 56) + 48 * v59;
  v62 = *(_QWORD *)(v61 + 24);
  v63 = *(_QWORD *)(v61 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((unint64_t)v86 >= v63 && v62 >= v85)
  {
    sub_245443B68();
    v64 = v82;
    v95[3] = v82;
    v95[4] = v80;
    boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2(v95);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(boxed_opaque_existential_2, v81, v64);
    sub_245443B5C();
    sub_2453BA3A8((uint64_t)v18, type metadata accessor for ReplicatorDevice);
    sub_2453D055C(v84, &qword_257463C90);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
    return;
  }
  if (qword_25440EC10 != -1)
    swift_once();
  v76 = sub_245443C04();
  __swift_project_value_buffer(v76, (uint64_t)qword_25440EBF8);
  v77 = v87;
  swift_bridgeObjectRetain_n();
  v69 = sub_245443BEC();
  v70 = sub_245443FE8();
  if (os_log_type_enabled(v69, v70))
  {
    v71 = (uint8_t *)swift_slowAlloc();
    v72 = swift_slowAlloc();
    v95[0] = v72;
    *(_DWORD *)v71 = 136446210;
    swift_bridgeObjectRetain();
    v96 = sub_2453BDB24(v90, v77, v95);
    sub_245444078();
    swift_bridgeObjectRelease_n();
    v73 = "Protocol version is incompatible: %{public}s";
    goto LABEL_43;
  }
LABEL_48:

  swift_bridgeObjectRelease_n();
LABEL_49:
  sub_2453CBA28();
  swift_allocError();
  *(_BYTE *)v78 = 0;
  *(_QWORD *)(v78 + 8) = 0;
  swift_willThrow();
  sub_2453BA3A8((uint64_t)v18, type metadata accessor for ReplicatorDevice);
LABEL_50:
  sub_2453D055C(v84, &qword_257463C90);
}

uint64_t sub_2453E0CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_2453E0D00(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(void))ReplicatorClient.encode<A>(_:zone:relationshipID:));
}

uint64_t sub_2453E0D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  result = a10();
  if (v10)
    return v12;
  return result;
}

uint64_t ReplicatorClient.encode<A>(_:version:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_2453F5B1C(a1, a2, a3, a4, a5);
}

uint64_t sub_2453E0D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_2453F5B1C(a1, a2, a3, a4, a5);
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorClient.clientDescriptor(id:)(ReplicatorServices::ClientDescriptor_optional *__return_ptr retstr, Swift::String id)
{
  uint64_t v2;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  __int128 v8;
  void *v9;

  sub_245444030();
  if (!v2)
  {
    retstr->value.id = v4;
    retstr->value.entitlement = v5;
    retstr->value.messageNotificationName = v6;
    retstr->value.recordNotificationName._countAndFlagsBits = v7;
    *(_OWORD *)&retstr->value.recordNotificationName._object = v8;
    retstr->value.messageDescriptors._rawValue = v9;
  }
}

id sub_2453E0DE0()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)_s18ReplicatorServices9SingletonCMa_0()), sel_init);
  qword_25440E5D0 = (uint64_t)result;
  return result;
}

uint64_t sub_2453E0E10()
{
  return sub_2453E0F0C(&OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton____lazy_storage___recordVersionPublisher, (uint64_t)&OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton__recordVersionPublisher, &qword_25440E628, &qword_25440E348);
}

uint64_t sub_2453E0E34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton____lazy_storage___messagePublisher;
  if (*(_QWORD *)(v0
                 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton____lazy_storage___messagePublisher))
  {
    v2 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton____lazy_storage___messagePublisher);
  }
  else
  {
    v3 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25440E620);
    sub_2453F75AC(&qword_25440E618, &qword_25440E620, MEMORY[0x24BDB9CB0]);
    v2 = sub_245443C64();
    *(_QWORD *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_2453E0EE8()
{
  return sub_2453E0F0C(&OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton____lazy_storage___devicePublisher, (uint64_t)&OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton__devicePublisher, &qword_25440E638, &qword_25440E630);
}

uint64_t sub_2453E0F0C(uint64_t *a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;

  v5 = *a1;
  v6 = *(_QWORD *)(v4 + *a1);
  if (v6)
  {
    v7 = v6;
  }
  else
  {
    v10 = v4;
    __swift_instantiateConcreteTypeFromMangledName(a3);
    sub_2453F75AC(a4, a3, MEMORY[0x24BDB9D10]);
    v7 = sub_245443C64();
    *(_QWORD *)(v10 + v5) = v7;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v7;
}

uint64_t sub_2453E0FBC()
{
  return sub_2453E0F0C(&OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton____lazy_storage___pairedDevicePublisher, (uint64_t)&OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton__pairedDevicePublisher, &qword_25440E638, &qword_25440E630);
}

uint64_t sub_2453E0FE0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  if ((*(_BYTE *)(a1
                 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_hasFetchedDevices) & 1) == 0)
  {
    sub_2453E103C();
    sub_2453E12B4();
  }
  *a2 = *(_QWORD *)(a1 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_devices);
  return swift_bridgeObjectRetain();
}

void sub_2453E103C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint32_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD aBlock[6];
  int out_token;
  uint64_t v19;

  v1 = v0;
  v19 = *MEMORY[0x24BDAC8D0];
  v2 = sub_245443CDC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (_QWORD *)((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE5610], v2);
  v7 = v6;
  v8 = sub_245443CE8();
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v8 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_deviceToken;
  if (*(_DWORD *)(v1
                 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_deviceToken) != -1)
    return;
  out_token = -1;
  v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_2453F7670;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2454171FC;
  aBlock[3] = &block_descriptor_193;
  v10 = _Block_copy(aBlock);
  swift_release();
  v11 = sub_245443DD8();
  v12 = notify_register_dispatch((const char *)(v11 + 32), &out_token, v7, v10);
  swift_release();
  _Block_release(v10);
  if (v12)
  {
    if (qword_25440EC10 == -1)
    {
LABEL_5:
      v13 = sub_245443C04();
      __swift_project_value_buffer(v13, (uint64_t)qword_25440EBF8);
      v14 = sub_245443BEC();
      v15 = sub_245443FE8();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v16 = 0;
        _os_log_impl(&dword_2453B6000, v14, v15, "Could not register for device change notifications", v16, 2u);
        MEMORY[0x249534440](v16, -1, -1);
      }

      goto LABEL_8;
    }
LABEL_11:
    swift_once();
    goto LABEL_5;
  }
LABEL_8:
  *(_DWORD *)(v1 + v8) = out_token;
}

void sub_2453E12B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  id v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  void *v75;
  id v76;
  void *v77;
  uint64_t v78;
  id v79;
  id v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  void *v84;
  id v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  _QWORD *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  id v105[2];

  v105[1] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v96 = (char *)&v90 - v6;
  v7 = type metadata accessor for ReplicatorDevice(0);
  v8 = *(_QWORD *)(v7 - 8);
  v101 = v7;
  v102 = v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v97 = (uint64_t)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v98 = (uint64_t)&v90 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v90 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v99 = (char *)&v90 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v90 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v90 - v21;
  v23 = sub_245443CDC();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (unint64_t)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(void **)((char *)v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *(_QWORD *)v26 = v27;
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v24 + 104))(v26, *MEMORY[0x24BEE5610], v23);
  v28 = v27;
  LOBYTE(v27) = sub_245443CE8();
  (*(void (**)(unint64_t, uint64_t))(v24 + 8))(v26, v23);
  if ((v27 & 1) == 0)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v29 = sub_2453E37FC();
  if (v29)
  {
    v30 = (void *)v29;
    v94 = v0;
    v95 = v5;
    v91 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_hasFetchedDevices;
    *((_BYTE *)v0
    + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_hasFetchedDevices) = 0;
    v93 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_devices;
    v31 = *(_QWORD *)((char *)v0
                    + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_devices);
    v23 = MEMORY[0x24BEE4AF8];
    v105[0] = (id)MEMORY[0x24BEE4AF8];
    v32 = *(char **)(v31 + 16);
    swift_bridgeObjectRetain();
    v103 = v15;
    v100 = v32;
    v92 = v30;
    if (!v32)
      goto LABEL_19;
    v26 = 0;
    v33 = v101;
    v34 = (uint64_t)v96;
    while (1)
    {
      if (v26 >= *(_QWORD *)(v31 + 16))
      {
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      v35 = (*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80);
      v1 = *(_QWORD *)(v102 + 72);
      sub_2453BA364(v31 + v35 + v1 * v26, (uint64_t)v22, type metadata accessor for ReplicatorDevice);
      sub_2453BA364((uint64_t)&v22[*(int *)(v33 + 48)], v34, type metadata accessor for ReplicatorDevice.RelationshipState);
      v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
      v37 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v34, 4, v36);
      if ((v37 - 2) >= 2)
      {
        if (v37)
        {
          sub_2453BA3A8(v34, type metadata accessor for ReplicatorDevice.RelationshipState);
          sub_2453BA364((uint64_t)v22, (uint64_t)v20, type metadata accessor for ReplicatorDevice);
          sub_2453BA3A8((uint64_t)v20, type metadata accessor for ReplicatorDevice);
          goto LABEL_6;
        }
        v38 = sub_245443B14();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v34, v38);
      }
      sub_2453BA364((uint64_t)v22, (uint64_t)v20, type metadata accessor for ReplicatorDevice);
      v23 = v20[*(int *)(v33 + 56)];
      sub_2453BA3A8((uint64_t)v20, type metadata accessor for ReplicatorDevice);
      if ((v23 & 1) == 0)
      {
        sub_2453D062C((uint64_t)v22, (uint64_t)v99, type metadata accessor for ReplicatorDevice);
        v39 = v105[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_2453F1BF4(0, v39[2] + 1, 1);
          v39 = v105[0];
        }
        v41 = v39[2];
        v40 = v39[3];
        v23 = v41 + 1;
        if (v41 >= v40 >> 1)
        {
          sub_2453F1BF4(v40 > 1, v41 + 1, 1);
          v39 = v105[0];
        }
        v39[2] = v23;
        sub_2453D062C((uint64_t)v99, (uint64_t)v39 + v35 + v41 * v1, type metadata accessor for ReplicatorDevice);
        v33 = v101;
        v34 = (uint64_t)v96;
        goto LABEL_7;
      }
LABEL_6:
      sub_2453BA3A8((uint64_t)v22, type metadata accessor for ReplicatorDevice);
LABEL_7:
      ++v26;
      v15 = v103;
      if (v100 == (char *)v26)
      {
        v23 = (uint64_t)v105[0];
        v30 = v92;
LABEL_19:
        swift_bridgeObjectRelease();
        v1 = sub_2454158D0(v23);
        swift_release();
        v105[0] = 0;
        v42 = objc_msgSend(v30, sel_devicesAndReturnError_, v105);
        v43 = v105[0];
        if (!v42)
        {
          v76 = v105[0];
          swift_bridgeObjectRelease();
          v77 = (void *)sub_2454439B8();

          swift_willThrow();
          if (qword_25440EC10 != -1)
            swift_once();
          v78 = sub_245443C04();
          __swift_project_value_buffer(v78, (uint64_t)qword_25440EBF8);
          v79 = v77;
          v80 = v77;
          v81 = sub_245443BEC();
          v82 = sub_245443FE8();
          if (os_log_type_enabled(v81, v82))
          {
            v83 = (uint8_t *)swift_slowAlloc();
            v84 = (void *)swift_slowAlloc();
            v105[0] = v84;
            *(_DWORD *)v83 = 136315138;
            v104 = (uint64_t)v77;
            v85 = v77;
            __swift_instantiateConcreteTypeFromMangledName(&qword_257464988);
            v86 = sub_245443DCC();
            v104 = sub_2453BDB24(v86, v87, (uint64_t *)v105);
            sub_245444078();
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_2453B6000, v81, v82, "Could not fetch devices: %s", v83, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x249534440](v84, -1, -1);
            MEMORY[0x249534440](v83, -1, -1);
            swift_unknownObjectRelease();

          }
          else
          {
            swift_unknownObjectRelease();

          }
          return;
        }
        v44 = v42;
        sub_245443964();
        swift_allocObject();
        sub_245443958();
        v45 = sub_245443A78();
        v47 = v46;
        sub_2453F6DF4();
        sub_24544394C();
        sub_2453BDCF8(v45, v47);
        v26 = (unint64_t)v94;
        v100 = (char *)v1;
        swift_release();
        v48 = (char *)v105[0];
        v49 = (uint64_t)v95;
        if (!v105[0])
        {
          __break(1u);
          swift_unexpectedError();
          __break(1u);
          return;
        }
        v50 = v43;

        v51 = v93;
        *(_QWORD *)(v26 + v93) = v48;
        v99 = v48;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(_BYTE *)(v26 + v91) = 1;
        v23 = *(_QWORD *)(v26 + v51);
        v52 = (id)MEMORY[0x24BEE4AF8];
        v105[0] = (id)MEMORY[0x24BEE4AF8];
        v53 = *(_QWORD **)(v23 + 16);
        swift_bridgeObjectRetain();
        if (v53)
        {
          v26 = 0;
          v54 = v101;
          while (1)
          {
            if (v26 >= *(_QWORD *)(v23 + 16))
              goto LABEL_55;
            v1 = (*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80);
            v56 = *(_QWORD *)(v102 + 72);
            sub_2453BA364(v23 + v1 + v56 * v26, (uint64_t)v15, type metadata accessor for ReplicatorDevice);
            sub_2453BA364((uint64_t)&v15[*(int *)(v54 + 48)], v49, type metadata accessor for ReplicatorDevice.RelationshipState);
            v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
            v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 48))(v49, 4, v57);
            if ((v58 - 2) >= 2)
            {
              if (v58)
              {
                sub_2453BA3A8(v49, type metadata accessor for ReplicatorDevice.RelationshipState);
                v55 = v98;
                sub_2453BA364((uint64_t)v15, v98, type metadata accessor for ReplicatorDevice);
                sub_2453BA3A8(v55, type metadata accessor for ReplicatorDevice);
                goto LABEL_24;
              }
              v59 = sub_245443B14();
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 8))(v49, v59);
            }
            v60 = (uint64_t)v15;
            v61 = v98;
            sub_2453BA364(v60, v98, type metadata accessor for ReplicatorDevice);
            v62 = *(_BYTE *)(v61 + *(int *)(v54 + 56));
            v63 = v61;
            v15 = v103;
            sub_2453BA3A8(v63, type metadata accessor for ReplicatorDevice);
            if ((v62 & 1) == 0)
            {
              sub_2453D062C((uint64_t)v15, v97, type metadata accessor for ReplicatorDevice);
              v64 = v105[0];
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                sub_2453F1BF4(0, v64[2] + 1, 1);
                v64 = v105[0];
              }
              v66 = v64[2];
              v65 = v64[3];
              if (v66 >= v65 >> 1)
              {
                sub_2453F1BF4(v65 > 1, v66 + 1, 1);
                v64 = v105[0];
              }
              v64[2] = v66 + 1;
              sub_2453D062C(v97, (uint64_t)v64 + v1 + v66 * v56, type metadata accessor for ReplicatorDevice);
              v49 = (uint64_t)v95;
              v15 = v103;
              goto LABEL_25;
            }
LABEL_24:
            sub_2453BA3A8((uint64_t)v15, type metadata accessor for ReplicatorDevice);
LABEL_25:
            ++v26;
            v54 = v101;
            if (v53 == (_QWORD *)v26)
            {
              v52 = v105[0];
              v26 = (unint64_t)v94;
              break;
            }
          }
        }
        swift_bridgeObjectRelease();
        v23 = sub_2454158D0((uint64_t)v52);
        swift_release();
        v1 = (uint64_t)v99;
        v15 = v100;
        if (qword_25440EC10 == -1)
        {
LABEL_43:
          v71 = sub_245443C04();
          __swift_project_value_buffer(v71, (uint64_t)qword_25440EBF8);
          swift_bridgeObjectRetain();
          v72 = sub_245443BEC();
          v73 = sub_245444000();
          if (os_log_type_enabled(v72, v73))
          {
            v74 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)v74 = 134217984;
            v75 = *(void **)(v1 + 16);
            swift_bridgeObjectRelease();
            v105[0] = v75;
            v26 = (unint64_t)v94;
            sub_245444078();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_2453B6000, v72, v73, "Fetched %ld devices", v74, 0xCu);
            MEMORY[0x249534440](v74, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          v105[0] = *(id *)(v26 + v93);
          swift_bridgeObjectRetain();
          sub_245443C4C();
          swift_bridgeObjectRelease();
          v88 = sub_245410260((uint64_t)v15, v23);
          swift_bridgeObjectRelease();
          if ((v88 & 1) != 0)
          {
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            v89 = (void *)sub_2453F256C(v23, &qword_257464990, type metadata accessor for ReplicatorDevice);
            swift_bridgeObjectRelease();
            v105[0] = v89;
            sub_245443C4C();
            swift_release();
            swift_unknownObjectRelease();
          }
          return;
        }
LABEL_57:
        swift_once();
        goto LABEL_43;
      }
    }
  }
  if (qword_25440EC10 != -1)
    swift_once();
  v67 = sub_245443C04();
  __swift_project_value_buffer(v67, (uint64_t)qword_25440EBF8);
  v68 = sub_245443BEC();
  v69 = sub_245443FE8();
  if (os_log_type_enabled(v68, v69))
  {
    v70 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v70 = 0;
    _os_log_impl(&dword_2453B6000, v68, v69, "Could not fetch devices because target could not be created", v70, 2u);
    MEMORY[0x249534440](v70, -1, -1);
  }

}

uint64_t sub_2453E1E5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[24];

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v15[-v9];
  v11 = a1 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_localDeviceID;
  swift_beginAccess();
  sub_2453D02E0(v11, (uint64_t)v10, (uint64_t *)&unk_25440E8F0);
  v12 = sub_245443B14();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) == 1)
  {
    sub_2453D055C((uint64_t)v10, (uint64_t *)&unk_25440E8F0);
    sub_2453E2014((uint64_t)v8);
    if (v2)
    {

      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v8, 1, 1, v12);
    }
    swift_beginAccess();
    sub_2453F7820((uint64_t)v8, v11, (uint64_t *)&unk_25440E8F0);
    swift_endAccess();
    return sub_2453D02E0(v11, a2, (uint64_t *)&unk_25440E8F0);
  }
  else
  {
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v13 + 32))(a2, v10, v12);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a2, 0, 1, v12);
  }
}

uint64_t sub_2453E2014@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t LocalDeviceID;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v18;
  id v19;
  id v20[2];

  v20[1] = *(id *)MEMORY[0x24BDAC8D0];
  LocalDeviceID = type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID(0);
  MEMORY[0x24BDAC7A8](LocalDeviceID);
  v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_245443CDC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (id *)((char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v1 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BEE5610], v6);
  v11 = v10;
  LOBYTE(v10) = sub_245443CE8();
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
    __break(1u);
  v12 = (void *)sub_2453E37FC();
  if (v12)
  {
    v20[0] = 0;
    v13 = objc_msgSend(v12, sel_localDeviceIDAndReturnError_, v20);
    v14 = v20[0];
    if (v13)
    {
      v15 = v13;
      sub_245435F04((uint64_t)v13, (uint64_t)v5);
      v16 = v14;
      swift_unknownObjectRelease();

      return sub_2453D0428((uint64_t)v5, a1, (uint64_t *)&unk_25440E8F0);
    }
    else
    {
      v19 = v20[0];
      sub_2454439B8();

      swift_willThrow();
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v18 = 3;
    *(_QWORD *)(v18 + 8) = 0;
    return swift_willThrow();
  }
}

id sub_2453E2208()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  objc_class *v18;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  objc_super v23;
  unint64_t v24;

  v1 = sub_245444024();
  v21 = *(_QWORD *)(v1 - 8);
  v22 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v20 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_24544400C();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v3);
  v5 = sub_245443CAC();
  MEMORY[0x24BDAC7A8](v5);
  *(_QWORD *)&v0[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton____lazy_storage___recordVersionPublisher] = 0;
  v6 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton__recordVersionPublisher;
  v7 = v0;
  v8 = MEMORY[0x24BEE4AF8];
  v24 = sub_245434AC0(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E628);
  swift_allocObject();
  *(_QWORD *)&v0[v6] = sub_245443C58();
  *(_QWORD *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton____lazy_storage___messagePublisher] = 0;
  v9 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton__messagePublisher;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E620);
  swift_allocObject();
  *(_QWORD *)&v7[v9] = sub_245443C40();
  *(_QWORD *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton____lazy_storage___devicePublisher] = 0;
  v10 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton__devicePublisher;
  v24 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E638);
  swift_allocObject();
  *(_QWORD *)&v7[v10] = sub_245443C58();
  *(_QWORD *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton____lazy_storage___pairedDevicePublisher] = 0;
  v11 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton__pairedDevicePublisher;
  v24 = v8;
  swift_allocObject();
  *(_QWORD *)&v7[v11] = sub_245443C58();
  v12 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_connection;
  *(_QWORD *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_connection] = 0;
  *(_DWORD *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_serverStartupToken] = -1;
  v13 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue;
  sub_2453D0348();
  sub_245443CA0();
  v24 = v8;
  sub_2453B8BF4((unint64_t *)&qword_25440E6C0, v4, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E688);
  sub_2453F75AC((unint64_t *)&qword_25440E690, &qword_25440E688, MEMORY[0x24BEE12C8]);
  sub_2454440A8();
  (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v20, *MEMORY[0x24BEE5758], v22);
  *(_QWORD *)&v7[v13] = sub_245444048();
  *(_QWORD *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_clientDescriptors] = MEMORY[0x24BEE4B08];
  v14 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_zoneChangeTokens] = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_messageTokens] = v14;
  *(_DWORD *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_deviceToken] = -1;
  *(_QWORD *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_devices] = v14;
  v15 = &v7[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_localDeviceID];
  v16 = sub_245443B14();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  *(_QWORD *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_recordVersions] = MEMORY[0x24BEE4B00];
  v7[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_hasFetchedDevices] = 0;
  v7[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_hasFetchedRecordVersions] = 0;
  v7[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_recordFetchPending] = 0;
  v7[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_messageFetchPending] = 0;
  v7[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_deviceFetchPending] = 0;
  v17 = *(void **)&v7[v12];
  *(_QWORD *)&v7[v12] = 0;

  v18 = (objc_class *)_s18ReplicatorServices9SingletonCMa_0();
  v23.receiver = v7;
  v23.super_class = v18;
  return objc_msgSendSuper2(&v23, sel_init);
}

id sub_2453E261C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)_s18ReplicatorServices9SingletonCMa_0();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_2453E2770(uint64_t a1, objc_class *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t (*v46)(uint64_t);
  char *v47;
  char *v48;
  char v49;
  uint64_t v50;
  char v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  objc_class *v60;
  char *v61;
  char *v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  BOOL v81;
  int64_t v82;
  unint64_t v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  void *v97;
  void *v98;
  char *v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t *v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t *v111;
  void **v112;
  char *v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  void *v119;
  char *v120;
  id v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(char *, uint64_t, uint64_t);
  uint64_t v126;
  uint64_t v127;
  objc_class *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  id v134;
  uint64_t v135;
  char *v136;
  id v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int64_t v151;
  char *v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  char *v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  objc_class *v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  _QWORD *v171;
  uint64_t v172;
  objc_super v173;
  objc_super v174;
  id v175;
  objc_super v176;
  uint64_t v177;
  id v178[13];

  v5 = v4;
  v146 = a4;
  v147 = a3;
  v166 = a2;
  v178[12] = *(id *)MEMORY[0x24BDAC8D0];
  v165 = sub_245443AC0();
  v164 = *(_QWORD *)(v165 - 8);
  v6 = MEMORY[0x24BDAC7A8](v165);
  v168 = (char *)&v138 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v169 = (char *)&v138 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E420);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v170 = (char *)&v138 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v142 = (uint64_t)&v138 - v12;
  v141 = sub_245443B14();
  v145 = *(_QWORD *)(v141 - 8);
  MEMORY[0x24BDAC7A8](v141);
  v144 = (char *)&v138 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x24BDAC7A8](v14);
  v143 = (uint64_t)&v138 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E1A0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v138 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_245443A24();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v152 = (char *)&v138 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E260);
  v22 = MEMORY[0x24BDAC7A8](v172);
  v161 = (uint64_t *)((char *)&v138 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = MEMORY[0x24BDAC7A8](v22);
  v163 = (uint64_t *)((char *)&v138 - v25);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v138 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v162 = (char *)&v138 - v29;
  v153 = type metadata accessor for ReplicatorRecord(0);
  v30 = *(_QWORD *)(v153 - 8);
  v31 = MEMORY[0x24BDAC7A8](v153);
  v148 = (uint64_t)&v138 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)&v138 - v33;
  v149 = sub_2453E37FC();
  if (!v149)
  {
    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v54 = 3;
    *(_QWORD *)(v54 + 8) = 0;
    swift_willThrow();
    return;
  }
  v35 = *((_QWORD *)v166 + 2);
  if (!v35)
  {
    v55 = (void *)v149;
    v56 = v147;
    v57 = v146;
    v58 = MEMORY[0x24BEE4AF8];
LABEL_12:
    v59 = v57 & 1;
    v60 = (objc_class *)type metadata accessor for ReplicationXPCServerParametersAddRecords();
    v61 = (char *)objc_allocWithZone(v60);
    v62 = &v61[OBJC_IVAR____TtC18ReplicatorServices40ReplicationXPCServerParametersAddRecords_parameters];
    *(_QWORD *)v62 = v56;
    v62[8] = v59;
    *(_QWORD *)&v61[OBJC_IVAR____TtC18ReplicatorServices40ReplicationXPCServerParametersAddRecords_records] = v58;
    v173.receiver = v61;
    v173.super_class = v60;
    swift_bridgeObjectRetain();
    v63 = objc_msgSendSuper2(&v173, sel_init);
    v178[0] = 0;
    if ((objc_msgSend(v55, sel_addRecordsWithParameters_error_, v63, v178) & 1) != 0)
    {
      v64 = v178[0];
    }
    else
    {
      v134 = v178[0];
      sub_2454439B8();

      swift_willThrow();
    }
    swift_unknownObjectRelease();

    return;
  }
  v157 = v18;
  v171 = v28;
  v158 = v20;
  v159 = v19;
  v155 = v5;
  v36 = (char *)v166 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
  v160 = *(_QWORD *)(v30 + 72);
  swift_bridgeObjectRetain();
  v37 = type metadata accessor for ReplicatorRecord;
  v139 = v36;
  v38 = (uint64_t)v36;
  v140 = v35;
  v39 = v35;
  v40 = (uint64_t *)&unk_25440E420;
  v41 = v153;
  v42 = (uint64_t)v170;
  v167 = v34;
  v43 = v165;
  do
  {
    sub_2453BA364(v38, (uint64_t)v34, v37);
    if (ReplicatorRecord.size.getter() > 102400)
    {
      swift_bridgeObjectRelease();
      sub_2453CBA28();
      swift_allocError();
      *(_BYTE *)v65 = 1;
      *(_QWORD *)(v65 + 8) = 0;
      swift_willThrow();
      swift_unknownObjectRelease();
      v66 = (uint64_t)v34;
LABEL_54:
      sub_2453BA3A8(v66, type metadata accessor for ReplicatorRecord);
      return;
    }
    sub_2453D02E0((uint64_t)&v34[*(int *)(v41 + 28)], v42, v40);
    v44 = v164;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v164 + 48))(v42, 1, v43) == 1)
    {
      sub_2453BA3A8((uint64_t)v34, v37);
      sub_2453D055C(v42, v40);
    }
    else
    {
      v45 = v40;
      v46 = v37;
      v47 = v169;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v169, v42, v43);
      v48 = v168;
      sub_245443AB4();
      v49 = sub_245443A90();
      v50 = v44;
      v51 = v49;
      v52 = *(void (**)(char *, uint64_t))(v50 + 8);
      v52(v48, v43);
      if ((v51 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_2453CBA28();
        swift_allocError();
        *(_BYTE *)v135 = 0;
        *(_QWORD *)(v135 + 8) = 0;
        swift_willThrow();
        swift_unknownObjectRelease();
        v52(v47, v43);
        v66 = (uint64_t)v167;
        goto LABEL_54;
      }
      v52(v47, v43);
      v53 = v167;
      v37 = v46;
      sub_2453BA3A8((uint64_t)v167, v46);
      v41 = v153;
      v42 = (uint64_t)v170;
      v40 = v45;
      v34 = v53;
    }
    v38 += v160;
    --v39;
  }
  while (v39);
  swift_bridgeObjectRelease();
  v67 = (void *)MEMORY[0x24BEE4AF8];
  v177 = MEMORY[0x24BEE4AF8];
  sub_2454441A4();
  v68 = 0;
  v154 = xmmword_245445F70;
  v69 = v148;
LABEL_16:
  v138 = v68 + 1;
  sub_2453BA364((uint64_t)&v139[v68 * v160], v69, type metadata accessor for ReplicatorRecord);
  v70 = *(_QWORD *)(v69 + *(int *)(v41 + 24));
  v178[0] = v67;
  v71 = *(_QWORD *)(v70 + 64);
  v150 = v70 + 64;
  v72 = 1 << *(_BYTE *)(v70 + 32);
  if (v72 < 64)
    v73 = ~(-1 << v72);
  else
    v73 = -1;
  v74 = v73 & v71;
  v151 = (unint64_t)(v72 + 63) >> 6;
  v156 = v70;
  swift_bridgeObjectRetain_n();
  v75 = 0;
  v76 = v159;
  v77 = v158;
  v78 = v171;
  v79 = (uint64_t)v157;
  if (v74)
  {
LABEL_20:
    v169 = (char *)((v74 - 1) & v74);
    v170 = v75;
    v80 = __clz(__rbit64(v74)) | ((_QWORD)v75 << 6);
    goto LABEL_36;
  }
  while (1)
  {
    v81 = __OFADD__(v75, 1);
    v82 = (int64_t)(v75 + 1);
    if (v81)
    {
      __break(1u);
      goto LABEL_59;
    }
    if (v82 >= v151)
      goto LABEL_49;
    v83 = *(_QWORD *)(v150 + 8 * v82);
    if (!v83)
    {
      v84 = v82 + 1;
      if (v82 + 1 >= v151)
        goto LABEL_49;
      v83 = *(_QWORD *)(v150 + 8 * v84);
      if (v83)
        goto LABEL_34;
      v84 = v82 + 2;
      if (v82 + 2 >= v151)
        goto LABEL_49;
      v83 = *(_QWORD *)(v150 + 8 * v84);
      if (v83)
        goto LABEL_34;
      v84 = v82 + 3;
      if (v82 + 3 >= v151)
        goto LABEL_49;
      v83 = *(_QWORD *)(v150 + 8 * v84);
      if (v83)
        goto LABEL_34;
      v84 = v82 + 4;
      if (v82 + 4 >= v151)
        goto LABEL_49;
      v83 = *(_QWORD *)(v150 + 8 * v84);
      if (v83)
        goto LABEL_34;
      v84 = v82 + 5;
      if (v82 + 5 < v151)
      {
        v83 = *(_QWORD *)(v150 + 8 * v84);
        if (v83)
        {
LABEL_34:
          v82 = v84;
          goto LABEL_35;
        }
        while (1)
        {
          v82 = v84 + 1;
          if (__OFADD__(v84, 1))
            break;
          if (v82 >= v151)
            goto LABEL_49;
          v83 = *(_QWORD *)(v150 + 8 * v82);
          ++v84;
          if (v83)
            goto LABEL_35;
        }
LABEL_59:
        __break(1u);
      }
LABEL_49:
      swift_release();
      swift_bridgeObjectRelease();
      v170 = (char *)v178[0];
      v69 = v148;
      v123 = v143;
      sub_2453BA364(v148, v143, type metadata accessor for ReplicatorRecord.ID);
      v124 = v153;
      v125 = *(void (**)(char *, uint64_t, uint64_t))(v145 + 16);
      v126 = v141;
      v125(v144, v69 + *(int *)(v153 + 20), v141);
      v127 = v142;
      sub_2453D02E0(v69 + *(int *)(v124 + 28), v142, (uint64_t *)&unk_25440E420);
      v128 = (objc_class *)type metadata accessor for ReplicationXPCServerParametersRecord(0);
      v129 = (char *)objc_allocWithZone(v128);
      v130 = (uint64_t)&v129[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_expiration];
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v164 + 56))(&v129[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_expiration], 1, 1, v165);
      sub_2453BA364(v123, (uint64_t)&v129[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id], type metadata accessor for ReplicatorRecord.ID);
      v131 = v144;
      v125(&v129[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_version], (uint64_t)v144, v126);
      *(_QWORD *)&v129[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_values] = v170;
      swift_beginAccess();
      v132 = v129;
      sub_2453F7250(v127, v130);
      swift_endAccess();

      v174.receiver = v132;
      v174.super_class = v128;
      objc_msgSendSuper2(&v174, sel_init);
      v133 = v127;
      v41 = v124;
      sub_2453D055C(v133, (uint64_t *)&unk_25440E420);
      (*(void (**)(char *, uint64_t))(v145 + 8))(v131, v126);
      sub_2453BA3A8(v143, type metadata accessor for ReplicatorRecord.ID);
      sub_2453BA3A8(v69, type metadata accessor for ReplicatorRecord);
      sub_245444180();
      sub_2454441B0();
      sub_2454441BC();
      sub_24544418C();
      v68 = v138;
      v67 = (void *)MEMORY[0x24BEE4AF8];
      if (v138 == v140)
      {
        v58 = v177;
        v55 = (void *)v149;
        v56 = v147;
        v57 = v146;
        goto LABEL_12;
      }
      goto LABEL_16;
    }
LABEL_35:
    v169 = (char *)((v83 - 1) & v83);
    v170 = (char *)v82;
    v80 = __clz(__rbit64(v83)) + (v82 << 6);
LABEL_36:
    v85 = *(_QWORD *)(v156 + 56);
    v86 = *(_QWORD *)(*(_QWORD *)(v156 + 48) + 8 * v80);
    v87 = type metadata accessor for ReplicatorRecord.Value(0);
    v88 = v85 + *(_QWORD *)(*(_QWORD *)(v87 - 8) + 72) * v80;
    v89 = v172;
    v90 = v162;
    sub_2453BA364(v88, (uint64_t)&v162[*(int *)(v172 + 48)], type metadata accessor for ReplicatorRecord.Value);
    *v90 = v86;
    sub_2453D0428((uint64_t)v90, (uint64_t)v78, &qword_25440E260);
    v91 = *(int *)(v89 + 48);
    v92 = (uint64_t)v163 + v91;
    v93 = v78;
    v94 = (uint64_t)v78 + v91;
    *v163 = *v93;
    sub_2453BA364(v94, v92, type metadata accessor for ReplicatorRecord.Value);
    sub_2453D02E0(v92 + *(int *)(v87 + 20), v79, &qword_25440E1A0);
    sub_2453BA3A8(v92, type metadata accessor for ReplicatorRecord.Value);
    v95 = v76;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v79, 1, v76) != 1)
      break;
    sub_2453D055C(v79, &qword_25440E1A0);
    v168 = 0;
    v167 = 0;
LABEL_41:
    v104 = *v171;
    v105 = *(int *)(v172 + 48);
    v106 = v161;
    v107 = (_QWORD *)((char *)v161 + v105);
    *v161 = *v171;
    sub_2453BA364(v94, (uint64_t)v106 + v105, type metadata accessor for ReplicatorRecord.Value);
    v108 = *v107;
    v109 = v107[1];
    sub_2453CFFAC(*v107, v109);
    sub_2453BA3A8((uint64_t)v107, type metadata accessor for ReplicatorRecord.Value);
    v166 = (objc_class *)type metadata accessor for ReplicationXPCServerParametersRecordValue();
    v110 = (char *)objc_allocWithZone(v166);
    v111 = (uint64_t *)&v110[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_data];
    *(_OWORD *)&v110[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_data] = v154;
    v112 = (void **)&v110[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_fileHandle];
    *(_QWORD *)&v110[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_fileHandle] = 0;
    v113 = &v110[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_extendedAttributes];
    *(_QWORD *)&v110[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_extendedAttributes] = 0;
    *(_QWORD *)&v110[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_version] = v104;
    swift_beginAccess();
    v115 = *v111;
    v114 = v111[1];
    *v111 = v108;
    v111[1] = v109;
    sub_2453CFFAC(v108, v109);
    v116 = v167;
    v117 = v167;
    v118 = v110;
    sub_2453BDCE4(v115, v114);
    swift_beginAccess();
    v119 = *v112;
    *v112 = v116;
    v120 = v117;

    swift_beginAccess();
    *(_QWORD *)v113 = v168;

    swift_bridgeObjectRelease();
    v176.receiver = v118;
    v176.super_class = v166;
    v121 = objc_msgSendSuper2(&v176, sel_init);

    sub_2453BDCF8(v108, v109);
    v122 = v121;
    MEMORY[0x249533888]();
    if (*(_QWORD *)(((unint64_t)v178[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)(((unint64_t)v178[0] & 0xFFFFFFFFFFFFFF8)
                                                                                            + 0x18) >> 1)
      sub_245443EBC();
    sub_245443EE0();
    sub_245443EB0();

    v78 = v171;
    sub_2453D055C((uint64_t)v171, &qword_25440E260);
    v76 = v159;
    v77 = v158;
    v79 = (uint64_t)v157;
    v75 = v170;
    v74 = (unint64_t)v169;
    if (v169)
      goto LABEL_20;
  }
  v96 = v152;
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 32))(v152, v79, v76);
  v97 = (void *)sub_2454439DC();
  v98 = (void *)objc_opt_self();
  v175 = 0;
  v99 = (char *)objc_msgSend(v98, sel_fileHandleForReadingFromURL_error_, v97, &v175);

  if (!v99)
  {
    v136 = v96;
    v137 = v175;
    sub_2454439B8();

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v136, v95);
    goto LABEL_57;
  }
  v100 = v175;
  v101 = v155;
  v102 = URL.extendedAttributes()();
  if (!v101)
  {
    v103 = v102;
    (*(void (**)(char *, uint64_t))(v77 + 8))(v96, v95);
    v168 = (char *)sub_2453D0838(v103);
    v155 = 0;
    swift_bridgeObjectRelease();
    v167 = v99;
    goto LABEL_41;
  }
  (*(void (**)(char *, uint64_t))(v77 + 8))(v96, v95);

LABEL_57:
  swift_bridgeObjectRelease();
  sub_2453D055C((uint64_t)v171, &qword_25440E260);
  swift_release();
  swift_bridgeObjectRelease();
  sub_2453BA3A8(v148, type metadata accessor for ReplicatorRecord);
  swift_unknownObjectRelease();
  swift_release();
}

uint64_t sub_2453E37FC()
{
  uint64_t v0;
  NSObject *v1;
  Class isa;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _QWORD v16[2];
  _OWORD v17[2];
  _BYTE v18[24];
  uint64_t v19;

  v1 = sub_245443CDC();
  isa = v1[-1].isa;
  MEMORY[0x24BDAC7A8](v1);
  v4 = (_QWORD *)((char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *v4 = v5;
  (*((void (**)(_QWORD *, _QWORD, NSObject *))isa + 13))(v4, *MEMORY[0x24BEE5610], v1);
  v6 = v5;
  LOBYTE(v5) = sub_245443CE8();
  (*((void (**)(_QWORD *, NSObject *))isa + 1))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_20:
    swift_once();
    goto LABEL_15;
  }
  sub_2453ED6F4();
  v7 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_connection);
  if (!v7)
  {
    if (qword_25440EC10 != -1)
      swift_once();
    v8 = sub_245443C04();
    __swift_project_value_buffer(v8, (uint64_t)qword_25440EBF8);
    v1 = sub_245443BEC();
    v9 = sub_245443FF4();
    if (os_log_type_enabled(v1, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_2453B6000, v1, v9, "ReplicatorClient: Failed to establish a connection", v10, 2u);
      MEMORY[0x249534440](v10, -1, -1);
    }
    goto LABEL_18;
  }
  v1 = v7;
  if (-[NSObject remoteTarget](v1, sel_remoteTarget))
  {
    sub_24544409C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  sub_2453D0428((uint64_t)v17, (uint64_t)v18, &qword_25440E7F8);
  if (v19)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25440E570);
    if ((swift_dynamicCast() & 1) != 0)
    {

      return v16[1];
    }
  }
  else
  {
    sub_2453D055C((uint64_t)v18, &qword_25440E7F8);
  }
  if (qword_25440EC10 != -1)
    goto LABEL_20;
LABEL_15:
  v12 = sub_245443C04();
  __swift_project_value_buffer(v12, (uint64_t)qword_25440EBF8);
  v13 = sub_245443BEC();
  v14 = sub_245443FF4();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_2453B6000, v13, v14, "ReplicatorClient: Failed to cast connection to server interface protocol", v15, 2u);
    MEMORY[0x249534440](v15, -1, -1);
  }

LABEL_18:
  return 0;
}

uint64_t sub_2453E3AD4(uint64_t a1, void *a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t result;
  id v16;
  id v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v6 = sub_2453E37FC();
  if (v6)
  {
    v7 = (void *)v6;
    v17 = a2;
    v18 = a3 & 1;
    sub_245443994();
    swift_allocObject();
    swift_bridgeObjectRetain();
    sub_245443988();
    sub_2453F720C();
    v8 = sub_24544397C();
    if (v3)
    {
      result = swift_unexpectedError();
      __break(1u);
    }
    else
    {
      v10 = v8;
      v11 = v9;
      v12 = (void *)sub_245443A6C();
      sub_2453BDCF8(v10, v11);
      swift_bridgeObjectRelease();
      swift_release();
      v17 = 0;
      LOBYTE(v10) = objc_msgSend(v7, sel_removeRecordsWithParameters_error_, v12, &v17);

      if ((v10 & 1) != 0)
      {
        v13 = v17;
      }
      else
      {
        v16 = v17;
        sub_2454439B8();

        swift_willThrow();
      }
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v14 = 3;
    *(_QWORD *)(v14 + 8) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_2453E3C94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, unint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint8_t *v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  BOOL v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t);
  int v72;
  uint64_t v73;
  char *v74;
  char v75;
  void (*v76)(char *, uint64_t);
  _QWORD *v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  char v104;
  unint64_t v105;
  uint64_t v106;
  _BOOL8 v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  _QWORD *v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t result;
  _QWORD *v120;
  unint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  uint64_t v124;
  unint64_t *v125;
  uint64_t v126;
  __int128 v127;
  char *v128;
  char *v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int64_t v151;
  uint64_t v152;
  _QWORD *v153;
  unsigned int (*v154)(uint64_t, uint64_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  int64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  char v167;
  _QWORD *v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;

  LOBYTE(v7) = a5;
  v133 = a4;
  v132 = a3;
  v11 = type metadata accessor for ReplicatorRecord(0);
  v162 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v164 = (uint64_t)&v125 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v163 = (uint64_t)&v125 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464528);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v161 = (char *)&v125 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v160 = (uint64_t)&v125 - v18;
  v149 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E540);
  MEMORY[0x24BDAC7A8](v149);
  v152 = (uint64_t)&v125 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_245443B14();
  v148 = *(_QWORD *)(v156 - 8);
  v20 = MEMORY[0x24BDAC7A8](v156);
  v143 = (char *)&v125 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v129 = (char *)&v125 - v22;
  v23 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v157 = (char *)&v125 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v139 = (uint64_t)&v125 - v26;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464538);
  MEMORY[0x24BDAC7A8](v27);
  v140 = (uint64_t)&v125 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = type metadata accessor for ReplicatorRecord.ID(0);
  v141 = *(_QWORD *)(v146 - 8);
  v29 = MEMORY[0x24BDAC7A8](v146);
  v165 = (unint64_t **)((char *)&v125 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = MEMORY[0x24BDAC7A8](v29);
  v33 = (unint64_t **)((char *)&v125 - v32);
  v34 = MEMORY[0x24BDAC7A8](v31);
  v145 = (uint64_t)&v125 - v35;
  MEMORY[0x24BDAC7A8](v34);
  v37 = (unint64_t **)((char *)&v125 - v36);
  v131 = a1;
  v135 = (void *)sub_2453E37FC();
  if (!v135)
  {
    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v118 = 3;
    *(_QWORD *)(v118 + 8) = 0;
    return swift_willThrow();
  }
  v125 = a6;
  v142 = v6;
  v172 = MEMORY[0x24BEE4B00];
  v38 = swift_bridgeObjectRetain();
  v39 = sub_2454159F0(v38);
  v126 = a2;
  swift_bridgeObjectRelease();
  v171 = v39;
  v169 = 0;
  v170 = MEMORY[0x24BEE4AF8];
  v168 = 0;
  if (qword_25440EC10 != -1)
    goto LABEL_108;
LABEL_3:
  v40 = sub_245443C04();
  v134 = __swift_project_value_buffer(v40, (uint64_t)qword_25440EBF8);
  v41 = sub_245443BEC();
  v42 = sub_245444000();
  v43 = os_log_type_enabled(v41, v42);
  v44 = v146;
  v153 = v37;
  if (v43)
  {
    v45 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v45 = 0;
    _os_log_impl(&dword_2453B6000, v41, v42, "Begin fetching records in batches", v45, 2u);
    v46 = v45;
    v37 = v153;
    MEMORY[0x249534440](v46, -1, -1);
  }

  v138 = *(_QWORD *)(v126 + 16);
  if (v138)
  {
    v130 = v7 & 1;
    v47 = v141;
    v136 = (*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
    v137 = v126 + v136;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    swift_beginAccess();
    v7 = 0;
    v128 = &v167;
    v48 = *(_QWORD *)(v47 + 72);
    *(_QWORD *)&v49 = 134349824;
    v127 = v49;
    v150 = v48;
    while (1)
    {
      sub_2453BA364(v137 + v48 * v7, (uint64_t)v37, type metadata accessor for ReplicatorRecord.ID);
      swift_bridgeObjectRetain();
      v50 = sub_245443DFC();
      swift_bridgeObjectRelease();
      if (__OFADD__(v169, v50))
      {
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        swift_once();
        goto LABEL_3;
      }
      v144 = v7;
      v169 += v50;
      sub_2453BA364((uint64_t)v37, v145, type metadata accessor for ReplicatorRecord.ID);
      swift_beginAccess();
      v51 = v170;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v51 = sub_2453F166C(0, *(_QWORD *)(v51 + 16) + 1, 1, v51, &qword_25440E250, type metadata accessor for ReplicatorRecord.ID);
      v53 = *(_QWORD *)(v51 + 16);
      v52 = *(_QWORD *)(v51 + 24);
      if (v53 >= v52 >> 1)
        v51 = sub_2453F166C(v52 > 1, v53 + 1, 1, v51, &qword_25440E250, type metadata accessor for ReplicatorRecord.ID);
      *(_QWORD *)(v51 + 16) = v53 + 1;
      sub_2453D062C(v145, v51 + v136 + v53 * v48, type metadata accessor for ReplicatorRecord.ID);
      v170 = v51;
      swift_endAccess();
      swift_beginAccess();
      v54 = v171;
      sub_245444414();
      swift_bridgeObjectRetain();
      v159 = v54;
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      v155 = (uint64_t)v37 + *(int *)(v44 + 28);
      v55 = v139;
      sub_2453BA364(v155, v139, type metadata accessor for ReplicatorRecord.ID.Ownership);
      v56 = v148;
      v154 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v148 + 48);
      v57 = v156;
      if (v154(v55, 1, v156) == 1)
      {
        sub_245444420();
      }
      else
      {
        v58 = v129;
        (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v129, v55, v57);
        sub_245444420();
        sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
        sub_245443D60();
        v59 = v58;
        v48 = v150;
        (*(void (**)(char *, uint64_t))(v56 + 8))(v59, v57);
      }
      v147 = (_QWORD *)((char *)v37 + *(int *)(v44 + 32));
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      v60 = sub_245444444();
      v61 = -1 << *(_BYTE *)(v159 + 32);
      v62 = v60 & ~v61;
      v63 = v159 + 56;
      if (((*(_QWORD *)(v159 + 56 + ((v62 >> 3) & 0xFFFFFFFFFFFFF8)) >> v62) & 1) == 0)
      {
LABEL_47:
        swift_bridgeObjectRelease();
        v78 = v140;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v141 + 56))(v140, 1, 1, v44);
        v7 = (uint64_t)v161;
        goto LABEL_48;
      }
      v158 = ~v61;
      v64 = v152;
      v151 = v159 + 56;
      while (1)
      {
        v65 = v62 * v48;
        sub_2453BA364(*(_QWORD *)(v159 + 48) + v62 * v48, (uint64_t)v33, type metadata accessor for ReplicatorRecord.ID);
        v66 = *v33 == *v37 && v33[1] == v37[1];
        if (!v66 && (sub_245444390() & 1) == 0)
          goto LABEL_21;
        v67 = v33[2] == v37[2] && v33[3] == v37[3];
        if (!v67 && (sub_245444390() & 1) == 0 || (v33[4] != v37[4] || v33[5] != v37[5]) && (sub_245444390() & 1) == 0)
          goto LABEL_21;
        v68 = v44;
        v69 = v64 + *(int *)(v149 + 48);
        sub_2453BA364((uint64_t)v33 + *(int *)(v44 + 28), v64, type metadata accessor for ReplicatorRecord.ID.Ownership);
        sub_2453BA364(v155, v69, type metadata accessor for ReplicatorRecord.ID.Ownership);
        v70 = v156;
        v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v154;
        if (v154(v64, 1, v156) == 1)
        {
          v72 = v71(v69, 1, v70);
          v48 = v150;
          v44 = v68;
          if (v72 == 1)
            goto LABEL_43;
          goto LABEL_40;
        }
        sub_2453BA364(v64, (uint64_t)v157, type metadata accessor for ReplicatorRecord.ID.Ownership);
        if (v71(v69, 1, v70) != 1)
          break;
        (*(void (**)(char *, uint64_t))(v148 + 8))(v157, v70);
        v48 = v150;
        v44 = v68;
LABEL_40:
        v64 = v152;
        sub_2453D055C(v152, (uint64_t *)&unk_25440E540);
LABEL_41:
        v37 = v153;
        v63 = v151;
LABEL_21:
        sub_2453BA3A8((uint64_t)v33, type metadata accessor for ReplicatorRecord.ID);
        v62 = (v62 + 1) & v158;
        if (((*(_QWORD *)(v63 + ((v62 >> 3) & 0xFFFFFFFFFFFFF8)) >> v62) & 1) == 0)
          goto LABEL_47;
      }
      v73 = v148;
      v74 = v143;
      (*(void (**)(char *, uint64_t, uint64_t))(v148 + 32))(v143, v69, v70);
      v75 = sub_245443AF0();
      v76 = *(void (**)(char *, uint64_t))(v73 + 8);
      v44 = v146;
      v76(v74, v70);
      v76(v157, v70);
      v48 = v150;
      if ((v75 & 1) == 0)
      {
        v64 = v152;
        sub_2453BA3A8(v152, type metadata accessor for ReplicatorRecord.ID.Ownership);
        goto LABEL_41;
      }
LABEL_43:
      v64 = v152;
      sub_2453BA3A8(v152, type metadata accessor for ReplicatorRecord.ID.Ownership);
      v77 = (_QWORD *)((char *)v33 + *(int *)(v44 + 32));
      v37 = v153;
      v63 = v151;
      if ((*v77 != *v147 || v77[1] != v147[1]) && (sub_245444390() & 1) == 0)
        goto LABEL_21;
      sub_2453BA3A8((uint64_t)v33, type metadata accessor for ReplicatorRecord.ID);
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v116 = v171;
      v166 = (_QWORD *)v171;
      v171 = 0x8000000000000000;
      v7 = (uint64_t)v161;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_245427618();
        v116 = (unint64_t)v166;
      }
      v117 = *(_QWORD *)(v116 + 48) + v65;
      v78 = v140;
      sub_2453D062C(v117, v140, type metadata accessor for ReplicatorRecord.ID);
      sub_245429438(v62);
      v171 = (unint64_t)v166;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v141 + 56))(v78, 0, 1, v44);
LABEL_48:
      swift_endAccess();
      sub_2453D055C(v78, &qword_257464538);
      if (v169 <= 102400 && *(_QWORD *)(v171 + 16))
      {
        sub_2453BA3A8((uint64_t)v37, type metadata accessor for ReplicatorRecord.ID);
        goto LABEL_9;
      }
      v79 = sub_245443BEC();
      v80 = sub_245444000();
      if (os_log_type_enabled(v79, v80))
      {
        v81 = swift_slowAlloc();
        *(_DWORD *)v81 = v127;
        v166 = v168;
        sub_245444078();
        *(_WORD *)(v81 + 12) = 2050;
        v166 = (_QWORD *)v169;
        sub_245444078();
        *(_WORD *)(v81 + 22) = 2050;
        v166 = *(_QWORD **)(v170 + 16);
        sub_245444078();
        *(_WORD *)(v81 + 32) = 2048;
        v166 = *(_QWORD **)(v171 + 16);
        sub_245444078();
        _os_log_impl(&dword_2453B6000, v79, v80, "Fetching batch %{public}ld with ID size %{public}ld and %{public}ld IDs; %ld IDs remaining",
          (uint8_t *)v81,
          0x2Au);
        MEMORY[0x249534440](v81, -1, -1);
      }

      v82 = swift_bridgeObjectRetain();
      v83 = v142;
      v84 = sub_2453E510C(v82, v132, v133, v130, v135);
      v142 = v83;
      if (v83)
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        sub_2453BA3A8((uint64_t)v153, type metadata accessor for ReplicatorRecord.ID);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v37 = (_QWORD *)v84;
      swift_bridgeObjectRelease();
      v85 = 0;
      v86 = v37[8];
      v158 = (uint64_t)(v37 + 8);
      v87 = 1 << *((_BYTE *)v37 + 32);
      if (v87 < 64)
        v88 = ~(-1 << v87);
      else
        v88 = -1;
      v89 = v88 & v86;
      v159 = (unint64_t)(v87 + 63) >> 6;
      v155 = v159 - 1;
      while (2)
      {
        if (v89)
        {
          v90 = __clz(__rbit64(v89));
          v89 &= v89 - 1;
          v91 = v90 | (v85 << 6);
          goto LABEL_60;
        }
        v94 = v85 + 1;
        if (__OFADD__(v85, 1))
          goto LABEL_104;
        if (v94 >= v159)
          goto LABEL_78;
        v95 = *(_QWORD *)(v158 + 8 * v94);
        if (!v95)
        {
          v96 = v85 + 2;
          ++v85;
          if (v94 + 1 < v159)
          {
            v95 = *(_QWORD *)(v158 + 8 * v96);
            if (v95)
            {
LABEL_67:
              v94 = v96;
              goto LABEL_64;
            }
            v85 = v94 + 1;
            if (v94 + 2 < v159)
            {
              v95 = *(_QWORD *)(v158 + 8 * (v94 + 2));
              if (v95)
              {
                v94 += 2;
                goto LABEL_64;
              }
              v96 = v94 + 3;
              v85 = v94 + 2;
              if (v94 + 3 < v159)
              {
                v95 = *(_QWORD *)(v158 + 8 * v96);
                if (!v95)
                {
                  while (1)
                  {
                    v94 = v96 + 1;
                    if (__OFADD__(v96, 1))
                      goto LABEL_107;
                    if (v94 >= v159)
                    {
                      v85 = v155;
                      goto LABEL_78;
                    }
                    v95 = *(_QWORD *)(v158 + 8 * v94);
                    ++v96;
                    if (v95)
                      goto LABEL_64;
                  }
                }
                goto LABEL_67;
              }
            }
          }
LABEL_78:
          v97 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464520);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56))(v7, 1, 1, v97);
          v89 = 0;
          goto LABEL_79;
        }
LABEL_64:
        v89 = (v95 - 1) & v95;
        v91 = __clz(__rbit64(v95)) + (v94 << 6);
        v85 = v94;
LABEL_60:
        sub_2453BA364(v37[6] + v91 * v48, v7, type metadata accessor for ReplicatorRecord.ID);
        v92 = v37[7] + *(_QWORD *)(v162 + 72) * v91;
        v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464520);
        sub_2453BA364(v92, v7 + *(int *)(v93 + 48), type metadata accessor for ReplicatorRecord);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v7, 0, 1, v93);
LABEL_79:
        v98 = v160;
        sub_2453D0428(v7, v160, &qword_257464528);
        v99 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464520);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 48))(v98, 1, v99) != 1)
        {
          v100 = v98 + *(int *)(v99 + 48);
          v101 = v163;
          sub_2453D062C(v100, v163, type metadata accessor for ReplicatorRecord);
          v7 = (uint64_t)v165;
          sub_2453D062C(v98, (uint64_t)v165, type metadata accessor for ReplicatorRecord.ID);
          sub_2453BA364(v101, v164, type metadata accessor for ReplicatorRecord);
          v102 = v172;
          v103 = swift_isUniquelyReferenced_nonNull_native();
          v166 = (_QWORD *)v102;
          v172 = 0x8000000000000000;
          v105 = sub_2453C656C((_QWORD *)v7);
          v106 = *(_QWORD *)(v102 + 16);
          v107 = (v104 & 1) == 0;
          v108 = v106 + v107;
          if (__OFADD__(v106, v107))
          {
            __break(1u);
LABEL_103:
            __break(1u);
LABEL_104:
            __break(1u);
            goto LABEL_105;
          }
          LOBYTE(v7) = v104;
          if (*(_QWORD *)(v102 + 24) >= v108)
          {
            if ((v103 & 1) == 0)
              sub_2453CAA58();
          }
          else
          {
            sub_2453C7704(v108, v103);
            v109 = sub_2453C656C(v165);
            if ((v7 & 1) != (v110 & 1))
            {
              result = sub_2454443A8();
              __break(1u);
              return result;
            }
            v105 = v109;
          }
          v111 = v166;
          if ((v7 & 1) != 0)
          {
            sub_2453F70E0(v164, v166[7] + *(_QWORD *)(v162 + 72) * v105);
          }
          else
          {
            v166[(v105 >> 6) + 8] |= 1 << v105;
            sub_2453BA364((uint64_t)v165, v111[6] + v105 * v48, type metadata accessor for ReplicatorRecord.ID);
            sub_2453D062C(v164, v111[7] + *(_QWORD *)(v162 + 72) * v105, type metadata accessor for ReplicatorRecord);
            v112 = v111[2];
            v113 = __OFADD__(v112, 1);
            v114 = v112 + 1;
            if (v113)
              goto LABEL_103;
            v111[2] = v114;
          }
          v172 = (unint64_t)v111;
          swift_bridgeObjectRelease();
          sub_2453BA3A8((uint64_t)v165, type metadata accessor for ReplicatorRecord.ID);
          sub_2453BA3A8(v163, type metadata accessor for ReplicatorRecord);
          v7 = (uint64_t)v161;
          continue;
        }
        break;
      }
      swift_release();
      v170 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRelease();
      v37 = v153;
      sub_2453BA3A8((uint64_t)v153, type metadata accessor for ReplicatorRecord.ID);
      v169 = 0;
      if (__OFADD__(v168, 1))
        goto LABEL_106;
      v168 = (_QWORD *)((char *)v168 + 1);
      v44 = v146;
LABEL_9:
      v7 = v144 + 1;
      if (v144 + 1 == v138)
      {
        swift_bridgeObjectRelease();
        v121 = v172;
        v120 = v168;
        goto LABEL_97;
      }
    }
  }
  v120 = 0;
  v121 = MEMORY[0x24BEE4B00];
LABEL_97:
  swift_bridgeObjectRetain();
  v122 = sub_245443BEC();
  v123 = sub_245444000();
  if (os_log_type_enabled(v122, v123))
  {
    v124 = swift_slowAlloc();
    *(_DWORD *)v124 = 134349312;
    v166 = *(_QWORD **)(v121 + 16);
    sub_245444078();
    swift_bridgeObjectRelease();
    *(_WORD *)(v124 + 12) = 2050;
    v166 = v120;
    sub_245444078();
    _os_log_impl(&dword_2453B6000, v122, v123, "End fetching records in batches; fetched %{public}ld in %{public}ld batches",
      (uint8_t *)v124,
      0x16u);
    MEMORY[0x249534440](v124, -1, -1);

    swift_unknownObjectRelease();
  }
  else
  {

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  *v125 = v172;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2453E510C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  __int128 v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  int v66;
  uint64_t (*v67)(uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t (*v72)(uint64_t);
  uint64_t *v73;
  id v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  char *v86;
  int v87;
  char *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  BOOL v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(uint64_t);
  uint64_t (*v101)(uint64_t, uint64_t, uint64_t);
  int v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char v106;
  void (*v107)(char *, uint64_t);
  char *v108;
  _QWORD *v109;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v111;
  id v112;
  char *v113;
  NSObject *v114;
  NSObject *v115;
  uint64_t v116;
  void *v117;
  unint64_t v118;
  void *v119;
  uint64_t (*v120)(uint64_t);
  uint64_t v121;
  void *v122;
  os_log_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t (*v127)(uint64_t);
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int64_t v138;
  unint64_t v139;
  int64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  char v149;
  unint64_t v150;
  uint64_t v151;
  _BOOL8 v152;
  uint64_t v153;
  char v154;
  unint64_t v155;
  char v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  BOOL v160;
  uint64_t v161;
  _QWORD *v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t (*v170)(uint64_t, uint64_t, uint64_t);
  _QWORD *v171;
  uint64_t v172;
  BOOL v173;
  BOOL v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  char *v179;
  int v180;
  uint64_t v181;
  char *v182;
  char v183;
  void (*v184)(char *, uint64_t);
  char *v185;
  char *v186;
  char v187;
  _QWORD *v188;
  uint64_t v189;
  _QWORD *v190;
  id v191;
  uint64_t result;
  __int128 v193;
  _BYTE *v194;
  int v195;
  uint64_t v196;
  uint64_t ObjectType;
  uint64_t v198;
  uint64_t v199;
  id v200;
  uint64_t v201;
  NSObject *v202;
  uint64_t v203;
  uint64_t (*v204)(uint64_t);
  uint64_t v205;
  char *v206;
  char *v207;
  int64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  char *v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t (*v232)(uint64_t, uint64_t, uint64_t);
  char *v233;
  uint64_t v234;
  char *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  unint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  _QWORD *v244;
  char *v245;
  _QWORD *v246;
  id v247;
  _BYTE v248[8];
  uint64_t v249;
  char v250;
  uint64_t v251;

  v7 = v6;
  v8 = v5;
  v200 = a5;
  LODWORD(v242) = a4;
  v199 = a3;
  v203 = a2;
  v251 = *MEMORY[0x24BDAC8D0];
  ObjectType = swift_getObjectType();
  v10 = type metadata accessor for ReplicatorRecord(0);
  v223 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v214 = (uint64_t)&v193 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464528);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v217 = (char *)&v193 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v216 = (uint64_t)&v193 - v15;
  v238 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E540);
  v16 = MEMORY[0x24BDAC7A8](v238);
  v18 = (char *)&v193 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v229 = (uint64_t)&v193 - v19;
  v240 = sub_245443B14();
  v234 = *(_QWORD *)(v240 - 8);
  v20 = MEMORY[0x24BDAC7A8](v240);
  v222 = (char *)&v193 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v218 = (char *)&v193 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v210 = (char *)&v193 - v24;
  v25 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v237 = (uint64_t)&v193 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v26);
  v212 = (uint64_t)&v193 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v32 = (uint64_t)&v193 - v31;
  MEMORY[0x24BDAC7A8](v30);
  v206 = (char *)&v193 - v33;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464538);
  v35 = MEMORY[0x24BDAC7A8](v34);
  v211 = (uint64_t)&v193 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v35);
  v205 = (uint64_t)&v193 - v37;
  v243 = type metadata accessor for ReplicatorRecord.ID(0);
  v231 = *(_QWORD *)(v243 - 8);
  v38 = MEMORY[0x24BDAC7A8](v243);
  v236 = (char *)&v193 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = MEMORY[0x24BDAC7A8](v38);
  v213 = (_QWORD *)((char *)&v193 - v41);
  v42 = MEMORY[0x24BDAC7A8](v40);
  v244 = (_QWORD *)((char *)&v193 - v43);
  v44 = MEMORY[0x24BDAC7A8](v42);
  v228 = (char *)&v193 - v45;
  v46 = MEMORY[0x24BDAC7A8](v44);
  v220 = (uint64_t)&v193 - v47;
  MEMORY[0x24BDAC7A8](v46);
  v233 = (char *)&v193 - v48;
  v49 = sub_245443CDC();
  v50 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v52 = (_QWORD *)((char *)&v193 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0));
  v198 = v8;
  v53 = *(void **)(v8 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *v52 = v53;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v50 + 104))(v52, *MEMORY[0x24BEE5610], v49);
  v54 = v53;
  LOBYTE(v53) = sub_245443CE8();
  (*(void (**)(_QWORD *, uint64_t))(v50 + 8))(v52, v49);
  if ((v53 & 1) == 0)
    goto LABEL_149;
  v55 = swift_bridgeObjectRetain();
  v56 = sub_2454159F0(v55);
  swift_bridgeObjectRelease();
  v245 = 0;
  v246 = (_QWORD *)v56;
  v50 = a1;
  if (qword_25440EC10 != -1)
LABEL_150:
    swift_once();
  v57 = sub_245443C04();
  v58 = __swift_project_value_buffer(v57, (uint64_t)qword_25440EBF8);
  swift_bridgeObjectRetain();
  v196 = v58;
  v59 = sub_245443BEC();
  v60 = sub_245444000();
  if (os_log_type_enabled(v59, v60))
  {
    v61 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v61 = 134349056;
    v247 = *(id *)(v50 + 16);
    sub_245444078();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2453B6000, v59, v60, "Begin fetch for %{public}ld records", v61, 0xCu);
    MEMORY[0x249534440](v61, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  v204 = v7;
  swift_beginAccess();
  if (v246[2])
  {
    v221 = MEMORY[0x24BEE4AF8];
    v194 = v248;
    v195 = v242 & 1;
    *(_QWORD *)&v62 = 134350080;
    v193 = v62;
    v7 = type metadata accessor for ReplicatorRecord.ID.Ownership;
    v224 = (_QWORD *)MEMORY[0x24BEE4B00];
    v209 = v50;
    v227 = v18;
    v226 = v32;
    while (1)
    {
      v63 = swift_bridgeObjectRetain();
      v64 = (void *)sub_2453F256C(v63, &qword_25440E250, type metadata accessor for ReplicatorRecord.ID);
      swift_bridgeObjectRelease();
      v65 = sub_245443A24();
      v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 48))(v203, 1, v65);
      v247 = v64;
      v248[0] = 1;
      v248[1] = v66 != 1;
      v249 = v199;
      v250 = v195;
      sub_245443994();
      swift_allocObject();
      sub_245443988();
      sub_2453F7004();
      v67 = v204;
      v68 = sub_24544397C();
      v202 = v67;
      if (v67)
      {
LABEL_152:
        result = swift_unexpectedError();
        __break(1u);
        return result;
      }
      v70 = v68;
      v32 = v69;
      v71 = (void *)sub_245443A6C();
      sub_2453BDCF8(v70, v32);
      swift_release();
      swift_release();
      v247 = 0;
      v72 = (uint64_t (*)(uint64_t))objc_msgSend(v200, sel_recordsWithParameters_error_, v71, &v247);

      if (!v72)
      {
        v191 = v247;
        v190 = v224;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_2454439B8();

        swift_willThrow();
        swift_bridgeObjectRelease();
        return (uint64_t)v190;
      }
      v201 = OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_failedRecordIDs;
      v73 = *(uint64_t **)((char *)v72
                        + OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_failedRecordIDs);
      v219 = v73[2];
      v204 = v72;
      if (v219)
      {
        v208 = (*(unsigned __int8 *)(v231 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v231 + 80);
        v207 = (char *)v73 + v208;
        v74 = v247;
        swift_bridgeObjectRetain();
        v75 = 0;
        v76 = v233;
        v215 = v73;
        while (1)
        {
          if (v75 >= v73[2])
          {
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
            goto LABEL_147;
          }
          v78 = *(_QWORD *)(v231 + 72);
          v225 = v75;
          v241 = v78;
          sub_2453BA364((uint64_t)&v207[v78 * v75], (uint64_t)v76, type metadata accessor for ReplicatorRecord.ID);
          sub_2453BA364((uint64_t)v76, v220, type metadata accessor for ReplicatorRecord.ID);
          v79 = v221;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v79 = sub_2453F166C(0, *(_QWORD *)(v79 + 16) + 1, 1, v79, &qword_25440E250, type metadata accessor for ReplicatorRecord.ID);
          v80 = v240;
          v81 = v234;
          v82 = (uint64_t)v206;
          v32 = (uint64_t)v228;
          v84 = *(_QWORD *)(v79 + 16);
          v83 = *(_QWORD *)(v79 + 24);
          if (v84 >= v83 >> 1)
            v79 = sub_2453F166C(v83 > 1, v84 + 1, 1, v79, &qword_25440E250, type metadata accessor for ReplicatorRecord.ID);
          *(_QWORD *)(v79 + 16) = v84 + 1;
          sub_2453D062C(v220, v79 + v208 + v84 * v241, type metadata accessor for ReplicatorRecord.ID);
          swift_beginAccess();
          v85 = v246;
          sub_245444414();
          v86 = v233;
          v242 = v85;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_245443DF0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          sub_245443DF0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          sub_245443DF0();
          swift_bridgeObjectRelease();
          v235 = &v86[*(int *)(v243 + 28)];
          sub_2453BA364((uint64_t)v235, v82, v7);
          v232 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
          v87 = v232(v82, 1, v80);
          v221 = v79;
          if (v87 == 1)
          {
            sub_245444420();
          }
          else
          {
            v88 = v210;
            (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(v210, v82, v80);
            sub_245444420();
            sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
            sub_245443D60();
            (*(void (**)(char *, uint64_t))(v81 + 8))(v88, v80);
          }
          v89 = v233;
          v230 = &v233[*(int *)(v243 + 32)];
          swift_bridgeObjectRetain();
          sub_245443DF0();
          swift_bridgeObjectRelease();
          v90 = sub_245444444();
          v76 = v89;
          v91 = -1 << *((_BYTE *)v242 + 32);
          v92 = v90 & ~v91;
          v239 = v242 + 7;
          v93 = v229;
          if (((*(_QWORD *)((char *)v242 + ((v92 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v92) & 1) == 0)
          {
LABEL_13:
            swift_bridgeObjectRelease();
            v77 = v205;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v231 + 56))(v205, 1, 1, v243);
            v18 = v227;
            goto LABEL_14;
          }
          v94 = ~v91;
          while (1)
          {
            v95 = v92 * v241;
            sub_2453BA364(v242[6] + v92 * v241, v32, type metadata accessor for ReplicatorRecord.ID);
            v96 = *(_QWORD *)v32 == *v76 && *(_QWORD *)(v32 + 8) == v76[1];
            if (!v96 && (sub_245444390() & 1) == 0)
              goto LABEL_26;
            v97 = *(_QWORD *)(v32 + 16) == v76[2] && *(_QWORD *)(v32 + 24) == v76[3];
            if (!v97 && (sub_245444390() & 1) == 0
              || (*(_QWORD *)(v32 + 32) != v76[4] || *(_QWORD *)(v32 + 40) != v76[5]) && (sub_245444390() & 1) == 0)
            {
              goto LABEL_26;
            }
            v98 = v93 + *(int *)(v238 + 48);
            sub_2453BA364(v32 + *(int *)(v243 + 28), v93, v7);
            sub_2453BA364((uint64_t)v235, v98, v7);
            v99 = v240;
            v100 = v7;
            v101 = v232;
            if (v232(v93, 1, v240) == 1)
            {
              v102 = v101(v98, 1, v99);
              v7 = v100;
              if (v102 == 1)
                goto LABEL_48;
              goto LABEL_45;
            }
            v103 = v226;
            sub_2453BA364(v93, v226, v100);
            if (v101(v98, 1, v99) != 1)
              break;
            (*(void (**)(uint64_t, uint64_t))(v234 + 8))(v103, v99);
            v32 = (uint64_t)v228;
            v7 = v100;
            v93 = v229;
LABEL_45:
            sub_2453D055C(v93, (uint64_t *)&unk_25440E540);
LABEL_46:
            v76 = v233;
LABEL_26:
            sub_2453BA3A8(v32, type metadata accessor for ReplicatorRecord.ID);
            v92 = (v92 + 1) & v94;
            if (((*(_QWORD *)((char *)v239 + ((v92 >> 3) & 0xFFFFFFFFFFFFF8)) >> v92) & 1) == 0)
              goto LABEL_13;
          }
          v104 = v234;
          v105 = v218;
          (*(void (**)(char *, uint64_t, uint64_t))(v234 + 32))(v218, v98, v99);
          v106 = sub_245443AF0();
          v107 = *(void (**)(char *, uint64_t))(v104 + 8);
          v108 = v105;
          v7 = type metadata accessor for ReplicatorRecord.ID.Ownership;
          v107(v108, v99);
          v107((char *)v103, v99);
          v93 = v229;
          v32 = (uint64_t)v228;
          if ((v106 & 1) == 0)
          {
            sub_2453BA3A8(v229, type metadata accessor for ReplicatorRecord.ID.Ownership);
            goto LABEL_46;
          }
LABEL_48:
          sub_2453BA3A8(v93, v7);
          v109 = (_QWORD *)(v32 + *(int *)(v243 + 32));
          v76 = v233;
          if ((*v109 != *(_QWORD *)v230 || v109[1] != *((_QWORD *)v230 + 1)) && (sub_245444390() & 1) == 0)
            goto LABEL_26;
          sub_2453BA3A8(v32, type metadata accessor for ReplicatorRecord.ID);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v111 = v246;
          v247 = v246;
          v246 = (_QWORD *)0x8000000000000000;
          v18 = v227;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_245427618();
            v111 = v247;
          }
          v77 = v205;
          sub_2453D062C(v111[6] + v95, v205, type metadata accessor for ReplicatorRecord.ID);
          sub_245429438(v92);
          v246 = v247;
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v231 + 56))(v77, 0, 1, v243);
          v76 = v233;
LABEL_14:
          v75 = v225 + 1;
          swift_endAccess();
          sub_2453D055C(v77, &qword_257464538);
          sub_2453BA3A8((uint64_t)v76, type metadata accessor for ReplicatorRecord.ID);
          v50 = v209;
          v73 = v215;
          if (v75 == v219)
          {
            swift_bridgeObjectRelease();
            v72 = v204;
            goto LABEL_57;
          }
        }
      }
      v112 = v247;
LABEL_57:
      swift_beginAccess();
      if (__OFADD__(v245, 1))
      {
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
        goto LABEL_150;
      }
      ++v245;
      v113 = v72;
      swift_bridgeObjectRetain_n();
      v114 = v113;
      v115 = sub_245443BEC();
      LODWORD(v242) = sub_245444000();
      if (os_log_type_enabled(v115, (os_log_type_t)v242))
      {
        v241 = (unint64_t)v115;
        v116 = swift_slowAlloc();
        *(_DWORD *)v116 = v193;
        v117 = *(void **)(v50 + 16);
        swift_bridgeObjectRelease();
        v247 = v117;
        sub_245444078();
        swift_bridgeObjectRelease();
        *(_WORD *)(v116 + 12) = 2050;
        v118 = *(unint64_t *)((char *)&v114->isa
                                   + OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_records);
        if (v118 >> 62)
        {
          swift_bridgeObjectRetain();
          v119 = (void *)sub_245444204();

          swift_bridgeObjectRelease();
        }
        else
        {
          v119 = *(void **)((v118 & 0xFFFFFFFFFFFFF8) + 0x10);

        }
        v120 = (uint64_t (*)(uint64_t))v202;
        v121 = v201;
        v247 = v119;
        v32 = (uint64_t)v194;
        sub_245444078();

        *(_WORD *)(v116 + 22) = 2050;
        v122 = *(void **)(*(_QWORD *)((char *)v204 + v121) + 16);

        v247 = v122;
        sub_245444078();

        *(_WORD *)(v116 + 32) = 2050;
        v247 = (id)v246[2];
        sub_245444078();
        *(_WORD *)(v116 + 42) = 2050;
        v247 = v245;
        sub_245444078();
        v123 = (os_log_t)v241;
        _os_log_impl(&dword_2453B6000, (os_log_t)v241, (os_log_type_t)v242, "Requested %{public}ld records; fetched %{public}ld; failed %{public}ld; remaining %{public}ld; fetch count %{public}ld",
          (uint8_t *)v116,
          0x34u);
        MEMORY[0x249534440](v116, -1, -1);
        v18 = v227;
        v7 = type metadata accessor for ReplicatorRecord.ID.Ownership;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        v123 = v114;
        v120 = (uint64_t (*)(uint64_t))v202;
      }

      v202 = v114;
      v124 = *(unint64_t *)((char *)&v114->isa
                                 + OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_records);
      MEMORY[0x24BDAC7A8](v125);
      v126 = v203;
      *((_QWORD *)&v193 - 4) = v198;
      *((_QWORD *)&v193 - 3) = v126;
      *((_QWORD *)&v193 - 2) = ObjectType;
      swift_bridgeObjectRetain();
      v127 = v120;
      v128 = (uint64_t *)sub_2453D0B98(MEMORY[0x24BEE4B00], (void (*)(void **, id *))sub_2453F7124, (uint64_t)(&v193 - 3), v124);
      v50 = (uint64_t)v217;
      v204 = v127;
      if (v127)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v190 = v224;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (uint64_t)v190;
      }
      v129 = v128;
      swift_bridgeObjectRelease();
      v219 = 0;
      v130 = v129[8];
      v207 = (char *)(v129 + 8);
      v131 = 1 << *((_BYTE *)v129 + 32);
      v132 = v131 < 64 ? ~(-1 << v131) : -1;
      v133 = v132 & v130;
      v208 = (unint64_t)(v131 + 63) >> 6;
      v201 = v208 - 1;
      v215 = v129;
LABEL_70:
      if (v133)
        break;
      v138 = v219 + 1;
      if (__OFADD__(v219, 1))
        goto LABEL_146;
      if (v138 < v208)
      {
        v139 = *(_QWORD *)&v207[8 * v138];
        if (v139)
          goto LABEL_76;
        v140 = v219 + 2;
        ++v219;
        if (v138 + 1 < v208)
        {
          v139 = *(_QWORD *)&v207[8 * v140];
          if (v139)
            goto LABEL_79;
          v219 = v138 + 1;
          if (v138 + 2 < v208)
          {
            v139 = *(_QWORD *)&v207[8 * v138 + 16];
            if (v139)
            {
              v138 += 2;
              goto LABEL_76;
            }
            v140 = v138 + 3;
            v219 = v138 + 2;
            if (v138 + 3 < v208)
            {
              v139 = *(_QWORD *)&v207[8 * v140];
              if (!v139)
              {
                while (1)
                {
                  v138 = v140 + 1;
                  if (__OFADD__(v140, 1))
                    goto LABEL_148;
                  if (v138 >= v208)
                  {
                    v219 = v201;
                    goto LABEL_90;
                  }
                  v139 = *(_QWORD *)&v207[8 * v138];
                  ++v140;
                  if (v139)
                    goto LABEL_76;
                }
              }
LABEL_79:
              v138 = v140;
LABEL_76:
              v225 = (v139 - 1) & v139;
              v135 = __clz(__rbit64(v139)) + (v138 << 6);
              v219 = v138;
LABEL_72:
              sub_2453BA364(v129[6] + *(_QWORD *)(v231 + 72) * v135, v50, type metadata accessor for ReplicatorRecord.ID);
              v136 = v129[7] + *(_QWORD *)(v223 + 72) * v135;
              v137 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464520);
              sub_2453BA364(v136, v50 + *(int *)(v137 + 48), type metadata accessor for ReplicatorRecord);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v137 - 8) + 56))(v50, 0, 1, v137);
              goto LABEL_91;
            }
          }
        }
      }
LABEL_90:
      v141 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464520);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 56))(v50, 1, 1, v141);
      v225 = 0;
LABEL_91:
      v142 = v216;
      sub_2453D0428(v50, v216, &qword_257464528);
      v143 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464520);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v143 - 8) + 48))(v142, 1, v143) != 1)
      {
        v144 = v142 + *(int *)(v143 + 48);
        v145 = v142;
        v146 = v244;
        sub_2453D062C(v145, (uint64_t)v244, type metadata accessor for ReplicatorRecord.ID);
        v147 = v213;
        sub_2453BA364((uint64_t)v146, (uint64_t)v213, type metadata accessor for ReplicatorRecord.ID);
        v50 = v214;
        sub_2453D062C(v144, v214, type metadata accessor for ReplicatorRecord);
        v148 = v224;
        v32 = swift_isUniquelyReferenced_nonNull_native();
        v247 = v148;
        v150 = sub_2453C656C(v147);
        v151 = v148[2];
        v152 = (v149 & 1) == 0;
        v153 = v151 + v152;
        if (__OFADD__(v151, v152))
        {
          __break(1u);
          goto LABEL_144;
        }
        v154 = v149;
        if (v148[3] >= v153)
        {
          v157 = v234;
          if ((v32 & 1) == 0)
            sub_2453CAA58();
        }
        else
        {
          sub_2453C7704(v153, v32);
          v155 = sub_2453C656C(v147);
          v157 = v234;
          if ((v154 & 1) != (v156 & 1))
          {
            sub_2454443A8();
            __break(1u);
            goto LABEL_152;
          }
          v150 = v155;
        }
        v158 = v247;
        v224 = v247;
        if ((v154 & 1) != 0)
        {
          sub_2453F70E0(v50, *((_QWORD *)v247 + 7) + *(_QWORD *)(v223 + 72) * v150);
        }
        else
        {
          *((_QWORD *)v247 + (v150 >> 6) + 8) |= 1 << v150;
          sub_2453BA364((uint64_t)v147, v158[6] + *(_QWORD *)(v231 + 72) * v150, type metadata accessor for ReplicatorRecord.ID);
          sub_2453D062C(v50, v158[7] + *(_QWORD *)(v223 + 72) * v150, type metadata accessor for ReplicatorRecord);
          v159 = v158[2];
          v160 = __OFADD__(v159, 1);
          v161 = v159 + 1;
          if (v160)
            goto LABEL_145;
          v158[2] = v161;
        }
        swift_bridgeObjectRelease();
        sub_2453BA3A8((uint64_t)v147, type metadata accessor for ReplicatorRecord.ID);
        swift_beginAccess();
        v162 = v246;
        sub_245444414();
        v163 = v244;
        v242 = v162;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        v239 = (_QWORD *)((char *)v163 + *(int *)(v243 + 28));
        v164 = v212;
        sub_2453BA364((uint64_t)v239, v212, v7);
        v235 = *(char **)(v157 + 48);
        v165 = v240;
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v235)(v164, 1, v240) == 1)
        {
          sub_245444420();
        }
        else
        {
          v166 = v210;
          (*(void (**)(char *, uint64_t, uint64_t))(v157 + 32))(v210, v164, v165);
          sub_245444420();
          sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
          sub_245443D60();
          (*(void (**)(char *, uint64_t))(v157 + 8))(v166, v165);
        }
        v230 = (char *)v244 + *(int *)(v243 + 32);
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        v167 = sub_245444444();
        v168 = -1 << *((_BYTE *)v242 + 32);
        v169 = v167 & ~v168;
        v170 = (char *)(v242 + 7);
        v171 = v236;
        if (((*(_QWORD *)((char *)v242 + ((v169 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v169) & 1) == 0)
        {
LABEL_68:
          swift_bridgeObjectRelease();
          v134 = v211;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v231 + 56))(v211, 1, 1, v243);
          v50 = (uint64_t)v217;
          v7 = type metadata accessor for ReplicatorRecord.ID.Ownership;
          goto LABEL_69;
        }
        v241 = ~v168;
        v172 = *(_QWORD *)(v231 + 72);
        v232 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(v242 + 7);
        while (2)
        {
          sub_2453BA364(v242[6] + v172 * v169, (uint64_t)v171, type metadata accessor for ReplicatorRecord.ID);
          v173 = *v171 == *v244 && v171[1] == v244[1];
          if (v173 || (sub_245444390() & 1) != 0)
          {
            v174 = v171[2] == v244[2] && v171[3] == v244[3];
            if ((v174 || (sub_245444390() & 1) != 0)
              && (v171[4] == v244[4] && v171[5] == v244[5] || (sub_245444390() & 1) != 0))
            {
              v175 = (uint64_t)v171 + *(int *)(v243 + 28);
              v176 = (uint64_t)&v18[*(int *)(v238 + 48)];
              v7 = type metadata accessor for ReplicatorRecord.ID.Ownership;
              sub_2453BA364(v175, (uint64_t)v18, type metadata accessor for ReplicatorRecord.ID.Ownership);
              sub_2453BA364((uint64_t)v239, v176, type metadata accessor for ReplicatorRecord.ID.Ownership);
              v177 = v18;
              v32 = v240;
              v178 = (uint64_t)v18;
              v179 = v235;
              if (((unsigned int (*)(char *, uint64_t, uint64_t))v235)(v177, 1, v240) == 1)
              {
                v180 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v179)(v176, 1, v32);
                v18 = (char *)v178;
                if (v180 == 1)
                  goto LABEL_130;
LABEL_127:
                sub_2453D055C((uint64_t)v18, (uint64_t *)&unk_25440E540);
LABEL_128:
                v171 = v236;
              }
              else
              {
                sub_2453BA364(v178, v237, type metadata accessor for ReplicatorRecord.ID.Ownership);
                if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v179)(v176, 1, v32) == 1)
                {
                  (*(void (**)(char *, uint64_t))(v234 + 8))((char *)v237, v32);
                  v18 = (char *)v178;
                  v170 = (char *)v232;
                  goto LABEL_127;
                }
                v181 = v234;
                v182 = v222;
                (*(void (**)(char *, uint64_t, uint64_t))(v234 + 32))(v222, v176, v32);
                v183 = sub_245443AF0();
                v184 = *(void (**)(char *, uint64_t))(v181 + 8);
                v185 = v182;
                v7 = type metadata accessor for ReplicatorRecord.ID.Ownership;
                v184(v185, v32);
                v184((char *)v237, v32);
                v18 = v227;
                v170 = (char *)v232;
                if ((v183 & 1) == 0)
                {
                  sub_2453BA3A8((uint64_t)v227, type metadata accessor for ReplicatorRecord.ID.Ownership);
                  goto LABEL_128;
                }
LABEL_130:
                sub_2453BA3A8((uint64_t)v18, type metadata accessor for ReplicatorRecord.ID.Ownership);
                v171 = v236;
                v186 = &v236[*(int *)(v243 + 32)];
                if (*(_QWORD *)v186 == *(_QWORD *)v230 && *((_QWORD *)v186 + 1) == *((_QWORD *)v230 + 1)
                  || (sub_245444390() & 1) != 0)
                {
                  sub_2453BA3A8((uint64_t)v171, type metadata accessor for ReplicatorRecord.ID);
                  swift_bridgeObjectRelease();
                  v187 = swift_isUniquelyReferenced_nonNull_native();
                  v188 = v246;
                  v247 = v246;
                  v246 = (_QWORD *)0x8000000000000000;
                  v50 = (uint64_t)v217;
                  if ((v187 & 1) == 0)
                  {
                    sub_245427618();
                    v188 = v247;
                  }
                  v189 = v188[6] + v172 * v169;
                  v134 = v211;
                  sub_2453D062C(v189, v211, type metadata accessor for ReplicatorRecord.ID);
                  sub_245429438(v169);
                  v246 = v247;
                  swift_bridgeObjectRelease();
                  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v231 + 56))(v134, 0, 1, v243);
LABEL_69:
                  swift_endAccess();
                  sub_2453D055C(v134, &qword_257464538);
                  sub_2453BA3A8((uint64_t)v244, type metadata accessor for ReplicatorRecord.ID);
                  v129 = v215;
                  v133 = v225;
                  goto LABEL_70;
                }
              }
            }
          }
          sub_2453BA3A8((uint64_t)v171, type metadata accessor for ReplicatorRecord.ID);
          v169 = (v169 + 1) & v241;
          if (((*(_QWORD *)&v170[(v169 >> 3) & 0xFFFFFFFFFFFFF8] >> v169) & 1) == 0)
            goto LABEL_68;
          continue;
        }
      }

      swift_release();
      swift_beginAccess();
      v50 = v209;
      if (!v246[2])
        goto LABEL_139;
    }
    v225 = (v133 - 1) & v133;
    v135 = __clz(__rbit64(v133)) | (v219 << 6);
    goto LABEL_72;
  }
  v221 = MEMORY[0x24BEE4AF8];
  v224 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_139:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (uint64_t)v224;
}

uint64_t sub_2453E6F74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, unint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  int64_t v57;
  BOOL v58;
  BOOL v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t);
  int v65;
  uint64_t v66;
  char *v67;
  char v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  char *v71;
  int64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int64_t v90;
  unint64_t v91;
  int64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  char v97;
  unint64_t v98;
  uint64_t v99;
  _BOOL8 v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  _QWORD *v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v109;
  uint64_t v110;
  uint64_t result;
  _QWORD *v112;
  unint64_t v113;
  NSObject *v114;
  os_log_type_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t *v118;
  uint64_t v119;
  __int128 v120;
  char *v121;
  char *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t (*v146)(uint64_t, uint64_t, uint64_t);
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  int64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  char v158;
  _QWORD *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;

  LOBYTE(v6) = a5;
  v126 = a4;
  v125 = a3;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464998);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v154 = (char *)&v118 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v153 = (char *)&v118 - v13;
  v144 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E540);
  MEMORY[0x24BDAC7A8](v144);
  v139 = (uint64_t)&v118 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = sub_245443B14();
  v143 = *(_QWORD *)(v150 - 8);
  v15 = MEMORY[0x24BDAC7A8](v150);
  v136 = (char *)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v122 = (char *)&v118 - v17;
  v18 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (uint64_t)&v118 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v132 = (uint64_t)&v118 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464538);
  MEMORY[0x24BDAC7A8](v23);
  v133 = (uint64_t)&v118 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = type metadata accessor for ReplicatorRecord.ID(0);
  v134 = *(_QWORD *)(v152 - 8);
  v25 = MEMORY[0x24BDAC7A8](v152);
  v156 = (unint64_t **)((char *)&v118 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = MEMORY[0x24BDAC7A8](v25);
  v148 = (char *)&v118 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v138 = (uint64_t)&v118 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v32 = (uint64_t)&v118 - v31;
  v124 = a1;
  v128 = (void *)sub_2453E37FC();
  if (!v128)
  {
    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v110 = 3;
    *(_QWORD *)(v110 + 8) = 0;
    return swift_willThrow();
  }
  v118 = a6;
  v163 = MEMORY[0x24BEE4B00];
  v33 = swift_bridgeObjectRetain();
  v34 = sub_2454159F0(v33);
  v119 = a2;
  swift_bridgeObjectRelease();
  v162 = v34;
  v160 = 0;
  v161 = MEMORY[0x24BEE4AF8];
  v159 = 0;
  if (qword_25440EC10 != -1)
    goto LABEL_108;
LABEL_3:
  v35 = sub_245443C04();
  v127 = __swift_project_value_buffer(v35, (uint64_t)qword_25440EBF8);
  v36 = sub_245443BEC();
  v37 = sub_245444000();
  v38 = os_log_type_enabled(v36, v37);
  v142 = v21;
  if (v38)
  {
    v21 = swift_slowAlloc();
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_2453B6000, v36, v37, "Begin fetching URLs in batches", (uint8_t *)v21, 2u);
    MEMORY[0x249534440](v21, -1, -1);
  }

  v131 = *(_QWORD *)(v119 + 16);
  if (v131)
  {
    v123 = v6 & 1;
    v39 = v134;
    v129 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
    v130 = v119 + v129;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    swift_beginAccess();
    v40 = 0;
    v121 = &v158;
    v155 = *(_QWORD *)(v39 + 72);
    *(_QWORD *)&v41 = 134349824;
    v120 = v41;
    v147 = v32;
    while (1)
    {
      v137 = v40;
      sub_2453BA364(v130 + v155 * v40, v32, type metadata accessor for ReplicatorRecord.ID);
      swift_bridgeObjectRetain();
      v6 = sub_245443DFC();
      swift_bridgeObjectRelease();
      if (__OFADD__(v160, v6))
      {
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        swift_once();
        goto LABEL_3;
      }
      v160 += v6;
      sub_2453BA364(v32, v138, type metadata accessor for ReplicatorRecord.ID);
      swift_beginAccess();
      v42 = v161;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v42 = sub_2453F166C(0, *(_QWORD *)(v42 + 16) + 1, 1, v42, &qword_25440E250, type metadata accessor for ReplicatorRecord.ID);
      v44 = *(_QWORD *)(v42 + 16);
      v43 = *(_QWORD *)(v42 + 24);
      if (v44 >= v43 >> 1)
        v42 = sub_2453F166C(v43 > 1, v44 + 1, 1, v42, &qword_25440E250, type metadata accessor for ReplicatorRecord.ID);
      *(_QWORD *)(v42 + 16) = v44 + 1;
      sub_2453D062C(v138, v42 + v129 + v44 * v155, type metadata accessor for ReplicatorRecord.ID);
      v161 = v42;
      swift_endAccess();
      swift_beginAccess();
      v45 = v162;
      sub_245444414();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      v149 = v32 + *(int *)(v152 + 28);
      v46 = v132;
      sub_2453BA364(v149, v132, type metadata accessor for ReplicatorRecord.ID.Ownership);
      v47 = v143;
      v21 = *(_QWORD *)(v143 + 48);
      v48 = v150;
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v21)(v46, 1, v150) == 1)
      {
        sub_245444420();
      }
      else
      {
        v49 = v122;
        (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v122, v46, v48);
        sub_245444420();
        sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
        sub_245443D60();
        (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v48);
      }
      v50 = v139;
      v51 = v142;
      v140 = (_QWORD *)(v32 + *(int *)(v152 + 32));
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      v52 = sub_245444444();
      v53 = -1 << *(_BYTE *)(v45 + 32);
      v54 = v52 & ~v53;
      v55 = v45 + 56;
      if (((*(_QWORD *)(v45 + 56 + ((v54 >> 3) & 0xFFFFFFFFFFFFF8)) >> v54) & 1) == 0)
      {
LABEL_47:
        swift_bridgeObjectRelease();
        v73 = v133;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v134 + 56))(v133, 1, 1, v152);
        goto LABEL_48;
      }
      v146 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v21;
      v21 = ~v53;
      v56 = v148;
      v141 = v45 + 56;
      v145 = ~v53;
      while (1)
      {
        v57 = v54 * v155;
        sub_2453BA364(*(_QWORD *)(v45 + 48) + v54 * v155, (uint64_t)v56, type metadata accessor for ReplicatorRecord.ID);
        v58 = *v56 == *(_QWORD *)v32 && v56[1] == *(_QWORD *)(v32 + 8);
        if (!v58 && (sub_245444390() & 1) == 0)
          goto LABEL_21;
        v59 = v56[2] == *(_QWORD *)(v32 + 16) && v56[3] == *(_QWORD *)(v32 + 24);
        if (!v59 && (sub_245444390() & 1) == 0
          || (v56[4] != *(_QWORD *)(v32 + 32) || v56[5] != *(_QWORD *)(v32 + 40)) && (sub_245444390() & 1) == 0)
        {
          goto LABEL_21;
        }
        v151 = v57;
        v60 = v45;
        v61 = (uint64_t)v56 + *(int *)(v152 + 28);
        v62 = v50 + *(int *)(v144 + 48);
        sub_2453BA364(v61, v50, type metadata accessor for ReplicatorRecord.ID.Ownership);
        sub_2453BA364(v149, v62, type metadata accessor for ReplicatorRecord.ID.Ownership);
        v63 = v150;
        v64 = v146;
        if (v146(v50, 1, v150) == 1)
        {
          v65 = v64(v62, 1, v63);
          v45 = v60;
          v21 = v145;
          if (v65 == 1)
            goto LABEL_43;
          goto LABEL_40;
        }
        sub_2453BA364(v50, v51, type metadata accessor for ReplicatorRecord.ID.Ownership);
        if (v64(v62, 1, v63) != 1)
          break;
        (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v51, v63);
        v45 = v60;
        v55 = v141;
        v21 = v145;
LABEL_40:
        sub_2453D055C(v50, (uint64_t *)&unk_25440E540);
LABEL_41:
        v32 = v147;
        v56 = v148;
LABEL_21:
        sub_2453BA3A8((uint64_t)v56, type metadata accessor for ReplicatorRecord.ID);
        v54 = (v54 + 1) & v21;
        if (((*(_QWORD *)(v55 + ((v54 >> 3) & 0xFFFFFFFFFFFFF8)) >> v54) & 1) == 0)
          goto LABEL_47;
      }
      v66 = v143;
      v67 = v136;
      (*(void (**)(char *, uint64_t, uint64_t))(v143 + 32))(v136, v62, v63);
      v68 = sub_245443AF0();
      v69 = *(void (**)(char *, uint64_t))(v66 + 8);
      v70 = v142;
      v69(v67, v63);
      v51 = v70;
      v69((char *)v70, v63);
      v50 = v139;
      v45 = v60;
      v55 = v141;
      v21 = v145;
      if ((v68 & 1) == 0)
      {
        sub_2453BA3A8(v139, type metadata accessor for ReplicatorRecord.ID.Ownership);
        goto LABEL_41;
      }
LABEL_43:
      sub_2453BA3A8(v50, type metadata accessor for ReplicatorRecord.ID.Ownership);
      v56 = v148;
      v71 = &v148[*(int *)(v152 + 32)];
      v32 = v147;
      v72 = v151;
      if ((*(_QWORD *)v71 != *v140 || *((_QWORD *)v71 + 1) != v140[1]) && (sub_245444390() & 1) == 0)
        goto LABEL_21;
      sub_2453BA3A8((uint64_t)v56, type metadata accessor for ReplicatorRecord.ID);
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v109 = v162;
      v157 = (_QWORD *)v162;
      v162 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_245427618();
        v109 = (unint64_t)v157;
      }
      v73 = v133;
      sub_2453D062C(*(_QWORD *)(v109 + 48) + v72, v133, type metadata accessor for ReplicatorRecord.ID);
      sub_245429438(v54);
      v162 = (unint64_t)v157;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v134 + 56))(v73, 0, 1, v152);
LABEL_48:
      swift_endAccess();
      sub_2453D055C(v73, &qword_257464538);
      if (v160 <= 102400 && *(_QWORD *)(v162 + 16))
      {
        sub_2453BA3A8(v32, type metadata accessor for ReplicatorRecord.ID);
        goto LABEL_9;
      }
      v74 = sub_245443BEC();
      v75 = sub_245444000();
      if (os_log_type_enabled(v74, v75))
      {
        v76 = swift_slowAlloc();
        *(_DWORD *)v76 = v120;
        v157 = v159;
        sub_245444078();
        *(_WORD *)(v76 + 12) = 2050;
        v157 = (_QWORD *)v160;
        sub_245444078();
        *(_WORD *)(v76 + 22) = 2050;
        v157 = *(_QWORD **)(v161 + 16);
        sub_245444078();
        *(_WORD *)(v76 + 32) = 2048;
        v157 = *(_QWORD **)(v162 + 16);
        sub_245444078();
        _os_log_impl(&dword_2453B6000, v74, v75, "Fetching batch %{public}ld with ID size %{public}ld and %{public}ld IDs; %ld IDs remaining",
          (uint8_t *)v76,
          0x2Au);
        MEMORY[0x249534440](v76, -1, -1);
      }

      LOBYTE(v6) = v161;
      v77 = swift_bridgeObjectRetain();
      v78 = v135;
      v79 = sub_2453E82EC(v77, v125, v126, v123, v128);
      v80 = (uint64_t)v154;
      if (v78)
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        sub_2453BA3A8(v32, type metadata accessor for ReplicatorRecord.ID);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v21 = v79;
      v135 = 0;
      swift_bridgeObjectRelease();
      v81 = 0;
      v82 = *(_QWORD *)(v21 + 64);
      v149 = v21 + 64;
      v83 = 1 << *(_BYTE *)(v21 + 32);
      if (v83 < 64)
        v84 = ~(-1 << v83);
      else
        v84 = -1;
      v32 = v84 & v82;
      v151 = (unint64_t)(v83 + 63) >> 6;
      v146 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(v151 - 1);
      while (2)
      {
        v85 = (uint64_t)v153;
        if (v32)
        {
          v86 = __clz(__rbit64(v32));
          v32 &= v32 - 1;
          v87 = v86 | (v81 << 6);
          goto LABEL_60;
        }
        v90 = v81 + 1;
        if (__OFADD__(v81, 1))
          goto LABEL_104;
        if (v90 >= v151)
          goto LABEL_78;
        v91 = *(_QWORD *)(v149 + 8 * v90);
        if (!v91)
        {
          v92 = v81 + 2;
          ++v81;
          if (v90 + 1 < v151)
          {
            v91 = *(_QWORD *)(v149 + 8 * v92);
            if (v91)
            {
LABEL_67:
              v90 = v92;
              goto LABEL_64;
            }
            v81 = v90 + 1;
            if (v90 + 2 < v151)
            {
              v91 = *(_QWORD *)(v149 + 8 * (v90 + 2));
              if (v91)
              {
                v90 += 2;
                goto LABEL_64;
              }
              v92 = v90 + 3;
              v81 = v90 + 2;
              if (v90 + 3 < v151)
              {
                v91 = *(_QWORD *)(v149 + 8 * v92);
                if (!v91)
                {
                  while (1)
                  {
                    v90 = v92 + 1;
                    if (__OFADD__(v92, 1))
                      goto LABEL_107;
                    if (v90 >= v151)
                    {
                      v81 = (int64_t)v146;
                      goto LABEL_78;
                    }
                    v91 = *(_QWORD *)(v149 + 8 * v90);
                    ++v92;
                    if (v91)
                      goto LABEL_64;
                  }
                }
                goto LABEL_67;
              }
            }
          }
LABEL_78:
          v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574649A0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v80, 1, 1, v93);
          v32 = 0;
          goto LABEL_79;
        }
LABEL_64:
        v32 = (v91 - 1) & v91;
        v87 = __clz(__rbit64(v91)) + (v90 << 6);
        v81 = v90;
LABEL_60:
        sub_2453BA364(*(_QWORD *)(v21 + 48) + v87 * v155, v80, type metadata accessor for ReplicatorRecord.ID);
        v88 = *(_QWORD *)(v21 + 56);
        v89 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574649A0);
        *(_QWORD *)(v80 + *(int *)(v89 + 48)) = *(_QWORD *)(v88 + 8 * v87);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v80, 0, 1, v89);
        swift_bridgeObjectRetain();
LABEL_79:
        sub_2453D0428(v80, v85, &qword_257464998);
        v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574649A0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v85, 1, v6) != 1)
        {
          v94 = *(_QWORD *)(v85 + *(int *)(v6 + 48));
          v6 = (uint64_t)v156;
          sub_2453D062C(v85, (uint64_t)v156, type metadata accessor for ReplicatorRecord.ID);
          v95 = v163;
          v96 = swift_isUniquelyReferenced_nonNull_native();
          v157 = (_QWORD *)v95;
          v163 = 0x8000000000000000;
          v98 = sub_2453C656C((_QWORD *)v6);
          v99 = *(_QWORD *)(v95 + 16);
          v100 = (v97 & 1) == 0;
          v101 = v99 + v100;
          if (__OFADD__(v99, v100))
          {
            __break(1u);
LABEL_103:
            __break(1u);
LABEL_104:
            __break(1u);
            goto LABEL_105;
          }
          LOBYTE(v6) = v97;
          if (*(_QWORD *)(v95 + 24) >= v101)
          {
            if ((v96 & 1) == 0)
              sub_2453CACF0();
          }
          else
          {
            sub_2453C7CF0(v101, v96);
            v102 = sub_2453C656C(v156);
            if ((v6 & 1) != (v103 & 1))
            {
              result = sub_2454443A8();
              __break(1u);
              return result;
            }
            v98 = v102;
          }
          v104 = v157;
          if ((v6 & 1) != 0)
          {
            v6 = v157[7];
            swift_bridgeObjectRelease();
            *(_QWORD *)(v6 + 8 * v98) = v94;
          }
          else
          {
            v157[(v98 >> 6) + 8] |= 1 << v98;
            sub_2453BA364((uint64_t)v156, v104[6] + v98 * v155, type metadata accessor for ReplicatorRecord.ID);
            *(_QWORD *)(v104[7] + 8 * v98) = v94;
            v105 = v104[2];
            v106 = __OFADD__(v105, 1);
            v107 = v105 + 1;
            if (v106)
              goto LABEL_103;
            v104[2] = v107;
          }
          v163 = (unint64_t)v104;
          swift_bridgeObjectRelease();
          sub_2453BA3A8((uint64_t)v156, type metadata accessor for ReplicatorRecord.ID);
          v80 = (uint64_t)v154;
          continue;
        }
        break;
      }
      swift_release();
      v161 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRelease();
      v32 = v147;
      sub_2453BA3A8(v147, type metadata accessor for ReplicatorRecord.ID);
      v160 = 0;
      if (__OFADD__(v159, 1))
        goto LABEL_106;
      v159 = (_QWORD *)((char *)v159 + 1);
LABEL_9:
      v40 = v137 + 1;
      if (v137 + 1 == v131)
      {
        swift_bridgeObjectRelease();
        v113 = v163;
        v112 = v159;
        goto LABEL_97;
      }
    }
  }
  v112 = 0;
  v113 = MEMORY[0x24BEE4B00];
LABEL_97:
  swift_bridgeObjectRetain();
  v114 = sub_245443BEC();
  v115 = sub_245444000();
  if (os_log_type_enabled(v114, v115))
  {
    v116 = swift_slowAlloc();
    *(_DWORD *)v116 = 134349312;
    v157 = *(_QWORD **)(v113 + 16);
    sub_245444078();
    swift_bridgeObjectRelease();
    *(_WORD *)(v116 + 12) = 2050;
    v157 = v112;
    sub_245444078();
    _os_log_impl(&dword_2453B6000, v114, v115, "End fetching URLs in batches; fetched %{public}ld in %{public}ld batches",
      (uint8_t *)v116,
      0x16u);
    MEMORY[0x249534440](v116, -1, -1);

    swift_unknownObjectRelease();
  }
  else
  {

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  v117 = v118;
  swift_beginAccess();
  *v117 = v163;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_2453E82EC(NSObject *a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  void *v49;
  id v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  uint8_t *v59;
  __int128 v60;
  id v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  char *v67;
  _QWORD *v68;
  NSObject *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  NSObject *v81;
  char *v82;
  int v83;
  char *v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  os_log_t v91;
  uint64_t v92;
  unint64_t v93;
  BOOL v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  uint64_t v99;
  NSObject *v100;
  uint64_t (*v101)(uint64_t, uint64_t, uint64_t);
  int v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char v108;
  void (*v109)(char *, uint64_t);
  char *v110;
  char isUniquelyReferenced_nonNull_native;
  NSObject *v112;
  uint64_t v113;
  NSObject *v114;
  id v115;
  NSObject *v116;
  NSObject *v117;
  NSObject *v118;
  uint64_t v119;
  NSObject *v120;
  NSObject *v121;
  unint64_t v122;
  NSObject *v123;
  uint64_t v124;
  NSObject *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int64_t v141;
  unint64_t v142;
  int64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  NSObject *v148;
  int v149;
  char v150;
  Class v151;
  _BOOL8 v152;
  uint64_t v153;
  char v154;
  unint64_t v155;
  char v156;
  uint64_t v157;
  Class v158;
  Class v159;
  BOOL v160;
  objc_class *v161;
  NSObject *v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  os_log_t v172;
  _QWORD *v173;
  uint64_t v174;
  unint64_t v175;
  BOOL v176;
  BOOL v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t (*v183)(uint64_t, uint64_t, uint64_t);
  int v184;
  uint64_t v185;
  char *v186;
  char v187;
  void (*v188)(char *, uint64_t);
  char *v189;
  char v190;
  NSObject *v191;
  NSObject *v192;
  NSObject *v193;
  os_log_type_t v194;
  uint8_t *v195;
  NSObject *v196;
  NSObject *v197;
  uint64_t result;
  __int128 v199;
  __int16 *v200;
  int v201;
  uint64_t v202;
  uint64_t ObjectType;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  id v207;
  uint64_t v208;
  NSObject *v209;
  id v210;
  NSObject *v211;
  id v212;
  uint64_t v213;
  char *v214;
  char *v215;
  int64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  NSObject *v220;
  _QWORD *v221;
  char *v222;
  int64_t v223;
  uint64_t v224;
  unint64_t v225;
  char *v226;
  uint64_t v227;
  NSObject *v228;
  char *v229;
  NSObject *v230;
  uint64_t v231;
  NSObject *v232;
  uint64_t v233;
  char *v234;
  uint64_t v235;
  os_log_t v236;
  char *v237;
  char *v238;
  uint64_t v239;
  uint64_t (*v240)(uint64_t, uint64_t, uint64_t);
  char *v241;
  char *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  os_log_t v248;
  _QWORD *v249;
  NSObject *v250;
  NSObject *v251;
  NSObject *isa;
  __int16 v253;
  uint64_t v254;
  char v255;
  uint64_t v256;

  v6 = v5;
  v207 = a5;
  LOBYTE(v7) = a4;
  v206 = a3;
  v204 = a2;
  v256 = *MEMORY[0x24BDAC8D0];
  ObjectType = swift_getObjectType();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464998);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v228 = ((char *)&v199 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v10);
  v229 = (char *)&v199 - v12;
  v245 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E540);
  v13 = MEMORY[0x24BDAC7A8](v245);
  v227 = (uint64_t)&v199 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v16 = ((char *)&v199 - v15);
  v246 = sub_245443B14();
  v239 = *(_QWORD *)(v246 - 8);
  v17 = MEMORY[0x24BDAC7A8](v246);
  v226 = (char *)&v199 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v222 = (char *)&v199 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v217 = (char *)&v199 - v21;
  v22 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v243 = (char *)&v199 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v219 = (uint64_t)&v199 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v233 = (uint64_t)&v199 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v214 = (char *)&v199 - v29;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464538);
  v31 = MEMORY[0x24BDAC7A8](v30);
  v218 = (uint64_t)&v199 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v213 = (uint64_t)&v199 - v33;
  v244 = type metadata accessor for ReplicatorRecord.ID(0);
  v235 = *(_QWORD *)(v244 - 8);
  v34 = MEMORY[0x24BDAC7A8](v244);
  v242 = (char *)&v199 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x24BDAC7A8](v34);
  v220 = ((char *)&v199 - v37);
  v38 = MEMORY[0x24BDAC7A8](v36);
  v249 = (_QWORD *)((char *)&v199 - v39);
  v40 = MEMORY[0x24BDAC7A8](v38);
  v237 = (char *)&v199 - v41;
  v42 = MEMORY[0x24BDAC7A8](v40);
  v224 = (uint64_t)&v199 - v43;
  MEMORY[0x24BDAC7A8](v42);
  v238 = (char *)&v199 - v44;
  v45 = sub_245443CDC();
  v46 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v48 = (_QWORD *)((char *)&v199 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
  v205 = v6;
  v49 = *(void **)(v6 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *v48 = v49;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v46 + 104))(v48, *MEMORY[0x24BEE5610], v45);
  v50 = v49;
  v51 = sub_245443CE8();
  (*(void (**)(_QWORD *, uint64_t))(v46 + 8))(v48, v45);
  if ((v51 & 1) == 0)
    goto LABEL_153;
  v52 = swift_bridgeObjectRetain();
  v53 = sub_2454159F0(v52);
  swift_bridgeObjectRelease();
  v250 = 0;
  v251 = v53;
  if (qword_25440EC10 != -1)
LABEL_154:
    swift_once();
  v54 = sub_245443C04();
  v55 = __swift_project_value_buffer(v54, (uint64_t)qword_25440EBF8);
  swift_bridgeObjectRetain();
  v208 = v55;
  v56 = sub_245443BEC();
  v57 = sub_245444000();
  v58 = os_log_type_enabled(v56, v57);
  v211 = a1;
  if (v58)
  {
    v59 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v59 = 134349056;
    isa = a1[2].isa;
    sub_245444078();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2453B6000, v56, v57, "Begin fetch for %{public}ld URLs", v59, 0xCu);
    MEMORY[0x249534440](v59, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  a1 = v228;
  if (!v251[2].isa)
  {
    v225 = MEMORY[0x24BEE4AF8];
    v230 = MEMORY[0x24BEE4B00];
LABEL_139:
    swift_bridgeObjectRelease();
    v192 = v211;
    swift_bridgeObjectRetain();
    v193 = sub_245443BEC();
    v194 = sub_245444000();
    if (os_log_type_enabled(v193, v194))
    {
      v195 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v195 = 134349056;
      isa = v192[2].isa;
      sub_245444078();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2453B6000, v193, v194, "End fetch for %{public}ld URLs", v195, 0xCu);
      MEMORY[0x249534440](v195, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    v196 = v230;
    goto LABEL_144;
  }
  v202 = sub_245443994();
  v200 = &v253;
  v225 = MEMORY[0x24BEE4AF8];
  v201 = v7 & 1;
  *(_QWORD *)&v60 = 134350080;
  v199 = v60;
  v230 = MEMORY[0x24BEE4B00];
  v232 = v16;
  while (1)
  {
    isa = v211;
    v253 = 256;
    v254 = v206;
    v255 = v201;
    swift_allocObject();
    swift_bridgeObjectRetain();
    sub_245443988();
    sub_2453F7004();
    v61 = v212;
    v62 = sub_24544397C();
    v210 = v61;
    if (v61)
    {
LABEL_156:
      result = swift_unexpectedError();
      __break(1u);
      return result;
    }
    v64 = v62;
    v65 = v63;
    v66 = (void *)sub_245443A6C();
    sub_2453BDCF8(v64, v65);
    swift_bridgeObjectRelease();
    swift_release();
    isa = 0;
    v67 = (char *)objc_msgSend(v207, sel_recordsWithParameters_error_, v66, &isa);

    if (!v67)
    {
      v197 = isa;
      v196 = v230;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_2454439B8();

      swift_willThrow();
LABEL_144:
      swift_bridgeObjectRelease();
      return (uint64_t)v196;
    }
    v212 = v67;
    v209 = OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_failedRecordIDs;
    v68 = *(_QWORD **)&v67[OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_failedRecordIDs];
    v223 = v68[2];
    if (v223)
    {
      v216 = (*(unsigned __int8 *)(v235 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v235 + 80);
      v215 = (char *)v68 + v216;
      v69 = isa;
      swift_bridgeObjectRetain();
      v7 = 0;
      v70 = v244;
      v71 = v238;
      v221 = v68;
      while (1)
      {
        if (v7 >= v68[2])
        {
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
          goto LABEL_151;
        }
        v74 = *(_QWORD *)(v235 + 72);
        v231 = v7;
        v247 = v74;
        sub_2453BA364((uint64_t)&v215[v74 * v7], (uint64_t)v71, type metadata accessor for ReplicatorRecord.ID);
        sub_2453BA364((uint64_t)v71, v224, type metadata accessor for ReplicatorRecord.ID);
        v75 = v225;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v75 = sub_2453F166C(0, *(_QWORD *)(v75 + 16) + 1, 1, v75, &qword_25440E250, type metadata accessor for ReplicatorRecord.ID);
        v76 = v246;
        v77 = v239;
        v78 = (uint64_t)v214;
        v80 = *(_QWORD *)(v75 + 16);
        v79 = *(_QWORD *)(v75 + 24);
        if (v80 >= v79 >> 1)
          v75 = sub_2453F166C(v79 > 1, v80 + 1, 1, v75, &qword_25440E250, type metadata accessor for ReplicatorRecord.ID);
        *(_QWORD *)(v75 + 16) = v80 + 1;
        sub_2453D062C(v224, v75 + v216 + v80 * v247, type metadata accessor for ReplicatorRecord.ID);
        swift_beginAccess();
        v81 = v251;
        sub_245444414();
        v82 = v238;
        v248 = v81;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        v241 = &v82[*(int *)(v70 + 28)];
        sub_2453BA364((uint64_t)v241, v78, type metadata accessor for ReplicatorRecord.ID.Ownership);
        v240 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
        v83 = v240(v78, 1, v76);
        v225 = v75;
        if (v83 == 1)
        {
          sub_245444420();
        }
        else
        {
          v84 = v217;
          (*(void (**)(char *, uint64_t, uint64_t))(v77 + 32))(v217, v78, v76);
          sub_245444420();
          sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
          sub_245443D60();
          (*(void (**)(char *, uint64_t))(v77 + 8))(v84, v76);
        }
        v85 = v237;
        v86 = v70;
        v87 = v238;
        v234 = &v238[*(int *)(v70 + 32)];
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        v88 = sub_245444444();
        v71 = v87;
        v89 = -1 << LOBYTE(v248[4].isa);
        v90 = v88 & ~v89;
        v91 = v248 + 7;
        if (((*(unint64_t *)((char *)&v248[7].isa + ((v90 >> 3) & 0xFFFFFFFFFFFFF8)) >> v90) & 1) == 0)
        {
LABEL_13:
          swift_bridgeObjectRelease();
          v72 = v213;
          v70 = v86;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v235 + 56))(v213, 1, 1, v86);
          a1 = v228;
          v73 = (uint64_t)v229;
          goto LABEL_14;
        }
        v92 = ~v89;
        v236 = v248 + 7;
        while (1)
        {
          v93 = v90 * v247;
          sub_2453BA364((uint64_t)v248[6].isa + v90 * v247, (uint64_t)v85, type metadata accessor for ReplicatorRecord.ID);
          v94 = *v85 == *v71 && v85[1] == v71[1];
          if (!v94 && (sub_245444390() & 1) == 0)
            goto LABEL_26;
          v95 = v85[2] == v71[2] && v85[3] == v71[3];
          if (!v95 && (sub_245444390() & 1) == 0
            || (v85[4] != v71[4] || v85[5] != v71[5]) && (sub_245444390() & 1) == 0)
          {
            goto LABEL_26;
          }
          v96 = v92;
          v97 = (uint64_t)v16 + *(int *)(v245 + 48);
          sub_2453BA364((uint64_t)v85 + *(int *)(v86 + 28), (uint64_t)v16, type metadata accessor for ReplicatorRecord.ID.Ownership);
          sub_2453BA364((uint64_t)v241, v97, type metadata accessor for ReplicatorRecord.ID.Ownership);
          v98 = v16;
          v99 = v246;
          v100 = v16;
          v101 = v240;
          if (v240((uint64_t)v98, 1, v246) == 1)
          {
            v102 = v101(v97, 1, v99);
            v16 = v100;
            if (v102 == 1)
              goto LABEL_48;
            goto LABEL_45;
          }
          v103 = v100;
          v104 = (uint64_t)v100;
          v105 = v233;
          sub_2453BA364(v104, v233, type metadata accessor for ReplicatorRecord.ID.Ownership);
          if (v101(v97, 1, v99) != 1)
            break;
          (*(void (**)(uint64_t, uint64_t))(v239 + 8))(v105, v99);
          v16 = v103;
          v86 = v244;
LABEL_45:
          sub_2453D055C((uint64_t)v16, (uint64_t *)&unk_25440E540);
LABEL_46:
          v85 = v237;
          v71 = v238;
          v92 = v96;
          v91 = v236;
LABEL_26:
          sub_2453BA3A8((uint64_t)v85, type metadata accessor for ReplicatorRecord.ID);
          v90 = (v90 + 1) & v92;
          if (((*(unint64_t *)((char *)&v91->isa + ((v90 >> 3) & 0xFFFFFFFFFFFFF8)) >> v90) & 1) == 0)
            goto LABEL_13;
        }
        v106 = v239;
        v107 = v222;
        (*(void (**)(char *, uint64_t, uint64_t))(v239 + 32))(v222, v97, v99);
        v108 = sub_245443AF0();
        v109 = *(void (**)(char *, uint64_t))(v106 + 8);
        v109(v107, v99);
        v109((char *)v105, v99);
        v16 = v232;
        v86 = v244;
        if ((v108 & 1) == 0)
        {
          sub_2453BA3A8((uint64_t)v232, type metadata accessor for ReplicatorRecord.ID.Ownership);
          goto LABEL_46;
        }
LABEL_48:
        sub_2453BA3A8((uint64_t)v16, type metadata accessor for ReplicatorRecord.ID.Ownership);
        v85 = v237;
        v110 = &v237[*(int *)(v86 + 32)];
        v71 = v238;
        v92 = v96;
        v91 = v236;
        if ((*(_QWORD *)v110 != *(_QWORD *)v234 || *((_QWORD *)v110 + 1) != *((_QWORD *)v234 + 1))
          && (sub_245444390() & 1) == 0)
        {
          goto LABEL_26;
        }
        v70 = v86;
        sub_2453BA3A8((uint64_t)v85, type metadata accessor for ReplicatorRecord.ID);
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v112 = v251;
        isa = v251;
        v251 = 0x8000000000000000;
        a1 = v228;
        v73 = (uint64_t)v229;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_245427618();
          v112 = isa;
        }
        v113 = (uint64_t)v112[6].isa + v93;
        v72 = v213;
        sub_2453D062C(v113, v213, type metadata accessor for ReplicatorRecord.ID);
        sub_245429438(v90);
        v251 = isa;
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v235 + 56))(v72, 0, 1, v70);
        v71 = v238;
LABEL_14:
        v7 = v231 + 1;
        swift_endAccess();
        sub_2453D055C(v72, &qword_257464538);
        sub_2453BA3A8((uint64_t)v71, type metadata accessor for ReplicatorRecord.ID);
        v68 = v221;
        if (v7 == v223)
        {
          swift_bridgeObjectRelease();
          goto LABEL_57;
        }
      }
    }
    v114 = isa;
    v73 = (uint64_t)v229;
LABEL_57:
    swift_beginAccess();
    v7 = (unint64_t)&qword_2574649A0;
    if (__OFADD__(v250, 1))
    {
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
      goto LABEL_154;
    }
    v250 = ((char *)v250 + 1);
    v115 = v212;
    v116 = v211;
    swift_bridgeObjectRetain_n();
    v117 = v115;
    v118 = sub_245443BEC();
    LODWORD(v247) = sub_245444000();
    v248 = v118;
    if (os_log_type_enabled(v118, (os_log_type_t)v247))
    {
      v119 = swift_slowAlloc();
      *(_DWORD *)v119 = v199;
      v120 = v117;
      v121 = v116[2].isa;
      swift_bridgeObjectRelease();
      isa = v121;
      sub_245444078();
      swift_bridgeObjectRelease();
      *(_WORD *)(v119 + 12) = 2050;
      v122 = *(unint64_t *)((char *)&v120->isa
                                 + OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_records);
      if (v122 >> 62)
      {
        swift_bridgeObjectRetain();
        v123 = sub_245444204();

        swift_bridgeObjectRelease();
      }
      else
      {
        v123 = *(NSObject **)((v122 & 0xFFFFFFFFFFFFF8) + 0x10);

      }
      v124 = v227;
      isa = v123;
      sub_245444078();

      *(_WORD *)(v119 + 22) = 2050;
      v125 = (*(_QWORD **)((char *)&v209->isa + (_QWORD)v212))[2];

      isa = v125;
      v117 = v120;
      sub_245444078();

      *(_WORD *)(v119 + 32) = 2050;
      isa = v251[2].isa;
      sub_245444078();
      *(_WORD *)(v119 + 42) = 2050;
      isa = v250;
      sub_245444078();
      _os_log_impl(&dword_2453B6000, v248, (os_log_type_t)v247, "Requested %{public}ld URLs; fetched %{public}ld; failed %{public}ld; remaining %{public}ld; fetch count %{public}ld",
        (uint8_t *)v119,
        0x34u);
      MEMORY[0x249534440](v119, -1, -1);
      v73 = (uint64_t)v229;
      v7 = (unint64_t)&qword_2574649A0;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      v248 = v117;
      v124 = v227;
    }

    v248 = (os_log_t)&v199;
    v209 = v117;
    v126 = *(unint64_t *)((char *)&v117->isa
                               + OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_records);
    MEMORY[0x24BDAC7A8](v127);
    v128 = v204;
    *((_QWORD *)&v199 - 4) = v205;
    *((_QWORD *)&v199 - 3) = v128;
    *((_QWORD *)&v199 - 2) = ObjectType;
    swift_bridgeObjectRetain();
    v129 = v210;
    v130 = sub_2453D0B98(MEMORY[0x24BEE4B00], (void (*)(void **, id *))sub_2453F7048, (uint64_t)(&v199 - 3), v126);
    v212 = v129;
    if (v129)
      break;
    v131 = v130;
    swift_bridgeObjectRelease();
    v223 = 0;
    v132 = v131[8];
    v215 = (char *)(v131 + 8);
    v133 = 1 << *((_BYTE *)v131 + 32);
    if (v133 < 64)
      v134 = ~(-1 << v133);
    else
      v134 = -1;
    v135 = v134 & v132;
    v216 = (unint64_t)(v133 + 63) >> 6;
    v210 = (id)(v216 - 1);
    v136 = v131;
    v221 = v131;
    while (1)
    {
      if (v135)
      {
        v231 = (v135 - 1) & v135;
        v138 = __clz(__rbit64(v135)) | (v223 << 6);
LABEL_72:
        sub_2453BA364(v136[6] + *(_QWORD *)(v235 + 72) * v138, (uint64_t)a1, type metadata accessor for ReplicatorRecord.ID);
        v139 = v136[7];
        v140 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574649A0);
        *((char *)a1 + *(int *)(v140 + 48)) = *(v139 + 8 * v138);
        (*(void (**)(NSObject *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v140 - 8) + 56))(a1, 0, 1, v140);
        swift_bridgeObjectRetain();
        goto LABEL_91;
      }
      v141 = v223 + 1;
      if (__OFADD__(v223, 1))
        goto LABEL_150;
      if (v141 < v216)
      {
        v142 = *(_QWORD *)&v215[8 * v141];
        if (v142)
          goto LABEL_76;
        v143 = v223 + 2;
        ++v223;
        if (v141 + 1 < v216)
        {
          v142 = *(_QWORD *)&v215[8 * v143];
          if (v142)
            goto LABEL_79;
          v223 = v141 + 1;
          if (v141 + 2 < v216)
          {
            v142 = *(_QWORD *)&v215[8 * v141 + 16];
            if (v142)
            {
              v141 += 2;
LABEL_76:
              v231 = (v142 - 1) & v142;
              v138 = __clz(__rbit64(v142)) + (v141 << 6);
              v223 = v141;
              goto LABEL_72;
            }
            v143 = v141 + 3;
            v223 = v141 + 2;
            if (v141 + 3 < v216)
            {
              v142 = *(_QWORD *)&v215[8 * v143];
              if (!v142)
              {
                while (1)
                {
                  v141 = v143 + 1;
                  if (__OFADD__(v143, 1))
                    goto LABEL_152;
                  if (v141 >= v216)
                  {
                    v223 = (int64_t)v210;
                    goto LABEL_90;
                  }
                  v142 = *(_QWORD *)&v215[8 * v141];
                  ++v143;
                  if (v142)
                    goto LABEL_76;
                }
              }
LABEL_79:
              v141 = v143;
              goto LABEL_76;
            }
          }
        }
      }
LABEL_90:
      v144 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574649A0);
      (*(void (**)(NSObject *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v144 - 8) + 56))(a1, 1, 1, v144);
      v231 = 0;
LABEL_91:
      sub_2453D0428((uint64_t)a1, v73, &qword_257464998);
      v145 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574649A0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v145 - 8) + 48))(v73, 1, v145) == 1)
        break;
      v146 = *(_QWORD *)(v73 + *(int *)(v145 + 48));
      v147 = v249;
      sub_2453D062C(v73, (uint64_t)v249, type metadata accessor for ReplicatorRecord.ID);
      a1 = v220;
      sub_2453BA364((uint64_t)v147, (uint64_t)v220, type metadata accessor for ReplicatorRecord.ID);
      v148 = v230;
      v149 = swift_isUniquelyReferenced_nonNull_native();
      isa = v148;
      v7 = sub_2453C656C(a1);
      v151 = v148[2].isa;
      v152 = (v150 & 1) == 0;
      v153 = (uint64_t)v151 + v152;
      if (__OFADD__(v151, v152))
      {
        __break(1u);
        goto LABEL_148;
      }
      v154 = v150;
      if ((uint64_t)v148[3].isa >= v153)
      {
        if ((v149 & 1) == 0)
          sub_2453CACF0();
      }
      else
      {
        sub_2453C7CF0(v153, v149);
        v155 = sub_2453C656C(a1);
        if ((v154 & 1) != (v156 & 1))
        {
          sub_2454443A8();
          __break(1u);
          goto LABEL_156;
        }
        v7 = v155;
      }
      v157 = v244;
      v16 = isa;
      if ((v154 & 1) != 0)
      {
        v158 = isa[7].isa;
        swift_bridgeObjectRelease();
        *((_QWORD *)v158 + v7) = v146;
      }
      else
      {
        isa[(v7 >> 6) + 8].isa = (Class)((uint64_t)isa[(v7 >> 6) + 8].isa | (1 << v7));
        sub_2453BA364((uint64_t)a1, (uint64_t)v16[6].isa + *(_QWORD *)(v235 + 72) * v7, type metadata accessor for ReplicatorRecord.ID);
        *((_QWORD *)v16[7].isa + v7) = v146;
        v159 = v16[2].isa;
        v160 = __OFADD__(v159, 1);
        v161 = (Class)((char *)v159 + 1);
        if (v160)
          goto LABEL_149;
        v16[2].isa = v161;
      }
      swift_bridgeObjectRelease();
      sub_2453BA3A8((uint64_t)a1, type metadata accessor for ReplicatorRecord.ID);
      swift_beginAccess();
      v162 = v251;
      sub_245444414();
      v163 = v249;
      v248 = v162;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      v241 = (char *)v163 + *(int *)(v157 + 28);
      v164 = v219;
      sub_2453BA364((uint64_t)v241, v219, type metadata accessor for ReplicatorRecord.ID.Ownership);
      v165 = v239;
      v240 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v239 + 48);
      v166 = v246;
      v167 = v240(v164, 1, v246);
      v230 = v16;
      if (v167 == 1)
      {
        sub_245444420();
      }
      else
      {
        v168 = v217;
        (*(void (**)(char *, uint64_t, uint64_t))(v165 + 32))(v217, v164, v166);
        sub_245444420();
        sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
        sub_245443D60();
        (*(void (**)(char *, uint64_t))(v165 + 8))(v168, v166);
      }
      v234 = (char *)v249 + *(int *)(v157 + 32);
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      v169 = sub_245444444();
      v170 = -1 << LOBYTE(v248[4].isa);
      v171 = v169 & ~v170;
      v172 = v248 + 7;
      v173 = v242;
      if (((*(unint64_t *)((char *)&v248[7].isa + ((v171 >> 3) & 0xFFFFFFFFFFFFF8)) >> v171) & 1) == 0)
      {
LABEL_68:
        swift_bridgeObjectRelease();
        v137 = v218;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v235 + 56))(v218, 1, 1, v157);
        a1 = v228;
        v73 = (uint64_t)v229;
        goto LABEL_69;
      }
      v247 = ~v170;
      v174 = *(_QWORD *)(v235 + 72);
      v236 = v248 + 7;
      while (1)
      {
        v175 = v174 * v171;
        sub_2453BA364((uint64_t)v248[6].isa + v174 * v171, (uint64_t)v173, type metadata accessor for ReplicatorRecord.ID);
        v176 = *v173 == *v249 && v173[1] == v249[1];
        if (!v176 && (sub_245444390() & 1) == 0)
          goto LABEL_108;
        v177 = v173[2] == v249[2] && v173[3] == v249[3];
        if (!v177 && (sub_245444390() & 1) == 0
          || (v173[4] != v249[4] || v173[5] != v249[5]) && (sub_245444390() & 1) == 0)
        {
          goto LABEL_108;
        }
        v178 = (uint64_t)v173 + *(int *)(v157 + 28);
        v179 = v124 + *(int *)(v245 + 48);
        sub_2453BA364(v178, v124, type metadata accessor for ReplicatorRecord.ID.Ownership);
        sub_2453BA364((uint64_t)v241, v179, type metadata accessor for ReplicatorRecord.ID.Ownership);
        v180 = v124;
        v181 = v246;
        v182 = v124;
        v183 = v240;
        if (v240(v180, 1, v246) == 1)
        {
          v184 = v183(v179, 1, v181);
          v124 = v182;
          if (v184 == 1)
            goto LABEL_130;
          goto LABEL_127;
        }
        sub_2453BA364(v182, (uint64_t)v243, type metadata accessor for ReplicatorRecord.ID.Ownership);
        if (v183(v179, 1, v181) != 1)
          break;
        (*(void (**)(char *, uint64_t))(v239 + 8))(v243, v181);
        v124 = v182;
        v172 = v236;
LABEL_127:
        sub_2453D055C(v124, (uint64_t *)&unk_25440E540);
LABEL_128:
        v157 = v244;
        v173 = v242;
LABEL_108:
        sub_2453BA3A8((uint64_t)v173, type metadata accessor for ReplicatorRecord.ID);
        v171 = (v171 + 1) & v247;
        if (((*(unint64_t *)((char *)&v172->isa + ((v171 >> 3) & 0xFFFFFFFFFFFFF8)) >> v171) & 1) == 0)
          goto LABEL_68;
      }
      v185 = v239;
      v186 = v226;
      (*(void (**)(char *, uint64_t, uint64_t))(v239 + 32))(v226, v179, v181);
      v187 = sub_245443AF0();
      v188 = *(void (**)(char *, uint64_t))(v185 + 8);
      v188(v186, v181);
      v188(v243, v181);
      v124 = v227;
      v172 = v236;
      if ((v187 & 1) == 0)
      {
        sub_2453BA3A8(v227, type metadata accessor for ReplicatorRecord.ID.Ownership);
        goto LABEL_128;
      }
LABEL_130:
      sub_2453BA3A8(v124, type metadata accessor for ReplicatorRecord.ID.Ownership);
      v157 = v244;
      v173 = v242;
      v189 = &v242[*(int *)(v244 + 32)];
      if ((*(_QWORD *)v189 != *(_QWORD *)v234 || *((_QWORD *)v189 + 1) != *((_QWORD *)v234 + 1))
        && (sub_245444390() & 1) == 0)
      {
        goto LABEL_108;
      }
      sub_2453BA3A8((uint64_t)v173, type metadata accessor for ReplicatorRecord.ID);
      swift_bridgeObjectRelease();
      v190 = swift_isUniquelyReferenced_nonNull_native();
      v191 = v251;
      isa = v251;
      v251 = 0x8000000000000000;
      a1 = v228;
      v73 = (uint64_t)v229;
      if ((v190 & 1) == 0)
      {
        sub_245427618();
        v191 = isa;
      }
      v137 = v218;
      sub_2453D062C((uint64_t)v191[6].isa + v175, v218, type metadata accessor for ReplicatorRecord.ID);
      sub_245429438(v171);
      v251 = isa;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v235 + 56))(v137, 0, 1, v157);
LABEL_69:
      swift_endAccess();
      sub_2453D055C(v137, &qword_257464538);
      sub_2453BA3A8((uint64_t)v249, type metadata accessor for ReplicatorRecord.ID);
      v16 = v232;
      v7 = (unint64_t)&qword_2574649A0;
      v136 = v221;
      v135 = v231;
    }

    swift_release();
    swift_beginAccess();
    if (!v251[2].isa)
      goto LABEL_139;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v196 = v230;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (uint64_t)v196;
}

uint64_t sub_2453EA18C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  swift_bridgeObjectRetain();
  v6 = swift_bridgeObjectRetain();
  v7 = sub_2453F61C8(v6, a1, a2);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a3 = v7;
  return result;
}

uint64_t sub_2453EA208()
{
  void *v0;
  id v1;
  uint64_t v2;
  id v4;
  id v5[2];

  v5[1] = *(id *)MEMORY[0x24BDAC8D0];
  v0 = (void *)sub_2453E37FC();
  if (v0)
  {
    v5[0] = 0;
    if ((objc_msgSend(v0, sel_syncAndReturnError_, v5) & 1) != 0)
    {
      v1 = v5[0];
    }
    else
    {
      v4 = v5[0];
      sub_2454439B8();

      swift_willThrow();
    }
    return swift_unknownObjectRelease();
  }
  else
  {
    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v2 = 3;
    *(_QWORD *)(v2 + 8) = 0;
    return swift_willThrow();
  }
}

uint64_t sub_2453EA2F8(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  unsigned __int8 v12;
  char v13;
  id v14;
  uint64_t v15;
  uint64_t result;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  __int128 v25;
  uint64_t v26;
  id v27[7];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v4 = *(void **)a2;
  v23 = *(void **)(a2 + 16);
  v24 = *(void **)(a2 + 8);
  v21 = *(void **)(a2 + 32);
  v22 = *(void **)(a2 + 24);
  v19 = *(void **)(a2 + 48);
  v20 = *(void **)(a2 + 40);
  v25 = *(_OWORD *)(a2 + 56);
  v18 = *(_QWORD *)(a2 + 72);
  swift_beginAccess();
  sub_2453F1C20(a2);
  sub_245424B14(v27, (_QWORD *)a2);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_2453EA5D0();
  sub_2453EABC4();
  sub_2453E103C();
  sub_2453F1C20(a2);
  v5 = sub_2453E37FC();
  if (v5)
  {
    v6 = (void *)v5;
    v27[0] = v4;
    v27[1] = v24;
    v27[2] = v23;
    v27[3] = v22;
    v27[4] = v21;
    v27[5] = v20;
    v27[6] = v19;
    v28 = v25;
    v29 = v18;
    sub_245443994();
    swift_allocObject();
    sub_245443988();
    sub_2453F6E38();
    v7 = sub_24544397C();
    if (v26)
    {
      result = swift_unexpectedError();
      __break(1u);
    }
    else
    {
      v9 = v7;
      v10 = v8;
      v11 = (void *)sub_245443A6C();
      sub_2453BDCF8(v9, v10);
      swift_release();
      sub_2453F50B8(a2);
      v27[0] = 0;
      v12 = objc_msgSend(v6, sel_registerClientWithParameters_error_, v11, v27);

      if ((v12 & 1) != 0)
      {
        v13 = *(_BYTE *)(a1
                       + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_hasFetchedDevices);
        v14 = v27[0];
        if ((v13 & 1) == 0)
          sub_2453E12B4();
        sub_2453EB090();
      }
      else
      {
        v17 = v27[0];
        sub_2454439B8();

        swift_willThrow();
      }
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    sub_2453F50B8(a2);
    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v15 = 3;
    *(_QWORD *)(v15 + 8) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_2453EA5D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  int v11;
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint32_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  dispatch_queue_t v51;
  uint64_t v52;
  uint64_t v53;
  int out_token[2];
  uint64_t aBlock[10];

  aBlock[9] = *MEMORY[0x24BDAC8D0];
  v1 = sub_245443CDC();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (uint64_t *)((char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE5610], v1);
  v51 = v5;
  LOBYTE(v5) = sub_245443CE8();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    sub_2453EF334(&OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_zoneChangeTokens);
    v52 = v0;
    v6 = (uint64_t *)(v0
                   + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_clientDescriptors);
    swift_beginAccess();
    v7 = *v6;
    v8 = *(_QWORD *)(*v6 + 16);
    v9 = MEMORY[0x24BEE4AF8];
    if (!v8)
    {
LABEL_12:
      v53 = v9;
      if (qword_25440EC10 == -1)
        goto LABEL_13;
      goto LABEL_34;
    }
    aBlock[0] = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_2453F1D54(0, v8, 0);
    v9 = aBlock[0];
    v10 = sub_2453F3228(v7);
    v12 = v11;
    v14 = v13 & 1;
    v50 = v7 + 56;
    while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << *(_BYTE *)(v7 + 32))
    {
      if (((*(_QWORD *)(v50 + (((unint64_t)v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_31;
      if (*(_DWORD *)(v7 + 36) != v12)
        goto LABEL_32;
      LODWORD(v53) = v14;
      v15 = *(_QWORD *)(v7 + 48) + 80 * v10;
      v16 = *(_QWORD *)(v15 + 48);
      v17 = *(_QWORD *)(v15 + 56);
      aBlock[0] = v9;
      v18 = *(_QWORD *)(v9 + 16);
      v19 = *(_QWORD *)(v9 + 24);
      swift_bridgeObjectRetain();
      if (v18 >= v19 >> 1)
      {
        sub_2453F1D54(v19 > 1, v18 + 1, 1);
        v9 = aBlock[0];
      }
      *(_QWORD *)(v9 + 16) = v18 + 1;
      v20 = v9 + 16 * v18;
      *(_QWORD *)(v20 + 32) = v16;
      *(_QWORD *)(v20 + 40) = v17;
      v21 = sub_2453F32C8(v10, v12, v53 & 1, v7);
      v10 = v21;
      v12 = v22;
      v14 = v23 & 1;
      if (!--v8)
      {
        sub_2453F72DC(v21, v22, v14);
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
LABEL_34:
  swift_once();
LABEL_13:
  v24 = sub_245443C04();
  __swift_project_value_buffer(v24, (uint64_t)qword_25440EBF8);
  v25 = v53;
  swift_bridgeObjectRetain_n();
  v26 = sub_245443BEC();
  v27 = sub_245444000();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc();
    v29 = swift_slowAlloc();
    aBlock[0] = v29;
    *(_DWORD *)v28 = 136446210;
    v30 = swift_bridgeObjectRetain();
    v31 = MEMORY[0x2495338AC](v30, MEMORY[0x24BEE0D00]);
    v33 = v32;
    swift_bridgeObjectRelease();
    *(_QWORD *)out_token = sub_2453BDB24(v31, v33, aBlock);
    sub_245444078();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_2453B6000, v26, v27, "Registering for zone change notifications: %{public}s", v28, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x249534440](v29, -1, -1);
    MEMORY[0x249534440](v28, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v34 = v52;
  v35 = *(_QWORD *)(v25 + 16);
  if (v35)
  {
    v36 = (char *)MEMORY[0x24BEE4AF8];
    v37 = v25 + 40;
    do
    {
      out_token[0] = -1;
      v38 = swift_allocObject();
      swift_unknownObjectWeakInit();
      aBlock[4] = (uint64_t)sub_2453F73C8;
      aBlock[5] = v38;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_2454171FC;
      aBlock[3] = (uint64_t)&block_descriptor_130;
      v39 = _Block_copy(aBlock);
      swift_bridgeObjectRetain();
      swift_release();
      v40 = sub_245443DD8();
      swift_bridgeObjectRelease();
      v41 = notify_register_dispatch((const char *)(v40 + 32), out_token, v51, v39);
      swift_release();
      _Block_release(v39);
      if (v41)
      {
        v42 = sub_245443BEC();
        v43 = sub_245443FE8();
        if (os_log_type_enabled(v42, v43))
        {
          v44 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v44 = 0;
          _os_log_impl(&dword_2453B6000, v42, v43, "Could not register for zone change notifications", v44, 2u);
          MEMORY[0x249534440](v44, -1, -1);
        }

      }
      else
      {
        v45 = out_token[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v36 = sub_2453F1984(0, *((_QWORD *)v36 + 2) + 1, 1, v36);
        v47 = *((_QWORD *)v36 + 2);
        v46 = *((_QWORD *)v36 + 3);
        if (v47 >= v46 >> 1)
          v36 = sub_2453F1984((char *)(v46 > 1), v47 + 1, 1, v36);
        *((_QWORD *)v36 + 2) = v47 + 1;
        *(_DWORD *)&v36[4 * v47 + 32] = v45;
      }
      v34 = v52;
      v37 += 16;
      --v35;
    }
    while (v35);
  }
  else
  {
    v36 = (char *)MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v34
            + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_zoneChangeTokens) = v36;
  return swift_bridgeObjectRelease();
}

uint64_t sub_2453EABC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  int v12;
  int v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint32_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  void *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  dispatch_queue_t v46;
  uint64_t v47;
  _QWORD aBlock[6];
  int out_token;
  uint64_t v50;

  v1 = v0;
  v50 = *MEMORY[0x24BDAC8D0];
  v2 = sub_245443CDC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (uint64_t *)((char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE5610], v2);
  v46 = v6;
  LOBYTE(v6) = sub_245443CE8();
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
    goto LABEL_31;
  sub_2453EF334(&OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_messageTokens);
  v7 = (uint64_t *)(v1
                 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_clientDescriptors);
  swift_beginAccess();
  v8 = *v7;
  v9 = *(_QWORD *)(*v7 + 16);
  v10 = MEMORY[0x24BEE4AF8];
  if (!v9)
    goto LABEL_12;
  v44 = v1;
  aBlock[0] = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  sub_2453F1D54(0, v9, 0);
  v10 = aBlock[0];
  v11 = sub_2453F3228(v8);
  v13 = v12;
  v15 = v14 & 1;
  v45 = v8 + 56;
  do
  {
    if (v11 < 0 || v11 >= 1 << *(_BYTE *)(v8 + 32))
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
    }
    if (((*(_QWORD *)(v45 + (((unint64_t)v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
      goto LABEL_29;
    if (*(_DWORD *)(v8 + 36) != v13)
      goto LABEL_30;
    LODWORD(v47) = v15;
    v16 = *(_QWORD *)(v8 + 48) + 80 * v11;
    v17 = *(_QWORD *)(v16 + 32);
    v18 = *(_QWORD *)(v16 + 40);
    aBlock[0] = v10;
    v19 = *(_QWORD *)(v10 + 16);
    v20 = *(_QWORD *)(v10 + 24);
    swift_bridgeObjectRetain();
    if (v19 >= v20 >> 1)
    {
      sub_2453F1D54(v20 > 1, v19 + 1, 1);
      v10 = aBlock[0];
    }
    *(_QWORD *)(v10 + 16) = v19 + 1;
    v21 = v10 + 16 * v19;
    *(_QWORD *)(v21 + 32) = v17;
    *(_QWORD *)(v21 + 40) = v18;
    v22 = sub_2453F32C8(v11, v13, v47 & 1, v8);
    v11 = v22;
    v13 = v23;
    v15 = v24 & 1;
    --v9;
  }
  while (v9);
  sub_2453F72DC(v22, v23, v15);
  swift_bridgeObjectRelease();
  v1 = v44;
LABEL_12:
  v25 = *(_QWORD *)(v10 + 16);
  v47 = v10;
  if (v25)
  {
    v26 = v10 + 40;
    v27 = (char *)MEMORY[0x24BEE4AF8];
    v28 = &unk_2516556B8;
    do
    {
      out_token = -1;
      v29 = swift_allocObject();
      v30 = v1;
      swift_unknownObjectWeakInit();
      aBlock[4] = sub_2453F72E8;
      aBlock[5] = v29;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_2454171FC;
      aBlock[3] = &block_descriptor_120;
      v31 = _Block_copy(aBlock);
      swift_bridgeObjectRetain();
      swift_release();
      v32 = sub_245443DD8();
      swift_bridgeObjectRelease();
      v33 = notify_register_dispatch((const char *)(v32 + 32), &out_token, v46, v31);
      swift_release();
      _Block_release(v31);
      if (v33)
      {
        if (qword_25440EC10 != -1)
          swift_once();
        v34 = sub_245443C04();
        __swift_project_value_buffer(v34, (uint64_t)qword_25440EBF8);
        v35 = sub_245443BEC();
        v36 = sub_245443FE8();
        if (os_log_type_enabled(v35, v36))
        {
          v37 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v37 = 0;
          _os_log_impl(&dword_2453B6000, v35, v36, "Could not register for message notifications", v37, 2u);
          MEMORY[0x249534440](v37, -1, -1);
        }

        v1 = v30;
      }
      else
      {
        v38 = v28;
        v39 = out_token;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v27 = sub_2453F1984(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
        v41 = *((_QWORD *)v27 + 2);
        v40 = *((_QWORD *)v27 + 3);
        if (v41 >= v40 >> 1)
          v27 = sub_2453F1984((char *)(v40 > 1), v41 + 1, 1, v27);
        *((_QWORD *)v27 + 2) = v41 + 1;
        *(_DWORD *)&v27[4 * v41 + 32] = v39;
        v28 = v38;
      }
      v26 += 16;
      --v25;
    }
    while (v25);
  }
  else
  {
    v27 = (char *)MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_messageTokens) = v27;
  return swift_bridgeObjectRelease();
}

void sub_2453EB090()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  id v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v44;
  char v45;
  char v46;
  int isUniquelyReferenced_nonNull_native;
  int v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  char v56;
  _QWORD *v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  id v65;
  void *v66;
  uint64_t v67;
  id v68;
  id v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  void *v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  NSObject *v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  _QWORD v82[4];
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  _QWORD *v92;
  uint64_t v93;
  id v94[6];

  v94[4] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = sub_245443B14();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v89 = (char *)v82 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v87 = (char *)v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v91 = (char *)v82 - v7;
  v8 = type metadata accessor for ReplicatorRecord.ID(0);
  v86 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v92 = (_QWORD *)((char *)v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v90 = type metadata accessor for ReplicatorRecordVersion();
  v10 = *(_QWORD *)(v90 - 8);
  MEMORY[0x24BDAC7A8](v90);
  v12 = (char *)v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)sub_245443CDC();
  v14 = *(v13 - 1);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (_QWORD *)((char *)v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *(void **)((char *)v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *v16 = v17;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v14 + 104))(v16, *MEMORY[0x24BEE5610], v13);
  v18 = v17;
  LOBYTE(v17) = sub_245443CE8();
  v19 = (*(uint64_t (**)(_QWORD *, _QWORD *))(v14 + 8))(v16, v13);
  if ((v17 & 1) == 0)
    goto LABEL_45;
  v88 = v10;
  v20 = sub_2453E37FC(v19);
  if (!v20)
  {
    if (qword_25440EC10 != -1)
      swift_once();
    v61 = sub_245443C04();
    __swift_project_value_buffer(v61, (uint64_t)qword_25440EBF8);
    v62 = sub_245443BEC();
    v63 = sub_245443FE8();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v64 = 0;
      _os_log_impl(&dword_2453B6000, v62, v63, "Could not fetch record versions because target could not be created", v64, 2u);
      MEMORY[0x249534440](v64, -1, -1);
    }

    return;
  }
  v21 = (void *)v20;
  v82[2] = v8;
  v83 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_hasFetchedRecordVersions;
  v84 = v0;
  *((_BYTE *)v0
  + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_hasFetchedRecordVersions) = 0;
  swift_beginAccess();
  v22 = swift_bridgeObjectRetain();
  v23 = sub_2453F2688(v22);
  swift_bridgeObjectRelease();
  v94[0] = v23;
  sub_245443994();
  swift_allocObject();
  sub_245443988();
  sub_2453F6D6C();
  v24 = sub_24544397C();
  v26 = v25;
  v27 = (void *)sub_245443A6C();
  sub_2453BDCF8(v24, v26);
  swift_release();
  swift_release();
  v94[0] = 0;
  v28 = objc_msgSend(v21, sel_recordVersionsWithParameters_error_, v27, v94);

  v29 = v94[0];
  if (!v28)
  {
    v65 = v94[0];
    v66 = (void *)sub_2454439B8();

    swift_willThrow();
    if (qword_25440EC10 != -1)
      swift_once();
    v67 = sub_245443C04();
    __swift_project_value_buffer(v67, (uint64_t)qword_25440EBF8);
    v68 = v66;
    v69 = v66;
    v70 = sub_245443BEC();
    v71 = sub_245443FE8();
    if (os_log_type_enabled(v70, v71))
    {
      v72 = (uint8_t *)swift_slowAlloc();
      v73 = (void *)swift_slowAlloc();
      v94[0] = v73;
      *(_DWORD *)v72 = 136315138;
      v93 = (uint64_t)v66;
      v74 = v66;
      __swift_instantiateConcreteTypeFromMangledName(&qword_257464988);
      v75 = sub_245443DCC();
      v93 = sub_2453BDB24(v75, v76, (uint64_t *)v94);
      sub_245444078();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_2453B6000, v70, v71, "Could not fetch record versions: %s", v72, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x249534440](v73, -1, -1);
      MEMORY[0x249534440](v72, -1, -1);
      swift_unknownObjectRelease();

    }
    else
    {
      swift_unknownObjectRelease();

    }
    return;
  }
  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v30 = sub_245443A78();
  v32 = v31;
  sub_2453F6DB0();
  sub_24544394C();
  sub_2453BDCF8(v30, v32);
  v82[3] = v21;
  swift_release();
  v33 = v94[0];
  v34 = v92;
  if (!v94[0])
  {
    __break(1u);
LABEL_48:
    sub_2454443A8();
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    return;
  }
  v35 = v29;

  v36 = v33[2];
  if (!v36)
  {
    v39 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_37:
    swift_bridgeObjectRelease();
    v1 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_recordVersions;
    v13 = v84;
    *(_QWORD *)((char *)v84
              + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_recordVersions) = v39;
    swift_bridgeObjectRelease();
    *((_BYTE *)v13 + v83) = 1;
    if (qword_25440EC10 != -1)
      goto LABEL_46;
    goto LABEL_38;
  }
  v37 = v33;
  v38 = (uint64_t)v33 + ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80));
  v88 = *(_QWORD *)(v88 + 72);
  v82[1] = v37;
  swift_bridgeObjectRetain();
  v39 = (_QWORD *)MEMORY[0x24BEE4B00];
  v40 = (uint64_t)v91;
  v85 = v12;
  while (1)
  {
    sub_2453BA364(v38, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordVersion);
    sub_2453BA364((uint64_t)v12, (uint64_t)v34, type metadata accessor for ReplicatorRecord.ID);
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 16))(v40, &v12[*(int *)(v90 + 20)], v1);
    v43 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56);
    v43(v40, 0, 1, v1);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v40, 1, v1) == 1)
    {
      sub_2453D055C(v40, (uint64_t *)&unk_25440E8F0);
      swift_bridgeObjectRetain();
      v44 = sub_2453C656C(v34);
      v46 = v45;
      swift_bridgeObjectRelease();
      if ((v46 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v94[0] = v39;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_2453CAF28();
          v39 = v94[0];
        }
        sub_2453BA3A8(v39[6] + *(_QWORD *)(v86 + 72) * v44, type metadata accessor for ReplicatorRecord.ID);
        v42 = (uint64_t)v87;
        (*(void (**)(char *, unint64_t, uint64_t))(v2 + 32))(v87, v39[7] + *(_QWORD *)(v2 + 72) * v44, v1);
        sub_245420A6C(v44, (uint64_t)v39);
        swift_bridgeObjectRelease();
        v41 = 0;
        v40 = (uint64_t)v91;
      }
      else
      {
        v41 = 1;
        v40 = (uint64_t)v91;
        v42 = (uint64_t)v87;
      }
      v43(v42, v41, 1, v1);
      v34 = v92;
      sub_2453BA3A8((uint64_t)v92, type metadata accessor for ReplicatorRecord.ID);
      sub_2453D055C(v42, (uint64_t *)&unk_25440E8F0);
      v12 = v85;
      goto LABEL_9;
    }
    v13 = *(_QWORD **)(v2 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v13)(v89, v40, v1);
    v48 = swift_isUniquelyReferenced_nonNull_native();
    v94[0] = v39;
    v50 = sub_2453C656C(v34);
    v51 = v39[2];
    v52 = (v49 & 1) == 0;
    v53 = v51 + v52;
    if (__OFADD__(v51, v52))
      break;
    v54 = v49;
    if (v39[3] >= v53)
    {
      if ((v48 & 1) == 0)
        sub_2453CAF28();
      v40 = (uint64_t)v91;
      v57 = v94[0];
      if ((v54 & 1) == 0)
        goto LABEL_19;
    }
    else
    {
      sub_2453C824C(v53, v48);
      v55 = sub_2453C656C(v92);
      if ((v54 & 1) != (v56 & 1))
        goto LABEL_48;
      v50 = v55;
      v40 = (uint64_t)v91;
      v57 = v94[0];
      if ((v54 & 1) == 0)
      {
LABEL_19:
        v57[(v50 >> 6) + 8] |= 1 << v50;
        v34 = v92;
        sub_2453BA364((uint64_t)v92, v57[6] + *(_QWORD *)(v86 + 72) * v50, type metadata accessor for ReplicatorRecord.ID);
        ((void (*)(unint64_t, char *, uint64_t))v13)(v57[7] + *(_QWORD *)(v2 + 72) * v50, v89, v1);
        v58 = v57[2];
        v59 = __OFADD__(v58, 1);
        v60 = v58 + 1;
        if (v59)
          goto LABEL_44;
        v57[2] = v60;
        goto LABEL_25;
      }
    }
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 40))(v57[7] + *(_QWORD *)(v2 + 72) * v50, v89, v1);
    v34 = v92;
LABEL_25:
    v39 = v94[0];
    swift_bridgeObjectRelease();
    sub_2453BA3A8((uint64_t)v34, type metadata accessor for ReplicatorRecord.ID);
LABEL_9:
    sub_2453BA3A8((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordVersion);
    v38 += v88;
    if (!--v36)
    {
      swift_bridgeObjectRelease();
      goto LABEL_37;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  swift_once();
LABEL_38:
  v77 = sub_245443C04();
  __swift_project_value_buffer(v77, (uint64_t)qword_25440EBF8);
  v78 = v13;
  v79 = sub_245443BEC();
  v80 = sub_245444000();
  if (os_log_type_enabled(v79, v80))
  {
    v81 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v81 = 134217984;
    v94[0] = *(id *)(*(_QWORD *)((char *)v13 + v1) + 16);
    sub_245444078();

    _os_log_impl(&dword_2453B6000, v79, v80, "Fetched %ld records", v81, 0xCu);
    MEMORY[0x249534440](v81, -1, -1);
  }
  else
  {

    v79 = v78;
  }

  v94[0] = *(id *)((char *)v13 + v1);
  swift_bridgeObjectRetain();
  sub_245443C4C();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
}

uint64_t sub_2453EBBAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  unsigned __int8 v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  swift_beginAccess();
  sub_245428CEC(a2, (uint64_t)&v29);
  v3 = v30;
  v26 = (uint64_t)v29;
  v4 = v31;
  v5 = v32;
  swift_endAccess();
  v24 = v4;
  sub_2453F1C90(v26, v3);
  sub_2453EA5D0();
  sub_2453EABC4();
  sub_2453EBE60();
  v6 = (void *)*a2;
  v7 = a2[1];
  v27 = (uint64_t)a2;
  swift_bridgeObjectRetain();
  v8 = sub_2453E37FC();
  if (v8)
  {
    v9 = (void *)v8;
    v29 = v6;
    v30 = v7;
    sub_245443994();
    swift_allocObject();
    sub_245443988();
    sub_2453F7298();
    v10 = sub_24544397C();
    if (v25)
    {
      result = swift_unexpectedError();
      __break(1u);
    }
    else
    {
      v12 = v10;
      v13 = v11;
      v14 = (void *)sub_245443A6C();
      sub_2453BDCF8(v12, v13);
      swift_bridgeObjectRelease();
      swift_release();
      v29 = 0;
      v15 = objc_msgSend(v9, sel_unregisterClientWithParameters_error_, v14, &v29, v24, v5);

      v16 = v29;
      if ((v15 & 1) != 0)
      {
        v17 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_recordVersions;
        sub_2453F1C20(v27);
        v18 = v16;
        v19 = swift_bridgeObjectRetain();
        v20 = sub_2453F6894(v19, v27, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_2453F6470);
        sub_2453F50B8(v27);
        swift_bridgeObjectRelease();
        *(_QWORD *)(a1 + v17) = v20;
        swift_unknownObjectRelease();
        return swift_bridgeObjectRelease();
      }
      else
      {
        v23 = v29;
        sub_2454439B8();

        swift_willThrow();
        return swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v22 = 3;
    *(_QWORD *)(v22 + 8) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_2453EBE60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v1 = sub_245443CDC();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (uint64_t *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE5610], v1);
  v6 = v5;
  LOBYTE(v5) = sub_245443CE8();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    v8 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_deviceToken;
    v9 = *(_DWORD *)(v0
                   + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_deviceToken);
    if (v9 != -1)
    {
      v10 = v0
          + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_clientDescriptors;
      result = swift_beginAccess();
      if (!*(_QWORD *)(*(_QWORD *)v10 + 16))
      {
        result = notify_cancel(v9);
        *(_DWORD *)(v0 + v8) = -1;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_2453EBF6C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  id v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  __int128 v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  swift_bridgeObjectRetain();
  v9 = sub_2453E37FC();
  if (!v9)
  {
    swift_bridgeObjectRelease();
    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v27 = 3;
    *(_QWORD *)(v27 + 8) = 0;
    swift_willThrow();
    return;
  }
  v10 = (void *)v9;
  v33 = a1;
  v34 = a2;
  sub_245443994();
  swift_allocObject();
  sub_245443988();
  sub_2453F73FC();
  v11 = sub_24544397C();
  if (!v3)
  {
    v13 = v11;
    v14 = v12;
    v15 = (void *)sub_245443A6C();
    sub_2453BDCF8(v13, v14);
    swift_bridgeObjectRelease();
    swift_release();
    v33 = 0;
    v16 = objc_msgSend(v10, sel_clientDescriptorWithParameters_error_, v15, &v33);

    v17 = v33;
    if (!v16)
    {
      v28 = v33;
      sub_2454439B8();

      swift_willThrow();
      swift_unknownObjectRelease();
      return;
    }
    sub_245443964();
    swift_allocObject();
    sub_245443958();
    v5 = sub_245443A78();
    v4 = v18;
    sub_2453F7440();
    sub_24544394C();
    v31 = v17;
    v32 = v16;
    sub_2453BDCF8(v5, v4);
    swift_release();
    v19 = v34;
    if (v34)
    {
      v20 = v33;
      v21 = v35;
      v22 = v36;
      v24 = v37;
      v23 = v38;
      v25 = v39;
      v30 = v40;
      v29 = v41;
      v26 = v31;
      swift_unknownObjectRelease();

      *(_QWORD *)a3 = v20;
      *(_QWORD *)(a3 + 8) = v19;
      *(_QWORD *)(a3 + 16) = v21;
      *(_QWORD *)(a3 + 24) = v22;
      *(_QWORD *)(a3 + 32) = v24;
      *(_QWORD *)(a3 + 40) = v23;
      *(_QWORD *)(a3 + 48) = v25;
      *(_OWORD *)(a3 + 56) = v30;
      *(_QWORD *)(a3 + 72) = v29;
      return;
    }
    __break(1u);
  }
  swift_unexpectedError();
  __break(1u);
  sub_2453BDCF8(v5, v4);
  swift_unexpectedError();
  __break(1u);
}

void sub_2453EC248(void *a1@<X0>, void *a2@<X1>, void (*a3)(void)@<X3>, SEL *a4@<X5>, _BYTE *a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  id v29[3];

  v29[2] = *(id *)MEMORY[0x24BDAC8D0];
  swift_bridgeObjectRetain();
  v11 = sub_2453E37FC();
  if (!v11)
  {
    swift_bridgeObjectRelease();
    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v25 = 3;
    *(_QWORD *)(v25 + 8) = 0;
    swift_willThrow();
    return;
  }
  v12 = (void *)v11;
  v29[0] = a1;
  v29[1] = a2;
  sub_245443994();
  swift_allocObject();
  sub_245443988();
  a3();
  v13 = sub_24544397C();
  if (!v5)
  {
    v15 = v13;
    v16 = v14;
    v17 = (void *)sub_245443A6C();
    sub_2453BDCF8(v15, v16);
    swift_bridgeObjectRelease();
    swift_release();
    v29[0] = 0;
    v18 = objc_msgSend(v12, *a4, v17, v29);

    v19 = v29[0];
    if (!v18)
    {
      v26 = v29[0];
      sub_2454439B8();

      swift_willThrow();
      swift_unknownObjectRelease();
      return;
    }
    sub_245443964();
    swift_allocObject();
    sub_245443958();
    v20 = sub_245443A78();
    v22 = v21;
    sub_2453F7754();
    sub_24544394C();
    sub_2453BDCF8(v20, v22);
    swift_release();
    if (LOBYTE(v29[0]) != 2)
    {
      v23 = (uint64_t)v29[0] & 1;
      v24 = v19;
      swift_unknownObjectRelease();

      *a5 = v23;
      return;
    }
    __break(1u);
  }
  v27 = swift_unexpectedError();
  __break(1u);
  sub_2453BDCF8(v27, v28);
  swift_unexpectedError();
  __break(1u);
}

uint64_t sub_2453EC4DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t result;
  id v19[2];

  v19[1] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = type metadata accessor for ReplicationXPCServerParameters.SendMessage(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2453BA364(a1, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
  v6 = &v5[*(int *)(v3 + 20)];
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  v7 = &v5[*(int *)(v3 + 24)];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  v8 = sub_2453E37FC();
  if (!v8)
  {
    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v16 = 3;
    *(_QWORD *)(v16 + 8) = 0;
    swift_willThrow();
    return sub_2453BA3A8((uint64_t)v5, type metadata accessor for ReplicationXPCServerParameters.SendMessage);
  }
  v9 = (void *)v8;
  sub_245443994();
  swift_allocObject();
  sub_245443988();
  sub_2453B8BF4(&qword_257464920, type metadata accessor for ReplicationXPCServerParameters.SendMessage, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerParameters.SendMessage);
  v10 = sub_24544397C();
  if (!v1)
  {
    v12 = v10;
    v13 = v11;
    v14 = (void *)sub_245443A6C();
    sub_2453BDCF8(v12, v13);
    swift_release();
    v19[0] = 0;
    LOBYTE(v13) = objc_msgSend(v9, sel_sendMessageWithParameters_error_, v14, v19);

    if ((v13 & 1) != 0)
    {
      v15 = v19[0];
    }
    else
    {
      v17 = v19[0];
      sub_2454439B8();

      swift_willThrow();
    }
    swift_unknownObjectRelease();
    return sub_2453BA3A8((uint64_t)v5, type metadata accessor for ReplicationXPCServerParameters.SendMessage);
  }
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_2453EC710(uint64_t a1, uint64_t a2, double a3, uint64_t a4, void (*a5)(uint64_t *), uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[7];

  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464918);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (_QWORD *)((char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for ReplicationXPCServerParameters.SendMessage(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&aBlock[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2453BA364(a1, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
  v17 = &v16[*(int *)(v14 + 20)];
  *(double *)v17 = a3;
  v17[8] = 0;
  v18 = &v16[*(int *)(v14 + 24)];
  *(_QWORD *)v18 = a2;
  v18[8] = 0;
  v19 = sub_2453E37FC();
  if (v19)
  {
    v20 = (void *)v19;
    sub_245443994();
    swift_allocObject();
    sub_245443988();
    sub_2453B8BF4(&qword_257464920, type metadata accessor for ReplicationXPCServerParameters.SendMessage, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerParameters.SendMessage);
    v21 = sub_24544397C();
    v23 = v22;
    v24 = (void *)sub_245443A6C();
    sub_2453BDCF8(v21, v23);
    swift_release();
    v25 = swift_allocObject();
    *(_QWORD *)(v25 + 16) = a5;
    *(_QWORD *)(v25 + 24) = a6;
    aBlock[4] = sub_2453F6D18;
    aBlock[5] = v25;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_2453ECBE4;
    aBlock[3] = &block_descriptor_86;
    v26 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v20, sel_sendMessageExpectingResponseWithParameters_completion_, v24, v26);
    _Block_release(v26);
    swift_unknownObjectRelease();

  }
  else
  {
    sub_2453CBA28();
    v27 = swift_allocError();
    *(_BYTE *)v28 = 3;
    *(_QWORD *)(v28 + 8) = 0;
    *v13 = v27;
    swift_storeEnumTagMultiPayload();
    a5(v13);
    sub_2453D055C((uint64_t)v13, &qword_257464918);
  }
  return sub_2453BA3A8((uint64_t)v16, type metadata accessor for ReplicationXPCServerParameters.SendMessage);
}

uint64_t sub_2453EC9C8(uint64_t a1, void *a2, void (*a3)(uint64_t *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(uint64_t *);
  id v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t *);

  v21 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464918);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (uint64_t *)((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574650C0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2453D02E0(a1, (uint64_t)v10, &qword_2574650C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    v15 = v21;
    sub_2453D055C((uint64_t)v10, &qword_2574650C0);
    if (a2)
    {
      *v7 = (uint64_t)a2;
      swift_storeEnumTagMultiPayload();
      v16 = a2;
    }
    else
    {
      sub_2453CBA28();
      v18 = swift_allocError();
      *(_BYTE *)v19 = 4;
      *(_QWORD *)(v19 + 8) = 0;
      *v7 = v18;
      swift_storeEnumTagMultiPayload();
    }
    v15(v7);
    return sub_2453D055C((uint64_t)v7, &qword_257464918);
  }
  else
  {
    sub_2453D062C((uint64_t)v10, (uint64_t)v14, type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage);
    sub_2453BA364((uint64_t)v14, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
    swift_storeEnumTagMultiPayload();
    v21(v7);
    sub_2453D055C((uint64_t)v7, &qword_257464918);
    return sub_2453BA3A8((uint64_t)v14, type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage);
  }
}

uint64_t sub_2453ECBE4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  void (*v10)(char *, void *);
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v15;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574650C0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = (char *)&v15 - v8;
  v10 = *(void (**)(char *, void *))(a1 + 32);
  if (a2)
  {
    sub_245436DBC(a2, (uint64_t)&v15 - v8);
    v11 = type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 0, 1, v11);
  }
  else
  {
    v12 = type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 1, 1, v12);
  }
  swift_retain();
  v13 = a3;
  v10(v9, a3);

  swift_release();
  return sub_2453D055C((uint64_t)v9, &qword_2574650C0);
}

void sub_2453ECCE4(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  id v26[2];

  v26[1] = *(id *)MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E760);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_245445910;
  *(_QWORD *)(v7 + 32) = a1;
  *(_QWORD *)(v7 + 40) = a2;
  swift_bridgeObjectRetain();
  v8 = sub_2453E37FC();
  if (!v8)
  {
    swift_bridgeObjectRelease();
    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v22 = 3;
    *(_QWORD *)(v22 + 8) = 0;
    swift_willThrow();
    return;
  }
  v9 = (void *)v8;
  v26[0] = (id)v7;
  sub_245443994();
  swift_allocObject();
  sub_245443988();
  sub_2453F7340();
  v10 = sub_24544397C();
  if (!v3)
  {
    v12 = v10;
    v13 = v11;
    v14 = (void *)sub_245443A6C();
    sub_2453BDCF8(v12, v13);
    swift_bridgeObjectRelease();
    swift_release();
    v26[0] = 0;
    v15 = objc_msgSend(v9, sel_messagesWithParameters_error_, v14, v26);

    v16 = v26[0];
    if (!v15)
    {
      v23 = v26[0];
      sub_2454439B8();

      swift_willThrow();
      swift_unknownObjectRelease();
      return;
    }
    sub_245443964();
    swift_allocObject();
    sub_245443958();
    v17 = sub_245443A78();
    v19 = v18;
    sub_2453F7384();
    sub_24544394C();
    sub_2453BDCF8(v17, v19);
    swift_release();
    v20 = v26[0];
    if (v26[0])
    {
      v21 = v16;
      swift_unknownObjectRelease();

      *a3 = v20;
      return;
    }
    __break(1u);
  }
  v24 = swift_unexpectedError();
  __break(1u);
  sub_2453BDCF8(v24, v25);
  swift_unexpectedError();
  __break(1u);
}

void sub_2453ECF98()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v14;
  _QWORD aBlock[6];

  v1 = sub_245443CDC();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (_QWORD *)((char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)&v0[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue];
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE5610], v1);
  v6 = v5;
  LOBYTE(v5) = sub_245443CE8();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v7 = OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_connection;
  if (!*(_QWORD *)&v0[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_connection])
  {
    v8 = sub_245440040();
    if (v8)
    {
      v9 = *(void **)&v0[v7];
      *(_QWORD *)&v0[v7] = v8;
      v10 = v8;

      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v0;
      v12 = swift_allocObject();
      *(_QWORD *)(v12 + 16) = sub_2453F6D20;
      *(_QWORD *)(v12 + 24) = v11;
      aBlock[4] = sub_2453F6D38;
      aBlock[5] = v12;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_24542241C;
      aBlock[3] = &block_descriptor_95;
      v13 = _Block_copy(aBlock);
      v14 = v0;
      swift_retain();
      swift_release();
      objc_msgSend(v10, sel_configureConnection_, v13);
      _Block_release(v13);
      LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v13 & 1) == 0)
      {
        sub_2453ED504();
        swift_release();

        return;
      }
LABEL_8:
      __break(1u);
    }
  }
}

void sub_2453ED188(void *a1, uint64_t a2)
{
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, void *);
  void *v17;
  void (*v18)(uint64_t);
  uint64_t v19;

  v4 = (void *)sub_245443D78();
  v5 = objc_msgSend((id)objc_opt_self(), sel_interfaceWithIdentifier_, v4);

  v6 = (void *)objc_opt_self();
  v7 = objc_msgSend(v6, sel_protocolForProtocol_, &unk_2574743F8);
  objc_msgSend(v5, sel_setClient_, v7);

  v8 = objc_msgSend(v6, sel_protocolForProtocol_, &unk_257475C40);
  objc_msgSend(v5, sel_setServer_, v8);

  v9 = objc_msgSend((id)objc_opt_self(), sel_utility);
  objc_msgSend(a1, sel_setServiceQuality_, v9);

  objc_msgSend(a1, sel_setInterface_, v5);
  objc_msgSend(a1, sel_setInterfaceTarget_, a2);
  objc_msgSend(a1, sel_setTargetQueue_, *(_QWORD *)(a2 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue));
  v18 = sub_2453ED40C;
  v19 = 0;
  v10 = MEMORY[0x24BDAC760];
  v14 = MEMORY[0x24BDAC760];
  v15 = 1107296256;
  v16 = sub_245440260;
  v17 = &block_descriptor_104;
  v11 = _Block_copy(&v14);
  objc_msgSend(a1, sel_setActivationHandler_, v11);
  _Block_release(v11);
  v18 = sub_2453ED418;
  v19 = 0;
  v14 = v10;
  v15 = 1107296256;
  v16 = sub_245440260;
  v17 = &block_descriptor_107;
  v12 = _Block_copy(&v14);
  objc_msgSend(a1, sel_setInterruptionHandler_, v12);
  _Block_release(v12);
  v18 = sub_2453ED424;
  v19 = 0;
  v14 = v10;
  v15 = 1107296256;
  v16 = sub_245440260;
  v17 = &block_descriptor_110;
  v13 = _Block_copy(&v14);
  objc_msgSend(a1, sel_setInvalidationHandler_, v13);
  _Block_release(v13);

}

void sub_2453ED40C(uint64_t a1)
{
  sub_2453ED430(a1, "ReplicatorClient Service: Activated");
}

void sub_2453ED418(uint64_t a1)
{
  sub_2453ED430(a1, "ReplicatorClient Service: Interrupted");
}

void sub_2453ED424(uint64_t a1)
{
  sub_2453ED430(a1, "ReplicatorClient Service: Invalidated");
}

void sub_2453ED430(uint64_t a1, const char *a2)
{
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  NSObject *oslog;

  if (qword_25440EC10 != -1)
    swift_once();
  v3 = sub_245443C04();
  __swift_project_value_buffer(v3, (uint64_t)qword_25440EBF8);
  oslog = sub_245443BEC();
  v4 = sub_245443FDC();
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_2453B6000, oslog, v4, a2, v5, 2u);
    MEMORY[0x249534440](v5, -1, -1);
  }

}

void sub_2453ED504()
{
  uint64_t v0;
  int *v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint32_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD aBlock[6];

  v1 = (int *)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_serverStartupToken);
  swift_beginAccess();
  if (*v1 == -1)
  {
    v2 = *(NSObject **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
    v3 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = sub_2453F6D64;
    aBlock[5] = v3;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_2454171FC;
    aBlock[3] = &block_descriptor_101;
    v4 = _Block_copy(aBlock);
    swift_release();
    v5 = (const char *)(sub_245443DD8() + 32);
    swift_beginAccess();
    v6 = notify_register_dispatch(v5, v1, v2, v4);
    swift_endAccess();
    _Block_release(v4);
    swift_release();
    if (v6)
    {
      if (qword_25440EC10 != -1)
        swift_once();
      v7 = sub_245443C04();
      __swift_project_value_buffer(v7, (uint64_t)qword_25440EBF8);
      v8 = sub_245443BEC();
      v9 = sub_245443FE8();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_2453B6000, v8, v9, "Could not register for daemon startup notifications", v10, 2u);
        MEMORY[0x249534440](v10, -1, -1);
      }

    }
  }
}

void sub_2453ED6F4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _OWORD v12[2];

  v1 = (_QWORD *)sub_245443CDC();
  v2 = *(v1 - 1);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (_QWORD *)((char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v2 + 104))(v4, *MEMORY[0x24BEE5610], v1);
  v6 = v5;
  LOBYTE(v5) = sub_245443CE8();
  (*(void (**)(_QWORD *, _QWORD *))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_6;
  }
  sub_2453ECF98();
  v7 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_connection);
  if (!v7)
    return;
  v1 = v7;
  if (objc_msgSend(v1, sel_remoteTarget))
  {
    sub_24544409C();

    swift_unknownObjectRelease();
    sub_2453D055C((uint64_t)v12, &qword_25440E7F8);
    return;
  }
  memset(v12, 0, sizeof(v12));
  sub_2453D055C((uint64_t)v12, &qword_25440E7F8);
  objc_msgSend(v1, sel_activate);
  if (qword_25440EC10 != -1)
    goto LABEL_11;
LABEL_6:
  v8 = sub_245443C04();
  __swift_project_value_buffer(v8, (uint64_t)qword_25440EBF8);
  v9 = sub_245443BEC();
  v10 = sub_245444000();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_2453B6000, v9, v10, "Activated ReplicatorClient connection", v11, 2u);
    MEMORY[0x249534440](v11, -1, -1);
  }

}

void sub_2453ED8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x2495344E8](v2);
  if (v3)
  {
    v4 = (_BYTE *)v3;
    if (qword_25440EC10 != -1)
      swift_once();
    v5 = sub_245443C04();
    __swift_project_value_buffer(v5, (uint64_t)qword_25440EBF8);
    v6 = sub_245443BEC();
    v7 = sub_245444000();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_2453B6000, v6, v7, "Server has restarted", v8, 2u);
      MEMORY[0x249534440](v8, -1, -1);
    }

    v9 = &v4[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_clientDescriptors];
    v10 = swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)v9 + 16))
    {
      sub_2453ED6F4(v10);
      v11 = sub_2453EDA50();
      if ((v4[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_hasFetchedDevices] & 1) == 0)
        sub_2453E12B4(v11);
      if ((v4[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_hasFetchedRecordVersions] & 1) == 0)
        sub_2453EB090();
    }

  }
}

uint64_t sub_2453EDA50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  __int128 v14;
  void *v15;
  unint64_t v16;
  BOOL v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  unint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t result;
  _QWORD v60[2];
  __int128 v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  void *v74;
  id v75[14];

  v75[13] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = sub_245443CDC();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (_QWORD *)((char *)v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE5610], v1);
  v6 = v5;
  LOBYTE(v5) = sub_245443CE8();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
    goto LABEL_42;
  v7 = (uint64_t *)(v0
                 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_clientDescriptors);
  swift_beginAccess();
  v8 = *v7;
  v9 = *(_QWORD *)(*v7 + 56);
  v62 = *v7 + 56;
  v10 = 1 << *(_BYTE *)(v8 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v63 = (unint64_t)(v10 + 63) >> 6;
  v65 = v8;
  swift_bridgeObjectRetain();
  v13 = 0;
  v71 = 0;
  *(_QWORD *)&v14 = 136446210;
  v61 = v14;
  v60[1] = MEMORY[0x24BEE4AD8] + 8;
  v64 = v0;
  while (1)
  {
    if (v12)
    {
      v72 = (v12 - 1) & v12;
      v73 = v13;
      v16 = __clz(__rbit64(v12)) | (v13 << 6);
    }
    else
    {
      v17 = __OFADD__(v13, 1);
      v18 = v13 + 1;
      if (v17)
      {
        __break(1u);
        goto LABEL_41;
      }
      if (v18 >= v63)
        return swift_release();
      v19 = *(_QWORD *)(v62 + 8 * v18);
      if (!v19)
      {
        v20 = v18 + 1;
        if (v18 + 1 >= v63)
          return swift_release();
        v19 = *(_QWORD *)(v62 + 8 * v20);
        if (!v19)
        {
          v20 = v18 + 2;
          if (v18 + 2 >= v63)
            return swift_release();
          v19 = *(_QWORD *)(v62 + 8 * v20);
          if (!v19)
          {
            v20 = v18 + 3;
            if (v18 + 3 >= v63)
              return swift_release();
            v19 = *(_QWORD *)(v62 + 8 * v20);
            if (!v19)
            {
              while (1)
              {
                v18 = v20 + 1;
                if (__OFADD__(v20, 1))
                  break;
                if (v18 >= v63)
                  return swift_release();
                v19 = *(_QWORD *)(v62 + 8 * v18);
                ++v20;
                if (v19)
                  goto LABEL_20;
              }
LABEL_41:
              __break(1u);
LABEL_42:
              __break(1u);
            }
          }
        }
        v18 = v20;
      }
LABEL_20:
      v72 = (v19 - 1) & v19;
      v73 = v18;
      v16 = __clz(__rbit64(v19)) + (v18 << 6);
    }
    v21 = *(_QWORD *)(v65 + 48) + 80 * v16;
    v22 = *(void **)v21;
    v23 = *(void **)(v21 + 16);
    v24 = *(void **)(v21 + 24);
    v25 = *(void **)(v21 + 32);
    v26 = *(void **)(v21 + 40);
    v27 = *(void **)(v21 + 48);
    v28 = *(void **)(v21 + 56);
    v29 = *(void **)(v21 + 64);
    v30 = *(void **)(v21 + 72);
    v74 = *(void **)(v21 + 8);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v31 = swift_bridgeObjectRetain_n();
    v32 = (void *)sub_2453E37FC(v31);
    v69 = (uint64_t)v22;
    v70 = v32;
    if (!v32)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v49 = (unint64_t)v74;
      swift_bridgeObjectRelease();
      sub_2453CBA28();
      v50 = swift_allocError();
      *(_BYTE *)v51 = 3;
      *(_QWORD *)(v51 + 8) = 0;
      swift_willThrow();
      v71 = 0;
      goto LABEL_30;
    }
    v75[0] = v22;
    v75[1] = v74;
    v75[2] = v23;
    v75[3] = v24;
    v75[4] = v25;
    v75[5] = v26;
    v75[6] = v27;
    v75[7] = v28;
    v75[8] = v29;
    v75[9] = v30;
    sub_245443994();
    swift_allocObject();
    sub_245443988();
    sub_2453F6E38();
    v33 = v71;
    v34 = sub_24544397C();
    v71 = v33;
    if (v33)
      break;
    v36 = v34;
    v37 = v35;
    v38 = (void *)sub_245443A6C();
    sub_2453BDCF8(v36, v37);
    v66 = v30;
    swift_bridgeObjectRelease();
    v67 = v29;
    swift_bridgeObjectRelease();
    v68 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v39 = (unint64_t)v74;
    swift_bridgeObjectRelease();
    swift_release();
    v75[0] = 0;
    v40 = objc_msgSend(v70, sel_registerClientWithParameters_error_, v38, v75);

    if ((v40 & 1) != 0)
    {
      v41 = qword_25440EC10;
      v42 = v75[0];
      v43 = v69;
      if (v41 != -1)
        swift_once();
      v44 = sub_245443C04();
      __swift_project_value_buffer(v44, (uint64_t)qword_25440EBF8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v45 = sub_245443BEC();
      v46 = sub_245443FE8();
      if (os_log_type_enabled(v45, v46))
      {
        v47 = swift_slowAlloc();
        v60[0] = swift_slowAlloc();
        v75[0] = (id)v60[0];
        *(_DWORD *)v47 = v61;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v47 + 4) = sub_2453BDB24(v43, v39, (uint64_t *)v75);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_2453B6000, v45, v46, "Reregistered client descriptor %{public}s", (uint8_t *)v47, 0xCu);
        v48 = v60[0];
        swift_arrayDestroy();
        MEMORY[0x249534440](v48, -1, -1);
        MEMORY[0x249534440](v47, -1, -1);
        swift_unknownObjectRelease();

      }
      else
      {

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      goto LABEL_7;
    }
    v52 = v75[0];
    v50 = sub_2454439B8();

    swift_willThrow();
    swift_unknownObjectRelease();
    v71 = 0;
    v49 = v39;
LABEL_30:
    if (qword_25440EC10 != -1)
      swift_once();
    v53 = sub_245443C04();
    __swift_project_value_buffer(v53, (uint64_t)qword_25440EBF8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v54 = sub_245443BEC();
    v55 = sub_245443FE8();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = swift_slowAlloc();
      v57 = (void *)swift_slowAlloc();
      v74 = (void *)v50;
      v58 = v57;
      v75[0] = v57;
      *(_DWORD *)v56 = v61;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v56 + 4) = sub_2453BDB24(v69, v49, (uint64_t *)v75);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_2453B6000, v54, v55, "Could not reregister client descriptor %{public}s", (uint8_t *)v56, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x249534440](v58, -1, -1);
      MEMORY[0x249534440](v56, -1, -1);
      v15 = v74;
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v15 = (void *)v50;
    }

LABEL_7:
    v12 = v72;
    v13 = v73;
  }
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

void sub_2453EE368(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint8_t *v27;
  uint8_t *v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  _QWORD aBlock[6];

  v3 = sub_245443C88();
  v4 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  v41 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_245443CAC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v45 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_245443C7C();
  v42 = *(char **)(v10 - 8);
  v43 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v44 = sub_245443CD0();
  v13 = *(_QWORD *)(v44 - 8);
  v14 = MEMORY[0x24BDAC7A8](v44);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v46 = (char *)&v39 - v17;
  swift_beginAccess();
  v18 = MEMORY[0x2495344E8](a2 + 16);
  if (v18)
  {
    v19 = (char *)v18;
    if (qword_25440EC10 != -1)
      swift_once();
    v20 = sub_245443C04();
    __swift_project_value_buffer(v20, (uint64_t)qword_25440EBF8);
    v21 = sub_245443BEC();
    v22 = sub_245444000();
    v23 = os_log_type_enabled(v21, v22);
    v39 = v8;
    if (v23)
    {
      v24 = v7;
      v25 = v6;
      v26 = v13;
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_2453B6000, v21, v22, "Server says it has new messages", v27, 2u);
      v28 = v27;
      v13 = v26;
      v6 = v25;
      v7 = v24;
      MEMORY[0x249534440](v28, -1, -1);
    }

    if ((v19[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_messageFetchPending] & 1) != 0)
    {

    }
    else
    {
      v19[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_messageFetchPending] = 1;
      sub_245443CB8();
      *v12 = 100;
      v30 = v42;
      v29 = v43;
      (*((void (**)(_QWORD *, _QWORD, uint64_t))v42 + 13))(v12, *MEMORY[0x24BEE5410], v43);
      sub_245443CC4();
      (*((void (**)(_QWORD *, uint64_t))v30 + 1))(v12, v29);
      v31 = *(void (**)(char *, uint64_t))(v13 + 8);
      v32 = v44;
      v31(v16, v44);
      v43 = *(_QWORD *)&v19[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue];
      v33 = swift_allocObject();
      *(_QWORD *)(v33 + 16) = v19;
      aBlock[4] = sub_2453F7314;
      aBlock[5] = v33;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_2453D0CCC;
      aBlock[3] = &block_descriptor_126;
      v34 = _Block_copy(aBlock);
      v42 = v19;
      v35 = v45;
      sub_245443C94();
      v47 = MEMORY[0x24BEE4AF8];
      sub_2453B8BF4(&qword_25440E640, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      v36 = v6;
      v37 = v40;
      __swift_instantiateConcreteTypeFromMangledName(&qword_25440E670);
      sub_2453F75AC(&qword_25440E678, &qword_25440E670, MEMORY[0x24BEE12C8]);
      sub_2454440A8();
      v38 = v46;
      MEMORY[0x249533A20](v46, v35, v36, v34);
      _Block_release(v34);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v36, v37);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v35, v7);
      v31(v38, v32);

      swift_release();
    }
  }
}

void sub_2453EE790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  int64_t v12;
  _QWORD *v13;
  int64_t v14;
  int v15;
  int v16;
  char v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  int64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  id v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  id v46;
  void *v47;
  uint64_t v48;
  id v49;
  id v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  void *v54;
  id v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD v58[2];
  void *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  id v63[5];

  v1 = v0;
  v63[4] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = sub_245443CDC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (_QWORD *)((char *)v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE5610], v2);
  v7 = v6;
  v8 = sub_245443CE8();
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v8 & 1) == 0)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_once();
LABEL_21:
    v42 = sub_245443C04();
    __swift_project_value_buffer(v42, (uint64_t)qword_25440EBF8);
    swift_bridgeObjectRetain();
    v43 = sub_245443BEC();
    v44 = sub_245444000();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v45 = 134217984;
      v63[0] = *(id *)(v8 + 16);
      sub_245444078();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2453B6000, v43, v44, "Fetched %ld new messages", v45, 0xCu);
      MEMORY[0x249534440](v45, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    v63[0] = (id)v8;
    sub_245443C34();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return;
  }
  v9 = sub_2453E37FC();
  if (v9)
  {
    v10 = (void *)v9;
    v11 = (uint64_t *)(v1
                    + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_clientDescriptors);
    swift_beginAccess();
    v8 = *v11;
    v12 = *(_QWORD *)(*v11 + 16);
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v12)
    {
      v58[1] = v1;
      v59 = v10;
      v63[0] = (id)MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_2453F1D54(0, v12, 0);
      v13 = v63[0];
      v14 = sub_2453F3228(v8);
      v16 = v15;
      v18 = v17 & 1;
      v60 = v8 + 56;
      while ((v14 & 0x8000000000000000) == 0 && v14 < 1 << *(_BYTE *)(v8 + 32))
      {
        if (((*(_QWORD *)(v60 + (((unint64_t)v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          goto LABEL_31;
        if (*(_DWORD *)(v8 + 36) != v16)
          goto LABEL_32;
        v61 = v18;
        v19 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 80 * v14);
        v20 = *v19;
        v21 = v19[1];
        v63[0] = v13;
        v23 = v13[2];
        v22 = v13[3];
        swift_bridgeObjectRetain();
        if (v23 >= v22 >> 1)
        {
          sub_2453F1D54(v22 > 1, v23 + 1, 1);
          v13 = v63[0];
        }
        v13[2] = v23 + 1;
        v24 = &v13[2 * v23];
        v24[4] = v20;
        v24[5] = v21;
        v25 = sub_2453F32C8(v14, v16, v61 & 1, v8);
        v14 = v25;
        v16 = v26;
        v18 = v27 & 1;
        if (!--v12)
        {
          sub_2453F72DC(v25, v26, v18);
          swift_bridgeObjectRelease();
          v10 = v59;
          goto LABEL_18;
        }
      }
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
LABEL_18:
    v63[0] = v13;
    sub_245443994();
    swift_allocObject();
    sub_245443988();
    sub_2453F7340();
    v32 = sub_24544397C();
    v34 = v33;
    v35 = (void *)sub_245443A6C();
    sub_2453BDCF8(v32, v34);
    swift_bridgeObjectRelease();
    swift_release();
    v63[0] = 0;
    v36 = objc_msgSend(v10, sel_messagesWithParameters_error_, v35, v63);

    v37 = v63[0];
    if (v36)
    {
      sub_245443964();
      swift_allocObject();
      sub_245443958();
      v38 = sub_245443A78();
      v40 = v39;
      sub_2453F7384();
      sub_24544394C();
      sub_2453BDCF8(v38, v40);
      swift_release();
      v8 = (uint64_t)v63[0];
      if (!v63[0])
      {
        __break(1u);
        swift_unexpectedError();
        __break(1u);
        swift_unexpectedError();
        __break(1u);
        return;
      }
      v41 = v37;

      if (qword_25440EC10 == -1)
        goto LABEL_21;
      goto LABEL_34;
    }
    v46 = v63[0];
    v47 = (void *)sub_2454439B8();

    swift_willThrow();
    if (qword_25440EC10 != -1)
      swift_once();
    v48 = sub_245443C04();
    __swift_project_value_buffer(v48, (uint64_t)qword_25440EBF8);
    v49 = v47;
    v50 = v47;
    v51 = sub_245443BEC();
    v52 = sub_245443FE8();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      v54 = (void *)swift_slowAlloc();
      v63[0] = v54;
      *(_DWORD *)v53 = 136315138;
      v62 = (uint64_t)v47;
      v55 = v47;
      __swift_instantiateConcreteTypeFromMangledName(&qword_257464988);
      v56 = sub_245443DCC();
      v62 = sub_2453BDB24(v56, v57, (uint64_t *)v63);
      sub_245444078();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_2453B6000, v51, v52, "Could not fetch messages: %s", v53, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x249534440](v54, -1, -1);
      MEMORY[0x249534440](v53, -1, -1);
      swift_unknownObjectRelease();

    }
    else
    {
      swift_unknownObjectRelease();

    }
  }
  else
  {
    if (qword_25440EC10 != -1)
      swift_once();
    v28 = sub_245443C04();
    __swift_project_value_buffer(v28, (uint64_t)qword_25440EBF8);
    v29 = sub_245443BEC();
    v30 = sub_245443FE8();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_2453B6000, v29, v30, "Could not fetch messages because target could not be created", v31, 2u);
      MEMORY[0x249534440](v31, -1, -1);
    }

  }
}

void sub_2453EEF0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint8_t *v27;
  uint8_t *v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  _QWORD aBlock[6];

  v3 = sub_245443C88();
  v4 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  v41 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_245443CAC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v45 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_245443C7C();
  v42 = *(char **)(v10 - 8);
  v43 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v44 = sub_245443CD0();
  v13 = *(_QWORD *)(v44 - 8);
  v14 = MEMORY[0x24BDAC7A8](v44);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v46 = (char *)&v39 - v17;
  swift_beginAccess();
  v18 = MEMORY[0x2495344E8](a2 + 16);
  if (v18)
  {
    v19 = (char *)v18;
    if (qword_25440EC10 != -1)
      swift_once();
    v20 = sub_245443C04();
    __swift_project_value_buffer(v20, (uint64_t)qword_25440EBF8);
    v21 = sub_245443BEC();
    v22 = sub_245444000();
    v23 = os_log_type_enabled(v21, v22);
    v39 = v8;
    if (v23)
    {
      v24 = v7;
      v25 = v6;
      v26 = v13;
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_2453B6000, v21, v22, "Server says it has new devices", v27, 2u);
      v28 = v27;
      v13 = v26;
      v6 = v25;
      v7 = v24;
      MEMORY[0x249534440](v28, -1, -1);
    }

    if ((v19[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_deviceFetchPending] & 1) != 0)
    {

    }
    else
    {
      v19[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_deviceFetchPending] = 1;
      sub_245443CB8();
      *v12 = 100;
      v30 = v42;
      v29 = v43;
      (*((void (**)(_QWORD *, _QWORD, uint64_t))v42 + 13))(v12, *MEMORY[0x24BEE5410], v43);
      sub_245443CC4();
      (*((void (**)(_QWORD *, uint64_t))v30 + 1))(v12, v29);
      v31 = *(void (**)(char *, uint64_t))(v13 + 8);
      v32 = v44;
      v31(v16, v44);
      v43 = *(_QWORD *)&v19[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue];
      v33 = swift_allocObject();
      *(_QWORD *)(v33 + 16) = v19;
      aBlock[4] = sub_2453F7678;
      aBlock[5] = v33;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_2453D0CCC;
      aBlock[3] = &block_descriptor_199;
      v34 = _Block_copy(aBlock);
      v42 = v19;
      v35 = v45;
      sub_245443C94();
      v47 = MEMORY[0x24BEE4AF8];
      sub_2453B8BF4(&qword_25440E640, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      v36 = v6;
      v37 = v40;
      __swift_instantiateConcreteTypeFromMangledName(&qword_25440E670);
      sub_2453F75AC(&qword_25440E678, &qword_25440E670, MEMORY[0x24BEE12C8]);
      sub_2454440A8();
      v38 = v46;
      MEMORY[0x249533A20](v46, v35, v36, v34);
      _Block_release(v34);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v36, v37);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v35, v7);
      v31(v38, v32);

      swift_release();
    }
  }
}

uint64_t sub_2453EF334(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  int v14;
  uint64_t v15;

  v3 = sub_245443CDC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v1 + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BEE5610], v3);
  v8 = v7;
  LOBYTE(v7) = sub_245443CE8();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    v10 = *a1;
    v11 = *(_QWORD *)(v1 + *a1);
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v12; ++i)
      {
        v14 = *(_DWORD *)(v11 + 4 * i + 32);
        notify_cancel(v14);
      }
      swift_bridgeObjectRelease();
    }
    *(_QWORD *)(v1 + v10) = MEMORY[0x24BEE4AF8];
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_2453EF444(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint8_t *v27;
  uint8_t *v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  _QWORD aBlock[6];

  v3 = sub_245443C88();
  v4 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  v41 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_245443CAC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v45 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_245443C7C();
  v42 = *(char **)(v10 - 8);
  v43 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v44 = sub_245443CD0();
  v13 = *(_QWORD *)(v44 - 8);
  v14 = MEMORY[0x24BDAC7A8](v44);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v46 = (char *)&v39 - v17;
  swift_beginAccess();
  v18 = MEMORY[0x2495344E8](a2 + 16);
  if (v18)
  {
    v19 = (char *)v18;
    if (qword_25440EC10 != -1)
      swift_once();
    v20 = sub_245443C04();
    __swift_project_value_buffer(v20, (uint64_t)qword_25440EBF8);
    v21 = sub_245443BEC();
    v22 = sub_245444000();
    v23 = os_log_type_enabled(v21, v22);
    v39 = v8;
    if (v23)
    {
      v24 = v7;
      v25 = v6;
      v26 = v13;
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_2453B6000, v21, v22, "Server says it has new records", v27, 2u);
      v28 = v27;
      v13 = v26;
      v6 = v25;
      v7 = v24;
      MEMORY[0x249534440](v28, -1, -1);
    }

    if ((v19[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_recordFetchPending] & 1) != 0)
    {

    }
    else
    {
      v19[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_recordFetchPending] = 1;
      sub_245443CB8();
      *v12 = 100;
      v30 = v42;
      v29 = v43;
      (*((void (**)(_QWORD *, _QWORD, uint64_t))v42 + 13))(v12, *MEMORY[0x24BEE5410], v43);
      sub_245443CC4();
      (*((void (**)(_QWORD *, uint64_t))v30 + 1))(v12, v29);
      v31 = *(void (**)(char *, uint64_t))(v13 + 8);
      v32 = v44;
      v31(v16, v44);
      v43 = *(_QWORD *)&v19[OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue];
      v33 = swift_allocObject();
      *(_QWORD *)(v33 + 16) = v19;
      aBlock[4] = sub_2453F73D0;
      aBlock[5] = v33;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_2453D0CCC;
      aBlock[3] = &block_descriptor_136;
      v34 = _Block_copy(aBlock);
      v42 = v19;
      v35 = v45;
      sub_245443C94();
      v47 = MEMORY[0x24BEE4AF8];
      sub_2453B8BF4(&qword_25440E640, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      v36 = v6;
      v37 = v40;
      __swift_instantiateConcreteTypeFromMangledName(&qword_25440E670);
      sub_2453F75AC(&qword_25440E678, &qword_25440E670, MEMORY[0x24BEE12C8]);
      sub_2454440A8();
      v38 = v46;
      MEMORY[0x249533A20](v46, v35, v36, v34);
      _Block_release(v34);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v36, v37);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v35, v7);
      v31(v38, v32);

      swift_release();
    }
  }
}

uint64_t sub_2453EF86C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51[16];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v50 = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464548);
  MEMORY[0x24BDAC7A8](v9);
  v49 = (uint64_t)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_245443B14();
  v45 = *(_QWORD *)(v11 - 8);
  v46 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v44 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ReplicatorRecord(0);
  v47 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v48 = (uint64_t)&v41 - v20;
  v21 = *a2;
  v22 = (unint64_t *)(*a2 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_values);
  swift_beginAccess();
  v23 = *v22;
  v52 = a3;
  v53 = v21;
  v54 = a4;
  v55 = a5;
  swift_bridgeObjectRetain();
  v24 = v56;
  v25 = sub_2453D0B98(MEMORY[0x24BEE4B00], (void (*)(void **, id *))sub_2453F7140, (uint64_t)v51, v23);
  result = swift_bridgeObjectRelease();
  if (!v24)
  {
    v42 = v25;
    v27 = v21 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id;
    v56 = v21 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id;
    swift_beginAccess();
    v28 = v16;
    v29 = v15;
    sub_2453BA364(v27, (uint64_t)v15, type metadata accessor for ReplicatorRecord.ID);
    v30 = v21 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_version;
    swift_beginAccess();
    v31 = v45;
    v32 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v33 = v44;
    v43 = 0;
    v34 = v46;
    v32(v44, v30, v46);
    v35 = v28;
    v36 = (uint64_t)&v19[*(int *)(v28 + 28)];
    v37 = sub_245443AC0();
    v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56);
    v38(v36, 1, 1, v37);
    sub_2453D062C((uint64_t)v29, (uint64_t)v19, type metadata accessor for ReplicatorRecord.ID);
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(&v19[*(int *)(v35 + 20)], v33, v34);
    *(_QWORD *)&v19[*(int *)(v35 + 24)] = v42;
    sub_2453D055C(v36, (uint64_t *)&unk_25440E420);
    v38(v36, 1, 1, v37);
    v39 = v48;
    sub_2453D062C((uint64_t)v19, v48, type metadata accessor for ReplicatorRecord);
    sub_2453BA364(v56, (uint64_t)v29, type metadata accessor for ReplicatorRecord.ID);
    v40 = v49;
    sub_2453BA364(v39, v49, type metadata accessor for ReplicatorRecord);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 56))(v40, 0, 1, v35);
    sub_2453BEC94(v40, v29);
    return sub_2453BA3A8(v39, type metadata accessor for ReplicatorRecord);
  }
  return result;
}

uint64_t sub_2453EFBFC(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  __int128 *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t result;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  __int128 *v50;
  id *v51;
  uint64_t v52;
  id *v53;
  id v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  id v58;
  unint64_t v59;
  unint64_t v60;
  BOOL v61;
  id *v62;
  id *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  char isUniquelyReferenced_nonNull_native;
  char v73;
  unint64_t v74;
  uint64_t v75;
  _BOOL8 v76;
  uint64_t v77;
  char v78;
  id *v79;
  unint64_t v80;
  char v81;
  _QWORD *v82;
  _OWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  id v105;
  uint64_t v106;
  id v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  id *v120;
  id *v121;
  __int128 *v122;
  id *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  __int128 v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  id *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  _QWORD *v152;

  v125 = a6;
  v131 = a1;
  v132 = a5;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464540);
  MEMORY[0x24BDAC7A8](v10);
  v130 = (uint64_t)&v107 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = type metadata accessor for ReplicatorRecord.Value(0);
  v12 = *(_QWORD *)(v129 - 8);
  v13 = MEMORY[0x24BDAC7A8](v129);
  v127 = (char *)&v107 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v128 = (uint64_t)&v107 - v15;
  v135 = sub_245443A24();
  v133 = *(_QWORD *)(v135 - 8);
  MEMORY[0x24BDAC7A8](v135);
  v17 = (id *)((char *)&v107 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E1A0);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v126 = (uint64_t)&v107 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v124 = (uint64_t)&v107 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v107 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v136 = (uint64_t)&v107 - v26;
  v134 = *a2;
  v27 = (uint64_t *)(v134 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_data);
  result = swift_beginAccess();
  v29 = v27[1];
  if (v29 >> 60 != 15)
  {
    v123 = v17;
    v30 = *v27;
    v31 = (uint64_t *)(a3
                    + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_clientDescriptors);
    swift_beginAccess();
    v32 = *v31;
    v33 = a4;
    swift_bridgeObjectRetain();
    sub_2453F7080(v30, v29);
    sub_2453DFD58(v32, v33, &v143);
    swift_bridgeObjectRelease();
    v34 = v29;
    v35 = *((_QWORD *)&v143 + 1);
    if (!*((_QWORD *)&v143 + 1))
      return sub_2453BDCE4(v30, v34);
    v115 = v30;
    v116 = v34;
    v114 = v12;
    v117 = v143;
    v118 = v144;
    v119 = v145;
    v120 = (id *)v146;
    v36 = v148;
    v121 = v147;
    v122 = v6;
    v38 = v149;
    v37 = v150;
    v39 = v151;
    v40 = &v33[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id];
    swift_beginAccess();
    if (*(_QWORD *)(v37 + 16))
    {
      v111 = v39;
      v112 = v36;
      v113 = v38;
      v41 = *((_QWORD *)v40 + 2);
      v42 = *((_QWORD *)v40 + 3);
      swift_bridgeObjectRetain();
      v43 = sub_2453C64D8(v41, v42);
      if ((v44 & 1) != 0)
      {
        v45 = *(_QWORD *)(v37 + 56) + 48 * v43;
        v46 = *(_QWORD *)(v45 + 8);
        v108 = *(unsigned __int8 *)(v45 + 40);
        swift_bridgeObjectRetain();
        sub_2453F1C90(v117, v35);
        swift_bridgeObjectRelease();
        sub_2453D02E0(v132, (uint64_t)v25, &qword_25440E1A0);
        v47 = v133;
        v48 = v135;
        v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v133 + 48))(v25, 1, v135);
        v50 = v122;
        if (v49 == 1)
        {
          swift_bridgeObjectRelease();
          sub_2453D055C((uint64_t)v25, &qword_25440E1A0);
LABEL_37:
          v91 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56);
          v92 = v136;
          v91(v136, 1, 1, v48);
LABEL_38:
          v93 = v126;
          sub_2453D02E0(v92, v126, &qword_25440E1A0);
          v94 = v129;
          v95 = v127;
          v96 = (uint64_t)&v127[*(int *)(v129 + 20)];
          v91(v96, 1, 1, v48);
          v97 = v115;
          v98 = v116;
          *v95 = v115;
          v95[1] = v98;
          sub_2453F7080(v97, v98);
          sub_2453F7820(v93, v96, &qword_25440E1A0);
          v99 = v128;
          sub_2453D062C((uint64_t)v95, v128, type metadata accessor for ReplicatorRecord.Value);
          v100 = (uint64_t *)(v134
                           + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_version);
          swift_beginAccess();
          v101 = *v100;
          v102 = v130;
          sub_2453BA364(v99, v130, type metadata accessor for ReplicatorRecord.Value);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v114 + 56))(v102, 0, 1, v94);
          sub_2453BEABC(v102, v101);
          sub_2453BDCE4(v97, v98);
          sub_2453BA3A8(v99, type metadata accessor for ReplicatorRecord.Value);
          return sub_2453D055C(v136, &qword_25440E1A0);
        }
        v132 = v46;
        v51 = v123;
        (*(void (**)(id *, char *, uint64_t))(v47 + 32))(v123, v25, v48);
        v52 = v134;
        v53 = (id *)(v134 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_fileHandle);
        swift_beginAccess();
        v54 = *v53;
        if (!*v53)
        {
          (*(void (**)(id *, uint64_t))(v47 + 8))(v51, v48);
          swift_bridgeObjectRelease();
          goto LABEL_37;
        }
        v55 = (unint64_t *)(v52
                                 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_extendedAttributes);
        swift_beginAccess();
        v56 = *v55;
        if (v56)
        {
          v107 = v54;
          v110 = v56;
          if (v56 >> 62)
          {
LABEL_45:
            swift_bridgeObjectRetain_n();
            v105 = v107;
            v57 = sub_245444204();
            swift_bridgeObjectRelease();
            if (v57)
              goto LABEL_15;
          }
          else
          {
            v57 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v58 = v107;
            swift_bridgeObjectRetain();
            if (v57)
            {
LABEL_15:
              v59 = v110;
              v60 = v110 & 0xC000000000000001;
              v119 = MEMORY[0x24BEE4B00];
              v120 = (id *)v57;
              v47 = 4;
              v109 = v110 & 0xC000000000000001;
              while (1)
              {
                if (v60)
                  v62 = (id *)MEMORY[0x249533B58](v47 - 4, v59);
                else
                  v62 = (id *)*(id *)(v59 + 8 * v47);
                v63 = v62;
                v51 = (id *)(v47 - 3);
                if (__OFADD__(v47 - 4, 1))
                {
                  __break(1u);
LABEL_43:
                  __break(1u);
LABEL_44:
                  __break(1u);
                  goto LABEL_45;
                }
                v64 = (uint64_t *)((char *)v62
                                + OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_name);
                swift_beginAccess();
                v65 = v64[1];
                if (v65)
                {
                  v121 = (id *)(v47 - 3);
                  v51 = v63;
                  v66 = *v64;
                  v67 = (uint64_t *)((char *)v51
                                  + OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data);
                  swift_beginAccess();
                  v68 = v67[1];
                  if (v68 >> 60 == 15)
                  {

                    v51 = v121;
                  }
                  else
                  {
                    v69 = *v67;
                    v145 = MEMORY[0x24BDCDDE8];
                    v70 = v68;
                    v112 = sub_2453F715C();
                    v146 = v112;
                    v111 = sub_2453F71A0();
                    v147 = (id *)v111;
                    *(_QWORD *)&v143 = v69;
                    *((_QWORD *)&v143 + 1) = v70;
                    sub_2453CBAF0(&v143, &v141);
                    sub_2453F7080(v69, v70);
                    v113 = v69;
                    v117 = v70;
                    sub_2453F7080(v69, v70);
                    swift_bridgeObjectRetain();
                    v71 = (_QWORD *)v119;
                    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                    v152 = v71;
                    v118 = v66;
                    v74 = sub_2453C64D8(v66, v65);
                    v75 = v71[2];
                    v76 = (v73 & 1) == 0;
                    v77 = v75 + v76;
                    if (__OFADD__(v75, v76))
                      goto LABEL_43;
                    v78 = v73;
                    v79 = v51;
                    if (v71[3] >= v77)
                    {
                      v51 = v121;
                      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                        sub_2453CB1F4();
                    }
                    else
                    {
                      sub_2453C8824(v77, isUniquelyReferenced_nonNull_native);
                      v80 = sub_2453C64D8(v118, v65);
                      v51 = v121;
                      if ((v78 & 1) != (v81 & 1))
                      {
                        result = sub_2454443A8();
                        __break(1u);
                        return result;
                      }
                      v74 = v80;
                    }
                    v82 = v152;
                    v119 = (uint64_t)v152;
                    if ((v78 & 1) != 0)
                    {
                      v83 = (_OWORD *)(v152[7] + 48 * v74);
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
                      sub_2453CBAF0(&v141, v83);
                    }
                    else
                    {
                      v84 = __swift_mutable_project_boxed_opaque_existential_2((uint64_t)&v141, v142);
                      v121 = &v107;
                      MEMORY[0x24BDAC7A8](v84);
                      v50 = (__int128 *)((char *)&v107 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0));
                      (*(void (**)(__int128 *))(v86 + 16))(v50);
                      v138 = MEMORY[0x24BDCDDE8];
                      v139 = v112;
                      v140 = v111;
                      v137 = *v50;
                      v82[(v74 >> 6) + 8] |= 1 << v74;
                      v87 = (_QWORD *)(v82[6] + 16 * v74);
                      *v87 = v118;
                      v87[1] = v65;
                      sub_2453CBAF0(&v137, (_OWORD *)(v82[7] + 48 * v74));
                      v88 = v82[2];
                      v89 = __OFADD__(v88, 1);
                      v90 = v88 + 1;
                      if (v89)
                        goto LABEL_44;
                      v82[2] = v90;
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v141);
                      swift_bridgeObjectRetain();
                    }
                    v59 = v110;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    sub_2453BDCE4(v113, v117);

                    v50 = v122;
                    v60 = v109;
                  }
                }
                else
                {

                }
                ++v47;
                v61 = v51 == v120;
                v51 = v123;
                if (v61)
                {
                  swift_bridgeObjectRelease();
                  v47 = v133;
                  v54 = v107;
                  v103 = v119;
                  goto LABEL_47;
                }
              }
            }
          }
          swift_bridgeObjectRelease();
          v103 = MEMORY[0x24BEE4B00];
          v54 = v107;
        }
        else
        {
          v104 = v54;
          v103 = MEMORY[0x24BEE4B00];
        }
LABEL_47:
        v106 = v124;
        sub_2453F0664(v54, (uint64_t)v51, v103, v108, v124);
        if (v50)
        {
          sub_2453BDCE4(v115, v116);
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          return (*(uint64_t (**)(id *, uint64_t))(v47 + 8))(v51, v135);
        }
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        v48 = v135;
        (*(void (**)(id *, uint64_t))(v47 + 8))(v51, v135);
        v91 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56);
        v91(v106, 0, 1, v48);
        v92 = v136;
        sub_2453D0428(v106, v136, &qword_25440E1A0);
        goto LABEL_38;
      }
      sub_2453F1C90(v117, v35);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_2453F1C90(v117, v35);
    }
    return sub_2453BDCE4(v115, v116);
  }
  return result;
}

uint64_t sub_2453F0664@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  void *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint8_t *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t);
  id v30;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  id v41[3];

  v39 = a4;
  v35 = a3;
  v38 = a2;
  v41[2] = *(id *)MEMORY[0x24BDAC8D0];
  v7 = sub_2454439D0();
  v36 = *(_QWORD *)(v7 - 8);
  v37 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_245443B14();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25440EC10 != -1)
    swift_once();
  v14 = sub_245443C04();
  __swift_project_value_buffer(v14, (uint64_t)qword_25440EBF8);
  v15 = sub_245443BEC();
  v16 = sub_245444000();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = a1;
    v18 = v13;
    v19 = a5;
    v20 = v11;
    v21 = v10;
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_2453B6000, v15, v16, "Ingesting file handle", v22, 2u);
    v23 = v22;
    v10 = v21;
    v11 = v20;
    a5 = v19;
    v13 = v18;
    a1 = v17;
    MEMORY[0x249534440](v23, -1, -1);
  }

  sub_245443B08();
  v41[0] = (id)sub_245443AD8();
  v41[1] = v24;
  v25 = v36;
  v26 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v9, *MEMORY[0x24BDCD7A0], v37);
  sub_2453F7094();
  sub_245443A18();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v26);
  swift_bridgeObjectRelease();
  if ((v39 & 1) != 0)
  {
    v27 = v40;
    sub_245435B80();
    if (v27)
      goto LABEL_12;
  }
  else
  {
    v28 = v40;
    NSFileHandle.copyFile(to:extendedAttributes:)(a5, v35);
    if (v28)
      goto LABEL_12;
  }
  v41[0] = 0;
  if ((objc_msgSend(a1, sel_closeAndReturnError_, v41) & 1) != 0)
  {
    v29 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
    v30 = v41[0];
    return v29(v13, v10);
  }
  v32 = v41[0];
  sub_2454439B8();

  swift_willThrow();
LABEL_12:
  v33 = sub_245443A24();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(a5, v33);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_2453F096C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  uint64_t result;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v11 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = &v21[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = *a2;
  v15 = (unint64_t *)(*a2 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_values);
  swift_beginAccess();
  v16 = *v15;
  v22 = a3;
  v23 = v14;
  v24 = a4;
  v25 = a5;
  swift_bridgeObjectRetain();
  v17 = sub_2453D0B98(MEMORY[0x24BEE4B00], (void (*)(void **, id *))sub_2453F7064, (uint64_t)v21, v16);
  result = swift_bridgeObjectRelease();
  if (!v5)
  {
    v19 = v14 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id;
    swift_beginAccess();
    sub_2453BA364(v19, (uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v26 = *a1;
    *a1 = 0x8000000000000000;
    sub_2453C92B4((uint64_t)v17, v13, isUniquelyReferenced_nonNull_native);
    *a1 = v26;
    swift_bridgeObjectRelease();
    return sub_2453BA3A8((uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
  }
  return result;
}

void sub_2453F0AE8(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  void *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE v78[12];
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  void *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;

  v93 = a6;
  v92 = a5;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E1A0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = &v78[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_245443A24();
  v91 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v94 = &v78[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = *a2;
  v17 = (void **)(*a2 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_fileHandle);
  swift_beginAccess();
  v18 = *v17;
  if (!*v17)
    return;
  v96 = v16;
  v19 = (unint64_t *)(v16
                           + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_extendedAttributes);
  swift_beginAccess();
  v20 = *v19;
  if (!v20)
    return;
  v86 = v13;
  v21 = (uint64_t *)(a3
                  + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_clientDescriptors);
  swift_beginAccess();
  v22 = *v21;
  v23 = a4;
  swift_bridgeObjectRetain();
  v24 = v18;
  swift_bridgeObjectRetain();
  sub_2453DFD58(v22, v23, &v100);
  swift_bridgeObjectRelease();
  v25 = v101;
  if (!v101)
  {

    swift_bridgeObjectRelease();
    return;
  }
  v110 = v20;
  v87 = v24;
  v81 = v14;
  v82 = a1;
  v90 = v6;
  v95 = v100;
  v97 = v102;
  v26 = v104;
  v98 = v103;
  v27 = v105;
  v28 = v106;
  v30 = v107;
  v29 = v108;
  v31 = v109;
  v32 = &v23[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id];
  swift_beginAccess();
  if (!*(_QWORD *)(v29 + 16))
  {
    sub_2453F1C90(v95, v25);

LABEL_32:
    swift_bridgeObjectRelease();
    return;
  }
  v83 = v31;
  v84 = v26;
  v85 = v27;
  v88 = v28;
  v89 = v30;
  v33 = *((_QWORD *)v32 + 2);
  v34 = *((_QWORD *)v32 + 3);
  swift_bridgeObjectRetain();
  v35 = sub_2453C64D8(v33, v34);
  if ((v36 & 1) == 0)
  {
    sub_2453F1C90(v95, v25);

    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  v37 = *(_QWORD *)(v29 + 56) + 48 * v35;
  v38 = *(_QWORD *)(v37 + 8);
  v79 = *(unsigned __int8 *)(v37 + 40);
  v80 = v38;
  swift_bridgeObjectRetain();
  sub_2453F1C90(v95, v25);
  swift_bridgeObjectRelease();
  v39 = v110;
  isUniquelyReferenced_nonNull_native = v90;
  if (v110 >> 62)
  {
LABEL_41:
    swift_bridgeObjectRetain_n();
    v41 = sub_245444204();
    swift_bridgeObjectRelease();
  }
  else
  {
    v41 = *(_QWORD *)((v110 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v42 = v96;
  if (v41)
  {
    v98 = v39 & 0xC000000000000001;
    v43 = (_QWORD *)MEMORY[0x24BEE4B00];
    v44 = 4;
    v97 = v41;
    while (1)
    {
      if (v98)
        v45 = (char *)MEMORY[0x249533B58](v44 - 4, v39);
      else
        v45 = (char *)*(id *)(v39 + 8 * v44);
      v46 = v45;
      v47 = v44 - 3;
      if (__OFADD__(v44 - 4, 1))
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      v48 = (uint64_t *)&v45[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_name];
      swift_beginAccess();
      v49 = v48[1];
      if (!v49
        || (v39 = *v48,
            v50 = (uint64_t *)&v46[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data],
            swift_beginAccess(),
            v51 = v50[1],
            v51 >> 60 == 15))
      {

      }
      else
      {
        v52 = *v50;
        swift_bridgeObjectRetain();
        v88 = v52;
        v89 = v51;
        sub_2453F7080(v52, v51);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v99 = v43;
        v95 = v39;
        v54 = sub_2453C64D8(v39, v49);
        v55 = v43[2];
        v56 = (v53 & 1) == 0;
        v57 = v55 + v56;
        if (__OFADD__(v55, v56))
          goto LABEL_39;
        v58 = v53;
        if (v43[3] >= v57)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_2453CA894();
        }
        else
        {
          sub_2453C73F8(v57, isUniquelyReferenced_nonNull_native);
          v59 = sub_2453C64D8(v95, v49);
          if ((v58 & 1) != (v60 & 1))
          {
            sub_2454443A8();
            __break(1u);
            return;
          }
          v54 = v59;
        }
        isUniquelyReferenced_nonNull_native = v90;
        v61 = v95;
        v43 = v99;
        if ((v58 & 1) != 0)
        {
          v62 = v99[7] + 16 * v54;
          sub_2453BDCF8(*(_QWORD *)v62, *(_QWORD *)(v62 + 8));
          v63 = v89;
          *(_QWORD *)v62 = v88;
          *(_QWORD *)(v62 + 8) = v63;
        }
        else
        {
          v99[(v54 >> 6) + 8] |= 1 << v54;
          v64 = (uint64_t *)(v43[6] + 16 * v54);
          *v64 = v61;
          v64[1] = v49;
          v65 = (uint64_t *)(v43[7] + 16 * v54);
          v66 = v89;
          *v65 = v88;
          v65[1] = v66;
          v67 = v43[2];
          v68 = __OFADD__(v67, 1);
          v69 = v67 + 1;
          if (v68)
            goto LABEL_40;
          v43[2] = v69;
          swift_bridgeObjectRetain();
        }
        v42 = v96;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      ++v44;
      v39 = v110;
      if (v47 == v97)
        goto LABEL_34;
    }
  }
  v43 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_34:
  swift_bridgeObjectRelease_n();
  v70 = sub_2453F12B4((uint64_t)v43);
  swift_bridgeObjectRelease();
  v71 = v94;
  v72 = v87;
  sub_2453F0664(v87, v92, v70, v79, (uint64_t)v94);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (isUniquelyReferenced_nonNull_native)
  {

  }
  else
  {
    v73 = (uint64_t *)(v42 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_version);
    swift_beginAccess();
    v74 = *v73;
    v75 = v91;
    v76 = (uint64_t)v86;
    v77 = v81;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v91 + 16))(v86, v71, v81);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v75 + 56))(v76, 0, 1, v77);
    sub_2453BEDFC(v76, v74);

    (*(void (**)(_BYTE *, uint64_t))(v75 + 8))(v71, v77);
  }
}

unint64_t sub_2453F12B4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _OWORD *v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  int64_t i;
  uint64_t v31;
  uint64_t v32;
  __int128 v33[3];
  __int128 v34;
  __int128 v35[3];
  __int128 v36[3];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257464830);
    v2 = (_QWORD *)sub_245444228();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v29 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v3) >> 6;
  result = swift_bridgeObjectRetain();
  i = 0;
  v7 = MEMORY[0x24BDCDDE8];
  if (v5)
    goto LABEL_10;
LABEL_11:
  v13 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v13 >= v28)
    goto LABEL_32;
  v14 = *(_QWORD *)(v29 + 8 * v13);
  v15 = i + 1;
  if (!v14)
  {
    v15 = i + 2;
    if (i + 2 >= v28)
      goto LABEL_32;
    v14 = *(_QWORD *)(v29 + 8 * v15);
    if (!v14)
    {
      v15 = i + 3;
      if (i + 3 >= v28)
        goto LABEL_32;
      v14 = *(_QWORD *)(v29 + 8 * v15);
      if (!v14)
      {
        v15 = i + 4;
        if (i + 4 >= v28)
          goto LABEL_32;
        v14 = *(_QWORD *)(v29 + 8 * v15);
        if (!v14)
        {
          v16 = i + 5;
          if (i + 5 < v28)
          {
            v14 = *(_QWORD *)(v29 + 8 * v16);
            if (v14)
            {
              v15 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v15 = v16 + 1;
              if (__OFADD__(v16, 1))
                goto LABEL_36;
              if (v15 >= v28)
                break;
              v14 = *(_QWORD *)(v29 + 8 * v15);
              ++v16;
              if (v14)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_2453F70D8();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v5 = (v14 - 1) & v14;
  v12 = __clz(__rbit64(v14)) + (v15 << 6);
  for (i = v15; ; v12 = v11 | (i << 6))
  {
    v17 = 16 * v12;
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v19 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v17);
    v20 = *v19;
    v21 = v19[1];
    v31 = *v18;
    v32 = v18[1];
    swift_bridgeObjectRetain();
    sub_2453CFFAC(v20, v21);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2574649B0);
    swift_dynamicCast();
    sub_2453CBAF0(v33, v35);
    sub_2453CBAF0(v35, v36);
    sub_2453CBAF0(v36, &v34);
    result = sub_2453C64D8(v31, v32);
    v22 = result;
    if ((v23 & 1) != 0)
    {
      v8 = v7;
      v9 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v9 = v31;
      v9[1] = v32;
      v7 = v8;
      v10 = (_OWORD *)(v2[7] + 48 * v22);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      result = (unint64_t)sub_2453CBAF0(&v34, v10);
      if (!v5)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v24 = (uint64_t *)(v2[6] + 16 * result);
    *v24 = v31;
    v24[1] = v32;
    result = (unint64_t)sub_2453CBAF0(&v34, (_OWORD *)(v2[7] + 48 * result));
    v25 = v2[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      goto LABEL_34;
    v2[2] = v27;
    if (!v5)
      goto LABEL_11;
LABEL_10:
    v11 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_2453F15F4(uint64_t a1)
{
  uint64_t v1;

  return sub_2453D0EE0(a1, v1);
}

uint64_t sub_2453F15FC(uint64_t a1)
{
  uint64_t v1;

  return sub_2453D1220(a1, v1);
}

uint64_t sub_2453F1604(uint64_t a1)
{
  uint64_t v1;

  return sub_2453D1768(a1, v1);
}

uint64_t sub_2453F160C(uint64_t a1)
{
  uint64_t v1;

  return sub_2453D2038(a1, v1);
}

uint64_t sub_2453F1614(uint64_t a1)
{
  uint64_t *v1;

  return sub_2453D2630(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_2453F1620(uint64_t a1)
{
  uint64_t v1;

  return sub_2453D2CF4(a1, v1);
}

uint64_t sub_2453F1628@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2453E1E5C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_2453F1640@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_2453E0FE0(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_2453F1658(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_2453F166C(a1, a2, a3, a4, &qword_25440E250, type metadata accessor for ReplicatorRecord.ID);
}

uint64_t sub_2453F166C(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_2454441F8();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_2453F4014(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *sub_2453F1878(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25440E760);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2453F33AC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_2453F1984(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E768);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_2453F6388(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_2453F1A90(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2574648F8);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_2453F6A5C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_2453F1B9C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2453F1DC4(a1, a2, a3, (_QWORD *)*v3, &qword_25440E250, type metadata accessor for ReplicatorRecord.ID);
  *v3 = result;
  return result;
}

uint64_t sub_2453F1BC8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2453F1DC4(a1, a2, a3, (_QWORD *)*v3, &qword_2574649C8, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEA58]);
  *v3 = result;
  return result;
}

uint64_t sub_2453F1BF4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2453F1DC4(a1, a2, a3, (_QWORD *)*v3, &qword_257464990, type metadata accessor for ReplicatorDevice);
  *v3 = result;
  return result;
}

uint64_t sub_2453F1C20(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_2453F1C90(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_2453F1CFC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2453F1DC4(a1, a2, a3, (_QWORD *)*v3, &qword_25440E248, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordChange);
  *v3 = result;
  return result;
}

uint64_t sub_2453F1D28(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2453F1DC4(a1, a2, a3, (_QWORD *)*v3, &qword_2574649D8, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
  *v3 = result;
  return result;
}

uint64_t sub_2453F1D54(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2453F1FA4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2453F1D70(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_2453F210C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_2453F1D8C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2453F2294(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2453F1DA8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_2453F23F0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_2453F1DC4(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = sub_245444234();
  __break(1u);
  return result;
}

uint64_t sub_2453F1FA4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25440E760);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_245444234();
  __break(1u);
  return result;
}

uint64_t sub_2453F210C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2574648F8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257464900);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_245444234();
  __break(1u);
  return result;
}

uint64_t sub_2453F2294(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257464910);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_245444234();
  __break(1u);
  return result;
}

uint64_t sub_2453F23F0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257464908);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_245444234();
  __break(1u);
  return result;
}

size_t sub_2453F2558(uint64_t a1)
{
  return sub_2453F256C(a1, &qword_257464990, type metadata accessor for ReplicatorDevice);
}

size_t sub_2453F256C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  size_t result;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v6 = *(_QWORD *)(a3(0) - 8);
  v7 = *(_QWORD *)(v6 + 72);
  v8 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v9 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v9);
  if (v7)
  {
    if (result - v8 != 0x8000000000000000 || v7 != -1)
    {
      v9[2] = v3;
      v9[3] = 2 * ((uint64_t)(result - v8) / v7);
      v12 = sub_2453F2CBC(&v13, (uint64_t)v9 + v8, v3, a1, a3);
      swift_bridgeObjectRetain();
      sub_2453F70D8();
      if (v12 == v3)
        return (size_t)v9;
      __break(1u);
      return MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_2453F2688(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E758);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 80);
  v5 = sub_2453F2F74(&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_2453F70D8();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t sub_2453F2778(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;

  v45 = a1;
  v7 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_245443B14();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v44 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v57 = (char *)&v42 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v52 = (char *)&v42 - v16;
  v56 = type metadata accessor for ReplicatorRecord.ID(0);
  v51 = *(_QWORD *)(v56 - 8);
  v17 = MEMORY[0x24BDAC7A8](v56);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v50 = (uint64_t)&v42 - v20;
  if (!a3)
    return MEMORY[0x24BEE4B00];
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  v48 = v11;
  v49 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E210);
  result = sub_245444228();
  v22 = (_QWORD *)result;
  v43 = a2;
  if (a2 < 1)
    v23 = 0;
  else
    v23 = *v45;
  v24 = 0;
  v46 = a4;
  v47 = result + 64;
  while (1)
  {
    if (v23)
    {
      v53 = (v23 - 1) & v23;
      v54 = v24;
      v25 = __clz(__rbit64(v23)) | (v24 << 6);
    }
    else
    {
      v26 = v24 + 1;
      if (__OFADD__(v24, 1))
        goto LABEL_33;
      if (v26 >= v43)
        return (uint64_t)v22;
      v27 = v45[v26];
      v28 = v24 + 1;
      if (!v27)
      {
        v28 = v24 + 2;
        if (v24 + 2 >= v43)
          return (uint64_t)v22;
        v27 = v45[v28];
        if (!v27)
        {
          v28 = v24 + 3;
          if (v24 + 3 >= v43)
            return (uint64_t)v22;
          v27 = v45[v28];
          if (!v27)
          {
            v29 = v24 + 4;
            if (v24 + 4 >= v43)
              return (uint64_t)v22;
            v27 = v45[v29];
            if (!v27)
            {
              while (1)
              {
                v28 = v29 + 1;
                if (__OFADD__(v29, 1))
                  goto LABEL_34;
                if (v28 >= v43)
                  return (uint64_t)v22;
                v27 = v45[v28];
                ++v29;
                if (v27)
                  goto LABEL_24;
              }
            }
            v28 = v24 + 4;
          }
        }
      }
LABEL_24:
      v53 = (v27 - 1) & v27;
      v54 = v28;
      v25 = __clz(__rbit64(v27)) + (v28 << 6);
    }
    v30 = a4[6];
    v31 = v50;
    v55 = *(_QWORD *)(v51 + 72);
    sub_2453BA364(v30 + v55 * v25, v50, type metadata accessor for ReplicatorRecord.ID);
    v32 = v48;
    v33 = *(_QWORD *)(v48 + 72);
    v34 = a4[7] + v33 * v25;
    v35 = v52;
    (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v52, v34, v10);
    sub_2453D062C(v31, (uint64_t)v19, type metadata accessor for ReplicatorRecord.ID);
    v36 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
    v36(v57, v35, v10);
    sub_245444414();
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    v37 = (uint64_t)v49;
    sub_2453BA364((uint64_t)&v19[*(int *)(v56 + 28)], (uint64_t)v49, type metadata accessor for ReplicatorRecord.ID.Ownership);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v37, 1, v10) == 1)
    {
      sub_245444420();
    }
    else
    {
      v38 = v44;
      v36(v44, (char *)v37, v10);
      sub_245444420();
      sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
      sub_245443D60();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v38, v10);
    }
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    sub_245444444();
    v39 = v47;
    v40 = sub_2454440C0();
    *(_QWORD *)(v39 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
    sub_2453D062C((uint64_t)v19, v22[6] + v40 * v55, type metadata accessor for ReplicatorRecord.ID);
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v36)(v22[7] + v40 * v33, v57, v10);
    ++v22[2];
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v46;
    v23 = v53;
    v24 = v54;
    if (!a3)
      return (uint64_t)v22;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_2453F2CBC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;

  v10 = *(_QWORD *)(a5(0) - 8);
  v11 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v32 - v15;
  v37 = a4;
  v19 = *(_QWORD *)(a4 + 56);
  v18 = a4 + 56;
  v17 = v19;
  v36 = v18;
  v20 = -1 << *(_BYTE *)(v18 - 24);
  if (-v20 < 64)
    v21 = ~(-1 << -(char)v20);
  else
    v21 = -1;
  v22 = v21 & v17;
  if (!a2)
  {
    v23 = 0;
    a3 = 0;
LABEL_38:
    v31 = v36;
    *a1 = v37;
    a1[1] = v31;
    a1[2] = ~v20;
    a1[3] = v23;
    a1[4] = v22;
    return a3;
  }
  if (!a3)
  {
    v23 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v33 = -1 << *(_BYTE *)(v18 - 24);
  v34 = a1;
  v23 = 0;
  v24 = 0;
  v35 = (unint64_t)(63 - v20) >> 6;
  v32 = v35 - 1;
  if (!v22)
    goto LABEL_9;
LABEL_8:
  v25 = __clz(__rbit64(v22));
  v22 &= v22 - 1;
  v26 = v25 | (v23 << 6);
  while (1)
  {
    ++v24;
    v30 = *(_QWORD *)(v10 + 72);
    sub_2453BA364(*(_QWORD *)(v37 + 48) + v30 * v26, (uint64_t)v13, a5);
    sub_2453D062C((uint64_t)v13, (uint64_t)v16, a5);
    result = sub_2453D062C((uint64_t)v16, a2, a5);
    if (v24 == a3)
      goto LABEL_37;
    a2 += v30;
    if (v22)
      goto LABEL_8;
LABEL_9:
    v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v27 >= v35)
      goto LABEL_32;
    v28 = *(_QWORD *)(v36 + 8 * v27);
    if (!v28)
      break;
LABEL_18:
    v22 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v27 << 6);
    v23 = v27;
  }
  v23 += 2;
  if (v27 + 1 >= v35)
  {
    v22 = 0;
    v23 = v27;
    goto LABEL_36;
  }
  v28 = *(_QWORD *)(v36 + 8 * v23);
  if (v28)
    goto LABEL_14;
  v29 = v27 + 2;
  if (v27 + 2 >= v35)
    goto LABEL_32;
  v28 = *(_QWORD *)(v36 + 8 * v29);
  if (v28)
    goto LABEL_17;
  v23 = v27 + 3;
  if (v27 + 3 >= v35)
  {
    v22 = 0;
    v23 = v27 + 2;
    goto LABEL_36;
  }
  v28 = *(_QWORD *)(v36 + 8 * v23);
  if (v28)
  {
LABEL_14:
    v27 = v23;
    goto LABEL_18;
  }
  v29 = v27 + 4;
  if (v27 + 4 >= v35)
  {
LABEL_32:
    v22 = 0;
LABEL_36:
    a3 = v24;
LABEL_37:
    v20 = v33;
    a1 = v34;
    goto LABEL_38;
  }
  v28 = *(_QWORD *)(v36 + 8 * v29);
  if (v28)
  {
LABEL_17:
    v27 = v29;
    goto LABEL_18;
  }
  while (1)
  {
    v27 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v27 >= v35)
    {
      v22 = 0;
      v23 = v32;
      goto LABEL_36;
    }
    v28 = *(_QWORD *)(v36 + 8 * v27);
    ++v29;
    if (v28)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_2453F2F74(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  int64_t v31;
  uint64_t v32;

  v6 = *(_QWORD *)(a4 + 56);
  v4 = a4 + 56;
  v5 = v6;
  v32 = v4;
  v7 = -1 << *(_BYTE *)(v4 - 24);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & v5;
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *result = a4;
    result[1] = v32;
    result[2] = ~v7;
    result[3] = v12;
    result[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v29 = -1 << *(_BYTE *)(v4 - 24);
  v30 = result;
  v12 = 0;
  v13 = 0;
  v31 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v14 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v15 = v14 | (v12 << 6);
  while (1)
  {
    ++v13;
    v19 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 80 * v15);
    v20 = v19[1];
    v21 = v19[2];
    v22 = v19[3];
    v23 = v19[4];
    v24 = v19[5];
    v25 = v19[6];
    v26 = v19[7];
    v28 = v19[8];
    v27 = v19[9];
    *v11 = *v19;
    v11[1] = v20;
    v11[2] = v21;
    v11[3] = v22;
    v11[4] = v23;
    v11[5] = v24;
    v11[6] = v25;
    v11[7] = v26;
    v11[8] = v28;
    v11[9] = v27;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (_QWORD *)swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v16 >= v31)
      goto LABEL_33;
    v17 = *(_QWORD *)(v32 + 8 * v16);
    if (!v17)
    {
      v12 += 2;
      if (v16 + 1 >= v31)
      {
        v9 = 0;
        v12 = v16;
      }
      else
      {
        v17 = *(_QWORD *)(v32 + 8 * v12);
        if (v17)
          goto LABEL_14;
        v18 = v16 + 2;
        if (v16 + 2 >= v31)
          goto LABEL_33;
        v17 = *(_QWORD *)(v32 + 8 * v18);
        if (v17)
        {
LABEL_17:
          v16 = v18;
          goto LABEL_18;
        }
        v12 = v16 + 3;
        if (v16 + 3 < v31)
        {
          v17 = *(_QWORD *)(v32 + 8 * v12);
          if (v17)
          {
LABEL_14:
            v16 = v12;
            goto LABEL_18;
          }
          v18 = v16 + 4;
          if (v16 + 4 >= v31)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v17 = *(_QWORD *)(v32 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              v16 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_42;
              if (v16 >= v31)
              {
                v9 = 0;
                v12 = v31 - 1;
                goto LABEL_37;
              }
              v17 = *(_QWORD *)(v32 + 8 * v16);
              ++v18;
              if (v17)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v16 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v29;
      result = v30;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v12 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_2453F3228(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_2453F32C8(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_2453F33AC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_245444234();
  __break(1u);
  return result;
}

uint64_t sub_2453F349C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void (*v38)(char *, unint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  unint64_t v44;
  char v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  char v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;

  v50 = a2;
  v63 = a4;
  v51 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
  MEMORY[0x24BDAC7A8](v5);
  v60 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E4F0);
  v7 = MEMORY[0x24BDAC7A8](v59);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v67 = (uint64_t)&v49 - v10;
  v56 = sub_245443B14();
  v11 = *(_QWORD **)(v56 - 8);
  v12 = MEMORY[0x24BDAC7A8](v56);
  v55 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v49 - v14;
  v16 = type metadata accessor for ReplicatorRecord.ID(0);
  v57 = *(_QWORD *)(v16 - 8);
  result = MEMORY[0x24BDAC7A8](v16);
  v66 = (uint64_t)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = 0;
  v61 = (_QWORD *)a3;
  v20 = *(_QWORD *)(a3 + 64);
  v52 = 0;
  v53 = a3 + 64;
  v21 = 1 << *(_BYTE *)(a3 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v20;
  v54 = (unint64_t)(v21 + 63) >> 6;
  v68 = v9;
  v58 = v15;
  v24 = v56;
  while (v23)
  {
    v64 = (v23 - 1) & v23;
    v65 = v19;
    v28 = __clz(__rbit64(v23)) | (v19 << 6);
LABEL_23:
    v33 = v61;
    v34 = v66;
    sub_2453BA364(v61[6] + *(_QWORD *)(v57 + 72) * v28, v66, type metadata accessor for ReplicatorRecord.ID);
    v35 = v33[7];
    v36 = v11[9];
    v62 = v28;
    v37 = v11;
    v38 = (void (*)(char *, unint64_t, uint64_t))v11[2];
    v38(v15, v35 + v36 * v28, v24);
    v39 = v59;
    v40 = v67;
    v41 = (char *)(v67 + *(int *)(v59 + 48));
    sub_2453BA364(v34, v67, type metadata accessor for ReplicatorRecord.ID);
    v38(v41, (unint64_t)v15, v24);
    v42 = v68;
    v43 = (char *)v68 + *(int *)(v39 + 48);
    sub_2453BA364(v40, (uint64_t)v68, type metadata accessor for ReplicatorRecord.ID);
    v38(v43, (unint64_t)v41, v24);
    if (*(_QWORD *)(v63 + 16) && (v44 = sub_2453C656C(v42), (v45 & 1) != 0))
    {
      v25 = (uint64_t)v60;
      v38(v60, *(_QWORD *)(v63 + 56) + v44 * v36, v24);
      v11 = v37;
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v37[7])(v25, 0, 1, v24);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v37[6])(v25, 1, v24) == 1)
        goto LABEL_5;
      v46 = v55;
      ((void (*)(char *, uint64_t, uint64_t))v37[4])(v55, v25, v24);
      v47 = (void (*)(char *, uint64_t))v37[1];
      v47(v43, v24);
      sub_2453BA3A8((uint64_t)v68, type metadata accessor for ReplicatorRecord.ID);
      sub_2453B8BF4(&qword_25440E1B0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v48 = sub_245443D6C();
      v47(v46, v24);
      sub_2453D055C(v67, &qword_25440E4F0);
      v15 = v58;
      v47(v58, v24);
      result = sub_2453BA3A8(v66, type metadata accessor for ReplicatorRecord.ID);
      v23 = v64;
      v19 = v65;
      if ((v48 & 1) == 0)
        goto LABEL_6;
    }
    else
    {
      v11 = v37;
      v25 = (uint64_t)v60;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v37[7])(v60, 1, 1, v24);
LABEL_5:
      sub_2453D055C(v67, &qword_25440E4F0);
      sub_2453D055C(v25, (uint64_t *)&unk_25440E8F0);
      v26 = (void (*)(char *, uint64_t))v11[1];
      v26(v43, v24);
      sub_2453BA3A8((uint64_t)v68, type metadata accessor for ReplicatorRecord.ID);
      v15 = v58;
      v26(v58, v24);
      result = sub_2453BA3A8(v66, type metadata accessor for ReplicatorRecord.ID);
      v23 = v64;
      v19 = v65;
LABEL_6:
      *(unint64_t *)((char *)v51 + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v62;
      if (__OFADD__(v52++, 1))
        goto LABEL_30;
    }
  }
  v29 = v19 + 1;
  if (!__OFADD__(v19, 1))
  {
    if (v29 >= v54)
      return sub_2453F2778(v51, v50, v52, v61);
    v30 = *(_QWORD *)(v53 + 8 * v29);
    v31 = v19 + 1;
    if (!v30)
    {
      v31 = v19 + 2;
      if (v19 + 2 >= v54)
        return sub_2453F2778(v51, v50, v52, v61);
      v30 = *(_QWORD *)(v53 + 8 * v31);
      if (!v30)
      {
        v31 = v19 + 3;
        if (v19 + 3 >= v54)
          return sub_2453F2778(v51, v50, v52, v61);
        v30 = *(_QWORD *)(v53 + 8 * v31);
        if (!v30)
        {
          v32 = v19 + 4;
          if (v19 + 4 >= v54)
            return sub_2453F2778(v51, v50, v52, v61);
          v30 = *(_QWORD *)(v53 + 8 * v32);
          if (!v30)
          {
            while (1)
            {
              v31 = v32 + 1;
              if (__OFADD__(v32, 1))
                goto LABEL_31;
              if (v31 >= v54)
                return sub_2453F2778(v51, v50, v52, v61);
              v30 = *(_QWORD *)(v53 + 8 * v31);
              ++v32;
              if (v30)
                goto LABEL_22;
            }
          }
          v31 = v19 + 4;
        }
      }
    }
LABEL_22:
    v64 = (v30 - 1) & v30;
    v65 = v31;
    v28 = __clz(__rbit64(v30)) + (v31 << 6);
    goto LABEL_23;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_2453F39EC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void (*v26)(char *, uint64_t);
  unint64_t v27;
  BOOL v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v46 = a2;
  v47 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
  MEMORY[0x24BDAC7A8](v6);
  v57 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E4F0);
  v8 = MEMORY[0x24BDAC7A8](v53);
  v58 = (uint64_t *)((char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v8);
  v63 = (uint64_t)&v45 - v10;
  v64 = sub_245443B14();
  v62 = *(_QWORD *)(v64 - 8);
  MEMORY[0x24BDAC7A8](v64);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ReplicatorRecord.ID(0);
  v51 = *(_QWORD *)(v13 - 8);
  result = MEMORY[0x24BDAC7A8](v13);
  v61 = (uint64_t)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = 0;
  v55 = (_QWORD *)a3;
  v17 = *(_QWORD *)(a3 + 64);
  v48 = 0;
  v49 = a3 + 64;
  v18 = 1 << *(_BYTE *)(a3 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v50 = (unint64_t)(v18 + 63) >> 6;
  v52 = v12;
  while (v20)
  {
    v59 = (v20 - 1) & v20;
    v60 = v16;
    v27 = __clz(__rbit64(v20)) | (v16 << 6);
LABEL_19:
    v32 = v55;
    v33 = v61;
    sub_2453BA364(v55[6] + *(_QWORD *)(v51 + 72) * v27, v61, type metadata accessor for ReplicatorRecord.ID);
    v34 = v32[7];
    v35 = *(_QWORD *)(v62 + 72);
    v54 = v27;
    v56 = v35;
    v36 = *(void (**)(char *, unint64_t, uint64_t))(v62 + 16);
    v37 = v64;
    v36(v12, v34 + v35 * v27, v64);
    v38 = v53;
    v39 = v63;
    v40 = (char *)(v63 + *(int *)(v53 + 48));
    sub_2453BA364(v33, v63, type metadata accessor for ReplicatorRecord.ID);
    v36(v40, (unint64_t)v12, v37);
    v41 = v58;
    v42 = (char *)v58 + *(int *)(v38 + 48);
    sub_2453BA364(v39, (uint64_t)v58, type metadata accessor for ReplicatorRecord.ID);
    v36(v42, (unint64_t)v40, v37);
    if (*(_QWORD *)(a4 + 16))
    {
      v43 = sub_2453C656C(v41);
      if ((v44 & 1) != 0)
      {
        v36(v57, *(_QWORD *)(a4 + 56) + v43 * v56, v64);
        v21 = 0;
      }
      else
      {
        v21 = 1;
      }
      v41 = v58;
    }
    else
    {
      v21 = 1;
    }
    v20 = v59;
    v16 = v60;
    v22 = v62;
    v23 = (uint64_t)v57;
    v24 = v64;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56))(v57, v21, 1, v64);
    sub_2453D055C(v63, &qword_25440E4F0);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v23, 1, v24);
    sub_2453D055C(v23, (uint64_t *)&unk_25440E8F0);
    v26 = *(void (**)(char *, uint64_t))(v22 + 8);
    v26(v42, v24);
    sub_2453BA3A8((uint64_t)v41, type metadata accessor for ReplicatorRecord.ID);
    v12 = v52;
    v26(v52, v24);
    result = sub_2453BA3A8(v61, type metadata accessor for ReplicatorRecord.ID);
    if (v25 == 1)
    {
      *(unint64_t *)((char *)v47 + ((v54 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v54;
      v28 = __OFADD__(v48++, 1);
      if (v28)
      {
        __break(1u);
        return sub_2453F2778(v47, v46, v48, v55);
      }
    }
  }
  v28 = __OFADD__(v16, 1);
  v29 = v16 + 1;
  if (v28)
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v29 >= v50)
    return sub_2453F2778(v47, v46, v48, v55);
  v30 = *(_QWORD *)(v49 + 8 * v29);
  if (v30)
  {
LABEL_18:
    v59 = (v30 - 1) & v30;
    v60 = v29;
    v27 = __clz(__rbit64(v30)) + (v29 << 6);
    goto LABEL_19;
  }
  v31 = v29 + 1;
  if (v29 + 1 >= v50)
    return sub_2453F2778(v47, v46, v48, v55);
  v30 = *(_QWORD *)(v49 + 8 * v31);
  if (v30)
    goto LABEL_17;
  v31 = v29 + 2;
  if (v29 + 2 >= v50)
    return sub_2453F2778(v47, v46, v48, v55);
  v30 = *(_QWORD *)(v49 + 8 * v31);
  if (v30)
    goto LABEL_17;
  v31 = v29 + 3;
  if (v29 + 3 >= v50)
    return sub_2453F2778(v47, v46, v48, v55);
  v30 = *(_QWORD *)(v49 + 8 * v31);
  if (v30)
  {
LABEL_17:
    v29 = v31;
    goto LABEL_18;
  }
  while (1)
  {
    v29 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v29 >= v50)
      return sub_2453F2778(v47, v46, v48, v55);
    v30 = *(_QWORD *)(v49 + 8 * v29);
    ++v31;
    if (v30)
      goto LABEL_18;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_2453F3E5C(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  char v7;
  unsigned int v8;
  unint64_t v9;
  size_t v10;
  uint64_t isStackAllocationSafe;
  uint64_t v12;
  void *v13;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x24BDAC8D0];
  v7 = *(_BYTE *)(a1 + 32);
  v8 = v7 & 0x3F;
  v9 = (unint64_t)((1 << v7) + 63) >> 6;
  v10 = 8 * v9;
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v8 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_bridgeObjectRetain();
    v12 = a3((char *)v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v9, a1, a2);
    swift_bridgeObjectRelease();
    if (v3)
      swift_willThrow();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v13 = (void *)swift_slowAlloc();
    bzero(v13, v10);
    swift_bridgeObjectRetain();
    v12 = a3((char *)v13, v9, a1, a2);
    swift_bridgeObjectRelease();
    MEMORY[0x249534440](v13, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v12;
}

uint64_t sub_2453F4014(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_245444234();
  __break(1u);
  return result;
}

uint64_t sub_2453F412C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD v94[2];
  uint64_t v95;
  uint64_t v96;
  int64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;

  v113 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E4F0);
  v4 = MEMORY[0x24BDAC7A8](v113);
  v102 = (uint64_t)v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v112 = (uint64_t)v94 - v7;
  v8 = MEMORY[0x24BDAC7A8](v6);
  v111 = (uint64_t)v94 - v9;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v110 = (uint64_t)v94 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v109 = (char *)v94 - v12;
  v13 = type metadata accessor for ReplicatorRecordChange();
  v107 = *(_QWORD *)(v13 - 8);
  v108 = v13;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v104 = (uint64_t)v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v94 - v16;
  swift_bridgeObjectRetain();
  v18 = swift_bridgeObjectRetain();
  v19 = sub_2453F3E5C(v18, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_2453F349C);
  v94[1] = 0;
  v96 = a1;
  swift_bridgeObjectRelease();
  v95 = a2;
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(v19 + 16);
  if (!v20)
  {
    swift_release();
    v48 = MEMORY[0x24BEE4AF8];
LABEL_31:
    v59 = v95;
    swift_bridgeObjectRetain();
    v60 = v96;
    swift_bridgeObjectRetain();
    v61 = sub_2453F3E5C(v59, v60, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_2453F39EC);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v62 = *(_QWORD *)(v61 + 16);
    if (!v62)
    {
      swift_release();
      v85 = MEMORY[0x24BEE4AF8];
LABEL_57:
      v116 = MEMORY[0x24BEE4AF8];
      sub_2453DBF74(v48);
      sub_2453DBF74(v85);
      return v116;
    }
    v100 = v48;
    v116 = MEMORY[0x24BEE4AF8];
    sub_2453F1CFC(0, v62, 0);
    result = sub_245431A6C(v61);
    v64 = result;
    v65 = 0;
    v66 = v61 + 64;
    v67 = *(_BYTE *)(v61 + 32);
    v99 = v61 + 88;
    v105 = v61;
    v101 = (char *)v62;
    v102 = v63;
    v103 = v61 + 64;
    v68 = v111;
    while (1)
    {
      if (v64 < 0 || v64 >= 1 << v67)
        goto LABEL_64;
      if ((*(_QWORD *)(v66 + 8 * ((unint64_t)v64 >> 6)) & (1 << v64)) == 0)
        goto LABEL_65;
      if (*(_DWORD *)(v61 + 36) != (_DWORD)v63)
        goto LABEL_66;
      v114 = 1 << v64;
      v115 = (unint64_t)v64 >> 6;
      v106 = v65;
      v71 = v113;
      v72 = (uint64_t)v109;
      v73 = &v109[*(int *)(v113 + 48)];
      v74 = *(_QWORD *)(v61 + 48);
      v75 = type metadata accessor for ReplicatorRecord.ID(0);
      sub_2453BA364(v74 + *(_QWORD *)(*(_QWORD *)(v75 - 8) + 72) * v64, v72, type metadata accessor for ReplicatorRecord.ID);
      v76 = *(_QWORD *)(v61 + 56);
      v77 = sub_245443B14();
      v78 = *(_QWORD *)(v77 - 8);
      v79 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 16);
      v79(v73, v76 + *(_QWORD *)(v78 + 72) * v64, v77);
      v80 = v110;
      sub_2453BA364(v72, v110, type metadata accessor for ReplicatorRecord.ID);
      v79((char *)(v80 + *(int *)(v71 + 48)), (uint64_t)v73, v77);
      sub_2453D0428(v80, v68, &qword_25440E4F0);
      sub_2453D055C(v72, &qword_25440E4F0);
      v81 = *(int *)(v71 + 48);
      v82 = v112;
      v83 = (char *)(v112 + v81);
      v84 = v68 + v81;
      sub_2453BA364(v68, v112, type metadata accessor for ReplicatorRecord.ID);
      v79(v83, v84, v77);
      sub_2453D062C(v82, v104, type metadata accessor for ReplicatorRecord.ID);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v83, v77);
      sub_2453D055C(v68, &qword_25440E4F0);
      v85 = v116;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2453F1CFC(0, *(_QWORD *)(v85 + 16) + 1, 1);
        v85 = v116;
      }
      v87 = *(_QWORD *)(v85 + 16);
      v86 = *(_QWORD *)(v85 + 24);
      if (v87 >= v86 >> 1)
      {
        sub_2453F1CFC(v86 > 1, v87 + 1, 1);
        v85 = v116;
      }
      *(_QWORD *)(v85 + 16) = v87 + 1;
      result = sub_2453D062C(v104, v85+ ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80))+ *(_QWORD *)(v107 + 72) * v87, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordChange);
      v61 = v105;
      v67 = *(_BYTE *)(v105 + 32);
      v69 = 1 << v67;
      if (v64 >= 1 << v67)
        goto LABEL_67;
      v66 = v103;
      v88 = v115;
      v89 = *(_QWORD *)(v103 + 8 * v115);
      if ((v89 & v114) == 0)
        goto LABEL_68;
      LODWORD(v63) = v102;
      if (*(_DWORD *)(v105 + 36) != (_DWORD)v102)
        goto LABEL_69;
      v90 = v89 & (-2 << (v64 & 0x3F));
      if (v90)
      {
        v69 = __clz(__rbit64(v90)) | v64 & 0xFFFFFFFFFFFFFFC0;
        v70 = (uint64_t)v101;
      }
      else
      {
        v91 = v115 + 1;
        v92 = (v69 + 63) >> 6;
        v70 = (uint64_t)v101;
        if (v115 + 1 < v92)
        {
          v93 = *(_QWORD *)(v103 + 8 * v91);
          if (!v93)
          {
            v91 = v115 + 2;
            if (v115 + 2 >= v92)
              goto LABEL_34;
            v93 = *(_QWORD *)(v103 + 8 * v91);
            if (!v93)
            {
              while (v92 - 3 != v88)
              {
                v93 = *(_QWORD *)(v99 + 8 * v88++);
                if (v93)
                {
                  v91 = v88 + 2;
                  goto LABEL_49;
                }
              }
              goto LABEL_34;
            }
          }
LABEL_49:
          v69 = __clz(__rbit64(v93)) + (v91 << 6);
        }
      }
LABEL_34:
      v65 = v106 + 1;
      v64 = v69;
      if (v106 + 1 == v70)
      {
        swift_release();
        v48 = v100;
        goto LABEL_57;
      }
    }
  }
  v116 = MEMORY[0x24BEE4AF8];
  sub_2453F1CFC(0, v20, 0);
  result = sub_245431A6C(v19);
  if (result < 0)
    goto LABEL_63;
  v23 = result;
  if (result >= 1 << *(_BYTE *)(v19 + 32))
    goto LABEL_63;
  v24 = 0;
  v25 = v19 + 64;
  v103 = v19 + 80;
  v100 = v19;
  v101 = v17;
  v97 = v20;
  v98 = v22;
  v99 = v19 + 64;
  while (1)
  {
    v26 = v23 >> 6;
    if ((*(_QWORD *)(v25 + 8 * (v23 >> 6)) & (1 << v23)) == 0)
      break;
    if (*(_DWORD *)(v19 + 36) != (_DWORD)v22)
      goto LABEL_59;
    v105 = v24;
    v106 = 1 << v23;
    v27 = v113;
    v28 = (uint64_t)v109;
    v29 = &v109[*(int *)(v113 + 48)];
    v30 = *(_QWORD *)(v19 + 48);
    v31 = type metadata accessor for ReplicatorRecord.ID(0);
    sub_2453BA364(v30 + *(_QWORD *)(*(_QWORD *)(v31 - 8) + 72) * v23, v28, type metadata accessor for ReplicatorRecord.ID);
    v32 = *(_QWORD *)(v19 + 56);
    v33 = sub_245443B14();
    v34 = *(_QWORD *)(v33 - 8);
    v35 = *(_QWORD *)(v34 + 72);
    v114 = v23;
    v36 = *(void (**)(char *, unint64_t, uint64_t))(v34 + 16);
    v36(v29, v32 + v35 * v23, v33);
    v37 = v110;
    sub_2453BA364(v28, v110, type metadata accessor for ReplicatorRecord.ID);
    v36((char *)(v37 + *(int *)(v27 + 48)), (unint64_t)v29, v33);
    v38 = v111;
    sub_2453D0428(v37, v111, &qword_25440E4F0);
    sub_2453D055C(v28, &qword_25440E4F0);
    v39 = *(int *)(v27 + 48);
    v40 = v112;
    v41 = (char *)(v112 + v39);
    v115 = v112 + v39;
    v42 = v38 + v39;
    sub_2453BA364(v38, v112, type metadata accessor for ReplicatorRecord.ID);
    v36(v41, v42, v33);
    v43 = *(int *)(v27 + 48);
    v44 = v102;
    v45 = (char *)(v102 + v43);
    sub_2453BA364(v38, v102, type metadata accessor for ReplicatorRecord.ID);
    v36(v45, v42, v33);
    v46 = (uint64_t)v101;
    sub_2453D062C(v40, (uint64_t)v101, type metadata accessor for ReplicatorRecord.ID);
    v47 = type metadata accessor for ReplicatorRecordVersion();
    (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v46 + *(int *)(v47 + 20), v45, v33);
    sub_2453BA3A8(v44, type metadata accessor for ReplicatorRecord.ID);
    (*(void (**)(unint64_t, uint64_t))(v34 + 8))(v115, v33);
    swift_storeEnumTagMultiPayload();
    sub_2453D055C(v38, &qword_25440E4F0);
    v48 = v116;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_2453F1CFC(0, *(_QWORD *)(v48 + 16) + 1, 1);
      v48 = v116;
    }
    v19 = v100;
    v49 = v114;
    v51 = *(_QWORD *)(v48 + 16);
    v50 = *(_QWORD *)(v48 + 24);
    if (v51 >= v50 >> 1)
    {
      sub_2453F1CFC(v50 > 1, v51 + 1, 1);
      v48 = v116;
    }
    *(_QWORD *)(v48 + 16) = v51 + 1;
    result = sub_2453D062C(v46, v48+ ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80))+ *(_QWORD *)(v107 + 72) * v51, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorRecordChange);
    v52 = 1 << *(_BYTE *)(v19 + 32);
    if (v49 >= v52)
      goto LABEL_60;
    v25 = v99;
    v53 = *(_QWORD *)(v99 + 8 * v26);
    if ((v53 & v106) == 0)
      goto LABEL_61;
    LODWORD(v22) = v98;
    if (*(_DWORD *)(v19 + 36) != (_DWORD)v98)
      goto LABEL_62;
    v54 = v53 & (-2 << (v49 & 0x3F));
    if (v54)
    {
      v23 = __clz(__rbit64(v54)) | v49 & 0xFFFFFFFFFFFFFFC0;
LABEL_23:
      v58 = v97;
      goto LABEL_24;
    }
    v55 = v26 + 1;
    v56 = (unint64_t)(v52 + 63) >> 6;
    if (v26 + 1 >= v56)
    {
      v23 = 1 << *(_BYTE *)(v19 + 32);
      goto LABEL_23;
    }
    v57 = *(_QWORD *)(v99 + 8 * v55);
    v58 = v97;
    if (v57)
    {
LABEL_21:
      v23 = __clz(__rbit64(v57)) + (v55 << 6);
    }
    else
    {
      while (v56 - 2 != v26)
      {
        v57 = *(_QWORD *)(v103 + 8 * v26++);
        if (v57)
        {
          v55 = v26 + 1;
          goto LABEL_21;
        }
      }
      v23 = 1 << *(_BYTE *)(v19 + 32);
    }
LABEL_24:
    v24 = v105 + 1;
    if (v105 + 1 == v58)
    {
      swift_release();
      goto LABEL_31;
    }
    if ((v23 & 0x8000000000000000) != 0 || (uint64_t)v23 >= v52)
      goto LABEL_63;
  }
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
  return result;
}

uint64_t sub_2453F4A88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v23 = a2;
  v24 = type metadata accessor for ReplicatorMessage();
  v4 = MEMORY[0x24BDAC7A8](v24);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v21 - v8;
  result = MEMORY[0x24BEE4AF8];
  v25 = MEMORY[0x24BEE4AF8];
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v21 = v2;
    v12 = *(_QWORD *)(v7 + 72);
    v22 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v13 = a1 + v22;
    v14 = MEMORY[0x24BEE4AF8];
    do
    {
      sub_2453BA364(v13, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
      v15 = &v9[*(int *)(v24 + 20)];
      v16 = *(_QWORD *)v15 == *(_QWORD *)(v23 + 16) && *((_QWORD *)v15 + 1) == *(_QWORD *)(v23 + 24);
      if (v16 || (sub_245444390() & 1) != 0)
      {
        v17 = (uint64_t)v6;
        sub_2453D062C((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_2453F1D28(0, *(_QWORD *)(v14 + 16) + 1, 1);
        v14 = v25;
        v19 = *(_QWORD *)(v25 + 16);
        v18 = *(_QWORD *)(v25 + 24);
        if (v19 >= v18 >> 1)
        {
          sub_2453F1D28(v18 > 1, v19 + 1, 1);
          v14 = v25;
        }
        *(_QWORD *)(v14 + 16) = v19 + 1;
        v20 = v14 + v22 + v19 * v12;
        v6 = (char *)v17;
        sub_2453D062C(v17, v20, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
      }
      else
      {
        sub_2453BA3A8((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
      }
      v13 += v12;
      --v11;
    }
    while (v11);
    return v25;
  }
  return result;
}

uint64_t sub_2453F4C68(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  char v21;
  void (*v22)(uint64_t, uint64_t);
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t (*v34)(uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;

  v45 = a2;
  v53 = a4;
  v46 = a1;
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E4F0);
  v5 = MEMORY[0x24BDAC7A8](v52);
  v50 = (uint64_t)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v57 = (uint64_t)&v45 - v7;
  v8 = sub_245443B14();
  v60 = *(_QWORD **)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v59 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ReplicatorRecord.ID(0);
  v51 = *(_QWORD *)(v10 - 8);
  result = MEMORY[0x24BDAC7A8](v10);
  v58 = (uint64_t)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = 0;
  v54 = (_QWORD *)a3;
  v14 = *(_QWORD *)(a3 + 64);
  v47 = 0;
  v48 = a3 + 64;
  v15 = 1 << *(_BYTE *)(a3 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v49 = (unint64_t)(v15 + 63) >> 6;
  v18 = type metadata accessor for ReplicatorRecord.ID;
  v19 = v57;
  v20 = v58;
  while (v17)
  {
    v23 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    v56 = v13;
    v24 = v23 | (v13 << 6);
LABEL_21:
    v29 = v54;
    sub_2453BA364(v54[6] + *(_QWORD *)(v51 + 72) * v24, v20, v18);
    v30 = v29[7];
    v31 = v60[9];
    v55 = v24;
    v32 = v30 + v31 * v24;
    v33 = (void (*)(char *, uint64_t, uint64_t))v60[2];
    v34 = v18;
    v35 = v59;
    v33(v59, v32, v8);
    v36 = v52;
    v37 = v19 + *(int *)(v52 + 48);
    sub_2453BA364(v20, v19, v34);
    v33((char *)v37, (uint64_t)v35, v8);
    v38 = v50;
    v39 = (char *)(v50 + *(int *)(v36 + 48));
    sub_2453BA364(v19, v50, v34);
    v33(v39, v37, v8);
    v41 = *(_QWORD *)(v38 + 32);
    v40 = *(_QWORD *)(v38 + 40);
    swift_bridgeObjectRetain();
    v42 = v38;
    v18 = v34;
    sub_2453BA3A8(v42, v34);
    if (v41 == *v53 && v40 == v53[1])
    {
      swift_bridgeObjectRelease();
      sub_2453D055C(v57, &qword_25440E4F0);
      v43 = (void (*)(uint64_t, uint64_t))v60[1];
      v43((uint64_t)v39, v8);
      v43((uint64_t)v59, v8);
      result = sub_2453BA3A8(v58, v34);
      v13 = v56;
      goto LABEL_24;
    }
    v21 = sub_245444390();
    swift_bridgeObjectRelease();
    sub_2453D055C(v57, &qword_25440E4F0);
    v22 = (void (*)(uint64_t, uint64_t))v60[1];
    v22((uint64_t)v39, v8);
    v22((uint64_t)v59, v8);
    result = sub_2453BA3A8(v58, v34);
    v13 = v56;
    if ((v21 & 1) != 0)
    {
LABEL_24:
      *(unint64_t *)((char *)v46 + ((v55 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v55;
      if (__OFADD__(v47++, 1))
      {
        __break(1u);
        return sub_2453F2778(v46, v45, v47, v54);
      }
    }
  }
  v25 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v25 >= v49)
    return sub_2453F2778(v46, v45, v47, v54);
  v26 = *(_QWORD *)(v48 + 8 * v25);
  v27 = v13 + 1;
  if (v26)
    goto LABEL_20;
  v27 = v13 + 2;
  if (v13 + 2 >= v49)
    return sub_2453F2778(v46, v45, v47, v54);
  v26 = *(_QWORD *)(v48 + 8 * v27);
  if (v26)
    goto LABEL_20;
  v27 = v13 + 3;
  if (v13 + 3 >= v49)
    return sub_2453F2778(v46, v45, v47, v54);
  v26 = *(_QWORD *)(v48 + 8 * v27);
  if (v26)
  {
LABEL_20:
    v17 = (v26 - 1) & v26;
    v56 = v27;
    v24 = __clz(__rbit64(v26)) + (v27 << 6);
    goto LABEL_21;
  }
  v28 = v13 + 4;
  if (v13 + 4 >= v49)
    return sub_2453F2778(v46, v45, v47, v54);
  v26 = *(_QWORD *)(v48 + 8 * v28);
  if (v26)
  {
    v27 = v13 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v27 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v27 >= v49)
      return sub_2453F2778(v46, v45, v47, v54);
    v26 = *(_QWORD *)(v48 + 8 * v27);
    ++v28;
    if (v26)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_2453F5090(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_2453F50B8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void sub_2453F5128(_BYTE *a1@<X8>)
{
  uint64_t v1;

  sub_2453EC248(*(void **)(v1 + 16), *(void **)(v1 + 24), (void (*)(void))sub_2453F77DC, (SEL *)&selRef_disableClientWithParameters_error_, a1);
}

void sub_2453F515C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 224) = *(_BYTE *)(v0 + 24);
}

void sub_2453F516C(_BYTE *a1@<X8>)
{
  uint64_t v1;

  sub_2453EC248(*(void **)(v1 + 16), *(void **)(v1 + 24), (void (*)(void))sub_2453F7798, (SEL *)&selRef_enableClientWithParameters_error_, a1);
}

void sub_2453F51A0(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 224);
}

void sub_2453F51AC(_BYTE *a1@<X8>)
{
  uint64_t v1;

  sub_2453EC248(*(void **)(v1 + 16), *(void **)(v1 + 24), (void (*)(void))sub_2453F7710, (SEL *)&selRef_isClientEnabledWithParameters_error_, a1);
}

uint64_t sub_2453F51E0@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;

  return sub_2453D5B48(v1, a1);
}

uint64_t sub_2453F51F8()
{
  uint64_t v0;

  return sub_2453EA2F8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_2453F5210@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_2453EA18C(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_2453F522C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_2453F5250()
{
  return sub_2453D5E24();
}

void sub_2453F5258(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_2453ECCE4(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_2453F5274()
{
  return sub_2453D618C();
}

uint64_t sub_2453F527C(uint64_t *a1)
{
  uint64_t v1;

  return sub_2453D6468(a1, v1, (void (*)(uint64_t))sub_2453D6224);
}

uint64_t sub_2453F529C(uint64_t *a1)
{
  uint64_t v1;

  return sub_2453D6468(a1, v1, (void (*)(uint64_t))sub_2453D64D4);
}

void sub_2453F52BC(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_2453EBF6C(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_2453F52D8()
{
  uint64_t v0;

  return sub_2453EBBAC(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

void sub_2453F52F0()
{
  sub_2453F5304();
}

void sub_2453F5304()
{
  uint64_t v0;

  sub_2453E2770(*(_QWORD *)(v0 + 16), *(objc_class **)(v0 + 24), *(_QWORD *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
}

uint64_t sub_2453F5324()
{
  uint64_t v0;

  return sub_2453E3AD4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_2453F5340()
{
  return sub_2453F5378((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2453E3C94);
}

uint64_t sub_2453F535C()
{
  return sub_2453F5378((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_2453E6F74);
}

uint64_t sub_2453F5378(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(unsigned __int8 *)(v1 + 48));
}

uint64_t sub_2453F539C()
{
  return sub_2453EA208();
}

uint64_t sub_2453F53B4()
{
  uint64_t v0;

  return sub_2453DE7E4(*(void (**)(uint64_t *))(v0 + 16));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_2453F53D4()
{
  uint64_t v0;

  return sub_2453DE960(*(void (**)(uint64_t *))(v0 + 16));
}

uint64_t sub_2453F53DC()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2453F5408(uint64_t a1)
{
  uint64_t *v1;

  return sub_2453DEAD8(a1, v1[2], v1[3], v1[4]);
}

void sub_2453F5414(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  void (*v25)(uint64_t, uint64_t);
  unint64_t v26;
  BOOL v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  os_unfair_lock_s *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v5 = v4;
  v61 = a4;
  v48 = a2;
  v49 = a1;
  v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E4F0);
  v7 = MEMORY[0x24BDAC7A8](v60);
  v59 = (uint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v47 - v9;
  v11 = sub_245443B14();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ReplicatorRecord.ID(0);
  v54 = *(_QWORD *)(v15 - 8);
  v16 = (os_unfair_lock_s *)MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = 0;
  v19 = 0;
  v62 = (_QWORD *)a3;
  v20 = *(_QWORD *)(a3 + 64);
  v51 = a3 + 64;
  v21 = 1 << *(_BYTE *)(a3 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v20;
  v52 = (unint64_t)(v21 + 63) >> 6;
  v57 = v11;
  v58 = v10;
  v55 = v14;
  v56 = v12;
  v53 = v18;
  while (1)
  {
    if (v23)
    {
      v64 = (v23 - 1) & v23;
      v65 = v19;
      v26 = __clz(__rbit64(v23)) | (v19 << 6);
      goto LABEL_18;
    }
    v27 = __OFADD__(v19, 1);
    v28 = v19 + 1;
    if (v27)
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v28 >= v52)
      goto LABEL_29;
    v29 = *(_QWORD *)(v51 + 8 * v28);
    if (!v29)
      break;
LABEL_17:
    v64 = (v29 - 1) & v29;
    v65 = v28;
    v26 = __clz(__rbit64(v29)) + (v28 << 6);
LABEL_18:
    v31 = v62;
    sub_2453BA364(v62[6] + *(_QWORD *)(v54 + 72) * v26, (uint64_t)v18, type metadata accessor for ReplicatorRecord.ID);
    v32 = v31[7];
    v33 = *(_QWORD *)(v12 + 72);
    v63 = v26;
    v34 = *(void (**)(char *, unint64_t, uint64_t))(v12 + 16);
    v34(v14, v32 + v33 * v26, v11);
    v35 = v60;
    v36 = &v10[*(int *)(v60 + 48)];
    sub_2453BA364((uint64_t)v18, (uint64_t)v10, type metadata accessor for ReplicatorRecord.ID);
    v34(v36, (unint64_t)v14, v11);
    v37 = *(int *)(v35 + 48);
    v38 = v59;
    v39 = (char *)(v59 + v37);
    sub_2453BA364((uint64_t)v10, v59, type metadata accessor for ReplicatorRecord.ID);
    v34(v39, (unint64_t)v36, v11);
    v40 = *(_QWORD *)(v38 + 32);
    v41 = *(_QWORD *)(v38 + 40);
    swift_bridgeObjectRetain();
    sub_2453BA3A8(v38, type metadata accessor for ReplicatorRecord.ID);
    v42 = *(os_unfair_lock_s **)(v61 + 80);
    swift_retain();
    os_unfair_lock_lock(v42 + 4);
    sub_2453C62CC(v43, (uint64_t (*)(void))sub_2453D0E80);
    v68 = v5;
    v16 = v42 + 4;
    if (v5)
      goto LABEL_33;
    os_unfair_lock_unlock(v16);
    swift_release();
    v45 = v66;
    v44 = v67;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v40 == v45 && v41 == v44)
    {
      swift_bridgeObjectRelease_n();
      v10 = v58;
      sub_2453D055C((uint64_t)v58, &qword_25440E4F0);
      v12 = v56;
      v11 = v57;
      v46 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
      v46((uint64_t)v39, v57);
      v14 = v55;
      v46((uint64_t)v55, v11);
      v18 = v53;
      v16 = (os_unfair_lock_s *)sub_2453BA3A8((uint64_t)v53, type metadata accessor for ReplicatorRecord.ID);
      v5 = v68;
      v23 = v64;
      v19 = v65;
      goto LABEL_22;
    }
    v24 = sub_245444390();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = v58;
    sub_2453D055C((uint64_t)v58, &qword_25440E4F0);
    v12 = v56;
    v11 = v57;
    v25 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
    v25((uint64_t)v39, v57);
    v14 = v55;
    v25((uint64_t)v55, v11);
    v18 = v53;
    v16 = (os_unfair_lock_s *)sub_2453BA3A8((uint64_t)v53, type metadata accessor for ReplicatorRecord.ID);
    v5 = v68;
    v23 = v64;
    v19 = v65;
    if ((v24 & 1) != 0)
    {
LABEL_22:
      *(unint64_t *)((char *)v49 + ((v63 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v63;
      v27 = __OFADD__(v50++, 1);
      if (v27)
        goto LABEL_32;
    }
  }
  v30 = v28 + 1;
  if (v28 + 1 >= v52)
    goto LABEL_29;
  v29 = *(_QWORD *)(v51 + 8 * v30);
  if (v29)
    goto LABEL_16;
  v30 = v28 + 2;
  if (v28 + 2 >= v52)
    goto LABEL_29;
  v29 = *(_QWORD *)(v51 + 8 * v30);
  if (v29)
    goto LABEL_16;
  v30 = v28 + 3;
  if (v28 + 3 >= v52)
  {
LABEL_29:
    sub_2453F2778(v49, v48, v50, v62);
    return;
  }
  v29 = *(_QWORD *)(v51 + 8 * v30);
  if (v29)
  {
LABEL_16:
    v28 = v30;
    goto LABEL_17;
  }
  while (1)
  {
    v28 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v28 >= v52)
      goto LABEL_29;
    v29 = *(_QWORD *)(v51 + 8 * v28);
    ++v30;
    if (v29)
      goto LABEL_17;
  }
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  os_unfair_lock_unlock(v16);
  __break(1u);
}

uint64_t sub_2453F5968(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  size_t v9;
  uint64_t isStackAllocationSafe;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = 8 * v8;
  isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v16 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    sub_2453F5414((_QWORD *)((char *)v16 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, a1, a2);
    v12 = v11;
    swift_release();
    if (v3)
      swift_willThrow();
    swift_release_n();
  }
  else
  {
    v13 = (void *)swift_slowAlloc();
    bzero(v13, v9);
    swift_retain();
    sub_2453F5414((unint64_t *)v13, v8, a1, a2);
    v12 = v14;
    swift_release();
    MEMORY[0x249534440](v13, -1, -1);
    swift_release_n();
  }
  return v12;
}

uint64_t sub_2453F5B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_2;
  uint64_t v9;
  uint64_t v11[5];

  sub_245443B68();
  v11[3] = a3;
  v11[4] = a5;
  boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(boxed_opaque_existential_2, a1, a3);
  v9 = sub_245443B5C();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  return v9;
}

uint64_t type metadata accessor for ReplicatorClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for ReplicatorClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ReplicatorClient.__allocating_init(descriptor:recordVersions:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of ReplicatorClient.__allocating_init(id:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t sub_2453F5C10()
{
  return _s18ReplicatorServices9SingletonCMa_0();
}

uint64_t _s18ReplicatorServices9SingletonCMa_0()
{
  uint64_t result;

  result = qword_25440E5D8;
  if (!qword_25440E5D8)
    return swift_getSingletonMetadata();
  return result;
}

void sub_2453F5C54()
{
  unint64_t v0;

  sub_2453F5D28();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

void sub_2453F5D28()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25440E900)
  {
    sub_245443B14();
    v0 = sub_24544406C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25440E900);
  }
}

uint64_t sub_2453F5D7C(uint64_t a1)
{
  uint64_t v1;

  return sub_2453C62CC(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_2453F5D94(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(uint64_t, uint64_t);
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t (*v35)(uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;

  v47 = a2;
  v55 = a5;
  v58 = a4;
  v48 = a1;
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E4F0);
  v6 = MEMORY[0x24BDAC7A8](v54);
  v52 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v61 = (uint64_t)&v46 - v8;
  v9 = sub_245443B14();
  v63 = *(_QWORD **)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v62 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ReplicatorRecord.ID(0);
  v53 = *(_QWORD *)(v11 - 8);
  result = MEMORY[0x24BDAC7A8](v11);
  v60 = (uint64_t)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = 0;
  v56 = (_QWORD *)a3;
  v15 = *(_QWORD *)(a3 + 64);
  v49 = 0;
  v50 = a3 + 64;
  v16 = 1 << *(_BYTE *)(a3 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v51 = (unint64_t)(v16 + 63) >> 6;
  v19 = type metadata accessor for ReplicatorRecord.ID;
  v21 = v60;
  v20 = v61;
  while (v18)
  {
    v24 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    v59 = v14;
    v25 = v24 | (v14 << 6);
LABEL_21:
    v30 = v56;
    sub_2453BA364(v56[6] + *(_QWORD *)(v53 + 72) * v25, v21, v19);
    v31 = v30[7];
    v32 = v63[9];
    v57 = v25;
    v33 = v31 + v32 * v25;
    v34 = (void (*)(char *, uint64_t, uint64_t))v63[2];
    v35 = v19;
    v36 = v62;
    v34(v62, v33, v9);
    v37 = v54;
    v38 = v20 + *(int *)(v54 + 48);
    sub_2453BA364(v21, v20, v35);
    v34((char *)v38, (uint64_t)v36, v9);
    v39 = v52;
    v40 = (char *)(v52 + *(int *)(v37 + 48));
    sub_2453BA364(v20, v52, v35);
    v34(v40, v38, v9);
    v42 = *(_QWORD *)(v39 + 32);
    v41 = *(_QWORD *)(v39 + 40);
    swift_bridgeObjectRetain();
    v43 = v39;
    v19 = v35;
    sub_2453BA3A8(v43, v35);
    if (v42 == v58 && v41 == v55)
    {
      swift_bridgeObjectRelease();
      sub_2453D055C(v61, &qword_25440E4F0);
      v44 = (void (*)(uint64_t, uint64_t))v63[1];
      v44((uint64_t)v40, v9);
      v44((uint64_t)v62, v9);
      result = sub_2453BA3A8(v60, v35);
      v14 = v59;
      goto LABEL_24;
    }
    v22 = sub_245444390();
    swift_bridgeObjectRelease();
    sub_2453D055C(v61, &qword_25440E4F0);
    v23 = (void (*)(uint64_t, uint64_t))v63[1];
    v23((uint64_t)v40, v9);
    v23((uint64_t)v62, v9);
    result = sub_2453BA3A8(v60, v35);
    v14 = v59;
    if ((v22 & 1) != 0)
    {
LABEL_24:
      *(unint64_t *)((char *)v48 + ((v57 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v57;
      if (__OFADD__(v49++, 1))
      {
        __break(1u);
        return sub_2453F2778(v48, v47, v49, v56);
      }
    }
  }
  v26 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v26 >= v51)
    return sub_2453F2778(v48, v47, v49, v56);
  v27 = *(_QWORD *)(v50 + 8 * v26);
  v28 = v14 + 1;
  if (v27)
    goto LABEL_20;
  v28 = v14 + 2;
  if (v14 + 2 >= v51)
    return sub_2453F2778(v48, v47, v49, v56);
  v27 = *(_QWORD *)(v50 + 8 * v28);
  if (v27)
    goto LABEL_20;
  v28 = v14 + 3;
  if (v14 + 3 >= v51)
    return sub_2453F2778(v48, v47, v49, v56);
  v27 = *(_QWORD *)(v50 + 8 * v28);
  if (v27)
  {
LABEL_20:
    v18 = (v27 - 1) & v27;
    v59 = v28;
    v25 = __clz(__rbit64(v27)) + (v28 << 6);
    goto LABEL_21;
  }
  v29 = v14 + 4;
  if (v14 + 4 >= v51)
    return sub_2453F2778(v48, v47, v49, v56);
  v27 = *(_QWORD *)(v50 + 8 * v29);
  if (v27)
  {
    v28 = v14 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v28 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v28 >= v51)
      return sub_2453F2778(v48, v47, v49, v56);
    v27 = *(_QWORD *)(v50 + 8 * v28);
    ++v29;
    if (v27)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_2453F61C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v7;
  unsigned int v8;
  unint64_t v9;
  size_t v10;
  uint64_t isStackAllocationSafe;
  uint64_t v12;
  void *v13;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x24BDAC8D0];
  v7 = *(_BYTE *)(a1 + 32);
  v8 = v7 & 0x3F;
  v9 = (unint64_t)((1 << v7) + 63) >> 6;
  v10 = 8 * v9;
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v8 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_bridgeObjectRetain();
    v12 = sub_2453F5D94((_QWORD *)((char *)v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0)), v9, a1, a2, a3);
    swift_bridgeObjectRelease();
    if (v3)
      swift_willThrow();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v13 = (void *)swift_slowAlloc();
    bzero(v13, v10);
    swift_bridgeObjectRetain();
    v12 = sub_2453F5D94((unint64_t *)v13, v9, a1, a2, a3);
    swift_bridgeObjectRelease();
    MEMORY[0x249534440](v13, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v12;
}

char *sub_2453F6388(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_245444234();
  __break(1u);
  return result;
}

uint64_t sub_2453F6470(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  void (*v20)(uint64_t, uint64_t);
  unint64_t v21;
  BOOL v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  void (*v27)(char *, unint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _QWORD *v54;

  v39 = a2;
  v47 = a4;
  v40 = a1;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E4F0);
  v5 = MEMORY[0x24BDAC7A8](v46);
  v45 = (uint64_t)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v52 = (uint64_t)&v39 - v7;
  v8 = sub_245443B14();
  v54 = *(_QWORD **)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v53 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ReplicatorRecord.ID(0);
  v44 = *(_QWORD *)(v10 - 8);
  result = MEMORY[0x24BDAC7A8](v10);
  v51 = (uint64_t)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = 0;
  v48 = (_QWORD *)a3;
  v14 = *(_QWORD *)(a3 + 64);
  v41 = 0;
  v42 = a3 + 64;
  v15 = 1 << *(_BYTE *)(a3 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v43 = (unint64_t)(v15 + 63) >> 6;
  v18 = v51;
  while (1)
  {
    if (v17)
    {
      v49 = (v17 - 1) & v17;
      v50 = v13;
      v21 = __clz(__rbit64(v17)) | (v13 << 6);
      goto LABEL_18;
    }
    v22 = __OFADD__(v13, 1);
    v23 = v13 + 1;
    if (v22)
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v43)
      return sub_2453F2778(v40, v39, v41, v48);
    v24 = *(_QWORD *)(v42 + 8 * v23);
    if (!v24)
      break;
LABEL_17:
    v49 = (v24 - 1) & v24;
    v50 = v23;
    v21 = __clz(__rbit64(v24)) + (v23 << 6);
LABEL_18:
    v26 = v48;
    sub_2453BA364(v48[6] + *(_QWORD *)(v44 + 72) * v21, v18, type metadata accessor for ReplicatorRecord.ID);
    v27 = (void (*)(char *, unint64_t, uint64_t))v54[2];
    v28 = v53;
    v27(v53, v26[7] + v54[9] * v21, v8);
    v29 = v46;
    v30 = v8;
    v31 = v52;
    v32 = (char *)(v52 + *(int *)(v46 + 48));
    sub_2453BA364(v18, v52, type metadata accessor for ReplicatorRecord.ID);
    v27(v32, (unint64_t)v28, v30);
    v33 = v45;
    v34 = (char *)(v45 + *(int *)(v29 + 48));
    v35 = v31;
    v8 = v30;
    sub_2453BA364(v35, v45, type metadata accessor for ReplicatorRecord.ID);
    v27(v34, (unint64_t)v32, v30);
    v37 = *(_QWORD *)(v33 + 32);
    v36 = *(_QWORD *)(v33 + 40);
    swift_bridgeObjectRetain();
    sub_2453BA3A8(v33, type metadata accessor for ReplicatorRecord.ID);
    if (v37 == *v47 && v36 == v47[1])
    {
      swift_bridgeObjectRelease();
      sub_2453D055C(v52, &qword_25440E4F0);
      v38 = (void (*)(uint64_t, uint64_t))v54[1];
      v38((uint64_t)v34, v30);
      v38((uint64_t)v53, v30);
      result = sub_2453BA3A8(v51, type metadata accessor for ReplicatorRecord.ID);
      v17 = v49;
      v13 = v50;
    }
    else
    {
      v19 = sub_245444390();
      swift_bridgeObjectRelease();
      sub_2453D055C(v52, &qword_25440E4F0);
      v20 = (void (*)(uint64_t, uint64_t))v54[1];
      v20((uint64_t)v34, v30);
      v20((uint64_t)v53, v30);
      result = sub_2453BA3A8(v51, type metadata accessor for ReplicatorRecord.ID);
      v17 = v49;
      v13 = v50;
      if ((v19 & 1) == 0)
      {
        *(unint64_t *)((char *)v40 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
        v22 = __OFADD__(v41++, 1);
        if (v22)
        {
          __break(1u);
          return sub_2453F2778(v40, v39, v41, v48);
        }
      }
    }
  }
  v25 = v23 + 1;
  if (v23 + 1 >= v43)
    return sub_2453F2778(v40, v39, v41, v48);
  v24 = *(_QWORD *)(v42 + 8 * v25);
  if (v24)
    goto LABEL_16;
  v25 = v23 + 2;
  if (v23 + 2 >= v43)
    return sub_2453F2778(v40, v39, v41, v48);
  v24 = *(_QWORD *)(v42 + 8 * v25);
  if (v24)
    goto LABEL_16;
  v25 = v23 + 3;
  if (v23 + 3 >= v43)
    return sub_2453F2778(v40, v39, v41, v48);
  v24 = *(_QWORD *)(v42 + 8 * v25);
  if (v24)
  {
LABEL_16:
    v23 = v25;
    goto LABEL_17;
  }
  while (1)
  {
    v23 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v23 >= v43)
      return sub_2453F2778(v40, v39, v41, v48);
    v24 = *(_QWORD *)(v42 + 8 * v23);
    ++v25;
    if (v24)
      goto LABEL_17;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_2453F6894(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  char v7;
  unsigned int v8;
  unint64_t v9;
  size_t v10;
  uint64_t isStackAllocationSafe;
  uint64_t v12;
  void *v13;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x24BDAC8D0];
  v7 = *(_BYTE *)(a1 + 32);
  v8 = v7 & 0x3F;
  v9 = (unint64_t)((1 << v7) + 63) >> 6;
  v10 = 8 * v9;
  sub_2453F1C20(a2);
  isStackAllocationSafe = sub_2453F1C20(a2);
  if (v8 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    sub_2453F1C20(a2);
    v12 = a3((char *)v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v9, a1, a2);
    sub_2453F50B8(a2);
    if (v3)
      swift_willThrow();
    sub_2453F50B8(a2);
    sub_2453F50B8(a2);
  }
  else
  {
    v13 = (void *)swift_slowAlloc();
    bzero(v13, v10);
    sub_2453F1C20(a2);
    v12 = a3((char *)v13, v9, a1, a2);
    sub_2453F50B8(a2);
    MEMORY[0x249534440](v13, -1, -1);
    sub_2453F50B8(a2);
    sub_2453F50B8(a2);
  }
  return v12;
}

uint64_t sub_2453F6A5C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_257464900);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_245444234();
  __break(1u);
  return result;
}

uint64_t sub_2453F6B64()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, uint64_t);
  unint64_t v8;

  v1 = (int *)type metadata accessor for ReplicatorMessage();
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = sub_245443B14();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(unint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  swift_bridgeObjectRelease();
  v7(v0 + v3 + v1[6], v5);
  swift_bridgeObjectRelease();
  sub_2453BDCF8(*(_QWORD *)(v0 + v3 + v1[9]), *(_QWORD *)(v0 + v3 + v1[9] + 8));
  v8 = v0 + v3 + v1[10];
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5))
    v7(v8, v5);
  objc_release(*(id *)(v0
                     + ((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2453F6C98()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for ReplicatorMessage() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_2453EC710(v0 + v2, *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(double *)(v0 + v3), *(_QWORD *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(uint64_t *))(v0+ ((((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0+ ((((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 8));
}

uint64_t sub_2453F6D00()
{
  return swift_deallocObject();
}

uint64_t sub_2453F6D10()
{
  uint64_t v0;

  return sub_245440220(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_2453F6D18(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_2453EC9C8(a1, a2, *(void (**)(uint64_t *))(v2 + 16));
}

void sub_2453F6D20(void *a1)
{
  uint64_t v1;

  sub_2453ED188(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_2453F6D28()
{
  return swift_deallocObject();
}

uint64_t sub_2453F6D38(uint64_t a1)
{
  uint64_t v1;

  return sub_2454402B0(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_2453F6D40()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_2453F6D64(uint64_t a1)
{
  uint64_t v1;

  sub_2453ED8E8(a1, v1);
}

unint64_t sub_2453F6D6C()
{
  unint64_t result;

  result = qword_25440EAD0;
  if (!qword_25440EAD0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.GetRecordVersions, &type metadata for ReplicationXPCServerParameters.GetRecordVersions);
    atomic_store(result, (unint64_t *)&qword_25440EAD0);
  }
  return result;
}

unint64_t sub_2453F6DB0()
{
  unint64_t result;

  result = qword_25440EA60;
  if (!qword_25440EA60)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerResponse.GetRecordsVersions, &type metadata for ReplicationXPCServerResponse.GetRecordsVersions);
    atomic_store(result, (unint64_t *)&qword_25440EA60);
  }
  return result;
}

unint64_t sub_2453F6DF4()
{
  unint64_t result;

  result = qword_25440EA10;
  if (!qword_25440EA10)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerResponse.GetDevices, &type metadata for ReplicationXPCServerResponse.GetDevices);
    atomic_store(result, (unint64_t *)&qword_25440EA10);
  }
  return result;
}

unint64_t sub_2453F6E38()
{
  unint64_t result;

  result = qword_25440EAB0;
  if (!qword_25440EAB0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.RegisterClient, &type metadata for ReplicationXPCServerParameters.RegisterClient);
    atomic_store(result, (unint64_t *)&qword_25440EAB0);
  }
  return result;
}

uint64_t sub_2453F6E7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  int *v7;
  char *v8;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_257464918) - 8) + 80);
  v2 = (v1 + 32) & ~v1;
  swift_release();
  v3 = (id *)(v0 + v2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {

  }
  else
  {
    v4 = sub_245443B14();
    v5 = *(_QWORD *)(v4 - 8);
    v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v6(v0 + v2, v4);
    v7 = (int *)type metadata accessor for ReplicatorMessage();
    swift_bridgeObjectRelease();
    v6((uint64_t)v3 + v7[6], v4);
    swift_bridgeObjectRelease();
    sub_2453BDCF8(*(uint64_t *)((char *)v3 + v7[9]), *(unint64_t *)((char *)v3 + v7[9] + 8));
    v8 = (char *)v3 + v7[10];
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
      v6((uint64_t)v8, v4);
  }
  return swift_deallocObject();
}

uint64_t sub_2453F6FA8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_257464918) - 8) + 80);
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_2453F6FEC()
{
  uint64_t v0;

  return sub_2453EC4DC(*(_QWORD *)(v0 + 16));
}

unint64_t sub_2453F7004()
{
  unint64_t result;

  result = qword_25440E160;
  if (!qword_25440E160)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.GetRecords, &type metadata for ReplicationXPCServerParameters.GetRecords);
    atomic_store(result, (unint64_t *)&qword_25440E160);
  }
  return result;
}

uint64_t sub_2453F7048(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;

  return sub_2453F096C(a1, a2, v2[2], v2[3], v2[4]);
}

void sub_2453F7064(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_2453F0AE8(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_2453F7080(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_2453CFFAC(a1, a2);
  return a1;
}

unint64_t sub_2453F7094()
{
  unint64_t result;

  result = qword_2574649A8;
  if (!qword_2574649A8)
  {
    result = MEMORY[0x249534380](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_2574649A8);
  }
  return result;
}

uint64_t sub_2453F70D8()
{
  return swift_release();
}

uint64_t sub_2453F70E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReplicatorRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_2453F7124(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  return sub_2453EF86C(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_2453F7140(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_2453EFBFC(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

unint64_t sub_2453F715C()
{
  unint64_t result;

  result = qword_2574649B8;
  if (!qword_2574649B8)
  {
    result = MEMORY[0x249534380](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_2574649B8);
  }
  return result;
}

unint64_t sub_2453F71A0()
{
  unint64_t result;

  result = qword_2574649C0;
  if (!qword_2574649C0)
  {
    result = MEMORY[0x249534380](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_2574649C0);
  }
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t sub_2453F720C()
{
  unint64_t result;

  result = qword_25440E320;
  if (!qword_25440E320)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.RemoveRecords, &type metadata for ReplicationXPCServerParameters.RemoveRecords);
    atomic_store(result, (unint64_t *)&qword_25440E320);
  }
  return result;
}

uint64_t sub_2453F7250(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E420);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

unint64_t sub_2453F7298()
{
  unint64_t result;

  result = qword_2574649D0;
  if (!qword_2574649D0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.UnregisterClient, &type metadata for ReplicationXPCServerParameters.UnregisterClient);
    atomic_store(result, (unint64_t *)&qword_2574649D0);
  }
  return result;
}

uint64_t sub_2453F72DC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

void sub_2453F72E8(uint64_t a1)
{
  uint64_t v1;

  sub_2453EE368(a1, v1);
}

uint64_t sub_2453F72F0()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_2453F7314()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_2453EE790();
  *(_BYTE *)(v1
           + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_messageFetchPending) = 0;
}

unint64_t sub_2453F7340()
{
  unint64_t result;

  result = qword_25440EA90;
  if (!qword_25440EA90)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.GetMessages, &type metadata for ReplicationXPCServerParameters.GetMessages);
    atomic_store(result, (unint64_t *)&qword_25440EA90);
  }
  return result;
}

unint64_t sub_2453F7384()
{
  unint64_t result;

  result = qword_25440E7F0;
  if (!qword_25440E7F0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerResponse.GetMessages, &type metadata for ReplicationXPCServerResponse.GetMessages);
    atomic_store(result, (unint64_t *)&qword_25440E7F0);
  }
  return result;
}

void sub_2453F73C8(uint64_t a1)
{
  uint64_t v1;

  sub_2453EF444(a1, v1);
}

void sub_2453F73D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_2453EB090();
  *(_BYTE *)(v1
           + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_recordFetchPending) = 0;
}

unint64_t sub_2453F73FC()
{
  unint64_t result;

  result = qword_25440EBF0;
  if (!qword_25440EBF0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.GetClientDescriptor, &type metadata for ReplicationXPCServerParameters.GetClientDescriptor);
    atomic_store(result, (unint64_t *)&qword_25440EBF0);
  }
  return result;
}

unint64_t sub_2453F7440()
{
  unint64_t result;

  result = qword_25440EBC0;
  if (!qword_25440EBC0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerResponse.GetClientDescriptor, &type metadata for ReplicationXPCServerResponse.GetClientDescriptor);
    atomic_store(result, (unint64_t *)&qword_25440EBC0);
  }
  return result;
}

uint64_t sub_2453F7484()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2453F74A8()
{
  uint64_t v0;

  return sub_2453DCEC0(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_2453F74B4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2453F74D8(char a1)
{
  uint64_t v1;

  return sub_2454171CC(a1, *(uint64_t (**)(char *))(v1 + 16));
}

uint64_t sub_2453F74E4()
{
  uint64_t v0;

  return sub_2453DC87C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (uint64_t)&unk_251655960, (uint64_t)sub_2453F750C);
}

uint64_t sub_2453F750C(uint64_t a1)
{
  uint64_t v1;

  return sub_245417178(a1, *(uint64_t (**)(uint64_t *))(v1 + 16));
}

uint64_t sub_2453F7518()
{
  uint64_t v0;

  return sub_2453DC87C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (uint64_t)&unk_2516559B0, (uint64_t)sub_2453F7E30);
}

uint64_t objectdestroy_147Tm()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2453F7570()
{
  uint64_t v0;

  return sub_2453DC87C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (uint64_t)&unk_251655A00, (uint64_t)sub_2453F7D38);
}

uint64_t sub_2453F7598@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 + 136);
  *(_QWORD *)(v2 + 136) = *(_QWORD *)(v1 + 24);
  *a1 = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2453F75AC(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x249534380](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2453F75EC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2453F7630()
{
  uint64_t *v0;

  return sub_2453DB7AC(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_2453F7640(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

void sub_2453F7670(uint64_t a1)
{
  uint64_t v1;

  sub_2453EEF0C(a1, v1);
}

void sub_2453F7678()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_2453E12B4();
  *(_BYTE *)(v1
           + OBJC_IVAR____TtC18ReplicatorServicesP33_0A2EF918E67C2EDB6C17D3829BB080AE9Singleton_queue_deviceFetchPending) = 0;
}

uint64_t sub_2453F76A4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_2453F7710()
{
  unint64_t result;

  result = qword_257464E60;
  if (!qword_257464E60)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.GetClientEnabled, &type metadata for ReplicationXPCServerParameters.GetClientEnabled);
    atomic_store(result, (unint64_t *)&qword_257464E60);
  }
  return result;
}

unint64_t sub_2453F7754()
{
  unint64_t result;

  result = qword_257464EF0;
  if (!qword_257464EF0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerResponse.GetClientEnabled, &type metadata for ReplicationXPCServerResponse.GetClientEnabled);
    atomic_store(result, (unint64_t *)&qword_257464EF0);
  }
  return result;
}

unint64_t sub_2453F7798()
{
  unint64_t result;

  result = qword_2574649E0;
  if (!qword_2574649E0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.EnableClient, &type metadata for ReplicationXPCServerParameters.EnableClient);
    atomic_store(result, (unint64_t *)&qword_2574649E0);
  }
  return result;
}

unint64_t sub_2453F77DC()
{
  unint64_t result;

  result = qword_257464E90;
  if (!qword_257464E90)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.DisableClient, &type metadata for ReplicationXPCServerParameters.DisableClient);
    atomic_store(result, (unint64_t *)&qword_257464E90);
  }
  return result;
}

uint64_t sub_2453F7820(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_2453F7864()
{
  return objectdestroy_201Tm(&qword_257464588);
}

uint64_t sub_2453F7870(char a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_257464588);
  return sub_2453D2EB8(a1);
}

uint64_t sub_2453F78B4(uint64_t a1)
{
  return sub_2453F795C(a1, sub_2453F78C0);
}

uint64_t sub_2453F78C0()
{
  uint64_t v0;

  return sub_2453DCDA8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_2453F78D8(unsigned __int8 *a1)
{
  uint64_t v1;

  return sub_2454171A8(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

uint64_t sub_2453F78E0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2453F7904()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_2453F792C()
{
  return objectdestroy_201Tm(&qword_25440E6A8);
}

uint64_t sub_2453F7938(uint64_t a1)
{
  return sub_2453F7A48(a1, &qword_25440E6A8, &qword_25440E698);
}

uint64_t sub_2453F7950(uint64_t a1)
{
  return sub_2453F795C(a1, sub_2453F79B0);
}

uint64_t sub_2453F795C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_245443B14() - 8) + 80);
  return sub_2453D32B0(a1, *(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5), a2);
}

uint64_t sub_2453F79B0()
{
  uint64_t v0;

  return sub_2453DC534(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_2453F79C8(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_2453F79D8()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2453F7A04(uint64_t a1)
{
  uint64_t v1;

  return sub_2453DC0F8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(unint64_t))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_2453F7A10(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_2453F7A3C()
{
  return objectdestroy_201Tm(&qword_25440E6A8);
}

uint64_t sub_2453F7A48(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a2) - 8) + 80);
  return sub_2453D27FC(a1, v3 + ((v7 + 16) & ~v7), a3, a2);
}

uint64_t sub_2453F7AA4(uint64_t a1)
{
  return sub_2453F795C(a1, sub_2453F7AB0);
}

uint64_t sub_2453F7AB0()
{
  uint64_t v0;

  return sub_2453DB694(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_2453F7ACC()
{
  return objectdestroy_201Tm(&qword_25440E028);
}

uint64_t sub_2453F7AD8(uint64_t a1)
{
  return sub_2453F7A48(a1, &qword_25440E028, &qword_25440E018);
}

uint64_t sub_2453F7AF0(uint64_t a1)
{
  return sub_2453F795C(a1, sub_2453F7AFC);
}

uint64_t sub_2453F7AFC()
{
  uint64_t v0;

  return sub_2453DC764(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_2453F7B14(_QWORD *a1)
{
  uint64_t v1;

  return sub_245417154(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

uint64_t sub_2453F7B20()
{
  return objectdestroy_201Tm(&qword_25440E028);
}

uint64_t sub_2453F7B30(uint64_t a1)
{
  return sub_2453F795C(a1, sub_2453F7B3C);
}

uint64_t sub_2453F7B3C()
{
  uint64_t v0;

  return sub_2453DC64C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t objectdestroy_230Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_2453F7B84()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
}

uint64_t sub_2453F7BAC()
{
  return objectdestroy_201Tm(&qword_2574639A0);
}

uint64_t objectdestroy_201Tm(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80)), v2);
  return swift_deallocObject();
}

uint64_t sub_2453F7C14(uint64_t a1)
{
  return sub_2453F7A48(a1, &qword_2574639A0, &qword_257463990);
}

uint64_t objectdestroy_204Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_245443B14();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_2453F7CA0(uint64_t a1)
{
  return sub_2453F795C(a1, sub_2453F7CAC);
}

uint64_t sub_2453F7CAC()
{
  uint64_t v0;

  return sub_2453DCC90(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_2453F7CC4@<X0>(_QWORD *a1@<X8>)
{
  return sub_2453F1640(a1);
}

uint64_t sub_2453F7CD8@<X0>(uint64_t a1@<X8>)
{
  return sub_2453F1628(a1);
}

uint64_t sub_2453F7E08@<X0>(uint64_t *a1@<X8>)
{
  return sub_2453F5210(a1);
}

void sub_2453F7E1C(uint64_t a1@<X8>)
{
  sub_2453F52BC(a1);
}

uint64_t ReplicatorMessage.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_245443B14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ReplicatorMessage.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_245443B14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*ReplicatorMessage.id.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorMessage.clientID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ReplicatorMessage() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for ReplicatorMessage()
{
  uint64_t result;

  result = qword_25440E970;
  if (!qword_25440E970)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ReplicatorMessage.clientID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for ReplicatorMessage() + 20));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*ReplicatorMessage.clientID.modify())()
{
  type metadata accessor for ReplicatorMessage();
  return nullsub_1;
}

uint64_t ReplicatorMessage.pairingRelationshipID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReplicatorMessage() + 24);
  v4 = sub_245443B14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReplicatorMessage.pairingRelationshipID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReplicatorMessage() + 24);
  v4 = sub_245443B14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReplicatorMessage.pairingRelationshipID.modify())()
{
  type metadata accessor for ReplicatorMessage();
  return nullsub_1;
}

uint64_t ReplicatorMessage.messageType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ReplicatorMessage() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReplicatorMessage.messageType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for ReplicatorMessage() + 28));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*ReplicatorMessage.messageType.modify())()
{
  type metadata accessor for ReplicatorMessage();
  return nullsub_1;
}

uint64_t ReplicatorMessage.protocolVersion.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for ReplicatorMessage() + 32));
}

uint64_t ReplicatorMessage.protocolVersion.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ReplicatorMessage();
  *(_QWORD *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*ReplicatorMessage.protocolVersion.modify())()
{
  type metadata accessor for ReplicatorMessage();
  return nullsub_1;
}

uint64_t ReplicatorMessage.data.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for ReplicatorMessage() + 36);
  v2 = *(_QWORD *)v1;
  sub_2453CFFAC(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t ReplicatorMessage.data.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for ReplicatorMessage() + 36);
  result = sub_2453BDCF8(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*ReplicatorMessage.data.modify())()
{
  type metadata accessor for ReplicatorMessage();
  return nullsub_1;
}

uint64_t ReplicatorMessage.responseToID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for ReplicatorMessage() + 40);
  return sub_2453F8248(v3, a1);
}

uint64_t sub_2453F8248(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ReplicatorMessage.responseToID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for ReplicatorMessage() + 40);
  return sub_2453F82C0(a1, v3);
}

uint64_t sub_2453F82C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*ReplicatorMessage.responseToID.modify())()
{
  type metadata accessor for ReplicatorMessage();
  return nullsub_1;
}

uint64_t ReplicatorMessage.init(id:clientID:pairingRelationshipID:messageType:protocolVersion:data:responseToID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  _QWORD *v21;
  uint64_t result;
  _QWORD *v23;
  _QWORD *v24;

  v16 = (int *)type metadata accessor for ReplicatorMessage();
  v17 = a9 + v16[10];
  v18 = sub_245443B14();
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32);
  v20(a9, a1, v18);
  v21 = (_QWORD *)(a9 + v16[5]);
  *v21 = a2;
  v21[1] = a3;
  v20(a9 + v16[6], a4, v18);
  result = sub_2453F82C0(a11, v17);
  v23 = (_QWORD *)(a9 + v16[7]);
  *v23 = a5;
  v23[1] = a6;
  *(_QWORD *)(a9 + v16[8]) = a7;
  v24 = (_QWORD *)(a9 + v16[9]);
  *v24 = a8;
  v24[1] = a10;
  return result;
}

uint64_t sub_2453F844C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2453F8474 + 4 * byte_245446210[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_2453F8474()
{
  return 0x4449746E65696C63;
}

unint64_t sub_2453F848C()
{
  return 0xD000000000000015;
}

uint64_t sub_2453F84A8()
{
  return 0x546567617373656DLL;
}

uint64_t sub_2453F84C8()
{
  return 0x6C6F636F746F7270;
}

uint64_t sub_2453F84EC()
{
  return 1635017060;
}

uint64_t sub_2453F84FC()
{
  return 0x65736E6F70736572;
}

uint64_t sub_2453F851C()
{
  unsigned __int8 *v0;

  return sub_2453F844C(*v0);
}

uint64_t sub_2453F8524@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2453F9B48(a1, a2);
  *a3 = result;
  return result;
}

void sub_2453F8548(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_2453F8554()
{
  sub_2453F8808();
  return sub_245444468();
}

uint64_t sub_2453F857C()
{
  sub_2453F8808();
  return sub_245444474();
}

uint64_t ReplicatorMessage.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v11;
  char v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574649E8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2453F8808();
  sub_24544445C();
  LOBYTE(v11) = 0;
  sub_245443B14();
  sub_2453F8E70(&qword_2574639F0, MEMORY[0x24BDCEA70]);
  sub_245444360();
  if (!v2)
  {
    v9 = type metadata accessor for ReplicatorMessage();
    LOBYTE(v11) = 1;
    sub_245444348();
    LOBYTE(v11) = 2;
    sub_245444360();
    LOBYTE(v11) = 3;
    sub_245444348();
    LOBYTE(v11) = 4;
    sub_24544436C();
    v11 = *(_OWORD *)(v3 + *(int *)(v9 + 36));
    v12 = 5;
    sub_2453F71A0();
    sub_245444360();
    LOBYTE(v11) = 6;
    sub_245444330();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_2453F8808()
{
  unint64_t result;

  result = qword_2574649F0;
  if (!qword_2574649F0)
  {
    result = MEMORY[0x249534380](&unk_2454463FC, &type metadata for ReplicatorMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574649F0);
  }
  return result;
}

uint64_t ReplicatorMessage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(void);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int *v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  char v47;

  v37 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_245443B14();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v39 = (char *)&v36 - v11;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574649F8);
  v12 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ReplicatorMessage();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = (int *)v16;
  v41 = v7;
  v19 = *(void (**)(void))(v7 + 56);
  v43 = &v18[*(int *)(v16 + 40)];
  v44 = v18;
  v19();
  v20 = a1[3];
  v42 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v20);
  sub_2453F8808();
  v21 = v45;
  sub_245444450();
  if (v21)
  {
    v24 = (uint64_t)v43;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    return sub_2453F8D8C(v24);
  }
  else
  {
    v45 = v12;
    v36 = v5;
    LOBYTE(v46) = 0;
    v22 = sub_2453F8E70(&qword_25440E1B8, MEMORY[0x24BDCEAA8]);
    v23 = v38;
    sub_2454442DC();
    v25 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
    v26 = (uint64_t)v44;
    v25(v44, v39, v6);
    LOBYTE(v46) = 1;
    v27 = sub_2454442C4();
    v28 = (uint64_t *)(v26 + v40[5]);
    *v28 = v27;
    v28[1] = v29;
    LOBYTE(v46) = 2;
    sub_2454442DC();
    v39 = (char *)v22;
    v25((char *)(v26 + v40[6]), v10, v6);
    LOBYTE(v46) = 3;
    v30 = sub_2454442C4();
    v31 = v40;
    v32 = (uint64_t *)(v26 + v40[7]);
    *v32 = v30;
    v32[1] = v33;
    LOBYTE(v46) = 4;
    *(_QWORD *)(v26 + v31[8]) = sub_2454442E8();
    v47 = 5;
    sub_2453F715C();
    sub_2454442DC();
    *(_OWORD *)(v26 + v31[9]) = v46;
    LOBYTE(v46) = 6;
    v34 = (uint64_t)v36;
    sub_2454442AC();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v14, v23);
    sub_2453F82C0(v34, (uint64_t)v43);
    sub_2453F8DCC(v26, v37);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    return sub_2453F8E10(v26);
  }
}

uint64_t sub_2453F8D8C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2453F8DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReplicatorMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_2453F8E10(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ReplicatorMessage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2453F8E4C()
{
  return sub_2453F8E70(&qword_25440E440, MEMORY[0x24BDCEA88]);
}

uint64_t sub_2453F8E70(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_245443B14();
    result = MEMORY[0x249534380](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s18ReplicatorServices0A26ControlXPCServerParametersO4PairV14relationshipID10Foundation4UUIDVvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_245443B14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_2453F8EE8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorMessage.init(from:)(a1, a2);
}

uint64_t sub_2453F8EFC(_QWORD *a1)
{
  return ReplicatorMessage.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for ReplicatorMessage(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v31 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v31 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_245443B14();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v10 = a3[5];
    v11 = a3[6];
    v12 = (uint64_t *)((char *)a1 + v10);
    v13 = (uint64_t *)((char *)a2 + v10);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    v15 = (char *)a1 + v11;
    v16 = (char *)a2 + v11;
    swift_bridgeObjectRetain();
    v9((uint64_t *)v15, (uint64_t *)v16, v7);
    v17 = a3[7];
    v18 = a3[8];
    v19 = (uint64_t *)((char *)a1 + v17);
    v20 = (uint64_t *)((char *)a2 + v17);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    *(uint64_t *)((char *)a1 + v18) = *(uint64_t *)((char *)a2 + v18);
    v22 = a3[9];
    v23 = (uint64_t *)((char *)a1 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    v25 = *v24;
    v26 = v24[1];
    swift_bridgeObjectRetain();
    sub_2453CFFAC(v25, v26);
    *v23 = v25;
    v23[1] = v26;
    v27 = a3[10];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v29, 1, v7))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v28, (uint64_t *)v29, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v28, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for ReplicatorMessage(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = sub_245443B14();
  v5 = *(_QWORD *)(v4 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(a1, v4);
  swift_bridgeObjectRelease();
  v8(a1 + a2[6], v4);
  swift_bridgeObjectRelease();
  sub_2453BDCF8(*(_QWORD *)(a1 + a2[9]), *(_QWORD *)(a1 + a2[9] + 8));
  v6 = a1 + a2[10];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v6, v4);
  return result;
}

uint64_t initializeWithCopy for ReplicatorMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;

  v6 = sub_245443B14();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v9);
  v12 = (_QWORD *)(a2 + v9);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v14 = a1 + v10;
  v15 = a2 + v10;
  swift_bridgeObjectRetain();
  v8(v14, v15, v6);
  v16 = a3[7];
  v17 = a3[8];
  v18 = (_QWORD *)(a1 + v16);
  v19 = (_QWORD *)(a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  v21 = a3[9];
  v22 = (uint64_t *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v24 = *v23;
  v25 = v23[1];
  swift_bridgeObjectRetain();
  sub_2453CFFAC(v24, v25);
  *v22 = v24;
  v22[1] = v25;
  v26 = a3[10];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v28, 1, v6))
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v8((uint64_t)v27, (uint64_t)v28, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v27, 0, 1, v6);
  }
  return a1;
}

char *assignWithCopy for ReplicatorMessage(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t (*v25)(const void *, uint64_t, uint64_t);
  int v26;
  uint64_t v27;

  v6 = sub_245443B14();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *((_QWORD *)v10 + 1) = *((_QWORD *)v11 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8(&a1[a3[6]], &a2[a3[6]], v6);
  v12 = a3[7];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  v15 = a3[9];
  v16 = (uint64_t *)&a1[v15];
  v17 = (uint64_t *)&a2[v15];
  v18 = *v17;
  v19 = v17[1];
  sub_2453CFFAC(*v17, v19);
  v20 = *v16;
  v21 = v16[1];
  *v16 = v18;
  v16[1] = v19;
  sub_2453BDCF8(v20, v21);
  v22 = a3[10];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v18) = v25(&a1[v22], 1, v6);
  v26 = v25(v24, 1, v6);
  if (!(_DWORD)v18)
  {
    if (!v26)
    {
      v8(v23, v24, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v23, v6);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v23, v24, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v23, 0, 1, v6);
  return a1;
}

char *initializeWithTake for ReplicatorMessage(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v6 = sub_245443B14();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  v8(&a1[v9], &a2[v9], v6);
  v10 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];
  v11 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  v12 = &a1[v11];
  v13 = &a2[v11];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v8(v12, v13, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for ReplicatorMessage(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t (*v25)(const void *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;

  v6 = sub_245443B14();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = (uint64_t *)&a2[v9];
  v13 = *v11;
  v12 = v11[1];
  *(_QWORD *)v10 = v13;
  *((_QWORD *)v10 + 1) = v12;
  swift_bridgeObjectRelease();
  v8(&a1[a3[6]], &a2[a3[6]], v6);
  v14 = a3[7];
  v15 = &a1[v14];
  v16 = (uint64_t *)&a2[v14];
  v18 = *v16;
  v17 = v16[1];
  *(_QWORD *)v15 = v18;
  *((_QWORD *)v15 + 1) = v17;
  swift_bridgeObjectRelease();
  v19 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  v20 = *(_QWORD *)&a1[v19];
  v21 = *(_QWORD *)&a1[v19 + 8];
  *(_OWORD *)&a1[v19] = *(_OWORD *)&a2[v19];
  sub_2453BDCF8(v20, v21);
  v22 = a3[10];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v26 = v25(&a1[v22], 1, v6);
  v27 = v25(v24, 1, v6);
  if (!v26)
  {
    if (!v27)
    {
      v8(v23, v24, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v23, v6);
    goto LABEL_6;
  }
  if (v27)
  {
LABEL_6:
    v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v23, v24, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v23, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2453F9704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = sub_245443B14();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
    v10 = a1 + *(int *)(a3 + 40);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplicatorMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_2453F97C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_245443B14();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
    v12 = a1 + *(int *)(a4 + 40);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_2453F986C()
{
  unint64_t v0;
  unint64_t v1;

  sub_245443B14();
  if (v0 <= 0x3F)
  {
    sub_2453F5D28();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for ReplicatorMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplicatorMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_2453F99F0 + 4 * byte_24544621C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_2453F9A24 + 4 * byte_245446217[v4]))();
}

uint64_t sub_2453F9A24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2453F9A2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2453F9A34);
  return result;
}

uint64_t sub_2453F9A40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2453F9A48);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_2453F9A4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2453F9A54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorMessage.CodingKeys()
{
  return &type metadata for ReplicatorMessage.CodingKeys;
}

unint64_t sub_2453F9A74()
{
  unint64_t result;

  result = qword_257464A00;
  if (!qword_257464A00)
  {
    result = MEMORY[0x249534380](&unk_2454463D4, &type metadata for ReplicatorMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464A00);
  }
  return result;
}

unint64_t sub_2453F9ABC()
{
  unint64_t result;

  result = qword_257464A08;
  if (!qword_257464A08)
  {
    result = MEMORY[0x249534380](&unk_245446344, &type metadata for ReplicatorMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464A08);
  }
  return result;
}

unint64_t sub_2453F9B04()
{
  unint64_t result;

  result = qword_257464A10;
  if (!qword_257464A10)
  {
    result = MEMORY[0x249534380](&unk_24544636C, &type metadata for ReplicatorMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464A10);
  }
  return result;
}

uint64_t sub_2453F9B48(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4449746E65696C63 && a2 == 0xE800000000000000 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000024544E880 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x546567617373656DLL && a2 == 0xEB00000000657079 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6C6F636F746F7270 && a2 == 0xEF6E6F6973726556 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x65736E6F70736572 && a2 == 0xEC00000044496F54)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_245444390();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

void static ReplicatorControlServiceDefinition.domain.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000014;
  a1[1] = 0x800000024544DCB0;
  a1[2] = 0xD00000000000001CLL;
  a1[3] = 0x800000024544DCD0;
}

unint64_t static ReplicatorControlServiceDefinition.serviceName.getter()
{
  return 0xD00000000000001CLL;
}

void sub_2453F9EA4(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000014;
  a1[1] = 0x800000024544DCB0;
  a1[2] = 0xD00000000000001CLL;
  a1[3] = 0x800000024544DCD0;
}

unint64_t sub_2453F9EDC()
{
  return 0xD00000000000001CLL;
}

ReplicatorServices::ReplicatorControlServiceError::Code_optional __swiftcall ReplicatorControlServiceError.Code.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 5;
  if ((unint64_t)rawValue < 5)
    v2 = rawValue;
  *v1 = v2;
  return (ReplicatorServices::ReplicatorControlServiceError::Code_optional)rawValue;
}

uint64_t ReplicatorControlServiceError.Code.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

ReplicatorServices::ReplicatorControlServiceError::Code_optional sub_2453F9F14(Swift::Int *a1)
{
  return ReplicatorControlServiceError.Code.init(rawValue:)(*a1);
}

unint64_t static ReplicatorControlServiceError.errorDomain.getter()
{
  return 0xD00000000000002DLL;
}

_BYTE *ReplicatorControlServiceError.init(code:underlyingError:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_BYTE *)a3 = *result;
  *(_QWORD *)(a3 + 8) = a2;
  return result;
}

uint64_t ReplicatorControlServiceError.errorCode.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t ReplicatorControlServiceError.errorUserInfo.getter()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t *boxed_opaque_existential_2;
  uint64_t v5;

  if (!*(_QWORD *)(v0 + 8))
    return sub_245434D9C(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257465690);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245445910;
  *(_QWORD *)(inited + 32) = sub_245443D9C();
  *(_QWORD *)(inited + 40) = v2;
  swift_getErrorValue();
  *(_QWORD *)(inited + 72) = v5;
  boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2((uint64_t *)(inited + 48));
  (*(void (**)(uint64_t *))(*(_QWORD *)(v5 - 8) + 16))(boxed_opaque_existential_2);
  return sub_245434D9C(inited);
}

unint64_t sub_2453FA014()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_2453FA030()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t sub_2453FA038()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t *boxed_opaque_existential_2;
  uint64_t v5;

  if (!*(_QWORD *)(v0 + 8))
    return sub_245434D9C(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257465690);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245445910;
  *(_QWORD *)(inited + 32) = sub_245443D9C();
  *(_QWORD *)(inited + 40) = v2;
  swift_getErrorValue();
  *(_QWORD *)(inited + 72) = v5;
  boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2((uint64_t *)(inited + 48));
  (*(void (**)(uint64_t *))(*(_QWORD *)(v5 - 8) + 16))(boxed_opaque_existential_2);
  return sub_245434D9C(inited);
}

uint64_t sub_2453FA0FC()
{
  sub_2453FEB50();
  return sub_2454443C0();
}

uint64_t sub_2453FA124()
{
  sub_2453FEB50();
  return sub_2454443B4();
}

uint64_t (*ReplicatorControlXPCServerParameters.Pair.relationshipID.modify())()
{
  return nullsub_1;
}

uint64_t sub_2453FA16C()
{
  return 1;
}

uint64_t sub_2453FA17C()
{
  return 0x6E6F6974616C6572;
}

void sub_2453FA1A4(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_2453FA1B0()
{
  sub_2453FA22C();
  return sub_245444468();
}

uint64_t sub_2453FA1D8()
{
  sub_2453FA22C();
  return sub_245444474();
}

uint64_t ReplicatorControlXPCServerParameters.Pair.encode(to:)(_QWORD *a1)
{
  return sub_2453FADF0(a1, &qword_257464A18, (void (*)(void))sub_2453FA22C);
}

unint64_t sub_2453FA22C()
{
  unint64_t result;

  result = qword_257464A20;
  if (!qword_257464A20)
  {
    result = MEMORY[0x249534380](&unk_245447BDC, &type metadata for ReplicatorControlXPCServerParameters.Pair.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464A20);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerParameters.Pair.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2453FAF80(a1, &qword_257464A28, type metadata accessor for ReplicatorControlXPCServerParameters.Pair, (void (*)(void))sub_2453FA22C, a2);
}

uint64_t type metadata accessor for ReplicatorControlXPCServerParameters.Pair(uint64_t a1)
{
  return sub_2453FB160(a1, (uint64_t *)&unk_257464BC0);
}

uint64_t sub_2453FA2B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorControlXPCServerParameters.Pair.init(from:)(a1, a2);
}

uint64_t sub_2453FA2CC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FB1D4(a1, a2, a3, &qword_257464A18, (void (*)(void))sub_2453FA22C);
}

uint64_t sub_2453FA2F8(uint64_t a1, uint64_t a2)
{
  return sub_2453FB308(a1, a2, &qword_257464B10, type metadata accessor for ReplicatorControlXPCServerParameters.Pair, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.Pair);
}

uint64_t sub_2453FA314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2453FB400(a1, a2, a3, a4, &qword_257464D00, (unint64_t *)&unk_2574658C0, type metadata accessor for ReplicatorControlXPCServerParameters.Pair, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.Pair);
}

uint64_t (*ReplicatorControlXPCServerParameters.Unpair.relationshipID.modify())()
{
  return nullsub_1;
}

uint64_t sub_2453FA358()
{
  sub_2453FA3D4();
  return sub_245444468();
}

uint64_t sub_2453FA380()
{
  sub_2453FA3D4();
  return sub_245444474();
}

uint64_t ReplicatorControlXPCServerParameters.Unpair.encode(to:)(_QWORD *a1)
{
  return sub_2453FADF0(a1, &qword_257464A30, (void (*)(void))sub_2453FA3D4);
}

unint64_t sub_2453FA3D4()
{
  unint64_t result;

  result = qword_257464A38;
  if (!qword_257464A38)
  {
    result = MEMORY[0x249534380](&unk_245447B8C, &type metadata for ReplicatorControlXPCServerParameters.Unpair.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464A38);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerParameters.Unpair.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2453FAF80(a1, &qword_257464A40, type metadata accessor for ReplicatorControlXPCServerParameters.Unpair, (void (*)(void))sub_2453FA3D4, a2);
}

uint64_t type metadata accessor for ReplicatorControlXPCServerParameters.Unpair(uint64_t a1)
{
  return sub_2453FB160(a1, (uint64_t *)&unk_257464BD0);
}

uint64_t sub_2453FA460@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorControlXPCServerParameters.Unpair.init(from:)(a1, a2);
}

uint64_t sub_2453FA474(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FB1D4(a1, a2, a3, &qword_257464A30, (void (*)(void))sub_2453FA3D4);
}

uint64_t sub_2453FA4A0(uint64_t a1, uint64_t a2)
{
  return sub_2453FB308(a1, a2, &qword_257464B20, type metadata accessor for ReplicatorControlXPCServerParameters.Unpair, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.Unpair);
}

uint64_t sub_2453FA4BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2453FB400(a1, a2, a3, a4, &qword_257464CF8, (unint64_t *)&unk_2574658B0, type metadata accessor for ReplicatorControlXPCServerParameters.Unpair, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.Unpair);
}

uint64_t ReplicatorControlXPCServerParameters.SetEnabled.enabled.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t ReplicatorControlXPCServerParameters.SetEnabled.enabled.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*ReplicatorControlXPCServerParameters.SetEnabled.enabled.modify())()
{
  return nullsub_1;
}

uint64_t sub_2453FA508()
{
  return 0x64656C62616E65;
}

uint64_t sub_2453FA524()
{
  sub_2453FA5A0();
  return sub_245444468();
}

uint64_t sub_2453FA54C()
{
  sub_2453FA5A0();
  return sub_245444474();
}

uint64_t ReplicatorControlXPCServerParameters.SetEnabled.encode(to:)(_QWORD *a1)
{
  return sub_2453FBCBC(a1, &qword_2574639E8, (void (*)(void))sub_2453FA5A0);
}

unint64_t sub_2453FA5A0()
{
  unint64_t result;

  result = qword_25440DFF8;
  if (!qword_25440DFF8)
  {
    result = MEMORY[0x249534380](&unk_245447B3C, &type metadata for ReplicatorControlXPCServerParameters.SetEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440DFF8);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerParameters.SetEnabled.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_2453FBE1C(a1, (uint64_t *)&unk_257463B60, (void (*)(void))sub_2453FA5A0, a2);
}

uint64_t sub_2453FA610@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ReplicatorControlXPCServerParameters.SetEnabled.init(from:)(a1, a2);
}

uint64_t sub_2453FA624(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FBF74(a1, a2, a3, &qword_2574639E8, (void (*)(void))sub_2453FA5A0);
}

uint64_t sub_2453FA650(uint64_t a1, uint64_t a2)
{
  return sub_2453FC070(a1, a2, (void (*)(void))sub_2453FCD38);
}

uint64_t sub_2453FA65C(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  return sub_2453FC138(a1, a2, a3, a4, (void (*)(void))sub_2453FCCF4);
}

uint64_t ReplicatorControlXPCServerParameters.AllowListEnabled.allowListEnabled.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t (*ReplicatorControlXPCServerParameters.AllowListEnabled.allowListEnabled.modify())()
{
  return nullsub_1;
}

unint64_t sub_2453FA688()
{
  return 0xD000000000000010;
}

uint64_t sub_2453FA6A4()
{
  sub_2453FA720();
  return sub_245444468();
}

uint64_t sub_2453FA6CC()
{
  sub_2453FA720();
  return sub_245444474();
}

uint64_t ReplicatorControlXPCServerParameters.AllowListEnabled.encode(to:)(_QWORD *a1)
{
  return sub_2453FBCBC(a1, &qword_257464A48, (void (*)(void))sub_2453FA720);
}

unint64_t sub_2453FA720()
{
  unint64_t result;

  result = qword_257464A50;
  if (!qword_257464A50)
  {
    result = MEMORY[0x249534380](&unk_245447AEC, &type metadata for ReplicatorControlXPCServerParameters.AllowListEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464A50);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerParameters.AllowListEnabled.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_2453FBE1C(a1, &qword_257464A58, (void (*)(void))sub_2453FA720, a2);
}

uint64_t sub_2453FA790@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ReplicatorControlXPCServerParameters.AllowListEnabled.init(from:)(a1, a2);
}

uint64_t sub_2453FA7A4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FBF74(a1, a2, a3, &qword_257464A48, (void (*)(void))sub_2453FA720);
}

uint64_t sub_2453FA7D0(uint64_t a1, uint64_t a2)
{
  return sub_2453FC070(a1, a2, (void (*)(void))sub_2453FCE20);
}

uint64_t sub_2453FA7DC(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  return sub_2453FC138(a1, a2, a3, a4, (void (*)(void))sub_2453FCDDC);
}

uint64_t (*ReplicatorControlXPCServerParameters.AllowListID.allowListID.modify())()
{
  return nullsub_1;
}

uint64_t sub_2453FA808()
{
  return 0x73694C776F6C6C61;
}

uint64_t sub_2453FA828@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x73694C776F6C6C61 && a2 == 0xEB00000000444974)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_245444390();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_2453FA8D4()
{
  sub_2453FA950();
  return sub_245444468();
}

uint64_t sub_2453FA8FC()
{
  sub_2453FA950();
  return sub_245444474();
}

uint64_t ReplicatorControlXPCServerParameters.AllowListID.encode(to:)(_QWORD *a1)
{
  return sub_2453FADF0(a1, &qword_257464A60, (void (*)(void))sub_2453FA950);
}

unint64_t sub_2453FA950()
{
  unint64_t result;

  result = qword_257464A68;
  if (!qword_257464A68)
  {
    result = MEMORY[0x249534380](&unk_245447A9C, &type metadata for ReplicatorControlXPCServerParameters.AllowListID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464A68);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerParameters.AllowListID.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2453FAF80(a1, &qword_257464A70, type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID, (void (*)(void))sub_2453FA950, a2);
}

uint64_t type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID(uint64_t a1)
{
  return sub_2453FB160(a1, (uint64_t *)&unk_257464BE0);
}

uint64_t sub_2453FA9DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorControlXPCServerParameters.AllowListID.init(from:)(a1, a2);
}

uint64_t sub_2453FA9F0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FB1D4(a1, a2, a3, &qword_257464A60, (void (*)(void))sub_2453FA950);
}

uint64_t sub_2453FAA1C(uint64_t a1, uint64_t a2)
{
  return sub_2453FB308(a1, a2, &qword_257464B48, type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.AllowListID);
}

uint64_t sub_2453FAA38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2453FB400(a1, a2, a3, a4, &qword_257464CF0, (unint64_t *)&unk_2574658A0, type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.AllowListID);
}

uint64_t ReplicatorControlXPCServerParameters.AllowList.allowList.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*ReplicatorControlXPCServerParameters.AllowList.allowList.modify())()
{
  return nullsub_1;
}

uint64_t sub_2453FAA9C()
{
  return 0x73694C776F6C6C61;
}

uint64_t sub_2453FAABC()
{
  sub_2453FAB38();
  return sub_245444468();
}

uint64_t sub_2453FAAE4()
{
  sub_2453FAB38();
  return sub_245444474();
}

uint64_t ReplicatorControlXPCServerParameters.AllowList.encode(to:)(_QWORD *a1)
{
  return sub_2453FC33C(a1, &qword_257464A78, (void (*)(void))sub_2453FAB38);
}

unint64_t sub_2453FAB38()
{
  unint64_t result;

  result = qword_257464A80;
  if (!qword_257464A80)
  {
    result = MEMORY[0x249534380](&unk_245447A4C, &type metadata for ReplicatorControlXPCServerParameters.AllowList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464A80);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerParameters.AllowList.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_2453FC4E0(a1, &qword_257464A90, (void (*)(void))sub_2453FAB38, a2);
}

uint64_t sub_2453FABA8(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_257464808);
    v10 = sub_2453B8BF4(a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], a3);
    result = MEMORY[0x249534380](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2453FAC2C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ReplicatorControlXPCServerParameters.AllowList.init(from:)(a1, a2);
}

uint64_t sub_2453FAC40(_QWORD *a1)
{
  return ReplicatorControlXPCServerParameters.AllowList.encode(to:)(a1);
}

uint64_t sub_2453FAC54(uint64_t a1, uint64_t a2)
{
  return sub_2453FC66C(a1, a2, (void (*)(void))sub_2453FCF80);
}

uint64_t _s18ReplicatorServices0A26ControlXPCServerParametersO4PairV14relationshipID10Foundation4UUIDVvs_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_245443B14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*ReplicatorControlXPCServerParameters.GetPushToken.relationshipID.modify())()
{
  return nullsub_1;
}

uint64_t sub_2453FACBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6E6F6974616C6572 && a2 == 0xEE00444970696873)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_245444390();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_2453FAD74()
{
  sub_2453FAF08();
  return sub_245444468();
}

uint64_t sub_2453FAD9C()
{
  sub_2453FAF08();
  return sub_245444474();
}

uint64_t ReplicatorControlXPCServerParameters.GetPushToken.encode(to:)(_QWORD *a1)
{
  return sub_2453FADF0(a1, &qword_257464AA0, (void (*)(void))sub_2453FAF08);
}

uint64_t sub_2453FADF0(_QWORD *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_24544445C();
  sub_245443B14();
  sub_2453B8BF4(&qword_2574639F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  sub_245444360();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_2453FAF08()
{
  unint64_t result;

  result = qword_257464AA8;
  if (!qword_257464AA8)
  {
    result = MEMORY[0x249534380](&unk_2454479FC, &type metadata for ReplicatorControlXPCServerParameters.GetPushToken.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464AA8);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerParameters.GetPushToken.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2453FAF80(a1, &qword_257464AB0, type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken, (void (*)(void))sub_2453FAF08, a2);
}

uint64_t sub_2453FAF80@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD);
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v19 = a5;
  v23 = sub_245443B14();
  v18 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v22 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v21 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a3;
  v13 = a3(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v18 - v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a4();
  v16 = v24;
  sub_245444450();
  if (!v16)
  {
    sub_2453B8BF4(&qword_25440E1B8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    sub_2454442DC();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v12, v10);
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v22, v23);
    sub_2453D062C((uint64_t)v15, v19, v20);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken(uint64_t a1)
{
  return sub_2453FB160(a1, (uint64_t *)&unk_257464BF0);
}

uint64_t sub_2453FB160(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_2453FB194@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorControlXPCServerParameters.GetPushToken.init(from:)(a1, a2);
}

uint64_t sub_2453FB1A8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FB1D4(a1, a2, a3, &qword_257464AA0, (void (*)(void))sub_2453FAF08);
}

uint64_t sub_2453FB1D4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a5();
  sub_24544445C();
  sub_245443B14();
  sub_2453B8BF4(&qword_2574639F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  sub_245444360();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_2453FB2EC(uint64_t a1, uint64_t a2)
{
  return sub_2453FB308(a1, a2, &qword_257464B70, type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.GetPushToken);
}

uint64_t sub_2453FB308(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  sub_245443994();
  swift_allocObject();
  sub_245443988();
  sub_2453B8BF4(a3, a4, a5);
  v8 = sub_24544397C();
  v10 = v9;
  v11 = sub_245443A6C();
  sub_2453BDCF8(v8, v10);
  swift_release();
  return v11;
}

uint64_t sub_2453FB3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2453FB400(a1, a2, a3, a4, (uint64_t *)&unk_257465880, &qword_257464B68, type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.GetPushToken);
}

uint64_t sub_2453FB400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unint64_t *a6, uint64_t (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;

  v14 = __swift_instantiateConcreteTypeFromMangledName(a5);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v17 = sub_245443A78();
  v19 = v18;
  sub_2453B8BF4(a6, a7, a8);
  sub_24544394C();
  sub_2453D055C(a2, a5);
  sub_2453BDCF8(v17, v19);
  swift_release();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v16, 0, 1, a3);
  return sub_2453D0428((uint64_t)v16, a2, a5);
}

uint64_t ReplicatorControlXPCServerResponse.GetEnabled.enabled.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

ReplicatorServices::ReplicatorControlXPCServerResponse::GetEnabled __swiftcall ReplicatorControlXPCServerResponse.GetEnabled.init(enabled:)(ReplicatorServices::ReplicatorControlXPCServerResponse::GetEnabled enabled)
{
  ReplicatorServices::ReplicatorControlXPCServerResponse::GetEnabled *v1;

  v1->enabled = enabled.enabled;
  return enabled;
}

uint64_t sub_2453FB588@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x64656C62616E65 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_245444390();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_2453FB61C()
{
  sub_2453FB698();
  return sub_245444468();
}

uint64_t sub_2453FB644()
{
  sub_2453FB698();
  return sub_245444474();
}

uint64_t ReplicatorControlXPCServerResponse.GetEnabled.encode(to:)(_QWORD *a1)
{
  return sub_2453FBCBC(a1, (uint64_t *)&unk_257463BA8, (void (*)(void))sub_2453FB698);
}

unint64_t sub_2453FB698()
{
  unint64_t result;

  result = qword_25440DFD8;
  if (!qword_25440DFD8)
  {
    result = MEMORY[0x249534380](&unk_2454479AC, &type metadata for ReplicatorControlXPCServerResponse.GetEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440DFD8);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerResponse.GetEnabled.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_2453FBE1C(a1, &qword_2574639E0, (void (*)(void))sub_2453FB698, a2);
}

uint64_t sub_2453FB708@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ReplicatorControlXPCServerResponse.GetEnabled.init(from:)(a1, a2);
}

uint64_t sub_2453FB71C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FBF74(a1, a2, a3, (uint64_t *)&unk_257463BA8, (void (*)(void))sub_2453FB698);
}

uint64_t sub_2453FB748(uint64_t a1, uint64_t a2)
{
  return sub_2453FC070(a1, a2, (void (*)(void))sub_2453FD0E0);
}

uint64_t sub_2453FB754(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  return sub_2453FC138(a1, a2, a3, a4, (void (*)(void))sub_2453FD09C);
}

uint64_t ReplicatorControlXPCServerResponse.GetDevices.devices.getter()
{
  return swift_bridgeObjectRetain();
}

ReplicatorServices::ReplicatorControlXPCServerResponse::GetDevices __swiftcall ReplicatorControlXPCServerResponse.GetDevices.init(devices:)(ReplicatorServices::ReplicatorControlXPCServerResponse::GetDevices devices)
{
  ReplicatorServices::ReplicatorControlXPCServerResponse::GetDevices *v1;

  v1->devices._rawValue = devices.devices._rawValue;
  return devices;
}

uint64_t sub_2453FB778()
{
  return sub_245444420();
}

uint64_t sub_2453FB79C()
{
  return 0x73656369766564;
}

uint64_t sub_2453FB7B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x73656369766564 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_245444390();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_2453FB848()
{
  sub_2453FB9C0();
  return sub_245444468();
}

uint64_t sub_2453FB870()
{
  sub_2453FB9C0();
  return sub_245444474();
}

uint64_t ReplicatorControlXPCServerResponse.GetDevices.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_257463BA0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2453FB9C0();
  sub_24544445C();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB00);
  sub_2453FBA04((unint64_t *)&qword_257463B10, (unint64_t *)&unk_257463A40, (uint64_t)&protocol conformance descriptor for ReplicatorDevice, MEMORY[0x24BEE12A0]);
  sub_245444360();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_2453FB9C0()
{
  unint64_t result;

  result = qword_25440DFB0;
  if (!qword_25440DFB0)
  {
    result = MEMORY[0x249534380](&unk_24544795C, &type metadata for ReplicatorControlXPCServerResponse.GetDevices.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440DFB0);
  }
  return result;
}

uint64_t sub_2453FBA04(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25440EB00);
    v10 = sub_2453B8BF4(a2, type metadata accessor for ReplicatorDevice, a3);
    result = MEMORY[0x249534380](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerResponse.GetDevices.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574639D8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2453FB9C0();
  sub_245444450();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB00);
    sub_2453FBA04((unint64_t *)&qword_25440E660, &qword_25440E4D0, (uint64_t)&protocol conformance descriptor for ReplicatorDevice, MEMORY[0x24BEE12D0]);
    sub_2454442DC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_2453FBBD0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ReplicatorControlXPCServerResponse.GetDevices.init(from:)(a1, a2);
}

uint64_t sub_2453FBBE4(_QWORD *a1)
{
  return ReplicatorControlXPCServerResponse.GetDevices.encode(to:)(a1);
}

uint64_t sub_2453FBBF8(uint64_t a1, uint64_t a2)
{
  return sub_2453FC66C(a1, a2, (void (*)(void))sub_2453FD1C8);
}

uint64_t ReplicatorControlXPCServerResponse.GetAllowListEnabled.allowListEnabled.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t sub_2453FBC18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2453FEACC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_2453FBC40()
{
  sub_2453FBDAC();
  return sub_245444468();
}

uint64_t sub_2453FBC68()
{
  sub_2453FBDAC();
  return sub_245444474();
}

uint64_t ReplicatorControlXPCServerResponse.GetAllowListEnabled.encode(to:)(_QWORD *a1)
{
  return sub_2453FBCBC(a1, &qword_257464AB8, (void (*)(void))sub_2453FBDAC);
}

uint64_t sub_2453FBCBC(_QWORD *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  void (*v10)(void);

  v10 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v10();
  sub_24544445C();
  sub_245444354();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_2453FBDAC()
{
  unint64_t result;

  result = qword_257464AC0;
  if (!qword_257464AC0)
  {
    result = MEMORY[0x249534380](&unk_24544790C, &type metadata for ReplicatorControlXPCServerResponse.GetAllowListEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464AC0);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerResponse.GetAllowListEnabled.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_2453FBE1C(a1, &qword_257464AC8, (void (*)(void))sub_2453FBDAC, a2);
}

uint64_t sub_2453FBE1C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v13 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v14 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_245444450();
  if (!v4)
  {
    v10 = sub_2454442D0();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v7);
    *v13 = v10 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_2453FBF34@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ReplicatorControlXPCServerResponse.GetAllowListEnabled.init(from:)(a1, a2);
}

uint64_t sub_2453FBF48(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FBF74(a1, a2, a3, &qword_257464AB8, (void (*)(void))sub_2453FBDAC);
}

uint64_t sub_2453FBF74(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  void (*v12)(void);

  v12 = a5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v12();
  sub_24544445C();
  sub_245444354();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_2453FC064(uint64_t a1, uint64_t a2)
{
  return sub_2453FC070(a1, a2, (void (*)(void))sub_2453FD2B0);
}

uint64_t sub_2453FC070(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  sub_245443994();
  swift_allocObject();
  sub_245443988();
  a3();
  v4 = sub_24544397C();
  v6 = v5;
  v7 = sub_245443A6C();
  sub_2453BDCF8(v4, v6);
  swift_release();
  return v7;
}

uint64_t sub_2453FC12C(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  return sub_2453FC138(a1, a2, a3, a4, (void (*)(void))sub_2453FD26C);
}

uint64_t sub_2453FC138(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  char v11;

  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v7 = sub_245443A78();
  v9 = v8;
  a5();
  sub_24544394C();
  sub_2453BDCF8(v7, v9);
  result = swift_release();
  *a2 = v11;
  return result;
}

uint64_t sub_2453FC220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x73694C776F6C6C61 && a2 == 0xE900000000000074)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_245444390();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_2453FC2C0()
{
  sub_2453FC470();
  return sub_245444468();
}

uint64_t sub_2453FC2E8()
{
  sub_2453FC470();
  return sub_245444474();
}

uint64_t ReplicatorControlXPCServerResponse.GetAllowList.encode(to:)(_QWORD *a1)
{
  return sub_2453FC33C(a1, &qword_257464AD0, (void (*)(void))sub_2453FC470);
}

uint64_t sub_2453FC33C(_QWORD *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[4];

  v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v11[0] = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_24544445C();
  v11[3] = v9;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257464808);
  sub_2453FABA8(&qword_257464A88, &qword_2574639F0, MEMORY[0x24BDCEA70], MEMORY[0x24BEE12A0]);
  sub_245444360();
  return (*(uint64_t (**)(char *, uint64_t))(v11[0] + 8))(v8, v6);
}

unint64_t sub_2453FC470()
{
  unint64_t result;

  result = qword_257464AD8;
  if (!qword_257464AD8)
  {
    result = MEMORY[0x249534380](&unk_2454478BC, &type metadata for ReplicatorControlXPCServerResponse.GetAllowList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464AD8);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerResponse.GetAllowList.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_2453FC4E0(a1, &qword_257464AE0, (void (*)(void))sub_2453FC470, a2);
}

uint64_t sub_2453FC4E0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v12 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v13 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_245444450();
  if (!v4)
  {
    v10 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257464808);
    sub_2453FABA8(&qword_257464A98, &qword_25440E1B8, MEMORY[0x24BDCEAA8], MEMORY[0x24BEE12D0]);
    sub_2454442DC();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v7);
    *v10 = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_2453FC638@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ReplicatorControlXPCServerResponse.GetAllowList.init(from:)(a1, a2);
}

uint64_t sub_2453FC64C(_QWORD *a1)
{
  return ReplicatorControlXPCServerResponse.GetAllowList.encode(to:)(a1);
}

uint64_t sub_2453FC660(uint64_t a1, uint64_t a2)
{
  return sub_2453FC66C(a1, a2, (void (*)(void))sub_2453FD398);
}

uint64_t sub_2453FC66C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  sub_245443994();
  swift_allocObject();
  sub_245443988();
  a3();
  v4 = sub_24544397C();
  v6 = v5;
  v7 = sub_245443A6C();
  sub_2453BDCF8(v4, v6);
  swift_release();
  return v7;
}

uint64_t ReplicatorControlXPCServerResponse.GetPushToken.pushToken.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_2453CFFAC(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t ReplicatorControlXPCServerResponse.GetPushToken.init(pushToken:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_2453FC76C()
{
  sub_245444414();
  sub_245444420();
  return sub_245444444();
}

uint64_t sub_2453FC7AC()
{
  sub_245444414();
  sub_245444420();
  return sub_245444444();
}

uint64_t sub_2453FC7E8()
{
  return 0x656B6F5468737570;
}

uint64_t sub_2453FC804@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x656B6F5468737570 && a2 == 0xE90000000000006ELL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_245444390();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_2453FC8A4()
{
  sub_2453FC9F4();
  return sub_245444468();
}

uint64_t sub_2453FC8CC()
{
  sub_2453FC9F4();
  return sub_245444474();
}

uint64_t ReplicatorControlXPCServerResponse.GetPushToken.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464AE8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2453FC9F4();
  sub_24544445C();
  v10[0] = v8;
  v10[1] = v7;
  sub_2453F71A0();
  sub_245444360();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_2453FC9F4()
{
  unint64_t result;

  result = qword_257464AF0;
  if (!qword_257464AF0)
  {
    result = MEMORY[0x249534380](&unk_24544786C, &type metadata for ReplicatorControlXPCServerResponse.GetPushToken.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464AF0);
  }
  return result;
}

uint64_t ReplicatorControlXPCServerResponse.GetPushToken.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v10;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464AF8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2453FC9F4();
  sub_245444450();
  if (!v2)
  {
    sub_2453F715C();
    sub_2454442DC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_2453FCB5C()
{
  unint64_t result;

  result = qword_257464B00;
  if (!qword_257464B00)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlServiceError.Code, &type metadata for ReplicatorControlServiceError.Code);
    atomic_store(result, (unint64_t *)&qword_257464B00);
  }
  return result;
}

unint64_t sub_2453FCBA4()
{
  unint64_t result;

  result = qword_257464B08;
  if (!qword_257464B08)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlServiceError, &type metadata for ReplicatorControlServiceError);
    atomic_store(result, (unint64_t *)&qword_257464B08);
  }
  return result;
}

uint64_t sub_2453FCBE8(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_2453B8BF4((unint64_t *)&unk_2574658C0, type metadata accessor for ReplicatorControlXPCServerParameters.Pair, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.Pair);
  a1[2] = sub_2453B8BF4(&qword_257464B10, type metadata accessor for ReplicatorControlXPCServerParameters.Pair, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.Pair);
  result = sub_2453B8BF4(&qword_257464B18, type metadata accessor for ReplicatorControlXPCServerParameters.Pair, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.Pair);
  a1[3] = result;
  return result;
}

uint64_t sub_2453FCC60(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_2453B8BF4((unint64_t *)&unk_2574658B0, type metadata accessor for ReplicatorControlXPCServerParameters.Unpair, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.Unpair);
  a1[2] = sub_2453B8BF4(&qword_257464B20, type metadata accessor for ReplicatorControlXPCServerParameters.Unpair, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.Unpair);
  result = sub_2453B8BF4(&qword_257464B28, type metadata accessor for ReplicatorControlXPCServerParameters.Unpair, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.Unpair);
  a1[3] = result;
  return result;
}

uint64_t sub_2453FCCD8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_2453FCCF4, (uint64_t (*)(void))sub_2453FCD38, (uint64_t (*)(void))sub_2453FCD7C);
}

unint64_t sub_2453FCCF4()
{
  unint64_t result;

  result = qword_257463A30;
  if (!qword_257463A30)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerParameters.SetEnabled, &type metadata for ReplicatorControlXPCServerParameters.SetEnabled);
    atomic_store(result, (unint64_t *)&qword_257463A30);
  }
  return result;
}

unint64_t sub_2453FCD38()
{
  unint64_t result;

  result = qword_25440E010;
  if (!qword_25440E010)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerParameters.SetEnabled, &type metadata for ReplicatorControlXPCServerParameters.SetEnabled);
    atomic_store(result, (unint64_t *)&qword_25440E010);
  }
  return result;
}

unint64_t sub_2453FCD7C()
{
  unint64_t result;

  result = qword_257463A38;
  if (!qword_257463A38)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerParameters.SetEnabled, &type metadata for ReplicatorControlXPCServerParameters.SetEnabled);
    atomic_store(result, (unint64_t *)&qword_257463A38);
  }
  return result;
}

uint64_t sub_2453FCDC0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_2453FCDDC, (uint64_t (*)(void))sub_2453FCE20, (uint64_t (*)(void))sub_2453FCE64);
}

unint64_t sub_2453FCDDC()
{
  unint64_t result;

  result = qword_257464B30;
  if (!qword_257464B30)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerParameters.AllowListEnabled, &type metadata for ReplicatorControlXPCServerParameters.AllowListEnabled);
    atomic_store(result, (unint64_t *)&qword_257464B30);
  }
  return result;
}

unint64_t sub_2453FCE20()
{
  unint64_t result;

  result = qword_257464B38;
  if (!qword_257464B38)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerParameters.AllowListEnabled, &type metadata for ReplicatorControlXPCServerParameters.AllowListEnabled);
    atomic_store(result, (unint64_t *)&qword_257464B38);
  }
  return result;
}

unint64_t sub_2453FCE64()
{
  unint64_t result;

  result = qword_257464B40;
  if (!qword_257464B40)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerParameters.AllowListEnabled, &type metadata for ReplicatorControlXPCServerParameters.AllowListEnabled);
    atomic_store(result, (unint64_t *)&qword_257464B40);
  }
  return result;
}

uint64_t sub_2453FCEA8(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_2453B8BF4((unint64_t *)&unk_2574658A0, type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.AllowListID);
  a1[2] = sub_2453B8BF4(&qword_257464B48, type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.AllowListID);
  result = sub_2453B8BF4(&qword_257464B50, type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.AllowListID);
  a1[3] = result;
  return result;
}

uint64_t sub_2453FCF20(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_2453FCF3C, (uint64_t (*)(void))sub_2453FCF80, (uint64_t (*)(void))sub_2453FCFC4);
}

unint64_t sub_2453FCF3C()
{
  unint64_t result;

  result = qword_257465890;
  if (!qword_257465890)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerParameters.AllowList, &type metadata for ReplicatorControlXPCServerParameters.AllowList);
    atomic_store(result, (unint64_t *)&qword_257465890);
  }
  return result;
}

unint64_t sub_2453FCF80()
{
  unint64_t result;

  result = qword_257464B58;
  if (!qword_257464B58)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerParameters.AllowList, &type metadata for ReplicatorControlXPCServerParameters.AllowList);
    atomic_store(result, (unint64_t *)&qword_257464B58);
  }
  return result;
}

unint64_t sub_2453FCFC4()
{
  unint64_t result;

  result = qword_257464B60;
  if (!qword_257464B60)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerParameters.AllowList, &type metadata for ReplicatorControlXPCServerParameters.AllowList);
    atomic_store(result, (unint64_t *)&qword_257464B60);
  }
  return result;
}

uint64_t sub_2453FD008(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_2453B8BF4(&qword_257464B68, type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.GetPushToken);
  a1[2] = sub_2453B8BF4(&qword_257464B70, type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.GetPushToken);
  result = sub_2453B8BF4(&qword_257464B78, type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.GetPushToken);
  a1[3] = result;
  return result;
}

uint64_t sub_2453FD080(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_2453FD09C, (uint64_t (*)(void))sub_2453FD0E0, (uint64_t (*)(void))sub_2453FD124);
}

unint64_t sub_2453FD09C()
{
  unint64_t result;

  result = qword_25440DFF0;
  if (!qword_25440DFF0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerResponse.GetEnabled, &type metadata for ReplicatorControlXPCServerResponse.GetEnabled);
    atomic_store(result, (unint64_t *)&qword_25440DFF0);
  }
  return result;
}

unint64_t sub_2453FD0E0()
{
  unint64_t result;

  result = qword_257463A20;
  if (!qword_257463A20)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerResponse.GetEnabled, &type metadata for ReplicatorControlXPCServerResponse.GetEnabled);
    atomic_store(result, (unint64_t *)&qword_257463A20);
  }
  return result;
}

unint64_t sub_2453FD124()
{
  unint64_t result;

  result = qword_257463A28;
  if (!qword_257463A28)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerResponse.GetEnabled, &type metadata for ReplicatorControlXPCServerResponse.GetEnabled);
    atomic_store(result, (unint64_t *)&qword_257463A28);
  }
  return result;
}

uint64_t sub_2453FD168(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_2453FD184, (uint64_t (*)(void))sub_2453FD1C8, (uint64_t (*)(void))sub_2453FD20C);
}

unint64_t sub_2453FD184()
{
  unint64_t result;

  result = qword_25440DFD0;
  if (!qword_25440DFD0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerResponse.GetDevices, &type metadata for ReplicatorControlXPCServerResponse.GetDevices);
    atomic_store(result, (unint64_t *)&qword_25440DFD0);
  }
  return result;
}

unint64_t sub_2453FD1C8()
{
  unint64_t result;

  result = qword_257463A10;
  if (!qword_257463A10)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerResponse.GetDevices, &type metadata for ReplicatorControlXPCServerResponse.GetDevices);
    atomic_store(result, (unint64_t *)&qword_257463A10);
  }
  return result;
}

unint64_t sub_2453FD20C()
{
  unint64_t result;

  result = qword_257463A18;
  if (!qword_257463A18)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerResponse.GetDevices, &type metadata for ReplicatorControlXPCServerResponse.GetDevices);
    atomic_store(result, (unint64_t *)&qword_257463A18);
  }
  return result;
}

uint64_t sub_2453FD250(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_2453FD26C, (uint64_t (*)(void))sub_2453FD2B0, (uint64_t (*)(void))sub_2453FD2F4);
}

unint64_t sub_2453FD26C()
{
  unint64_t result;

  result = qword_257464B80;
  if (!qword_257464B80)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerResponse.GetAllowListEnabled, &type metadata for ReplicatorControlXPCServerResponse.GetAllowListEnabled);
    atomic_store(result, (unint64_t *)&qword_257464B80);
  }
  return result;
}

unint64_t sub_2453FD2B0()
{
  unint64_t result;

  result = qword_257464B88;
  if (!qword_257464B88)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerResponse.GetAllowListEnabled, &type metadata for ReplicatorControlXPCServerResponse.GetAllowListEnabled);
    atomic_store(result, (unint64_t *)&qword_257464B88);
  }
  return result;
}

unint64_t sub_2453FD2F4()
{
  unint64_t result;

  result = qword_257464B90;
  if (!qword_257464B90)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerResponse.GetAllowListEnabled, &type metadata for ReplicatorControlXPCServerResponse.GetAllowListEnabled);
    atomic_store(result, (unint64_t *)&qword_257464B90);
  }
  return result;
}

uint64_t sub_2453FD338(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_2453FD354, (uint64_t (*)(void))sub_2453FD398, (uint64_t (*)(void))sub_2453FD3DC);
}

unint64_t sub_2453FD354()
{
  unint64_t result;

  result = qword_257465870;
  if (!qword_257465870)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerResponse.GetAllowList, &type metadata for ReplicatorControlXPCServerResponse.GetAllowList);
    atomic_store(result, (unint64_t *)&qword_257465870);
  }
  return result;
}

unint64_t sub_2453FD398()
{
  unint64_t result;

  result = qword_257464B98;
  if (!qword_257464B98)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerResponse.GetAllowList, &type metadata for ReplicatorControlXPCServerResponse.GetAllowList);
    atomic_store(result, (unint64_t *)&qword_257464B98);
  }
  return result;
}

unint64_t sub_2453FD3DC()
{
  unint64_t result;

  result = qword_257464BA0;
  if (!qword_257464BA0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerResponse.GetAllowList, &type metadata for ReplicatorControlXPCServerResponse.GetAllowList);
    atomic_store(result, (unint64_t *)&qword_257464BA0);
  }
  return result;
}

uint64_t sub_2453FD420@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return ReplicatorControlXPCServerResponse.GetPushToken.init(from:)(a1, a2);
}

uint64_t sub_2453FD434(_QWORD *a1)
{
  return ReplicatorControlXPCServerResponse.GetPushToken.encode(to:)(a1);
}

uint64_t sub_2453FD448(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_2453FD4A8, (uint64_t (*)(void))sub_2453FD4EC, (uint64_t (*)(void))sub_2453FD530);
}

uint64_t sub_2453FD464(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t result;

  a1[1] = a4();
  a1[2] = a5();
  result = a6();
  a1[3] = result;
  return result;
}

unint64_t sub_2453FD4A8()
{
  unint64_t result;

  result = qword_257464BA8;
  if (!qword_257464BA8)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerResponse.GetPushToken, &type metadata for ReplicatorControlXPCServerResponse.GetPushToken);
    atomic_store(result, (unint64_t *)&qword_257464BA8);
  }
  return result;
}

unint64_t sub_2453FD4EC()
{
  unint64_t result;

  result = qword_257464BB0;
  if (!qword_257464BB0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerResponse.GetPushToken, &type metadata for ReplicatorControlXPCServerResponse.GetPushToken);
    atomic_store(result, (unint64_t *)&qword_257464BB0);
  }
  return result;
}

unint64_t sub_2453FD530()
{
  unint64_t result;

  result = qword_257464BB8;
  if (!qword_257464BB8)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlXPCServerResponse.GetPushToken, &type metadata for ReplicatorControlXPCServerResponse.GetPushToken);
    atomic_store(result, (unint64_t *)&qword_257464BB8);
  }
  return result;
}

uint64_t sub_2453FD574()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  sub_245443994();
  swift_allocObject();
  sub_245443988();
  sub_2453FD4EC();
  v0 = sub_24544397C();
  v2 = v1;
  v3 = sub_245443A6C();
  sub_2453BDCF8(v0, v2);
  swift_release();
  return v3;
}

ValueMetadata *type metadata accessor for ReplicatorControlServiceDefinition()
{
  return &type metadata for ReplicatorControlServiceDefinition;
}

uint64_t initializeBufferWithCopyOfBuffer for ReplicatorControlServiceError(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a2 + 8);
  v4 = v3;
  *(_QWORD *)(a1 + 8) = v3;
  return a1;
}

void destroy for ReplicatorControlServiceError(uint64_t a1)
{

}

uint64_t assignWithCopy for ReplicatorControlServiceError(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a2 + 8);
  v5 = v4;
  *(_QWORD *)(a1 + 8) = v4;

  return a1;
}

uint64_t assignWithTake for ReplicatorControlServiceError(uint64_t a1, uint64_t a2)
{
  void *v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorControlServiceError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplicatorControlServiceError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorControlServiceError()
{
  return &type metadata for ReplicatorControlServiceError;
}

uint64_t storeEnumTagSinglePayload for ReplicatorControlServiceError.Code(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_2453FD814 + 4 * byte_245446455[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_2453FD848 + 4 * byte_245446450[v4]))();
}

uint64_t sub_2453FD848(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2453FD850(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2453FD858);
  return result;
}

uint64_t sub_2453FD864(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2453FD86CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_2453FD870(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2453FD878(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorControlServiceError.Code()
{
  return &type metadata for ReplicatorControlServiceError.Code;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerParameters()
{
  return &type metadata for ReplicatorControlXPCServerParameters;
}

uint64_t getEnumTagSinglePayload for ReplicatorControlXPCServerParameters.Pair()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for ReplicatorControlXPCServerParameters.Pair()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t getEnumTagSinglePayload for ReplicatorControlXPCServerParameters.Unpair()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for ReplicatorControlXPCServerParameters.Unpair()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerParameters.SetEnabled()
{
  return &type metadata for ReplicatorControlXPCServerParameters.SetEnabled;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerParameters.AllowListEnabled()
{
  return &type metadata for ReplicatorControlXPCServerParameters.AllowListEnabled;
}

uint64_t getEnumTagSinglePayload for ReplicatorControlXPCServerParameters.AllowListID()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for ReplicatorControlXPCServerParameters.AllowListID()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerParameters.AllowList()
{
  return &type metadata for ReplicatorControlXPCServerParameters.AllowList;
}

uint64_t _s18ReplicatorServices36ReplicatorControlXPCServerParametersO4PairVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_245443B14();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t _s18ReplicatorServices36ReplicatorControlXPCServerParametersO4PairVwxx_0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_245443B14();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t _s18ReplicatorServices36ReplicatorControlXPCServerParametersO4PairVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_245443B14();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t _s18ReplicatorServices36ReplicatorControlXPCServerParametersO4PairVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_245443B14();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t _s18ReplicatorServices36ReplicatorControlXPCServerParametersO4PairVwtk_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_245443B14();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t _s18ReplicatorServices36ReplicatorControlXPCServerParametersO4PairVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_245443B14();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorControlXPCServerParameters.GetPushToken()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_245443B14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ReplicatorControlXPCServerParameters.GetPushToken()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_245443B14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_2453FDB74()
{
  uint64_t result;
  unint64_t v1;

  result = sub_245443B14();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerResponse()
{
  return &type metadata for ReplicatorControlXPCServerResponse;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerResponse.GetEnabled()
{
  return &type metadata for ReplicatorControlXPCServerResponse.GetEnabled;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerResponse.GetDevices()
{
  return &type metadata for ReplicatorControlXPCServerResponse.GetDevices;
}

uint64_t getEnumTagSinglePayload for ReplicationXPCServerResponse.GetClientEnabled(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s18ReplicatorServices36ReplicatorControlXPCServerParametersO10SetEnabledVwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_2453FDCF8 + 4 * byte_24544645F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2453FDD2C + 4 * byte_24544645A[v4]))();
}

uint64_t sub_2453FDD2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2453FDD34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2453FDD3CLL);
  return result;
}

uint64_t sub_2453FDD48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2453FDD50);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2453FDD54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2453FDD5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerResponse.GetAllowListEnabled()
{
  return &type metadata for ReplicatorControlXPCServerResponse.GetAllowListEnabled;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerResponse.GetAllowList()
{
  return &type metadata for ReplicatorControlXPCServerResponse.GetAllowList;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReplicatorControlXPCServerResponse.GetPushToken(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_2453CFFAC(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for ReplicatorControlXPCServerResponse.GetPushToken(uint64_t a1)
{
  return sub_2453BDCF8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for ReplicatorControlXPCServerResponse.GetPushToken(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_2453CFFAC(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_2453BDCF8(v5, v6);
  return a1;
}

uint64_t *assignWithTake for ReplicatorControlXPCServerResponse.GetPushToken(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_2453BDCF8(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorControlXPCServerResponse.GetPushToken(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ReplicatorControlXPCServerResponse.GetPushToken(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerResponse.GetPushToken()
{
  return &type metadata for ReplicatorControlXPCServerResponse.GetPushToken;
}

uint64_t sub_2453FDF08()
{
  return 0;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerResponse.GetPushToken.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerResponse.GetPushToken.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerResponse.GetAllowList.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerResponse.GetAllowList.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerResponse.GetAllowListEnabled.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerResponse.GetAllowListEnabled.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerResponse.GetDevices.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerResponse.GetDevices.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerResponse.GetEnabled.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerResponse.GetEnabled.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerParameters.GetPushToken.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerParameters.AllowList.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerParameters.AllowList.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerParameters.AllowListID.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerParameters.AllowListEnabled.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerParameters.AllowListEnabled.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerParameters.SetEnabled.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerParameters.SetEnabled.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerParameters.Unpair.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerParameters.Unpair.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ReplicatorDevice.RelationshipState.MigratingCodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s18ReplicatorServices34ReplicatorControlXPCServerResponseO12GetPushTokenV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2453FE050 + 4 * byte_245446464[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_2453FE070 + 4 * byte_245446469[v4]))();
}

_BYTE *sub_2453FE050(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_2453FE070(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2453FE078(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2453FE080(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_2453FE088(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_2453FE090(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorControlXPCServerParameters.Pair.CodingKeys()
{
  return &type metadata for ReplicatorControlXPCServerParameters.Pair.CodingKeys;
}

unint64_t sub_2453FE0B0()
{
  unint64_t result;

  result = qword_257464C00;
  if (!qword_257464C00)
  {
    result = MEMORY[0x249534380](&unk_24544705C, &type metadata for ReplicatorControlXPCServerParameters.Pair.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464C00);
  }
  return result;
}

unint64_t sub_2453FE0F8()
{
  unint64_t result;

  result = qword_257464C08;
  if (!qword_257464C08)
  {
    result = MEMORY[0x249534380](&unk_245447114, &type metadata for ReplicatorControlXPCServerParameters.Unpair.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464C08);
  }
  return result;
}

unint64_t sub_2453FE140()
{
  unint64_t result;

  result = qword_257464C10;
  if (!qword_257464C10)
  {
    result = MEMORY[0x249534380](&unk_2454471CC, &type metadata for ReplicatorControlXPCServerParameters.SetEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464C10);
  }
  return result;
}

unint64_t sub_2453FE188()
{
  unint64_t result;

  result = qword_257464C18;
  if (!qword_257464C18)
  {
    result = MEMORY[0x249534380](&unk_245447284, &type metadata for ReplicatorControlXPCServerParameters.AllowListEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464C18);
  }
  return result;
}

unint64_t sub_2453FE1D0()
{
  unint64_t result;

  result = qword_257464C20;
  if (!qword_257464C20)
  {
    result = MEMORY[0x249534380](&unk_24544733C, &type metadata for ReplicatorControlXPCServerParameters.AllowListID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464C20);
  }
  return result;
}

unint64_t sub_2453FE218()
{
  unint64_t result;

  result = qword_257464C28;
  if (!qword_257464C28)
  {
    result = MEMORY[0x249534380](&unk_2454473F4, &type metadata for ReplicatorControlXPCServerParameters.AllowList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464C28);
  }
  return result;
}

unint64_t sub_2453FE260()
{
  unint64_t result;

  result = qword_257464C30;
  if (!qword_257464C30)
  {
    result = MEMORY[0x249534380](&unk_2454474AC, &type metadata for ReplicatorControlXPCServerParameters.GetPushToken.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464C30);
  }
  return result;
}

unint64_t sub_2453FE2A8()
{
  unint64_t result;

  result = qword_257464C38;
  if (!qword_257464C38)
  {
    result = MEMORY[0x249534380](&unk_245447564, &type metadata for ReplicatorControlXPCServerResponse.GetEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464C38);
  }
  return result;
}

unint64_t sub_2453FE2F0()
{
  unint64_t result;

  result = qword_257464C40;
  if (!qword_257464C40)
  {
    result = MEMORY[0x249534380](&unk_24544761C, &type metadata for ReplicatorControlXPCServerResponse.GetDevices.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464C40);
  }
  return result;
}

unint64_t sub_2453FE338()
{
  unint64_t result;

  result = qword_257464C48;
  if (!qword_257464C48)
  {
    result = MEMORY[0x249534380](&unk_2454476D4, &type metadata for ReplicatorControlXPCServerResponse.GetAllowListEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464C48);
  }
  return result;
}

unint64_t sub_2453FE380()
{
  unint64_t result;

  result = qword_257464C50;
  if (!qword_257464C50)
  {
    result = MEMORY[0x249534380](&unk_24544778C, &type metadata for ReplicatorControlXPCServerResponse.GetAllowList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464C50);
  }
  return result;
}

unint64_t sub_2453FE3C8()
{
  unint64_t result;

  result = qword_257464C58;
  if (!qword_257464C58)
  {
    result = MEMORY[0x249534380](&unk_245447844, &type metadata for ReplicatorControlXPCServerResponse.GetPushToken.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464C58);
  }
  return result;
}

unint64_t sub_2453FE410()
{
  unint64_t result;

  result = qword_257464C60;
  if (!qword_257464C60)
  {
    result = MEMORY[0x249534380](&unk_2454477B4, &type metadata for ReplicatorControlXPCServerResponse.GetPushToken.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464C60);
  }
  return result;
}

unint64_t sub_2453FE458()
{
  unint64_t result;

  result = qword_257464C68;
  if (!qword_257464C68)
  {
    result = MEMORY[0x249534380](&unk_2454477DC, &type metadata for ReplicatorControlXPCServerResponse.GetPushToken.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464C68);
  }
  return result;
}

unint64_t sub_2453FE4A0()
{
  unint64_t result;

  result = qword_257464C70;
  if (!qword_257464C70)
  {
    result = MEMORY[0x249534380](&unk_2454476FC, &type metadata for ReplicatorControlXPCServerResponse.GetAllowList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464C70);
  }
  return result;
}

unint64_t sub_2453FE4E8()
{
  unint64_t result;

  result = qword_257464C78;
  if (!qword_257464C78)
  {
    result = MEMORY[0x249534380](&unk_245447724, &type metadata for ReplicatorControlXPCServerResponse.GetAllowList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464C78);
  }
  return result;
}

unint64_t sub_2453FE530()
{
  unint64_t result;

  result = qword_257464C80;
  if (!qword_257464C80)
  {
    result = MEMORY[0x249534380](&unk_245447644, &type metadata for ReplicatorControlXPCServerResponse.GetAllowListEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464C80);
  }
  return result;
}

unint64_t sub_2453FE578()
{
  unint64_t result;

  result = qword_257464C88;
  if (!qword_257464C88)
  {
    result = MEMORY[0x249534380](&unk_24544766C, &type metadata for ReplicatorControlXPCServerResponse.GetAllowListEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464C88);
  }
  return result;
}

unint64_t sub_2453FE5C0()
{
  unint64_t result;

  result = qword_25440DFC0;
  if (!qword_25440DFC0)
  {
    result = MEMORY[0x249534380](&unk_24544758C, &type metadata for ReplicatorControlXPCServerResponse.GetDevices.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440DFC0);
  }
  return result;
}

unint64_t sub_2453FE608()
{
  unint64_t result;

  result = qword_25440DFB8;
  if (!qword_25440DFB8)
  {
    result = MEMORY[0x249534380](&unk_2454475B4, &type metadata for ReplicatorControlXPCServerResponse.GetDevices.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440DFB8);
  }
  return result;
}

unint64_t sub_2453FE650()
{
  unint64_t result;

  result = qword_25440DFE8;
  if (!qword_25440DFE8)
  {
    result = MEMORY[0x249534380](&unk_2454474D4, &type metadata for ReplicatorControlXPCServerResponse.GetEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440DFE8);
  }
  return result;
}

unint64_t sub_2453FE698()
{
  unint64_t result;

  result = qword_25440DFE0;
  if (!qword_25440DFE0)
  {
    result = MEMORY[0x249534380](&unk_2454474FC, &type metadata for ReplicatorControlXPCServerResponse.GetEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440DFE0);
  }
  return result;
}

unint64_t sub_2453FE6E0()
{
  unint64_t result;

  result = qword_257464C90;
  if (!qword_257464C90)
  {
    result = MEMORY[0x249534380](&unk_24544741C, &type metadata for ReplicatorControlXPCServerParameters.GetPushToken.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464C90);
  }
  return result;
}

unint64_t sub_2453FE728()
{
  unint64_t result;

  result = qword_257464C98;
  if (!qword_257464C98)
  {
    result = MEMORY[0x249534380](&unk_245447444, &type metadata for ReplicatorControlXPCServerParameters.GetPushToken.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464C98);
  }
  return result;
}

unint64_t sub_2453FE770()
{
  unint64_t result;

  result = qword_257464CA0;
  if (!qword_257464CA0)
  {
    result = MEMORY[0x249534380](&unk_245447364, &type metadata for ReplicatorControlXPCServerParameters.AllowList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464CA0);
  }
  return result;
}

unint64_t sub_2453FE7B8()
{
  unint64_t result;

  result = qword_257464CA8;
  if (!qword_257464CA8)
  {
    result = MEMORY[0x249534380](&unk_24544738C, &type metadata for ReplicatorControlXPCServerParameters.AllowList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464CA8);
  }
  return result;
}

unint64_t sub_2453FE800()
{
  unint64_t result;

  result = qword_257464CB0;
  if (!qword_257464CB0)
  {
    result = MEMORY[0x249534380](&unk_2454472AC, &type metadata for ReplicatorControlXPCServerParameters.AllowListID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464CB0);
  }
  return result;
}

unint64_t sub_2453FE848()
{
  unint64_t result;

  result = qword_257464CB8;
  if (!qword_257464CB8)
  {
    result = MEMORY[0x249534380](&unk_2454472D4, &type metadata for ReplicatorControlXPCServerParameters.AllowListID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464CB8);
  }
  return result;
}

unint64_t sub_2453FE890()
{
  unint64_t result;

  result = qword_257464CC0;
  if (!qword_257464CC0)
  {
    result = MEMORY[0x249534380](&unk_2454471F4, &type metadata for ReplicatorControlXPCServerParameters.AllowListEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464CC0);
  }
  return result;
}

unint64_t sub_2453FE8D8()
{
  unint64_t result;

  result = qword_257464CC8;
  if (!qword_257464CC8)
  {
    result = MEMORY[0x249534380](&unk_24544721C, &type metadata for ReplicatorControlXPCServerParameters.AllowListEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464CC8);
  }
  return result;
}

unint64_t sub_2453FE920()
{
  unint64_t result;

  result = qword_25440E008;
  if (!qword_25440E008)
  {
    result = MEMORY[0x249534380](&unk_24544713C, &type metadata for ReplicatorControlXPCServerParameters.SetEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E008);
  }
  return result;
}

unint64_t sub_2453FE968()
{
  unint64_t result;

  result = qword_25440E000;
  if (!qword_25440E000)
  {
    result = MEMORY[0x249534380](&unk_245447164, &type metadata for ReplicatorControlXPCServerParameters.SetEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E000);
  }
  return result;
}

unint64_t sub_2453FE9B0()
{
  unint64_t result;

  result = qword_257464CD0;
  if (!qword_257464CD0)
  {
    result = MEMORY[0x249534380](&unk_245447084, &type metadata for ReplicatorControlXPCServerParameters.Unpair.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464CD0);
  }
  return result;
}

unint64_t sub_2453FE9F8()
{
  unint64_t result;

  result = qword_257464CD8;
  if (!qword_257464CD8)
  {
    result = MEMORY[0x249534380](&unk_2454470AC, &type metadata for ReplicatorControlXPCServerParameters.Unpair.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464CD8);
  }
  return result;
}

unint64_t sub_2453FEA40()
{
  unint64_t result;

  result = qword_257464CE0;
  if (!qword_257464CE0)
  {
    result = MEMORY[0x249534380](&unk_245446FCC, &type metadata for ReplicatorControlXPCServerParameters.Pair.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464CE0);
  }
  return result;
}

unint64_t sub_2453FEA88()
{
  unint64_t result;

  result = qword_257464CE8;
  if (!qword_257464CE8)
  {
    result = MEMORY[0x249534380](&unk_245446FF4, &type metadata for ReplicatorControlXPCServerParameters.Pair.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464CE8);
  }
  return result;
}

uint64_t sub_2453FEACC(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000010 && a2 == 0x800000024544E8F0)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_245444390();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_2453FEB50()
{
  unint64_t result;

  result = qword_257464D08;
  if (!qword_257464D08)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorControlServiceError, &type metadata for ReplicatorControlServiceError);
    atomic_store(result, (unint64_t *)&qword_257464D08);
  }
  return result;
}

unint64_t static Notifications.daemonStartup.getter()
{
  return 0xD000000000000023;
}

unint64_t static Notifications.devicesChanged.getter()
{
  return 0xD000000000000024;
}

unint64_t static Notifications.enabledStateChanged.getter()
{
  return 0xD000000000000029;
}

ValueMetadata *type metadata accessor for Notifications()
{
  return &type metadata for Notifications;
}

uint64_t dispatch thunk of ReplicatorClientEnabling.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ReplicatorClientEnabling.setEnabled(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

_BYTE *ReplicationServiceError.init(code:underlyingError:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_BYTE *)a3 = *result;
  *(_QWORD *)(a3 + 8) = a2;
  return result;
}

id ReplicationXPCServerParametersExtendedAttribute.__allocating_init(name:data:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  objc_class *v4;
  objc_class *v5;
  char *v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  objc_super v18;

  v5 = v4;
  v10 = (char *)objc_allocWithZone(v5);
  v11 = &v10[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_name];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  v12 = (uint64_t *)&v10[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data];
  *(_OWORD *)&v10[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data] = xmmword_245445F70;
  swift_beginAccess();
  *(_QWORD *)v11 = a1;
  *((_QWORD *)v11 + 1) = a2;
  v13 = v10;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v14 = *v12;
  v15 = v12[1];
  *v12 = a3;
  v12[1] = a4;
  sub_2453CFFAC(a3, a4);
  sub_2453BDCE4(v14, v15);

  v18.receiver = v13;
  v18.super_class = v5;
  v16 = objc_msgSendSuper2(&v18, sel_init);
  sub_2453BDCF8(a3, a4);
  return v16;
}

id ReplicationXPCServerParametersRecordValue.__allocating_init(version:data:fileHandle:extendedAttributes:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5)
{
  objc_class *v5;
  id v11;
  id v12;

  v11 = objc_allocWithZone(v5);
  v12 = sub_2454074A8(a1, a2, a3, a4, a5);

  sub_2453BDCE4(a2, a3);
  return v12;
}

id ReplicationXPCServerParametersRecord.__allocating_init(id:version:values:expiration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  objc_class *v5;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  objc_super v19;

  v5 = v4;
  v10 = (char *)objc_allocWithZone(v5);
  v11 = (uint64_t)&v10[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_expiration];
  v12 = sub_245443AC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  sub_2453BA364(a1, (uint64_t)&v10[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id], type metadata accessor for ReplicatorRecord.ID);
  v13 = &v10[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_version];
  v14 = sub_245443B14();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, a2, v14);
  *(_QWORD *)&v10[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_values] = a3;
  swift_beginAccess();
  v16 = v10;
  sub_2453F7250(a4, v11);
  swift_endAccess();

  v19.receiver = v16;
  v19.super_class = v5;
  v17 = objc_msgSendSuper2(&v19, sel_init);
  sub_2453D055C(a4, (uint64_t *)&unk_25440E420);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a2, v14);
  sub_2453BA3A8(a1, type metadata accessor for ReplicatorRecord.ID);
  return v17;
}

id ReplicationXPCServerParametersAddRecords.__allocating_init(parameters:records:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  char v6;
  char *v7;
  objc_super v9;

  v5 = (char *)objc_allocWithZone(v2);
  v6 = *(_BYTE *)(a1 + 8);
  v7 = &v5[OBJC_IVAR____TtC18ReplicatorServices40ReplicationXPCServerParametersAddRecords_parameters];
  *(_QWORD *)v7 = *(_QWORD *)a1;
  v7[8] = v6;
  *(_QWORD *)&v5[OBJC_IVAR____TtC18ReplicatorServices40ReplicationXPCServerParametersAddRecords_records] = a2;
  v9.receiver = v5;
  v9.super_class = v2;
  return objc_msgSendSuper2(&v9, sel_init);
}

void static ReplicationServiceDefinition.domain.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000014;
  a1[1] = 0x800000024544DCB0;
  a1[2] = 0xD00000000000001CLL;
  a1[3] = 0x800000024544DCD0;
}

unint64_t static ReplicationServiceDefinition.serviceName.getter()
{
  return 0xD000000000000020;
}

unint64_t sub_2453FF008()
{
  return 0xD000000000000020;
}

ReplicatorServices::ReplicationServiceError::Code_optional __swiftcall ReplicationServiceError.Code.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 5;
  if ((unint64_t)rawValue < 5)
    v2 = rawValue;
  *v1 = v2;
  return (ReplicatorServices::ReplicationServiceError::Code_optional)rawValue;
}

uint64_t ReplicationServiceError.Code.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

ReplicatorServices::ReplicationServiceError::Code_optional sub_2453FF040(Swift::Int *a1)
{
  return ReplicationServiceError.Code.init(rawValue:)(*a1);
}

unint64_t static ReplicationServiceError.errorDomain.getter()
{
  return 0xD000000000000027;
}

uint64_t ReplicationServiceError.errorCode.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t ReplicationServiceError.errorUserInfo.getter()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t *boxed_opaque_existential_2;
  uint64_t v5;

  if (!*(_QWORD *)(v0 + 8))
    return sub_245434D9C(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257465690);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245445910;
  *(_QWORD *)(inited + 32) = sub_245443D9C();
  *(_QWORD *)(inited + 40) = v2;
  swift_getErrorValue();
  *(_QWORD *)(inited + 72) = v5;
  boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2((uint64_t *)(inited + 48));
  (*(void (**)(uint64_t *))(*(_QWORD *)(v5 - 8) + 16))(boxed_opaque_existential_2);
  return sub_245434D9C(inited);
}

unint64_t sub_2453FF130()
{
  return 0xD000000000000027;
}

uint64_t sub_2453FF14C()
{
  sub_24540D728();
  return sub_2454443C0();
}

uint64_t sub_2453FF174()
{
  sub_24540D728();
  return sub_2454443B4();
}

uint64_t static ReplicationXPCServerParametersRecord.supportsBSXPCSecureCoding()()
{
  return 1;
}

Swift::Bool __swiftcall ReplicationXPCServerParametersRecord.supportsBSXPCSecureCoding()()
{
  return 1;
}

uint64_t ReplicationXPCServerParametersRecord.id.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_2453FF1D8(&OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id, (uint64_t)type metadata accessor for ReplicatorRecord.ID, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2453BA364, a1);
}

uint64_t sub_2453FF1D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;

  v8 = v4 + *a1;
  swift_beginAccess();
  return a3(v8, a4, a2);
}

uint64_t ReplicationXPCServerParametersRecord.id.setter(uint64_t a1)
{
  return sub_2453FF4C0(a1, &OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id, (uint64_t)type metadata accessor for ReplicatorRecord.ID, (void (*)(uint64_t, uint64_t, uint64_t))sub_2453D0034);
}

uint64_t (*ReplicationXPCServerParametersRecord.id.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t ReplicationXPCServerParametersRecord.version.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_version;
  swift_beginAccess();
  v4 = sub_245443B14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReplicationXPCServerParametersRecord.version.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_version;
  swift_beginAccess();
  v4 = sub_245443B14();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*ReplicationXPCServerParametersRecord.version.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t ReplicationXPCServerParametersRecord.values.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t ReplicationXPCServerParametersRecord.values.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_values);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ReplicationXPCServerParametersRecord.values.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t ReplicationXPCServerParametersRecord.expiration.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_2453FF1D8(&OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_expiration, (uint64_t)&unk_25440E420, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2453D02E0, a1);
}

uint64_t ReplicationXPCServerParametersRecord.expiration.setter(uint64_t a1)
{
  return sub_2453FF4C0(a1, &OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_expiration, (uint64_t)&unk_25440E420, (void (*)(uint64_t, uint64_t, uint64_t))sub_2453F7820);
}

uint64_t sub_2453FF4C0(uint64_t a1, _QWORD *a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v8;

  v8 = v4 + *a2;
  swift_beginAccess();
  a4(a1, v8, a3);
  return swift_endAccess();
}

uint64_t (*ReplicationXPCServerParametersRecord.expiration.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

id ReplicationXPCServerParametersRecord.init(id:version:values:expiration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  objc_class *ObjectType;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  objc_super v19;

  v5 = v4;
  ObjectType = (objc_class *)swift_getObjectType();
  v11 = (uint64_t)&v5[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_expiration];
  v12 = sub_245443AC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  sub_2453BA364(a1, (uint64_t)&v5[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id], type metadata accessor for ReplicatorRecord.ID);
  v13 = &v5[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_version];
  v14 = sub_245443B14();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, a2, v14);
  *(_QWORD *)&v5[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_values] = a3;
  swift_beginAccess();
  v16 = v5;
  sub_2453F7250(a4, v11);
  swift_endAccess();

  v19.receiver = v16;
  v19.super_class = ObjectType;
  v17 = objc_msgSendSuper2(&v19, sel_init);
  sub_2453D055C(a4, (uint64_t *)&unk_25440E420);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a2, v14);
  sub_2453BA3A8(a1, type metadata accessor for ReplicatorRecord.ID);
  return v17;
}

uint64_t ReplicationXPCServerParametersRecord.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[10];
  uint64_t v17;
  unint64_t v18;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E420);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_245443B14();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[7] = 0;
  v16[8] = 0xE000000000000000;
  sub_24544412C();
  swift_bridgeObjectRelease();
  v17 = 540697705;
  v18 = 0xE400000000000000;
  v12 = v0 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id;
  swift_beginAccess();
  sub_2453BA364(v12, (uint64_t)v11, type metadata accessor for ReplicatorRecord.ID);
  ReplicatorRecord.ID.description.getter();
  sub_245443E14();
  swift_bridgeObjectRelease();
  sub_2453BA3A8((uint64_t)v11, type metadata accessor for ReplicatorRecord.ID);
  sub_245443E14();
  v13 = v1 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_version;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v13, v5);
  sub_2453B8BF4((unint64_t *)&qword_257464D40, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  sub_245444384();
  sub_245443E14();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_245443E14();
  v14 = v1 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_expiration;
  swift_beginAccess();
  sub_2453D02E0(v14, (uint64_t)v4, (uint64_t *)&unk_25440E420);
  sub_245443DCC();
  sub_245443E14();
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t ReplicationXPCServerParametersRecord.size.getter()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t i;
  char *v5;
  void *v6;
  char *v7;
  unint64_t v8;

  v1 = (unint64_t *)(v0 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_values);
  swift_beginAccess();
  v2 = *v1;
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v3 = sub_245444204();
    if (!v3)
      goto LABEL_12;
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v3)
      goto LABEL_12;
  }
  if (v3 < 1)
  {
    __break(1u);
    JUMPOUT(0x2453FFBA8);
  }
  for (i = 0; i != v3; ++i)
  {
    if ((v2 & 0xC000000000000001) != 0)
      v5 = (char *)MEMORY[0x249533B58](i, v2);
    else
      v5 = (char *)*(id *)(v2 + 8 * i + 32);
    v6 = v5;
    v7 = &v5[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_data];
    swift_beginAccess();
    v8 = *((_QWORD *)v7 + 1);
    if (v8 >> 60 != 15)
      __asm { BR              X9 }

  }
LABEL_12:
  swift_bridgeObjectRelease_n();
  return 0;
}

uint64_t ReplicationXPCServerParametersRecord.encode(withBSXPCCoder:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E420);
  MEMORY[0x24BDAC7A8](v3);
  v44 = (uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_245443AC0();
  v45 = *(_QWORD *)(v5 - 8);
  v46 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v42 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_245443B14();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = v1;
  v14 = v1 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id;
  swift_beginAccess();
  v15 = type metadata accessor for ReplicatorRecord.ID(0);
  sub_2453BA364(v14 + *(int *)(v15 + 28), (uint64_t)v13, type metadata accessor for ReplicatorRecord.ID.Ownership);
  v16 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
    sub_245443AD8();
    v16 = v17;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  swift_bridgeObjectRetain();
  v18 = (void *)sub_245443D78();
  swift_bridgeObjectRelease();
  v19 = (void *)sub_245443D78();
  objc_msgSend(a1, sel_encodeObject_forKey_, v18, v19);

  swift_bridgeObjectRetain();
  v20 = (void *)sub_245443D78();
  swift_bridgeObjectRelease();
  v21 = (void *)sub_245443D78();
  objc_msgSend(a1, sel_encodeObject_forKey_, v20, v21);

  swift_bridgeObjectRetain();
  v22 = (void *)sub_245443D78();
  swift_bridgeObjectRelease();
  v23 = (void *)sub_245443D78();
  objc_msgSend(a1, sel_encodeObject_forKey_, v22, v23);

  if (v16)
  {
    v24 = (void *)sub_245443D78();
    swift_bridgeObjectRelease();
    v25 = (void *)sub_245443D78();
    objc_msgSend(a1, (SEL)&stru_251659148, v24, v25);

  }
  v26 = v43;
  v27 = v43 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_version;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v27, v7);
  sub_245443AD8();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v28 = (void *)sub_245443D78();
  swift_bridgeObjectRelease();
  v29 = (void *)sub_245443D78();
  objc_msgSend(a1, (SEL)&stru_251659148, v28, v29);

  swift_beginAccess();
  type metadata accessor for ReplicationXPCServerParametersRecordValue();
  swift_bridgeObjectRetain();
  v30 = (void *)sub_245443E8C();
  swift_bridgeObjectRelease();
  v31 = (void *)sub_245443D78();
  objc_msgSend(a1, sel_encodeCollection_forKey_, v30, v31);

  v32 = v26 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_expiration;
  swift_beginAccess();
  v33 = v32;
  v34 = v44;
  sub_2453D02E0(v33, v44, (uint64_t *)&unk_25440E420);
  v36 = v45;
  v35 = v46;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v34, 1, v46) == 1)
    return sub_2453D055C(v34, (uint64_t *)&unk_25440E420);
  v38 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v42, v34, v35);
  v39 = (void *)sub_245443A84();
  v40 = (void *)sub_245443D78();
  objc_msgSend(a1, (SEL)&stru_251659148, v39, v40);

  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v38, v35);
}

id ReplicationXPCServerParametersRecord.__allocating_init(bsxpcCoder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ReplicationXPCServerParametersRecord.init(bsxpcCoder:)(a1);
}

id ReplicationXPCServerParametersRecord.init(bsxpcCoder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjCClassFromMetadata;
  uint64_t v27;
  char *v28;
  void *v29;
  id v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(char *, uint64_t, uint64_t);
  unsigned int v49;
  id v50;
  void (*v52)(char *, char *, uint64_t);
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  id v62;
  uint64_t v63;
  void *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  objc_class *v79;
  void (*v80)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  unsigned int (*v82)(char *, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  void (*v93)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t ObjectType;
  void *v103;
  objc_super v104;
  _OWORD v105[2];
  _QWORD v106[4];

  ObjectType = swift_getObjectType();
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E420);
  MEMORY[0x24BDAC7A8](v3);
  v94 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x24BDAC7A8](v96);
  v95 = (uint64_t *)((char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v97 = (uint64_t)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v98 = (char *)&v81 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v81 - v14;
  v16 = sub_245443B14();
  v17 = *(_QWORD *)(v16 - 8);
  v100 = v16;
  v101 = v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v92 = (char *)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v81 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v99 = (char *)&v81 - v23;
  v24 = (uint64_t)v1 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_expiration;
  v25 = sub_245443AC0();
  v93 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v93(v24, 1, 1, v25);
  sub_24540D76C(0, &qword_25440DEA8);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  type metadata accessor for ReplicationXPCServerParametersRecordValue();
  v27 = swift_getObjCClassFromMetadata();
  v28 = v1;
  v29 = (void *)sub_245443D78();
  v30 = objc_msgSend(a1, sel_decodeCollectionOfClass_containingClass_forKey_, ObjCClassFromMetadata, v27, v29);

  if (!v30)
    goto LABEL_10;
  v106[0] = v30;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E060);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E058);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_10;
  v89 = v25;
  v31 = *(_QWORD *)&v105[0];
  v32 = (void *)sub_245443D78();
  v33 = objc_msgSend(a1, sel_decodeStringForKey_, v32);

  if (!v33)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    swift_unknownObjectRelease();
    goto LABEL_11;
  }
  v90 = v31;
  v91 = v24;
  v87 = sub_245443D9C();
  v35 = v34;

  v36 = (void *)sub_245443D78();
  v37 = objc_msgSend(a1, sel_decodeStringForKey_, v36);

  if (!v37)
    goto LABEL_16;
  v88 = v35;
  v86 = sub_245443D9C();
  v39 = v38;

  v40 = (void *)sub_245443D78();
  v41 = objc_msgSend(a1, sel_decodeStringForKey_, v40);

  if (!v41)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_17:
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    v24 = v91;
    goto LABEL_11;
  }
  v83 = sub_245443D9C();
  v43 = v42;

  v44 = (void *)sub_245443D78();
  v45 = objc_msgSend(a1, sel_decodeStringForKey_, v44);

  if (!v45)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  v84 = v43;
  v85 = v39;
  sub_245443D9C();

  sub_245443ACC();
  swift_bridgeObjectRelease();
  v47 = v100;
  v46 = v101;
  v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48);
  v49 = v48(v15, 1, v100);
  v24 = v91;
  if (v49 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_2453D055C((uint64_t)v15, (uint64_t *)&unk_25440E8F0);
LABEL_11:
    sub_2453D055C(v24, (uint64_t *)&unk_25440E420);

    swift_deallocPartialClassInstance();
    return 0;
  }
  v82 = v48;
  v52 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
  v52(v99, v15, v47);
  v53 = (void *)sub_245443D78();
  v54 = objc_msgSend(a1, sel_decodeStringForKey_, v53);

  if (v54)
  {
    sub_245443D9C();
    v56 = v55;

    if (v56)
    {
      sub_245443ACC();
      swift_bridgeObjectRelease();
      v57 = v100;
      if (v82(v13, 1, v100) == 1)
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v101 + 8))(v99, v57);
        sub_2453D055C((uint64_t)v13, (uint64_t *)&unk_25440E8F0);
        goto LABEL_11;
      }
      v52(v22, v13, v57);
      v52(v98, v22, v57);
      v58 = 0;
    }
    else
    {
      v58 = 1;
      v57 = v100;
    }
  }
  else
  {
    v57 = v47;
    v58 = 1;
  }
  v59 = v89;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v101 + 56))(v98, v58, 1, v57);
  sub_24540D76C(0, &qword_25440E080);
  v60 = swift_getObjCClassFromMetadata();
  v61 = (void *)sub_245443D78();
  v62 = objc_msgSend(a1, sel_decodeObjectOfClass_forKey_, v60, v61);

  if (v62)
  {
    sub_24544409C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v105, 0, sizeof(v105));
  }
  v63 = v96;
  sub_2453D0428((uint64_t)v105, (uint64_t)v106, &qword_25440E7F8);
  if (!v106[3])
  {
    sub_2453D055C((uint64_t)v106, &qword_25440E7F8);
    goto LABEL_32;
  }
  if (!swift_dynamicCast())
  {
LABEL_32:
    v64 = 0;
    goto LABEL_33;
  }
  v64 = v103;
LABEL_33:
  v65 = v95;
  v66 = v97;
  sub_2453BA364((uint64_t)v98, v97, type metadata accessor for ReplicatorRecord.ID.Ownership);
  v67 = v87;
  v68 = v88;
  *v65 = v87;
  v65[1] = v68;
  v69 = v85;
  v65[2] = v86;
  v65[3] = v69;
  v70 = v84;
  v65[4] = v83;
  v65[5] = v70;
  v71 = v66;
  v72 = v67;
  v73 = v68;
  sub_2453BA364(v71, (uint64_t)v65 + *(int *)(v63 + 28), type metadata accessor for ReplicatorRecord.ID.Ownership);
  swift_bridgeObjectRetain();
  if (sub_245443DFC() >= 51)
  {
    v106[0] = v72;
    v106[1] = v73;
    v74 = v92;
    sub_245443B74();
    v72 = sub_245443AD8();
    v73 = v75;
    (*(void (**)(char *, uint64_t))(v101 + 8))(v74, v57);
    swift_bridgeObjectRelease();
    v65 = v95;
    v63 = v96;
  }
  sub_2453BA3A8(v97, type metadata accessor for ReplicatorRecord.ID.Ownership);
  v76 = (uint64_t *)((char *)v65 + *(int *)(v63 + 32));
  *v76 = v72;
  v76[1] = v73;
  sub_2453D062C((uint64_t)v65, (uint64_t)&v28[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id], type metadata accessor for ReplicatorRecord.ID);
  *(_QWORD *)&v28[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_values] = v90;
  (*(void (**)(char *, char *, uint64_t))(v101 + 16))(&v28[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_version], v99, v57);
  if (v64)
  {
    v77 = (uint64_t)v94;
    sub_245443AA8();

    v78 = 0;
    v79 = (objc_class *)ObjectType;
    v80 = v93;
  }
  else
  {
    v78 = 1;
    v79 = (objc_class *)ObjectType;
    v80 = v93;
    v77 = (uint64_t)v94;
  }
  sub_2453BA3A8((uint64_t)v98, type metadata accessor for ReplicatorRecord.ID.Ownership);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v99, v57);
  v80(v77, v78, 1, v59);
  swift_beginAccess();
  sub_2453F7820(v77, v24, (uint64_t *)&unk_25440E420);
  swift_endAccess();

  v104.receiver = v28;
  v104.super_class = v79;
  v50 = objc_msgSendSuper2(&v104, sel_init);
  swift_unknownObjectRelease();
  return v50;
}

id ReplicationXPCServerParametersRecord.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ReplicationXPCServerParametersRecord.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_245400D18@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = *v1 + OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id;
  swift_beginAccess();
  return sub_2453BA364(v3, a1, type metadata accessor for ReplicatorRecord.ID);
}

uint64_t static ReplicationXPCServerParametersExtendedAttribute.supportsBSXPCSecureCoding()()
{
  return 1;
}

Swift::Bool __swiftcall ReplicationXPCServerParametersExtendedAttribute.supportsBSXPCSecureCoding()()
{
  return 1;
}

uint64_t ReplicationXPCServerParametersExtendedAttribute.name.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_name);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ReplicationXPCServerParametersExtendedAttribute.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_name);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*ReplicationXPCServerParametersExtendedAttribute.name.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t ReplicationXPCServerParametersExtendedAttribute.data.getter()
{
  return sub_245401324(&OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data);
}

uint64_t ReplicationXPCServerParametersExtendedAttribute.data.setter(uint64_t a1, uint64_t a2)
{
  return sub_245401384(a1, a2, &OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data);
}

uint64_t (*ReplicationXPCServerParametersExtendedAttribute.data.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id ReplicationXPCServerParametersExtendedAttribute.init(name:data:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v4;
  char *v5;
  objc_class *ObjectType;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  objc_super v18;

  v5 = v4;
  ObjectType = (objc_class *)swift_getObjectType();
  v11 = &v5[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_name];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  v12 = (uint64_t *)&v5[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data];
  *(_OWORD *)&v5[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data] = xmmword_245445F70;
  swift_beginAccess();
  *(_QWORD *)v11 = a1;
  *((_QWORD *)v11 + 1) = a2;
  v13 = v5;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v14 = *v12;
  v15 = v12[1];
  *v12 = a3;
  v12[1] = a4;
  sub_2453CFFAC(a3, a4);
  sub_2453BDCE4(v14, v15);

  v18.receiver = v13;
  v18.super_class = ObjectType;
  v16 = objc_msgSendSuper2(&v18, sel_init);
  sub_2453BDCF8(a3, a4);
  return v16;
}

uint64_t ReplicationXPCServerParametersExtendedAttribute.encode(withBSXPCCoder:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t *v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v3 = v1 + OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_name;
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 8))
  {
    swift_bridgeObjectRetain();
    v4 = (void *)sub_245443D78();
    swift_bridgeObjectRelease();
    v5 = (void *)sub_245443D78();
    objc_msgSend(a1, sel_encodeObject_forKey_, v4, v5);

  }
  v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data);
  result = swift_beginAccess();
  v8 = v6[1];
  if (v8 >> 60 != 15)
  {
    v9 = *v6;
    sub_2453CFFAC(v9, v8);
    v10 = (void *)sub_245443A6C();
    v11 = (void *)sub_245443D78();
    objc_msgSend(a1, sel_encodeObject_forKey_, v10, v11);

    return sub_2453BDCE4(v9, v8);
  }
  return result;
}

uint64_t ReplicationXPCServerParametersExtendedAttribute.__allocating_init(bsxpcCoder:)(uint64_t a1)
{
  return sub_245401864(a1, (uint64_t (*)(uint64_t))sub_245407698);
}

id ReplicationXPCServerParametersExtendedAttribute.init(bsxpcCoder:)(void *a1)
{
  id v1;

  v1 = sub_245407698(a1);
  swift_unknownObjectRelease();
  return v1;
}

void ReplicationXPCServerParametersExtendedAttribute.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t static ReplicationXPCServerParametersRecordValue.supportsBSXPCSecureCoding()()
{
  return 1;
}

Swift::Bool __swiftcall ReplicationXPCServerParametersRecordValue.supportsBSXPCSecureCoding()()
{
  return 1;
}

uint64_t ReplicationXPCServerParametersRecordValue.version.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_version;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t ReplicationXPCServerParametersRecordValue.version.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_version);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*ReplicationXPCServerParametersRecordValue.version.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t ReplicationXPCServerParametersRecordValue.data.getter()
{
  return sub_245401324(&OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_data);
}

uint64_t sub_245401324(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *a1;
  swift_beginAccess();
  v3 = *(_QWORD *)v2;
  sub_2453F7080(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  return v3;
}

uint64_t ReplicationXPCServerParametersRecordValue.data.setter(uint64_t a1, uint64_t a2)
{
  return sub_245401384(a1, a2, &OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_data);
}

uint64_t sub_245401384(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;

  v6 = (uint64_t *)(v3 + *a3);
  swift_beginAccess();
  v7 = *v6;
  v8 = v6[1];
  *v6 = a1;
  v6[1] = a2;
  return sub_2453BDCE4(v7, v8);
}

uint64_t (*ReplicationXPCServerParametersRecordValue.data.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

void *ReplicationXPCServerParametersRecordValue.fileHandle.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_fileHandle);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void ReplicationXPCServerParametersRecordValue.fileHandle.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_fileHandle);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*ReplicationXPCServerParametersRecordValue.fileHandle.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t ReplicationXPCServerParametersRecordValue.extendedAttributes.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t ReplicationXPCServerParametersRecordValue.extendedAttributes.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_extendedAttributes);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ReplicationXPCServerParametersRecordValue.extendedAttributes.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id ReplicationXPCServerParametersRecordValue.init(version:data:fileHandle:extendedAttributes:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5)
{
  id v8;

  v8 = sub_2454074A8(a1, a2, a3, a4, a5);

  sub_2453BDCE4(a2, a3);
  return v8;
}

void ReplicationXPCServerParametersRecordValue.encode(withBSXPCCoder:)(void *a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id *v11;
  id v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  void *v16;

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_version);
  swift_beginAccess();
  v4 = *v3;
  v5 = (void *)sub_245443D78();
  objc_msgSend(a1, sel_encodeUInt64_forKey_, v4, v5);

  v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_data);
  swift_beginAccess();
  v7 = v6[1];
  if (v7 >> 60 != 15)
  {
    v8 = *v6;
    sub_2453CFFAC(v8, v7);
    v9 = (void *)sub_245443A6C();
    v10 = (void *)sub_245443D78();
    objc_msgSend(a1, sel_encodeObject_forKey_, v9, v10);

    sub_2453BDCE4(v8, v7);
  }
  v11 = (id *)(v1 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_fileHandle);
  swift_beginAccess();
  if (*v11)
  {
    v12 = *v11;
    v13 = (void *)sub_245443D78();
    objc_msgSend(a1, sel_encodeObject_forKey_, v12, v13);

  }
  v14 = (_QWORD *)(v1
                 + OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_extendedAttributes);
  swift_beginAccess();
  if (*v14)
  {
    type metadata accessor for ReplicationXPCServerParametersExtendedAttribute();
    swift_bridgeObjectRetain();
    v15 = (void *)sub_245443E8C();
    swift_bridgeObjectRelease();
    v16 = (void *)sub_245443D78();
    objc_msgSend(a1, sel_encodeCollection_forKey_, v15, v16);

  }
}

uint64_t ReplicationXPCServerParametersRecordValue.__allocating_init(bsxpcCoder:)(uint64_t a1)
{
  return sub_245401864(a1, (uint64_t (*)(uint64_t))sub_245407988);
}

uint64_t sub_245401864(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  objc_class *v2;
  id v5;
  uint64_t v6;

  v5 = objc_allocWithZone(v2);
  v6 = a2(a1);
  swift_unknownObjectRelease();
  return v6;
}

id ReplicationXPCServerParametersRecordValue.init(bsxpcCoder:)(void *a1)
{
  id v1;

  v1 = sub_245407988(a1);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_2454018EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  swift_unknownObjectRetain();
  v6 = a4(a3);
  swift_unknownObjectRelease();
  return v6;
}

void ReplicationXPCServerParametersRecordValue.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t static ReplicationXPCServerParametersAddRecords.supportsBSXPCSecureCoding()()
{
  return 1;
}

Swift::Bool __swiftcall ReplicationXPCServerParametersAddRecords.supportsBSXPCSecureCoding()()
{
  return 1;
}

uint64_t ReplicationXPCServerParametersAddRecords.records.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReplicationXPCServerParametersAddRecords.parameters.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + OBJC_IVAR____TtC18ReplicatorServices40ReplicationXPCServerParametersAddRecords_parameters + 8);
  *(_QWORD *)a1 = *(_QWORD *)(v1
                            + OBJC_IVAR____TtC18ReplicatorServices40ReplicationXPCServerParametersAddRecords_parameters);
  *(_BYTE *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

id ReplicationXPCServerParametersAddRecords.init(parameters:records:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  char v6;
  char *v7;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType();
  v6 = *(_BYTE *)(a1 + 8);
  v7 = &v2[OBJC_IVAR____TtC18ReplicatorServices40ReplicationXPCServerParametersAddRecords_parameters];
  *(_QWORD *)v7 = *(_QWORD *)a1;
  v7[8] = v6;
  *(_QWORD *)&v2[OBJC_IVAR____TtC18ReplicatorServices40ReplicationXPCServerParametersAddRecords_records] = a2;
  v9.receiver = v2;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, sel_init);
}

void ReplicationXPCServerParametersAddRecords.encode(withBSXPCCoder:)(void *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  sub_245443994();
  swift_allocObject();
  sub_245443988();
  sub_245407D84();
  v2 = sub_24544397C();
  v4 = v3;
  v5 = (void *)sub_245443A6C();
  sub_2453BDCF8(v2, v4);
  swift_release();
  v6 = (void *)sub_245443D78();
  objc_msgSend(a1, sel_encodeObject_forKey_, v5, v6);

  type metadata accessor for ReplicationXPCServerParametersRecord(0);
  v7 = (void *)sub_245443E8C();
  v8 = (void *)sub_245443D78();
  objc_msgSend(a1, sel_encodeCollection_forKey_, v7, v8);

}

id ReplicationXPCServerParametersAddRecords.__allocating_init(bsxpcCoder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ReplicationXPCServerParametersAddRecords.init(bsxpcCoder:)(a1);
}

id ReplicationXPCServerParametersAddRecords.init(bsxpcCoder:)(void *a1)
{
  void *v1;
  objc_class *ObjectType;
  uint64_t ObjCClassFromMetadata;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  char v15;
  char *v16;
  objc_super v17;
  uint64_t v18;
  char v19;
  _OWORD v20[2];
  _QWORD v21[4];

  ObjectType = (objc_class *)swift_getObjectType();
  sub_24540D76C(0, &qword_25440DEA8);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  type metadata accessor for ReplicationXPCServerParametersRecord(0);
  v5 = swift_getObjCClassFromMetadata();
  v6 = v1;
  v7 = (void *)sub_245443D78();
  v8 = objc_msgSend(a1, sel_decodeCollectionOfClass_containingClass_forKey_, ObjCClassFromMetadata, v5, v7);

  if (v8
    && (v21[0] = v8,
        __swift_instantiateConcreteTypeFromMangledName(&qword_25440E060),
        __swift_instantiateConcreteTypeFromMangledName(&qword_25440E050),
        (swift_dynamicCast() & 1) != 0))
  {
    v9 = *(_QWORD *)&v20[0];
    sub_24540D76C(0, (unint64_t *)&unk_25440E070);
    v10 = swift_getObjCClassFromMetadata();
    v11 = (void *)sub_245443D78();
    v12 = objc_msgSend(a1, sel_decodeObjectOfClass_forKey_, v10, v11);

    if (v12)
    {
      sub_24544409C();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v20, 0, sizeof(v20));
    }
    sub_2453D0428((uint64_t)v20, (uint64_t)v21, &qword_25440E7F8);
    if (v21[3])
    {
      if ((swift_dynamicCast() & 1) != 0)
      {
        v15 = v19;
        v16 = &v6[OBJC_IVAR____TtC18ReplicatorServices40ReplicationXPCServerParametersAddRecords_parameters];
        *(_QWORD *)v16 = v18;
        v16[8] = v15;
        *(_QWORD *)&v6[OBJC_IVAR____TtC18ReplicatorServices40ReplicationXPCServerParametersAddRecords_records] = v9;

        v17.receiver = v6;
        v17.super_class = ObjectType;
        v13 = objc_msgSendSuper2(&v17, sel_init);
        swift_unknownObjectRelease();
        return v13;
      }
      swift_unknownObjectRelease();

      swift_bridgeObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();

      swift_bridgeObjectRelease();
      sub_2453D055C((uint64_t)v21, &qword_25440E7F8);
    }
  }
  else
  {
    swift_unknownObjectRelease();

  }
  swift_deallocPartialClassInstance();
  return 0;
}

void ReplicationXPCServerParametersAddRecords.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

__n128 ReplicationXPCServerParameters.RegisterClient.clientDescriptor.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v7 = a1[1];
  v8 = *a1;
  v6 = a1[2];
  v3 = *((_QWORD *)a1 + 6);
  v4 = *((_QWORD *)a1 + 9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)v1 = v8;
  *(_OWORD *)(v1 + 16) = v7;
  *(_OWORD *)(v1 + 32) = v6;
  *(_QWORD *)(v1 + 48) = v3;
  result = *(__n128 *)((char *)a1 + 56);
  *(__n128 *)(v1 + 56) = result;
  *(_QWORD *)(v1 + 72) = v4;
  return result;
}

uint64_t (*ReplicationXPCServerParameters.RegisterClient.clientDescriptor.modify())()
{
  return nullsub_1;
}

unint64_t sub_245402080()
{
  return 0xD000000000000010;
}

uint64_t sub_24540209C()
{
  sub_245407DDC();
  return sub_245444468();
}

uint64_t sub_2454020C4()
{
  sub_245407DDC();
  return sub_245444474();
}

uint64_t ReplicationXPCServerParameters.RegisterClient.encode(to:)(_QWORD *a1)
{
  return sub_2454051CC(a1, (uint64_t *)&unk_25440E740, (void (*)(void))sub_245407DDC);
}

uint64_t ReplicationXPCServerParameters.RegisterClient.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_245405340(a1, &qword_257463B88, (void (*)(void))sub_245407DDC, a2);
}

uint64_t sub_245402144@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicationXPCServerParameters.RegisterClient.init(from:)(a1, a2);
}

uint64_t sub_245402158(_QWORD *a1)
{
  return ReplicationXPCServerParameters.RegisterClient.encode(to:)(a1);
}

uint64_t sub_24540216C(uint64_t a1, uint64_t a2)
{
  return sub_2454054C0(a1, a2, (void (*)(void))sub_2453F6E38);
}

uint64_t (*ReplicationXPCServerParameters.UnregisterClient.clientID.modify())()
{
  return nullsub_1;
}

uint64_t sub_245402194()
{
  return 0x4449746E65696C63;
}

uint64_t sub_2454021B0()
{
  sub_245407EA8();
  return sub_245444468();
}

uint64_t sub_2454021D8()
{
  sub_245407EA8();
  return sub_245444474();
}

uint64_t ReplicationXPCServerParameters.UnregisterClient.encode(to:)(_QWORD *a1)
{
  return sub_245402760(a1, &qword_257464D68, (void (*)(void))sub_245407EA8);
}

uint64_t ReplicationXPCServerParameters.UnregisterClient.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_245402884(a1, &qword_257464D78, (void (*)(void))sub_245407EA8, a2);
}

uint64_t sub_245402258@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ReplicationXPCServerParameters.UnregisterClient.init(from:)(a1, a2);
}

uint64_t sub_24540226C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2454029EC(a1, a2, a3, &qword_257464D68, (void (*)(void))sub_245407EA8);
}

uint64_t sub_245402298(uint64_t a1, uint64_t a2)
{
  return sub_245402AF0(a1, a2, (void (*)(void))sub_2453F7298);
}

uint64_t (*ReplicationXPCServerParameters.GetClientEnabled.clientID.modify())()
{
  return nullsub_1;
}

uint64_t sub_2454022C0()
{
  sub_245407EEC();
  return sub_245444468();
}

uint64_t sub_2454022E8()
{
  sub_245407EEC();
  return sub_245444474();
}

uint64_t ReplicationXPCServerParameters.GetClientEnabled.encode(to:)(_QWORD *a1)
{
  return sub_245402760(a1, &qword_257464D80, (void (*)(void))sub_245407EEC);
}

uint64_t ReplicationXPCServerParameters.GetClientEnabled.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_245402884(a1, &qword_257464D90, (void (*)(void))sub_245407EEC, a2);
}

uint64_t sub_245402368@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ReplicationXPCServerParameters.GetClientEnabled.init(from:)(a1, a2);
}

uint64_t sub_24540237C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2454029EC(a1, a2, a3, &qword_257464D80, (void (*)(void))sub_245407EEC);
}

uint64_t sub_2454023A8(uint64_t a1, uint64_t a2)
{
  return sub_245402AF0(a1, a2, (void (*)(void))sub_2453F7710);
}

uint64_t ReplicationXPCServerParameters.EnableClient.clientID.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReplicationXPCServerParameters.EnableClient.clientID.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ReplicationXPCServerParameters.EnableClient.clientID.modify())()
{
  return nullsub_1;
}

uint64_t sub_245402430()
{
  sub_245407F30();
  return sub_245444468();
}

uint64_t sub_245402458()
{
  sub_245407F30();
  return sub_245444474();
}

uint64_t ReplicationXPCServerParameters.EnableClient.encode(to:)(_QWORD *a1)
{
  return sub_245402760(a1, &qword_257464D98, (void (*)(void))sub_245407F30);
}

uint64_t ReplicationXPCServerParameters.EnableClient.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_245402884(a1, &qword_257464DA8, (void (*)(void))sub_245407F30, a2);
}

uint64_t sub_2454024D8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ReplicationXPCServerParameters.EnableClient.init(from:)(a1, a2);
}

uint64_t sub_2454024EC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2454029EC(a1, a2, a3, &qword_257464D98, (void (*)(void))sub_245407F30);
}

uint64_t sub_245402518(uint64_t a1, uint64_t a2)
{
  return sub_245402AF0(a1, a2, (void (*)(void))sub_2453F7798);
}

uint64_t (*ReplicationXPCServerParameters.DisableClient.clientID.modify())()
{
  return nullsub_1;
}

uint64_t sub_245402540()
{
  sub_245407F74();
  return sub_245444468();
}

uint64_t sub_245402568()
{
  sub_245407F74();
  return sub_245444474();
}

uint64_t ReplicationXPCServerParameters.DisableClient.encode(to:)(_QWORD *a1)
{
  return sub_245402760(a1, &qword_257464DB0, (void (*)(void))sub_245407F74);
}

uint64_t ReplicationXPCServerParameters.DisableClient.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_245402884(a1, (uint64_t *)&unk_257464DC0, (void (*)(void))sub_245407F74, a2);
}

uint64_t sub_2454025E8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ReplicationXPCServerParameters.DisableClient.init(from:)(a1, a2);
}

uint64_t sub_2454025FC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2454029EC(a1, a2, a3, &qword_257464DB0, (void (*)(void))sub_245407F74);
}

uint64_t sub_245402628(uint64_t a1, uint64_t a2)
{
  return sub_245402AF0(a1, a2, (void (*)(void))sub_2453F77DC);
}

uint64_t (*ReplicationXPCServerParameters.GetClientDescriptor.clientID.modify())()
{
  return nullsub_1;
}

uint64_t sub_245402650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x4449746E65696C63 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_245444390();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_2454026E4()
{
  sub_245407FB8();
  return sub_245444468();
}

uint64_t sub_24540270C()
{
  sub_245407FB8();
  return sub_245444474();
}

uint64_t ReplicationXPCServerParameters.GetClientDescriptor.encode(to:)(_QWORD *a1)
{
  return sub_245402760(a1, &qword_25440E7B8, (void (*)(void))sub_245407FB8);
}

uint64_t sub_245402760(_QWORD *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  void (*v11)(void);

  v11 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v11();
  sub_24544445C();
  sub_245444348();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t ReplicationXPCServerParameters.GetClientDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_245402884(a1, (uint64_t *)&unk_257463C58, (void (*)(void))sub_245407FB8, a2);
}

uint64_t sub_245402884@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v17 = a4;
  v18 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_245444450();
  if (!v4)
  {
    v10 = v17;
    v11 = v18;
    v12 = sub_2454442C4();
    v14 = v13;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v11);
    *v10 = v12;
    v10[1] = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_2454029AC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ReplicationXPCServerParameters.GetClientDescriptor.init(from:)(a1, a2);
}

uint64_t sub_2454029C0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2454029EC(a1, a2, a3, &qword_25440E7B8, (void (*)(void))sub_245407FB8);
}

uint64_t sub_2454029EC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  void (*v13)(void);

  v13 = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v13();
  sub_24544445C();
  sub_245444348();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_245402AE4(uint64_t a1, uint64_t a2)
{
  return sub_245402AF0(a1, a2, (void (*)(void))sub_2453F73FC);
}

uint64_t sub_245402AF0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  sub_245443994();
  swift_allocObject();
  sub_245443988();
  a3();
  v4 = sub_24544397C();
  v6 = v5;
  v7 = sub_245443A6C();
  sub_2453BDCF8(v4, v6);
  swift_release();
  return v7;
}

uint64_t ReplicationXPCServerParameters.AddRecords.destination.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t ReplicationXPCServerParameters.AddRecords.destination.setter(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease();
  *v1 = v2;
  return result;
}

uint64_t (*ReplicationXPCServerParameters.AddRecords.destination.modify())()
{
  return nullsub_1;
}

void ReplicationXPCServerParameters.AddRecords.schedule.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

_BYTE *ReplicationXPCServerParameters.AddRecords.schedule.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = *result;
  return result;
}

uint64_t (*ReplicationXPCServerParameters.AddRecords.schedule.modify())()
{
  return nullsub_1;
}

uint64_t sub_245402C2C()
{
  _BYTE *v0;

  if (*v0)
    return 0x656C756465686373;
  else
    return 0x74616E6974736564;
}

uint64_t sub_245402C70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24540D0C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_245402C94()
{
  sub_245407FFC();
  return sub_245444468();
}

uint64_t sub_245402CBC()
{
  sub_245407FFC();
  return sub_245444474();
}

uint64_t ReplicationXPCServerParameters.AddRecords.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E240);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v11 = *((unsigned __int8 *)v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245407FFC();
  sub_24544445C();
  v15 = v8;
  v14 = 0;
  sub_245408040();
  sub_245444360();
  if (!v2)
  {
    v13 = v11;
    v12 = 1;
    sub_245408084();
    sub_245444360();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ReplicationXPCServerParameters.AddRecords.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  char v10;
  _BYTE v12[16];
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257463B70);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245407FFC();
  sub_245444450();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v12[15] = 0;
  sub_2454080C8();
  sub_2454442DC();
  v9 = v13;
  v12[13] = 1;
  sub_24540810C();
  swift_bridgeObjectRetain();
  sub_2454442DC();
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  v10 = v12[14];
  *(_QWORD *)a2 = v9;
  *(_BYTE *)(a2 + 8) = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_245402FDC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicationXPCServerParameters.AddRecords.init(from:)(a1, a2);
}

uint64_t sub_245402FF0(_QWORD *a1)
{
  return ReplicationXPCServerParameters.AddRecords.encode(to:)(a1);
}

uint64_t sub_245403004()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  sub_245443994();
  swift_allocObject();
  sub_245443988();
  sub_245407D84();
  v0 = sub_24544397C();
  v2 = v1;
  v3 = sub_245443A6C();
  sub_2453BDCF8(v0, v2);
  swift_release();
  return v3;
}

uint64_t ReplicationXPCServerParameters.RemoveRecords.recordIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReplicationXPCServerParameters.RemoveRecords.recordIDs.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*ReplicationXPCServerParameters.RemoveRecords.recordIDs.modify())()
{
  return nullsub_1;
}

uint64_t (*ReplicationXPCServerParameters.RemoveRecords.schedule.modify())()
{
  return nullsub_1;
}

uint64_t sub_245403120()
{
  _BYTE *v0;

  if (*v0)
    return 0x656C756465686373;
  else
    return 0x444964726F636572;
}

uint64_t sub_245403160@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24540D1CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_245403184()
{
  sub_245408150();
  return sub_245444468();
}

uint64_t sub_2454031AC()
{
  sub_245408150();
  return sub_245444474();
}

uint64_t ReplicationXPCServerParameters.RemoveRecords.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E118);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v11 = *((unsigned __int8 *)v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245408150();
  sub_24544445C();
  v15 = v8;
  v14 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E7C8);
  sub_245408194();
  sub_245444360();
  if (!v2)
  {
    v13 = v11;
    v12 = 1;
    sub_245408084();
    sub_245444360();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ReplicationXPCServerParameters.RemoveRecords.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  char v10;
  _BYTE v12[16];
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464380);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245408150();
  sub_245444450();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E7C8);
  v12[15] = 0;
  sub_245408210();
  sub_2454442DC();
  v9 = v13;
  v12[13] = 1;
  sub_24540810C();
  swift_bridgeObjectRetain();
  sub_2454442DC();
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  v10 = v12[14];
  *(_QWORD *)a2 = v9;
  *(_BYTE *)(a2 + 8) = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_2454034E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicationXPCServerParameters.RemoveRecords.init(from:)(a1, a2);
}

uint64_t sub_2454034F8(_QWORD *a1)
{
  return ReplicationXPCServerParameters.RemoveRecords.encode(to:)(a1);
}

uint64_t sub_24540350C()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  sub_245443994();
  swift_allocObject();
  sub_245443988();
  sub_2453F720C();
  v0 = sub_24544397C();
  v2 = v1;
  v3 = sub_245443A6C();
  sub_2453BDCF8(v0, v2);
  swift_release();
  return v3;
}

uint64_t ReplicationXPCServerParameters.GetRecords.recordIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReplicationXPCServerParameters.GetRecords.recordIDs.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*ReplicationXPCServerParameters.GetRecords.recordIDs.modify())()
{
  return nullsub_1;
}

uint64_t ReplicationXPCServerParameters.GetRecords.fetchData.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t ReplicationXPCServerParameters.GetRecords.fetchData.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*ReplicationXPCServerParameters.GetRecords.fetchData.modify())()
{
  return nullsub_1;
}

uint64_t ReplicationXPCServerParameters.GetRecords.fetchFiles.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t ReplicationXPCServerParameters.GetRecords.fetchFiles.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 9) = result;
  return result;
}

uint64_t (*ReplicationXPCServerParameters.GetRecords.fetchFiles.modify())()
{
  return nullsub_1;
}

uint64_t ReplicationXPCServerParameters.GetRecords.protocolVersion.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t ReplicationXPCServerParameters.GetRecords.protocolVersion.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*ReplicationXPCServerParameters.GetRecords.protocolVersion.modify())()
{
  return nullsub_1;
}

uint64_t sub_245403684()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_2454036C0 + 4 * byte_245447C70[*v0]))(0x444964726F636572, 0xE900000000000073);
}

uint64_t sub_2454036C0()
{
  return 0x7461446863746566;
}

uint64_t sub_2454036DC()
{
  return 0x6C69466863746566;
}

uint64_t sub_2454036F8()
{
  return 0x6C6F636F746F7270;
}

uint64_t sub_24540371C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24540D2C8(a1, a2);
  *a3 = result;
  return result;
}

void sub_245403740(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_24540374C()
{
  sub_24540828C();
  return sub_245444468();
}

uint64_t sub_245403774()
{
  sub_24540828C();
  return sub_245444474();
}

uint64_t ReplicationXPCServerParameters.GetRecords.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  _DWORD v11[2];
  uint64_t v12;
  int v13;
  int v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574645C8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((unsigned __int8 *)v1 + 8);
  v13 = *((unsigned __int8 *)v1 + 9);
  v14 = v9;
  v12 = v1[2];
  v11[1] = *((unsigned __int8 *)v1 + 24);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24540828C();
  sub_24544445C();
  v19 = v8;
  v18 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E7C8);
  sub_245408194();
  sub_245444360();
  if (!v2)
  {
    v17 = 1;
    sub_245444354();
    v16 = 2;
    sub_245444354();
    v15 = 3;
    sub_24544433C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ReplicationXPCServerParameters.GetRecords.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  char v13;
  char *v14;
  char v15;
  char v16;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464378);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24540828C();
  sub_245444450();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E7C8);
  v22 = 0;
  sub_245408210();
  sub_2454442DC();
  v9 = v23;
  v21 = 1;
  swift_bridgeObjectRetain();
  v10 = sub_2454442D0();
  v20 = 2;
  v18 = sub_2454442D0();
  v19 = 3;
  v12 = sub_2454442B8();
  HIDWORD(v17) = v10 & 1;
  v13 = v18 & 1;
  v14 = v8;
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
  *(_QWORD *)a2 = v9;
  *(_BYTE *)(a2 + 8) = BYTE4(v17);
  *(_BYTE *)(a2 + 9) = v13;
  *(_QWORD *)(a2 + 16) = v12;
  *(_BYTE *)(a2 + 24) = v16 & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_245403B70@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicationXPCServerParameters.GetRecords.init(from:)(a1, a2);
}

uint64_t sub_245403B84(_QWORD *a1)
{
  return ReplicationXPCServerParameters.GetRecords.encode(to:)(a1);
}

uint64_t sub_245403B98()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  sub_245443994();
  swift_allocObject();
  sub_245443988();
  sub_2453F7004();
  v0 = sub_24544397C();
  v2 = v1;
  v3 = sub_245443A6C();
  sub_2453BDCF8(v0, v2);
  swift_release();
  return v3;
}

uint64_t (*ReplicationXPCServerParameters.GetRecordVersions.clientDescriptors.modify())()
{
  return nullsub_1;
}

unint64_t sub_245403C8C()
{
  return 0xD000000000000011;
}

uint64_t sub_245403CA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24540D4CC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_245403CD0()
{
  sub_2454082D0();
  return sub_245444468();
}

uint64_t sub_245403CF8()
{
  sub_2454082D0();
  return sub_245444474();
}

uint64_t ReplicationXPCServerParameters.GetRecordVersions.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E750);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2454082D0();
  sub_24544445C();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB10);
  sub_245408314(&qword_25440E668, (uint64_t (*)(void))sub_245407E20, MEMORY[0x24BEE12A0]);
  sub_245444360();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ReplicationXPCServerParameters.GetRecordVersions.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257463B90);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2454082D0();
  sub_245444450();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB10);
    sub_245408314((unint64_t *)&unk_257463B30, (uint64_t (*)(void))sub_245407E64, MEMORY[0x24BEE12D0]);
    sub_2454442DC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_245403F80@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ReplicationXPCServerParameters.GetRecordVersions.init(from:)(a1, a2);
}

uint64_t sub_245403F94(_QWORD *a1)
{
  return ReplicationXPCServerParameters.GetRecordVersions.encode(to:)(a1);
}

uint64_t sub_245403FA8(uint64_t a1, uint64_t a2)
{
  return sub_2453FC66C(a1, a2, (void (*)(void))sub_2453F6D6C);
}

uint64_t (*ReplicationXPCServerParameters.SendMessage.message.modify())()
{
  return nullsub_1;
}

uint64_t ReplicationXPCServerParameters.SendMessage.timeout.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for ReplicationXPCServerParameters.SendMessage(0) + 20));
}

uint64_t ReplicationXPCServerParameters.SendMessage.timeout.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for ReplicationXPCServerParameters.SendMessage(0);
  v6 = v2 + *(int *)(result + 20);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*ReplicationXPCServerParameters.SendMessage.timeout.modify())()
{
  type metadata accessor for ReplicationXPCServerParameters.SendMessage(0);
  return nullsub_1;
}

uint64_t ReplicationXPCServerParameters.SendMessage.retries.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for ReplicationXPCServerParameters.SendMessage(0) + 24));
}

uint64_t ReplicationXPCServerParameters.SendMessage.retries.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for ReplicationXPCServerParameters.SendMessage(0);
  v6 = v2 + *(int *)(result + 24);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*ReplicationXPCServerParameters.SendMessage.retries.modify())()
{
  type metadata accessor for ReplicationXPCServerParameters.SendMessage(0);
  return nullsub_1;
}

uint64_t sub_2454040F8()
{
  char *v0;

  return *(_QWORD *)&aMessage_0[8 * *v0];
}

uint64_t sub_245404110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24540D550(a1, a2);
  *a3 = result;
  return result;
}

void sub_245404134(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_245404140()
{
  sub_245408390();
  return sub_245444468();
}

uint64_t sub_245404168()
{
  sub_245408390();
  return sub_245444474();
}

uint64_t ReplicationXPCServerParameters.SendMessage.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464DD0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245408390();
  sub_24544445C();
  v8[15] = 0;
  type metadata accessor for ReplicatorMessage();
  sub_2453B8BF4((unint64_t *)&unk_257463A50, (uint64_t (*)(uint64_t))type metadata accessor for ReplicatorMessage, (uint64_t)&protocol conformance descriptor for ReplicatorMessage);
  sub_245444360();
  if (!v1)
  {
    type metadata accessor for ReplicationXPCServerParameters.SendMessage(0);
    v8[14] = 1;
    sub_245444318();
    v8[13] = 2;
    sub_245444324();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ReplicationXPCServerParameters.SendMessage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  char v28;
  char v29;
  char v30;

  v23 = a2;
  v24 = type metadata accessor for ReplicatorMessage();
  MEMORY[0x24BDAC7A8](v24);
  v25 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464DE8);
  v4 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ReplicationXPCServerParameters.SendMessage(0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = &v10[*(int *)(v8 + 20)];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  v12 = &v10[*(int *)(v8 + 24)];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245408390();
  v13 = v27;
  sub_245444450();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v27 = (uint64_t *)v12;
  v14 = v4;
  v30 = 0;
  sub_2453B8BF4(&qword_25440E560, (uint64_t (*)(uint64_t))type metadata accessor for ReplicatorMessage, (uint64_t)&protocol conformance descriptor for ReplicatorMessage);
  v15 = (uint64_t)v25;
  sub_2454442DC();
  sub_2453D062C(v15, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
  v29 = 1;
  *(_QWORD *)v11 = sub_245444294();
  v11[8] = v16 & 1;
  v28 = 2;
  v18 = sub_2454442A0();
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v26);
  v21 = v27;
  *v27 = v18;
  *((_BYTE *)v21 + 8) = v20 & 1;
  sub_2453BA364((uint64_t)v10, v23, type metadata accessor for ReplicationXPCServerParameters.SendMessage);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_2453BA3A8((uint64_t)v10, type metadata accessor for ReplicationXPCServerParameters.SendMessage);
}

uint64_t sub_2454045D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicationXPCServerParameters.SendMessage.init(from:)(a1, a2);
}

uint64_t sub_2454045EC(_QWORD *a1)
{
  return ReplicationXPCServerParameters.SendMessage.encode(to:)(a1);
}

uint64_t sub_245404600(uint64_t a1, uint64_t a2)
{
  return sub_2453FB308(a1, a2, &qword_257464920, type metadata accessor for ReplicationXPCServerParameters.SendMessage, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerParameters.SendMessage);
}

uint64_t sub_24540461C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2453FB400(a1, a2, a3, a4, (uint64_t *)&unk_2574650C8, (unint64_t *)&unk_257464EB0, type metadata accessor for ReplicationXPCServerParameters.SendMessage, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerParameters.SendMessage);
}

uint64_t (*ReplicationXPCServerParameters.GetMessages.clientIDs.modify())()
{
  return nullsub_1;
}

uint64_t sub_245404658()
{
  return 0x4449746E65696C63;
}

uint64_t sub_245404674@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x4449746E65696C63 && a2 == 0xE900000000000073)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_245444390();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_245404714()
{
  sub_2454083D4();
  return sub_245444468();
}

uint64_t sub_24540473C()
{
  sub_2454083D4();
  return sub_245444474();
}

uint64_t ReplicationXPCServerParameters.GetMessages.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E368);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2454083D4();
  sub_24544445C();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB18);
  sub_245408418(&qword_25440E680, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
  sub_245444360();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ReplicationXPCServerParameters.GetMessages.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_257463B78);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2454083D4();
  sub_245444450();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB18);
    sub_245408418(&qword_257463B40, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
    sub_2454442DC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_2454049C4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ReplicationXPCServerParameters.GetMessages.init(from:)(a1, a2);
}

uint64_t sub_2454049D8(_QWORD *a1)
{
  return ReplicationXPCServerParameters.GetMessages.encode(to:)(a1);
}

uint64_t sub_2454049EC(uint64_t a1, uint64_t a2)
{
  return sub_2453FC66C(a1, a2, (void (*)(void))sub_2453F7340);
}

uint64_t (*ReplicationXPCServerResponse.GetRecordsVersions.recordVersions.modify())()
{
  return nullsub_1;
}

uint64_t sub_245404A14()
{
  return 0x655664726F636572;
}

uint64_t sub_245404A38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x655664726F636572 && a2 == 0xEE00736E6F697372)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_245444390();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_245404AF0()
{
  sub_245408478();
  return sub_245444468();
}

uint64_t sub_245404B18()
{
  sub_245408478();
  return sub_245444474();
}

uint64_t ReplicationXPCServerResponse.GetRecordsVersions.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_257463BD8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245408478();
  sub_24544445C();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EAF8);
  sub_2454084BC();
  sub_245444360();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ReplicationXPCServerResponse.GetRecordsVersions.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E730);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245408478();
  sub_245444450();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25440EAF8);
    sub_245408538();
    sub_2454442DC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_245404D70@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ReplicationXPCServerResponse.GetRecordsVersions.init(from:)(a1, a2);
}

uint64_t sub_245404D84(_QWORD *a1)
{
  return ReplicationXPCServerResponse.GetRecordsVersions.encode(to:)(a1);
}

uint64_t sub_245404D98(uint64_t a1, uint64_t a2)
{
  return sub_2453FC66C(a1, a2, (void (*)(void))sub_2454091D8);
}

uint64_t ReplicationXPCServerResponse.GetDevices.devices.getter()
{
  return swift_bridgeObjectRetain();
}

ReplicatorServices::ReplicationXPCServerResponse::GetDevices __swiftcall ReplicationXPCServerResponse.GetDevices.init(devices:)(ReplicatorServices::ReplicationXPCServerResponse::GetDevices devices)
{
  ReplicatorServices::ReplicationXPCServerResponse::GetDevices *v1;

  v1->devices._rawValue = devices.devices._rawValue;
  return devices;
}

uint64_t sub_245404DC0()
{
  sub_2454085B4();
  return sub_245444468();
}

uint64_t sub_245404DE8()
{
  sub_2454085B4();
  return sub_245444474();
}

uint64_t ReplicationXPCServerResponse.GetDevices.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_257463BB8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2454085B4();
  sub_24544445C();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB00);
  sub_2454085F8();
  sub_245444360();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ReplicationXPCServerResponse.GetDevices.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E720);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2454085B4();
  sub_245444450();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB00);
    sub_245408674();
    sub_2454442DC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_245405040@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ReplicationXPCServerResponse.GetDevices.init(from:)(a1, a2);
}

uint64_t sub_245405054(_QWORD *a1)
{
  return ReplicationXPCServerResponse.GetDevices.encode(to:)(a1);
}

uint64_t sub_245405068(uint64_t a1, uint64_t a2)
{
  return sub_2453FC66C(a1, a2, (void (*)(void))sub_24540927C);
}

uint64_t _s18ReplicatorServices30ReplicationXPCServerParametersO14RegisterClientV16clientDescriptorAA0gI0Vvg_0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  v2 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v11 = v1[8];
  v10 = v1[9];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v11;
  a1[9] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void __swiftcall ReplicationXPCServerResponse.GetClientDescriptor.init(clientDescriptor:)(ReplicatorServices::ReplicationXPCServerResponse::GetClientDescriptor *__return_ptr retstr, ReplicatorServices::ClientDescriptor *clientDescriptor)
{
  Swift::String entitlement;
  Swift::String messageNotificationName;
  uint64_t countAndFlagsBits;
  void *rawValue;

  entitlement = clientDescriptor->entitlement;
  messageNotificationName = clientDescriptor->messageNotificationName;
  countAndFlagsBits = clientDescriptor->recordNotificationName._countAndFlagsBits;
  rawValue = clientDescriptor->messageDescriptors._rawValue;
  retstr->clientDescriptor.id = clientDescriptor->id;
  retstr->clientDescriptor.entitlement = entitlement;
  retstr->clientDescriptor.messageNotificationName = messageNotificationName;
  retstr->clientDescriptor.recordNotificationName._countAndFlagsBits = countAndFlagsBits;
  *(_OWORD *)&retstr->clientDescriptor.recordNotificationName._object = *(_OWORD *)&clientDescriptor->recordNotificationName._object;
  retstr->clientDescriptor.messageDescriptors._rawValue = rawValue;
}

uint64_t sub_245405128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24540D6A4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_245405150()
{
  sub_2454086F0();
  return sub_245444468();
}

uint64_t sub_245405178()
{
  sub_2454086F0();
  return sub_245444474();
}

uint64_t ReplicationXPCServerResponse.GetClientDescriptor.encode(to:)(_QWORD *a1)
{
  return sub_2454051CC(a1, (uint64_t *)&unk_257463C68, (void (*)(void))sub_2454086F0);
}

uint64_t sub_2454051CC(_QWORD *a1, uint64_t *a2, void (*a3)(void))
{
  __int128 *v3;
  __int128 *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void (*v16)(void);
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v16 = a3;
  v4 = v3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v17 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v4;
  v14 = v4[1];
  v15 = v9;
  v13 = v4[2];
  v10 = *((_QWORD *)v4 + 6);
  v11 = *((_QWORD *)v4 + 9);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v16();
  sub_24544445C();
  v18 = v15;
  v19 = v14;
  v20 = v13;
  v21 = v10;
  v22 = *(__int128 *)((char *)v4 + 56);
  v23 = v11;
  sub_245407E20();
  sub_245444360();
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v8, v6);
}

uint64_t ReplicationXPCServerResponse.GetClientDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_245405340(a1, (uint64_t *)&unk_25440E7A8, (void (*)(void))sub_2454086F0, a2);
}

uint64_t sub_245405340@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v18 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v25 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_245444450();
  if (!v4)
  {
    v10 = v18;
    sub_245407E64();
    sub_2454442DC();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v7);
    v11 = v20;
    v12 = v21;
    v13 = v22;
    v14 = v24;
    v15 = v23;
    *(_OWORD *)v10 = v19;
    *(_OWORD *)(v10 + 16) = v11;
    *(_OWORD *)(v10 + 32) = v12;
    *(_QWORD *)(v10 + 48) = v13;
    *(_OWORD *)(v10 + 56) = v15;
    *(_QWORD *)(v10 + 72) = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_24540548C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicationXPCServerResponse.GetClientDescriptor.init(from:)(a1, a2);
}

uint64_t sub_2454054A0(_QWORD *a1)
{
  return ReplicationXPCServerResponse.GetClientDescriptor.encode(to:)(a1);
}

uint64_t sub_2454054B4(uint64_t a1, uint64_t a2)
{
  return sub_2454054C0(a1, a2, (void (*)(void))sub_245409320);
}

uint64_t sub_2454054C0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  sub_245443994();
  swift_allocObject();
  sub_245443988();
  a3();
  v4 = sub_24544397C();
  v6 = v5;
  v7 = sub_245443A6C();
  sub_2453BDCF8(v4, v6);
  swift_release();
  return v7;
}

uint64_t ReplicationXPCServerResponse.ReceiveMessage.message.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2453BA364(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
}

uint64_t ReplicationXPCServerResponse.ReceiveMessage.message.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_2453D0034(a1, v1, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
}

uint64_t (*ReplicationXPCServerResponse.ReceiveMessage.message.modify())()
{
  return nullsub_1;
}

uint64_t ReplicationXPCServerResponse.ReceiveMessage.init(message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2453D062C(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
}

uint64_t sub_24540561C()
{
  return 0x6567617373656DLL;
}

uint64_t sub_245405634@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_245444390();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_2454056C8()
{
  sub_245408734();
  return sub_245444468();
}

uint64_t sub_2454056F0()
{
  sub_245408734();
  return sub_245444474();
}

uint64_t ReplicationXPCServerResponse.ReceiveMessage.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464DF0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245408734();
  sub_24544445C();
  type metadata accessor for ReplicatorMessage();
  sub_2453B8BF4((unint64_t *)&unk_257463A50, (uint64_t (*)(uint64_t))type metadata accessor for ReplicatorMessage, (uint64_t)&protocol conformance descriptor for ReplicatorMessage);
  sub_245444360();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ReplicationXPCServerResponse.ReceiveMessage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a2;
  v4 = type metadata accessor for ReplicatorMessage();
  MEMORY[0x24BDAC7A8](v4);
  v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464E00);
  v14 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245408734();
  sub_245444450();
  if (!v2)
  {
    sub_2453B8BF4(&qword_25440E560, (uint64_t (*)(uint64_t))type metadata accessor for ReplicatorMessage, (uint64_t)&protocol conformance descriptor for ReplicatorMessage);
    sub_2454442DC();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    sub_2453D062C(v15, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for ReplicatorMessage);
    sub_2453D062C((uint64_t)v11, v13, type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_2454059F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicationXPCServerResponse.ReceiveMessage.init(from:)(a1, a2);
}

uint64_t sub_245405A08(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464DF0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245408734();
  sub_24544445C();
  type metadata accessor for ReplicatorMessage();
  sub_2453B8BF4((unint64_t *)&unk_257463A50, (uint64_t (*)(uint64_t))type metadata accessor for ReplicatorMessage, (uint64_t)&protocol conformance descriptor for ReplicatorMessage);
  sub_245444360();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_245405B18(uint64_t a1, uint64_t a2)
{
  return sub_2453FB308(a1, a2, &qword_257464ED0, type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerResponse.ReceiveMessage);
}

uint64_t sub_245405B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2453FB400(a1, a2, a3, a4, &qword_2574650C0, (unint64_t *)&unk_257465840, type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerResponse.ReceiveMessage);
}

uint64_t ReplicationXPCServerResponse.GetMessages.messages.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*ReplicationXPCServerResponse.GetMessages.messages.modify())()
{
  return nullsub_1;
}

uint64_t sub_245405B98()
{
  return 0x736567617373656DLL;
}

uint64_t sub_245405BB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x736567617373656DLL && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_245444390();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_245405C44()
{
  sub_24540878C();
  return sub_245444468();
}

uint64_t sub_245405C6C()
{
  sub_24540878C();
  return sub_245444474();
}

uint64_t ReplicationXPCServerResponse.GetMessages.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_257463BC8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24540878C();
  sub_24544445C();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB08);
  sub_2454087D0();
  sub_245444360();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ReplicationXPCServerResponse.GetMessages.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E728);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24540878C();
  sub_245444450();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB08);
    sub_24540884C();
    sub_2454442DC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_245405EC4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ReplicationXPCServerResponse.GetMessages.init(from:)(a1, a2);
}

uint64_t sub_245405ED8(_QWORD *a1)
{
  return ReplicationXPCServerResponse.GetMessages.encode(to:)(a1);
}

uint64_t sub_245405EEC(uint64_t a1, uint64_t a2)
{
  return sub_2453FC66C(a1, a2, (void (*)(void))sub_24540943C);
}

uint64_t ReplicationXPCServerResponse.GetLocalDeviceID.localDeviceID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2453D02E0(v1, a1, (uint64_t *)&unk_25440E8F0);
}

uint64_t ReplicationXPCServerResponse.GetLocalDeviceID.localDeviceID.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_2453F7820(a1, v1, (uint64_t *)&unk_25440E8F0);
}

uint64_t (*ReplicationXPCServerResponse.GetLocalDeviceID.localDeviceID.modify())()
{
  return nullsub_1;
}

uint64_t ReplicationXPCServerResponse.GetLocalDeviceID.init(localDeviceID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_245443B14();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, 1, 1, v4);
  return sub_2453F7820(a1, a2, (uint64_t *)&unk_25440E8F0);
}

uint64_t sub_245405FB0()
{
  return 0x7665446C61636F6CLL;
}

uint64_t sub_245405FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x7665446C61636F6CLL && a2 == 0xED00004449656369)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_245444390();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_24540608C()
{
  sub_2454088C8();
  return sub_245444468();
}

uint64_t sub_2454060B4()
{
  sub_2454088C8();
  return sub_245444474();
}

uint64_t ReplicationXPCServerResponse.GetLocalDeviceID.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464388);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2454088C8();
  sub_24544445C();
  sub_245443B14();
  sub_2453B8BF4(&qword_2574639F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  sub_245444330();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ReplicationXPCServerResponse.GetLocalDeviceID.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t LocalDeviceID;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v15 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
  MEMORY[0x24BDAC7A8](v4);
  v17 = (uint64_t)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2574642D0);
  v16 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalDeviceID = type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID(0);
  MEMORY[0x24BDAC7A8](LocalDeviceID);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_245443B14();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2454088C8();
  sub_245444450();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    v13 = (uint64_t)v11;
  }
  else
  {
    sub_2453B8BF4(&qword_25440E1B8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    sub_2454442AC();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    sub_2453F7820(v17, (uint64_t)v11, (uint64_t *)&unk_25440E8F0);
    sub_2453BA364((uint64_t)v11, v15, type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    v13 = (uint64_t)v11;
  }
  return sub_2453BA3A8(v13, type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID);
}

uint64_t sub_245406408@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicationXPCServerResponse.GetLocalDeviceID.init(from:)(a1, a2);
}

uint64_t sub_24540641C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464388);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2454088C8();
  sub_24544445C();
  sub_245443B14();
  sub_2453B8BF4(&qword_2574639F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  sub_245444330();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_24540652C(uint64_t a1, uint64_t a2)
{
  return sub_2453FB308(a1, a2, &qword_257464310, type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerResponse.GetLocalDeviceID);
}

uint64_t sub_245406548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_2453FB400(a1, a2, a3, a4, (uint64_t *)&unk_2574642C0, (unint64_t *)&unk_25440E0E8, type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerResponse.GetLocalDeviceID);
}

uint64_t sub_245406574()
{
  return 0x655264656C696166;
}

uint64_t sub_245406598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x655264656C696166 && a2 == 0xEF73444964726F63)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_245444390();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_245406650()
{
  sub_245408920();
  return sub_245444468();
}

uint64_t sub_245406678()
{
  sub_245408920();
  return sub_245444474();
}

uint64_t ReplicationXPCServerResponse.GetRecordsFailedRecordIDs.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464390);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245408920();
  sub_24544445C();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E7C8);
  sub_245408194();
  sub_245444360();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ReplicationXPCServerResponse.GetRecordsFailedRecordIDs.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574645C0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245408920();
  sub_245444450();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25440E7C8);
    sub_245408210();
    sub_2454442DC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_2454068D0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ReplicationXPCServerResponse.GetRecordsFailedRecordIDs.init(from:)(a1, a2);
}

uint64_t sub_2454068E4(_QWORD *a1)
{
  return ReplicationXPCServerResponse.GetRecordsFailedRecordIDs.encode(to:)(a1);
}

uint64_t sub_2454068F8(uint64_t a1, uint64_t a2)
{
  return sub_2453FC66C(a1, a2, (void (*)(void))sub_2454089A8);
}

uint64_t ReplicationXPCServerResponse.GetClientEnabled.enabled.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t ReplicationXPCServerResponse.GetClientEnabled.enabled.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*ReplicationXPCServerResponse.GetClientEnabled.enabled.modify())()
{
  return nullsub_1;
}

ReplicatorServices::ReplicationXPCServerResponse::GetClientEnabled __swiftcall ReplicationXPCServerResponse.GetClientEnabled.init(enabled:)(ReplicatorServices::ReplicationXPCServerResponse::GetClientEnabled enabled)
{
  ReplicatorServices::ReplicationXPCServerResponse::GetClientEnabled *v1;

  v1->enabled = enabled.enabled;
  return enabled;
}

uint64_t sub_245406938()
{
  sub_245408964();
  return sub_245444468();
}

uint64_t sub_245406960()
{
  sub_245408964();
  return sub_245444474();
}

uint64_t ReplicationXPCServerResponse.GetClientEnabled.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464E08);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245408964();
  sub_24544445C();
  sub_245444354();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ReplicationXPCServerResponse.GetClientEnabled.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464E18);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245408964();
  sub_245444450();
  if (!v2)
  {
    v9 = sub_2454442D0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_245406B78@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ReplicationXPCServerResponse.GetClientEnabled.init(from:)(a1, a2);
}

uint64_t sub_245406B8C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464E08);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245408964();
  sub_24544445C();
  sub_245444354();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_245406C74()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  sub_245443994();
  swift_allocObject();
  sub_245443988();
  sub_2454095FC();
  v0 = sub_24544397C();
  v2 = v1;
  v3 = sub_245443A6C();
  sub_2453BDCF8(v0, v2);
  swift_release();
  return v3;
}

uint64_t sub_245406D2C(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  char v7;

  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v3 = sub_245443A78();
  v5 = v4;
  sub_2453F7754();
  sub_24544394C();
  sub_2453BDCF8(v3, v5);
  result = swift_release();
  *a2 = v7;
  return result;
}

uint64_t static ReplicationXPCServerResponseGetRecords.supportsBSXPCSecureCoding()()
{
  return 1;
}

Swift::Bool __swiftcall ReplicationXPCServerResponseGetRecords.supportsBSXPCSecureCoding()()
{
  return 1;
}

uint64_t ReplicationXPCServerResponseGetRecords.records.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ReplicationXPCServerResponseGetRecords.failedRecordIDs.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_failedRecordIDs);
  return swift_bridgeObjectRetain();
}

id ReplicationXPCServerResponseGetRecords.__allocating_init(records:failedRecordIDs:)(uint64_t a1, uint64_t *a2)
{
  objc_class *v2;
  char *v5;
  uint64_t v6;
  objc_super v8;

  v5 = (char *)objc_allocWithZone(v2);
  v6 = *a2;
  *(_QWORD *)&v5[OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_records] = a1;
  *(_QWORD *)&v5[OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_failedRecordIDs] = v6;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, sel_init);
}

id ReplicationXPCServerResponseGetRecords.init(records:failedRecordIDs:)(uint64_t a1, uint64_t *a2)
{
  char *v2;
  objc_class *ObjectType;
  uint64_t v6;
  objc_super v8;

  ObjectType = (objc_class *)swift_getObjectType();
  v6 = *a2;
  *(_QWORD *)&v2[OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_records] = a1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_failedRecordIDs] = v6;
  v8.receiver = v2;
  v8.super_class = ObjectType;
  return objc_msgSendSuper2(&v8, sel_init);
}

void ReplicationXPCServerResponseGetRecords.encode(withBSXPCCoder:)(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  void *v8;

  type metadata accessor for ReplicationXPCServerParametersRecord(0);
  v2 = (void *)sub_245443E8C();
  v3 = (void *)sub_245443D78();
  objc_msgSend(a1, sel_encodeCollection_forKey_, v2, v3);

  sub_245443994();
  swift_allocObject();
  sub_245443988();
  sub_2454089A8();
  v4 = sub_24544397C();
  v6 = v5;
  v7 = (void *)sub_245443A6C();
  sub_2453BDCF8(v4, v6);
  swift_release();
  v8 = (void *)sub_245443D78();
  objc_msgSend(a1, sel_encodeObject_forKey_, v7, v8);

}

void sub_245407098(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  id v7;

  swift_unknownObjectRetain();
  v7 = a1;
  a4(a3);
  swift_unknownObjectRelease();

}

id ReplicationXPCServerResponseGetRecords.__allocating_init(bsxpcCoder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ReplicationXPCServerResponseGetRecords.init(bsxpcCoder:)(a1);
}

id ReplicationXPCServerResponseGetRecords.init(bsxpcCoder:)(void *a1)
{
  void *v1;
  objc_class *ObjectType;
  uint64_t ObjCClassFromMetadata;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v15;
  objc_super v16;
  uint64_t v17;
  _OWORD v18[2];
  _QWORD v19[4];

  ObjectType = (objc_class *)swift_getObjectType();
  sub_24540D76C(0, &qword_25440DEA8);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  type metadata accessor for ReplicationXPCServerParametersRecord(0);
  v5 = swift_getObjCClassFromMetadata();
  v6 = v1;
  v7 = (void *)sub_245443D78();
  v8 = objc_msgSend(a1, sel_decodeCollectionOfClass_containingClass_forKey_, ObjCClassFromMetadata, v5, v7);

  if (v8
    && (v19[0] = v8,
        __swift_instantiateConcreteTypeFromMangledName(&qword_25440E060),
        __swift_instantiateConcreteTypeFromMangledName(&qword_25440E050),
        (swift_dynamicCast() & 1) != 0))
  {
    v9 = *(_QWORD *)&v18[0];
    sub_24540D76C(0, (unint64_t *)&unk_25440E070);
    v10 = swift_getObjCClassFromMetadata();
    v11 = (void *)sub_245443D78();
    v12 = objc_msgSend(a1, sel_decodeObjectOfClass_forKey_, v10, v11);

    if (v12)
    {
      sub_24544409C();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v18, 0, sizeof(v18));
    }
    sub_2453D0428((uint64_t)v18, (uint64_t)v19, &qword_25440E7F8);
    if (v19[3])
    {
      if ((swift_dynamicCast() & 1) != 0)
      {
        v15 = v17;
        *(_QWORD *)&v6[OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_records] = v9;
        *(_QWORD *)&v6[OBJC_IVAR____TtC18ReplicatorServices38ReplicationXPCServerResponseGetRecords_failedRecordIDs] = v15;

        v16.receiver = v6;
        v16.super_class = ObjectType;
        v13 = objc_msgSendSuper2(&v16, sel_init);
        swift_unknownObjectRelease();
        return v13;
      }
      swift_unknownObjectRelease();

      swift_bridgeObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();

      swift_bridgeObjectRelease();
      sub_2453D055C((uint64_t)v19, &qword_25440E7F8);
    }
  }
  else
  {
    swift_unknownObjectRelease();

  }
  swift_deallocPartialClassInstance();
  return 0;
}

void ReplicationXPCServerResponseGetRecords.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id _s18ReplicatorServices36ReplicationXPCServerParametersRecordCfD_0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_2454074A8(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5)
{
  char *v5;
  char *v6;
  uint64_t *v12;
  void **v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  id v19;
  objc_class *ObjectType;
  objc_super v22;

  v6 = v5;
  ObjectType = (objc_class *)swift_getObjectType();
  v12 = (uint64_t *)&v6[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_data];
  *(_OWORD *)&v6[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_data] = xmmword_245445F70;
  v13 = (void **)&v6[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_fileHandle];
  *(_QWORD *)&v6[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_fileHandle] = 0;
  v14 = &v6[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_extendedAttributes];
  *(_QWORD *)&v6[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_extendedAttributes] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_version] = a1;
  swift_beginAccess();
  v16 = *v12;
  v15 = v12[1];
  *v12 = a2;
  v12[1] = a3;
  v17 = v6;
  sub_2453F7080(a2, a3);
  sub_2453BDCE4(v16, v15);
  swift_beginAccess();
  v18 = *v13;
  *v13 = a4;
  v19 = a4;

  swift_beginAccess();
  *(_QWORD *)v14 = a5;

  swift_bridgeObjectRelease();
  v22.receiver = v17;
  v22.super_class = ObjectType;
  return objc_msgSendSuper2(&v22, sel_init);
}

uint64_t type metadata accessor for ReplicationXPCServerParametersRecordValue()
{
  return objc_opt_self();
}

uint64_t sub_245407610(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    sub_245443E08();
    return sub_245443E2C();
  }
  return result;
}

id sub_245407698(void *a1)
{
  char *v1;
  void *v2;
  uint64_t *v4;
  char *v5;
  uint64_t ObjCClassFromMetadata;
  id v7;
  void *v8;
  id v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  objc_class *ObjectType;
  uint64_t v23;
  unint64_t v24;
  objc_super v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[24];
  uint64_t v29;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v4 = (uint64_t *)&v1[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_name];
  *v4 = 0;
  v4[1] = 0;
  v5 = &v1[OBJC_IVAR____TtC18ReplicatorServices47ReplicationXPCServerParametersExtendedAttribute_data];
  *(_OWORD *)v5 = xmmword_245445F70;
  sub_24540D76C(0, &qword_2574650D8);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v7 = v2;
  v8 = (void *)sub_245443D78();
  v9 = objc_msgSend(a1, sel_decodeObjectOfClass_forKey_, ObjCClassFromMetadata, v8);

  if (v9)
  {
    sub_24544409C();
    swift_unknownObjectRelease();
  }
  else
  {
    v26 = 0u;
    v27 = 0u;
  }
  sub_2453D0428((uint64_t)&v26, (uint64_t)v28, &qword_25440E7F8);
  if (v29)
  {
    v10 = swift_dynamicCast();
    if (v10)
      v11 = v23;
    else
      v11 = 0;
    if (v10)
      v12 = v24;
    else
      v12 = 0;
  }
  else
  {
    sub_2453D055C((uint64_t)v28, &qword_25440E7F8);
    v11 = 0;
    v12 = 0;
  }
  sub_24540D76C(0, (unint64_t *)&unk_25440E070);
  v13 = swift_getObjCClassFromMetadata();
  v14 = (void *)sub_245443D78();
  v15 = objc_msgSend(a1, sel_decodeObjectOfClass_forKey_, v13, v14);

  if (v15)
  {
    sub_24544409C();
    swift_unknownObjectRelease();
  }
  else
  {
    v26 = 0u;
    v27 = 0u;
  }
  sub_2453D0428((uint64_t)&v26, (uint64_t)v28, &qword_25440E7F8);
  if (v29)
  {
    v16 = swift_dynamicCast();
    if (v16)
      v17 = v23;
    else
      v17 = 0;
    if (v16)
      v18 = v24;
    else
      v18 = 0xF000000000000000;
  }
  else
  {
    sub_2453D055C((uint64_t)v28, &qword_25440E7F8);
    v17 = 0;
    v18 = 0xF000000000000000;
  }
  swift_beginAccess();
  *v4 = v11;
  v4[1] = v12;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v19 = *(_QWORD *)v5;
  v20 = *((_QWORD *)v5 + 1);
  *(_QWORD *)v5 = v17;
  *((_QWORD *)v5 + 1) = v18;
  sub_2453F7080(v17, v18);
  sub_2453BDCE4(v19, v20);

  sub_2453BDCE4(v17, v18);
  v25.receiver = v7;
  v25.super_class = ObjectType;
  return objc_msgSendSuper2(&v25, sel_init);
}

uint64_t type metadata accessor for ReplicationXPCServerParametersExtendedAttribute()
{
  return objc_opt_self();
}

id sub_245407988(void *a1)
{
  char *v1;
  void *v2;
  uint64_t *v4;
  void **v5;
  char *v6;
  uint64_t ObjCClassFromMetadata;
  char *v8;
  void *v9;
  id v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  unint64_t v28;
  uint64_t v29;
  objc_class *ObjectType;
  objc_super v31;
  void *v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  _QWORD v36[3];
  uint64_t v37;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v4 = (uint64_t *)&v1[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_data];
  *(_OWORD *)&v1[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_data] = xmmword_245445F70;
  v5 = (void **)&v1[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_fileHandle];
  *(_QWORD *)&v1[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_fileHandle] = 0;
  v6 = &v1[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_extendedAttributes];
  *(_QWORD *)v6 = 0;
  sub_24540D76C(0, (unint64_t *)&unk_25440E070);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v8 = v2;
  v9 = (void *)sub_245443D78();
  v10 = objc_msgSend(a1, sel_decodeObjectOfClass_forKey_, ObjCClassFromMetadata, v9);

  if (v10)
  {
    sub_24544409C();
    swift_unknownObjectRelease();
  }
  else
  {
    v34 = 0u;
    v35 = 0u;
  }
  sub_2453D0428((uint64_t)&v34, (uint64_t)v36, &qword_25440E7F8);
  if (v37)
  {
    v11 = swift_dynamicCast();
    v12 = (uint64_t)v32;
    if (!v11)
      v12 = 0;
    v29 = v12;
    v13 = 0xF000000000000000;
    if (v11)
      v13 = v33;
  }
  else
  {
    sub_2453D055C((uint64_t)v36, &qword_25440E7F8);
    v29 = 0;
    v13 = 0xF000000000000000;
  }
  v28 = v13;
  sub_24540D76C(0, (unint64_t *)&qword_25440E068);
  v14 = swift_getObjCClassFromMetadata();
  v15 = (void *)sub_245443D78();
  v16 = objc_msgSend(a1, sel_decodeObjectOfClass_forKey_, v14, v15);

  if (v16)
  {
    sub_24544409C();
    swift_unknownObjectRelease();
  }
  else
  {
    v34 = 0u;
    v35 = 0u;
  }
  sub_2453D0428((uint64_t)&v34, (uint64_t)v36, &qword_25440E7F8);
  if (v37)
  {
    if (swift_dynamicCast())
      v17 = v32;
    else
      v17 = 0;
  }
  else
  {
    sub_2453D055C((uint64_t)v36, &qword_25440E7F8);
    v17 = 0;
  }
  v18 = (void *)sub_245443D78();
  v19 = objc_msgSend(a1, sel_decodeUInt64ForKey_, v18);

  sub_24540D76C(0, &qword_25440DEA8);
  v20 = swift_getObjCClassFromMetadata();
  type metadata accessor for ReplicationXPCServerParametersExtendedAttribute();
  v21 = swift_getObjCClassFromMetadata();
  v22 = (void *)sub_245443D78();
  v23 = objc_msgSend(a1, sel_decodeCollectionOfClass_containingClass_forKey_, v20, v21, v22);

  if (v23)
  {
    v36[0] = v23;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25440E060);
    __swift_instantiateConcreteTypeFromMangledName(&qword_257464360);
    if (swift_dynamicCast())
      v23 = (id)v34;
    else
      v23 = 0;
  }
  *(_QWORD *)&v8[OBJC_IVAR____TtC18ReplicatorServices41ReplicationXPCServerParametersRecordValue_version] = v19;
  swift_beginAccess();
  v24 = *v4;
  v25 = v4[1];
  *v4 = v29;
  v4[1] = v28;
  sub_2453BDCE4(v24, v25);
  swift_beginAccess();
  v26 = *v5;
  *v5 = v17;

  swift_beginAccess();
  *(_QWORD *)v6 = v23;

  swift_bridgeObjectRelease();
  v31.receiver = v8;
  v31.super_class = ObjectType;
  return objc_msgSendSuper2(&v31, sel_init);
}

unint64_t sub_245407D84()
{
  unint64_t result;

  result = qword_25440E208;
  if (!qword_25440E208)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.AddRecords, &type metadata for ReplicationXPCServerParameters.AddRecords);
    atomic_store(result, (unint64_t *)&qword_25440E208);
  }
  return result;
}

uint64_t type metadata accessor for ReplicationXPCServerParametersRecord(uint64_t a1)
{
  return sub_2453FB160(a1, (uint64_t *)&unk_25440E590);
}

unint64_t sub_245407DDC()
{
  unint64_t result;

  result = qword_25440EA98;
  if (!qword_25440EA98)
  {
    result = MEMORY[0x249534380](&unk_24544A464, &type metadata for ReplicationXPCServerParameters.RegisterClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EA98);
  }
  return result;
}

unint64_t sub_245407E20()
{
  unint64_t result;

  result = qword_25440E9B0;
  if (!qword_25440E9B0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ClientDescriptor, &type metadata for ClientDescriptor);
    atomic_store(result, (unint64_t *)&qword_25440E9B0);
  }
  return result;
}

unint64_t sub_245407E64()
{
  unint64_t result;

  result = qword_25440EB40;
  if (!qword_25440EB40)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ClientDescriptor, &type metadata for ClientDescriptor);
    atomic_store(result, (unint64_t *)&qword_25440EB40);
  }
  return result;
}

unint64_t sub_245407EA8()
{
  unint64_t result;

  result = qword_257464D70;
  if (!qword_257464D70)
  {
    result = MEMORY[0x249534380](&unk_24544A414, &type metadata for ReplicationXPCServerParameters.UnregisterClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464D70);
  }
  return result;
}

unint64_t sub_245407EEC()
{
  unint64_t result;

  result = qword_257464D88;
  if (!qword_257464D88)
  {
    result = MEMORY[0x249534380](&unk_24544A3C4, &type metadata for ReplicationXPCServerParameters.GetClientEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464D88);
  }
  return result;
}

unint64_t sub_245407F30()
{
  unint64_t result;

  result = qword_257464DA0;
  if (!qword_257464DA0)
  {
    result = MEMORY[0x249534380](&unk_24544A374, &type metadata for ReplicationXPCServerParameters.EnableClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464DA0);
  }
  return result;
}

unint64_t sub_245407F74()
{
  unint64_t result;

  result = qword_257464DB8;
  if (!qword_257464DB8)
  {
    result = MEMORY[0x249534380](&unk_24544A324, &type metadata for ReplicationXPCServerParameters.DisableClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464DB8);
  }
  return result;
}

unint64_t sub_245407FB8()
{
  unint64_t result;

  result = qword_25440EBD0;
  if (!qword_25440EBD0)
  {
    result = MEMORY[0x249534380](&unk_24544A2D4, &type metadata for ReplicationXPCServerParameters.GetClientDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EBD0);
  }
  return result;
}

unint64_t sub_245407FFC()
{
  unint64_t result;

  result = qword_25440E578;
  if (!qword_25440E578)
  {
    result = MEMORY[0x249534380](&unk_24544A284, &type metadata for ReplicationXPCServerParameters.AddRecords.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E578);
  }
  return result;
}

unint64_t sub_245408040()
{
  unint64_t result;

  result = qword_25440E1C0;
  if (!qword_25440E1C0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorRecordDestination, &type metadata for ReplicatorRecordDestination);
    atomic_store(result, (unint64_t *)&qword_25440E1C0);
  }
  return result;
}

unint64_t sub_245408084()
{
  unint64_t result;

  result = qword_25440E568;
  if (!qword_25440E568)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorSchedule, &type metadata for ReplicatorSchedule);
    atomic_store(result, (unint64_t *)&qword_25440E568);
  }
  return result;
}

unint64_t sub_2454080C8()
{
  unint64_t result;

  result = qword_257463A08;
  if (!qword_257463A08)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorRecordDestination, &type metadata for ReplicatorRecordDestination);
    atomic_store(result, (unint64_t *)&qword_257463A08);
  }
  return result;
}

unint64_t sub_24540810C()
{
  unint64_t result;

  result = qword_257463A60;
  if (!qword_257463A60)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorSchedule, &type metadata for ReplicatorSchedule);
    atomic_store(result, (unint64_t *)&qword_257463A60);
  }
  return result;
}

unint64_t sub_245408150()
{
  unint64_t result;

  result = qword_25440E300;
  if (!qword_25440E300)
  {
    result = MEMORY[0x249534380](&unk_24544A234, &type metadata for ReplicationXPCServerParameters.RemoveRecords.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E300);
  }
  return result;
}

unint64_t sub_245408194()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_25440E7D0;
  if (!qword_25440E7D0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25440E7C8);
    v2 = sub_2453B8BF4(&qword_25440E7A0, type metadata accessor for ReplicatorRecord.ID, (uint64_t)&protocol conformance descriptor for ReplicatorRecord.ID);
    result = MEMORY[0x249534380](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_25440E7D0);
  }
  return result;
}

unint64_t sub_245408210()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_25440E168;
  if (!qword_25440E168)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25440E7C8);
    v2 = sub_2453B8BF4(&qword_25440E550, type metadata accessor for ReplicatorRecord.ID, (uint64_t)&protocol conformance descriptor for ReplicatorRecord.ID);
    result = MEMORY[0x249534380](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_25440E168);
  }
  return result;
}

unint64_t sub_24540828C()
{
  unint64_t result;

  result = qword_25440E140;
  if (!qword_25440E140)
  {
    result = MEMORY[0x249534380](&unk_24544A1E4, &type metadata for ReplicationXPCServerParameters.GetRecords.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E140);
  }
  return result;
}

unint64_t sub_2454082D0()
{
  unint64_t result;

  result = qword_25440EAB8;
  if (!qword_25440EAB8)
  {
    result = MEMORY[0x249534380](&unk_24544A194, &type metadata for ReplicationXPCServerParameters.GetRecordVersions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EAB8);
  }
  return result;
}

uint64_t sub_245408314(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25440EB10);
    v8 = a2();
    result = MEMORY[0x249534380](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for ReplicationXPCServerParameters.SendMessage(uint64_t a1)
{
  return sub_2453FB160(a1, qword_257464F78);
}

unint64_t sub_245408390()
{
  unint64_t result;

  result = qword_257464DD8;
  if (!qword_257464DD8)
  {
    result = MEMORY[0x249534380](&unk_24544A144, &type metadata for ReplicationXPCServerParameters.SendMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464DD8);
  }
  return result;
}

unint64_t sub_2454083D4()
{
  unint64_t result;

  result = qword_25440EA70;
  if (!qword_25440EA70)
  {
    result = MEMORY[0x249534380](&unk_24544A0F4, &type metadata for ReplicationXPCServerParameters.GetMessages.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EA70);
  }
  return result;
}

uint64_t sub_245408418(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25440EB18);
    v8 = a2;
    result = MEMORY[0x249534380](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_245408478()
{
  unint64_t result;

  result = qword_25440EA40;
  if (!qword_25440EA40)
  {
    result = MEMORY[0x249534380](&unk_24544A0A4, &type metadata for ReplicationXPCServerResponse.GetRecordsVersions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EA40);
  }
  return result;
}

unint64_t sub_2454084BC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_257463B00;
  if (!qword_257463B00)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25440EAF8);
    v2 = sub_2453B8BF4((unint64_t *)&unk_2574639F8, (uint64_t (*)(uint64_t))type metadata accessor for ReplicatorRecordVersion, (uint64_t)&protocol conformance descriptor for ReplicatorRecordVersion);
    result = MEMORY[0x249534380](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_257463B00);
  }
  return result;
}

unint64_t sub_245408538()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_25440E658;
  if (!qword_25440E658)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25440EAF8);
    v2 = sub_2453B8BF4(&qword_25440E470, (uint64_t (*)(uint64_t))type metadata accessor for ReplicatorRecordVersion, (uint64_t)&protocol conformance descriptor for ReplicatorRecordVersion);
    result = MEMORY[0x249534380](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_25440E658);
  }
  return result;
}

unint64_t sub_2454085B4()
{
  unint64_t result;

  result = qword_25440E9F0;
  if (!qword_25440E9F0)
  {
    result = MEMORY[0x249534380](&unk_24544A054, &type metadata for ReplicationXPCServerResponse.GetDevices.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E9F0);
  }
  return result;
}

unint64_t sub_2454085F8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_257463B10;
  if (!qword_257463B10)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25440EB00);
    v2 = sub_2453B8BF4((unint64_t *)&unk_257463A40, type metadata accessor for ReplicatorDevice, (uint64_t)&protocol conformance descriptor for ReplicatorDevice);
    result = MEMORY[0x249534380](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_257463B10);
  }
  return result;
}

unint64_t sub_245408674()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_25440E660;
  if (!qword_25440E660)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25440EB00);
    v2 = sub_2453B8BF4(&qword_25440E4D0, type metadata accessor for ReplicatorDevice, (uint64_t)&protocol conformance descriptor for ReplicatorDevice);
    result = MEMORY[0x249534380](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_25440E660);
  }
  return result;
}

unint64_t sub_2454086F0()
{
  unint64_t result;

  result = qword_25440EBA0;
  if (!qword_25440EBA0)
  {
    result = MEMORY[0x249534380](&unk_24544A004, &type metadata for ReplicationXPCServerResponse.GetClientDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EBA0);
  }
  return result;
}

unint64_t sub_245408734()
{
  unint64_t result;

  result = qword_257464DF8;
  if (!qword_257464DF8)
  {
    result = MEMORY[0x249534380](&unk_245449FB4, &type metadata for ReplicationXPCServerResponse.ReceiveMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464DF8);
  }
  return result;
}

uint64_t type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage(uint64_t a1)
{
  return sub_2453FB160(a1, qword_257464F90);
}

unint64_t sub_24540878C()
{
  unint64_t result;

  result = qword_25440EA20;
  if (!qword_25440EA20)
  {
    result = MEMORY[0x249534380](&unk_245449F64, &type metadata for ReplicationXPCServerResponse.GetMessages.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EA20);
  }
  return result;
}

unint64_t sub_2454087D0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_257463B20;
  if (!qword_257463B20)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25440EB08);
    v2 = sub_2453B8BF4((unint64_t *)&unk_257463A50, (uint64_t (*)(uint64_t))type metadata accessor for ReplicatorMessage, (uint64_t)&protocol conformance descriptor for ReplicatorMessage);
    result = MEMORY[0x249534380](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_257463B20);
  }
  return result;
}

unint64_t sub_24540884C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_25440E360;
  if (!qword_25440E360)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25440EB08);
    v2 = sub_2453B8BF4(&qword_25440E560, (uint64_t (*)(uint64_t))type metadata accessor for ReplicatorMessage, (uint64_t)&protocol conformance descriptor for ReplicatorMessage);
    result = MEMORY[0x249534380](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_25440E360);
  }
  return result;
}

unint64_t sub_2454088C8()
{
  unint64_t result;

  result = qword_25440E0C0;
  if (!qword_25440E0C0)
  {
    result = MEMORY[0x249534380](&unk_245449F14, &type metadata for ReplicationXPCServerResponse.GetLocalDeviceID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E0C0);
  }
  return result;
}

uint64_t type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID(uint64_t a1)
{
  return sub_2453FB160(a1, (uint64_t *)&unk_25440E0B0);
}

unint64_t sub_245408920()
{
  unint64_t result;

  result = qword_25440E128;
  if (!qword_25440E128)
  {
    result = MEMORY[0x249534380](&unk_245449EC4, &type metadata for ReplicationXPCServerResponse.GetRecordsFailedRecordIDs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E128);
  }
  return result;
}

unint64_t sub_245408964()
{
  unint64_t result;

  result = qword_257464E10;
  if (!qword_257464E10)
  {
    result = MEMORY[0x249534380](&unk_245449E74, &type metadata for ReplicationXPCServerResponse.GetClientEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464E10);
  }
  return result;
}

unint64_t sub_2454089A8()
{
  unint64_t result;

  result = qword_257464320;
  if (!qword_257464320)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerResponse.GetRecordsFailedRecordIDs, &type metadata for ReplicationXPCServerResponse.GetRecordsFailedRecordIDs);
    atomic_store(result, (unint64_t *)&qword_257464320);
  }
  return result;
}

unint64_t sub_2454089F0()
{
  unint64_t result;

  result = qword_257464E30;
  if (!qword_257464E30)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationServiceError.Code, &type metadata for ReplicationServiceError.Code);
    atomic_store(result, (unint64_t *)&qword_257464E30);
  }
  return result;
}

uint64_t sub_245408A38(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_245408A54, (uint64_t (*)(void))sub_2453F6E38, (uint64_t (*)(void))sub_245408A98);
}

unint64_t sub_245408A54()
{
  unint64_t result;

  result = qword_257463AD0;
  if (!qword_257463AD0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.RegisterClient, &type metadata for ReplicationXPCServerParameters.RegisterClient);
    atomic_store(result, (unint64_t *)&qword_257463AD0);
  }
  return result;
}

unint64_t sub_245408A98()
{
  unint64_t result;

  result = qword_257463AD8;
  if (!qword_257463AD8)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.RegisterClient, &type metadata for ReplicationXPCServerParameters.RegisterClient);
    atomic_store(result, (unint64_t *)&qword_257463AD8);
  }
  return result;
}

uint64_t sub_245408ADC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_245408AF8, (uint64_t (*)(void))sub_2453F7298, (uint64_t (*)(void))sub_245408B3C);
}

unint64_t sub_245408AF8()
{
  unint64_t result;

  result = qword_257464E40;
  if (!qword_257464E40)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.UnregisterClient, &type metadata for ReplicationXPCServerParameters.UnregisterClient);
    atomic_store(result, (unint64_t *)&qword_257464E40);
  }
  return result;
}

unint64_t sub_245408B3C()
{
  unint64_t result;

  result = qword_257464E50;
  if (!qword_257464E50)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.UnregisterClient, &type metadata for ReplicationXPCServerParameters.UnregisterClient);
    atomic_store(result, (unint64_t *)&qword_257464E50);
  }
  return result;
}

uint64_t sub_245408B80(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_245408B9C, (uint64_t (*)(void))sub_2453F7710, (uint64_t (*)(void))sub_245408BE0);
}

unint64_t sub_245408B9C()
{
  unint64_t result;

  result = qword_257465860;
  if (!qword_257465860)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.GetClientEnabled, &type metadata for ReplicationXPCServerParameters.GetClientEnabled);
    atomic_store(result, (unint64_t *)&qword_257465860);
  }
  return result;
}

unint64_t sub_245408BE0()
{
  unint64_t result;

  result = qword_257464E68;
  if (!qword_257464E68)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.GetClientEnabled, &type metadata for ReplicationXPCServerParameters.GetClientEnabled);
    atomic_store(result, (unint64_t *)&qword_257464E68);
  }
  return result;
}

uint64_t sub_245408C24(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_245408C40, (uint64_t (*)(void))sub_2453F7798, (uint64_t (*)(void))sub_245408C84);
}

unint64_t sub_245408C40()
{
  unint64_t result;

  result = qword_257464E70;
  if (!qword_257464E70)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.EnableClient, &type metadata for ReplicationXPCServerParameters.EnableClient);
    atomic_store(result, (unint64_t *)&qword_257464E70);
  }
  return result;
}

unint64_t sub_245408C84()
{
  unint64_t result;

  result = qword_257464E80;
  if (!qword_257464E80)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.EnableClient, &type metadata for ReplicationXPCServerParameters.EnableClient);
    atomic_store(result, (unint64_t *)&qword_257464E80);
  }
  return result;
}

uint64_t sub_245408CC8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_245408CE4, (uint64_t (*)(void))sub_2453F77DC, (uint64_t (*)(void))sub_245408D28);
}

unint64_t sub_245408CE4()
{
  unint64_t result;

  result = qword_257465850;
  if (!qword_257465850)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.DisableClient, &type metadata for ReplicationXPCServerParameters.DisableClient);
    atomic_store(result, (unint64_t *)&qword_257465850);
  }
  return result;
}

unint64_t sub_245408D28()
{
  unint64_t result;

  result = qword_257464E98;
  if (!qword_257464E98)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.DisableClient, &type metadata for ReplicationXPCServerParameters.DisableClient);
    atomic_store(result, (unint64_t *)&qword_257464E98);
  }
  return result;
}

uint64_t sub_245408D6C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_245408D88, (uint64_t (*)(void))sub_2453F73FC, (uint64_t (*)(void))sub_245408DCC);
}

unint64_t sub_245408D88()
{
  unint64_t result;

  result = qword_257463C20;
  if (!qword_257463C20)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.GetClientDescriptor, &type metadata for ReplicationXPCServerParameters.GetClientDescriptor);
    atomic_store(result, (unint64_t *)&qword_257463C20);
  }
  return result;
}

unint64_t sub_245408DCC()
{
  unint64_t result;

  result = qword_257463C30;
  if (!qword_257463C30)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.GetClientDescriptor, &type metadata for ReplicationXPCServerParameters.GetClientDescriptor);
    atomic_store(result, (unint64_t *)&qword_257463C30);
  }
  return result;
}

uint64_t sub_245408E10(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_245408E2C, (uint64_t (*)(void))sub_245407D84, (uint64_t (*)(void))sub_245408E70);
}

unint64_t sub_245408E2C()
{
  unint64_t result;

  result = qword_257463AB0;
  if (!qword_257463AB0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.AddRecords, &type metadata for ReplicationXPCServerParameters.AddRecords);
    atomic_store(result, (unint64_t *)&qword_257463AB0);
  }
  return result;
}

unint64_t sub_245408E70()
{
  unint64_t result;

  result = qword_257464EA0;
  if (!qword_257464EA0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.AddRecords, &type metadata for ReplicationXPCServerParameters.AddRecords);
    atomic_store(result, (unint64_t *)&qword_257464EA0);
  }
  return result;
}

uint64_t sub_245408EB4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_245408ED0, (uint64_t (*)(void))sub_2453F720C, (uint64_t (*)(void))sub_245408F14);
}

unint64_t sub_245408ED0()
{
  unint64_t result;

  result = qword_257463C88;
  if (!qword_257463C88)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.RemoveRecords, &type metadata for ReplicationXPCServerParameters.RemoveRecords);
    atomic_store(result, (unint64_t *)&qword_257463C88);
  }
  return result;
}

unint64_t sub_245408F14()
{
  unint64_t result;

  result = qword_257464348;
  if (!qword_257464348)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.RemoveRecords, &type metadata for ReplicationXPCServerParameters.RemoveRecords);
    atomic_store(result, (unint64_t *)&qword_257464348);
  }
  return result;
}

uint64_t sub_245408F58(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_245408F74, (uint64_t (*)(void))sub_2453F7004, (uint64_t (*)(void))sub_245408FB8);
}

unint64_t sub_245408F74()
{
  unint64_t result;

  result = qword_257464330;
  if (!qword_257464330)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.GetRecords, &type metadata for ReplicationXPCServerParameters.GetRecords);
    atomic_store(result, (unint64_t *)&qword_257464330);
  }
  return result;
}

unint64_t sub_245408FB8()
{
  unint64_t result;

  result = qword_257464340;
  if (!qword_257464340)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.GetRecords, &type metadata for ReplicationXPCServerParameters.GetRecords);
    atomic_store(result, (unint64_t *)&qword_257464340);
  }
  return result;
}

uint64_t sub_245408FFC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_245409018, (uint64_t (*)(void))sub_2453F6D6C, (uint64_t (*)(void))sub_24540905C);
}

unint64_t sub_245409018()
{
  unint64_t result;

  result = qword_257463AE8;
  if (!qword_257463AE8)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.GetRecordVersions, &type metadata for ReplicationXPCServerParameters.GetRecordVersions);
    atomic_store(result, (unint64_t *)&qword_257463AE8);
  }
  return result;
}

unint64_t sub_24540905C()
{
  unint64_t result;

  result = qword_257463AF8;
  if (!qword_257463AF8)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.GetRecordVersions, &type metadata for ReplicationXPCServerParameters.GetRecordVersions);
    atomic_store(result, (unint64_t *)&qword_257463AF8);
  }
  return result;
}

uint64_t sub_2454090A0(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_2453B8BF4((unint64_t *)&unk_257464EB0, type metadata accessor for ReplicationXPCServerParameters.SendMessage, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerParameters.SendMessage);
  a1[2] = sub_2453B8BF4(&qword_257464920, type metadata accessor for ReplicationXPCServerParameters.SendMessage, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerParameters.SendMessage);
  result = sub_2453B8BF4((unint64_t *)&unk_257464EC0, type metadata accessor for ReplicationXPCServerParameters.SendMessage, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerParameters.SendMessage);
  a1[3] = result;
  return result;
}

uint64_t sub_245409118(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_245409134, (uint64_t (*)(void))sub_2453F7340, (uint64_t (*)(void))sub_245409178);
}

unint64_t sub_245409134()
{
  unint64_t result;

  result = qword_257463AC0;
  if (!qword_257463AC0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.GetMessages, &type metadata for ReplicationXPCServerParameters.GetMessages);
    atomic_store(result, (unint64_t *)&qword_257463AC0);
  }
  return result;
}

unint64_t sub_245409178()
{
  unint64_t result;

  result = qword_257463AC8;
  if (!qword_257463AC8)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerParameters.GetMessages, &type metadata for ReplicationXPCServerParameters.GetMessages);
    atomic_store(result, (unint64_t *)&qword_257463AC8);
  }
  return result;
}

uint64_t sub_2454091BC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_2453F6DB0, (uint64_t (*)(void))sub_2454091D8, (uint64_t (*)(void))sub_24540921C);
}

unint64_t sub_2454091D8()
{
  unint64_t result;

  result = qword_257463A98;
  if (!qword_257463A98)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerResponse.GetRecordsVersions, &type metadata for ReplicationXPCServerResponse.GetRecordsVersions);
    atomic_store(result, (unint64_t *)&qword_257463A98);
  }
  return result;
}

unint64_t sub_24540921C()
{
  unint64_t result;

  result = qword_257463AA0;
  if (!qword_257463AA0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerResponse.GetRecordsVersions, &type metadata for ReplicationXPCServerResponse.GetRecordsVersions);
    atomic_store(result, (unint64_t *)&qword_257463AA0);
  }
  return result;
}

uint64_t sub_245409260(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_2453F6DF4, (uint64_t (*)(void))sub_24540927C, (uint64_t (*)(void))sub_2454092C0);
}

unint64_t sub_24540927C()
{
  unint64_t result;

  result = qword_257463A70;
  if (!qword_257463A70)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerResponse.GetDevices, &type metadata for ReplicationXPCServerResponse.GetDevices);
    atomic_store(result, (unint64_t *)&qword_257463A70);
  }
  return result;
}

unint64_t sub_2454092C0()
{
  unint64_t result;

  result = qword_257463A78;
  if (!qword_257463A78)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerResponse.GetDevices, &type metadata for ReplicationXPCServerResponse.GetDevices);
    atomic_store(result, (unint64_t *)&qword_257463A78);
  }
  return result;
}

uint64_t sub_245409304(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_2453F7440, (uint64_t (*)(void))sub_245409320, (uint64_t (*)(void))sub_245409364);
}

unint64_t sub_245409320()
{
  unint64_t result;

  result = qword_257463C08;
  if (!qword_257463C08)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerResponse.GetClientDescriptor, &type metadata for ReplicationXPCServerResponse.GetClientDescriptor);
    atomic_store(result, (unint64_t *)&qword_257463C08);
  }
  return result;
}

unint64_t sub_245409364()
{
  unint64_t result;

  result = qword_257463C10;
  if (!qword_257463C10)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerResponse.GetClientDescriptor, &type metadata for ReplicationXPCServerResponse.GetClientDescriptor);
    atomic_store(result, (unint64_t *)&qword_257463C10);
  }
  return result;
}

uint64_t sub_2454093A8(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_2453B8BF4((unint64_t *)&unk_257465840, type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerResponse.ReceiveMessage);
  a1[2] = sub_2453B8BF4(&qword_257464ED0, type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerResponse.ReceiveMessage);
  result = sub_2453B8BF4((unint64_t *)&unk_257464ED8, type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerResponse.ReceiveMessage);
  a1[3] = result;
  return result;
}

uint64_t sub_245409420(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_2453F7384, (uint64_t (*)(void))sub_24540943C, (uint64_t (*)(void))sub_245409480);
}

unint64_t sub_24540943C()
{
  unint64_t result;

  result = qword_257463A88;
  if (!qword_257463A88)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerResponse.GetMessages, &type metadata for ReplicationXPCServerResponse.GetMessages);
    atomic_store(result, (unint64_t *)&qword_257463A88);
  }
  return result;
}

unint64_t sub_245409480()
{
  unint64_t result;

  result = qword_257463A90;
  if (!qword_257463A90)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerResponse.GetMessages, &type metadata for ReplicationXPCServerResponse.GetMessages);
    atomic_store(result, (unint64_t *)&qword_257463A90);
  }
  return result;
}

uint64_t sub_2454094C4(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_2453B8BF4((unint64_t *)&unk_25440E0E8, type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerResponse.GetLocalDeviceID);
  a1[2] = sub_2453B8BF4(&qword_257464310, type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerResponse.GetLocalDeviceID);
  result = sub_2453B8BF4(&qword_257464318, type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerResponse.GetLocalDeviceID);
  a1[3] = result;
  return result;
}

uint64_t sub_24540953C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_245409558, (uint64_t (*)(void))sub_2454089A8, (uint64_t (*)(void))sub_24540959C);
}

unint64_t sub_245409558()
{
  unint64_t result;

  result = qword_257464560;
  if (!qword_257464560)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerResponse.GetRecordsFailedRecordIDs, &type metadata for ReplicationXPCServerResponse.GetRecordsFailedRecordIDs);
    atomic_store(result, (unint64_t *)&qword_257464560);
  }
  return result;
}

unint64_t sub_24540959C()
{
  unint64_t result;

  result = qword_257464EE8;
  if (!qword_257464EE8)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerResponse.GetRecordsFailedRecordIDs, &type metadata for ReplicationXPCServerResponse.GetRecordsFailedRecordIDs);
    atomic_store(result, (unint64_t *)&qword_257464EE8);
  }
  return result;
}

uint64_t sub_2454095E0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_2453F7754, (uint64_t (*)(void))sub_2454095FC, (uint64_t (*)(void))sub_245409640);
}

unint64_t sub_2454095FC()
{
  unint64_t result;

  result = qword_257464EF8;
  if (!qword_257464EF8)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerResponse.GetClientEnabled, &type metadata for ReplicationXPCServerResponse.GetClientEnabled);
    atomic_store(result, (unint64_t *)&qword_257464EF8);
  }
  return result;
}

unint64_t sub_245409640()
{
  unint64_t result;

  result = qword_257464F00;
  if (!qword_257464F00)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationXPCServerResponse.GetClientEnabled, &type metadata for ReplicationXPCServerResponse.GetClientEnabled);
    atomic_store(result, (unint64_t *)&qword_257464F00);
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationServiceDefinition()
{
  return &type metadata for ReplicationServiceDefinition;
}

ValueMetadata *type metadata accessor for ReplicationServiceError()
{
  return &type metadata for ReplicationServiceError;
}

uint64_t storeEnumTagSinglePayload for ReplicationServiceError.Code(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_2454096F0 + 4 * byte_245447C79[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_245409724 + 4 * byte_245447C74[v4]))();
}

uint64_t sub_245409724(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24540972C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x245409734);
  return result;
}

uint64_t sub_245409740(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245409748);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_24540974C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245409754(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplicationServiceError.Code()
{
  return &type metadata for ReplicationServiceError.Code;
}

uint64_t sub_245409770()
{
  return type metadata accessor for ReplicationXPCServerParametersRecord(0);
}

void sub_245409778()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for ReplicatorRecord.ID(319);
  if (v0 <= 0x3F)
  {
    sub_245443B14();
    if (v1 <= 0x3F)
    {
      sub_24540B9E4(319, &qword_25440E430, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for ReplicationXPCServerParametersRecord()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ReplicationXPCServerParametersRecord.__allocating_init(id:version:values:expiration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of ReplicationXPCServerParametersRecord.__allocating_init(bsxpcCoder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t method lookup function for ReplicationXPCServerParametersExtendedAttribute()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ReplicationXPCServerParametersExtendedAttribute.__allocating_init(name:data:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t method lookup function for ReplicationXPCServerParametersRecordValue()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ReplicationXPCServerParametersRecordValue.__allocating_init(version:data:fileHandle:extendedAttributes:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t type metadata accessor for ReplicationXPCServerParametersAddRecords()
{
  return objc_opt_self();
}

uint64_t method lookup function for ReplicationXPCServerParametersAddRecords()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ReplicationXPCServerParametersAddRecords.__allocating_init(parameters:records:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters()
{
  return &type metadata for ReplicationXPCServerParameters;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.RegisterClient()
{
  return &type metadata for ReplicationXPCServerParameters.RegisterClient;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.UnregisterClient()
{
  return &type metadata for ReplicationXPCServerParameters.UnregisterClient;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.GetClientEnabled()
{
  return &type metadata for ReplicationXPCServerParameters.GetClientEnabled;
}

_QWORD *initializeBufferWithCopyOfBuffer for ReplicationXPCServerParameters.EnableClient(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithTake for ReplicationXPCServerParameters.EnableClient(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.EnableClient()
{
  return &type metadata for ReplicationXPCServerParameters.EnableClient;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.DisableClient()
{
  return &type metadata for ReplicationXPCServerParameters.DisableClient;
}

_QWORD *_s18ReplicatorServices30ReplicationXPCServerParametersO16UnregisterClientVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s18ReplicatorServices30ReplicationXPCServerParametersO16UnregisterClientVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_245409A30(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.GetClientDescriptor()
{
  return &type metadata for ReplicationXPCServerParameters.GetClientDescriptor;
}

uint64_t initializeBufferWithCopyOfBuffer for ReplicationXPCServerParameters.AddRecords(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ReplicatorRecordDestination()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for ReplicationXPCServerParameters.AddRecords(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for ReplicationXPCServerParameters.AddRecords(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicationXPCServerParameters.AddRecords(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 9))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplicationXPCServerParameters.AddRecords(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.AddRecords()
{
  return &type metadata for ReplicationXPCServerParameters.AddRecords;
}

uint64_t assignWithCopy for ReplicationXPCServerParameters.RemoveRecords(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for ReplicationXPCServerParameters.RemoveRecords(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicationXPCServerParameters.RemoveRecords(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 9))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplicationXPCServerParameters.RemoveRecords(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.RemoveRecords()
{
  return &type metadata for ReplicationXPCServerParameters.RemoveRecords;
}

uint64_t initializeWithCopy for ReplicationXPCServerParameters.GetRecords(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ReplicationXPCServerParameters.GetRecords(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ReplicationXPCServerParameters.GetRecords(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicationXPCServerParameters.GetRecords(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplicationXPCServerParameters.GetRecords(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.GetRecords()
{
  return &type metadata for ReplicationXPCServerParameters.GetRecords;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.GetRecordVersions()
{
  return &type metadata for ReplicationXPCServerParameters.GetRecordVersions;
}

char *initializeBufferWithCopyOfBuffer for ReplicationXPCServerParameters.SendMessage(char *a1, char *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v31 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v31 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_245443B14();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v10 = (int *)type metadata accessor for ReplicatorMessage();
    v11 = v10[5];
    v12 = &a1[v11];
    v13 = &a2[v11];
    v14 = *((_QWORD *)v13 + 1);
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *((_QWORD *)v12 + 1) = v14;
    v15 = v10[6];
    v16 = &a1[v15];
    v17 = &a2[v15];
    swift_bridgeObjectRetain();
    v9(v16, v17, v7);
    v18 = v10[7];
    v19 = &a1[v18];
    v20 = &a2[v18];
    v21 = *((_QWORD *)v20 + 1);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_QWORD *)v19 + 1) = v21;
    *(_QWORD *)&a1[v10[8]] = *(_QWORD *)&a2[v10[8]];
    v22 = v10[9];
    v23 = (uint64_t *)&a1[v22];
    v24 = (uint64_t *)&a2[v22];
    v25 = *v24;
    v26 = v24[1];
    swift_bridgeObjectRetain();
    sub_2453CFFAC(v25, v26);
    *v23 = v25;
    v23[1] = v26;
    v27 = v10[10];
    v28 = &a1[v27];
    v29 = &a2[v27];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(&a2[v27], 1, v7))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v9(v28, v29, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v28, 0, 1, v7);
    }
    v32 = *(int *)(a3 + 20);
    v33 = *(int *)(a3 + 24);
    v34 = &a1[v32];
    v35 = &a2[v32];
    *(_QWORD *)v34 = *(_QWORD *)v35;
    v34[8] = v35[8];
    v36 = &a1[v33];
    v37 = &a2[v33];
    *(_QWORD *)v36 = *(_QWORD *)v37;
    v36[8] = v37[8];
  }
  return a1;
}

uint64_t initializeWithCopy for ReplicationXPCServerParameters.SendMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = sub_245443B14();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v9 = (int *)type metadata accessor for ReplicatorMessage();
  v10 = v9[5];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v14 = v9[6];
  v15 = a1 + v14;
  v16 = a2 + v14;
  swift_bridgeObjectRetain();
  v8(v15, v16, v6);
  v17 = v9[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  *(_QWORD *)(a1 + v9[8]) = *(_QWORD *)(a2 + v9[8]);
  v21 = v9[9];
  v22 = (uint64_t *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v24 = *v23;
  v25 = v23[1];
  swift_bridgeObjectRetain();
  sub_2453CFFAC(v24, v25);
  *v22 = v24;
  v22[1] = v25;
  v26 = v9[10];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a2 + v26, 1, v6))
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v8((uint64_t)v27, (uint64_t)v28, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v27, 0, 1, v6);
  }
  v30 = *(int *)(a3 + 20);
  v31 = *(int *)(a3 + 24);
  v32 = a1 + v30;
  v33 = a2 + v30;
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
  v34 = a1 + v31;
  v35 = a2 + v31;
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
  return a1;
}

char *assignWithCopy for ReplicationXPCServerParameters.SendMessage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t (*v26)(const void *, uint64_t, uint64_t);
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v6 = sub_245443B14();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = (int *)type metadata accessor for ReplicatorMessage();
  v10 = v9[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8(&a1[v9[6]], &a2[v9[6]], v6);
  v13 = v9[7];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[v9[8]] = *(_QWORD *)&a2[v9[8]];
  v16 = v9[9];
  v17 = (uint64_t *)&a1[v16];
  v18 = (uint64_t *)&a2[v16];
  v19 = *v18;
  v20 = v18[1];
  sub_2453CFFAC(*v18, v20);
  v21 = *v17;
  v22 = v17[1];
  *v17 = v19;
  v17[1] = v20;
  sub_2453BDCF8(v21, v22);
  v23 = v9[10];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v20) = v26(&a1[v23], 1, v6);
  v27 = v26(v25, 1, v6);
  if (!(_DWORD)v20)
  {
    if (!v27)
    {
      v8(v24, v25, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v24, v6);
    goto LABEL_6;
  }
  if (v27)
  {
LABEL_6:
    v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v24, v25, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v24, 0, 1, v6);
LABEL_7:
  v29 = *(int *)(a3 + 20);
  v30 = &a1[v29];
  v31 = &a2[v29];
  v32 = *(_QWORD *)v31;
  v30[8] = v31[8];
  *(_QWORD *)v30 = v32;
  v33 = *(int *)(a3 + 24);
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = *(_QWORD *)v35;
  v34[8] = v35[8];
  *(_QWORD *)v34 = v36;
  return a1;
}

char *initializeWithTake for ReplicationXPCServerParameters.SendMessage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  v6 = sub_245443B14();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = (int *)type metadata accessor for ReplicatorMessage();
  *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
  v8(&a1[v9[6]], &a2[v9[6]], v6);
  *(_OWORD *)&a1[v9[7]] = *(_OWORD *)&a2[v9[7]];
  *(_QWORD *)&a1[v9[8]] = *(_QWORD *)&a2[v9[8]];
  *(_OWORD *)&a1[v9[9]] = *(_OWORD *)&a2[v9[9]];
  v10 = v9[10];
  v11 = &a1[v10];
  v12 = &a2[v10];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v10], 1, v6))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v8(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  v14 = *(int *)(a3 + 20);
  v15 = *(int *)(a3 + 24);
  v16 = &a1[v14];
  v17 = &a2[v14];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v16[8] = v17[8];
  v18 = &a1[v15];
  v19 = &a2[v15];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v18[8] = v19[8];
  return a1;
}

char *assignWithTake for ReplicationXPCServerParameters.SendMessage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t (*v26)(const void *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;

  v6 = sub_245443B14();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = (int *)type metadata accessor for ReplicatorMessage();
  v10 = v9[5];
  v11 = &a1[v10];
  v12 = (uint64_t *)&a2[v10];
  v14 = *v12;
  v13 = v12[1];
  *(_QWORD *)v11 = v14;
  *((_QWORD *)v11 + 1) = v13;
  swift_bridgeObjectRelease();
  v8(&a1[v9[6]], &a2[v9[6]], v6);
  v15 = v9[7];
  v16 = &a1[v15];
  v17 = (uint64_t *)&a2[v15];
  v19 = *v17;
  v18 = v17[1];
  *(_QWORD *)v16 = v19;
  *((_QWORD *)v16 + 1) = v18;
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[v9[8]] = *(_QWORD *)&a2[v9[8]];
  v20 = v9[9];
  v21 = *(_QWORD *)&a1[v20];
  v22 = *(_QWORD *)&a1[v20 + 8];
  *(_OWORD *)&a1[v20] = *(_OWORD *)&a2[v20];
  sub_2453BDCF8(v21, v22);
  v23 = v9[10];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v27 = v26(&a1[v23], 1, v6);
  v28 = v26(v25, 1, v6);
  if (!v27)
  {
    if (!v28)
    {
      v8(v24, v25, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v24, v6);
    goto LABEL_6;
  }
  if (v28)
  {
LABEL_6:
    v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v24, v25, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v24, 0, 1, v6);
LABEL_7:
  v30 = *(int *)(a3 + 20);
  v31 = *(int *)(a3 + 24);
  v32 = &a1[v30];
  v33 = &a2[v30];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v32[8] = v33[8];
  v34 = &a1[v31];
  v35 = &a2[v31];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v34[8] = v35[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicationXPCServerParameters.SendMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for ReplicationXPCServerParameters.SendMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24540A794()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ReplicatorMessage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.GetMessages()
{
  return &type metadata for ReplicationXPCServerParameters.GetMessages;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse()
{
  return &type metadata for ReplicationXPCServerResponse;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetRecordsVersions()
{
  return &type metadata for ReplicationXPCServerResponse.GetRecordsVersions;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetDevices()
{
  return &type metadata for ReplicationXPCServerResponse.GetDevices;
}

uint64_t destroy for ClientDescriptor()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ClientDescriptor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ClientDescriptor(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ClientDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClientDescriptor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClientDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetClientDescriptor()
{
  return &type metadata for ReplicationXPCServerResponse.GetClientDescriptor;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReplicationXPCServerResponse.ReceiveMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v4 = type metadata accessor for ReplicatorMessage();
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v30 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v30 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = (int *)v4;
    v7 = sub_245443B14();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v10 = v6[5];
    v11 = (uint64_t *)((char *)a1 + v10);
    v12 = (uint64_t *)((char *)a2 + v10);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    v14 = v6[6];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    swift_bridgeObjectRetain();
    v9((uint64_t *)v15, (uint64_t *)v16, v7);
    v17 = v6[7];
    v18 = (uint64_t *)((char *)a1 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    *(uint64_t *)((char *)a1 + v6[8]) = *(uint64_t *)((char *)a2 + v6[8]);
    v21 = v6[9];
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = *v23;
    v25 = v23[1];
    swift_bridgeObjectRetain();
    sub_2453CFFAC(v24, v25);
    *v22 = v24;
    v22[1] = v25;
    v26 = v6[10];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v28, 1, v7))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v27, (uint64_t *)v28, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v27, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t _s18ReplicatorServices30ReplicationXPCServerParametersO11SendMessageVwxx_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t result;
  void (*v7)(uint64_t, uint64_t);

  v2 = sub_245443B14();
  v3 = *(_QWORD *)(v2 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v7(a1, v2);
  v4 = (int *)type metadata accessor for ReplicatorMessage();
  swift_bridgeObjectRelease();
  v7(a1 + v4[6], v2);
  swift_bridgeObjectRelease();
  sub_2453BDCF8(*(_QWORD *)(a1 + v4[9]), *(_QWORD *)(a1 + v4[9] + 8));
  v5 = a1 + v4[10];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v5, 1, v2);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v7)(v5, v2);
  return result;
}

uint64_t initializeWithCopy for ReplicationXPCServerResponse.ReceiveMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;

  v4 = sub_245443B14();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6(a1, a2, v4);
  v7 = (int *)type metadata accessor for ReplicatorMessage();
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = v7[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  swift_bridgeObjectRetain();
  v6(v13, v14, v4);
  v15 = v7[7];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  *(_QWORD *)(a1 + v7[8]) = *(_QWORD *)(a2 + v7[8]);
  v19 = v7[9];
  v20 = (uint64_t *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v22 = *v21;
  v23 = v21[1];
  swift_bridgeObjectRetain();
  sub_2453CFFAC(v22, v23);
  *v20 = v22;
  v20[1] = v23;
  v24 = v7[10];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v26, 1, v4))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v6((uint64_t)v25, (uint64_t)v26, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v25, 0, 1, v4);
  }
  return a1;
}

char *assignWithCopy for ReplicationXPCServerResponse.ReceiveMessage(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void *, const void *, uint64_t);
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t (*v24)(const void *, uint64_t, uint64_t);
  int v25;
  uint64_t v26;

  v4 = sub_245443B14();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 24);
  v6(a1, a2, v4);
  v7 = (int *)type metadata accessor for ReplicatorMessage();
  v8 = v7[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6(&a1[v7[6]], &a2[v7[6]], v4);
  v11 = v7[7];
  v12 = &a1[v11];
  v13 = &a2[v11];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[v7[8]] = *(_QWORD *)&a2[v7[8]];
  v14 = v7[9];
  v15 = (uint64_t *)&a1[v14];
  v16 = (uint64_t *)&a2[v14];
  v17 = *v16;
  v18 = v16[1];
  sub_2453CFFAC(*v16, v18);
  v19 = *v15;
  v20 = v15[1];
  *v15 = v17;
  v15[1] = v18;
  sub_2453BDCF8(v19, v20);
  v21 = v7[10];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  LODWORD(v17) = v24(&a1[v21], 1, v4);
  v25 = v24(v23, 1, v4);
  if (!(_DWORD)v17)
  {
    if (!v25)
    {
      v6(v22, v23, v4);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v22, v4);
    goto LABEL_6;
  }
  if (v25)
  {
LABEL_6:
    v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v22, v23, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v22, 0, 1, v4);
  return a1;
}

char *initializeWithTake for ReplicationXPCServerResponse.ReceiveMessage(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void *, const void *, uint64_t);
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = sub_245443B14();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 32);
  v6(a1, a2, v4);
  v7 = (int *)type metadata accessor for ReplicatorMessage();
  *(_OWORD *)&a1[v7[5]] = *(_OWORD *)&a2[v7[5]];
  v6(&a1[v7[6]], &a2[v7[6]], v4);
  *(_OWORD *)&a1[v7[7]] = *(_OWORD *)&a2[v7[7]];
  *(_QWORD *)&a1[v7[8]] = *(_QWORD *)&a2[v7[8]];
  *(_OWORD *)&a1[v7[9]] = *(_OWORD *)&a2[v7[9]];
  v8 = v7[10];
  v9 = &a1[v8];
  v10 = &a2[v8];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v6(v9, v10, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v9, 0, 1, v4);
  }
  return a1;
}

char *assignWithTake for ReplicationXPCServerResponse.ReceiveMessage(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void *, const void *, uint64_t);
  int *v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t (*v24)(const void *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;

  v4 = sub_245443B14();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(void *, const void *, uint64_t))(v5 + 40);
  v6(a1, a2, v4);
  v7 = (int *)type metadata accessor for ReplicatorMessage();
  v8 = v7[5];
  v9 = &a1[v8];
  v10 = (uint64_t *)&a2[v8];
  v12 = *v10;
  v11 = v10[1];
  *(_QWORD *)v9 = v12;
  *((_QWORD *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  v6(&a1[v7[6]], &a2[v7[6]], v4);
  v13 = v7[7];
  v14 = &a1[v13];
  v15 = (uint64_t *)&a2[v13];
  v17 = *v15;
  v16 = v15[1];
  *(_QWORD *)v14 = v17;
  *((_QWORD *)v14 + 1) = v16;
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[v7[8]] = *(_QWORD *)&a2[v7[8]];
  v18 = v7[9];
  v19 = *(_QWORD *)&a1[v18];
  v20 = *(_QWORD *)&a1[v18 + 8];
  *(_OWORD *)&a1[v18] = *(_OWORD *)&a2[v18];
  sub_2453BDCF8(v19, v20);
  v21 = v7[10];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  v25 = v24(&a1[v21], 1, v4);
  v26 = v24(v23, 1, v4);
  if (!v25)
  {
    if (!v26)
    {
      v6(v22, v23, v4);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v22, v4);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v22, v23, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v22, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicationXPCServerResponse.ReceiveMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReplicatorMessage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ReplicationXPCServerResponse.ReceiveMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReplicatorMessage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_24540B3F4()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ReplicatorMessage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetMessages()
{
  return &type metadata for ReplicationXPCServerResponse.GetMessages;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReplicationXPCServerResponse.GetLocalDeviceID(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = sub_245443B14();
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      memcpy(a1, a2, *(_QWORD *)(v4 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
  }
  return a1;
}

uint64_t destroy for ReplicatorRecord.ID.Ownership(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = sub_245443B14();
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *initializeWithCopy for ReplicationXPCServerResponse.GetLocalDeviceID(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_245443B14();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithCopy for ReplicationXPCServerResponse.GetLocalDeviceID(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = sub_245443B14();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

void *initializeWithTake for ReplicationXPCServerResponse.GetLocalDeviceID(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_245443B14();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithTake for ReplicationXPCServerResponse.GetLocalDeviceID(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = sub_245443B14();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicationXPCServerResponse.GetLocalDeviceID()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24540B8DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ReplicationXPCServerResponse.GetLocalDeviceID()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24540B928(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_24540B96C()
{
  unint64_t v0;

  sub_24540B9E4(319, (unint64_t *)&qword_25440E900, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_24540B9E4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_24544406C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetRecordsFailedRecordIDs()
{
  return &type metadata for ReplicationXPCServerResponse.GetRecordsFailedRecordIDs;
}

uint64_t storeEnumTagSinglePayload for ReplicationXPCServerResponse.GetClientEnabled(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24540BA8C + 4 * byte_245447C83[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24540BAC0 + 4 * byte_245447C7E[v4]))();
}

uint64_t sub_24540BAC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24540BAC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24540BAD0);
  return result;
}

uint64_t sub_24540BADC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24540BAE4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24540BAE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24540BAF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetClientEnabled()
{
  return &type metadata for ReplicationXPCServerResponse.GetClientEnabled;
}

uint64_t type metadata accessor for ReplicationXPCServerResponseGetRecords()
{
  return objc_opt_self();
}

uint64_t method lookup function for ReplicationXPCServerResponseGetRecords()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ReplicationXPCServerResponseGetRecords.__allocating_init(records:failedRecordIDs:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of ReplicationXPCServerResponseGetRecords.__allocating_init(bsxpcCoder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetClientEnabled.CodingKeys()
{
  return &type metadata for ReplicationXPCServerResponse.GetClientEnabled.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetRecordsFailedRecordIDs.CodingKeys()
{
  return &type metadata for ReplicationXPCServerResponse.GetRecordsFailedRecordIDs.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID.CodingKeys()
{
  return &type metadata for ReplicationXPCServerResponse.GetLocalDeviceID.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetMessages.CodingKeys()
{
  return &type metadata for ReplicationXPCServerResponse.GetMessages.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage.CodingKeys()
{
  return &type metadata for ReplicationXPCServerResponse.ReceiveMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetClientDescriptor.CodingKeys()
{
  return &type metadata for ReplicationXPCServerResponse.GetClientDescriptor.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetDevices.CodingKeys()
{
  return &type metadata for ReplicationXPCServerResponse.GetDevices.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerResponse.GetRecordsVersions.CodingKeys()
{
  return &type metadata for ReplicationXPCServerResponse.GetRecordsVersions.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.GetMessages.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.GetMessages.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ReplicationXPCServerParameters.SendMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24540BC28 + 4 * byte_245447C8D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24540BC5C + 4 * byte_245447C88[v4]))();
}

uint64_t sub_24540BC5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24540BC64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24540BC6CLL);
  return result;
}

uint64_t sub_24540BC78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24540BC80);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24540BC84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24540BC8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.SendMessage.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.SendMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.GetRecordVersions.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.GetRecordVersions.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ReplicationXPCServerParameters.GetRecords.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplicationXPCServerParameters.GetRecords.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_24540BD94 + 4 * byte_245447C97[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_24540BDC8 + 4 * byte_245447C92[v4]))();
}

uint64_t sub_24540BDC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24540BDD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24540BDD8);
  return result;
}

uint64_t sub_24540BDE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24540BDECLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_24540BDF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24540BDF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.GetRecords.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.GetRecords.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.RemoveRecords.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.RemoveRecords.CodingKeys;
}

uint64_t _s18ReplicatorServices30ReplicationXPCServerParametersO13RemoveRecordsV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24540BE78 + 4 * byte_245447CA1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24540BEAC + 4 * byte_245447C9C[v4]))();
}

uint64_t sub_24540BEAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24540BEB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24540BEBCLL);
  return result;
}

uint64_t sub_24540BEC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24540BED0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24540BED4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24540BEDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.AddRecords.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.AddRecords.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.GetClientDescriptor.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.GetClientDescriptor.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.DisableClient.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.DisableClient.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.EnableClient.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.EnableClient.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.GetClientEnabled.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.GetClientEnabled.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.UnregisterClient.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.UnregisterClient.CodingKeys;
}

uint64_t _s18ReplicatorServices28ReplicationXPCServerResponseO16GetClientEnabledV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_24540BF88 + 4 * byte_245447CA6[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24540BFA8 + 4 * byte_245447CAB[v4]))();
}

_BYTE *sub_24540BF88(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24540BFA8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24540BFB0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24540BFB8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24540BFC0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24540BFC8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ReplicationXPCServerParameters.RegisterClient.CodingKeys()
{
  return &type metadata for ReplicationXPCServerParameters.RegisterClient.CodingKeys;
}

unint64_t sub_24540BFE8()
{
  unint64_t result;

  result = qword_257464FA8;
  if (!qword_257464FA8)
  {
    result = MEMORY[0x249534380](&unk_2454490A4, &type metadata for ReplicationXPCServerParameters.RegisterClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464FA8);
  }
  return result;
}

unint64_t sub_24540C030()
{
  unint64_t result;

  result = qword_257464FB0;
  if (!qword_257464FB0)
  {
    result = MEMORY[0x249534380](&unk_24544915C, &type metadata for ReplicationXPCServerParameters.UnregisterClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464FB0);
  }
  return result;
}

unint64_t sub_24540C078()
{
  unint64_t result;

  result = qword_257464FB8;
  if (!qword_257464FB8)
  {
    result = MEMORY[0x249534380](&unk_245449214, &type metadata for ReplicationXPCServerParameters.GetClientEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464FB8);
  }
  return result;
}

unint64_t sub_24540C0C0()
{
  unint64_t result;

  result = qword_257464FC0;
  if (!qword_257464FC0)
  {
    result = MEMORY[0x249534380](&unk_2454492CC, &type metadata for ReplicationXPCServerParameters.EnableClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464FC0);
  }
  return result;
}

unint64_t sub_24540C108()
{
  unint64_t result;

  result = qword_257464FC8;
  if (!qword_257464FC8)
  {
    result = MEMORY[0x249534380](&unk_245449384, &type metadata for ReplicationXPCServerParameters.DisableClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464FC8);
  }
  return result;
}

unint64_t sub_24540C150()
{
  unint64_t result;

  result = qword_257464FD0;
  if (!qword_257464FD0)
  {
    result = MEMORY[0x249534380](&unk_24544943C, &type metadata for ReplicationXPCServerParameters.GetClientDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464FD0);
  }
  return result;
}

unint64_t sub_24540C198()
{
  unint64_t result;

  result = qword_257464FD8;
  if (!qword_257464FD8)
  {
    result = MEMORY[0x249534380](&unk_2454494F4, &type metadata for ReplicationXPCServerParameters.AddRecords.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464FD8);
  }
  return result;
}

unint64_t sub_24540C1E0()
{
  unint64_t result;

  result = qword_257464FE0;
  if (!qword_257464FE0)
  {
    result = MEMORY[0x249534380](&unk_2454495AC, &type metadata for ReplicationXPCServerParameters.RemoveRecords.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464FE0);
  }
  return result;
}

unint64_t sub_24540C228()
{
  unint64_t result;

  result = qword_257464FE8;
  if (!qword_257464FE8)
  {
    result = MEMORY[0x249534380](&unk_245449664, &type metadata for ReplicationXPCServerParameters.GetRecords.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464FE8);
  }
  return result;
}

unint64_t sub_24540C270()
{
  unint64_t result;

  result = qword_257464FF0;
  if (!qword_257464FF0)
  {
    result = MEMORY[0x249534380](&unk_24544971C, &type metadata for ReplicationXPCServerParameters.GetRecordVersions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464FF0);
  }
  return result;
}

unint64_t sub_24540C2B8()
{
  unint64_t result;

  result = qword_257464FF8;
  if (!qword_257464FF8)
  {
    result = MEMORY[0x249534380](&unk_2454497D4, &type metadata for ReplicationXPCServerParameters.SendMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257464FF8);
  }
  return result;
}

unint64_t sub_24540C300()
{
  unint64_t result;

  result = qword_257465000;
  if (!qword_257465000)
  {
    result = MEMORY[0x249534380](&unk_24544988C, &type metadata for ReplicationXPCServerParameters.GetMessages.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465000);
  }
  return result;
}

unint64_t sub_24540C348()
{
  unint64_t result;

  result = qword_257465008;
  if (!qword_257465008)
  {
    result = MEMORY[0x249534380](&unk_245449944, &type metadata for ReplicationXPCServerResponse.GetRecordsVersions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465008);
  }
  return result;
}

unint64_t sub_24540C390()
{
  unint64_t result;

  result = qword_257465010;
  if (!qword_257465010)
  {
    result = MEMORY[0x249534380](&unk_2454499FC, &type metadata for ReplicationXPCServerResponse.GetDevices.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465010);
  }
  return result;
}

unint64_t sub_24540C3D8()
{
  unint64_t result;

  result = qword_257465018;
  if (!qword_257465018)
  {
    result = MEMORY[0x249534380](&unk_245449AB4, &type metadata for ReplicationXPCServerResponse.GetClientDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465018);
  }
  return result;
}

unint64_t sub_24540C420()
{
  unint64_t result;

  result = qword_257465020;
  if (!qword_257465020)
  {
    result = MEMORY[0x249534380](&unk_245449B6C, &type metadata for ReplicationXPCServerResponse.ReceiveMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465020);
  }
  return result;
}

unint64_t sub_24540C468()
{
  unint64_t result;

  result = qword_257465028;
  if (!qword_257465028)
  {
    result = MEMORY[0x249534380](&unk_245449C24, &type metadata for ReplicationXPCServerResponse.GetMessages.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465028);
  }
  return result;
}

unint64_t sub_24540C4B0()
{
  unint64_t result;

  result = qword_257465030;
  if (!qword_257465030)
  {
    result = MEMORY[0x249534380](&unk_245449CDC, &type metadata for ReplicationXPCServerResponse.GetLocalDeviceID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465030);
  }
  return result;
}

unint64_t sub_24540C4F8()
{
  unint64_t result;

  result = qword_257465038;
  if (!qword_257465038)
  {
    result = MEMORY[0x249534380](&unk_245449D94, &type metadata for ReplicationXPCServerResponse.GetRecordsFailedRecordIDs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465038);
  }
  return result;
}

unint64_t sub_24540C540()
{
  unint64_t result;

  result = qword_257465040;
  if (!qword_257465040)
  {
    result = MEMORY[0x249534380](&unk_245449E4C, &type metadata for ReplicationXPCServerResponse.GetClientEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465040);
  }
  return result;
}

unint64_t sub_24540C588()
{
  unint64_t result;

  result = qword_257465048;
  if (!qword_257465048)
  {
    result = MEMORY[0x249534380](&unk_245449DBC, &type metadata for ReplicationXPCServerResponse.GetClientEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465048);
  }
  return result;
}

unint64_t sub_24540C5D0()
{
  unint64_t result;

  result = qword_257465050;
  if (!qword_257465050)
  {
    result = MEMORY[0x249534380](&unk_245449DE4, &type metadata for ReplicationXPCServerResponse.GetClientEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465050);
  }
  return result;
}

unint64_t sub_24540C618()
{
  unint64_t result;

  result = qword_25440E138;
  if (!qword_25440E138)
  {
    result = MEMORY[0x249534380](&unk_245449D04, &type metadata for ReplicationXPCServerResponse.GetRecordsFailedRecordIDs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E138);
  }
  return result;
}

unint64_t sub_24540C660()
{
  unint64_t result;

  result = qword_25440E130;
  if (!qword_25440E130)
  {
    result = MEMORY[0x249534380](&unk_245449D2C, &type metadata for ReplicationXPCServerResponse.GetRecordsFailedRecordIDs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E130);
  }
  return result;
}

unint64_t sub_24540C6A8()
{
  unint64_t result;

  result = qword_25440E0D8;
  if (!qword_25440E0D8)
  {
    result = MEMORY[0x249534380](&unk_245449C4C, &type metadata for ReplicationXPCServerResponse.GetLocalDeviceID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E0D8);
  }
  return result;
}

unint64_t sub_24540C6F0()
{
  unint64_t result;

  result = qword_25440E0D0;
  if (!qword_25440E0D0)
  {
    result = MEMORY[0x249534380](&unk_245449C74, &type metadata for ReplicationXPCServerResponse.GetLocalDeviceID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E0D0);
  }
  return result;
}

unint64_t sub_24540C738()
{
  unint64_t result;

  result = qword_25440EA38;
  if (!qword_25440EA38)
  {
    result = MEMORY[0x249534380](&unk_245449B94, &type metadata for ReplicationXPCServerResponse.GetMessages.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EA38);
  }
  return result;
}

unint64_t sub_24540C780()
{
  unint64_t result;

  result = qword_25440EA30;
  if (!qword_25440EA30)
  {
    result = MEMORY[0x249534380](&unk_245449BBC, &type metadata for ReplicationXPCServerResponse.GetMessages.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EA30);
  }
  return result;
}

unint64_t sub_24540C7C8()
{
  unint64_t result;

  result = qword_257465058;
  if (!qword_257465058)
  {
    result = MEMORY[0x249534380](&unk_245449ADC, &type metadata for ReplicationXPCServerResponse.ReceiveMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465058);
  }
  return result;
}

unint64_t sub_24540C810()
{
  unint64_t result;

  result = qword_257465060;
  if (!qword_257465060)
  {
    result = MEMORY[0x249534380](&unk_245449B04, &type metadata for ReplicationXPCServerResponse.ReceiveMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465060);
  }
  return result;
}

unint64_t sub_24540C858()
{
  unint64_t result;

  result = qword_25440EBB8;
  if (!qword_25440EBB8)
  {
    result = MEMORY[0x249534380](&unk_245449A24, &type metadata for ReplicationXPCServerResponse.GetClientDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EBB8);
  }
  return result;
}

unint64_t sub_24540C8A0()
{
  unint64_t result;

  result = qword_25440EBB0;
  if (!qword_25440EBB0)
  {
    result = MEMORY[0x249534380](&unk_245449A4C, &type metadata for ReplicationXPCServerResponse.GetClientDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EBB0);
  }
  return result;
}

unint64_t sub_24540C8E8()
{
  unint64_t result;

  result = qword_25440EA08;
  if (!qword_25440EA08)
  {
    result = MEMORY[0x249534380](&unk_24544996C, &type metadata for ReplicationXPCServerResponse.GetDevices.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EA08);
  }
  return result;
}

unint64_t sub_24540C930()
{
  unint64_t result;

  result = qword_25440EA00;
  if (!qword_25440EA00)
  {
    result = MEMORY[0x249534380](&unk_245449994, &type metadata for ReplicationXPCServerResponse.GetDevices.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EA00);
  }
  return result;
}

unint64_t sub_24540C978()
{
  unint64_t result;

  result = qword_25440EA58;
  if (!qword_25440EA58)
  {
    result = MEMORY[0x249534380](&unk_2454498B4, &type metadata for ReplicationXPCServerResponse.GetRecordsVersions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EA58);
  }
  return result;
}

unint64_t sub_24540C9C0()
{
  unint64_t result;

  result = qword_25440EA50;
  if (!qword_25440EA50)
  {
    result = MEMORY[0x249534380](&unk_2454498DC, &type metadata for ReplicationXPCServerResponse.GetRecordsVersions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EA50);
  }
  return result;
}

unint64_t sub_24540CA08()
{
  unint64_t result;

  result = qword_25440EA88;
  if (!qword_25440EA88)
  {
    result = MEMORY[0x249534380](&unk_2454497FC, &type metadata for ReplicationXPCServerParameters.GetMessages.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EA88);
  }
  return result;
}

unint64_t sub_24540CA50()
{
  unint64_t result;

  result = qword_25440EA80;
  if (!qword_25440EA80)
  {
    result = MEMORY[0x249534380](&unk_245449824, &type metadata for ReplicationXPCServerParameters.GetMessages.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EA80);
  }
  return result;
}

unint64_t sub_24540CA98()
{
  unint64_t result;

  result = qword_257465068;
  if (!qword_257465068)
  {
    result = MEMORY[0x249534380](&unk_245449744, &type metadata for ReplicationXPCServerParameters.SendMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465068);
  }
  return result;
}

unint64_t sub_24540CAE0()
{
  unint64_t result;

  result = qword_257465070;
  if (!qword_257465070)
  {
    result = MEMORY[0x249534380](&unk_24544976C, &type metadata for ReplicationXPCServerParameters.SendMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465070);
  }
  return result;
}

unint64_t sub_24540CB28()
{
  unint64_t result;

  result = qword_25440EAC8;
  if (!qword_25440EAC8)
  {
    result = MEMORY[0x249534380](&unk_24544968C, &type metadata for ReplicationXPCServerParameters.GetRecordVersions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EAC8);
  }
  return result;
}

unint64_t sub_24540CB70()
{
  unint64_t result;

  result = qword_25440EAC0;
  if (!qword_25440EAC0)
  {
    result = MEMORY[0x249534380](&unk_2454496B4, &type metadata for ReplicationXPCServerParameters.GetRecordVersions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EAC0);
  }
  return result;
}

unint64_t sub_24540CBB8()
{
  unint64_t result;

  result = qword_25440E158;
  if (!qword_25440E158)
  {
    result = MEMORY[0x249534380](&unk_2454495D4, &type metadata for ReplicationXPCServerParameters.GetRecords.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E158);
  }
  return result;
}

unint64_t sub_24540CC00()
{
  unint64_t result;

  result = qword_25440E150;
  if (!qword_25440E150)
  {
    result = MEMORY[0x249534380](&unk_2454495FC, &type metadata for ReplicationXPCServerParameters.GetRecords.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E150);
  }
  return result;
}

unint64_t sub_24540CC48()
{
  unint64_t result;

  result = qword_25440E318;
  if (!qword_25440E318)
  {
    result = MEMORY[0x249534380](&unk_24544951C, &type metadata for ReplicationXPCServerParameters.RemoveRecords.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E318);
  }
  return result;
}

unint64_t sub_24540CC90()
{
  unint64_t result;

  result = qword_25440E310;
  if (!qword_25440E310)
  {
    result = MEMORY[0x249534380](&unk_245449544, &type metadata for ReplicationXPCServerParameters.RemoveRecords.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E310);
  }
  return result;
}

unint64_t sub_24540CCD8()
{
  unint64_t result;

  result = qword_25440E588;
  if (!qword_25440E588)
  {
    result = MEMORY[0x249534380](&unk_245449464, &type metadata for ReplicationXPCServerParameters.AddRecords.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E588);
  }
  return result;
}

unint64_t sub_24540CD20()
{
  unint64_t result;

  result = qword_25440E580;
  if (!qword_25440E580)
  {
    result = MEMORY[0x249534380](&unk_24544948C, &type metadata for ReplicationXPCServerParameters.AddRecords.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E580);
  }
  return result;
}

unint64_t sub_24540CD68()
{
  unint64_t result;

  result = qword_25440EBE8;
  if (!qword_25440EBE8)
  {
    result = MEMORY[0x249534380](&unk_2454493AC, &type metadata for ReplicationXPCServerParameters.GetClientDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EBE8);
  }
  return result;
}

unint64_t sub_24540CDB0()
{
  unint64_t result;

  result = qword_25440EBE0;
  if (!qword_25440EBE0)
  {
    result = MEMORY[0x249534380](&unk_2454493D4, &type metadata for ReplicationXPCServerParameters.GetClientDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EBE0);
  }
  return result;
}

unint64_t sub_24540CDF8()
{
  unint64_t result;

  result = qword_257465078;
  if (!qword_257465078)
  {
    result = MEMORY[0x249534380](&unk_2454492F4, &type metadata for ReplicationXPCServerParameters.DisableClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465078);
  }
  return result;
}

unint64_t sub_24540CE40()
{
  unint64_t result;

  result = qword_257465080;
  if (!qword_257465080)
  {
    result = MEMORY[0x249534380](&unk_24544931C, &type metadata for ReplicationXPCServerParameters.DisableClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465080);
  }
  return result;
}

unint64_t sub_24540CE88()
{
  unint64_t result;

  result = qword_257465088;
  if (!qword_257465088)
  {
    result = MEMORY[0x249534380](&unk_24544923C, &type metadata for ReplicationXPCServerParameters.EnableClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465088);
  }
  return result;
}

unint64_t sub_24540CED0()
{
  unint64_t result;

  result = qword_257465090;
  if (!qword_257465090)
  {
    result = MEMORY[0x249534380](&unk_245449264, &type metadata for ReplicationXPCServerParameters.EnableClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465090);
  }
  return result;
}

unint64_t sub_24540CF18()
{
  unint64_t result;

  result = qword_257465098;
  if (!qword_257465098)
  {
    result = MEMORY[0x249534380](&unk_245449184, &type metadata for ReplicationXPCServerParameters.GetClientEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465098);
  }
  return result;
}

unint64_t sub_24540CF60()
{
  unint64_t result;

  result = qword_2574650A0;
  if (!qword_2574650A0)
  {
    result = MEMORY[0x249534380](&unk_2454491AC, &type metadata for ReplicationXPCServerParameters.GetClientEnabled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574650A0);
  }
  return result;
}

unint64_t sub_24540CFA8()
{
  unint64_t result;

  result = qword_2574650A8;
  if (!qword_2574650A8)
  {
    result = MEMORY[0x249534380](&unk_2454490CC, &type metadata for ReplicationXPCServerParameters.UnregisterClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574650A8);
  }
  return result;
}

unint64_t sub_24540CFF0()
{
  unint64_t result;

  result = qword_2574650B0;
  if (!qword_2574650B0)
  {
    result = MEMORY[0x249534380](&unk_2454490F4, &type metadata for ReplicationXPCServerParameters.UnregisterClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574650B0);
  }
  return result;
}

unint64_t sub_24540D038()
{
  unint64_t result;

  result = qword_25440EAA8;
  if (!qword_25440EAA8)
  {
    result = MEMORY[0x249534380](&unk_245449014, &type metadata for ReplicationXPCServerParameters.RegisterClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EAA8);
  }
  return result;
}

unint64_t sub_24540D080()
{
  unint64_t result;

  result = qword_25440EAA0;
  if (!qword_25440EAA0)
  {
    result = MEMORY[0x249534380](&unk_24544903C, &type metadata for ReplicationXPCServerParameters.RegisterClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440EAA0);
  }
  return result;
}

uint64_t sub_24540D0C4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C756465686373 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_245444390();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_24540D1CC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x444964726F636572 && a2 == 0xE900000000000073;
  if (v2 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C756465686373 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_245444390();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_24540D2C8(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0x444964726F636572 && a2 == 0xE900000000000073 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7461446863746566 && a2 == 0xE900000000000061 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C69466863746566 && a2 == 0xEA00000000007365 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C6F636F746F7270 && a2 == 0xEF6E6F6973726556)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = sub_245444390();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_24540D4CC(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000011 && a2 == 0x800000024544ECF0)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_245444390();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_24540D550(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6567617373656DLL && a2 == 0xE700000000000000;
  if (v2 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74756F656D6974 && a2 == 0xE700000000000000 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73656972746572 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_245444390();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_24540D6A4(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000010 && a2 == 0x800000024544ECD0)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_245444390();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_24540D728()
{
  unint64_t result;

  result = qword_2574642E0;
  if (!qword_2574642E0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicationServiceError, &type metadata for ReplicationServiceError);
    atomic_store(result, (unint64_t *)&qword_2574642E0);
  }
  return result;
}

uint64_t sub_24540D76C(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t ReplicatorDevice.isPaired.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ReplicatorDevice(0);
  sub_2453BA364(v0 + *(int *)(v4 + 48), (uint64_t)v3, type metadata accessor for ReplicatorDevice.RelationshipState);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
  v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 4, v5);
  if ((v6 - 2) < 2)
    return 1;
  if (v6)
  {
    sub_2453BA3A8((uint64_t)v3, type metadata accessor for ReplicatorDevice.RelationshipState);
    return 0;
  }
  else
  {
    v8 = sub_245443B14();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v3, v8);
    return 1;
  }
}

uint64_t type metadata accessor for ReplicatorDevice.RelationshipState(uint64_t a1)
{
  return sub_2453FB160(a1, (uint64_t *)&unk_25440E928);
}

uint64_t type metadata accessor for ReplicatorDevice(uint64_t a1)
{
  return sub_2453FB160(a1, (uint64_t *)&unk_25440E938);
}

ReplicatorServices::ReplicatorDevice::DeviceType_optional __swiftcall ReplicatorDevice.DeviceType.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 6;
  if ((unint64_t)rawValue < 6)
    v2 = rawValue;
  *v1 = v2;
  return (ReplicatorServices::ReplicatorDevice::DeviceType_optional)rawValue;
}

uint64_t ReplicatorDevice.DeviceType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

ReplicatorServices::ReplicatorDevice::DeviceType_optional sub_24540D988(Swift::Int *a1)
{
  return ReplicatorDevice.DeviceType.init(rawValue:)(*a1);
}

uint64_t sub_24540D990()
{
  sub_245416A68();
  return sub_245443E68();
}

uint64_t sub_24540D9EC()
{
  sub_245416A68();
  return sub_245443E50();
}

double ReplicatorDevice.Screen.size.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void ReplicatorDevice.Screen.size.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*ReplicatorDevice.Screen.size.modify())()
{
  return nullsub_1;
}

double ReplicatorDevice.Screen.scale.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void ReplicatorDevice.Screen.scale.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*ReplicatorDevice.Screen.scale.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorDevice.Screen.cornerRadius.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t ReplicatorDevice.Screen.cornerRadius.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = result;
  *(_BYTE *)(v2 + 32) = a2 & 1;
  return result;
}

uint64_t (*ReplicatorDevice.Screen.cornerRadius.modify())()
{
  return nullsub_1;
}

void ReplicatorDevice.Screen.init(size:scale:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
}

uint64_t ReplicatorDevice.Screen.init(size:scale:cornerRadius:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  *(double *)a3 = a4;
  *(double *)(a3 + 8) = a5;
  *(double *)(a3 + 16) = a6;
  *(_QWORD *)(a3 + 24) = result;
  *(_BYTE *)(a3 + 32) = a2 & 1;
  return result;
}

uint64_t ReplicatorDevice.Screen.hash(into:)()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 32);
  sub_245444438();
  sub_245444438();
  sub_24544442C();
  if (v1 != 1)
    sub_245444438();
  return sub_245444438();
}

uint64_t sub_24540DB60()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656C616373;
  if (*v0 != 1)
    v1 = 0x615272656E726F63;
  if (*v0)
    return v1;
  else
    return 1702521203;
}

uint64_t sub_24540DBB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24541613C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24540DBDC()
{
  sub_245412EC8();
  return sub_245444468();
}

uint64_t sub_24540DC04()
{
  sub_245412EC8();
  return sub_245444474();
}

uint64_t ReplicatorDevice.Screen.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574650E0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  v10 = v1[2];
  v14 = v1[3];
  v11 = *((_BYTE *)v1 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245412EC8();
  sub_24544445C();
  v16 = v8;
  v17 = v9;
  v15 = 0;
  type metadata accessor for CGSize(0);
  sub_2453B8BF4(&qword_2574650F0, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD848]);
  sub_245444360();
  if (!v2)
  {
    v12 = v14;
    v16 = v10;
    v15 = 1;
    sub_245412F0C();
    sub_245444360();
    v16 = v12;
    LOBYTE(v17) = v11;
    v15 = 2;
    sub_245444330();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ReplicatorDevice.Screen.hashValue.getter()
{
  sub_245444414();
  ReplicatorDevice.Screen.hash(into:)();
  return sub_245444444();
}

uint64_t ReplicatorDevice.Screen.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465100);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245412EC8();
  sub_245444450();
  if (!v2)
  {
    type metadata accessor for CGSize(0);
    v16 = 0;
    sub_2453B8BF4(&qword_257465108, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x24BDBD860]);
    sub_2454442DC();
    v9 = v17;
    v10 = v18;
    v16 = 1;
    sub_245412F50();
    sub_2454442DC();
    v12 = v17;
    v16 = 2;
    sub_2454442AC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v13 = v17;
    v14 = v18;
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v10;
    *(_QWORD *)(a2 + 16) = v12;
    *(_QWORD *)(a2 + 24) = v13;
    *(_BYTE *)(a2 + 32) = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_24540E054()
{
  sub_245444414();
  ReplicatorDevice.Screen.hash(into:)();
  return sub_245444444();
}

uint64_t sub_24540E0B8()
{
  sub_245444414();
  ReplicatorDevice.Screen.hash(into:)();
  return sub_245444444();
}

uint64_t sub_24540E114@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorDevice.Screen.init(from:)(a1, a2);
}

uint64_t sub_24540E128(_QWORD *a1)
{
  return ReplicatorDevice.Screen.encode(to:)(a1);
}

void ReplicatorDevice.RelationshipState.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v1 = sub_245443B14();
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2453BA364(v0, (uint64_t)v4, v5);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
  v7 = (char *)sub_24540E21C
     + 4
     * byte_24544A4D0[(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 4, v6)];
  __asm { BR              X10 }
}

uint64_t sub_24540E21C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
  sub_245444420();
  sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  sub_245443D60();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
}

uint64_t sub_24540E2B4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24540E2E8 + 4 * byte_24544A4D5[*v0]))(0x6375646F72746E69, 0xEA00000000006465);
}

uint64_t sub_24540E2E8()
{
  return 0x676E6972696170;
}

uint64_t sub_24540E300()
{
  return 0x646572696170;
}

uint64_t sub_24540E314()
{
  return 0x6E6974617267696DLL;
}

uint64_t sub_24540E330()
{
  return 0x6E776F6E6B6E75;
}

uint64_t sub_24540E348@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_245416290(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24540E36C()
{
  sub_245412F94();
  return sub_245444468();
}

uint64_t sub_24540E394()
{
  sub_245412F94();
  return sub_245444474();
}

uint64_t sub_24540E3BC()
{
  return 0;
}

uint64_t sub_24540E3C8()
{
  sub_2454130E8();
  return sub_245444468();
}

uint64_t sub_24540E3F0()
{
  sub_2454130E8();
  return sub_245444474();
}

uint64_t sub_24540E418()
{
  return 1836020326;
}

uint64_t sub_24540E428@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1836020326 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_245444390();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_24540E4AC()
{
  sub_24541301C();
  return sub_245444468();
}

uint64_t sub_24540E4D4()
{
  sub_24541301C();
  return sub_245444474();
}

uint64_t sub_24540E4FC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_24540E528()
{
  sub_245413060();
  return sub_245444468();
}

uint64_t sub_24540E550()
{
  sub_245413060();
  return sub_245444474();
}

uint64_t sub_24540E578()
{
  sub_2454130A4();
  return sub_245444468();
}

uint64_t sub_24540E5A0()
{
  sub_2454130A4();
  return sub_245444474();
}

uint64_t sub_24540E5C8()
{
  sub_245412FD8();
  return sub_245444468();
}

uint64_t sub_24540E5F0()
{
  sub_245412FD8();
  return sub_245444474();
}

void ReplicatorDevice.RelationshipState.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD v16[8];
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465118);
  v16[6] = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v16[5] = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465120);
  v21 = *(_QWORD *)(v3 - 8);
  v22 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v19 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_245443B14();
  v18 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v16[7] = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465128);
  v16[3] = *(_QWORD *)(v6 - 8);
  v16[4] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v16[2] = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465130);
  v16[0] = *(_QWORD *)(v8 - 8);
  v16[1] = v8;
  MEMORY[0x24BDAC7A8](v8);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465138);
  MEMORY[0x24BDAC7A8](v9);
  v10 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465140);
  v23 = *(_QWORD *)(v13 - 8);
  v24 = v13;
  MEMORY[0x24BDAC7A8](v13);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245412F94();
  sub_24544445C();
  sub_2453BA364(v25, (uint64_t)v12, type metadata accessor for ReplicatorDevice.RelationshipState);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
  v15 = (char *)sub_24540E8B8
      + 4
      * byte_24544A4DA[(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v12, 4, v14)];
  __asm { BR              X10 }
}

uint64_t sub_24540E8B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(v2 - 152);
  v4 = *(_QWORD *)(v2 - 168);
  v5 = *(_QWORD *)(v2 - 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v4, v1, v5);
  *(_BYTE *)(v2 - 66) = 3;
  sub_24541301C();
  v6 = *(_QWORD *)(v2 - 144);
  v7 = *(_QWORD *)(v2 - 104);
  sub_245444300();
  sub_2453B8BF4(&qword_2574639F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  v8 = *(_QWORD *)(v2 - 120);
  sub_245444360();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 128) + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 112) + 8))(v0, v7);
}

uint64_t ReplicatorDevice.RelationshipState.hashValue.getter()
{
  return sub_245411F1C((void (*)(_BYTE *))ReplicatorDevice.RelationshipState.hash(into:));
}

uint64_t ReplicatorDevice.RelationshipState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  _QWORD v29[9];
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;

  v35 = a2;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465178);
  v29[8] = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v33 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465180);
  v38 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v34 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465188);
  v29[6] = *(_QWORD *)(v5 - 8);
  v29[7] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v37 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465190);
  v29[4] = *(_QWORD *)(v7 - 8);
  v29[5] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v32 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465198);
  v29[2] = *(_QWORD *)(v9 - 8);
  v29[3] = v9;
  MEMORY[0x24BDAC7A8](v9);
  v31 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574651A0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)v29 - v19;
  v21 = a1[3];
  v40 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v21);
  sub_245412F94();
  v36 = v14;
  v22 = v41;
  sub_245444450();
  if (!v22)
  {
    v29[0] = v18;
    v29[1] = v20;
    v41 = v12;
    v23 = v36;
    v24 = sub_2454442F4();
    if (*(_QWORD *)(v24 + 16) == 1)
      __asm { BR              X10 }
    v25 = sub_245444168();
    swift_allocError();
    v27 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2574651A8);
    *v27 = v15;
    sub_245444270();
    sub_24544415C();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x24BEE26D0], v25);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v23, v11);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
}

uint64_t sub_24540F244@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorDevice.RelationshipState.init(from:)(a1, a2);
}

void sub_24540F258(_QWORD *a1)
{
  ReplicatorDevice.RelationshipState.encode(to:)(a1);
}

uint64_t sub_24540F270(uint64_t a1, uint64_t a2)
{
  return sub_24541281C(a1, a2, (void (*)(_BYTE *))ReplicatorDevice.RelationshipState.hash(into:));
}

uint64_t sub_24540F280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24541286C(a1, a2, a3, (void (*)(_BYTE *))ReplicatorDevice.RelationshipState.hash(into:));
}

uint64_t ReplicatorDevice.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_245443B14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ReplicatorDevice.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_245443B14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*ReplicatorDevice.id.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorDevice.relationshipID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 20);
  v4 = sub_245443B14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReplicatorDevice.relationshipID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 20);
  v4 = sub_245443B14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReplicatorDevice.relationshipID.modify())()
{
  type metadata accessor for ReplicatorDevice(0);
  return nullsub_1;
}

uint64_t ReplicatorDevice.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReplicatorDevice.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 24));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*ReplicatorDevice.name.modify())()
{
  type metadata accessor for ReplicatorDevice(0);
  return nullsub_1;
}

__n128 ReplicatorDevice.protocolVersion.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 28));
  *a1 = result;
  return result;
}

uint64_t ReplicatorDevice.protocolVersion.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;

  v2 = *a1;
  v3 = a1[1];
  result = type metadata accessor for ReplicatorDevice(0);
  v5 = (_QWORD *)(v1 + *(int *)(result + 28));
  *v5 = v2;
  v5[1] = v3;
  return result;
}

uint64_t (*ReplicatorDevice.protocolVersion.modify())()
{
  type metadata accessor for ReplicatorDevice(0);
  return nullsub_1;
}

uint64_t ReplicatorDevice.deviceType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ReplicatorDevice(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t ReplicatorDevice.deviceType.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for ReplicatorDevice(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = v2;
  return result;
}

uint64_t (*ReplicatorDevice.deviceType.modify())()
{
  type metadata accessor for ReplicatorDevice(0);
  return nullsub_1;
}

__n128 ReplicatorDevice.screen.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  char v5;
  __n128 result;
  __int128 v7;

  v3 = v1 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 36);
  v4 = *(_BYTE *)(v3 + 32);
  v5 = *(_BYTE *)(v3 + 33);
  result = *(__n128 *)v3;
  v7 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 33) = v5;
  return result;
}

__n128 ReplicatorDevice.screen.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  __n128 *v6;
  __n128 result;
  __n128 v8;

  v8 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u64[1];
  v4 = a1[2].n128_u8[0];
  v5 = a1[2].n128_u8[1];
  v6 = (__n128 *)(v1 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 36));
  result = v8;
  *v6 = v8;
  v6[1].n128_u64[0] = v2;
  v6[1].n128_u64[1] = v3;
  v6[2].n128_u8[0] = v4;
  v6[2].n128_u8[1] = v5;
  return result;
}

uint64_t (*ReplicatorDevice.screen.modify())()
{
  type metadata accessor for ReplicatorDevice(0);
  return nullsub_1;
}

uint64_t ReplicatorDevice.zones.getter()
{
  type metadata accessor for ReplicatorDevice(0);
  return swift_bridgeObjectRetain();
}

uint64_t ReplicatorDevice.zones.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for ReplicatorDevice(0) + 40);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*ReplicatorDevice.zones.modify())()
{
  type metadata accessor for ReplicatorDevice(0);
  return nullsub_1;
}

uint64_t ReplicatorDevice.messageTypes.getter()
{
  type metadata accessor for ReplicatorDevice(0);
  return swift_bridgeObjectRetain();
}

uint64_t ReplicatorDevice.messageTypes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for ReplicatorDevice(0) + 44);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*ReplicatorDevice.messageTypes.modify())()
{
  type metadata accessor for ReplicatorDevice(0);
  return nullsub_1;
}

uint64_t ReplicatorDevice.relationshipState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ReplicatorDevice(0);
  return sub_2453BA364(v1 + *(int *)(v3 + 48), a1, type metadata accessor for ReplicatorDevice.RelationshipState);
}

uint64_t ReplicatorDevice.relationshipState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 48);
  return sub_24541312C(a1, v3);
}

uint64_t (*ReplicatorDevice.relationshipState.modify())()
{
  type metadata accessor for ReplicatorDevice(0);
  return nullsub_1;
}

uint64_t ReplicatorDevice.initialPairingDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 52);
  v4 = sub_245443AC0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReplicatorDevice.initialPairingDate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 52);
  v4 = sub_245443AC0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReplicatorDevice.initialPairingDate.modify())()
{
  type metadata accessor for ReplicatorDevice(0);
  return nullsub_1;
}

uint64_t ReplicatorDevice.isBlocked.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 56));
}

uint64_t ReplicatorDevice.isBlocked.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ReplicatorDevice(0);
  *(_BYTE *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*ReplicatorDevice.isBlocked.modify())()
{
  type metadata accessor for ReplicatorDevice(0);
  return nullsub_1;
}

uint64_t ReplicatorDevice.marketingName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 60));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReplicatorDevice.marketingName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 60));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*ReplicatorDevice.marketingName.modify())()
{
  type metadata accessor for ReplicatorDevice(0);
  return nullsub_1;
}

uint64_t ReplicatorDevice.productType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 64));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReplicatorDevice.productType.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for ReplicatorDevice(0) + 64));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*ReplicatorDevice.productType.modify())()
{
  type metadata accessor for ReplicatorDevice(0);
  return nullsub_1;
}

uint64_t ReplicatorDevice.init(id:relationshipID:name:protocolVersion:deviceType:screen:zones:messageTypes:relationshipState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, unsigned __int8 *a6@<X5>, __int128 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  int *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  void (*v36)(uint64_t, char *, uint64_t);
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;

  v59 = a8;
  v53 = a6;
  v54 = a3;
  v44 = a1;
  v55 = a4;
  v56 = a10;
  v15 = sub_245443AC0();
  v57 = *(_QWORD *)(v15 - 8);
  v58 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v60 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = v19;
  v20 = sub_245443B14();
  v21 = *(_QWORD **)(v20 - 8);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v43 - v25;
  v27 = *a5;
  v46 = a5[1];
  v47 = v27;
  LODWORD(v53) = *v53;
  v52 = *a7;
  v28 = *((_QWORD *)a7 + 2);
  v50 = *((_QWORD *)a7 + 3);
  v51 = v28;
  LODWORD(v28) = *((unsigned __int8 *)a7 + 32);
  v48 = *((unsigned __int8 *)a7 + 33);
  v49 = v28;
  v29 = (void (*)(char *, uint64_t, uint64_t))v21[2];
  v30 = v44;
  v29((char *)&v43 - v25, v44, v20);
  v29(v24, a2, v20);
  sub_2453BA364(a11, (uint64_t)v19, type metadata accessor for ReplicatorDevice.RelationshipState);
  sub_245443AB4();
  sub_2453BA3A8(a11, type metadata accessor for ReplicatorDevice.RelationshipState);
  v31 = (void (*)(uint64_t, uint64_t))v21[1];
  v31(a2, v20);
  v31(v30, v20);
  v32 = (int *)type metadata accessor for ReplicatorDevice(0);
  v33 = a9 + v32[9];
  v34 = (_QWORD *)(a9 + v32[15]);
  v35 = (_QWORD *)(a9 + v32[16]);
  v36 = (void (*)(uint64_t, char *, uint64_t))v21[4];
  v36(a9, v26, v20);
  v36(a9 + v32[5], v24, v20);
  v37 = (_QWORD *)(a9 + v32[6]);
  v38 = v55;
  *v37 = v54;
  v37[1] = v38;
  v39 = (_QWORD *)(a9 + v32[7]);
  v40 = v46;
  *v39 = v47;
  v39[1] = v40;
  *(_BYTE *)(a9 + v32[8]) = (_BYTE)v53;
  *(_OWORD *)v33 = v52;
  v41 = v50;
  *(_QWORD *)(v33 + 16) = v51;
  *(_QWORD *)(v33 + 24) = v41;
  *(_BYTE *)(v33 + 32) = v49;
  *(_BYTE *)(v33 + 33) = v48;
  *(_QWORD *)(a9 + v32[10]) = v59;
  *(_QWORD *)(a9 + v32[11]) = v56;
  sub_2453D062C((uint64_t)v45, a9 + v32[12], type metadata accessor for ReplicatorDevice.RelationshipState);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v57 + 32))(a9 + v32[13], v60, v58);
  *(_BYTE *)(a9 + v32[14]) = 0;
  *v34 = 0;
  v34[1] = 0;
  *v35 = 0;
  v35[1] = 0;
  return result;
}

uint64_t ReplicatorDevice.init(id:relationshipID:name:protocolVersion:deviceType:screen:zones:messageTypes:relationshipState:initialPairingDate:isBlocked:marketingName:productType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, char *a6@<X5>, __int128 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  char v37;

  v19 = *a5;
  v20 = a5[1];
  v37 = *a6;
  v36 = *a7;
  v34 = *((_QWORD *)a7 + 3);
  v35 = *((_QWORD *)a7 + 2);
  v32 = *((_BYTE *)a7 + 33);
  v33 = *((_BYTE *)a7 + 32);
  v21 = (int *)type metadata accessor for ReplicatorDevice(0);
  v22 = a9 + v21[9];
  v23 = (_QWORD *)(a9 + v21[15]);
  v24 = (_QWORD *)(a9 + v21[16]);
  v25 = sub_245443B14();
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32);
  v26(a9, a1, v25);
  v26(a9 + v21[5], a2, v25);
  v27 = (_QWORD *)(a9 + v21[6]);
  *v27 = a3;
  v27[1] = a4;
  v28 = (_QWORD *)(a9 + v21[7]);
  *v28 = v19;
  v28[1] = v20;
  *(_BYTE *)(a9 + v21[8]) = v37;
  *(_OWORD *)v22 = v36;
  *(_QWORD *)(v22 + 16) = v35;
  *(_QWORD *)(v22 + 24) = v34;
  *(_BYTE *)(v22 + 32) = v33;
  *(_BYTE *)(v22 + 33) = v32;
  *(_QWORD *)(a9 + v21[10]) = a8;
  *(_QWORD *)(a9 + v21[11]) = a10;
  sub_2453D062C(a11, a9 + v21[12], type metadata accessor for ReplicatorDevice.RelationshipState);
  v29 = a9 + v21[13];
  v30 = sub_245443AC0();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v29, a12, v30);
  *(_BYTE *)(a9 + v21[14]) = a13;
  *v23 = a14;
  v23[1] = a15;
  *v24 = a16;
  v24[1] = a17;
  return result;
}

uint64_t sub_24540FF18(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t i;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (result == a2)
    return 1;
  v2 = a2;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v32 = result;
  v33 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v34 = (unint64_t)(v4 + 63) >> 6;
  v41 = a2 + 56;
  if (!v6)
    goto LABEL_9;
LABEL_7:
  v35 = (v6 - 1) & v6;
  v36 = v3;
  for (i = __clz(__rbit64(v6)) | (v3 << 6); ; i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    v12 = (uint64_t *)(*(_QWORD *)(result + 48) + 48 * i);
    v14 = *v12;
    v13 = v12[1];
    v15 = v12[2];
    v16 = v12[3];
    v17 = v12[4];
    v18 = v12[5];
    sub_245444414();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v40 = v15;
    sub_245443DF0();
    swift_bridgeObjectRelease();
    v39 = v17;
    sub_245444438();
    v38 = v18;
    sub_245444438();
    v19 = sub_245444444();
    v20 = -1 << *(_BYTE *)(v2 + 32);
    v21 = v19 & ~v20;
    if (((*(_QWORD *)(v41 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
    {
LABEL_44:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    v22 = ~v20;
    v23 = *(_QWORD *)(a2 + 48);
    while (1)
    {
      v25 = (_QWORD *)(v23 + 48 * v21);
      v26 = v25[2];
      v27 = v25[3];
      v28 = v25[4];
      v29 = v25[5];
      v30 = *v25 == v14 && v25[1] == v13;
      if (v30 || (sub_245444390() & 1) != 0)
      {
        v31 = v26 == v40 && v27 == v16;
        if ((v31 || (sub_245444390() & 1) != 0) && v28 == v39 && v29 == v38)
          break;
      }
      v21 = (v21 + 1) & v22;
      if (((*(_QWORD *)(v41 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
        goto LABEL_44;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = v36;
    v2 = a2;
    result = v32;
    v6 = v35;
    if (v35)
      goto LABEL_7;
LABEL_9:
    v8 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v8 >= v34)
      return 1;
    v9 = *(_QWORD *)(v33 + 8 * v8);
    v10 = v3 + 1;
    if (!v9)
    {
      v10 = v8 + 1;
      if (v8 + 1 >= v34)
        return 1;
      v9 = *(_QWORD *)(v33 + 8 * v10);
      if (!v9)
      {
        v10 = v8 + 2;
        if (v8 + 2 >= v34)
          return 1;
        v9 = *(_QWORD *)(v33 + 8 * v10);
        if (!v9)
        {
          v10 = v8 + 3;
          if (v8 + 3 >= v34)
            return 1;
          v9 = *(_QWORD *)(v33 + 8 * v10);
          if (!v9)
            break;
        }
      }
    }
LABEL_24:
    v35 = (v9 - 1) & v9;
    v36 = v10;
  }
  v11 = v8 + 4;
  if (v11 >= v34)
    return 1;
  v9 = *(_QWORD *)(v33 + 8 * v11);
  if (v9)
  {
    v10 = v11;
    goto LABEL_24;
  }
  while (1)
  {
    v10 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v10 >= v34)
      return 1;
    v9 = *(_QWORD *)(v33 + 8 * v10);
    ++v11;
    if (v9)
      goto LABEL_24;
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_245410260(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  char *v47;
  char v48;
  char *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  BOOL v57;
  _QWORD v60[12];
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v69 = sub_245443B14();
  v4 = *(_QWORD *)(v69 - 8);
  MEMORY[0x24BDAC7A8](v69);
  v6 = (char *)v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E4B8);
  MEMORY[0x24BDAC7A8](v10);
  v70 = (uint64_t)v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for ReplicatorDevice(0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)v60 - v17;
  MEMORY[0x24BDAC7A8](v16);
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v21 = 1 << *(_BYTE *)(a1 + 32);
    if (v21 < 64)
      v22 = ~(-1 << v21);
    else
      v22 = -1;
    v23 = v22 & *(_QWORD *)(a1 + 56);
    v24 = (unint64_t)(v21 + 63) >> 6;
    v73 = a2 + 56;
    v66 = v4;
    v67 = v9;
    v64 = a1 + 56;
    v65 = v6;
    v63 = v24;
    if (v23)
    {
      v25 = __clz(__rbit64(v23));
      v61 = (v23 - 1) & v23;
      v62 = 0;
LABEL_23:
      v29 = *(_QWORD *)(a1 + 48);
      v60[11] = v20;
      v72 = *(_QWORD *)(v20 + 72);
      v30 = (char *)v60 - v19;
      sub_2453BA364(v29 + v72 * v25, (uint64_t)v60 - v19, type metadata accessor for ReplicatorDevice);
      v60[10] = v30;
      sub_2453D062C((uint64_t)v30, (uint64_t)v18, type metadata accessor for ReplicatorDevice);
      sub_245444414();
      ReplicatorDevice.hash(into:)((uint64_t)&v74);
      v31 = sub_245444444();
      v32 = -1 << *(_BYTE *)(a2 + 32);
      v33 = v31 & ~v32;
      if (((*(_QWORD *)(v73 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) != 0)
      {
        v71 = ~v32;
        while (1)
        {
          sub_2453BA364(*(_QWORD *)(a2 + 48) + v33 * v72, (uint64_t)v15, type metadata accessor for ReplicatorDevice);
          if ((sub_245443AF0() & 1) == 0 || (sub_245443AF0() & 1) == 0)
            goto LABEL_25;
          v34 = v12[6];
          v35 = *(_QWORD *)&v15[v34];
          v36 = *(_QWORD *)&v15[v34 + 8];
          v37 = &v18[v34];
          v38 = v35 == *(_QWORD *)v37 && v36 == *((_QWORD *)v37 + 1);
          if (!v38 && (sub_245444390() & 1) == 0)
            goto LABEL_25;
          v39 = v12[7];
          v41 = *(_QWORD *)&v15[v39];
          v40 = *(_QWORD *)&v15[v39 + 8];
          v42 = &v18[v39];
          v44 = *(_QWORD *)v42;
          v43 = *((_QWORD *)v42 + 1);
          if (v41 != v44 || v40 != v43)
            goto LABEL_25;
          v46 = v12[9];
          v47 = &v15[v46];
          v48 = v15[v46 + 33];
          v49 = &v18[v46];
          v50 = v49[33];
          if ((v48 & 1) == 0)
          {
            if ((v49[33] & 1) != 0)
              goto LABEL_25;
            v57 = *(double *)v47 == *(double *)v49 && *((double *)v47 + 1) == *((double *)v49 + 1);
            if (!v57 || *((double *)v47 + 2) != *((double *)v49 + 2))
              goto LABEL_25;
            v50 = v49[32];
            if ((v47[32] & 1) == 0)
              break;
          }
          if ((v50 & 1) != 0)
            goto LABEL_40;
LABEL_25:
          sub_2453BA3A8((uint64_t)v15, type metadata accessor for ReplicatorDevice);
          v33 = (v33 + 1) & v71;
          if (((*(_QWORD *)(v73 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) == 0)
            goto LABEL_56;
        }
        if ((v49[32] & 1) != 0 || *((double *)v47 + 3) != *((double *)v49 + 3))
          goto LABEL_25;
LABEL_40:
        if (v15[v12[8]] == v18[v12[8]])
        {
          v60[9] = v12;
          v51 = v12[12];
          v52 = (uint64_t)&v18[v51];
          v68 = v10;
          v53 = v70;
          v54 = v70 + *(int *)(v10 + 48);
          sub_2453BA364((uint64_t)&v15[v51], v70, type metadata accessor for ReplicatorDevice.RelationshipState);
          sub_2453BA364(v52, v54, type metadata accessor for ReplicatorDevice.RelationshipState);
          v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
          v56 = (char *)&loc_245410718
              + dword_2454114D4[(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 48))(v53, 4, v55)];
          __asm { BR              X9 }
        }
        goto LABEL_25;
      }
LABEL_56:
      sub_2453BA3A8((uint64_t)v18, type metadata accessor for ReplicatorDevice);
      return 0;
    }
    if ((unint64_t)(v21 + 63) >> 6 > 1)
    {
      v26 = *(_QWORD *)(a1 + 64);
      v27 = 1;
      if (v26)
        goto LABEL_22;
      v27 = 2;
      if (v24 <= 2)
        return 1;
      v26 = *(_QWORD *)(a1 + 72);
      if (v26)
        goto LABEL_22;
      v27 = 3;
      if (v24 <= 3)
        return 1;
      v26 = *(_QWORD *)(a1 + 80);
      if (v26)
        goto LABEL_22;
      v27 = 4;
      if (v24 <= 4)
        return 1;
      v26 = *(_QWORD *)(a1 + 88);
      if (v26)
      {
LABEL_22:
        v61 = (v26 - 1) & v26;
        v62 = v27;
        v25 = __clz(__rbit64(v26)) + (v27 << 6);
        goto LABEL_23;
      }
      v28 = 5;
      if (v24 > 5)
      {
        v26 = *(_QWORD *)(a1 + 96);
        if (v26)
        {
          v27 = 5;
          goto LABEL_22;
        }
        while (1)
        {
          v27 = v28 + 1;
          if (__OFADD__(v28, 1))
          {
            __break(1u);
            JUMPOUT(0x2454114D4);
          }
          if (v27 >= v24)
            break;
          v26 = *(_QWORD *)(a1 + 56 + 8 * v27);
          ++v28;
          if (v26)
            goto LABEL_22;
        }
      }
    }
    return 1;
  }
  return 0;
}

void ReplicatorDevice.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _BYTE v15[40];

  v2 = v1;
  v4 = sub_245443B14();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
  MEMORY[0x24BDAC7A8](v4);
  v6 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_2453B8BF4(&qword_25440E440, v5, MEMORY[0x24BDCEA88]);
  sub_245443D60();
  v9 = (int *)type metadata accessor for ReplicatorDevice(0);
  sub_245443D60();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  sub_245444438();
  sub_245444438();
  sub_245444420();
  sub_245413544(v2 + v9[9], (uint64_t)v15);
  sub_2454128A8();
  v10 = *(_QWORD *)(v2 + v9[10]);
  swift_bridgeObjectRetain();
  sub_245412974(a1, v10);
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v2 + v9[11]);
  swift_bridgeObjectRetain();
  sub_245412974(a1, v11);
  swift_bridgeObjectRelease();
  sub_2453BA364(v2 + v9[12], (uint64_t)v8, type metadata accessor for ReplicatorDevice.RelationshipState);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
  v13 = (char *)sub_2454116E8
      + 4
      * byte_24544A4E4[(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v8, 4, v12)];
  __asm { BR              X10 }
}

uint64_t sub_2454116E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v3, v4, v2);
  sub_245444420();
  sub_245443D60();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v2);
  sub_245443AC0();
  sub_2453B8BF4(&qword_2574651B8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  sub_245443D60();
  sub_24544442C();
  if (*(_QWORD *)(v0 + *(int *)(v1 + 60) + 8))
  {
    sub_24544442C();
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_24544442C();
  }
  if (!*(_QWORD *)(v0 + *(int *)(v1 + 64) + 8))
    return sub_24544442C();
  sub_24544442C();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  return swift_bridgeObjectRelease();
}

uint64_t sub_245411864(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24541188C + 4 * byte_24544A4E9[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_24541188C()
{
  return 0x6E6F6974616C6572;
}

uint64_t sub_2454118B0()
{
  return 1701667182;
}

uint64_t sub_2454118C0()
{
  return 0x6C6F636F746F7270;
}

uint64_t sub_2454118E4()
{
  return 0x7954656369766564;
}

uint64_t sub_245411900()
{
  return 0x6E6565726373;
}

uint64_t sub_245411914()
{
  return 0x73656E6F7ALL;
}

uint64_t sub_245411928()
{
  return 0x546567617373656DLL;
}

unint64_t sub_245411948()
{
  return 0xD000000000000011;
}

unint64_t sub_245411964()
{
  return 0xD000000000000012;
}

uint64_t sub_245411984()
{
  return 0x656B636F6C427369;
}

uint64_t sub_2454119A0()
{
  return 0x6E6974656B72616DLL;
}

uint64_t sub_2454119C4()
{
  return 0x54746375646F7270;
}

uint64_t sub_2454119E4()
{
  unsigned __int8 *v0;

  return sub_245411864(*v0);
}

uint64_t sub_2454119EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2454164BC(a1, a2);
  *a3 = result;
  return result;
}

void sub_245411A10(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_245411A1C()
{
  sub_24541358C();
  return sub_245444468();
}

uint64_t sub_245411A44()
{
  sub_24541358C();
  return sub_245444474();
}

uint64_t ReplicatorDevice.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char v11;
  char v12;
  __int128 v13;
  _OWORD v15[2];
  char v16;
  char v17;
  char v18;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574651C0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24541358C();
  sub_24544445C();
  LOBYTE(v15[0]) = 0;
  sub_245443B14();
  sub_2453B8BF4(&qword_2574639F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  sub_245444360();
  if (!v2)
  {
    v9 = (int *)type metadata accessor for ReplicatorDevice(0);
    LOBYTE(v15[0]) = 1;
    sub_245444360();
    LOBYTE(v15[0]) = 2;
    sub_245444348();
    v15[0] = *(_OWORD *)(v3 + v9[7]);
    v18 = 3;
    sub_2453BC5D8();
    sub_245444360();
    LOBYTE(v15[0]) = *(_BYTE *)(v3 + v9[8]);
    v18 = 4;
    sub_2454135D0();
    sub_245444360();
    v10 = v3 + v9[9];
    v11 = *(_BYTE *)(v10 + 32);
    v12 = *(_BYTE *)(v10 + 33);
    v13 = *(_OWORD *)(v10 + 16);
    v15[0] = *(_OWORD *)v10;
    v15[1] = v13;
    v16 = v11;
    v17 = v12;
    v18 = 5;
    sub_245413614();
    sub_245444330();
    *(_QWORD *)&v15[0] = *(_QWORD *)(v3 + v9[10]);
    v18 = 6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2574651E0);
    sub_2454137AC(&qword_2574651E8, &qword_2574651E0, (uint64_t (*)(void))sub_245413658, MEMORY[0x24BEE12A0]);
    sub_245444360();
    *(_QWORD *)&v15[0] = *(_QWORD *)(v3 + v9[11]);
    v18 = 7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2574651F8);
    sub_2454137AC(&qword_257465200, &qword_2574651F8, (uint64_t (*)(void))sub_24541369C, MEMORY[0x24BEE12A0]);
    sub_245444360();
    LOBYTE(v15[0]) = 8;
    type metadata accessor for ReplicatorDevice.RelationshipState(0);
    sub_2453B8BF4(&qword_257465210, type metadata accessor for ReplicatorDevice.RelationshipState, (uint64_t)&protocol conformance descriptor for ReplicatorDevice.RelationshipState);
    sub_245444360();
    LOBYTE(v15[0]) = 9;
    sub_245443AC0();
    sub_2453B8BF4(&qword_257465218, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_245444360();
    LOBYTE(v15[0]) = 10;
    sub_245444354();
    LOBYTE(v15[0]) = 11;
    sub_24544430C();
    LOBYTE(v15[0]) = 12;
    sub_24544430C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t ReplicatorDevice.hashValue.getter()
{
  return sub_245411F1C((void (*)(_BYTE *))ReplicatorDevice.hash(into:));
}

uint64_t sub_245411F1C(void (*a1)(_BYTE *))
{
  _BYTE v3[72];

  sub_245444414();
  a1(v3);
  return sub_245444444();
}

uint64_t ReplicatorDevice.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  int *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char v31;
  char v32;
  __int128 v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t *v60;
  int *v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  char v65;
  char v66;
  char v67;

  v48 = a2;
  v51 = sub_245443AC0();
  v49 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v50 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x24BDAC7A8](v52);
  v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_245443B14();
  v56 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v53 = (char *)&v45 - v10;
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465220);
  v11 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ReplicatorDevice(0);
  v15 = (int *)MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = &v17[v15[9]];
  *(_OWORD *)v18 = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  *((_WORD *)v18 + 16) = 256;
  v19 = &v17[v15[15]];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  v60 = (uint64_t *)v19;
  v61 = v15;
  v20 = v15[16];
  v62 = v17;
  v21 = &v17[v20];
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  v57 = v21;
  v58 = a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24541358C();
  v55 = v13;
  v22 = v59;
  sub_245444450();
  if (v22)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v47 = v18;
    v46 = v5;
    v59 = v11;
    LOBYTE(v63) = 0;
    sub_2453B8BF4(&qword_25440E1B8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    v23 = v53;
    sub_2454442DC();
    v24 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
    v25 = (uint64_t)v62;
    v24(v62, v23, v6);
    LOBYTE(v63) = 1;
    v26 = v9;
    sub_2454442DC();
    v27 = v61;
    v24((char *)(v25 + v61[5]), v26, v6);
    LOBYTE(v63) = 2;
    v28 = sub_2454442C4();
    v29 = (uint64_t *)(v25 + v27[6]);
    *v29 = v28;
    v29[1] = v30;
    v67 = 3;
    sub_2453BC50C();
    sub_2454442DC();
    *(_OWORD *)(v25 + v27[7]) = v63;
    v67 = 4;
    sub_2454136E0();
    sub_2454442DC();
    *(_BYTE *)(v25 + v27[8]) = v63;
    v67 = 5;
    sub_245413724();
    sub_2454442AC();
    v31 = v65;
    v32 = v66;
    v33 = v64;
    v34 = v47;
    *(_OWORD *)v47 = v63;
    *((_OWORD *)v34 + 1) = v33;
    v34[32] = v31;
    v34[33] = v32;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2574651E0);
    v67 = 6;
    sub_2454137AC(&qword_257465238, &qword_2574651E0, (uint64_t (*)(void))sub_245413768, MEMORY[0x24BEE12D0]);
    sub_2454442DC();
    *(_QWORD *)(v25 + v27[10]) = v63;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2574651F8);
    v67 = 7;
    sub_2454137AC(&qword_257465248, &qword_2574651F8, (uint64_t (*)(void))sub_245413810, MEMORY[0x24BEE12D0]);
    sub_2454442DC();
    *(_QWORD *)(v25 + v27[11]) = v63;
    LOBYTE(v63) = 8;
    sub_2453B8BF4(&qword_257465258, type metadata accessor for ReplicatorDevice.RelationshipState, (uint64_t)&protocol conformance descriptor for ReplicatorDevice.RelationshipState);
    v35 = (uint64_t)v46;
    sub_2454442DC();
    sub_2453D062C(v35, v25 + v27[12], type metadata accessor for ReplicatorDevice.RelationshipState);
    LOBYTE(v63) = 9;
    sub_2453B8BF4(&qword_257465260, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
    sub_2454442DC();
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(&v62[v61[13]], v50, v51);
    LOBYTE(v63) = 10;
    v62[v61[14]] = sub_2454442D0() & 1;
    LOBYTE(v63) = 11;
    v36 = sub_24544427C();
    v37 = v60;
    *v60 = v36;
    v37[1] = v38;
    LOBYTE(v63) = 12;
    v39 = sub_24544427C();
    v41 = v40;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v55, v54);
    v42 = (uint64_t *)v57;
    swift_bridgeObjectRelease();
    *v42 = v39;
    v42[1] = v41;
    v43 = (uint64_t)v62;
    sub_2453BA364((uint64_t)v62, v48, type metadata accessor for ReplicatorDevice);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
    return sub_2453BA3A8(v43, type metadata accessor for ReplicatorDevice);
  }
}

uint64_t sub_2454127E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorDevice.init(from:)(a1, a2);
}

uint64_t sub_2454127F8(_QWORD *a1)
{
  return ReplicatorDevice.encode(to:)(a1);
}

uint64_t sub_245412810(uint64_t a1, uint64_t a2)
{
  return sub_24541281C(a1, a2, (void (*)(_BYTE *))ReplicatorDevice.hash(into:));
}

uint64_t sub_24541281C(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *))
{
  _BYTE v5[72];

  sub_245444414();
  a3(v5);
  return sub_245444444();
}

uint64_t sub_245412860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24541286C(a1, a2, a3, (void (*)(_BYTE *))ReplicatorDevice.hash(into:));
}

uint64_t sub_24541286C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *))
{
  _BYTE v6[72];

  sub_245444414();
  a4(v6);
  return sub_245444444();
}

uint64_t sub_2454128A8()
{
  uint64_t v0;
  char v1;
  uint64_t v3;
  char v4;
  _BYTE v5[40];

  sub_245413544(v0, (uint64_t)&v3);
  v1 = v4;
  sub_245413544(v0, (uint64_t)v5);
  if (v5[33] == 1)
    return sub_24544442C();
  sub_24544442C();
  sub_245444438();
  sub_245444438();
  sub_24544442C();
  if ((v1 & 1) == 0)
    sub_245444438();
  return sub_245444438();
}

uint64_t sub_245412974(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_245444420();
  if (v3)
  {
    v5 = a2 + 72;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      sub_245444438();
      sub_245444438();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v5 += 48;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_245412A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t (*v15)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _QWORD v17[2];

  v4 = sub_245443B14();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a2 + 16);
  v17[1] = a1;
  sub_245444420();
  if (v11)
  {
    v12 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v13 = *(_QWORD *)(v5 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    while (1)
    {
      v14(v10, v12, v4);
      v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v15(v10, 0, 1, v4);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4);
      if ((_DWORD)result == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
      sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
      sub_245443D60();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v12 += v13;
      if (!--v11)
        return v15(v10, 1, 1, v4);
    }
  }
  else
  {
    v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    return v15(v10, 1, 1, v4);
  }
  return result;
}

void _s18ReplicatorServices0A6DeviceV17RelationshipStateO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v4 = sub_245443B14();
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x24BDAC7A8](v5);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E4B8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_2453BA364(a1, (uint64_t)v9, type metadata accessor for ReplicatorDevice.RelationshipState);
  sub_2453BA364(a2, v10, type metadata accessor for ReplicatorDevice.RelationshipState);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
  v12 = (char *)sub_245412D2C
      + 4
      * byte_24544A4F6[(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 4, v11)];
  __asm { BR              X10 }
}

uint64_t sub_245412D2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  char v8;
  void (*v10)(uint64_t, uint64_t);

  sub_2453BA364(v0, v3, type metadata accessor for ReplicatorDevice.RelationshipState);
  if (v6(v4, 4, v5))
  {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v1);
    sub_2453D055C(v0, &qword_25440E4B8);
    v8 = 0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v2, v4, v1);
    v8 = sub_245443AF0();
    v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v10(v2, v1);
    v10(v3, v1);
    sub_2453BA3A8(v0, type metadata accessor for ReplicatorDevice.RelationshipState);
  }
  return v8 & 1;
}

uint64_t _s18ReplicatorServices0A6DeviceV6ScreenV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  char v4;

  if (*(double *)a1 != *(double *)a2
    || *(double *)(a1 + 8) != *(double *)(a2 + 8)
    || *(double *)(a1 + 16) != *(double *)(a2 + 16))
  {
    return 0;
  }
  v4 = *(_BYTE *)(a2 + 32);
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0)
      return 0;
  }
  else
  {
    if (*(double *)(a1 + 24) != *(double *)(a2 + 24))
      v4 = 1;
    if ((v4 & 1) != 0)
      return 0;
  }
  return 1;
}

unint64_t sub_245412EC8()
{
  unint64_t result;

  result = qword_2574650E8;
  if (!qword_2574650E8)
  {
    result = MEMORY[0x249534380](&unk_24544B104, &type metadata for ReplicatorDevice.Screen.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574650E8);
  }
  return result;
}

unint64_t sub_245412F0C()
{
  unint64_t result;

  result = qword_2574650F8;
  if (!qword_2574650F8)
  {
    result = MEMORY[0x249534380](MEMORY[0x24BEE50C0], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&qword_2574650F8);
  }
  return result;
}

unint64_t sub_245412F50()
{
  unint64_t result;

  result = qword_257465110;
  if (!qword_257465110)
  {
    result = MEMORY[0x249534380](MEMORY[0x24BEE50E8], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&qword_257465110);
  }
  return result;
}

unint64_t sub_245412F94()
{
  unint64_t result;

  result = qword_257465148;
  if (!qword_257465148)
  {
    result = MEMORY[0x249534380](&unk_24544B0B4, &type metadata for ReplicatorDevice.RelationshipState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465148);
  }
  return result;
}

unint64_t sub_245412FD8()
{
  unint64_t result;

  result = qword_257465150;
  if (!qword_257465150)
  {
    result = MEMORY[0x249534380](&unk_24544B064, &type metadata for ReplicatorDevice.RelationshipState.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465150);
  }
  return result;
}

unint64_t sub_24541301C()
{
  unint64_t result;

  result = qword_257465158;
  if (!qword_257465158)
  {
    result = MEMORY[0x249534380](&unk_24544B014, &type metadata for ReplicatorDevice.RelationshipState.MigratingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465158);
  }
  return result;
}

unint64_t sub_245413060()
{
  unint64_t result;

  result = qword_257465160;
  if (!qword_257465160)
  {
    result = MEMORY[0x249534380](&unk_24544AFC4, &type metadata for ReplicatorDevice.RelationshipState.PairedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465160);
  }
  return result;
}

unint64_t sub_2454130A4()
{
  unint64_t result;

  result = qword_257465168;
  if (!qword_257465168)
  {
    result = MEMORY[0x249534380](&unk_24544AF74, &type metadata for ReplicatorDevice.RelationshipState.PairingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465168);
  }
  return result;
}

unint64_t sub_2454130E8()
{
  unint64_t result;

  result = qword_257465170;
  if (!qword_257465170)
  {
    result = MEMORY[0x249534380](&unk_24544AF24, &type metadata for ReplicatorDevice.RelationshipState.IntroducedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465170);
  }
  return result;
}

uint64_t sub_24541312C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_245413170(uint64_t a1, void (*a2)(void), uint64_t a3, void (*a4)(_BYTE *, _OWORD *))
{
  uint64_t v6;
  uint64_t result;
  _OWORD *v8;
  __int128 v9;
  _BYTE v10[8];
  uint64_t v11;
  _OWORD v12[3];

  v6 = *(_QWORD *)(a1 + 16);
  a2();
  result = sub_245443F88();
  v11 = result;
  if (v6)
  {
    v8 = (_OWORD *)(a1 + 32);
    do
    {
      v9 = v8[1];
      v12[0] = *v8;
      v12[1] = v9;
      v12[2] = v8[2];
      sub_245416B34((uint64_t)v12);
      a4(v10, v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v8 += 3;
      --v6;
    }
    while (v6);
    return v11;
  }
  return result;
}

uint64_t _s18ReplicatorServices0A6DeviceV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  if ((sub_245443AF0() & 1) == 0)
    goto LABEL_33;
  v4 = (int *)type metadata accessor for ReplicatorDevice(0);
  if ((sub_245443AF0() & 1) == 0)
    goto LABEL_33;
  v5 = v4[6];
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = (_QWORD *)(a2 + v5);
  if (v6 != *v8 || v7 != v8[1])
  {
    v10 = 0;
    if ((sub_245444390() & 1) == 0)
      return v10 & 1;
  }
  v11 = v4[7];
  v13 = *(_QWORD *)(a1 + v11);
  v12 = *(_QWORD *)(a1 + v11 + 8);
  v14 = (uint64_t *)(a2 + v11);
  v16 = *v14;
  v15 = v14[1];
  if (v13 != v16 || v12 != v15)
    goto LABEL_33;
  v18 = v4[9];
  v19 = a1 + v18;
  v20 = *(_BYTE *)(a1 + v18 + 33);
  v21 = a2 + v18;
  v22 = *(_BYTE *)(v21 + 33);
  if ((v20 & 1) != 0)
    goto LABEL_14;
  if ((*(_BYTE *)(v21 + 33) & 1) != 0)
    goto LABEL_33;
  v29 = *(double *)v19 == *(double *)v21 && *(double *)(v19 + 8) == *(double *)(v21 + 8);
  if (!v29 || *(double *)(v19 + 16) != *(double *)(v21 + 16))
    goto LABEL_33;
  v22 = *(_BYTE *)(v21 + 32);
  if ((*(_BYTE *)(v19 + 32) & 1) != 0)
  {
LABEL_14:
    if ((v22 & 1) == 0)
      goto LABEL_33;
  }
  else
  {
    v10 = 0;
    if ((*(_BYTE *)(v21 + 32) & 1) != 0 || *(double *)(v19 + 24) != *(double *)(v21 + 24))
      return v10 & 1;
  }
  if (*(unsigned __int8 *)(a1 + v4[8]) != *(unsigned __int8 *)(a2 + v4[8]))
    goto LABEL_33;
  _s18ReplicatorServices0A6DeviceV17RelationshipStateO2eeoiySbAE_AEtFZ_0(a1 + v4[12], a2 + v4[12]);
  if ((v23 & 1) == 0
    || (sub_245443A9C() & 1) == 0
    || *(unsigned __int8 *)(a1 + v4[14]) != *(unsigned __int8 *)(a2 + v4[14]))
  {
    goto LABEL_33;
  }
  v24 = v4[15];
  v25 = (_QWORD *)(a1 + v24);
  v26 = *(_QWORD *)(a1 + v24 + 8);
  v27 = (_QWORD *)(a2 + v24);
  v28 = v27[1];
  if (v26)
  {
    if (!v28)
      goto LABEL_33;
    if (*v25 != *v27 || v26 != v28)
    {
      v10 = 0;
      if ((sub_245444390() & 1) == 0)
        return v10 & 1;
    }
  }
  else if (v28)
  {
    goto LABEL_33;
  }
  v32 = v4[16];
  v33 = (_QWORD *)(a1 + v32);
  v34 = *(_QWORD *)(a1 + v32 + 8);
  v35 = (_QWORD *)(a2 + v32);
  v36 = v35[1];
  if (!v34)
  {
    if (!v36)
      goto LABEL_47;
LABEL_33:
    v10 = 0;
    return v10 & 1;
  }
  if (!v36)
    goto LABEL_33;
  if (*v33 == *v35 && v34 == v36 || (v10 = 0, (sub_245444390() & 1) != 0))
  {
LABEL_47:
    v37 = swift_bridgeObjectRetain();
    v38 = sub_245413170(v37, (void (*)(void))sub_245416AF0, (uint64_t)&type metadata for ReplicatorZone, (void (*)(_BYTE *, _OWORD *))sub_245424690);
    swift_bridgeObjectRelease();
    v39 = swift_bridgeObjectRetain();
    v40 = sub_245413170(v39, (void (*)(void))sub_245416AF0, (uint64_t)&type metadata for ReplicatorZone, (void (*)(_BYTE *, _OWORD *))sub_245424690);
    swift_bridgeObjectRelease();
    v41 = sub_24540FF18(v38, v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v41 & 1) != 0)
    {
      v42 = swift_bridgeObjectRetain();
      v43 = sub_245413170(v42, (void (*)(void))sub_245416AAC, (uint64_t)&type metadata for ReplicatorMessageType, (void (*)(_BYTE *, _OWORD *))sub_24542467C);
      swift_bridgeObjectRelease();
      v44 = swift_bridgeObjectRetain();
      v45 = sub_245413170(v44, (void (*)(void))sub_245416AAC, (uint64_t)&type metadata for ReplicatorMessageType, (void (*)(_BYTE *, _OWORD *))sub_24542467C);
      swift_bridgeObjectRelease();
      v10 = sub_24540FF18(v43, v45);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10 & 1;
    }
    goto LABEL_33;
  }
  return v10 & 1;
}

uint64_t sub_245413544(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574651B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_24541358C()
{
  unint64_t result;

  result = qword_2574651C8;
  if (!qword_2574651C8)
  {
    result = MEMORY[0x249534380](&unk_24544AED4, &type metadata for ReplicatorDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574651C8);
  }
  return result;
}

unint64_t sub_2454135D0()
{
  unint64_t result;

  result = qword_2574651D0;
  if (!qword_2574651D0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorDevice.DeviceType, &type metadata for ReplicatorDevice.DeviceType);
    atomic_store(result, (unint64_t *)&qword_2574651D0);
  }
  return result;
}

unint64_t sub_245413614()
{
  unint64_t result;

  result = qword_2574651D8;
  if (!qword_2574651D8)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorDevice.Screen, &type metadata for ReplicatorDevice.Screen);
    atomic_store(result, (unint64_t *)&qword_2574651D8);
  }
  return result;
}

unint64_t sub_245413658()
{
  unint64_t result;

  result = qword_2574651F0;
  if (!qword_2574651F0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorZone, &type metadata for ReplicatorZone);
    atomic_store(result, (unint64_t *)&qword_2574651F0);
  }
  return result;
}

unint64_t sub_24541369C()
{
  unint64_t result;

  result = qword_257465208;
  if (!qword_257465208)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorMessageType, &type metadata for ReplicatorMessageType);
    atomic_store(result, (unint64_t *)&qword_257465208);
  }
  return result;
}

unint64_t sub_2454136E0()
{
  unint64_t result;

  result = qword_257465228;
  if (!qword_257465228)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorDevice.DeviceType, &type metadata for ReplicatorDevice.DeviceType);
    atomic_store(result, (unint64_t *)&qword_257465228);
  }
  return result;
}

unint64_t sub_245413724()
{
  unint64_t result;

  result = qword_257465230;
  if (!qword_257465230)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorDevice.Screen, &type metadata for ReplicatorDevice.Screen);
    atomic_store(result, (unint64_t *)&qword_257465230);
  }
  return result;
}

unint64_t sub_245413768()
{
  unint64_t result;

  result = qword_257465240;
  if (!qword_257465240)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorZone, &type metadata for ReplicatorZone);
    atomic_store(result, (unint64_t *)&qword_257465240);
  }
  return result;
}

uint64_t sub_2454137AC(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3();
    result = MEMORY[0x249534380](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_245413810()
{
  unint64_t result;

  result = qword_257465250;
  if (!qword_257465250)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorMessageType, &type metadata for ReplicatorMessageType);
    atomic_store(result, (unint64_t *)&qword_257465250);
  }
  return result;
}

unint64_t sub_245413858()
{
  unint64_t result;

  result = qword_257465268;
  if (!qword_257465268)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorDevice.DeviceType, &type metadata for ReplicatorDevice.DeviceType);
    atomic_store(result, (unint64_t *)&qword_257465268);
  }
  return result;
}

unint64_t sub_2454138A0()
{
  unint64_t result;

  result = qword_257465270;
  if (!qword_257465270)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorDevice.Screen, &type metadata for ReplicatorDevice.Screen);
    atomic_store(result, (unint64_t *)&qword_257465270);
  }
  return result;
}

uint64_t sub_2454138E4()
{
  return sub_2453B8BF4(&qword_257465278, type metadata accessor for ReplicatorDevice.RelationshipState, (uint64_t)&protocol conformance descriptor for ReplicatorDevice.RelationshipState);
}

uint64_t sub_245413910()
{
  return sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
}

uint64_t sub_24541393C()
{
  return sub_2453B8BF4(&qword_25440E4C8, type metadata accessor for ReplicatorDevice, (uint64_t)&protocol conformance descriptor for ReplicatorDevice);
}

char *initializeBufferWithCopyOfBuffer for ReplicatorDevice(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_245443B14();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8(&a1[a3[5]], &a2[a3[5]], v7);
    v9 = a3[6];
    v10 = a3[7];
    v11 = &a1[v9];
    v12 = &a2[v9];
    v13 = *((_QWORD *)v12 + 1);
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *((_QWORD *)v11 + 1) = v13;
    *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
    v14 = a3[9];
    a1[a3[8]] = a2[a3[8]];
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = *((_OWORD *)v16 + 1);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v17;
    *((_WORD *)v15 + 16) = *((_WORD *)v16 + 16);
    v18 = a3[11];
    *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
    *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
    v19 = a3[12];
    v20 = &a1[v19];
    v21 = &a2[v19];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 4, v22))
    {
      v24 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      v8(v20, v21, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 4, v22);
    }
    v26 = a3[13];
    v27 = &a1[v26];
    v28 = &a2[v26];
    v29 = sub_245443AC0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
    v30 = a3[15];
    a1[a3[14]] = a2[a3[14]];
    v31 = &a1[v30];
    v32 = &a2[v30];
    v33 = *((_QWORD *)v32 + 1);
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *((_QWORD *)v31 + 1) = v33;
    v34 = a3[16];
    v35 = &a1[v34];
    v36 = &a2[v34];
    v37 = *((_QWORD *)v36 + 1);
    *(_QWORD *)v35 = *(_QWORD *)v36;
    *((_QWORD *)v35 + 1) = v37;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ReplicatorDevice(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_245443B14();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + a2[12];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 4, v7))
    v5(v6, v4);
  v8 = a1 + a2[13];
  v9 = sub_245443AC0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for ReplicatorDevice(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;

  v6 = sub_245443B14();
  v7 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(&a1[a3[5]], &a2[a3[5]], v6);
  v8 = a3[6];
  v9 = a3[7];
  v10 = &a1[v8];
  v11 = &a2[v8];
  v12 = *((_QWORD *)v11 + 1);
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *((_QWORD *)v10 + 1) = v12;
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  v13 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *((_OWORD *)v15 + 1);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v16;
  *((_WORD *)v14 + 16) = *((_WORD *)v15 + 16);
  v17 = a3[11];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  *(_QWORD *)&a1[v17] = *(_QWORD *)&a2[v17];
  v18 = a3[12];
  v19 = &a1[v18];
  v20 = &a2[v18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 4, v21))
  {
    v23 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v7(v19, v20, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 4, v21);
  }
  v24 = a3[13];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = sub_245443AC0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  v28 = a3[15];
  a1[a3[14]] = a2[a3[14]];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = *((_QWORD *)v30 + 1);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *((_QWORD *)v29 + 1) = v31;
  v32 = a3[16];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = *((_QWORD *)v34 + 1);
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *((_QWORD *)v33 + 1) = v35;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for ReplicatorDevice(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v39;
  void (*v40)(void *, const void *, uint64_t);

  v6 = sub_245443B14();
  v39 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(void *, const void *, uint64_t))(v39 + 24);
  v7(a1, a2, v6);
  v40 = v7;
  v7(&a1[a3[5]], &a2[a3[5]], v6);
  v8 = a3[6];
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = a3[7];
  v12 = &a1[v11];
  v13 = &a2[v11];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
  a1[a3[8]] = a2[a3[8]];
  v14 = a3[9];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = *(_OWORD *)v16;
  v18 = *((_OWORD *)v16 + 1);
  *((_WORD *)v15 + 16) = *((_WORD *)v16 + 16);
  *(_OWORD *)v15 = v17;
  *((_OWORD *)v15 + 1) = v18;
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = a3[12];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 4, v22);
  v26 = v24(v21, 4, v22);
  if (!v25)
  {
    if (!v26)
    {
      v40(v20, v21, v6);
      goto LABEL_7;
    }
    sub_2453D055C((uint64_t)v20, &qword_257464870);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    v27 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v20, v21, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 4, v22);
LABEL_7:
  v28 = a3[13];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = sub_245443AC0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 24))(v29, v30, v31);
  a1[a3[14]] = a2[a3[14]];
  v32 = a3[15];
  v33 = &a1[v32];
  v34 = &a2[v32];
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *((_QWORD *)v33 + 1) = *((_QWORD *)v34 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v35 = a3[16];
  v36 = &a1[v35];
  v37 = &a2[v35];
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *((_QWORD *)v36 + 1) = *((_QWORD *)v37 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for ReplicatorDevice(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;

  v6 = sub_245443B14();
  v7 = *(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(&a1[a3[5]], &a2[a3[5]], v6);
  v8 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  v9 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *((_OWORD *)v11 + 1);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *((_OWORD *)v10 + 1) = v12;
  *((_WORD *)v10 + 16) = *((_WORD *)v11 + 16);
  v13 = a3[11];
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  *(_QWORD *)&a1[v13] = *(_QWORD *)&a2[v13];
  v14 = a3[12];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 4, v17))
  {
    v19 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v7(v15, v16, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 4, v17);
  }
  v20 = a3[13];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = sub_245443AC0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  v24 = a3[15];
  a1[a3[14]] = a2[a3[14]];
  *(_OWORD *)&a1[v24] = *(_OWORD *)&a2[v24];
  *(_OWORD *)&a1[a3[16]] = *(_OWORD *)&a2[a3[16]];
  return a1;
}

char *assignWithTake for ReplicatorDevice(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  void (*v44)(void *, const void *, uint64_t);

  v6 = sub_245443B14();
  v43 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(void *, const void *, uint64_t))(v43 + 40);
  v7(a1, a2, v6);
  v44 = v7;
  v7(&a1[a3[5]], &a2[a3[5]], v6);
  v8 = a3[6];
  v9 = &a1[v8];
  v10 = (uint64_t *)&a2[v8];
  v12 = *v10;
  v11 = v10[1];
  *(_QWORD *)v9 = v12;
  *((_QWORD *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  v13 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  a1[v13] = a2[v13];
  v14 = a3[9];
  v15 = a3[10];
  v16 = &a1[v14];
  v17 = &a2[v14];
  *((_WORD *)v16 + 16) = *((_WORD *)v17 + 16);
  v18 = *((_OWORD *)v17 + 1);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v18;
  *(_QWORD *)&a1[v15] = *(_QWORD *)&a2[v15];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  swift_bridgeObjectRelease();
  v19 = a3[12];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 4, v22);
  v26 = v24(v21, 4, v22);
  if (!v25)
  {
    if (!v26)
    {
      v44(v20, v21, v6);
      goto LABEL_7;
    }
    sub_2453D055C((uint64_t)v20, &qword_257464870);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    v27 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v20, v21, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 4, v22);
LABEL_7:
  v28 = a3[13];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = sub_245443AC0();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 40))(v29, v30, v31);
  v32 = a3[15];
  a1[a3[14]] = a2[a3[14]];
  v33 = &a1[v32];
  v34 = (uint64_t *)&a2[v32];
  v36 = *v34;
  v35 = v34[1];
  *(_QWORD *)v33 = v36;
  *((_QWORD *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  v37 = a3[16];
  v38 = &a1[v37];
  v39 = (uint64_t *)&a2[v37];
  v41 = *v39;
  v40 = v39[1];
  *(_QWORD *)v38 = v41;
  *((_QWORD *)v38 + 1) = v40;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorDevice()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2454144A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_245443B14();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[12];
    }
    else
    {
      v8 = sub_245443AC0();
      v14 = *(_QWORD *)(v8 - 8);
      v15 = a3[13];
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[6] + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplicatorDevice()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_245414584(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_245443B14();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[6] + 8) = (a2 - 1);
      return result;
    }
    v13 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[12];
    }
    else
    {
      v10 = sub_245443AC0();
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[13];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_245414650()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = sub_245443B14();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for ReplicatorDevice.RelationshipState(319);
    if (v2 <= 0x3F)
    {
      result = sub_245443AC0();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ReplicatorDevice.DeviceType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplicatorDevice.DeviceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_245414818 + 4 * byte_24544A500[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_24541484C + 4 * byte_24544A4FB[v4]))();
}

uint64_t sub_24541484C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245414854(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24541485CLL);
  return result;
}

uint64_t sub_245414868(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245414870);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_245414874(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24541487C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorDevice.DeviceType()
{
  return &type metadata for ReplicatorDevice.DeviceType;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ReplicatorDevice.Screen(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ReplicatorDevice.Screen(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 33) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorDevice.Screen()
{
  return &type metadata for ReplicatorDevice.Screen;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReplicatorDevice.RelationshipState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 4, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v10 = sub_245443B14();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 4, v7);
    }
  }
  return a1;
}

uint64_t destroy for ReplicatorDevice.RelationshipState(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 4, v2);
  if (!(_DWORD)result)
  {
    v4 = sub_245443B14();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  }
  return result;
}

void *initializeWithCopy for ReplicatorDevice.RelationshipState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 4, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = sub_245443B14();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 4, v6);
  }
  return a1;
}

void *assignWithCopy for ReplicatorDevice.RelationshipState(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 4, v6);
  v10 = v8(a2, 4, v6);
  if (!v9)
  {
    if (!v10)
    {
      v13 = sub_245443B14();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(a1, a2, v13);
      return a1;
    }
    sub_2453D055C((uint64_t)a1, &qword_257464870);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = sub_245443B14();
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 4, v6);
  return a1;
}

void *initializeWithTake for ReplicatorDevice.RelationshipState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 4, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v8 = sub_245443B14();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 4, v6);
  }
  return a1;
}

void *assignWithTake for ReplicatorDevice.RelationshipState(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 4, v6);
  v10 = v8(a2, 4, v6);
  if (!v9)
  {
    if (!v10)
    {
      v13 = sub_245443B14();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(a1, a2, v13);
      return a1;
    }
    sub_2453D055C((uint64_t)a1, &qword_257464870);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  v11 = sub_245443B14();
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 4, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorDevice.RelationshipState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_245414DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 5)
    return v5 - 4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ReplicatorDevice.RelationshipState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_245414E34(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 4);
  else
    v5 = 0;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_245414E8C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 4, v2);
}

uint64_t sub_245414EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 4, v4);
}

uint64_t sub_245414F0C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_245443B14();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ReplicatorDevice.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplicatorDevice.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_24541503C + 4 * byte_24544A50A[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_245415070 + 4 * byte_24544A505[v4]))();
}

uint64_t sub_245415070(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245415078(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x245415080);
  return result;
}

uint64_t sub_24541508C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245415094);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_245415098(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2454150A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorDevice.CodingKeys()
{
  return &type metadata for ReplicatorDevice.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ReplicatorDevice.RelationshipState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_245415108 + 4 * byte_24544A514[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_24541513C + 4 * byte_24544A50F[v4]))();
}

uint64_t sub_24541513C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245415144(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24541514CLL);
  return result;
}

uint64_t sub_245415158(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245415160);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_245415164(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24541516C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorDevice.RelationshipState.CodingKeys()
{
  return &type metadata for ReplicatorDevice.RelationshipState.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorDevice.RelationshipState.IntroducedCodingKeys()
{
  return &type metadata for ReplicatorDevice.RelationshipState.IntroducedCodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorDevice.RelationshipState.PairingCodingKeys()
{
  return &type metadata for ReplicatorDevice.RelationshipState.PairingCodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorDevice.RelationshipState.PairedCodingKeys()
{
  return &type metadata for ReplicatorDevice.RelationshipState.PairedCodingKeys;
}

uint64_t storeEnumTagSinglePayload for ReplicatorDevice.RelationshipState.MigratingCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_2454151F8 + 4 * byte_24544A519[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_245415218 + 4 * byte_24544A51E[v4]))();
}

_BYTE *sub_2454151F8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_245415218(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_245415220(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_245415228(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_245415230(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_245415238(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorDevice.RelationshipState.MigratingCodingKeys()
{
  return &type metadata for ReplicatorDevice.RelationshipState.MigratingCodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorDevice.RelationshipState.UnknownCodingKeys()
{
  return &type metadata for ReplicatorDevice.RelationshipState.UnknownCodingKeys;
}

uint64_t storeEnumTagSinglePayload for ReplicatorDevice.Screen.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_2454152B0 + 4 * byte_24544A528[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_2454152E4 + 4 * byte_24544A523[v4]))();
}

uint64_t sub_2454152E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2454152EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2454152F4);
  return result;
}

uint64_t sub_245415300(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245415308);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24541530C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245415314(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorDevice.Screen.CodingKeys()
{
  return &type metadata for ReplicatorDevice.Screen.CodingKeys;
}

unint64_t sub_245415334()
{
  unint64_t result;

  result = qword_257465280;
  if (!qword_257465280)
  {
    result = MEMORY[0x249534380](&unk_24544AB44, &type metadata for ReplicatorDevice.Screen.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465280);
  }
  return result;
}

unint64_t sub_24541537C()
{
  unint64_t result;

  result = qword_257465288;
  if (!qword_257465288)
  {
    result = MEMORY[0x249534380](&unk_24544AC4C, &type metadata for ReplicatorDevice.RelationshipState.MigratingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465288);
  }
  return result;
}

unint64_t sub_2454153C4()
{
  unint64_t result;

  result = qword_257465290;
  if (!qword_257465290)
  {
    result = MEMORY[0x249534380](&unk_24544ADF4, &type metadata for ReplicatorDevice.RelationshipState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465290);
  }
  return result;
}

unint64_t sub_24541540C()
{
  unint64_t result;

  result = qword_257465298;
  if (!qword_257465298)
  {
    result = MEMORY[0x249534380](&unk_24544AEAC, &type metadata for ReplicatorDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465298);
  }
  return result;
}

unint64_t sub_245415454()
{
  unint64_t result;

  result = qword_2574652A0;
  if (!qword_2574652A0)
  {
    result = MEMORY[0x249534380](&unk_24544AE1C, &type metadata for ReplicatorDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574652A0);
  }
  return result;
}

unint64_t sub_24541549C()
{
  unint64_t result;

  result = qword_2574652A8;
  if (!qword_2574652A8)
  {
    result = MEMORY[0x249534380](&unk_24544AE44, &type metadata for ReplicatorDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574652A8);
  }
  return result;
}

unint64_t sub_2454154E4()
{
  unint64_t result;

  result = qword_2574652B0;
  if (!qword_2574652B0)
  {
    result = MEMORY[0x249534380](&unk_24544AD14, &type metadata for ReplicatorDevice.RelationshipState.IntroducedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574652B0);
  }
  return result;
}

unint64_t sub_24541552C()
{
  unint64_t result;

  result = qword_2574652B8;
  if (!qword_2574652B8)
  {
    result = MEMORY[0x249534380](&unk_24544AD3C, &type metadata for ReplicatorDevice.RelationshipState.IntroducedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574652B8);
  }
  return result;
}

unint64_t sub_245415574()
{
  unint64_t result;

  result = qword_2574652C0;
  if (!qword_2574652C0)
  {
    result = MEMORY[0x249534380](&unk_24544ACC4, &type metadata for ReplicatorDevice.RelationshipState.PairingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574652C0);
  }
  return result;
}

unint64_t sub_2454155BC()
{
  unint64_t result;

  result = qword_2574652C8;
  if (!qword_2574652C8)
  {
    result = MEMORY[0x249534380](&unk_24544ACEC, &type metadata for ReplicatorDevice.RelationshipState.PairingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574652C8);
  }
  return result;
}

unint64_t sub_245415604()
{
  unint64_t result;

  result = qword_2574652D0;
  if (!qword_2574652D0)
  {
    result = MEMORY[0x249534380](&unk_24544AC74, &type metadata for ReplicatorDevice.RelationshipState.PairedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574652D0);
  }
  return result;
}

unint64_t sub_24541564C()
{
  unint64_t result;

  result = qword_2574652D8;
  if (!qword_2574652D8)
  {
    result = MEMORY[0x249534380](&unk_24544AC9C, &type metadata for ReplicatorDevice.RelationshipState.PairedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574652D8);
  }
  return result;
}

unint64_t sub_245415694()
{
  unint64_t result;

  result = qword_2574652E0;
  if (!qword_2574652E0)
  {
    result = MEMORY[0x249534380](&unk_24544ABBC, &type metadata for ReplicatorDevice.RelationshipState.MigratingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574652E0);
  }
  return result;
}

unint64_t sub_2454156DC()
{
  unint64_t result;

  result = qword_2574652E8;
  if (!qword_2574652E8)
  {
    result = MEMORY[0x249534380](&unk_24544ABE4, &type metadata for ReplicatorDevice.RelationshipState.MigratingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574652E8);
  }
  return result;
}

unint64_t sub_245415724()
{
  unint64_t result;

  result = qword_2574652F0;
  if (!qword_2574652F0)
  {
    result = MEMORY[0x249534380](&unk_24544AB6C, &type metadata for ReplicatorDevice.RelationshipState.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574652F0);
  }
  return result;
}

unint64_t sub_24541576C()
{
  unint64_t result;

  result = qword_2574652F8;
  if (!qword_2574652F8)
  {
    result = MEMORY[0x249534380](&unk_24544AB94, &type metadata for ReplicatorDevice.RelationshipState.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574652F8);
  }
  return result;
}

unint64_t sub_2454157B4()
{
  unint64_t result;

  result = qword_257465300;
  if (!qword_257465300)
  {
    result = MEMORY[0x249534380](&unk_24544AD64, &type metadata for ReplicatorDevice.RelationshipState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465300);
  }
  return result;
}

unint64_t sub_2454157FC()
{
  unint64_t result;

  result = qword_257465308;
  if (!qword_257465308)
  {
    result = MEMORY[0x249534380](&unk_24544AD8C, &type metadata for ReplicatorDevice.RelationshipState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465308);
  }
  return result;
}

unint64_t sub_245415844()
{
  unint64_t result;

  result = qword_257465310;
  if (!qword_257465310)
  {
    result = MEMORY[0x249534380](&unk_24544AAB4, &type metadata for ReplicatorDevice.Screen.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465310);
  }
  return result;
}

unint64_t sub_24541588C()
{
  unint64_t result;

  result = qword_257465318;
  if (!qword_257465318)
  {
    result = MEMORY[0x249534380](&unk_24544AADC, &type metadata for ReplicatorDevice.Screen.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465318);
  }
  return result;
}

uint64_t sub_2454158D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = type metadata accessor for ReplicatorDevice(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v14 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  sub_2453B8BF4(&qword_25440E4C0, v10, (uint64_t)&protocol conformance descriptor for ReplicatorDevice);
  result = sub_245443F88();
  v15 = result;
  if (v9)
  {
    v12 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v13 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_2453BA364(v12, (uint64_t)v6, type metadata accessor for ReplicatorDevice);
      sub_245424918((uint64_t)v8, (uint64_t)v6);
      sub_2453BA3A8((uint64_t)v8, type metadata accessor for ReplicatorDevice);
      v12 += v13;
      --v9;
    }
    while (v9);
    return v15;
  }
  return result;
}

uint64_t sub_2454159F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t);
  int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  _QWORD *v56;
  char *v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(char *, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v70 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E540);
  MEMORY[0x24BDAC7A8](v70);
  v71 = (uint64_t)&v58 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_245443B14();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v63 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v58 = (char *)&v58 - v7;
  v8 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v69 = (uint64_t)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v58 - v11;
  v13 = type metadata accessor for ReplicatorRecord.ID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char **)((char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x24BDAC7A8](v15);
  v59 = (char **)((char *)&v58 - v19);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char **)((char *)&v58 - v20);
  v22 = *(_QWORD *)(a1 + 16);
  sub_2453B8BF4(&qword_257464530, v23, (uint64_t)&protocol conformance descriptor for ReplicatorRecord.ID);
  v68 = sub_245443F88();
  v62 = v22;
  if (v22)
  {
    v24 = 0;
    v61 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v76 = *(_QWORD *)(v14 + 72);
    v67 = v4;
    v60 = v12;
    v25 = v3;
    v26 = v71;
    v77 = v25;
    v65 = v13;
    do
    {
      v29 = v76;
      sub_2453BA364(v61 + v76 * v24, (uint64_t)v21, type metadata accessor for ReplicatorRecord.ID);
      sub_245444414();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_245443DF0();
      v30 = v65;
      v31 = v77;
      swift_bridgeObjectRelease();
      v75 = (uint64_t)v21 + *(int *)(v30 + 28);
      sub_2453BA364(v75, (uint64_t)v12, type metadata accessor for ReplicatorRecord.ID.Ownership);
      v74 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
      v32 = v74(v12, 1, v31);
      v64 = v24;
      if (v32 == 1)
      {
        sub_245444420();
      }
      else
      {
        v33 = v31;
        v34 = v58;
        (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v58, v12, v33);
        sub_245444420();
        sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
        sub_245443D60();
        v35 = v33;
        v26 = v71;
        (*(void (**)(char *, uint64_t))(v4 + 8))(v34, v35);
      }
      v66 = (_QWORD *)((char *)v21 + *(int *)(v30 + 32));
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      v36 = sub_245444444();
      v37 = v68;
      v38 = -1 << *(_BYTE *)(v68 + 32);
      v39 = v36 & ~v38;
      v40 = v68 + 56;
      if (((*(_QWORD *)(v68 + 56 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
      {
LABEL_3:
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v28 = v59;
        sub_2453BA364((uint64_t)v21, (uint64_t)v59, type metadata accessor for ReplicatorRecord.ID);
        v78 = v37;
        sub_245426A28(v28, v39, isUniquelyReferenced_nonNull_native);
        v68 = v78;
        goto LABEL_4;
      }
      v41 = ~v38;
      v72 = v68 + 56;
      v73 = ~v38;
      while (1)
      {
        sub_2453BA364(*(_QWORD *)(v37 + 48) + v39 * v29, (uint64_t)v17, type metadata accessor for ReplicatorRecord.ID);
        v42 = *v17 == *v21 && v17[1] == v21[1];
        if (!v42 && (sub_245444390() & 1) == 0)
          goto LABEL_11;
        v43 = v17[2] == v21[2] && v17[3] == v21[3];
        if (!v43 && (sub_245444390() & 1) == 0 || (v17[4] != v21[4] || v17[5] != v21[5]) && (sub_245444390() & 1) == 0)
          goto LABEL_11;
        v44 = v26 + *(int *)(v70 + 48);
        sub_2453BA364((uint64_t)v17 + *(int *)(v30 + 28), v26, type metadata accessor for ReplicatorRecord.ID.Ownership);
        sub_2453BA364(v75, v44, type metadata accessor for ReplicatorRecord.ID.Ownership);
        v45 = v26;
        v46 = v26;
        v47 = v77;
        v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v74;
        if (v74((char *)v45, 1, v77) == 1)
        {
          v49 = v48(v44, 1, v47);
          v29 = v76;
          v40 = v72;
          if (v49 == 1)
            goto LABEL_32;
          goto LABEL_30;
        }
        sub_2453BA364(v46, v69, type metadata accessor for ReplicatorRecord.ID.Ownership);
        if (v48(v44, 1, v47) != 1)
          break;
        (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v69, v47);
        v29 = v76;
        v40 = v72;
LABEL_30:
        v26 = v71;
        sub_2453D055C(v71, (uint64_t *)&unk_25440E540);
LABEL_36:
        v41 = v73;
LABEL_11:
        sub_2453BA3A8((uint64_t)v17, type metadata accessor for ReplicatorRecord.ID);
        v39 = (v39 + 1) & v41;
        if (((*(_QWORD *)(v40 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
          goto LABEL_3;
      }
      v50 = v67;
      v51 = v69;
      v52 = v63;
      (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v63, v44, v47);
      v53 = sub_245443AF0();
      v54 = *(void (**)(char *, uint64_t))(v50 + 8);
      v55 = v51;
      v30 = v65;
      v54(v52, v77);
      v54((char *)v55, v77);
      v37 = v68;
      v29 = v76;
      v40 = v72;
      if ((v53 & 1) == 0)
      {
        v26 = v71;
        sub_2453BA3A8(v71, type metadata accessor for ReplicatorRecord.ID.Ownership);
        goto LABEL_36;
      }
LABEL_32:
      v26 = v71;
      sub_2453BA3A8(v71, type metadata accessor for ReplicatorRecord.ID.Ownership);
      v56 = (_QWORD *)((char *)v17 + *(int *)(v30 + 32));
      v41 = v73;
      if ((*v56 != *v66 || v56[1] != v66[1]) && (sub_245444390() & 1) == 0)
        goto LABEL_11;
      sub_2453BA3A8((uint64_t)v17, type metadata accessor for ReplicatorRecord.ID);
LABEL_4:
      swift_bridgeObjectRelease();
      v4 = v67;
      v12 = v60;
      v24 = v64 + 1;
      sub_2453BA3A8((uint64_t)v21, type metadata accessor for ReplicatorRecord.ID);
    }
    while (v24 != v62);
  }
  return v68;
}

uint64_t sub_24541613C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1702521203 && a2 == 0xE400000000000000;
  if (v2 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C616373 && a2 == 0xE500000000000000 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x615272656E726F63 && a2 == 0xEC00000073756964)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_245444390();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_245416290(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6375646F72746E69 && a2 == 0xEA00000000006465;
  if (v2 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E6972696170 && a2 == 0xE700000000000000 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646572696170 && a2 == 0xE600000000000000 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6974617267696DLL && a2 == 0xE900000000000067 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E776F6E6B6E75 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_245444390();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_2454164BC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6974616C6572 && a2 == 0xEE00444970696873 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C6F636F746F7270 && a2 == 0xEF6E6F6973726556 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7954656369766564 && a2 == 0xEA00000000006570 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E6565726373 && a2 == 0xE600000000000000 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x73656E6F7ALL && a2 == 0xE500000000000000 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x546567617373656DLL && a2 == 0xEC00000073657079 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000024544ED40 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024544ED60 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x656B636F6C427369 && a2 == 0xE900000000000064 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6E6974656B72616DLL && a2 == 0xED0000656D614E67 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x54746375646F7270 && a2 == 0xEB00000000657079)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else
  {
    v6 = sub_245444390();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 12;
    else
      return 13;
  }
}

unint64_t sub_245416A68()
{
  unint64_t result;

  result = qword_257465320;
  if (!qword_257465320)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorDevice.DeviceType, &type metadata for ReplicatorDevice.DeviceType);
    atomic_store(result, (unint64_t *)&qword_257465320);
  }
  return result;
}

unint64_t sub_245416AAC()
{
  unint64_t result;

  result = qword_257465328;
  if (!qword_257465328)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorMessageType, &type metadata for ReplicatorMessageType);
    atomic_store(result, (unint64_t *)&qword_257465328);
  }
  return result;
}

unint64_t sub_245416AF0()
{
  unint64_t result;

  result = qword_257465330;
  if (!qword_257465330)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorZone, &type metadata for ReplicatorZone);
    atomic_store(result, (unint64_t *)&qword_257465330);
  }
  return result;
}

uint64_t sub_245416B34(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_245416B68(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t ReplicatorControlClient.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  ReplicatorControlClient.init()();
  return v0;
}

uint64_t ReplicatorControlClient.devices.getter()
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB00);
  sub_245444030();
  return v1;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorControlClient.isEnabled()()
{
  return sub_245416DF8() & 1;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorControlClient.setEnabled(_:)(Swift::Bool a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  if (qword_257463BF8 != -1)
    swift_once();
  v1 = sub_245443C04();
  __swift_project_value_buffer(v1, (uint64_t)qword_257463BE0);
  v2 = sub_245443BEC();
  v3 = sub_245444000();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v4 = 67240192;
    sub_245444078();
    _os_log_impl(&dword_2453B6000, v2, v3, "Setting replicator enabled to %{BOOL,public}d", v4, 8u);
    MEMORY[0x249534440](v4, -1, -1);
  }

  MEMORY[0x24BDAC7A8](v5);
  sub_245444030();
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorControlClient.isAllowListEnabled()()
{
  return sub_245416DF8() & 1;
}

uint64_t sub_245416DF8()
{
  unsigned __int8 v1;

  sub_245444030();
  return v1;
}

uint64_t ReplicatorControlClient.getAllowList()()
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_257464808);
  sub_245444030();
  return v1;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorControlClient.enableAllowList(enabled:)(Swift::Bool enabled)
{
  sub_245444030();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorControlClient.setAllowList(idsIDs:)(Swift::OpaquePointer idsIDs)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v1 = sub_245444030();
  if (v8 == 1)
  {
    MEMORY[0x24BDAC7A8](v1);
    sub_245444030();
  }
  else
  {
    if (qword_257463BF8 != -1)
      swift_once();
    v2 = sub_245443C04();
    __swift_project_value_buffer(v2, (uint64_t)qword_257463BE0);
    v3 = sub_245443BEC();
    v4 = sub_245443FE8();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_2453B6000, v3, v4, "Allow List is disabled. Cannot update allow list.", v5, 2u);
      MEMORY[0x249534440](v5, -1, -1);
    }

    v6 = sub_245443B2C();
    sub_2453B8BF4(&qword_257465340, (uint64_t (*)(uint64_t))MEMORY[0x24BE7F490], MEMORY[0x24BE7F498]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v7, *MEMORY[0x24BE7F478], v6);
    swift_willThrow();
  }
}

uint64_t ReplicatorControlClient.pushToken(for:)()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = sub_245444030();
  if (!v0)
    return v2;
  return result;
}

uint64_t sub_245417154(_QWORD *a1, uint64_t (*a2)(_QWORD))
{
  return a2(*a1);
}

uint64_t sub_245417178(uint64_t a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v3;

  v3 = a1;
  return a2(&v3);
}

uint64_t sub_2454171A8(unsigned __int8 *a1, uint64_t (*a2)(_QWORD))
{
  return a2(*a1);
}

uint64_t sub_2454171CC(char a1, uint64_t (*a2)(char *))
{
  char v3;

  v3 = a1;
  return a2(&v3);
}

uint64_t sub_2454171FC(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t ReplicatorControlClient.deviceUpdates.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E020);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574639B0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  v12 = &v17[-v11];
  v13 = v1 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient____lazy_storage___deviceUpdates;
  swift_beginAccess();
  sub_2453D02E0(v13, (uint64_t)v12, &qword_2574639B0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574639A8);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v15 + 32))(a1, v12, v14);
  sub_2453D055C((uint64_t)v12, &qword_2574639B0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB00);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BEE6A10], v3);
  sub_245443F7C();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16))(v10, a1, v14);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
  swift_beginAccess();
  sub_2453F7820((uint64_t)v10, v13, &qword_2574639B0);
  return swift_endAccess();
}

uint64_t ReplicatorControlClient.deviceUpdates.setter(uint64_t a1)
{
  return sub_245418530(a1, &qword_2574639B0, &qword_2574639A8, &OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient____lazy_storage___deviceUpdates);
}

uint64_t sub_24541745C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  v20[0] = a2;
  v20[1] = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E028);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_245443B14();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v20 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v14 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v15 + v14, v6, v3);
  v16 = v20[0];
  sub_245417620((uint64_t)sub_2454210FC, v15, (uint64_t)v13);
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  v17 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, v11, v7);
  swift_retain();
  sub_245443F34();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_245417620@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t *v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  id v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[7];
  uint64_t v38;

  v4 = v3;
  v29 = a1;
  v32 = sub_245443C88();
  v35 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v31 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_245443CAC();
  v33 = *(_QWORD *)(v9 - 8);
  v34 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v30 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_245443B14();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_245443B08();
  v15 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock);
  swift_retain();
  os_unfair_lock_lock(v15 + 4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  v17 = (uint64_t *)(v4 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_deviceObservers);
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v38 = *v17;
  *v17 = 0x8000000000000000;
  sub_2453C8FAC((uint64_t)sub_2453F7CF0, v16, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
  *v17 = v38;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_endAccess();
  os_unfair_lock_unlock(v15 + 4);
  swift_release();
  v36 = *(_QWORD *)(v4 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_singleton);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB00);
  sub_245444030();
  v19 = aBlock[0];
  v20 = *(void **)(v4 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_calloutQueue);
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = v29;
  v21[3] = a2;
  v21[4] = v19;
  aBlock[4] = sub_2453F7A38;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2453D0CCC;
  aBlock[3] = &block_descriptor_121;
  v22 = _Block_copy(aBlock);
  swift_retain();
  v23 = v20;
  v24 = v30;
  sub_245443C94();
  v38 = MEMORY[0x24BEE4AF8];
  sub_2453B8BF4(&qword_25440E640, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E670);
  sub_2453F75AC(&qword_25440E678, &qword_25440E670, MEMORY[0x24BEE12C8]);
  v25 = v31;
  v26 = v32;
  sub_2454440A8();
  MEMORY[0x249533A44](0, v24, v25, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v25, v26);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v24, v34);
  return swift_release();
}

void (*ReplicatorControlClient.deviceUpdates.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[6] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574639B0);
  v3[7] = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574639A8);
  v3[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[10] = malloc(v7);
  v8 = malloc(v7);
  v3[11] = v8;
  ReplicatorControlClient.deviceUpdates.getter((uint64_t)v8);
  return sub_245417A58;
}

void sub_245417A58(uint64_t a1, char a2)
{
  sub_245418B5C(a1, a2, &OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient____lazy_storage___deviceUpdates, &qword_2574639B0);
}

uint64_t ReplicatorControlClient.pairedDeviceUpdates.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E020);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB00);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEE6A10], v0);
  return sub_245443F7C();
}

uint64_t sub_245417B24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  v20[0] = a2;
  v20[1] = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E028);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_245443B14();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v20 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v14 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v15 + v14, v6, v3);
  v16 = v20[0];
  sub_245417D94((void (*)(uint64_t))sub_2454210FC, v15, (uint64_t)v13);
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  v17 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, v11, v7);
  swift_retain();
  sub_245443F34();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
}

uint64_t sub_245417CE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD v7[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E018);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[1] = a1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E028);
  sub_245443F4C();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_245417D94@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t);
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  os_unfair_lock_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v39 = a1;
  v6 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x24BDAC7A8](v6);
  v43 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for ReplicatorDevice(0);
  v46 = *(_QWORD *)(v42 - 8);
  v8 = MEMORY[0x24BDAC7A8](v42);
  v44 = (uint64_t)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v37 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v37 - v13;
  v15 = sub_245443B14();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_245443B08();
  v38 = v3;
  v19 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock);
  v45 = v19 + 4;
  swift_retain();
  os_unfair_lock_lock(v19 + 4);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a3, v15);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v39;
  *(_QWORD *)(v20 + 24) = a2;
  v21 = (uint64_t *)(v3 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_pairedDeviceObservers);
  swift_beginAccess();
  v37 = a2;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v48 = *v21;
  *v21 = 0x8000000000000000;
  sub_2453C8FAC((uint64_t)sub_2453F7A10, v20, (uint64_t)v18, isUniquelyReferenced_nonNull_native);
  *v21 = v48;
  swift_bridgeObjectRelease();
  v40 = *(void (**)(char *, uint64_t))(v16 + 8);
  v41 = v15;
  v40(v18, v15);
  swift_endAccess();
  os_unfair_lock_unlock(v45);
  swift_release();
  v47 = *(_QWORD *)(v38 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_singleton);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB00);
  result = sub_245444030();
  v24 = v49;
  v25 = MEMORY[0x24BEE4AF8];
  v49 = MEMORY[0x24BEE4AF8];
  v45 = *(os_unfair_lock_t *)(v24 + 16);
  if (!v45)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    v39(v25);
    return swift_release();
  }
  v26 = 0;
  v28 = v42;
  v27 = (uint64_t)v43;
  while (v26 < *(_QWORD *)(v24 + 16))
  {
    v29 = (*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
    v30 = *(_QWORD *)(v46 + 72);
    sub_2453BA364(v24 + v29 + v30 * v26, (uint64_t)v14, type metadata accessor for ReplicatorDevice);
    sub_2453BA364((uint64_t)&v14[*(int *)(v28 + 48)], v27, type metadata accessor for ReplicatorDevice.RelationshipState);
    v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
    v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v27, 4, v31);
    if ((v32 - 2) >= 2)
    {
      if (v32)
      {
        sub_2453BA3A8(v27, type metadata accessor for ReplicatorDevice.RelationshipState);
        sub_2453BA364((uint64_t)v14, (uint64_t)v12, type metadata accessor for ReplicatorDevice);
        sub_2453BA3A8((uint64_t)v12, type metadata accessor for ReplicatorDevice);
        goto LABEL_4;
      }
      v40((char *)v27, v41);
    }
    sub_2453BA364((uint64_t)v14, (uint64_t)v12, type metadata accessor for ReplicatorDevice);
    v33 = v12[*(int *)(v28 + 56)];
    sub_2453BA3A8((uint64_t)v12, type metadata accessor for ReplicatorDevice);
    if ((v33 & 1) == 0)
    {
      sub_24541FC6C((uint64_t)v14, v44);
      v34 = v49;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2453F1BF4(0, *(_QWORD *)(v34 + 16) + 1, 1);
        v34 = v49;
      }
      v36 = *(_QWORD *)(v34 + 16);
      v35 = *(_QWORD *)(v34 + 24);
      if (v36 >= v35 >> 1)
      {
        sub_2453F1BF4(v35 > 1, v36 + 1, 1);
        v34 = v49;
      }
      *(_QWORD *)(v34 + 16) = v36 + 1;
      result = sub_24541FC6C(v44, v34 + v29 + v36 * v30);
      v28 = v42;
      v27 = (uint64_t)v43;
      goto LABEL_5;
    }
LABEL_4:
    result = sub_2453BA3A8((uint64_t)v14, type metadata accessor for ReplicatorDevice);
LABEL_5:
    if (v45 == (os_unfair_lock_t)++v26)
    {
      v25 = v49;
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

uint64_t ReplicatorControlClient.enabledStateUpdates.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464580);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465348);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  v12 = &v17[-v11];
  v13 = v1 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient____lazy_storage___enabledStateUpdates;
  swift_beginAccess();
  sub_2453D02E0(v13, (uint64_t)v12, &qword_257465348);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E030);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v15 + 32))(a1, v12, v14);
  sub_2453D055C((uint64_t)v12, &qword_257465348);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BEE6A10], v3);
  sub_245443F7C();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16))(v10, a1, v14);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
  swift_beginAccess();
  sub_2453F7820((uint64_t)v10, v13, &qword_257465348);
  return swift_endAccess();
}

uint64_t sub_2454183E4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, _QWORD *a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(a6);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, v15);
  v19 = *a2;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v14, v18, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
  v20 = v19 + *a7;
  swift_beginAccess();
  sub_2453F7820((uint64_t)v14, v20, a5);
  return swift_endAccess();
}

uint64_t ReplicatorControlClient.enabledStateUpdates.setter(uint64_t a1)
{
  return sub_245418530(a1, &qword_257465348, &qword_25440E030, &OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient____lazy_storage___enabledStateUpdates);
}

uint64_t sub_245418530(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(a3);
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v11, a1, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  v14 = v4 + *a4;
  swift_beginAccess();
  sub_2453F7820((uint64_t)v11, v14, a2);
  return swift_endAccess();
}

uint64_t sub_24541861C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  char isUniquelyReferenced_nonNull_native;
  char *v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  os_unfair_lock_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v41 = a2;
  v49 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464578);
  v50 = *(_QWORD *)(v3 - 8);
  v51 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v48 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464588);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v44 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v38 - v9;
  v11 = sub_245443B14();
  v38 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v38 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v46 = (char *)&v38 - v18;
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v19(v10, a1, v5);
  v42 = v5;
  v19((char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v10, v5);
  v20 = *(unsigned __int8 *)(v7 + 80);
  v21 = v7;
  v45 = v7;
  v22 = (v20 + 16) & ~v20;
  v23 = swift_allocObject();
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v23 + v22, v10, v5);
  sub_245443B08();
  v24 = v41;
  v25 = *(os_unfair_lock_s **)(v41 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock);
  v39 = v25 + 4;
  swift_retain();
  os_unfair_lock_lock(v25 + 4);
  v26 = v38;
  v43 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
  v43(v14, v17, v11);
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = sub_2453F7870;
  *(_QWORD *)(v27 + 24) = v23;
  v28 = (uint64_t *)(v24 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_enabledStateObservers);
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v53 = *v28;
  *v28 = 0x8000000000000000;
  sub_2453C8FC4((uint64_t)sub_24542030C, v27, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
  *v28 = v53;
  swift_bridgeObjectRelease();
  v40 = *(void (**)(char *, uint64_t))(v26 + 8);
  v40(v14, v11);
  swift_endAccess();
  os_unfair_lock_unlock(v39);
  swift_release();
  v52 = *(_QWORD *)(v24 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_singleton);
  sub_245444030();
  v30 = v48;
  v31 = v42;
  v32 = v44;
  sub_245443F4C();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v30, v51);
  v33 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
  v34 = v46;
  v33(v46, v17, v11);
  swift_release();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v32, v31);
  v43(v17, v34, v11);
  v35 = (*(unsigned __int8 *)(v26 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  v36 = swift_allocObject();
  *(_QWORD *)(v36 + 16) = v24;
  v33((char *)(v36 + v35), v17, v11);
  swift_retain();
  sub_245443F34();
  return ((uint64_t (*)(char *, uint64_t))v40)(v34, v11);
}

uint64_t sub_245418A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  os_unfair_lock_s *v5;
  uint64_t v6;

  v5 = *(os_unfair_lock_s **)(a2 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock);
  swift_retain();
  os_unfair_lock_lock(v5 + 4);
  sub_2453C62CC(v6, a4);
  os_unfair_lock_unlock(v5 + 4);
  return swift_release();
}

void (*ReplicatorControlClient.enabledStateUpdates.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[6] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465348);
  v3[7] = malloc(*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E030);
  v3[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[9] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[10] = malloc(v7);
  v8 = malloc(v7);
  v3[11] = v8;
  ReplicatorControlClient.enabledStateUpdates.getter((uint64_t)v8);
  return sub_245418B48;
}

void sub_245418B48(uint64_t a1, char a2)
{
  sub_245418B5C(a1, a2, &OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient____lazy_storage___enabledStateUpdates, &qword_257465348);
}

void sub_245418B5C(uint64_t a1, char a2, _QWORD *a3, uint64_t *a4)
{
  _QWORD *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD **)a1;
  v8 = *(void **)(*(_QWORD *)a1 + 80);
  v7 = *(void **)(*(_QWORD *)a1 + 88);
  if ((a2 & 1) != 0)
  {
    v9 = v6[8];
    v10 = v6[9];
    v12 = v6[6];
    v11 = (void *)v6[7];
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v10 + 16))(v6[10], v6[11], v9);
    (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v11, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v11, 0, 1, v9);
    v13 = v12 + *a3;
    swift_beginAccess();
    sub_2453F7820((uint64_t)v11, v13, a4);
    swift_endAccess();
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
  }
  else
  {
    v14 = v6[8];
    v15 = v6[9];
    v16 = v6[6];
    v11 = (void *)v6[7];
    (*(void (**)(void *, _QWORD, uint64_t))(v15 + 32))(v11, v6[11], v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
    v17 = v16 + *a3;
    swift_beginAccess();
    sub_2453F7820((uint64_t)v11, v17, a4);
    swift_endAccess();
  }
  free(v7);
  free(v8);
  free(v11);
  free(v6);
}

uint64_t ReplicatorControlClient.pairedDevices.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x24BDAC7A8](v1);
  v31 = (uint64_t)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ReplicatorDevice(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v29 = (uint64_t)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v26 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v26 - v10;
  v32 = *(_QWORD *)(v0 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_singleton);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB00);
  sub_245444030();
  result = v33;
  v13 = MEMORY[0x24BEE4AF8];
  v33 = MEMORY[0x24BEE4AF8];
  v30 = *(_QWORD *)(result + 16);
  if (!v30)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return v13;
  }
  v14 = 0;
  v27 = v4;
  v28 = v3;
  while (v14 < *(_QWORD *)(result + 16))
  {
    v15 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v16 = *(_QWORD *)(v4 + 72);
    v17 = result;
    sub_2453BA364(result + v15 + v16 * v14, (uint64_t)v11, type metadata accessor for ReplicatorDevice);
    v18 = v31;
    sub_2453BA364((uint64_t)&v11[*(int *)(v3 + 48)], v31, type metadata accessor for ReplicatorDevice.RelationshipState);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 4, v19);
    if ((v20 - 2) >= 2)
    {
      if (v20)
      {
        sub_2453BA3A8(v31, type metadata accessor for ReplicatorDevice.RelationshipState);
        sub_2453BA364((uint64_t)v11, (uint64_t)v9, type metadata accessor for ReplicatorDevice);
        sub_2453BA3A8((uint64_t)v9, type metadata accessor for ReplicatorDevice);
        goto LABEL_4;
      }
      v21 = sub_245443B14();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v31, v21);
    }
    sub_2453BA364((uint64_t)v11, (uint64_t)v9, type metadata accessor for ReplicatorDevice);
    v22 = v9[*(int *)(v3 + 56)];
    sub_2453BA3A8((uint64_t)v9, type metadata accessor for ReplicatorDevice);
    if ((v22 & 1) == 0)
    {
      sub_24541FC6C((uint64_t)v11, v29);
      v23 = v33;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_2453F1BF4(0, *(_QWORD *)(v23 + 16) + 1, 1);
        v23 = v33;
      }
      v25 = *(_QWORD *)(v23 + 16);
      v24 = *(_QWORD *)(v23 + 24);
      if (v25 >= v24 >> 1)
      {
        sub_2453F1BF4(v24 > 1, v25 + 1, 1);
        v23 = v33;
      }
      *(_QWORD *)(v23 + 16) = v25 + 1;
      sub_24541FC6C(v29, v23 + v15 + v25 * v16);
      v4 = v27;
      v3 = v28;
      goto LABEL_5;
    }
LABEL_4:
    sub_2453BA3A8((uint64_t)v11, type metadata accessor for ReplicatorDevice);
LABEL_5:
    ++v14;
    result = v17;
    if (v30 == v14)
    {
      v13 = v33;
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

uint64_t ReplicatorControlClient.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = v0;
  v2 = sub_245444024();
  v21 = *(_QWORD *)(v2 - 8);
  v22 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_24544400C();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v5);
  v7 = sub_245443CAC();
  MEMORY[0x24BDAC7A8](v7);
  v8 = v0 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient____lazy_storage___deviceUpdates;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574639A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = v0 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient____lazy_storage___enabledStateUpdates;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E030);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_subscriptions) = MEMORY[0x24BEE4B08];
  v12 = OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_calloutQueue;
  sub_2453D0348();
  sub_245443C94();
  v23 = MEMORY[0x24BEE4AF8];
  sub_2453B8BF4((unint64_t *)&qword_25440E6C0, v6, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E688);
  sub_2453F75AC((unint64_t *)&qword_25440E690, &qword_25440E688, MEMORY[0x24BEE12C8]);
  sub_2454440A8();
  (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v4, *MEMORY[0x24BEE5750], v22);
  *(_QWORD *)(v0 + v12) = sub_245444048();
  v13 = OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E6F0);
  v14 = swift_allocObject();
  *(_QWORD *)(v1 + v13) = v14;
  v15 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v1 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_deviceObservers) = MEMORY[0x24BEE4B00];
  *(_DWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_pairedDeviceObservers) = v15;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_enabledStateObservers) = v15;
  if (qword_257463968 != -1)
    swift_once();
  v16 = (void *)qword_257463958;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_singleton) = qword_257463958;
  v17 = v16;
  v23 = sub_24541AE14();
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E600);
  v18 = MEMORY[0x24BDB9AF8];
  sub_2453F75AC(&qword_25440E5F8, &qword_25440E600, MEMORY[0x24BDB9AF8]);
  sub_245443C70();
  swift_release();
  swift_release();
  swift_beginAccess();
  sub_245443C28();
  swift_endAccess();
  swift_release();
  v23 = sub_24541AE38();
  swift_allocObject();
  swift_weakInit();
  sub_245443C70();
  swift_release();
  swift_release();
  swift_beginAccess();
  sub_245443C28();
  swift_endAccess();
  swift_release();
  v23 = sub_24541AE5C();
  swift_allocObject();
  swift_weakInit();
  __swift_instantiateConcreteTypeFromMangledName(&qword_257463978);
  sub_2453F75AC(&qword_257463970, &qword_257463978, v18);
  sub_245443C70();
  swift_release();
  swift_release();
  swift_beginAccess();
  sub_245443C28();
  swift_endAccess();
  swift_release();
  return v1;
}

uint64_t sub_2454194BC(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t result;

  v10 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_24541954C(v10, a3, a4, a5, a6);
    return swift_release();
  }
  return result;
}

uint64_t sub_24541954C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  os_unfair_lock_s *v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[6];

  v23 = a5;
  v9 = sub_245443C88();
  v26 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_245443CAC();
  v24 = *(_QWORD *)(v12 - 8);
  v25 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock);
  swift_retain();
  os_unfair_lock_lock(v15 + 4);
  v16 = (uint64_t *)(v5 + *a2);
  swift_beginAccess();
  v17 = *v16;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v15 + 4);
  swift_release();
  v18 = *(void **)(v5 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_calloutQueue);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v17;
  *(_QWORD *)(v19 + 24) = a1;
  aBlock[4] = a4;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2453D0CCC;
  aBlock[3] = v23;
  v20 = _Block_copy(aBlock);
  v21 = v18;
  swift_bridgeObjectRetain();
  sub_245443C94();
  v27 = MEMORY[0x24BEE4AF8];
  sub_2453B8BF4(&qword_25440E640, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E670);
  sub_2453F75AC(&qword_25440E678, &qword_25440E670, MEMORY[0x24BEE12C8]);
  sub_2454440A8();
  MEMORY[0x249533A44](0, v14, v11, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v25);
  return swift_release();
}

uint64_t sub_2454197A4(char *a1)
{
  char v1;
  uint64_t result;

  v1 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    sub_245419800(v1);
    return swift_release();
  }
  return result;
}

uint64_t sub_245419800(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  os_unfair_lock_s *v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v3 = sub_245443C88();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v19 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_245443CAC();
  v7 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock);
  swift_retain();
  os_unfair_lock_lock(v10 + 4);
  v11 = (uint64_t *)(v1 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_enabledStateObservers);
  swift_beginAccess();
  v12 = *v11;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v10 + 4);
  swift_release();
  v13 = *(void **)(v1 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_calloutQueue);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v12;
  *(_BYTE *)(v14 + 24) = a1;
  aBlock[4] = sub_24542026C;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2453D0CCC;
  aBlock[3] = &block_descriptor_60;
  v15 = _Block_copy(aBlock);
  v16 = v13;
  sub_245443C94();
  v20 = MEMORY[0x24BEE4AF8];
  sub_2453B8BF4(&qword_25440E640, v4, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E670);
  sub_2453F75AC(&qword_25440E678, &qword_25440E670, MEMORY[0x24BEE12C8]);
  sub_2454440A8();
  MEMORY[0x249533A44](0, v9, v6, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v18);
  return swift_release();
}

uint64_t ReplicatorControlClient.deinit()
{
  uint64_t v0;

  sub_2453D055C(v0 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient____lazy_storage___deviceUpdates, &qword_2574639B0);
  sub_2453D055C(v0 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient____lazy_storage___enabledStateUpdates, &qword_257465348);
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ReplicatorControlClient.__deallocating_deinit()
{
  ReplicatorControlClient.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_245419B34(uint64_t a1, uint64_t a2, _QWORD *a3, void (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t *v8;
  unint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v20;

  v8 = (uint64_t *)(a1 + *a3);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v9 = sub_2453C6644(a2);
  v11 = v10;
  swift_bridgeObjectRelease();
  v12 = 0;
  v13 = 0;
  if ((v11 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v8;
    v20 = *v8;
    *v8 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      a4();
      v15 = v20;
    }
    v16 = *(_QWORD *)(v15 + 48);
    v17 = sub_245443B14();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16 + *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72) * v9, v17);
    v18 = (uint64_t *)(*(_QWORD *)(v20 + 56) + 16 * v9);
    v12 = *v18;
    v13 = v18[1];
    sub_245420340(v9, v20);
    *v8 = v20;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return a5(v12, v13);
}

uint64_t sub_245419C5C(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t (**v41)(char);
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  int64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  uint64_t v52;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E330);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v48 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E438);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v50 = (char *)&v43 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v43 - v13;
  v15 = *(_QWORD *)(a1 + 64);
  v44 = a1 + 64;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v45 = (unint64_t)(v16 + 63) >> 6;
  v43 = v45 - 1;
  v49 = a1;
  result = swift_bridgeObjectRetain();
  v20 = 0;
  v21 = a2 & 1;
  v46 = v14;
  v47 = v5;
  if (!v18)
    goto LABEL_8;
LABEL_6:
  v52 = (v18 - 1) & v18;
  v23 = __clz(__rbit64(v18)) | (v20 << 6);
  while (2)
  {
    v24 = v49;
    v25 = *(_QWORD *)(v49 + 48);
    v26 = sub_245443B14();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v10, v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v23, v26);
    v27 = *(int *)(v4 + 48);
    v51 = *(_OWORD *)(*(_QWORD *)(v24 + 56) + 16 * v23);
    *(_OWORD *)&v10[v27] = v51;
    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v28(v10, 0, 1, v4);
    swift_retain();
    while (1)
    {
      v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
      v33 = 1;
      if (v32(v10, 1, v4) != 1)
      {
        v34 = *(int *)(v4 + 48);
        v35 = sub_245443B14();
        v36 = *(void (**)(void))(*(_QWORD *)(v35 - 8) + 32);
        ((void (*)(char *, char *, uint64_t))v36)(v48, v10, v35);
        v37 = swift_allocObject();
        *(_QWORD *)&v51 = v20;
        v38 = v21;
        v39 = v10;
        v40 = v37;
        *(_OWORD *)(v37 + 16) = *(_OWORD *)&v39[v34];
        v41 = (uint64_t (**)(char))&v50[*(int *)(v4 + 48)];
        v14 = v46;
        v36();
        v33 = 0;
        *v41 = sub_245420278;
        v41[1] = (uint64_t (*)(char))v40;
        v10 = v39;
        v21 = v38;
        v20 = v51;
        v5 = v47;
      }
      v42 = (uint64_t)v50;
      v28(v50, v33, 1, v4);
      sub_2453D0428(v42, (uint64_t)v14, &qword_25440E438);
      if (v32(v14, 1, v4) == 1)
        return swift_release();
      (*(void (**)(uint64_t))&v14[*(int *)(v4 + 48)])(v21);
      swift_release();
      v22 = sub_245443B14();
      result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v14, v22);
      v18 = v52;
      if (v52)
        goto LABEL_6;
LABEL_8:
      v29 = v20 + 1;
      if (__OFADD__(v20, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
      if (v29 < v45)
      {
        v30 = *(_QWORD *)(v44 + 8 * v29);
        if (v30)
          goto LABEL_11;
        v31 = v20 + 2;
        ++v20;
        if (v29 + 1 < v45)
        {
          v30 = *(_QWORD *)(v44 + 8 * v31);
          if (v30)
            goto LABEL_14;
          v20 = v29 + 1;
          if (v29 + 2 < v45)
          {
            v30 = *(_QWORD *)(v44 + 8 * (v29 + 2));
            if (v30)
            {
              v29 += 2;
              goto LABEL_11;
            }
            v31 = v29 + 3;
            v20 = v29 + 2;
            if (v29 + 3 < v45)
              break;
          }
        }
      }
LABEL_25:
      v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v28(v10, 1, 1, v4);
      v52 = 0;
    }
    v30 = *(_QWORD *)(v44 + 8 * v31);
    if (v30)
    {
LABEL_14:
      v29 = v31;
LABEL_11:
      v52 = (v30 - 1) & v30;
      v23 = __clz(__rbit64(v30)) + (v29 << 6);
      v20 = v29;
      continue;
    }
    break;
  }
  while (1)
  {
    v29 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v29 >= v45)
    {
      v20 = v43;
      goto LABEL_25;
    }
    v30 = *(_QWORD *)(v44 + 8 * v29);
    ++v31;
    if (v30)
      goto LABEL_11;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t ReplicatorControlClient.addIDToAllowList(idsID:)()
{
  return sub_24541A0C0();
}

uint64_t ReplicatorControlClient.removeFromAllowList(idsID:)()
{
  return sub_24541A0C0();
}

uint64_t sub_24541A0C0()
{
  uint64_t v0;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v0 = sub_245444030();
  if (v8 == 1)
  {
    MEMORY[0x24BDAC7A8](v0);
    return sub_245444030();
  }
  else
  {
    if (qword_257463BF8 != -1)
      swift_once();
    v2 = sub_245443C04();
    __swift_project_value_buffer(v2, (uint64_t)qword_257463BE0);
    v3 = sub_245443BEC();
    v4 = sub_245443FE8();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_2453B6000, v3, v4, "Allow List is disabled. Cannot update allow list.", v5, 2u);
      MEMORY[0x249534440](v5, -1, -1);
    }

    v6 = sub_245443B2C();
    sub_2453B8BF4(&qword_257465340, (uint64_t (*)(uint64_t))MEMORY[0x24BE7F490], MEMORY[0x24BE7F498]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v7, *MEMORY[0x24BE7F478], v6);
    return swift_willThrow();
  }
}

uint64_t ReplicatorControlClient.pair(relationshipID:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = v3;
  v26 = a2;
  v7 = sub_245443B14();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_257463BF8 != -1)
    swift_once();
  v11 = sub_245443C04();
  __swift_project_value_buffer(v11, (uint64_t)qword_257463BE0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  v12 = sub_245443BEC();
  v13 = sub_245444000();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v24 = a3;
    v16 = v15;
    v28 = v15;
    v23 = v3;
    *(_DWORD *)v14 = 136446210;
    v25 = a1;
    sub_2453B8BF4((unint64_t *)&qword_257464D40, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v17 = sub_245444384();
    v27 = sub_2453BDB24(v17, v18, &v28);
    a1 = v25;
    v4 = v23;
    sub_245444078();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    _os_log_impl(&dword_2453B6000, v12, v13, "Requesting pair with %{public}s", v14, 0xCu);
    swift_arrayDestroy();
    v19 = v16;
    a3 = v24;
    MEMORY[0x249534440](v19, -1, -1);
    MEMORY[0x249534440](v14, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  v20 = (_QWORD *)swift_allocObject();
  v21 = v26;
  v20[2] = v4;
  v20[3] = v21;
  v20[4] = a3;
  swift_retain();
  swift_retain();
  sub_24541A740(a1, (uint64_t)sub_24541FDB8, (uint64_t)v20);
  return swift_release();
}

uint64_t sub_24541A528(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  id v18;
  id v19;
  _QWORD v21[2];
  _QWORD aBlock[6];

  v8 = sub_245443C88();
  v21[0] = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_245443CAC();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void **)(a2 + OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_calloutQueue);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = a1;
  aBlock[4] = sub_2453F7A38;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2453D0CCC;
  aBlock[3] = &block_descriptor_54;
  v17 = _Block_copy(aBlock);
  v18 = v15;
  swift_retain();
  v19 = a1;
  sub_245443C94();
  v21[1] = MEMORY[0x24BEE4AF8];
  sub_2453B8BF4(&qword_25440E640, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E670);
  sub_2453F75AC(&qword_25440E678, &qword_25440E670, MEMORY[0x24BEE12C8]);
  sub_2454440A8();
  MEMORY[0x249533A44](0, v14, v10, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v21[0] + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t sub_24541A740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  dispatch_queue_t v20;
  _QWORD aBlock[6];

  v7 = sub_245443B14();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(dispatch_queue_t *)&v3[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  v11 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v12 = (v9 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13 + v11, v10, v7);
  *(_QWORD *)(v13 + v12) = v3;
  v14 = (_QWORD *)(v13 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8));
  *v14 = a2;
  v14[1] = a3;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = sub_245420110;
  *(_QWORD *)(v15 + 24) = v13;
  aBlock[4] = sub_2453F6D10;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_245440240;
  aBlock[3] = &block_descriptor_42;
  v16 = _Block_copy(aBlock);
  v17 = v3;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v20, v16);
  _Block_release(v16);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((a3 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t ReplicatorControlClient.unpair(relationshipID:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = sub_245443B14();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_257463BF8 != -1)
    swift_once();
  v7 = sub_245443C04();
  __swift_project_value_buffer(v7, (uint64_t)qword_257463BE0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v8 = sub_245443BEC();
  v9 = sub_245444000();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v20 = v1;
    v11 = (uint8_t *)v10;
    v12 = swift_slowAlloc();
    v22 = v12;
    v19 = a1;
    *(_DWORD *)v11 = 136446210;
    v18[1] = v11 + 4;
    sub_2453B8BF4((unint64_t *)&qword_257464D40, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v13 = sub_245444384();
    v21 = sub_2453BDB24(v13, v14, &v22);
    a1 = v19;
    sub_245444078();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _os_log_impl(&dword_2453B6000, v8, v9, "Requesting unpair from %{public}s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x249534440](v12, -1, -1);
    MEMORY[0x249534440](v11, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  MEMORY[0x24BDAC7A8](v15);
  v18[-2] = a1;
  v18[-1] = v16;
  return sub_245444030();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReplicatorControlClient.retryStuckRelationships()()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;

  if (qword_257463BF8 != -1)
    swift_once();
  v0 = sub_245443C04();
  __swift_project_value_buffer(v0, (uint64_t)qword_257463BE0);
  v1 = sub_245443BEC();
  v2 = sub_245444000();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_2453B6000, v1, v2, "Requesting retry of stuck relationships", v3, 2u);
    MEMORY[0x249534440](v3, -1, -1);
  }

  MEMORY[0x24BDAC7A8](v4);
  sub_245444030();
}

uint64_t sub_24541ACD0@<X0>(uint64_t a1@<X8>)
{
  return ReplicatorControlClient.deviceUpdates.getter(a1);
}

uint64_t sub_24541ACF0()
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB00);
  sub_245444030();
  return v1;
}

uint64_t sub_24541AD64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ReplicatorControlClient.pair(relationshipID:completion:)(a1, a2, a3);
}

uint64_t sub_24541AD84(uint64_t a1)
{
  return ReplicatorControlClient.unpair(relationshipID:)(a1);
}

void sub_24541ADA4()
{
  ReplicatorControlClient.retryStuckRelationships()();
}

void sub_24541ADC4(Swift::Bool a1)
{
  ReplicatorControlClient.setEnabled(_:)(a1);
}

id sub_24541ADE4()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for Singleton()), sel_init);
  qword_257463958 = (uint64_t)result;
  return result;
}

uint64_t sub_24541AE14()
{
  return sub_2453E0F0C(&OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton____lazy_storage___devicePublisher, (uint64_t)&OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton__devicePublisher, &qword_25440E638, &qword_25440E630);
}

uint64_t sub_24541AE38()
{
  return sub_2453E0F0C(&OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton____lazy_storage___pairedDevicePublisher, (uint64_t)&OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton__pairedDevicePublisher, &qword_25440E638, &qword_25440E630);
}

uint64_t sub_24541AE5C()
{
  return sub_2453E0F0C(&OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton____lazy_storage___enabledStatePublisher, (uint64_t)&OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton__enabledStatePublisher, &qword_257463988, &qword_257463980);
}

id sub_24541AE80()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  objc_class *v13;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  objc_super v18;
  uint64_t v19;

  v1 = sub_245444024();
  v16 = *(_QWORD *)(v1 - 8);
  v17 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v15 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_24544400C();
  MEMORY[0x24BDAC7A8](v3);
  v4 = sub_245443CAC();
  MEMORY[0x24BDAC7A8](v4);
  *(_QWORD *)&v0[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton____lazy_storage___devicePublisher] = 0;
  v5 = OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton__devicePublisher;
  v6 = MEMORY[0x24BEE4AF8];
  v19 = MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E638);
  swift_allocObject();
  v7 = v0;
  *(_QWORD *)&v0[v5] = sub_245443C58();
  *(_QWORD *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton____lazy_storage___pairedDevicePublisher] = 0;
  v8 = OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton__pairedDevicePublisher;
  v19 = v6;
  swift_allocObject();
  *(_QWORD *)&v7[v8] = sub_245443C58();
  *(_QWORD *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton____lazy_storage___enabledStatePublisher] = 0;
  v9 = OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton__enabledStatePublisher;
  LOBYTE(v19) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257463988);
  swift_allocObject();
  *(_QWORD *)&v7[v9] = sub_245443C58();
  v10 = OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_connection;
  *(_QWORD *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_connection] = 0;
  *(_DWORD *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_serverStartupToken] = -1;
  v11 = OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue;
  sub_2453D0348();
  sub_245443CA0();
  v19 = v6;
  sub_2453B8BF4((unint64_t *)&qword_25440E6C0, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688], MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E688);
  sub_2453F75AC((unint64_t *)&qword_25440E690, &qword_25440E688, MEMORY[0x24BEE12C8]);
  sub_2454440A8();
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v15, *MEMORY[0x24BEE5758], v17);
  *(_QWORD *)&v7[v11] = sub_245444048();
  *(_DWORD *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_deviceToken] = -1;
  *(_DWORD *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_enabledStateToken] = -1;
  *(_QWORD *)&v7[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_devices] = MEMORY[0x24BEE4AF8];
  v7[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_isEnabled] = 1;
  v7[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_deviceFetchPending] = 0;
  v7[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_hasFetchedDevices] = 0;
  v7[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_hasFetchedEnabledState] = 0;
  v12 = *(void **)&v7[v10];
  *(_QWORD *)&v7[v10] = 0;

  v13 = (objc_class *)type metadata accessor for Singleton();
  v18.receiver = v7;
  v18.super_class = v13;
  return objc_msgSendSuper2(&v18, sel_init);
}

id sub_24541B1E8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Singleton();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_24541B2C4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  if ((*(_BYTE *)(a1
                 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_hasFetchedDevices) & 1) == 0)
  {
    sub_24541B320();
    sub_24541B6C0();
  }
  *a2 = *(_QWORD *)(a1 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_devices);
  return swift_bridgeObjectRetain();
}

void sub_24541B320()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  NSObject *v11;
  char v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint32_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  _QWORD aBlock[6];
  int out_token;
  uint64_t v27;

  v1 = v0;
  v27 = *MEMORY[0x24BDAC8D0];
  v2 = sub_245443CDC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (_QWORD *)((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_257463BF8 != -1)
    swift_once();
  v6 = sub_245443C04();
  __swift_project_value_buffer(v6, (uint64_t)qword_257463BE0);
  v7 = sub_245443BEC();
  v8 = sub_245444000();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_2453B6000, v7, v8, "Registering for device changes", v9, 2u);
    MEMORY[0x249534440](v9, -1, -1);
  }

  v10 = *(void **)&v0[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue];
  *v5 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE5610], v2);
  v11 = v10;
  v12 = sub_245443CE8();
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v12 & 1) == 0)
    __break(1u);
  v13 = OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_deviceToken;
  if (*(_DWORD *)&v0[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_deviceToken] == -1)
  {
    out_token = -1;
    v18 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = sub_245421294;
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_2454171FC;
    aBlock[3] = &block_descriptor_129;
    v19 = _Block_copy(aBlock);
    swift_release();
    v20 = sub_245443DD8();
    v21 = notify_register_dispatch((const char *)(v20 + 32), &out_token, v11, v19);
    swift_release();
    _Block_release(v19);
    if (v21)
    {
      v22 = sub_245443BEC();
      v23 = sub_245443FE8();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v24 = 0;
        _os_log_impl(&dword_2453B6000, v22, v23, "Could not register for device change notifications", v24, 2u);
        MEMORY[0x249534440](v24, -1, -1);
      }

    }
    *(_DWORD *)&v1[v13] = out_token;
  }
  else
  {
    v14 = v0;
    v15 = sub_245443BEC();
    v16 = sub_245444000();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v17 = 67240192;
      LODWORD(aBlock[0]) = *(_DWORD *)&v1[v13];
      sub_245444078();

      _os_log_impl(&dword_2453B6000, v15, v16, "Already subscribed to device changes with token %{public}d", v17, 8u);
      MEMORY[0x249534440](v17, -1, -1);

    }
    else
    {

    }
  }
}

void sub_24541B6C0()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  id v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  char v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  id *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  id *v85;
  NSObject *v86;
  os_log_type_t v87;
  _BOOL4 v88;
  uint8_t *v89;
  __int128 v90;
  id v91;
  void *v92;
  id v93;
  id v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  void *v98;
  id v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  char v109;
  void *v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  id *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  id v129[3];

  v1 = v0;
  v129[1] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v116 = (char *)&v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  *(_QWORD *)&v123 = (char *)&v111 - v6;
  MEMORY[0x24BDAC7A8](v5);
  v117 = (id *)((char *)&v111 - v7);
  v8 = type metadata accessor for ReplicatorDevice(0);
  v9 = *(_QWORD **)(v8 - 8);
  v126 = v8;
  v127 = v9;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v125 = (char *)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (unint64_t)&v111 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v118 = (uint64_t)&v111 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v120 = (uint64_t)&v111 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v119 = (char *)&v111 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v122 = (uint64_t)&v111 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v111 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v111 - v26;
  v28 = sub_245443CDC();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v31 = (uint64_t *)((char *)&v111 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = *(void **)(v1 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue);
  *v31 = v32;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v29 + 104))(v31, *MEMORY[0x24BEE5610], v28);
  v33 = v32;
  LOBYTE(v32) = sub_245443CE8();
  (*(void (**)(_QWORD *, uint64_t))(v29 + 8))(v31, v28);
  if ((v32 & 1) == 0)
    goto LABEL_56;
  if (qword_257463BF8 != -1)
    goto LABEL_57;
LABEL_3:
  v34 = sub_245443C04();
  v121 = __swift_project_value_buffer(v34, (uint64_t)qword_257463BE0);
  v35 = sub_245443BEC();
  v36 = sub_245444000();
  v37 = os_log_type_enabled(v35, v36);
  v38 = (uint64_t)v117;
  if (v37)
  {
    v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v39 = 0;
    _os_log_impl(&dword_2453B6000, v35, v36, "Fetching devices", v39, 2u);
    MEMORY[0x249534440](v39, -1, -1);
  }

  v40 = sub_24541C910();
  if (!v40)
  {
    v81 = sub_245443BEC();
    v82 = sub_245443FE8();
    if (os_log_type_enabled(v81, v82))
    {
      v83 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v83 = 0;
      _os_log_impl(&dword_2453B6000, v81, v82, "Could not fetch devices because target could not be created", v83, 2u);
      MEMORY[0x249534440](v83, -1, -1);
    }

    return;
  }
  v41 = (void *)v40;
  v113 = OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_devices;
  v114 = v1;
  v42 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_devices);
  v43 = (id)MEMORY[0x24BEE4AF8];
  v129[0] = (id)MEMORY[0x24BEE4AF8];
  v44 = *(_QWORD *)(v42 + 16);
  swift_bridgeObjectRetain();
  v124 = v44;
  v112 = v41;
  v115 = v14;
  if (!v44)
    goto LABEL_22;
  v14 = 0;
  v45 = v126;
  do
  {
    if (v14 >= *(_QWORD *)(v42 + 16))
    {
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      swift_once();
      goto LABEL_3;
    }
    v1 = (*((unsigned __int8 *)v127 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v127 + 80);
    v46 = v127[9];
    sub_2453BA364(v42 + v1 + v46 * v14, (uint64_t)v27, type metadata accessor for ReplicatorDevice);
    sub_2453BA364((uint64_t)&v27[*(int *)(v45 + 48)], v38, type metadata accessor for ReplicatorDevice.RelationshipState);
    v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
    v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48))(v38, 4, v47);
    if ((v48 - 2) >= 2)
    {
      if (v48)
      {
        sub_2453BA3A8(v38, type metadata accessor for ReplicatorDevice.RelationshipState);
        sub_2453BA364((uint64_t)v27, (uint64_t)v25, type metadata accessor for ReplicatorDevice);
        sub_2453BA3A8((uint64_t)v25, type metadata accessor for ReplicatorDevice);
LABEL_9:
        sub_2453BA3A8((uint64_t)v27, type metadata accessor for ReplicatorDevice);
        goto LABEL_10;
      }
      v49 = sub_245443B14();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v38, v49);
    }
    sub_2453BA364((uint64_t)v27, (uint64_t)v25, type metadata accessor for ReplicatorDevice);
    v50 = v25[*(int *)(v45 + 56)];
    sub_2453BA3A8((uint64_t)v25, type metadata accessor for ReplicatorDevice);
    if ((v50 & 1) != 0)
      goto LABEL_9;
    sub_24541FC6C((uint64_t)v27, v122);
    v51 = v129[0];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_2453F1BF4(0, v51[2] + 1, 1);
      v51 = v129[0];
    }
    v53 = v51[2];
    v52 = v51[3];
    if (v53 >= v52 >> 1)
    {
      sub_2453F1BF4(v52 > 1, v53 + 1, 1);
      v51 = v129[0];
    }
    v51[2] = v53 + 1;
    sub_24541FC6C(v122, (uint64_t)v51 + v1 + v53 * v46);
    v45 = v126;
    v38 = (uint64_t)v117;
LABEL_10:
    ++v14;
  }
  while (v124 != v14);
  v43 = v129[0];
  v41 = v112;
  v14 = v115;
LABEL_22:
  swift_bridgeObjectRelease();
  v54 = sub_2454158D0((uint64_t)v43);
  swift_release();
  v129[0] = 0;
  v55 = objc_msgSend(v41, sel_devicesAndReturnError_, v129);
  v56 = v129[0];
  if (v55)
  {
    v57 = v55;
    v111 = v54;
    sub_245443964();
    swift_allocObject();
    sub_245443958();
    v58 = sub_245443A78();
    v60 = v59;
    sub_2453FD184();
    sub_24544394C();
    sub_2453BDCF8(v58, v60);
    v1 = v114;
    swift_release();
    v61 = (id *)v129[0];
    v27 = v125;
    if (!v129[0])
    {
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      JUMPOUT(0x24541C5C4);
    }
    v62 = v56;

    v63 = v113;
    *(_QWORD *)(v1 + v113) = v61;
    v117 = v61;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v1
             + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_hasFetchedDevices) = 1;
    v64 = *(_QWORD *)(v1 + v63);
    v65 = (id)MEMORY[0x24BEE4AF8];
    v129[0] = (id)MEMORY[0x24BEE4AF8];
    v66 = *(_QWORD *)(v64 + 16);
    swift_bridgeObjectRetain();
    v67 = v126;
    if (v66)
    {
      v14 = 0;
      v25 = v119;
      while (1)
      {
        if (v14 >= *(_QWORD *)(v64 + 16))
          goto LABEL_55;
        v1 = (*((unsigned __int8 *)v127 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v127 + 80);
        v69 = v127[9];
        sub_2453BA364(v64 + v1 + v69 * v14, (uint64_t)v25, type metadata accessor for ReplicatorDevice);
        v70 = v123;
        sub_2453BA364((uint64_t)&v25[*(int *)(v67 + 48)], v123, type metadata accessor for ReplicatorDevice.RelationshipState);
        v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
        v72 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 48))(v70, 4, v71);
        if ((v72 - 2) >= 2)
        {
          if (v72)
          {
            sub_2453BA3A8(v123, type metadata accessor for ReplicatorDevice.RelationshipState);
            v68 = v120;
            sub_2453BA364((uint64_t)v25, v120, type metadata accessor for ReplicatorDevice);
            sub_2453BA3A8(v68, type metadata accessor for ReplicatorDevice);
            goto LABEL_27;
          }
          v73 = sub_245443B14();
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v73 - 8) + 8))(v123, v73);
        }
        v74 = (uint64_t)v25;
        v75 = v120;
        sub_2453BA364(v74, v120, type metadata accessor for ReplicatorDevice);
        v76 = *(_BYTE *)(v75 + *(int *)(v67 + 56));
        v77 = v75;
        v25 = v119;
        sub_2453BA3A8(v77, type metadata accessor for ReplicatorDevice);
        if ((v76 & 1) == 0)
        {
          sub_24541FC6C((uint64_t)v25, v118);
          v78 = v129[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_2453F1BF4(0, v78[2] + 1, 1);
            v78 = v129[0];
          }
          v80 = v78[2];
          v79 = v78[3];
          if (v80 >= v79 >> 1)
          {
            sub_2453F1BF4(v79 > 1, v80 + 1, 1);
            v78 = v129[0];
          }
          v78[2] = v80 + 1;
          sub_24541FC6C(v118, (uint64_t)v78 + v1 + v80 * v69);
          v27 = v125;
          v67 = v126;
          goto LABEL_28;
        }
LABEL_27:
        sub_2453BA3A8((uint64_t)v25, type metadata accessor for ReplicatorDevice);
LABEL_28:
        if (v66 == ++v14)
        {
          v65 = v129[0];
          v14 = v115;
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
    v84 = sub_2454158D0((uint64_t)v65);
    swift_release();
    v85 = v117;
    swift_bridgeObjectRetain();
    v86 = sub_245443BEC();
    v87 = sub_245444000();
    v88 = os_log_type_enabled(v86, v87);
    v120 = v84;
    if (v88)
    {
      v89 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v89 = 134217984;
      v129[0] = v85[2];
      sub_245444078();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_2453B6000, v86, v87, "Fetched %ld devices", v89, 0xCu);
      MEMORY[0x249534440](v89, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    v102 = (uint64_t)v116;
    v103 = v126;
    v104 = v85[2];
    if (v104)
    {
      v105 = (uint64_t)v117
           + ((*((unsigned __int8 *)v127 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v127 + 80));
      *(_QWORD *)&v90 = 136446466;
      v123 = v90;
      v122 = MEMORY[0x24BEE4AD8] + 8;
      sub_2453BA364(v105, v14, type metadata accessor for ReplicatorDevice);
      sub_2453BA364(v14 + *(int *)(v103 + 48), v102, type metadata accessor for ReplicatorDevice.RelationshipState);
      v106 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
      v107 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 48))(v102, 4, v106);
      v127 = v104;
      __asm { BR              X9 }
    }
    swift_bridgeObjectRelease();
    v129[0] = *(id *)(v114 + v113);
    swift_bridgeObjectRetain();
    sub_245443C4C();
    swift_bridgeObjectRelease();
    v108 = v120;
    v109 = sub_245410260(v111, v120);
    swift_bridgeObjectRelease();
    if ((v109 & 1) != 0)
    {
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v110 = (void *)sub_2453F2558(v108);
      swift_bridgeObjectRelease();
      v129[0] = v110;
      sub_245443C4C();
      swift_release();
      swift_unknownObjectRelease();
    }
  }
  else
  {
    v91 = v129[0];
    swift_bridgeObjectRelease();
    v92 = (void *)sub_2454439B8();

    swift_willThrow();
    v93 = v92;
    v94 = v92;
    v95 = sub_245443BEC();
    v96 = sub_245443FE8();
    if (os_log_type_enabled(v95, v96))
    {
      v97 = (uint8_t *)swift_slowAlloc();
      v98 = (void *)swift_slowAlloc();
      v129[0] = v98;
      *(_DWORD *)v97 = 136315138;
      v128 = (uint64_t)v92;
      v99 = v92;
      __swift_instantiateConcreteTypeFromMangledName(&qword_257464988);
      v100 = sub_245443DCC();
      v128 = sub_2453BDB24(v100, v101, (uint64_t *)v129);
      sub_245444078();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_2453B6000, v95, v96, "Could not fetch devices: %s", v97, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x249534440](v98, -1, -1);
      MEMORY[0x249534440](v97, -1, -1);
      swift_unknownObjectRelease();

    }
    else
    {
      swift_unknownObjectRelease();

    }
  }
}

uint64_t sub_24541C5D8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t PushToken;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  id v23;
  uint64_t result;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  id v32;
  unint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  PushToken = type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken(0);
  MEMORY[0x24BDAC7A8](PushToken);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_245443B14();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v7, a1, v8);
  v9 = sub_24541C910();
  if (!v9)
  {
    v26 = sub_245443B2C();
    sub_2453B8BF4(&qword_257465340, (uint64_t (*)(uint64_t))MEMORY[0x24BE7F490], MEMORY[0x24BE7F498]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v27, *MEMORY[0x24BE7F468], v26);
    swift_willThrow();
    return sub_2453BA3A8((uint64_t)v7, type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken);
  }
  v10 = (void *)v9;
  sub_245443994();
  swift_allocObject();
  sub_245443988();
  sub_2453B8BF4(&qword_257464B70, type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.GetPushToken);
  v11 = sub_24544397C();
  if (!v2)
  {
    v13 = v11;
    v14 = v12;
    v15 = (void *)sub_245443A6C();
    sub_2453BDCF8(v13, v14);
    swift_release();
    v32 = 0;
    v16 = objc_msgSend(v10, sel_pushTokenWithParameters_error_, v15, &v32);

    v17 = v32;
    if (v16)
    {
      v31 = a2;
      sub_245443964();
      swift_allocObject();
      sub_245443958();
      v18 = sub_245443A78();
      v20 = v19;
      sub_2453FD4A8();
      sub_24544394C();
      sub_2453BDCF8(v18, v20);
      swift_release();
      v21 = v33;
      if (v33 >> 60 != 15)
      {
        v22 = v32;
        v23 = v17;

        swift_unknownObjectRelease();
        result = sub_2453BA3A8((uint64_t)v7, type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken);
        v25 = v31;
        *v31 = v22;
        v25[1] = v21;
        return result;
      }
      __break(1u);
      goto LABEL_10;
    }
    v28 = v32;
    sub_2454439B8();

    swift_willThrow();
    swift_unknownObjectRelease();
    return sub_2453BA3A8((uint64_t)v7, type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken);
  }
LABEL_10:
  v29 = swift_unexpectedError();
  __break(1u);
  sub_2453BDCF8(v29, v30);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_24541C910()
{
  uint64_t v0;
  NSObject *v1;
  Class isa;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _QWORD v16[2];
  _OWORD v17[2];
  _BYTE v18[24];
  uint64_t v19;

  v1 = sub_245443CDC();
  isa = v1[-1].isa;
  MEMORY[0x24BDAC7A8](v1);
  v4 = (_QWORD *)((char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue);
  *v4 = v5;
  (*((void (**)(_QWORD *, _QWORD, NSObject *))isa + 13))(v4, *MEMORY[0x24BEE5610], v1);
  v6 = v5;
  LOBYTE(v5) = sub_245443CE8();
  (*((void (**)(_QWORD *, NSObject *))isa + 1))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_20:
    swift_once();
    goto LABEL_15;
  }
  sub_24541F4A4();
  v7 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_connection);
  if (!v7)
  {
    if (qword_257463BF8 != -1)
      swift_once();
    v8 = sub_245443C04();
    __swift_project_value_buffer(v8, (uint64_t)qword_257463BE0);
    v1 = sub_245443BEC();
    v9 = sub_245443FF4();
    if (os_log_type_enabled(v1, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_2453B6000, v1, v9, "ReplicatorControlClient: Failed to establish a connection", v10, 2u);
      MEMORY[0x249534440](v10, -1, -1);
    }
    goto LABEL_18;
  }
  v1 = v7;
  if (-[NSObject remoteTarget](v1, sel_remoteTarget))
  {
    sub_24544409C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  sub_2453D0428((uint64_t)v17, (uint64_t)v18, &qword_25440E7F8);
  if (v19)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257463940);
    if ((swift_dynamicCast() & 1) != 0)
    {

      return v16[1];
    }
  }
  else
  {
    sub_2453D055C((uint64_t)v18, &qword_25440E7F8);
  }
  if (qword_257463BF8 != -1)
    goto LABEL_20;
LABEL_15:
  v12 = sub_245443C04();
  __swift_project_value_buffer(v12, (uint64_t)qword_257463BE0);
  v13 = sub_245443BEC();
  v14 = sub_245443FF4();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_2453B6000, v13, v14, "ReplicatorControlClient: Failed to cast connection to server interface protocol", v15, 2u);
    MEMORY[0x249534440](v15, -1, -1);
  }

LABEL_18:
  return 0;
}

uint64_t sub_24541CBE8(uint64_t a1, uint64_t a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  void (**v23)(void);
  void (*v24)(void);
  void *v25;
  void *v26;
  uint64_t v27;
  id v29;
  void (*v30)(void);
  void (*v31)(void);
  char *v32;
  uint64_t v33;
  _QWORD aBlock[7];

  v7 = sub_245443B14();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v7);
  v32 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ReplicatorControlXPCServerParameters.Pair(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v33 = a1;
  v13(v12, a1, v7);
  v14 = (void *)sub_24541C910();
  if (v14)
  {
    v29 = v14;
    v30 = a3;
    v31 = a4;
    sub_245443994();
    swift_allocObject();
    sub_245443988();
    sub_2453B8BF4(&qword_257464B10, type metadata accessor for ReplicatorControlXPCServerParameters.Pair, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.Pair);
    v15 = sub_24544397C();
    v17 = v16;
    v18 = (uint64_t)v12;
    v19 = (void *)sub_245443A6C();
    sub_2453BDCF8(v15, v17);
    swift_release();
    v20 = v32;
    v13(v32, v33, v7);
    v21 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v22 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v22 + v21, v20, v7);
    v23 = (void (**)(void))(v22 + ((v9 + v21 + 7) & 0xFFFFFFFFFFFFFFF8));
    v24 = v31;
    *v23 = v30;
    v23[1] = v24;
    aBlock[4] = sub_2454201E8;
    aBlock[5] = v22;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_24541D368;
    aBlock[3] = &block_descriptor_48;
    v25 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v29, sel_pairWithParameters_completion_, v19, v25);
    _Block_release(v25);
    swift_unknownObjectRelease();

  }
  else
  {
    sub_2453CBA28();
    v26 = (void *)swift_allocError();
    *(_BYTE *)v27 = 3;
    *(_QWORD *)(v27 + 8) = 0;
    a3();

    v18 = (uint64_t)v12;
  }
  return sub_2453BA3A8(v18, type metadata accessor for ReplicatorControlXPCServerParameters.Pair);
}

void sub_24541CEAC(void *a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  _QWORD *v26;
  os_log_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  id v38;
  uint64_t v39;
  os_log_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_QWORD);
  uint64_t v45;
  uint64_t v46;

  v8 = sub_245443B14();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v39 - v13;
  if (a1)
  {
    v15 = qword_257463BF8;
    v16 = a1;
    if (v15 != -1)
      swift_once();
    v17 = sub_245443C04();
    __swift_project_value_buffer(v17, (uint64_t)qword_257463BE0);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
    v18 = v16;
    v19 = sub_245443BEC();
    v20 = sub_245444000();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc();
      v44 = a3;
      v22 = v21;
      v41 = (_QWORD *)swift_slowAlloc();
      v42 = swift_slowAlloc();
      v46 = v42;
      *(_DWORD *)v22 = 136446466;
      v43 = a4;
      sub_2453B8BF4((unint64_t *)&qword_257464D40, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v40 = v19;
      v23 = sub_245444384();
      v45 = sub_2453BDB24(v23, v24, &v46);
      sub_245444078();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      *(_WORD *)(v22 + 12) = 2114;
      v45 = (uint64_t)v18;
      v25 = v18;
      sub_245444078();
      v26 = v41;
      *v41 = a1;

      v27 = v40;
      _os_log_impl(&dword_2453B6000, v40, v20, "Failed to pair with %{public}s: %{public}@", (uint8_t *)v22, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_257464800);
      swift_arrayDestroy();
      MEMORY[0x249534440](v26, -1, -1);
      v28 = v42;
      swift_arrayDestroy();
      MEMORY[0x249534440](v28, -1, -1);
      v29 = v22;
      a3 = v44;
      MEMORY[0x249534440](v29, -1, -1);

    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);

    }
    v38 = v18;
    a3(a1);

  }
  else
  {
    if (qword_257463BF8 != -1)
      swift_once();
    v30 = sub_245443C04();
    __swift_project_value_buffer(v30, (uint64_t)qword_257463BE0);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, a2, v8);
    v31 = sub_245443BEC();
    v32 = sub_245444000();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      v34 = swift_slowAlloc();
      v43 = a4;
      v35 = v34;
      v46 = v34;
      *(_DWORD *)v33 = 136446210;
      v44 = a3;
      sub_2453B8BF4((unint64_t *)&qword_257464D40, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v36 = sub_245444384();
      v45 = sub_2453BDB24(v36, v37, &v46);
      a3 = v44;
      sub_245444078();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
      _os_log_impl(&dword_2453B6000, v31, v32, "Paired with %{public}s", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x249534440](v35, -1, -1);
      MEMORY[0x249534440](v33, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }

    a3(0);
  }
}

void sub_24541D368(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

uint64_t sub_24541D3BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t result;
  id v18[2];

  v18[1] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = type metadata accessor for ReplicatorControlXPCServerParameters.Unpair(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_245443B14();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v5, a1, v6);
  v7 = sub_24541C910();
  if (!v7)
  {
    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v15 = 3;
    *(_QWORD *)(v15 + 8) = 0;
    swift_willThrow();
    return sub_2453BA3A8((uint64_t)v5, type metadata accessor for ReplicatorControlXPCServerParameters.Unpair);
  }
  v8 = (void *)v7;
  sub_245443994();
  swift_allocObject();
  sub_245443988();
  sub_2453B8BF4(&qword_257464B20, type metadata accessor for ReplicatorControlXPCServerParameters.Unpair, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.Unpair);
  v9 = sub_24544397C();
  if (!v1)
  {
    v11 = v9;
    v12 = v10;
    v13 = (void *)sub_245443A6C();
    sub_2453BDCF8(v11, v12);
    swift_release();
    v18[0] = 0;
    LOBYTE(v12) = objc_msgSend(v8, sel_unpairWithParameters_error_, v13, v18);

    if ((v12 & 1) != 0)
    {
      v14 = v18[0];
    }
    else
    {
      v16 = v18[0];
      sub_2454439B8();

      swift_willThrow();
    }
    swift_unknownObjectRelease();
    return sub_2453BA3A8((uint64_t)v5, type metadata accessor for ReplicatorControlXPCServerParameters.Unpair);
  }
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_24541D5D8(uint64_t a1, char a2)
{
  return sub_24541EB9C(a1, a2, (void (*)(uint64_t, uint64_t))sub_2453FCE20, (uint64_t)&type metadata for ReplicatorControlXPCServerParameters.AllowListEnabled, (SEL *)&selRef_enableAllowListWithParameters_error_);
}

uint64_t sub_24541D638(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t result;
  id v14;
  id v15[2];

  v15[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = sub_24541C910();
  if (v4)
  {
    v5 = (void *)v4;
    v15[0] = a2;
    sub_245443994();
    swift_allocObject();
    swift_bridgeObjectRetain();
    sub_245443988();
    sub_2453FCF80();
    v6 = sub_24544397C();
    if (v2)
    {
      result = swift_unexpectedError();
      __break(1u);
    }
    else
    {
      v8 = v6;
      v9 = v7;
      v10 = (void *)sub_245443A6C();
      sub_2453BDCF8(v8, v9);
      swift_bridgeObjectRelease();
      swift_release();
      v15[0] = 0;
      LOBYTE(v8) = objc_msgSend(v5, sel_setAllowListWithParameters_error_, v10, v15);

      if ((v8 & 1) != 0)
      {
        v11 = v15[0];
      }
      else
      {
        v14 = v15[0];
        sub_2454439B8();

        swift_willThrow();
      }
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v12 = 3;
    *(_QWORD *)(v12 + 8) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_24541D7EC(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t result;
  id v20;
  id v21[2];

  v21[1] = *(id *)MEMORY[0x24BDAC8D0];
  v6 = type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_24541C910();
  if (v9)
  {
    v10 = (void *)v9;
    v11 = sub_245443B14();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v8, a2, v11);
    sub_245443994();
    swift_allocObject();
    sub_245443988();
    sub_2453B8BF4(&qword_257464B48, type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.AllowListID);
    v12 = sub_24544397C();
    if (v3)
    {
      result = swift_unexpectedError();
      __break(1u);
    }
    else
    {
      v14 = v12;
      v15 = v13;
      v16 = (void *)sub_245443A6C();
      sub_2453BDCF8(v14, v15);
      swift_release();
      v21[0] = 0;
      LOBYTE(v14) = objc_msgSend(v10, *a3, v16, v21);

      if ((v14 & 1) != 0)
      {
        v17 = v21[0];
      }
      else
      {
        v20 = v21[0];
        sub_2454439B8();

        swift_willThrow();
      }
      swift_unknownObjectRelease();
      return sub_2453BA3A8((uint64_t)v8, type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID);
    }
  }
  else
  {
    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v18 = 3;
    *(_QWORD *)(v18 + 8) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_24541DA08@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_24541DA44();
  *a1 = result & 1;
  return result;
}

uint64_t sub_24541DA44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void *v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t result;
  uint64_t v33;
  id v34[2];

  v34[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = sub_245443CDC();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (id *)((char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE5610], v1);
  v6 = v5;
  LOBYTE(v5) = sub_245443CE8();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v7 = (void *)sub_24541C910();
  if (!v7)
  {
    if (qword_257463BF8 == -1)
    {
LABEL_7:
      v16 = sub_245443C04();
      __swift_project_value_buffer(v16, (uint64_t)qword_257463BE0);
      v17 = sub_245443BEC();
      v18 = sub_245443FE8();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v19 = 0;
        _os_log_impl(&dword_2453B6000, v17, v18, "Could not fetch allow list state because target could not be created", v19, 2u);
        MEMORY[0x249534440](v19, -1, -1);
      }

      return 0;
    }
LABEL_18:
    swift_once();
    goto LABEL_7;
  }
  v34[0] = 0;
  v8 = objc_msgSend(v7, sel_isAllowListEnabledAndReturnError_, v34);
  v9 = v34[0];
  if (!v8)
  {
    v20 = v34[0];
    v21 = (void *)sub_2454439B8();

    swift_willThrow();
    if (qword_257463BF8 != -1)
      swift_once();
    v22 = sub_245443C04();
    __swift_project_value_buffer(v22, (uint64_t)qword_257463BE0);
    v23 = v21;
    v24 = v21;
    v25 = sub_245443BEC();
    v26 = sub_245443FE8();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = (void *)swift_slowAlloc();
      v34[0] = v28;
      *(_DWORD *)v27 = 136315138;
      v33 = (uint64_t)v21;
      v29 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&qword_257464988);
      v30 = sub_245443DCC();
      v33 = sub_2453BDB24(v30, v31, (uint64_t *)v34);
      sub_245444078();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_2453B6000, v25, v26, "Could not fetch allow list state: %s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x249534440](v28, -1, -1);
      MEMORY[0x249534440](v27, -1, -1);
      swift_unknownObjectRelease();

    }
    else
    {
      swift_unknownObjectRelease();

    }
    return 0;
  }
  v10 = v8;
  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v11 = sub_245443A78();
  v13 = v12;
  sub_2453FD26C();
  sub_24544394C();
  sub_2453BDCF8(v11, v13);
  swift_release();
  if (LOBYTE(v34[0]) != 2)
  {
    v14 = (uint64_t)v34[0] & 1;
    v15 = v9;
    swift_unknownObjectRelease();

    return v14;
  }
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_24541DEA8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_24541DEE0();
  *a1 = result;
  return result;
}

uint64_t sub_24541DEE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void *v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t result;
  uint64_t v33;
  id v34[2];

  v34[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = sub_245443CDC();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (id *)((char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE5610], v1);
  v6 = v5;
  LOBYTE(v5) = sub_245443CE8();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v7 = (void *)sub_24541C910();
  if (!v7)
  {
    if (qword_257463BF8 == -1)
    {
LABEL_7:
      v16 = sub_245443C04();
      __swift_project_value_buffer(v16, (uint64_t)qword_257463BE0);
      v17 = sub_245443BEC();
      v18 = sub_245443FE8();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v19 = 0;
        _os_log_impl(&dword_2453B6000, v17, v18, "Could not fetch allow list because target could not be created", v19, 2u);
        MEMORY[0x249534440](v19, -1, -1);
      }

      return MEMORY[0x24BEE4AF8];
    }
LABEL_18:
    swift_once();
    goto LABEL_7;
  }
  v34[0] = 0;
  v8 = objc_msgSend(v7, sel_allowListAndReturnError_, v34);
  v9 = v34[0];
  if (!v8)
  {
    v20 = v34[0];
    v21 = (void *)sub_2454439B8();

    swift_willThrow();
    if (qword_257463BF8 != -1)
      swift_once();
    v22 = sub_245443C04();
    __swift_project_value_buffer(v22, (uint64_t)qword_257463BE0);
    v23 = v21;
    v24 = v21;
    v25 = sub_245443BEC();
    v26 = sub_245443FE8();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = (void *)swift_slowAlloc();
      v34[0] = v28;
      *(_DWORD *)v27 = 136315138;
      v33 = (uint64_t)v21;
      v29 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&qword_257464988);
      v30 = sub_245443DCC();
      v33 = sub_2453BDB24(v30, v31, (uint64_t *)v34);
      sub_245444078();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_2453B6000, v25, v26, "Could not fetch allow list: %s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x249534440](v28, -1, -1);
      MEMORY[0x249534440](v27, -1, -1);
      swift_unknownObjectRelease();

    }
    else
    {
      swift_unknownObjectRelease();

    }
    return MEMORY[0x24BEE4AF8];
  }
  v10 = v8;
  sub_245443964();
  swift_allocObject();
  v11 = v9;
  sub_245443958();
  v12 = sub_245443A78();
  v14 = v13;
  sub_2453FD354();
  sub_24544394C();
  sub_2453BDCF8(v12, v14);
  swift_release();
  v15 = v34[0];
  if (v34[0])
  {
    swift_unknownObjectRelease();

    return (uint64_t)v15;
  }
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_24541E344()
{
  void *v0;
  id v1;
  uint64_t v2;
  id v4;
  id v5[2];

  v5[1] = *(id *)MEMORY[0x24BDAC8D0];
  v0 = (void *)sub_24541C910();
  if (v0)
  {
    v5[0] = 0;
    if ((objc_msgSend(v0, sel_retryStuckRelationshipsAndReturnError_, v5) & 1) != 0)
    {
      v1 = v5[0];
    }
    else
    {
      v4 = v5[0];
      sub_2454439B8();

      swift_willThrow();
    }
    return swift_unknownObjectRelease();
  }
  else
  {
    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v2 = 3;
    *(_QWORD *)(v2 + 8) = 0;
    return swift_willThrow();
  }
}

void sub_24541E434(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  if ((*(_BYTE *)(a1
                 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_hasFetchedEnabledState) & 1) == 0)
  {
    sub_24541E48C();
    sub_24541E704();
  }
  *a2 = *(_BYTE *)(a1
                 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_isEnabled);
}

void sub_24541E48C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint32_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD aBlock[6];
  int out_token;
  uint64_t v19;

  v1 = v0;
  v19 = *MEMORY[0x24BDAC8D0];
  v2 = sub_245443CDC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (_QWORD *)((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE5610], v2);
  v7 = v6;
  v8 = sub_245443CE8();
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v8 = OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_enabledStateToken;
  if (*(_DWORD *)(v1
                 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_enabledStateToken) != -1)
    return;
  out_token = -1;
  v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_24542128C;
  aBlock[5] = v9;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_2454171FC;
  aBlock[3] = &block_descriptor_125;
  v10 = _Block_copy(aBlock);
  swift_release();
  v11 = sub_245443DD8();
  v12 = notify_register_dispatch((const char *)(v11 + 32), &out_token, v7, v10);
  swift_release();
  _Block_release(v10);
  if (v12)
  {
    if (qword_257463BF8 == -1)
    {
LABEL_5:
      v13 = sub_245443C04();
      __swift_project_value_buffer(v13, (uint64_t)qword_257463BE0);
      v14 = sub_245443BEC();
      v15 = sub_245443FE8();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v16 = 0;
        _os_log_impl(&dword_2453B6000, v14, v15, "Could not register for enabled state change notifications", v16, 2u);
        MEMORY[0x249534440](v16, -1, -1);
      }

      goto LABEL_8;
    }
LABEL_11:
    swift_once();
    goto LABEL_5;
  }
LABEL_8:
  *(_DWORD *)(v1 + v8) = out_token;
}

void sub_24541E704()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  id v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  void *v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34[2];

  v1 = v0;
  v34[1] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = sub_245443CDC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (id *)((char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE5610], v2);
  v7 = v6;
  LOBYTE(v6) = sub_245443CE8();
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_16:
    swift_once();
    goto LABEL_7;
  }
  v8 = (void *)sub_24541C910();
  if (v8)
  {
    v34[0] = 0;
    v9 = objc_msgSend(v8, sel_isEnabledAndReturnError_, v34);
    v10 = v34[0];
    if (v9)
    {
      v11 = v9;
      sub_245443964();
      swift_allocObject();
      sub_245443958();
      v12 = sub_245443A78();
      v14 = v13;
      sub_2453FD09C();
      sub_24544394C();
      sub_2453BDCF8(v12, v14);
      swift_release();
      v15 = (char)v34[0];
      if (LOBYTE(v34[0]) == 2)
      {
        __break(1u);
        swift_unexpectedError();
        __break(1u);
      }
      else
      {
        v16 = v10;

        *(_BYTE *)(v1
                 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_isEnabled) = v15 & 1;
        *(_BYTE *)(v1
                 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_hasFetchedEnabledState) = 1;
        LOBYTE(v34[0]) = v15 & 1;
        sub_245443C4C();
        swift_unknownObjectRelease();
      }
    }
    else
    {
      v21 = v34[0];
      v22 = (void *)sub_2454439B8();

      swift_willThrow();
      if (qword_257463BF8 != -1)
        swift_once();
      v23 = sub_245443C04();
      __swift_project_value_buffer(v23, (uint64_t)qword_257463BE0);
      v24 = v22;
      v25 = v22;
      v26 = sub_245443BEC();
      v27 = sub_245443FE8();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc();
        v29 = (void *)swift_slowAlloc();
        v34[0] = v29;
        *(_DWORD *)v28 = 136315138;
        v33 = (uint64_t)v22;
        v30 = v22;
        __swift_instantiateConcreteTypeFromMangledName(&qword_257464988);
        v31 = sub_245443DCC();
        v33 = sub_2453BDB24(v31, v32, (uint64_t *)v34);
        sub_245444078();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_2453B6000, v26, v27, "Could not fetch enabled state: %s", v28, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x249534440](v29, -1, -1);
        MEMORY[0x249534440](v28, -1, -1);
        swift_unknownObjectRelease();

      }
      else
      {
        swift_unknownObjectRelease();

      }
    }
    return;
  }
  if (qword_257463BF8 != -1)
    goto LABEL_16;
LABEL_7:
  v17 = sub_245443C04();
  __swift_project_value_buffer(v17, (uint64_t)qword_257463BE0);
  v18 = sub_245443BEC();
  v19 = sub_245443FE8();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_2453B6000, v18, v19, "Could not fetch enabled state because target could not be created", v20, 2u);
    MEMORY[0x249534440](v20, -1, -1);
  }

}

uint64_t sub_24541EB9C(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, SEL *a5)
{
  uint64_t v5;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t result;
  id v21;
  id v22[2];

  v22[1] = *(id *)MEMORY[0x24BDAC8D0];
  v9 = sub_24541C910();
  if (v9)
  {
    v10 = (void *)v9;
    LOBYTE(v22[0]) = a2 & 1;
    sub_245443994();
    swift_allocObject();
    v11 = sub_245443988();
    a3(v11, v12);
    v13 = sub_24544397C();
    if (v5)
    {
      result = swift_unexpectedError();
      __break(1u);
    }
    else
    {
      v15 = v13;
      v16 = v14;
      v17 = (void *)sub_245443A6C();
      sub_2453BDCF8(v15, v16);
      swift_release();
      v22[0] = 0;
      LOBYTE(v15) = objc_msgSend(v10, *a5, v17, v22);

      if ((v15 & 1) != 0)
      {
        v18 = v22[0];
      }
      else
      {
        v21 = v22[0];
        sub_2454439B8();

        swift_willThrow();
      }
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    sub_2453CBA28();
    swift_allocError();
    *(_BYTE *)v19 = 3;
    *(_QWORD *)(v19 + 8) = 0;
    return swift_willThrow();
  }
  return result;
}

void sub_24541ED48()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v14;
  _QWORD aBlock[6];

  v1 = sub_245443CDC();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (_QWORD *)((char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)&v0[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue];
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE5610], v1);
  v6 = v5;
  LOBYTE(v5) = sub_245443CE8();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v7 = OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_connection;
  if (!*(_QWORD *)&v0[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_connection])
  {
    v8 = sub_24544005C();
    if (v8)
    {
      v9 = *(void **)&v0[v7];
      *(_QWORD *)&v0[v7] = v8;
      v10 = v8;

      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v0;
      v12 = swift_allocObject();
      *(_QWORD *)(v12 + 16) = sub_245420024;
      *(_QWORD *)(v12 + 24) = v11;
      aBlock[4] = sub_2453F6D38;
      aBlock[5] = v12;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_24542241C;
      aBlock[3] = &block_descriptor_1;
      v13 = _Block_copy(aBlock);
      v14 = v0;
      swift_retain();
      swift_release();
      objc_msgSend(v10, sel_configureConnection_, v13);
      _Block_release(v13);
      LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v13 & 1) == 0)
      {
        sub_24541F2B4();
        swift_release();

        return;
      }
LABEL_8:
      __break(1u);
    }
  }
}

void sub_24541EF38(void *a1, uint64_t a2)
{
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, void *);
  void *v17;
  void (*v18)(uint64_t);
  uint64_t v19;

  v4 = (void *)sub_245443D78();
  v5 = objc_msgSend((id)objc_opt_self(), sel_interfaceWithIdentifier_, v4);

  v6 = (void *)objc_opt_self();
  v7 = objc_msgSend(v6, sel_protocolForProtocol_, &unk_257474600);
  objc_msgSend(v5, sel_setClient_, v7);

  v8 = objc_msgSend(v6, sel_protocolForProtocol_, &unk_257475A28);
  objc_msgSend(v5, sel_setServer_, v8);

  v9 = objc_msgSend((id)objc_opt_self(), sel_utility);
  objc_msgSend(a1, sel_setServiceQuality_, v9);

  objc_msgSend(a1, sel_setInterface_, v5);
  objc_msgSend(a1, sel_setInterfaceTarget_, a2);
  objc_msgSend(a1, sel_setTargetQueue_, *(_QWORD *)(a2 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue));
  v18 = sub_24541F1BC;
  v19 = 0;
  v10 = MEMORY[0x24BDAC760];
  v14 = MEMORY[0x24BDAC760];
  v15 = 1107296256;
  v16 = sub_245440260;
  v17 = &block_descriptor_27;
  v11 = _Block_copy(&v14);
  objc_msgSend(a1, sel_setActivationHandler_, v11);
  _Block_release(v11);
  v18 = sub_24541F1C8;
  v19 = 0;
  v14 = v10;
  v15 = 1107296256;
  v16 = sub_245440260;
  v17 = &block_descriptor_30_0;
  v12 = _Block_copy(&v14);
  objc_msgSend(a1, sel_setInterruptionHandler_, v12);
  _Block_release(v12);
  v18 = sub_24541F1D4;
  v19 = 0;
  v14 = v10;
  v15 = 1107296256;
  v16 = sub_245440260;
  v17 = &block_descriptor_33;
  v13 = _Block_copy(&v14);
  objc_msgSend(a1, sel_setInvalidationHandler_, v13);
  _Block_release(v13);

}

void sub_24541F1BC(uint64_t a1)
{
  sub_24541F1E0(a1, "ReplicatorControlClient Service: Activated");
}

void sub_24541F1C8(uint64_t a1)
{
  sub_24541F1E0(a1, "ReplicatorControlClient Service: Interrupted");
}

void sub_24541F1D4(uint64_t a1)
{
  sub_24541F1E0(a1, "ReplicatorControlClient Service: Invalidated");
}

void sub_24541F1E0(uint64_t a1, const char *a2)
{
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  NSObject *oslog;

  if (qword_257463BF8 != -1)
    swift_once();
  v3 = sub_245443C04();
  __swift_project_value_buffer(v3, (uint64_t)qword_257463BE0);
  oslog = sub_245443BEC();
  v4 = sub_245443FDC();
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_2453B6000, oslog, v4, a2, v5, 2u);
    MEMORY[0x249534440](v5, -1, -1);
  }

}

void sub_24541F2B4()
{
  uint64_t v0;
  int *v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint32_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD aBlock[6];

  v1 = (int *)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_serverStartupToken);
  swift_beginAccess();
  if (*v1 == -1)
  {
    v2 = *(NSObject **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue);
    v3 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = sub_245420078;
    aBlock[5] = v3;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_2454171FC;
    aBlock[3] = &block_descriptor_24;
    v4 = _Block_copy(aBlock);
    swift_release();
    v5 = (const char *)(sub_245443DD8() + 32);
    swift_beginAccess();
    v6 = notify_register_dispatch(v5, v1, v2, v4);
    swift_endAccess();
    _Block_release(v4);
    swift_release();
    if (v6)
    {
      if (qword_257463BF8 != -1)
        swift_once();
      v7 = sub_245443C04();
      __swift_project_value_buffer(v7, (uint64_t)qword_257463BE0);
      v8 = sub_245443BEC();
      v9 = sub_245443FE8();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_2453B6000, v8, v9, "Could not register for daemon startup notifications", v10, 2u);
        MEMORY[0x249534440](v10, -1, -1);
      }

    }
  }
}

void sub_24541F4A4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _OWORD v12[2];

  v1 = (_QWORD *)sub_245443CDC();
  v2 = *(v1 - 1);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (_QWORD *)((char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v2 + 104))(v4, *MEMORY[0x24BEE5610], v1);
  v6 = v5;
  LOBYTE(v5) = sub_245443CE8();
  (*(void (**)(_QWORD *, _QWORD *))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_6;
  }
  sub_24541ED48();
  v7 = *(void **)(v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_connection);
  if (!v7)
    return;
  v1 = v7;
  if (objc_msgSend(v1, sel_remoteTarget))
  {
    sub_24544409C();

    swift_unknownObjectRelease();
    sub_2453D055C((uint64_t)v12, &qword_25440E7F8);
    return;
  }
  memset(v12, 0, sizeof(v12));
  sub_2453D055C((uint64_t)v12, &qword_25440E7F8);
  objc_msgSend(v1, sel_activate);
  if (qword_257463BF8 != -1)
    goto LABEL_11;
LABEL_6:
  v8 = sub_245443C04();
  __swift_project_value_buffer(v8, (uint64_t)qword_257463BE0);
  v9 = sub_245443BEC();
  v10 = sub_245444000();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_2453B6000, v9, v10, "Activated ReplicatorControlClient connection", v11, 2u);
    MEMORY[0x249534440](v11, -1, -1);
  }

}

void sub_24541F698(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x2495344E8](v2);
  if (v3)
  {
    v4 = (void *)v3;
    sub_24541F4A4();

  }
}

void sub_24541F6E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint8_t *v27;
  uint8_t *v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  _QWORD aBlock[6];

  v3 = sub_245443C88();
  v4 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  v41 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_245443CAC();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v45 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_245443C7C();
  v42 = *(char **)(v10 - 8);
  v43 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v44 = sub_245443CD0();
  v13 = *(_QWORD *)(v44 - 8);
  v14 = MEMORY[0x24BDAC7A8](v44);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v46 = (char *)&v39 - v17;
  swift_beginAccess();
  v18 = MEMORY[0x2495344E8](a2 + 16);
  if (v18)
  {
    v19 = (char *)v18;
    if (qword_257463BF8 != -1)
      swift_once();
    v20 = sub_245443C04();
    __swift_project_value_buffer(v20, (uint64_t)qword_257463BE0);
    v21 = sub_245443BEC();
    v22 = sub_245444000();
    v23 = os_log_type_enabled(v21, v22);
    v39 = v8;
    if (v23)
    {
      v24 = v7;
      v25 = v6;
      v26 = v13;
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_2453B6000, v21, v22, "Server says it has new devices", v27, 2u);
      v28 = v27;
      v13 = v26;
      v6 = v25;
      v7 = v24;
      MEMORY[0x249534440](v28, -1, -1);
    }

    if ((v19[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_deviceFetchPending] & 1) != 0)
    {

    }
    else
    {
      v19[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_deviceFetchPending] = 1;
      sub_245443CB8();
      *v12 = 100;
      v30 = v42;
      v29 = v43;
      (*((void (**)(_QWORD *, _QWORD, uint64_t))v42 + 13))(v12, *MEMORY[0x24BEE5410], v43);
      sub_245443CC4();
      (*((void (**)(_QWORD *, uint64_t))v30 + 1))(v12, v29);
      v31 = *(void (**)(char *, uint64_t))(v13 + 8);
      v32 = v44;
      v31(v16, v44);
      v43 = *(_QWORD *)&v19[OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue];
      v33 = swift_allocObject();
      *(_QWORD *)(v33 + 16) = v19;
      aBlock[4] = sub_2454212C0;
      aBlock[5] = v33;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_2453D0CCC;
      aBlock[3] = &block_descriptor_135;
      v34 = _Block_copy(aBlock);
      v42 = v19;
      v35 = v45;
      sub_245443C94();
      v47 = MEMORY[0x24BEE4AF8];
      sub_2453B8BF4(&qword_25440E640, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      v36 = v6;
      v37 = v40;
      __swift_instantiateConcreteTypeFromMangledName(&qword_25440E670);
      sub_2453F75AC(&qword_25440E678, &qword_25440E670, MEMORY[0x24BEE12C8]);
      sub_2454440A8();
      v38 = v46;
      MEMORY[0x249533A20](v46, v35, v36, v34);
      _Block_release(v34);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v36, v37);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v35, v7);
      v31(v38, v32);

      swift_release();
    }
  }
}

void sub_24541FB10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x2495344E8](v2);
  if (v3)
  {
    v4 = (void *)v3;
    sub_24541E704();

  }
}

uint64_t sub_24541FB60()
{
  uint64_t v0;

  return sub_24541EB9C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), (void (*)(uint64_t, uint64_t))sub_2453FCD38, (uint64_t)&type metadata for ReplicatorControlXPCServerParameters.SetEnabled, (SEL *)&selRef_setEnabledWithParameters_error_);
}

uint64_t sub_24541FB94@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_24541DA44();
  *a1 = result & 1;
  return result;
}

uint64_t sub_24541FBD0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_24541DEE0();
  *a1 = result;
  return result;
}

uint64_t sub_24541FC08()
{
  uint64_t v0;

  return sub_24541EB9C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), (void (*)(uint64_t, uint64_t))sub_2453FCE20, (uint64_t)&type metadata for ReplicatorControlXPCServerParameters.AllowListEnabled, (SEL *)&selRef_enableAllowListWithParameters_error_);
}

uint64_t sub_24541FC3C()
{
  uint64_t v0;

  return sub_24541D638(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_24541FC54(uint64_t a1)
{
  uint64_t v1;

  return sub_24541745C(a1, v1);
}

uint64_t sub_24541FC5C(uint64_t a1)
{
  uint64_t v1;

  return sub_245417B24(a1, v1);
}

uint64_t sub_24541FC64(uint64_t a1)
{
  uint64_t v1;

  return sub_24541861C(a1, v1);
}

uint64_t sub_24541FC6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ReplicatorDevice(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24541FCB0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_24541FCD4(uint64_t *a1)
{
  uint64_t v1;

  return sub_2454194BC(a1, v1, &OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_deviceObservers, (uint64_t)&unk_2516568C0, (uint64_t)sub_2454202D8, (uint64_t)&block_descriptor_78);
}

uint64_t sub_24541FD0C(uint64_t *a1)
{
  uint64_t v1;

  return sub_2454194BC(a1, v1, &OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_pairedDeviceObservers, (uint64_t)&unk_251656848, (uint64_t)sub_2454202AC, (uint64_t)&block_descriptor_69);
}

uint64_t sub_24541FD44(char *a1)
{
  return sub_2454197A4(a1);
}

uint64_t sub_24541FD4C()
{
  uint64_t v0;

  return sub_24541D7EC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (SEL *)&selRef_addIDToAllowListWithParameters_error_);
}

uint64_t sub_24541FD6C()
{
  uint64_t v0;

  return sub_24541D7EC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (SEL *)&selRef_removeFromAllowListWithParameters_error_);
}

uint64_t sub_24541FD8C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24541FDB8(void *a1)
{
  uint64_t *v1;

  return sub_24541A528(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_24541FDC4()
{
  uint64_t v0;

  return sub_24541D3BC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_24541FDDC()
{
  return sub_24541E344();
}

uint64_t sub_24541FDF4@<X0>(uint64_t a1@<X8>)
{
  return ReplicatorControlClient.deviceUpdates.getter(a1);
}

uint64_t sub_24541FE14(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_2454183E4(a1, a2, a3, a4, &qword_2574639B0, &qword_2574639A8, &OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient____lazy_storage___deviceUpdates);
}

uint64_t sub_24541FE40@<X0>(uint64_t a1@<X8>)
{
  return ReplicatorControlClient.enabledStateUpdates.getter(a1);
}

uint64_t sub_24541FE60(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_2454183E4(a1, a2, a3, a4, &qword_257465348, &qword_25440E030, &OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient____lazy_storage___enabledStateUpdates);
}

uint64_t sub_24541FE8C()
{
  return type metadata accessor for ReplicatorControlClient();
}

uint64_t type metadata accessor for ReplicatorControlClient()
{
  uint64_t result;

  result = qword_257463930;
  if (!qword_257463930)
    return swift_getSingletonMetadata();
  return result;
}

void sub_24541FED0()
{
  unint64_t v0;
  unint64_t v1;

  sub_24541FFB8(319, &qword_2574639B8, &qword_2574639A8);
  if (v0 <= 0x3F)
  {
    sub_24541FFB8(319, &qword_2574639C0, &qword_25440E030);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for ReplicatorControlClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ReplicatorControlClient.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

void sub_24541FFB8(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    v4 = sub_24544406C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t type metadata accessor for Singleton()
{
  return objc_opt_self();
}

void sub_245420024(void *a1)
{
  uint64_t v1;

  sub_24541EF38(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_24542002C()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_245420054()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_245420078(uint64_t a1)
{
  uint64_t v1;

  sub_24541F698(a1, v1);
}

uint64_t sub_245420080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_245443B14();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_245420110()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(sub_245443B14() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_24541CBE8(v0 + v2, *(_QWORD *)(v0 + v3), *(void (**)(void))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(void))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_245420160()
{
  return swift_deallocObject();
}

uint64_t sub_245420170()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_245443B14();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

void sub_2454201E8(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(sub_245443B14() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_24541CEAC(a1, v1 + v4, *(void (**)(_QWORD))v5, *(_QWORD *)(v5 + 8));
}

uint64_t sub_24542023C()
{
  return objectdestroy_50Tm((void (*)(_QWORD))MEMORY[0x24BEE4CA0]);
}

uint64_t sub_245420248()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_24542026C()
{
  uint64_t v0;

  return sub_245419C5C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_245420278(char a1)
{
  uint64_t v1;
  uint64_t (*v2)(char *);
  char v4;

  v2 = *(uint64_t (**)(char *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t sub_2454202AC()
{
  uint64_t v0;

  return sub_2453DC87C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (uint64_t)&unk_251656898, (uint64_t)sub_2453F7640);
}

uint64_t sub_2454202D8()
{
  uint64_t v0;

  return sub_2453DC87C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (uint64_t)&unk_251656910, (uint64_t)sub_2453F7D38);
}

uint64_t sub_245420300()
{
  return objectdestroy_201Tm(&qword_257464588);
}

uint64_t sub_24542030C(unsigned __int8 *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

unint64_t sub_245420330(unint64_t a1, uint64_t a2)
{
  return sub_245420EE8(a1, a2, type metadata accessor for ReplicatorRecord.Value);
}

unint64_t sub_245420340(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;

  v4 = sub_245443B14();
  v35 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = sub_2454440B4();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v34 = (result + 1) & v11;
      v12 = *(_QWORD *)(v35 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v33(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
        v18 = sub_245443D54();
        result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v34)
        {
          if (v19 >= v34 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_OWORD *)(v23 + 16 * a1);
            v25 = (_OWORD *)(v23 + 16 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 1))
            {
              *v24 = *v25;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v34 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_2454205E0(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t result;
  int64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;

  v4 = sub_245443B14();
  v42 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v39 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReplicatorRecord.ID(0);
  result = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a2 + 64;
  v15 = -1 << *(_BYTE *)(a2 + 32);
  v16 = (a1 + 1) & ~v15;
  if (((1 << v16) & *(_QWORD *)(a2 + 64 + 8 * (v16 >> 6))) != 0)
  {
    v45 = v11;
    v43 = ~v15;
    result = sub_2454440B4();
    v40 = a2 + 64;
    if ((*(_QWORD *)(v14 + 8 * (v16 >> 6)) & (1 << v16)) != 0)
    {
      v41 = (result + 1) & v43;
      v17 = *(_QWORD *)(v45 + 72);
      v18 = v40;
      v44 = v17;
      while (1)
      {
        v19 = *(_QWORD *)(a2 + 48);
        v45 = v17 * v16;
        sub_2453BA364(v19 + v17 * v16, (uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
        sub_245444414();
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        sub_2453BA364((uint64_t)&v13[*(int *)(v9 + 28)], (uint64_t)v8, type metadata accessor for ReplicatorRecord.ID.Ownership);
        v20 = v42;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v8, 1, v4) == 1)
        {
          sub_245444420();
        }
        else
        {
          v21 = a1;
          v22 = a2;
          v23 = v9;
          v24 = v4;
          v25 = v39;
          (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v39, v8, v24);
          sub_245444420();
          sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
          sub_245443D60();
          v26 = v25;
          v4 = v24;
          v9 = v23;
          a2 = v22;
          a1 = v21;
          v18 = v40;
          (*(void (**)(char *, uint64_t))(v20 + 8))(v26, v4);
        }
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        v27 = sub_245444444();
        result = sub_2453BA3A8((uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
        v28 = v43;
        v29 = v27 & v43;
        if ((uint64_t)a1 >= (uint64_t)v41)
        {
          v17 = v44;
          if (v29 < v41)
            goto LABEL_5;
        }
        else
        {
          v17 = v44;
          if (v29 >= v41)
            goto LABEL_14;
        }
        if ((uint64_t)a1 >= (uint64_t)v29)
        {
LABEL_14:
          if ((uint64_t)(v17 * a1) < v45 || *(_QWORD *)(a2 + 48) + v17 * a1 >= *(_QWORD *)(a2 + 48) + v45 + v17)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v17 * a1 != v45)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v30 = *(_QWORD *)(a2 + 56);
          v31 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for ReplicatorRecord(0) - 8) + 72);
          v32 = v31 * a1;
          result = v30 + v31 * a1;
          if ((uint64_t)(v31 * a1) < (uint64_t)(v31 * v16) || result >= v30 + v31 * v16 + v31)
          {
            result = swift_arrayInitWithTakeFrontToBack();
            a1 = v16;
            v17 = v44;
          }
          else
          {
            a1 = v16;
            v17 = v44;
            if (v32 != v31 * v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              a1 = v16;
            }
          }
        }
LABEL_5:
        v16 = (v16 + 1) & v28;
        if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
          goto LABEL_25;
      }
    }
    v18 = v40;
LABEL_25:
    v33 = (uint64_t *)(v18 + 8 * (a1 >> 6));
    v35 = *v33;
    v34 = (-1 << a1) - 1;
  }
  else
  {
    v33 = (uint64_t *)(v14 + 8 * (a1 >> 6));
    v34 = *v33;
    v35 = (-1 << a1) - 1;
  }
  *v33 = v34 & v35;
  v36 = *(_QWORD *)(a2 + 16);
  v37 = __OFSUB__(v36, 1);
  v38 = v36 - 1;
  if (v37)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v38;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_245420A6C(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t result;
  int64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;

  v4 = sub_245443B14();
  v43 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v38 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReplicatorRecord.ID(0);
  result = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a2 + 64;
  v15 = -1 << *(_BYTE *)(a2 + 32);
  v16 = (a1 + 1) & ~v15;
  if (((1 << v16) & *(_QWORD *)(a2 + 64 + 8 * (v16 >> 6))) != 0)
  {
    v42 = v11;
    v40 = ~v15;
    result = sub_2454440B4();
    v17 = a2 + 64;
    if ((*(_QWORD *)(v14 + 8 * (v16 >> 6)) & (1 << v16)) != 0)
    {
      v39 = (result + 1) & v40;
      v18 = *(_QWORD *)(v42 + 72);
      v37 = v9;
      v41 = v18;
      do
      {
        v19 = *(_QWORD *)(a2 + 48);
        v42 = v18 * v16;
        sub_2453BA364(v19 + v18 * v16, (uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
        sub_245444414();
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        sub_2453BA364((uint64_t)&v13[*(int *)(v9 + 28)], (uint64_t)v8, type metadata accessor for ReplicatorRecord.ID.Ownership);
        v20 = v43;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v8, 1, v4) == 1)
        {
          sub_245444420();
        }
        else
        {
          v21 = v38;
          (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v38, v8, v4);
          sub_245444420();
          sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
          sub_245443D60();
          v22 = v21;
          v9 = v37;
          (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v4);
        }
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        v23 = sub_245444444();
        result = sub_2453BA3A8((uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
        v24 = v40;
        v25 = v23 & v40;
        if (a1 >= (uint64_t)v39)
        {
          v18 = v41;
          if (v25 >= v39)
          {
            v26 = v43;
            if (a1 >= (uint64_t)v25)
            {
LABEL_15:
              if (v18 * a1 < v42
                || *(_QWORD *)(a2 + 48) + v18 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v42 + v18))
              {
                swift_arrayInitWithTakeFrontToBack();
              }
              else if (v18 * a1 != v42)
              {
                swift_arrayInitWithTakeBackToFront();
              }
              v27 = *(_QWORD *)(a2 + 56);
              v28 = *(_QWORD *)(v26 + 72);
              v29 = v28 * a1;
              result = v27 + v28 * a1;
              v30 = v28 * v16;
              if (v28 * a1 < (uint64_t)(v28 * v16) || result >= v27 + v28 * v16 + v28)
              {
                result = swift_arrayInitWithTakeFrontToBack();
                a1 = v16;
                v18 = v41;
              }
              else
              {
                a1 = v16;
                v18 = v41;
                if (v29 != v30)
                {
                  result = swift_arrayInitWithTakeBackToFront();
                  v18 = v41;
                  a1 = v16;
                }
              }
            }
          }
        }
        else
        {
          v26 = v43;
          v18 = v41;
          if (v25 >= v39 || a1 >= (uint64_t)v25)
            goto LABEL_15;
        }
        v16 = (v16 + 1) & v24;
      }
      while (((*(_QWORD *)(v17 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0);
    }
    v31 = (uint64_t *)(v17 + 8 * ((unint64_t)a1 >> 6));
    v32 = *v31;
    v33 = (-1 << a1) - 1;
  }
  else
  {
    v31 = (uint64_t *)(v14 + 8 * ((unint64_t)a1 >> 6));
    v33 = *v31;
    v32 = (-1 << a1) - 1;
  }
  *v31 = v33 & v32;
  v34 = *(_QWORD *)(a2 + 16);
  v35 = __OFSUB__(v34, 1);
  v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v36;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_245420EDC(unint64_t a1, uint64_t a2)
{
  return sub_245420EE8(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BDCDAC0]);
}

unint64_t sub_245420EE8(unint64_t result, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v4 = result;
  v5 = a2 + 64;
  v6 = -1 << *(_BYTE *)(a2 + 32);
  v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(_QWORD *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    v9 = ~v6;
    result = sub_2454440B4();
    if ((*(_QWORD *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      v10 = (result + 1) & v9;
      do
      {
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_QWORD *)(v11 + 8 * v7);
        result = sub_245444408();
        v13 = result & v9;
        if (v4 >= (uint64_t)v10)
        {
          if (v13 < v10 || v4 < (uint64_t)v13)
            goto LABEL_6;
        }
        else if (v13 < v10 && v4 < (uint64_t)v13)
        {
          goto LABEL_6;
        }
        v16 = (_QWORD *)(v11 + 8 * v4);
        if (v4 != v7 || v16 >= v12 + 1)
          *v16 = *v12;
        v17 = *(_QWORD *)(a2 + 56);
        v18 = *(_QWORD *)(*(_QWORD *)(a3(0) - 8) + 72);
        v19 = v18 * v4;
        result = v17 + v18 * v4;
        v20 = v18 * v7;
        v21 = v17 + v18 * v7 + v18;
        if (v19 < v20 || result >= v21)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v4 = v7;
          if (v19 == v20)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v4 = v7;
LABEL_6:
        v7 = (v7 + 1) & v9;
      }
      while (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
    }
    v23 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    v24 = *v23;
    v25 = (-1 << v4) - 1;
  }
  else
  {
    v23 = (uint64_t *)(v5 + 8 * (result >> 6));
    v25 = *v23;
    v24 = (-1 << result) - 1;
  }
  *v23 = v25 & v24;
  v26 = *(_QWORD *)(a2 + 16);
  v27 = __OFSUB__(v26, 1);
  v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_2454210B4(uint64_t a1)
{
  return sub_245421110(a1, sub_2454210C0);
}

uint64_t sub_2454210C0()
{
  uint64_t v0;

  return sub_245419B34(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), &OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_enabledStateObservers, (void (*)(void))sub_2453CA64C, (uint64_t (*)(uint64_t, uint64_t))sub_245421300);
}

uint64_t sub_2454210F0()
{
  return objectdestroy_201Tm(&qword_25440E028);
}

uint64_t sub_245421104(uint64_t a1)
{
  return sub_245421110(a1, sub_245421164);
}

uint64_t sub_245421110(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_245443B14() - 8) + 80);
  return sub_245418A38(a1, *(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5), a2);
}

uint64_t sub_245421164()
{
  uint64_t v0;

  return sub_245419B34(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), &OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_pairedDeviceObservers, (void (*)(void))sub_2453CA634, (uint64_t (*)(uint64_t, uint64_t))sub_2453F79C8);
}

uint64_t sub_245421194()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_2454211B8()
{
  return objectdestroy_201Tm(&qword_25440E028);
}

uint64_t sub_2454211C4(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E028);
  return sub_245417CE8(a1);
}

uint64_t sub_24542120C(uint64_t a1)
{
  return sub_245421110(a1, sub_245421218);
}

uint64_t sub_245421218()
{
  uint64_t v0;

  return sub_245419B34(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), &OBJC_IVAR____TtC18ReplicatorServices23ReplicatorControlClient_lock_deviceObservers, (void (*)(void))sub_2453CA634, (uint64_t (*)(uint64_t, uint64_t))sub_2453F79C8);
}

uint64_t sub_245421248()
{
  return objectdestroy_50Tm((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t objectdestroy_50Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release();
  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject();
}

void sub_24542128C(uint64_t a1)
{
  uint64_t v1;

  sub_24541FB10(a1, v1);
}

void sub_245421294(uint64_t a1)
{
  uint64_t v1;

  sub_24541F6E8(a1, v1);
}

uint64_t sub_24542129C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_2454212C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_24541B6C0();
  *(_BYTE *)(v1
           + OBJC_IVAR____TtC18ReplicatorServicesP33_D9C019F026B67C35EBD66B41D1820C119Singleton_queue_deviceFetchPending) = 0;
}

uint64_t sub_2454212EC@<X0>(_QWORD *a1@<X8>)
{
  return sub_2453BD9B0(a1);
}

uint64_t sub_24542131C@<X0>(_BYTE *a1@<X8>)
{
  return sub_24541FB94(a1);
}

uint64_t URL.simulatorRootRelativeURL()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_245443A24();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_2454213D8(uint64_t a1)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v18 = MEMORY[0x24BEE4AF8];
    sub_2453F1D70(0, v2, 0);
    v3 = v18;
    v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465588);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v15 = *(_QWORD *)(v6 + 72);
    v16 = v5;
    while (1)
    {
      v8 = sub_245422A90(&v17, v7, (uint64_t *)(v7 + *(int *)(v16 + 48)));
      if (v1)
        break;
      v9 = v8;
      v10 = v17;
      v18 = v3;
      v12 = *(_QWORD *)(v3 + 16);
      v11 = *(_QWORD *)(v3 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_2453F1D70(v11 > 1, v12 + 1, 1);
        v3 = v18;
      }
      *(_QWORD *)(v3 + 16) = v12 + 1;
      v13 = v3 + 16 * v12;
      *(_QWORD *)(v13 + 32) = v9;
      *(_QWORD *)(v13 + 40) = v10;
      v7 += v15;
      if (!--v2)
        return v3;
    }
    swift_release();
  }
  return v3;
}

id sub_24542150C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  id v7;
  id v8;
  uint64_t v9;
  id v11[2];

  v11[1] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = (void *)sub_2454439DC();
  v11[0] = 0;
  v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_fileHandleForReadingFromURL_error_, v2, v11);

  v4 = v11[0];
  if (v3)
  {
    v5 = sub_245443A24();
    v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    v7 = v4;
    v6(a1, v5);
  }
  else
  {
    v8 = v11[0];
    sub_2454439B8();

    swift_willThrow();
    v9 = sub_245443A24();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
  }
  return v3;
}

uint64_t sub_245421620@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_localDeviceIDProvider);
  swift_beginAccess();
  v4 = *v3;
  if (*v3)
    v5 = v3[1];
  else
    v5 = 0;
  *a2 = v4;
  a2[1] = v5;
  return sub_245421710(v4);
}

uint64_t sub_24542167C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v2 = *a1;
  if (*a1)
    v3 = a1[1];
  else
    v3 = 0;
  v4 = (uint64_t *)(*a2 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_localDeviceIDProvider);
  swift_beginAccess();
  v5 = *v4;
  *v4 = v2;
  v4[1] = v3;
  sub_245421710(v2);
  return sub_2453F79C8(v5);
}

uint64_t sub_2454216FC()
{
  return sub_245421E00(&OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_localDeviceIDProvider, (void (*)(_QWORD, _QWORD))sub_245421710);
}

uint64_t sub_245421710(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_245421720(uint64_t a1, uint64_t a2)
{
  return sub_245421E74(a1, a2, &OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_localDeviceIDProvider, (uint64_t (*)(uint64_t, uint64_t))sub_2453F79C8);
}

uint64_t (*sub_245421734())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_245421778@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)@<X0>(uint64_t *@<X8>);

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_recordProvider);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_24542A3E0;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v6;
  return sub_245421710(v4);
}

uint64_t sub_24542180C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *(*v6)();
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_24542A3CC;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_recordProvider);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  sub_245421710(v3);
  return sub_2453F79C8(v8);
}

uint64_t sub_2454218C4()
{
  return sub_245421E00(&OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_recordProvider, (void (*)(_QWORD, _QWORD))sub_24542A56C);
}

uint64_t sub_2454218D8(uint64_t a1, uint64_t a2)
{
  return sub_245421E74(a1, a2, &OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_recordProvider, (uint64_t (*)(uint64_t, uint64_t))sub_245421300);
}

uint64_t (*sub_2454218EC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_245421930@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)@<X0>(uint64_t *@<X8>);

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_deviceProvider);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_24542A3E0;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v6;
  return sub_245421710(v4);
}

uint64_t sub_2454219C4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *(*v6)();
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_24542A3CC;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_deviceProvider);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  sub_245421710(v3);
  return sub_2453F79C8(v8);
}

uint64_t sub_245421A7C()
{
  return sub_245421E00(&OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_deviceProvider, (void (*)(_QWORD, _QWORD))sub_24542A56C);
}

uint64_t sub_245421A90(uint64_t a1, uint64_t a2)
{
  return sub_245421E74(a1, a2, &OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_deviceProvider, (uint64_t (*)(uint64_t, uint64_t))sub_245421300);
}

uint64_t (*sub_245421AA4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_245421AE8@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)@<X0>(uint64_t *@<X8>);

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_clientDescriptorProvider);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_24542A3E0;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v6;
  return sub_245421710(v4);
}

uint64_t sub_245421B7C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *(*v6)();
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_24542A3CC;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_clientDescriptorProvider);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  sub_245421710(v3);
  return sub_2453F79C8(v8);
}

uint64_t sub_245421C34()
{
  return sub_245421E00(&OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_clientDescriptorProvider, (void (*)(_QWORD, _QWORD))sub_24542A56C);
}

uint64_t sub_245421C48(uint64_t a1, uint64_t a2)
{
  return sub_245421E74(a1, a2, &OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_clientDescriptorProvider, (uint64_t (*)(uint64_t, uint64_t))sub_245421300);
}

uint64_t (*sub_245421C5C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_245421CA0@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_eraseHandler);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_24542A3AC;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return sub_245421710(v4);
}

uint64_t sub_245421D34(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t *v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_24542A3AC;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_eraseHandler);
  swift_beginAccess();
  v8 = *v7;
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  sub_245421710(v3);
  return sub_2453F79C8(v8);
}

uint64_t sub_245421DEC()
{
  return sub_245421E00(&OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_eraseHandler, (void (*)(_QWORD, _QWORD))sub_24542A56C);
}

uint64_t sub_245421E00(_QWORD *a1, void (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)(v2 + *a1);
  swift_beginAccess();
  v5 = *v4;
  a2(*v4, v4[1]);
  return v5;
}

uint64_t sub_245421E60(uint64_t a1, uint64_t a2)
{
  return sub_245421E74(a1, a2, &OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_eraseHandler, (uint64_t (*)(uint64_t, uint64_t))sub_245421300);
}

uint64_t sub_245421E74(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = (uint64_t *)(v4 + *a3);
  swift_beginAccess();
  v9 = *v8;
  v10 = v8[1];
  *v8 = a1;
  v8[1] = a2;
  return a4(v9, v10);
}

uint64_t (*sub_245421ED0())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

id MigrationServer.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t MigrationServer.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  objc_class *v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  char *v21;
  id v22;
  uint64_t result;
  void *v24;
  _BYTE v25[16];
  id v26;
  _QWORD aBlock[6];
  objc_super v28;

  v1 = sub_245444024();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v25[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_24544400C();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v5);
  v7 = sub_245443CAC();
  MEMORY[0x24BDAC7A8](v7);
  v8 = OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_lock;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E6F0);
  v9 = swift_allocObject();
  *(_QWORD *)&v0[v8] = v9;
  *(_QWORD *)&v0[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_lock_clients] = MEMORY[0x24BEE4B08];
  *(_DWORD *)(v9 + 16) = 0;
  v10 = &v0[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_localDeviceIDProvider];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  v11 = &v0[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_recordProvider];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  v12 = &v0[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_deviceProvider];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v13 = &v0[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_clientDescriptorProvider];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  v14 = &v0[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_eraseHandler];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_listener] = 0;
  sub_24540D76C(0, (unint64_t *)&qword_25440E6C8);
  v15 = v0;
  sub_245443CA0();
  aBlock[0] = MEMORY[0x24BEE4AF8];
  sub_2453B8BF4((unint64_t *)&qword_25440E6C0, v6, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E688);
  sub_2454222C8();
  sub_2454440A8();
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE5758], v1);
  *(_QWORD *)&v15[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_queue] = sub_245444048();

  v16 = (objc_class *)type metadata accessor for MigrationServer();
  v28.receiver = v15;
  v28.super_class = v16;
  v17 = objc_msgSendSuper2(&v28, sel_init);
  v26 = v17;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = sub_2454223E4;
  *(_QWORD *)(v18 + 24) = v25;
  aBlock[4] = sub_2454223FC;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_24542241C;
  aBlock[3] = &block_descriptor_2;
  v19 = _Block_copy(aBlock);
  v20 = (void *)objc_opt_self();
  v21 = (char *)v17;
  swift_retain();
  v22 = objc_msgSend(v20, sel_listenerWithConfigurator_, v19);
  _Block_release(v19);
  swift_release();
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();

  result = swift_release();
  if ((v19 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v24 = *(void **)&v21[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_listener];
    *(_QWORD *)&v21[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_listener] = v22;

    return (uint64_t)v21;
  }
  return result;
}

unint64_t sub_2454222C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25440E690;
  if (!qword_25440E690)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_25440E688);
    result = MEMORY[0x249534380](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_25440E690);
  }
  return result;
}

uint64_t type metadata accessor for MigrationServer()
{
  return objc_opt_self();
}

id sub_245422334(void *a1, uint64_t a2)
{
  void *v4;
  _QWORD v6[4];
  ReplicatorServices::XPCInterfaceDomain v7;

  v7.domain._object = (void *)swift_getObjectType();
  v6[0] = 0xD000000000000026;
  v6[1] = 0x800000024544F1E0;
  v6[2] = 0xD00000000000001CLL;
  v6[3] = 0x800000024544F210;
  v7.domain._countAndFlagsBits = (uint64_t)v6;
  BSServiceConnectionListenerConfiguring.setDomain(_:)(v7);
  v4 = (void *)sub_245443D78();
  objc_msgSend(a1, sel_setService_, v4);

  return objc_msgSend(a1, sel_setDelegate_, a2);
}

id sub_2454223E4(void *a1)
{
  uint64_t v1;

  return sub_245422334(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_2454223EC()
{
  return swift_deallocObject();
}

uint64_t sub_2454223FC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_24542241C(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v3(a2);
  return swift_unknownObjectRelease();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

id sub_245422490()
{
  uint64_t v0;
  id result;

  result = *(id *)(v0 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_listener);
  if (result)
    return objc_msgSend(result, sel_activate);
  __break(1u);
  return result;
}

id MigrationServer.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MigrationServer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_24542259C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void (**v10)(uint64_t);
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  os_log_t v21;
  uint64_t v22;
  _QWORD v23[2];
  os_log_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v23 - v8;
  v10 = (void (**)(uint64_t))(v1 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_localDeviceIDProvider);
  swift_beginAccess();
  v11 = *v10;
  if (*v10)
  {
    v12 = swift_retain();
    v11(v12);
    if (v2)
    {
      sub_2453F79C8((uint64_t)v11);
    }
    else
    {
      if (qword_257463C78 != -1)
        swift_once();
      v14 = sub_245443C04();
      __swift_project_value_buffer(v14, (uint64_t)qword_2574642F0);
      sub_2453D02E0(a1, (uint64_t)v9, (uint64_t *)&unk_25440E8F0);
      v15 = sub_245443BEC();
      v16 = sub_245444000();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = swift_slowAlloc();
        v24 = v15;
        v18 = (uint8_t *)v17;
        v25 = swift_slowAlloc();
        v27 = v25;
        *(_DWORD *)v18 = 136446210;
        v23[1] = v18 + 4;
        sub_2453D02E0((uint64_t)v9, (uint64_t)v7, (uint64_t *)&unk_25440E8F0);
        v19 = sub_245443DCC();
        v26 = sub_2453BDB24(v19, v20, &v27);
        sub_245444078();
        swift_bridgeObjectRelease();
        sub_2453D055C((uint64_t)v9, (uint64_t *)&unk_25440E8F0);
        v21 = v24;
        _os_log_impl(&dword_2453B6000, v24, v16, "Returning local device ID %{public}s for migration", v18, 0xCu);
        v22 = v25;
        swift_arrayDestroy();
        MEMORY[0x249534440](v22, -1, -1);
        MEMORY[0x249534440](v18, -1, -1);
        sub_2453F79C8((uint64_t)v11);

      }
      else
      {
        sub_2453D055C((uint64_t)v9, (uint64_t *)&unk_25440E8F0);
        sub_2453F79C8((uint64_t)v11);

      }
    }
  }
  else
  {
    sub_24542A244();
    swift_allocError();
    *(_BYTE *)v13 = 2;
    *(_QWORD *)(v13 + 8) = 0;
    swift_willThrow();
  }
}

uint64_t sub_245422884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t);
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;

  v3 = (uint64_t (**)(uint64_t))(v0 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_recordProvider);
  swift_beginAccess();
  v4 = *v3;
  if (*v3)
  {
    v5 = swift_retain();
    v6 = v4(v5);
    if (v1)
    {
      sub_2453F79C8((uint64_t)v4);
    }
    else
    {
      v2 = sub_2454213D8(v6);
      swift_bridgeObjectRelease();
      if (qword_257463C78 != -1)
        swift_once();
      v8 = sub_245443C04();
      __swift_project_value_buffer(v8, (uint64_t)qword_2574642F0);
      swift_bridgeObjectRetain();
      v9 = sub_245443BEC();
      v10 = sub_245444000();
      if (os_log_type_enabled(v9, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v11 = 134349056;
        sub_245444078();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2453B6000, v9, v10, "Returning %{public}ld records for migration", v11, 0xCu);
        MEMORY[0x249534440](v11, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      sub_2453F79C8((uint64_t)v4);

    }
  }
  else
  {
    sub_24542A244();
    swift_allocError();
    *(_BYTE *)v7 = 2;
    *(_QWORD *)(v7 + 8) = 0;
    swift_willThrow();
  }
  return v2;
}

uint64_t sub_245422A90(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  int64_t v23;
  unint64_t v24;
  unint64_t i;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  objc_class *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  objc_super v57;
  uint64_t v58[3];
  uint64_t v59;

  v50 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E420);
  MEMORY[0x24BDAC7A8](v6);
  v49 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_245443B14();
  v53 = *(_QWORD *)(v8 - 8);
  v54 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v52 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x24BDAC7A8](v10);
  v51 = (uint64_t)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E260);
  v12 = MEMORY[0x24BDAC7A8](v59);
  v14 = (uint64_t *)((char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v12);
  v16 = (uint64_t *)((char *)&v46 - v15);
  v48 = *a3;
  v46 = type metadata accessor for ReplicatorRecord(0);
  v47 = a2;
  v17 = *(_QWORD *)(a2 + *(int *)(v46 + 24));
  v58[0] = MEMORY[0x24BEE4AF8];
  v18 = *(_QWORD *)(v17 + 64);
  v55 = v17 + 64;
  v19 = 1 << *(_BYTE *)(v17 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v56 = (unint64_t)(v19 + 63) >> 6;
  result = swift_bridgeObjectRetain_n();
  v23 = 0;
  if (!v21)
    goto LABEL_5;
LABEL_4:
  v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  for (i = v24 | (v23 << 6); ; i = __clz(__rbit64(v27)) + (v23 << 6))
  {
    v29 = *(_QWORD *)(v17 + 56);
    v30 = *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8 * i);
    v31 = type metadata accessor for ReplicatorRecord.Value(0);
    sub_2453BA364(v29 + *(_QWORD *)(*(_QWORD *)(v31 - 8) + 72) * i, (uint64_t)v16 + *(int *)(v59 + 48), type metadata accessor for ReplicatorRecord.Value);
    *v16 = v30;
    sub_2453D0428((uint64_t)v16, (uint64_t)v14, &qword_25440E260);
    sub_245422FAC(v58, v14);
    if (v3)
    {
      swift_bridgeObjectRelease();
      sub_2453D055C((uint64_t)v14, &qword_25440E260);
      swift_release();
      swift_bridgeObjectRelease();
      return v21;
    }
    result = sub_2453D055C((uint64_t)v14, &qword_25440E260);
    if (v21)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v23++, 1))
      break;
    if (v23 >= v56)
      goto LABEL_28;
    v27 = *(_QWORD *)(v55 + 8 * v23);
    if (!v27)
    {
      v28 = v23 + 1;
      if (v23 + 1 >= v56)
        goto LABEL_28;
      v27 = *(_QWORD *)(v55 + 8 * v28);
      if (v27)
        goto LABEL_18;
      v28 = v23 + 2;
      if (v23 + 2 >= v56)
        goto LABEL_28;
      v27 = *(_QWORD *)(v55 + 8 * v28);
      if (v27)
        goto LABEL_18;
      v28 = v23 + 3;
      if (v23 + 3 >= v56)
        goto LABEL_28;
      v27 = *(_QWORD *)(v55 + 8 * v28);
      if (v27)
        goto LABEL_18;
      v28 = v23 + 4;
      if (v23 + 4 >= v56)
        goto LABEL_28;
      v27 = *(_QWORD *)(v55 + 8 * v28);
      if (v27)
      {
LABEL_18:
        v23 = v28;
        goto LABEL_19;
      }
      v28 = v23 + 5;
      if (v23 + 5 < v56)
      {
        v27 = *(_QWORD *)(v55 + 8 * v28);
        if (!v27)
        {
          while (1)
          {
            v23 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_31;
            if (v23 >= v56)
              goto LABEL_28;
            v27 = *(_QWORD *)(v55 + 8 * v23);
            ++v28;
            if (v27)
              goto LABEL_19;
          }
        }
        goto LABEL_18;
      }
LABEL_28:
      v33 = v46;
      v32 = v47;
      swift_release();
      swift_bridgeObjectRelease();
      v59 = v58[0];
      sub_2453BA364(v32, v51, type metadata accessor for ReplicatorRecord.ID);
      v34 = v52;
      v35 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 16);
      v35(v52, v32 + *(int *)(v33 + 20), v54);
      v36 = sub_245443AC0();
      v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56);
      v38 = (uint64_t)v49;
      v37(v49, 1, 1, v36);
      v39 = (objc_class *)type metadata accessor for ReplicationXPCServerParametersRecord(0);
      v40 = (char *)objc_allocWithZone(v39);
      v41 = (uint64_t)&v40[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_expiration];
      v37(&v40[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_expiration], 1, 1, v36);
      v42 = v51;
      sub_2453BA364(v51, (uint64_t)&v40[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_id], type metadata accessor for ReplicatorRecord.ID);
      v43 = v34;
      v44 = v54;
      v35(&v40[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_version], (uint64_t)v43, v54);
      *(_QWORD *)&v40[OBJC_IVAR____TtC18ReplicatorServices36ReplicationXPCServerParametersRecord_values] = v59;
      swift_beginAccess();
      v45 = v40;
      sub_2453F7250(v38, v41);
      swift_endAccess();

      v57.receiver = v45;
      v57.super_class = v39;
      v21 = (unint64_t)objc_msgSendSuper2(&v57, sel_init);
      sub_2453D055C(v38, (uint64_t *)&unk_25440E420);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v44);
      sub_2453BA3A8(v42, type metadata accessor for ReplicatorRecord.ID);
      *v50 = v48;
      swift_bridgeObjectRetain();
      return v21;
    }
LABEL_19:
    v21 = (v27 - 1) & v27;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

void sub_245422FAC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  id v31;
  id v32;
  id v33;
  _QWORD *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;

  v40 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E1A0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E260);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v38 = (uint64_t *)((char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v7);
  v10 = (uint64_t *)((char *)&v38 - v9);
  v11 = sub_245443A24();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v38 - v16;
  v18 = *(int *)(v6 + 48);
  v19 = (uint64_t)v10 + v18;
  v20 = (uint64_t)a2 + v18;
  v39 = a2;
  v21 = *a2;
  v22 = v20;
  *v10 = v21;
  sub_2453BA364(v20, v19, type metadata accessor for ReplicatorRecord.Value);
  v23 = type metadata accessor for ReplicatorRecord.Value(0);
  sub_2453D02E0(v19 + *(int *)(v23 + 20), (uint64_t)v5, &qword_25440E1A0);
  sub_2453BA3A8(v19, type metadata accessor for ReplicatorRecord.Value);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v5, 1, v11) == 1)
  {
    sub_2453D055C((uint64_t)v5, &qword_25440E1A0);
    v24 = 0;
    v25 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v5, v11);
    sub_24540D76C(0, (unint64_t *)&qword_25440E068);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
    v35 = v41;
    v36 = sub_24542150C((uint64_t)v15);
    if (v35)
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
      return;
    }
    v25 = v36;
    v37 = URL.extendedAttributes()();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    v24 = sub_2453D0838(v37);
    swift_bridgeObjectRelease();
  }
  v26 = *v39;
  v27 = (uint64_t *)((char *)v38 + *(int *)(v6 + 48));
  *v38 = *v39;
  sub_2453BA364(v22, (uint64_t)v27, type metadata accessor for ReplicatorRecord.Value);
  v28 = *v27;
  v29 = v27[1];
  sub_2453CFFAC(*v27, v29);
  sub_2453BA3A8((uint64_t)v27, type metadata accessor for ReplicatorRecord.Value);
  v30 = objc_allocWithZone((Class)type metadata accessor for ReplicationXPCServerParametersRecordValue());
  v31 = v25;
  v32 = sub_2454074A8(v26, v28, v29, v25, v24);

  sub_2453BDCF8(v28, v29);
  v33 = v32;
  v34 = v40;
  MEMORY[0x249533888]();
  if (*(_QWORD *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_245443EBC();
  sub_245443EE0();
  sub_245443EB0();

}

uint64_t sub_245423334(_QWORD *a1, const char *a2, void (*a3)(uint64_t (*)(uint64_t), uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;

  v8 = v3 + *a1;
  swift_beginAccess();
  v9 = *(uint64_t (**)(uint64_t))v8;
  if (*(_QWORD *)v8)
  {
    v10 = *(_QWORD *)(v8 + 8);
    v11 = swift_retain();
    v12 = v9(v11);
    if (v4)
    {
      a3(v9, v10);
    }
    else
    {
      v5 = v12;
      if (qword_257463C78 != -1)
        swift_once();
      v14 = sub_245443C04();
      __swift_project_value_buffer(v14, (uint64_t)qword_2574642F0);
      swift_bridgeObjectRetain();
      v15 = sub_245443BEC();
      v16 = sub_245444000();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v17 = 134349056;
        sub_245444078();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_2453B6000, v15, v16, a2, v17, 0xCu);
        MEMORY[0x249534440](v17, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      a3(v9, v10);

    }
  }
  else
  {
    sub_24542A244();
    swift_allocError();
    *(_BYTE *)v13 = 2;
    *(_QWORD *)(v13 + 8) = 0;
    swift_willThrow();
  }
  return v5;
}

uint64_t sub_245423514()
{
  uint64_t v0;
  void (**v1)(void);
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v9;

  v1 = (void (**)(void))(v0 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_eraseHandler);
  swift_beginAccess();
  v2 = *v1;
  if (*v1)
  {
    v3 = qword_257463C78;
    swift_retain();
    if (v3 != -1)
      swift_once();
    v4 = sub_245443C04();
    __swift_project_value_buffer(v4, (uint64_t)qword_2574642F0);
    v5 = sub_245443BEC();
    v6 = sub_245444000();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_2453B6000, v5, v6, "Erasing all replicator data", v7, 2u);
      MEMORY[0x249534440](v7, -1, -1);
    }

    v2();
    return sub_2453F79C8((uint64_t)v2);
  }
  else
  {
    sub_24542A244();
    swift_allocError();
    *(_BYTE *)v9 = 2;
    *(_QWORD *)(v9 + 8) = 0;
    return swift_willThrow();
  }
}

void MigrationServer.listener(_:didReceive:withContext:)(uint64_t a1, void *a2)
{
  sub_245429D24(a2);
}

void sub_245423688(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;

  swift_beginAccess();
  sub_245424F54(&v4, a2);
  v3 = v4;
  swift_endAccess();

}

void sub_245423700(void *a1, void *a2, uint64_t a3)
{
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, void *);
  void *v24;
  void (*v25)(uint64_t);
  uint64_t v26;

  v6 = (void *)sub_245443D78();
  v7 = objc_msgSend((id)objc_opt_self(), sel_interfaceWithIdentifier_, v6);

  v8 = (void *)objc_opt_self();
  v9 = objc_msgSend(v8, sel_protocolForProtocol_, &unk_257475CD0);
  objc_msgSend(v7, sel_setClient_, v9);

  v10 = objc_msgSend(v8, sel_protocolForProtocol_, &unk_2574748C8);
  objc_msgSend(v7, sel_setServer_, v10);

  v11 = objc_msgSend((id)objc_opt_self(), sel_main);
  objc_msgSend(a1, sel_setServiceQuality_, v11);

  objc_msgSend(a1, sel_setInterface_, v7);
  objc_msgSend(a1, sel_setInterfaceTarget_, a2);
  objc_msgSend(a1, sel_setTargetQueue_, *(_QWORD *)(a3 + OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_queue));
  v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = a2;
  v25 = sub_24542A4D4;
  v26 = v13;
  v14 = MEMORY[0x24BDAC760];
  v21 = MEMORY[0x24BDAC760];
  v22 = 1107296256;
  v23 = sub_245440260;
  v24 = &block_descriptor_50;
  v15 = _Block_copy(&v21);
  v16 = a2;
  swift_release();
  objc_msgSend(a1, sel_setInterruptionHandler_, v15);
  _Block_release(v15);
  v17 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v17;
  *(_QWORD *)(v18 + 24) = v16;
  v25 = sub_24542A52C;
  v26 = v18;
  v21 = v14;
  v22 = 1107296256;
  v23 = sub_245440260;
  v24 = &block_descriptor_57;
  v19 = _Block_copy(&v21);
  v20 = v16;
  swift_release();
  objc_msgSend(a1, sel_setInvalidationHandler_, v19);
  _Block_release(v19);

}

void sub_2454239EC(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t (*a5)(void))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;

  v7 = a2 + 16;
  swift_beginAccess();
  v8 = MEMORY[0x2495344E8](v7);
  if (v8)
  {
    v9 = (char *)v8;
    if (qword_257463C78 != -1)
      swift_once();
    v10 = sub_245443C04();
    __swift_project_value_buffer(v10, (uint64_t)qword_2574642F0);
    v11 = sub_245443BEC();
    v12 = sub_245444000();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_2453B6000, v11, v12, a4, v13, 2u);
      MEMORY[0x249534440](v13, -1, -1);
    }

    v14 = *(os_unfair_lock_s **)&v9[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_lock];
    MEMORY[0x24BDAC7A8](v15);
    swift_retain();
    os_unfair_lock_lock(v14 + 4);
    sub_2453C62CC(v16, a5);
    os_unfair_lock_unlock(v14 + 4);
    swift_release();

  }
}

void sub_245423B6C(uint64_t a1, void *a2)
{
  void *v3;

  swift_beginAccess();
  v3 = (void *)sub_2454290EC(a2);
  swift_endAccess();

}

uint64_t sub_245423CF4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  id v5;
  uint64_t result;
  uint64_t v7;

  sub_24544412C();
  swift_bridgeObjectRelease();
  LODWORD(v7) = *(_DWORD *)(a1 + OBJC_IVAR____TtC18ReplicatorServicesP33_E12FEAD95517CBB4AB29168F11BCC1CA6Client_pid);
  sub_245444384();
  sub_245443E14();
  swift_bridgeObjectRelease();
  sub_245443E14();
  v4 = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC18ReplicatorServicesP33_E12FEAD95517CBB4AB29168F11BCC1CA6Client_connection), sel_remoteProcess, v7);
  v5 = objc_msgSend(v4, sel_bundleIdentifier);

  if (v5)
  {
    sub_245443D9C();

  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2574655A0);
  sub_245443DCC();
  sub_245443E14();
  result = swift_bridgeObjectRelease();
  *a2 = 0x203A646970;
  a2[1] = 0xE500000000000000;
  return result;
}

uint64_t sub_245423ED4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (MEMORY[0x2495344E8](v1 + OBJC_IVAR____TtC18ReplicatorServicesP33_E12FEAD95517CBB4AB29168F11BCC1CA6Client_delegate))
  {
    sub_24542259C((uint64_t)v6);
    result = swift_unknownObjectRelease();
    if (!v2)
      return sub_2453D0428((uint64_t)v6, a1, (uint64_t *)&unk_25440E8F0);
  }
  else
  {
    sub_24542A244();
    swift_allocError();
    *(_BYTE *)v8 = 2;
    *(_QWORD *)(v8 + 8) = 0;
    return swift_willThrow();
  }
  return result;
}

id sub_245424138()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  objc_class *Records;
  char *v7;
  objc_super v9;

  if (MEMORY[0x2495344E8](v0 + OBJC_IVAR____TtC18ReplicatorServicesP33_E12FEAD95517CBB4AB29168F11BCC1CA6Client_delegate))
  {
    v3 = sub_245422884();
    if (v1)
    {
      swift_unknownObjectRelease();
    }
    else
    {
      v5 = v3;
      Records = (objc_class *)type metadata accessor for MigrationXPCServerResponseGetRecords();
      v7 = (char *)objc_allocWithZone(Records);
      *(_QWORD *)&v7[OBJC_IVAR____TtC18ReplicatorServices36MigrationXPCServerResponseGetRecords_records] = v5;
      v9.receiver = v7;
      v9.super_class = Records;
      v2 = objc_msgSendSuper2(&v9, sel_init);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    sub_24542A244();
    swift_allocError();
    *(_BYTE *)v4 = 2;
    *(_QWORD *)(v4 + 8) = 0;
    swift_willThrow();
  }
  return v2;
}

uint64_t sub_24542467C(uint64_t a1, _QWORD *a2)
{
  return sub_2454246A4(a1, a2, &qword_2574655B0);
}

uint64_t sub_245424690(uint64_t a1, _QWORD *a2)
{
  return sub_2454246A4(a1, a2, &qword_2574655B8);
}

uint64_t sub_2454246A4(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  char isUniquelyReferenced_nonNull_native;
  __int128 v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v34;
  _OWORD *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v5 = *v3;
  sub_245444414();
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v35 = a2;
  v11 = a2[4];
  v10 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v40 = v8;
  sub_245443DF0();
  v39 = v9;
  swift_bridgeObjectRelease();
  v38 = v11;
  sub_245444438();
  v37 = v10;
  sub_245444438();
  v12 = sub_245444444();
  v13 = -1 << *(_BYTE *)(v5 + 32);
  v14 = v12 & ~v13;
  v15 = v5 + 56;
  if (((*(_QWORD *)(v5 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v16 = ~v13;
    v17 = *(_QWORD *)(v5 + 48);
    while (1)
    {
      v19 = (_QWORD *)(v17 + 48 * v14);
      v20 = v19[2];
      v21 = v19[3];
      v22 = v19[4];
      v23 = v19[5];
      v24 = *v19 == v6 && v19[1] == v7;
      if (v24 || (sub_245444390() & 1) != 0)
      {
        v25 = v20 == v40 && v21 == v39;
        if ((v25 || (sub_245444390() & 1) != 0) && v22 == v38 && v23 == v37)
          break;
      }
      v14 = (v14 + 1) & v16;
      if (((*(_QWORD *)(v15 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
        goto LABEL_19;
    }
    swift_bridgeObjectRelease();
    sub_245416B68((uint64_t)v35);
    v29 = *(_QWORD *)(*v34 + 48) + 48 * v14;
    v30 = *(_QWORD *)(v29 + 8);
    v31 = *(_QWORD *)(v29 + 16);
    v32 = *(_QWORD *)(v29 + 24);
    *(_QWORD *)a1 = *(_QWORD *)v29;
    *(_QWORD *)(a1 + 8) = v30;
    *(_QWORD *)(a1 + 16) = v31;
    *(_QWORD *)(a1 + 24) = v32;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(v29 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return 0;
  }
  else
  {
LABEL_19:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v41 = *v34;
    *v34 = 0x8000000000000000;
    sub_245416B34((uint64_t)v35);
    sub_2454265F0((uint64_t)v35, v14, isUniquelyReferenced_nonNull_native, a3);
    *v34 = v41;
    swift_bridgeObjectRelease();
    v27 = v35[1];
    *(_OWORD *)a1 = *v35;
    *(_OWORD *)(a1 + 16) = v27;
    *(_OWORD *)(a1 + 32) = v35[2];
    return 1;
  }
}

uint64_t sub_245424918(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[9];

  v3 = v2;
  v6 = type metadata accessor for ReplicatorDevice(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  sub_245444414();
  swift_bridgeObjectRetain();
  ReplicatorDevice.hash(into:)((uint64_t)v22);
  v11 = sub_245444444();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v20 = v2;
    v21 = a1;
    v14 = ~v12;
    v15 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      sub_2453BA364(*(_QWORD *)(v10 + 48) + v15 * v13, (uint64_t)v9, type metadata accessor for ReplicatorDevice);
      v16 = _s18ReplicatorServices0A6DeviceV2eeoiySbAC_ACtFZ_0((uint64_t)v9, a2);
      sub_2453BA3A8((uint64_t)v9, type metadata accessor for ReplicatorDevice);
      if ((v16 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
      if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v20;
        a1 = v21;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_2453BA3A8(a2, type metadata accessor for ReplicatorDevice);
    sub_2453BA364(*(_QWORD *)(*v20 + 48) + v15 * v13, v21, type metadata accessor for ReplicatorDevice);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_2453BA364(a2, (uint64_t)v9, type metadata accessor for ReplicatorDevice);
    v22[0] = *v3;
    *v3 = 0x8000000000000000;
    sub_245426838((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *v3 = v22[0];
    swift_bridgeObjectRelease();
    sub_2453D062C(a2, a1, type metadata accessor for ReplicatorDevice);
    return 1;
  }
}

uint64_t sub_245424B14(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char isUniquelyReferenced_nonNull_native;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _OWORD *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[10];

  v4 = *v2;
  sub_245444414();
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[5];
  v52 = a2[4];
  v10 = a2[7];
  v50 = a2[6];
  v11 = a2[8];
  v12 = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  v58 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v57 = v7;
  sub_245443DF0();
  v56 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  v51 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  v49 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_245442EB0((uint64_t)v59, v11);
  v48 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_245442CC0((uint64_t)v59, v12);
  v47 = v12;
  swift_bridgeObjectRelease();
  v13 = sub_245444444();
  v14 = -1 << *(_BYTE *)(v4 + 32);
  v15 = v13 & ~v14;
  v54 = v4 + 56;
  v55 = v4;
  v45 = a2;
  if (((*(_QWORD *)(v4 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v53 = ~v14;
    do
    {
      v16 = (_QWORD *)(*(_QWORD *)(v55 + 48) + 80 * v15);
      v18 = v16[2];
      v17 = v16[3];
      v19 = v16[4];
      v20 = v16[5];
      v22 = v16[6];
      v21 = v16[7];
      v24 = v16[8];
      v23 = v16[9];
      v25 = *v16 == v5 && v16[1] == v58;
      if (v25 || (sub_245444390() & 1) != 0)
      {
        v26 = v18 == v57 && v17 == v56;
        if (v26 || (sub_245444390() & 1) != 0)
        {
          v27 = v19 == v52 && v20 == v51;
          if (v27 || (sub_245444390() & 1) != 0)
          {
            v28 = v22 == v50 && v21 == v49;
            if (v28 || (sub_245444390() & 1) != 0)
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if ((sub_245441C9C(v24, v48) & 1) != 0)
              {
                v29 = sub_245441F44(v23, v47);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v29 & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  sub_2453F50B8((uint64_t)v45);
                  v30 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)v44 + 48) + 80 * v15);
                  v31 = v30[1];
                  v32 = v30[2];
                  v33 = v30[3];
                  v34 = v30[4];
                  v35 = v30[5];
                  v36 = v30[6];
                  v37 = v30[7];
                  v38 = v30[8];
                  v39 = v30[9];
                  *a1 = *v30;
                  a1[1] = v31;
                  a1[2] = v32;
                  a1[3] = v33;
                  a1[4] = v34;
                  a1[5] = v35;
                  a1[6] = v36;
                  a1[7] = v37;
                  a1[8] = v38;
                  a1[9] = v39;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  return 0;
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
            }
          }
        }
      }
      v15 = (v15 + 1) & v53;
    }
    while (((*(_QWORD *)(v54 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v59[0] = *(_QWORD *)v44;
  *(_QWORD *)v44 = 0x8000000000000000;
  sub_2453F1C20((uint64_t)v45);
  sub_245426EF8((uint64_t)v45, v15, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)v44 = v59[0];
  swift_bridgeObjectRelease();
  v42 = v45[3];
  *((_OWORD *)a1 + 2) = v45[2];
  *((_OWORD *)a1 + 3) = v42;
  *((_OWORD *)a1 + 4) = v45[4];
  v43 = v45[1];
  *(_OWORD *)a1 = *v45;
  *((_OWORD *)a1 + 1) = v43;
  return 1;
}

uint64_t sub_245424F54(_QWORD *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char isUniquelyReferenced_nonNull_native;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = sub_2454440E4();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for Client();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v26;
      swift_unknownObjectRelease();
      return 0;
    }
    result = sub_2454440D8();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v21 = sub_2454251D0(v7, result + 1);
    v27 = v21;
    if (*(_QWORD *)(v21 + 24) <= *(_QWORD *)(v21 + 16))
    {
      v25 = v8;
      sub_2454262AC();
      v22 = v27;
    }
    else
    {
      v22 = v21;
      v23 = v8;
    }
    sub_245426548((uint64_t)v8, v22);
    *v3 = v22;
  }
  else
  {
    swift_bridgeObjectRetain();
    v11 = sub_245444054();
    v12 = -1 << *(_BYTE *)(v6 + 32);
    v13 = v11 & ~v12;
    if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
    {
      type metadata accessor for Client();
      v14 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v13);
      v15 = sub_245444060();

      if ((v15 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v19 = *(void **)(*(_QWORD *)(*v2 + 48) + 8 * v13);
        *a1 = v19;
        v20 = v19;
        return 0;
      }
      v16 = ~v12;
      while (1)
      {
        v13 = (v13 + 1) & v16;
        if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          break;
        v17 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v13);
        v18 = sub_245444060();

        if ((v18 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v28 = *v2;
    *v2 = 0x8000000000000000;
    v8 = a2;
    sub_2454272E0((uint64_t)v8, v13, isUniquelyReferenced_nonNull_native);
    *v2 = v28;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_2454251D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2574639C8);
    v2 = sub_245444120();
    v14 = v2;
    sub_2454440CC();
    if (sub_2454440F0())
    {
      type metadata accessor for Client();
      do
      {
        swift_dynamicCast();
        v2 = v14;
        if (*(_QWORD *)(v14 + 24) <= *(_QWORD *)(v14 + 16))
        {
          sub_2454262AC();
          v2 = v14;
        }
        result = sub_245444054();
        v4 = v2 + 56;
        v5 = -1 << *(_BYTE *)(v2 + 32);
        v6 = result & ~v5;
        v7 = v6 >> 6;
        if (((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v9 = 0;
          v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v11 = v7 == v10;
            if (v7 == v10)
              v7 = 0;
            v9 |= v11;
            v12 = *(_QWORD *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v13;
        ++*(_QWORD *)(v2 + 16);
      }
      while (sub_2454440F0());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  return v2;
}

uint64_t sub_2454253B4(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int64_t v39;

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = sub_245444114();
  v6 = v5;
  if (*(_QWORD *)(v4 + 16))
  {
    v7 = 1 << *(_BYTE *)(v4 + 32);
    v37 = (_QWORD *)(v4 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v4 + 56);
    v36 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    result = swift_retain();
    v12 = 0;
    v38 = v4;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v39 = v12;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v36)
          goto LABEL_33;
        v18 = v37[v17];
        v19 = v12 + 1;
        if (!v18)
        {
          v19 = v12 + 2;
          if (v12 + 2 >= v36)
            goto LABEL_33;
          v18 = v37[v19];
          if (!v18)
          {
            v19 = v12 + 3;
            if (v12 + 3 >= v36)
              goto LABEL_33;
            v18 = v37[v19];
            if (!v18)
            {
              v20 = v12 + 4;
              if (v12 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                v3 = v2;
                v35 = 1 << *(_BYTE *)(v4 + 32);
                if (v35 > 63)
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v35;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v18 = v37[v20];
              if (!v18)
              {
                while (1)
                {
                  v19 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v19 >= v36)
                    goto LABEL_33;
                  v18 = v37[v19];
                  ++v20;
                  if (v18)
                    goto LABEL_23;
                }
              }
              v19 = v12 + 4;
            }
          }
        }
LABEL_23:
        v9 = (v18 - 1) & v18;
        v39 = v19;
        v16 = __clz(__rbit64(v18)) + (v19 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 48 * v16);
      v22 = *v21;
      v23 = v21[1];
      v24 = v21[2];
      v25 = v21[3];
      v27 = v21[4];
      v26 = v21[5];
      sub_245444414();
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      sub_245444438();
      sub_245444438();
      result = sub_245444444();
      v28 = -1 << *(_BYTE *)(v6 + 32);
      v29 = result & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v10 + 8 * (v29 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v10 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v10 + 8 * v30);
        }
        while (v34 == -1);
        v13 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 48 * v13);
      *v14 = v22;
      v14[1] = v23;
      v14[2] = v24;
      v14[3] = v25;
      v14[4] = v27;
      v14[5] = v26;
      ++*(_QWORD *)(v6 + 16);
      v4 = v38;
      v12 = v39;
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_245425718()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  int64_t v26;
  char v27[72];

  v1 = v0;
  v2 = type metadata accessor for ReplicatorDevice(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2574655C0);
  v7 = sub_245444114();
  v8 = v7;
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 1 << *(_BYTE *)(v6 + 32);
    v10 = *(_QWORD *)(v6 + 56);
    v24 = v0;
    v25 = (_QWORD *)(v6 + 56);
    if (v9 < 64)
      v11 = ~(-1 << v9);
    else
      v11 = -1;
    v12 = v11 & v10;
    v26 = (unint64_t)(v9 + 63) >> 6;
    v13 = v7 + 56;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v15 << 6);
      }
      else
      {
        v20 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v20 >= v26)
          goto LABEL_23;
        v21 = v25[v20];
        ++v15;
        if (!v21)
        {
          v15 = v20 + 1;
          if (v20 + 1 >= v26)
            goto LABEL_23;
          v21 = v25[v15];
          if (!v21)
          {
            v15 = v20 + 2;
            if (v20 + 2 >= v26)
              goto LABEL_23;
            v21 = v25[v15];
            if (!v21)
            {
              v22 = v20 + 3;
              if (v22 >= v26)
              {
LABEL_23:
                swift_release();
                v23 = 1 << *(_BYTE *)(v6 + 32);
                if (v23 > 63)
                  bzero(v25, ((unint64_t)(v23 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v25 = -1 << v23;
                v1 = v24;
                *(_QWORD *)(v6 + 16) = 0;
                break;
              }
              v21 = v25[v22];
              if (!v21)
              {
                while (1)
                {
                  v15 = v22 + 1;
                  if (__OFADD__(v22, 1))
                    goto LABEL_29;
                  if (v15 >= v26)
                    goto LABEL_23;
                  v21 = v25[v15];
                  ++v22;
                  if (v21)
                    goto LABEL_22;
                }
              }
              v15 = v22;
            }
          }
        }
LABEL_22:
        v12 = (v21 - 1) & v21;
        v17 = __clz(__rbit64(v21)) + (v15 << 6);
      }
      v18 = *(_QWORD *)(v3 + 72);
      sub_2453D062C(*(_QWORD *)(v6 + 48) + v18 * v17, (uint64_t)v5, type metadata accessor for ReplicatorDevice);
      sub_245444414();
      ReplicatorDevice.hash(into:)((uint64_t)v27);
      sub_245444444();
      v19 = sub_2454440C0();
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      result = sub_2453D062C((uint64_t)v5, *(_QWORD *)(v8 + 48) + v19 * v18, type metadata accessor for ReplicatorDevice);
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v1 = v8;
  return result;
}

uint64_t sub_2454259EC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  char *v46;
  uint64_t v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;

  v1 = v0;
  v2 = sub_245443B14();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v46 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x24BDAC7A8](v5);
  v54 = (uint64_t)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for ReplicatorRecord.ID(0);
  v53 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2574655D0);
  v10 = sub_245444114();
  v11 = v10;
  if (*(_QWORD *)(v9 + 16))
  {
    v51 = v3;
    v52 = v2;
    v45 = v0;
    v12 = 1 << *(_BYTE *)(v9 + 32);
    v13 = *(_QWORD *)(v9 + 56);
    v49 = (_QWORD *)(v9 + 56);
    if (v12 < 64)
      v14 = ~(-1 << v12);
    else
      v14 = -1;
    v15 = v14 & v13;
    v48 = (unint64_t)(v12 + 63) >> 6;
    v16 = v10 + 56;
    result = swift_retain();
    v18 = 0;
    v19 = type metadata accessor for ReplicatorRecord.ID;
    v20 = v47;
    v50 = v9;
    while (1)
    {
      if (v15)
      {
        v22 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v55 = v18;
        v23 = v22 | (v18 << 6);
      }
      else
      {
        v24 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v24 >= v48)
          goto LABEL_36;
        v25 = v49[v24];
        v26 = v18 + 1;
        if (!v25)
        {
          v26 = v18 + 2;
          if (v18 + 2 >= v48)
            goto LABEL_36;
          v25 = v49[v26];
          if (!v25)
          {
            v26 = v18 + 3;
            if (v18 + 3 >= v48)
              goto LABEL_36;
            v25 = v49[v26];
            if (!v25)
            {
              v27 = v18 + 4;
              if (v18 + 4 >= v48)
              {
LABEL_36:
                swift_release();
                v1 = v45;
                v43 = 1 << *(_BYTE *)(v9 + 32);
                if (v43 > 63)
                  bzero(v49, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v49 = -1 << v43;
                *(_QWORD *)(v9 + 16) = 0;
                break;
              }
              v25 = v49[v27];
              if (!v25)
              {
                while (1)
                {
                  v26 = v27 + 1;
                  if (__OFADD__(v27, 1))
                    goto LABEL_42;
                  if (v26 >= v48)
                    goto LABEL_36;
                  v25 = v49[v26];
                  ++v27;
                  if (v25)
                    goto LABEL_23;
                }
              }
              v26 = v18 + 4;
            }
          }
        }
LABEL_23:
        v15 = (v25 - 1) & v25;
        v55 = v26;
        v23 = __clz(__rbit64(v25)) + (v26 << 6);
      }
      v28 = *(_QWORD *)(v9 + 48);
      v29 = *(_QWORD *)(v53 + 72);
      v30 = v19;
      sub_2453D062C(v28 + v29 * v23, (uint64_t)v8, v19);
      sub_245444414();
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      v31 = v54;
      sub_2453BA364((uint64_t)&v8[*(int *)(v20 + 28)], v54, type metadata accessor for ReplicatorRecord.ID.Ownership);
      v32 = v51;
      v33 = v52;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v31, 1, v52) == 1)
      {
        sub_245444420();
      }
      else
      {
        v34 = v46;
        (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v46, v31, v33);
        sub_245444420();
        sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
        sub_245443D60();
        v35 = v34;
        v20 = v47;
        (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v33);
      }
      v19 = v30;
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      result = sub_245444444();
      v36 = -1 << *(_BYTE *)(v11 + 32);
      v37 = result & ~v36;
      v38 = v37 >> 6;
      if (((-1 << v37) & ~*(_QWORD *)(v16 + 8 * (v37 >> 6))) != 0)
      {
        v21 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v16 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v39 = 0;
        v40 = (unint64_t)(63 - v36) >> 6;
        do
        {
          if (++v38 == v40 && (v39 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v41 = v38 == v40;
          if (v38 == v40)
            v38 = 0;
          v39 |= v41;
          v42 = *(_QWORD *)(v16 + 8 * v38);
        }
        while (v42 == -1);
        v21 = __clz(__rbit64(~v42)) + (v38 << 6);
      }
      *(_QWORD *)(v16 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      result = sub_2453D062C((uint64_t)v8, *(_QWORD *)(v11 + 48) + v21 * v29, v30);
      ++*(_QWORD *)(v11 + 16);
      v9 = v50;
      v18 = v55;
    }
  }
  result = swift_release();
  *v1 = v11;
  return result;
}

unint64_t sub_245425F18()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  int64_t i;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  __int128 v33;
  _BYTE v34[80];

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E6D0);
  v2 = sub_245444114();
  v3 = v2;
  if (*(_QWORD *)(v1 + 16))
  {
    v4 = 1 << *(_BYTE *)(v1 + 32);
    v27 = (_QWORD *)(v1 + 56);
    if (v4 < 64)
      v5 = ~(-1 << v4);
    else
      v5 = -1;
    v6 = v5 & *(_QWORD *)(v1 + 56);
    v28 = (unint64_t)(v4 + 63) >> 6;
    v29 = v2 + 56;
    v30 = v1;
    result = swift_retain();
    for (i = 0; ; i = v32)
    {
      if (v6)
      {
        v31 = (v6 - 1) & v6;
        v32 = i;
        v9 = __clz(__rbit64(v6)) | (i << 6);
        v10 = v30;
      }
      else
      {
        v21 = i + 1;
        v10 = v30;
        if (__OFADD__(i, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v21 >= v28)
          goto LABEL_23;
        v22 = v27[v21];
        v23 = i + 1;
        if (!v22)
        {
          v23 = i + 2;
          if (i + 2 >= v28)
            goto LABEL_23;
          v22 = v27[v23];
          if (!v22)
          {
            v23 = i + 3;
            if (i + 3 >= v28)
              goto LABEL_23;
            v22 = v27[v23];
            if (!v22)
            {
              v24 = i + 4;
              if (i + 4 >= v28)
              {
LABEL_23:
                swift_release();
                v25 = 1 << *(_BYTE *)(v30 + 32);
                if (v25 > 63)
                  bzero(v27, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v27 = -1 << v25;
                *(_QWORD *)(v30 + 16) = 0;
                break;
              }
              v22 = v27[v24];
              if (!v22)
              {
                while (1)
                {
                  v23 = v24 + 1;
                  if (__OFADD__(v24, 1))
                    goto LABEL_29;
                  if (v23 >= v28)
                    goto LABEL_23;
                  v22 = v27[v23];
                  ++v24;
                  if (v22)
                    goto LABEL_22;
                }
              }
              v23 = i + 4;
            }
          }
        }
LABEL_22:
        v31 = (v22 - 1) & v22;
        v32 = v23;
        v9 = __clz(__rbit64(v22)) + (v23 << 6);
      }
      v11 = *(_QWORD *)(v10 + 48) + 80 * v9;
      v12 = *(_QWORD *)v11;
      v13 = *(_QWORD *)(v11 + 8);
      v15 = *(_QWORD *)(v11 + 16);
      v14 = *(_QWORD *)(v11 + 24);
      v17 = *(_QWORD *)(v11 + 32);
      v16 = *(_QWORD *)(v11 + 40);
      v18 = *(_QWORD *)(v11 + 48);
      v19 = *(_QWORD *)(v11 + 72);
      v33 = *(_OWORD *)(v11 + 56);
      sub_245444414();
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_245443DF0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_245442EB0((uint64_t)v34, *((uint64_t *)&v33 + 1));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_245442CC0((uint64_t)v34, v19);
      swift_bridgeObjectRelease();
      sub_245444444();
      result = sub_2454440C0();
      *(_QWORD *)(v29 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      v20 = *(_QWORD *)(v3 + 48) + 80 * result;
      *(_QWORD *)v20 = v12;
      *(_QWORD *)(v20 + 8) = v13;
      *(_QWORD *)(v20 + 16) = v15;
      *(_QWORD *)(v20 + 24) = v14;
      *(_QWORD *)(v20 + 32) = v17;
      *(_QWORD *)(v20 + 40) = v16;
      *(_QWORD *)(v20 + 48) = v18;
      *(_OWORD *)(v20 + 56) = v33;
      *(_QWORD *)(v20 + 72) = v19;
      ++*(_QWORD *)(v3 + 16);
      v6 = v31;
    }
  }
  result = swift_release();
  *v26 = v3;
  return result;
}

uint64_t sub_2454262AC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2574639C8);
  v3 = sub_245444114();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v28 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v28;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
      result = sub_245444054();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

unint64_t sub_245426548(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  sub_245444054();
  result = sub_2454440C0();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_2454265C8(uint64_t a1, unint64_t a2, char a3)
{
  return sub_2454265F0(a1, a2, a3, &qword_2574655B0);
}

uint64_t sub_2454265DC(uint64_t a1, unint64_t a2, char a3)
{
  return sub_2454265F0(a1, a2, a3, &qword_2574655B8);
}

uint64_t sub_2454265F0(uint64_t result, unint64_t a2, char a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = (uint64_t *)result;
  v7 = *(_QWORD *)(*v4 + 16);
  v8 = *(_QWORD *)(*v4 + 24);
  v36 = (_OWORD *)result;
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_26;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_2454253B4(v9, a4);
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_245427454(a4);
      goto LABEL_26;
    }
    sub_245427C0C(v9, a4);
  }
  v10 = *v4;
  sub_245444414();
  v11 = *v6;
  v12 = v6[1];
  v13 = v6[2];
  v14 = v6[3];
  v16 = v6[4];
  v15 = v6[5];
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v40 = v13;
  sub_245443DF0();
  v39 = v14;
  swift_bridgeObjectRelease();
  v38 = v16;
  sub_245444438();
  v37 = v15;
  sub_245444438();
  result = sub_245444444();
  v17 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v17;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v19 = ~v17;
    v20 = *(_QWORD *)(v10 + 48);
    do
    {
      v22 = (uint64_t *)(v20 + 48 * a2);
      result = *v22;
      v23 = v22[2];
      v24 = v22[3];
      v26 = v22[4];
      v25 = v22[5];
      v27 = *v22 == v11 && v22[1] == v12;
      if (v27 || (result = sub_245444390(), (result & 1) != 0))
      {
        v28 = v23 == v40 && v24 == v39;
        if (v28 || (result = sub_245444390(), (result & 1) != 0))
        {
          if (v26 == v38 && v25 == v37)
            goto LABEL_29;
        }
      }
      a2 = (a2 + 1) & v19;
    }
    while (((*(_QWORD *)(v18 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_26:
  v29 = *v35;
  *(_QWORD *)(*v35 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v30 = (_OWORD *)(*(_QWORD *)(v29 + 48) + 48 * a2);
  v31 = v36[1];
  *v30 = *v36;
  v30[1] = v31;
  v30[2] = v36[2];
  v32 = *(_QWORD *)(v29 + 16);
  v33 = __OFADD__(v32, 1);
  v34 = v32 + 1;
  if (!v33)
  {
    *(_QWORD *)(v29 + 16) = v34;
    return result;
  }
  __break(1u);
LABEL_29:
  result = sub_24544439C();
  __break(1u);
  return result;
}

uint64_t sub_245426838(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  _BYTE v27[72];

  v4 = v3;
  v8 = type metadata accessor for ReplicatorDevice(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v4 + 16);
  v13 = *(_QWORD *)(*v4 + 24);
  v26 = v9;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_245425718();
  }
  else
  {
    if (v13 > v12)
    {
      sub_24542762C(type metadata accessor for ReplicatorDevice, (uint64_t *)&unk_2574655C0);
      goto LABEL_12;
    }
    sub_245427F44();
  }
  v14 = *v4;
  sub_245444414();
  ReplicatorDevice.hash(into:)((uint64_t)v27);
  v15 = sub_245444444();
  v16 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v25[1] = v8;
    v17 = ~v16;
    v18 = *(_QWORD *)(v9 + 72);
    do
    {
      sub_2453BA364(*(_QWORD *)(v14 + 48) + v18 * a2, (uint64_t)v11, type metadata accessor for ReplicatorDevice);
      v19 = _s18ReplicatorServices0A6DeviceV2eeoiySbAC_ACtFZ_0((uint64_t)v11, a1);
      sub_2453BA3A8((uint64_t)v11, type metadata accessor for ReplicatorDevice);
      if ((v19 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v17;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v20 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_2453D062C(a1, *(_QWORD *)(v20 + 48) + *(_QWORD *)(v26 + 72) * a2, type metadata accessor for ReplicatorDevice);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_24544439C();
  __break(1u);
  return result;
}

uint64_t sub_245426A28(_QWORD *a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v7 = sub_245443B14();
  v60 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v50 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x24BDAC7A8](v9);
  v57 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E540);
  MEMORY[0x24BDAC7A8](v56);
  v58 = (uint64_t)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for ReplicatorRecord.ID(0);
  v52 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v59);
  v13 = (uint64_t *)((char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(_QWORD *)(*v3 + 16);
  v15 = *(_QWORD *)(*v3 + 24);
  v51 = v3;
  if (v15 <= v14 || (a3 & 1) == 0)
  {
    v55 = v7;
    if ((a3 & 1) != 0)
    {
      sub_2454259EC();
    }
    else
    {
      if (v15 > v14)
      {
        sub_24542762C(type metadata accessor for ReplicatorRecord.ID, &qword_2574655D0);
        goto LABEL_37;
      }
      sub_2454281E0();
    }
    v16 = *v3;
    sub_245444414();
    ReplicatorRecord.ID.hash(into:)();
    v17 = sub_245444444();
    v18 = -1 << *(_BYTE *)(v16 + 32);
    a2 = v17 & ~v18;
    v19 = v16 + 56;
    v20 = v58;
    if (((*(_QWORD *)(v16 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v21 = ~v18;
      v22 = *(_QWORD *)(v52 + 72);
      v53 = v16 + 56;
      v54 = ~v18;
      do
      {
        sub_2453BA364(*(_QWORD *)(v16 + 48) + v22 * a2, (uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
        v23 = *v13 == *a1 && v13[1] == a1[1];
        if (!v23 && (sub_245444390() & 1) == 0)
          goto LABEL_11;
        v24 = v13[2] == a1[2] && v13[3] == a1[3];
        if (!v24 && (sub_245444390() & 1) == 0 || (v13[4] != a1[4] || v13[5] != a1[5]) && (sub_245444390() & 1) == 0)
          goto LABEL_11;
        v25 = v22;
        v26 = v16;
        v27 = *(int *)(v59 + 28);
        v28 = (uint64_t)a1 + v27;
        v29 = v20 + *(int *)(v56 + 48);
        sub_2453BA364((uint64_t)v13 + v27, v20, type metadata accessor for ReplicatorRecord.ID.Ownership);
        sub_2453BA364(v28, v29, type metadata accessor for ReplicatorRecord.ID.Ownership);
        v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48);
        v31 = v20;
        v32 = v20;
        v33 = v55;
        if (v30(v31, 1, v55) == 1)
        {
          v22 = v25;
          if (v30(v29, 1, v33) != 1)
            goto LABEL_30;
        }
        else
        {
          v34 = v32;
          v35 = (uint64_t)v57;
          sub_2453BA364(v34, (uint64_t)v57, type metadata accessor for ReplicatorRecord.ID.Ownership);
          if (v30(v29, 1, v33) == 1)
          {
            (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v35, v33);
            v22 = v25;
LABEL_30:
            v20 = v58;
            sub_2453D055C(v58, (uint64_t *)&unk_25440E540);
LABEL_31:
            v16 = v26;
            v19 = v53;
            v21 = v54;
            goto LABEL_11;
          }
          v36 = v60;
          v37 = v50;
          (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v50, v29, v33);
          v38 = sub_245443AF0();
          v39 = *(void (**)(char *, uint64_t))(v36 + 8);
          v39(v37, v33);
          v39(v57, v33);
          v22 = v25;
          if ((v38 & 1) == 0)
          {
            v20 = v58;
            sub_2453BA3A8(v58, type metadata accessor for ReplicatorRecord.ID.Ownership);
            goto LABEL_31;
          }
        }
        v20 = v58;
        sub_2453BA3A8(v58, type metadata accessor for ReplicatorRecord.ID.Ownership);
        v40 = *(int *)(v59 + 32);
        v41 = *(_QWORD *)((char *)v13 + v40);
        v42 = *(_QWORD *)((char *)v13 + v40 + 8);
        v43 = (_QWORD *)((char *)a1 + v40);
        v16 = v26;
        v19 = v53;
        v21 = v54;
        if (v41 == *v43 && v42 == v43[1] || (sub_245444390() & 1) != 0)
          goto LABEL_40;
LABEL_11:
        sub_2453BA3A8((uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
        a2 = (a2 + 1) & v21;
      }
      while (((*(_QWORD *)(v19 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_37:
  v44 = *v51;
  *(_QWORD *)(*v51 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_2453D062C((uint64_t)a1, *(_QWORD *)(v44 + 48) + *(_QWORD *)(v52 + 72) * a2, type metadata accessor for ReplicatorRecord.ID);
  v46 = *(_QWORD *)(v44 + 16);
  v47 = __OFADD__(v46, 1);
  v48 = v46 + 1;
  if (v47)
  {
    __break(1u);
LABEL_40:
    sub_2453BA3A8((uint64_t)v13, type metadata accessor for ReplicatorRecord.ID);
    result = sub_24544439C();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v44 + 16) = v48;
  }
  return result;
}

uint64_t sub_245426EF8(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  char v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[80];

  v5 = (uint64_t *)result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  v43 = (_OWORD *)result;
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_35;
  if ((a3 & 1) != 0)
  {
    sub_245425F18();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_245427844();
      goto LABEL_35;
    }
    sub_2454286F8();
  }
  v50 = *v3;
  sub_245444414();
  v8 = *v5;
  v9 = v5[1];
  v10 = v5[2];
  v11 = v5[3];
  v12 = v5[4];
  v13 = v5[5];
  v14 = v5[6];
  v15 = v5[7];
  v17 = v5[8];
  v16 = v5[9];
  swift_bridgeObjectRetain();
  sub_245443DF0();
  v53 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v52 = v10;
  sub_245443DF0();
  v51 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v48 = v12;
  sub_245443DF0();
  v47 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v46 = v14;
  sub_245443DF0();
  v45 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_245442EB0((uint64_t)v54, v17);
  v44 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_245442CC0((uint64_t)v54, v16);
  v41 = v16;
  swift_bridgeObjectRelease();
  result = sub_245444444();
  v18 = -1 << *(_BYTE *)(v50 + 32);
  a2 = result & ~v18;
  if (((*(_QWORD *)(v50 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v49 = ~v18;
    do
    {
      v19 = (_QWORD *)(*(_QWORD *)(v50 + 48) + 80 * a2);
      v21 = v19[2];
      v20 = v19[3];
      v22 = v19[4];
      v23 = v19[5];
      v24 = v19[6];
      v25 = v19[7];
      v26 = v19[8];
      v27 = v19[9];
      v28 = *v19 == v8 && v19[1] == v53;
      if (v28 || (result = sub_245444390(), (result & 1) != 0))
      {
        v29 = v21 == v52 && v20 == v51;
        if (v29 || (result = sub_245444390(), (result & 1) != 0))
        {
          v30 = v22 == v48 && v23 == v47;
          if (v30 || (result = sub_245444390(), (result & 1) != 0))
          {
            v31 = v24 == v46 && v25 == v45;
            if (v31 || (result = sub_245444390(), (result & 1) != 0))
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if ((sub_245441C9C(v26, v44) & 1) != 0)
              {
                v32 = sub_245441F44(v27, v41);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                result = swift_bridgeObjectRelease();
                if ((v32 & 1) != 0)
                {
                  result = sub_24544439C();
                  __break(1u);
                  break;
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                result = swift_bridgeObjectRelease();
              }
            }
          }
        }
      }
      a2 = (a2 + 1) & v49;
    }
    while (((*(_QWORD *)(v50 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_35:
  v33 = *v42;
  *(_QWORD *)(*v42 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v34 = (_OWORD *)(*(_QWORD *)(v33 + 48) + 80 * a2);
  v35 = v43[4];
  v36 = v43[2];
  v34[3] = v43[3];
  v34[4] = v35;
  v37 = v43[1];
  *v34 = *v43;
  v34[1] = v37;
  v34[2] = v36;
  v38 = *(_QWORD *)(v33 + 16);
  v39 = __OFADD__(v38, 1);
  v40 = v38 + 1;
  if (v39)
    __break(1u);
  else
    *(_QWORD *)(v33 + 16) = v40;
  return result;
}

void sub_2454272E0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_2454262AC();
  }
  else
  {
    if (v7 > v6)
    {
      sub_245427A64();
      goto LABEL_14;
    }
    sub_245428A74();
  }
  v8 = *v3;
  v9 = sub_245444054();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    type metadata accessor for Client();
    v11 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
    v12 = sub_245444060();

    if ((v12 & 1) != 0)
    {
LABEL_13:
      sub_24544439C();
      __break(1u);
    }
    else
    {
      v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v14 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
        v15 = sub_245444060();

        if ((v15 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = a1;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
}

void *sub_245427454(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = sub_245444108();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v14)
      goto LABEL_28;
    v25 = *(_QWORD *)(v7 + 8 * v24);
    ++v10;
    if (!v25)
    {
      v10 = v24 + 1;
      if (v24 + 1 >= v14)
        goto LABEL_28;
      v25 = *(_QWORD *)(v7 + 8 * v10);
      if (!v25)
      {
        v10 = v24 + 2;
        if (v24 + 2 >= v14)
          goto LABEL_28;
        v25 = *(_QWORD *)(v7 + 8 * v10);
        if (!v25)
          break;
      }
    }
LABEL_27:
    v13 = (v25 - 1) & v25;
    v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_12:
    v17 = 48 * v16;
    v18 = *(_QWORD *)(v3 + 48) + v17;
    v19 = *(_QWORD *)(v18 + 8);
    v20 = *(_QWORD *)(v18 + 16);
    v21 = *(_QWORD *)(v18 + 24);
    v22 = *(_QWORD *)(v5 + 48) + v17;
    v23 = *(_OWORD *)(v18 + 32);
    *(_QWORD *)v22 = *(_QWORD *)v18;
    *(_QWORD *)(v22 + 8) = v19;
    *(_QWORD *)(v22 + 16) = v20;
    *(_QWORD *)(v22 + 24) = v21;
    *(_OWORD *)(v22 + 32) = v23;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 3;
  if (v26 >= v14)
    goto LABEL_28;
  v25 = *(_QWORD *)(v7 + 8 * v26);
  if (v25)
  {
    v10 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v25 = *(_QWORD *)(v7 + 8 * v10);
    ++v26;
    if (v25)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_245427618()
{
  return sub_24542762C(type metadata accessor for ReplicatorRecord.ID, &qword_2574655D0);
}

void *sub_24542762C(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  unint64_t v15;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v5 = v2;
  v6 = a1(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v28 - v8;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v10 = *v2;
  v11 = sub_245444108();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v5 = v12;
    return result;
  }
  v29 = v5;
  result = (void *)(v11 + 56);
  v14 = v10 + 56;
  v15 = (unint64_t)((1 << *(_BYTE *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 56 + 8 * v15)
    result = memmove(result, (const void *)(v10 + 56), 8 * v15);
  v17 = 0;
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v10 + 16);
  v18 = 1 << *(_BYTE *)(v10 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(v10 + 56);
  v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v23 = v22 | (v17 << 6);
      goto LABEL_12;
    }
    v25 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v25 >= v21)
      goto LABEL_28;
    v26 = *(_QWORD *)(v14 + 8 * v25);
    ++v17;
    if (!v26)
    {
      v17 = v25 + 1;
      if (v25 + 1 >= v21)
        goto LABEL_28;
      v26 = *(_QWORD *)(v14 + 8 * v17);
      if (!v26)
      {
        v17 = v25 + 2;
        if (v25 + 2 >= v21)
          goto LABEL_28;
        v26 = *(_QWORD *)(v14 + 8 * v17);
        if (!v26)
          break;
      }
    }
LABEL_27:
    v20 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v17 << 6);
LABEL_12:
    v24 = *(_QWORD *)(v7 + 72) * v23;
    sub_2453BA364(*(_QWORD *)(v10 + 48) + v24, (uint64_t)v9, a1);
    result = (void *)sub_2453D062C((uint64_t)v9, *(_QWORD *)(v12 + 48) + v24, a1);
  }
  v27 = v25 + 3;
  if (v27 >= v21)
  {
LABEL_28:
    result = (void *)swift_release();
    v5 = v29;
    goto LABEL_30;
  }
  v26 = *(_QWORD *)(v14 + 8 * v27);
  if (v26)
  {
    v17 = v27;
    goto LABEL_27;
  }
  while (1)
  {
    v17 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v17 >= v21)
      goto LABEL_28;
    v26 = *(_QWORD *)(v14 + 8 * v17);
    ++v27;
    if (v26)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_245427844()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E6D0);
  v2 = *v0;
  v3 = sub_245444108();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v27 >= v13)
      goto LABEL_28;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_28;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
      {
        v9 = v27 + 2;
        if (v27 + 2 >= v13)
          goto LABEL_28;
        v28 = *(_QWORD *)(v6 + 8 * v9);
        if (!v28)
          break;
      }
    }
LABEL_27:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 80 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)(v17 + 8);
    v19 = *(_QWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 24);
    v21 = *(_QWORD *)(v17 + 32);
    v22 = *(_QWORD *)(v17 + 40);
    v23 = *(_QWORD *)(v17 + 48);
    v24 = *(_QWORD *)(v17 + 72);
    v25 = *(_QWORD *)(v4 + 48) + v16;
    v26 = *(_OWORD *)(v17 + 56);
    *(_QWORD *)v25 = *(_QWORD *)v17;
    *(_QWORD *)(v25 + 8) = v18;
    *(_QWORD *)(v25 + 16) = v19;
    *(_QWORD *)(v25 + 24) = v20;
    *(_QWORD *)(v25 + 32) = v21;
    *(_QWORD *)(v25 + 40) = v22;
    *(_QWORD *)(v25 + 48) = v23;
    *(_OWORD *)(v25 + 56) = v26;
    *(_QWORD *)(v25 + 72) = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v29 = v27 + 3;
  if (v29 >= v13)
    goto LABEL_28;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_245427A64()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2574639C8);
  v2 = *v0;
  v3 = sub_245444108();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_245427C0C(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = sub_245444114();
  v6 = v5;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release();
LABEL_35:
    *v3 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v4 + 32);
  v35 = v4 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v4 + 56);
  v36 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain();
  v12 = 0;
  v37 = v4;
  while (1)
  {
    if (v9)
    {
      v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v38 = v12;
      v16 = v15 | (v12 << 6);
      goto LABEL_24;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v17 >= v36)
      goto LABEL_33;
    v18 = *(_QWORD *)(v35 + 8 * v17);
    v19 = v12 + 1;
    if (!v18)
    {
      v19 = v12 + 2;
      if (v12 + 2 >= v36)
        goto LABEL_33;
      v18 = *(_QWORD *)(v35 + 8 * v19);
      if (!v18)
      {
        v19 = v12 + 3;
        if (v12 + 3 >= v36)
          goto LABEL_33;
        v18 = *(_QWORD *)(v35 + 8 * v19);
        if (!v18)
          break;
      }
    }
LABEL_23:
    v9 = (v18 - 1) & v18;
    v38 = v19;
    v16 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_24:
    v21 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 48 * v16);
    v22 = *v21;
    v23 = v21[1];
    v24 = v21[2];
    v25 = v21[3];
    v26 = v21[4];
    v27 = v21[5];
    sub_245444414();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    sub_245444438();
    sub_245444438();
    result = sub_245444444();
    v28 = -1 << *(_BYTE *)(v6 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v10 + 8 * (v29 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v10 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v10 + 8 * v30);
      }
      while (v34 == -1);
      v13 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 48 * v13);
    *v14 = v22;
    v14[1] = v23;
    v14[2] = v24;
    v14[3] = v25;
    v14[4] = v26;
    v14[5] = v27;
    ++*(_QWORD *)(v6 + 16);
    v4 = v37;
    v12 = v38;
  }
  v20 = v12 + 4;
  if (v12 + 4 >= v36)
  {
LABEL_33:
    result = swift_release_n();
    v3 = v2;
    goto LABEL_35;
  }
  v18 = *(_QWORD *)(v35 + 8 * v20);
  if (v18)
  {
    v19 = v12 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v19 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v19 >= v36)
      goto LABEL_33;
    v18 = *(_QWORD *)(v35 + 8 * v19);
    ++v20;
    if (v18)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_245427F44()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  char v26[72];

  v1 = v0;
  v2 = type metadata accessor for ReplicatorDevice(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2574655C0);
  v7 = sub_245444114();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_25:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v23 = v0;
  v24 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v25 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v17 = v16 | (v15 << 6);
      goto LABEL_7;
    }
    v20 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v25)
      goto LABEL_23;
    v21 = *(_QWORD *)(v24 + 8 * v20);
    ++v15;
    if (!v21)
    {
      v15 = v20 + 1;
      if (v20 + 1 >= v25)
        goto LABEL_23;
      v21 = *(_QWORD *)(v24 + 8 * v15);
      if (!v21)
      {
        v15 = v20 + 2;
        if (v20 + 2 >= v25)
          goto LABEL_23;
        v21 = *(_QWORD *)(v24 + 8 * v15);
        if (!v21)
          break;
      }
    }
LABEL_22:
    v12 = (v21 - 1) & v21;
    v17 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_7:
    v18 = *(_QWORD *)(v3 + 72);
    sub_2453BA364(*(_QWORD *)(v6 + 48) + v18 * v17, (uint64_t)v5, type metadata accessor for ReplicatorDevice);
    sub_245444414();
    ReplicatorDevice.hash(into:)((uint64_t)v26);
    sub_245444444();
    v19 = sub_2454440C0();
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = sub_2453D062C((uint64_t)v5, *(_QWORD *)(v8 + 48) + v19 * v18, type metadata accessor for ReplicatorDevice);
    ++*(_QWORD *)(v8 + 16);
  }
  v22 = v20 + 3;
  if (v22 >= v25)
  {
LABEL_23:
    result = swift_release_n();
    v1 = v23;
    goto LABEL_25;
  }
  v21 = *(_QWORD *)(v24 + 8 * v22);
  if (v21)
  {
    v15 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    v15 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v15 >= v25)
      goto LABEL_23;
    v21 = *(_QWORD *)(v24 + 8 * v15);
    ++v22;
    if (v21)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_2454281E0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;

  v1 = v0;
  v2 = sub_245443B14();
  v49 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v44 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for ReplicatorRecord.ID(0);
  v48 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2574655D0);
  v10 = sub_245444114();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = swift_release();
LABEL_38:
    *v1 = v11;
    return result;
  }
  v43 = v0;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 56);
  v46 = v9 + 56;
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v47 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 56;
  result = swift_retain();
  v18 = 0;
  v19 = v9;
  v20 = v45;
  while (1)
  {
    if (v15)
    {
      v22 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v51 = v18;
      v23 = v22 | (v18 << 6);
      goto LABEL_24;
    }
    v24 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v24 >= v47)
      goto LABEL_36;
    v25 = *(_QWORD *)(v46 + 8 * v24);
    v26 = v18 + 1;
    if (!v25)
    {
      v26 = v18 + 2;
      if (v18 + 2 >= v47)
        goto LABEL_36;
      v25 = *(_QWORD *)(v46 + 8 * v26);
      if (!v25)
      {
        v26 = v18 + 3;
        if (v18 + 3 >= v47)
          goto LABEL_36;
        v25 = *(_QWORD *)(v46 + 8 * v26);
        if (!v25)
          break;
      }
    }
LABEL_23:
    v15 = (v25 - 1) & v25;
    v51 = v26;
    v23 = __clz(__rbit64(v25)) + (v26 << 6);
LABEL_24:
    v28 = *(_QWORD *)(v19 + 48);
    v50 = *(_QWORD *)(v48 + 72);
    sub_2453BA364(v28 + v50 * v23, (uint64_t)v8, type metadata accessor for ReplicatorRecord.ID);
    sub_245444414();
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    sub_2453BA364((uint64_t)&v8[*(int *)(v20 + 28)], (uint64_t)v6, type metadata accessor for ReplicatorRecord.ID.Ownership);
    v29 = v49;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v6, 1, v2) == 1)
    {
      sub_245444420();
    }
    else
    {
      v30 = v11;
      v31 = v19;
      v32 = v6;
      v33 = v2;
      v34 = v44;
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v44, v32, v33);
      sub_245444420();
      sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
      sub_245443D60();
      v35 = v34;
      v2 = v33;
      v6 = v32;
      v19 = v31;
      v11 = v30;
      v20 = v45;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v35, v2);
    }
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    result = sub_245444444();
    v36 = -1 << *(_BYTE *)(v11 + 32);
    v37 = result & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v16 + 8 * (v37 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v16 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)(v16 + 8 * v38);
      }
      while (v42 == -1);
      v21 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(_QWORD *)(v16 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    result = sub_2453D062C((uint64_t)v8, *(_QWORD *)(v11 + 48) + v21 * v50, type metadata accessor for ReplicatorRecord.ID);
    ++*(_QWORD *)(v11 + 16);
    v18 = v51;
  }
  v27 = v18 + 4;
  if (v18 + 4 >= v47)
  {
LABEL_36:
    result = swift_release_n();
    v1 = v43;
    goto LABEL_38;
  }
  v25 = *(_QWORD *)(v46 + 8 * v27);
  if (v25)
  {
    v26 = v18 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v26 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v26 >= v47)
      goto LABEL_36;
    v25 = *(_QWORD *)(v46 + 8 * v26);
    ++v27;
    if (v25)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t sub_2454286F8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  __int128 v33;
  _BYTE v34[80];

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E6D0);
  v2 = sub_245444114();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_24:
    result = swift_release();
    *v25 = v3;
    return result;
  }
  v4 = 1 << *(_BYTE *)(v1 + 32);
  v26 = v1 + 56;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 56);
  v27 = (unint64_t)(v4 + 63) >> 6;
  v28 = v2 + 56;
  v30 = v1;
  result = swift_retain();
  v8 = 0;
  v29 = v3;
  while (1)
  {
    if (v6)
    {
      v31 = (v6 - 1) & v6;
      v32 = v8;
      v9 = __clz(__rbit64(v6)) | (v8 << 6);
      v10 = v30;
      goto LABEL_7;
    }
    v21 = v8 + 1;
    v10 = v30;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v21 >= v27)
      goto LABEL_23;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    v23 = v8 + 1;
    if (!v22)
    {
      v23 = v8 + 2;
      if (v8 + 2 >= v27)
        goto LABEL_23;
      v22 = *(_QWORD *)(v26 + 8 * v23);
      if (!v22)
      {
        v23 = v8 + 3;
        if (v8 + 3 >= v27)
          goto LABEL_23;
        v22 = *(_QWORD *)(v26 + 8 * v23);
        if (!v22)
          break;
      }
    }
LABEL_22:
    v31 = (v22 - 1) & v22;
    v32 = v23;
    v9 = __clz(__rbit64(v22)) + (v23 << 6);
LABEL_7:
    v11 = *(_QWORD *)(v10 + 48) + 80 * v9;
    v12 = *(_QWORD *)v11;
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(_QWORD *)(v11 + 16);
    v15 = *(_QWORD *)(v11 + 24);
    v16 = *(_QWORD *)(v11 + 32);
    v17 = *(_QWORD *)(v11 + 40);
    v18 = *(_QWORD *)(v11 + 48);
    v19 = *(_QWORD *)(v11 + 72);
    v33 = *(_OWORD *)(v11 + 56);
    sub_245444414();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_245443DF0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_245442EB0((uint64_t)v34, *((uint64_t *)&v33 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_245442CC0((uint64_t)v34, v19);
    swift_bridgeObjectRelease();
    sub_245444444();
    v3 = v29;
    result = sub_2454440C0();
    *(_QWORD *)(v28 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = *(_QWORD *)(v29 + 48) + 80 * result;
    *(_QWORD *)v20 = v12;
    *(_QWORD *)(v20 + 8) = v13;
    *(_QWORD *)(v20 + 16) = v14;
    *(_QWORD *)(v20 + 24) = v15;
    *(_QWORD *)(v20 + 32) = v16;
    *(_QWORD *)(v20 + 40) = v17;
    *(_QWORD *)(v20 + 48) = v18;
    *(_OWORD *)(v20 + 56) = v33;
    *(_QWORD *)(v20 + 72) = v19;
    ++*(_QWORD *)(v29 + 16);
    v6 = v31;
    v8 = v32;
  }
  v24 = v8 + 4;
  if (v8 + 4 >= v27)
  {
LABEL_23:
    swift_release();
    goto LABEL_24;
  }
  v22 = *(_QWORD *)(v26 + 8 * v24);
  if (v22)
  {
    v23 = v8 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    v23 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v23 >= v27)
      goto LABEL_23;
    v22 = *(_QWORD *)(v26 + 8 * v23);
    ++v24;
    if (v22)
      goto LABEL_22;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_245428A74()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2574639C8);
  v3 = sub_245444114();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v27 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = sub_245444054();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v27;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

double sub_245428CEC@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  char v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  double result;
  uint64_t *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[10];

  v4 = *v2;
  sub_245444414();
  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  v9 = a1[4];
  v10 = a1[5];
  v11 = a1[7];
  v44 = a1[6];
  v13 = a1[8];
  v12 = a1[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  v52 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v51 = v7;
  sub_245443DF0();
  v50 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v46 = v9;
  sub_245443DF0();
  v45 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  v43 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_245442EB0((uint64_t)v53, v13);
  v42 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_245442CC0((uint64_t)v53, v12);
  v41 = v12;
  swift_bridgeObjectRelease();
  v14 = sub_245444444();
  v15 = -1 << *(_BYTE *)(v4 + 32);
  v16 = v14 & ~v15;
  v48 = v4 + 56;
  v49 = v4;
  if (((*(_QWORD *)(v4 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    result = 0.0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return result;
  }
  v47 = ~v15;
  while (1)
  {
    v17 = (_QWORD *)(*(_QWORD *)(v49 + 48) + 80 * v16);
    v19 = v17[2];
    v18 = v17[3];
    v20 = v17[4];
    v21 = v17[5];
    v22 = v17[6];
    v23 = v17[7];
    v25 = v17[8];
    v24 = v17[9];
    v26 = *v17 == v5 && v17[1] == v52;
    if (!v26 && (sub_245444390() & 1) == 0)
      goto LABEL_4;
    v27 = v19 == v51 && v18 == v50;
    if (!v27 && (sub_245444390() & 1) == 0)
      goto LABEL_4;
    v28 = v20 == v46 && v21 == v45;
    if (!v28 && (sub_245444390() & 1) == 0)
      goto LABEL_4;
    v29 = v22 == v44 && v23 == v43;
    if (!v29 && (sub_245444390() & 1) == 0)
      goto LABEL_4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((sub_245441C9C(v25, v42) & 1) != 0)
      break;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_4:
    v16 = (v16 + 1) & v47;
    if (((*(_QWORD *)(v48 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      goto LABEL_30;
  }
  v30 = sub_245441F44(v24, v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v30 & 1) == 0)
    goto LABEL_4;
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v32 = *v39;
  v53[0] = *v39;
  *v39 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_245427844();
    v32 = v53[0];
  }
  v33 = *(_QWORD *)(v32 + 48) + 80 * v16;
  v34 = *(_OWORD *)(v33 + 16);
  v35 = *(_OWORD *)(v33 + 32);
  v36 = *(_QWORD *)(v33 + 48);
  v37 = *(_QWORD *)(v33 + 72);
  *(_OWORD *)a2 = *(_OWORD *)v33;
  *(_OWORD *)(a2 + 16) = v34;
  *(_OWORD *)(a2 + 32) = v35;
  *(_QWORD *)(a2 + 48) = v36;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(v33 + 56);
  *(_QWORD *)(a2 + 72) = v37;
  sub_245429878(v16);
  *v39 = v53[0];
  swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_2454290EC(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  id v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  id v13;
  char v14;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v18;

  v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v4 = a1;
    v5 = sub_2454440FC();

    if ((v5 & 1) != 0)
    {
      v6 = sub_2454292B0();
      swift_bridgeObjectRelease();
      return v6;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v7 = sub_245444054();
  v8 = -1 << *(_BYTE *)(v3 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
    goto LABEL_12;
  type metadata accessor for Client();
  v10 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v9);
  v11 = sub_245444060();

  if ((v11 & 1) == 0)
  {
    v12 = ~v8;
    do
    {
      v9 = (v9 + 1) & v12;
      if (((*(_QWORD *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_12;
      v13 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v9);
      v14 = sub_245444060();

    }
    while ((v14 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = *v1;
  v18 = *v1;
  *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_245427A64();
    v16 = v18;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * v9);
  sub_245429B84(v9);
  *v1 = v18;
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_2454292B0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  char v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v1 = v0;
  swift_bridgeObjectRelease();
  v2 = sub_2454440D8();
  v3 = swift_unknownObjectRetain();
  v4 = sub_2454251D0(v3, v2);
  v15 = v4;
  swift_retain();
  v5 = sub_245444054();
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    type metadata accessor for Client();
    v8 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v7);
    v9 = sub_245444060();

    if ((v9 & 1) != 0)
    {
LABEL_6:
      swift_release();
      v13 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v7);
      sub_245429B84(v7);
      if ((sub_245444060() & 1) != 0)
      {
        *v1 = v15;
        return v13;
      }
      __break(1u);
    }
    else
    {
      v10 = ~v6;
      while (1)
      {
        v7 = (v7 + 1) & v10;
        if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
          break;
        v11 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v7);
        v12 = sub_245444060();

        if ((v12 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release();
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_245429438(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;

  v3 = sub_245443B14();
  v43 = *(_QWORD *)(v3 - 8);
  v44 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v39 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x24BDAC7A8](v5);
  v40 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ReplicatorRecord.ID(0);
  v8 = *(_QWORD *)(v7 - 8);
  result = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = v1;
  v12 = *v1;
  v13 = *v1 + 56;
  v14 = -1 << *(_BYTE *)(*v1 + 32);
  v15 = (a1 + 1) & ~v14;
  if (((1 << v15) & *(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
  {
    v16 = ~v14;
    swift_retain();
    v17 = sub_2454440B4();
    if ((*(_QWORD *)(v13 + 8 * (v15 >> 6)) & (1 << v15)) != 0)
    {
      v18 = *(_QWORD *)(v8 + 72);
      v19 = (uint64_t)v40;
      v20 = v16;
      v38 = v16;
      v41 = v18;
      v42 = (v17 + 1) & v16;
      while (1)
      {
        v21 = *(_QWORD *)(v12 + 48);
        v45 = v18 * v15;
        sub_2453BA364(v21 + v18 * v15, (uint64_t)v11, type metadata accessor for ReplicatorRecord.ID);
        sub_245444414();
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        sub_2453BA364((uint64_t)&v11[*(int *)(v7 + 28)], v19, type metadata accessor for ReplicatorRecord.ID.Ownership);
        v22 = v43;
        v23 = v44;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v19, 1, v44) == 1)
        {
          sub_245444420();
        }
        else
        {
          v24 = a1;
          v25 = v12;
          v26 = v7;
          v27 = v13;
          v28 = v39;
          (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v39, v19, v23);
          sub_245444420();
          sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
          sub_245443D60();
          v19 = (uint64_t)v40;
          v29 = v28;
          v13 = v27;
          v7 = v26;
          v12 = v25;
          a1 = v24;
          v20 = v38;
          (*(void (**)(char *, uint64_t))(v22 + 8))(v29, v23);
        }
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        v30 = sub_245444444();
        sub_2453BA3A8((uint64_t)v11, type metadata accessor for ReplicatorRecord.ID);
        v31 = v30 & v20;
        if ((uint64_t)a1 >= (uint64_t)v42)
          break;
        v18 = v41;
        if (v31 < v42)
          goto LABEL_14;
LABEL_15:
        v32 = v18 * a1;
        if ((uint64_t)(v18 * a1) < v45 || *(_QWORD *)(v12 + 48) + v18 * a1 >= *(_QWORD *)(v12 + 48) + v45 + v18)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v15;
          if (v32 == v45)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v15;
LABEL_6:
        v15 = (v15 + 1) & v20;
        if (((*(_QWORD *)(v13 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          goto LABEL_19;
      }
      v18 = v41;
      if (v31 < v42)
        goto LABEL_6;
LABEL_14:
      if ((uint64_t)a1 < (uint64_t)v31)
        goto LABEL_6;
      goto LABEL_15;
    }
LABEL_19:
    *(_QWORD *)(v13 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v13 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v33 = *v37;
  v34 = *(_QWORD *)(*v37 + 16);
  v35 = __OFSUB__(v34, 1);
  v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v33 + 16) = v36;
    ++*(_DWORD *)(v33 + 36);
  }
  return result;
}

unint64_t sub_245429878(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE v23[72];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_2454440B4();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v20 = v4;
      v21 = v3;
      v22 = (v8 + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(v3 + 48) + 80 * v6;
        v11 = *(_QWORD *)(v9 + 64);
        v10 = *(_QWORD *)(v9 + 72);
        sub_245444414();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_245443DF0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_245442EB0((uint64_t)v23, v11);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_245442CC0((uint64_t)v23, v10);
        swift_bridgeObjectRelease();
        v12 = sub_245444444();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v13 = v12 & v7;
        if (v2 >= (uint64_t)v22)
        {
          if (v13 < v22)
          {
            v4 = v20;
            v3 = v21;
          }
          else
          {
            v4 = v20;
            v3 = v21;
            if (v2 >= (uint64_t)v13)
              goto LABEL_12;
          }
        }
        else
        {
          v4 = v20;
          v3 = v21;
          if (v13 >= v22 || v2 >= (uint64_t)v13)
          {
LABEL_12:
            v14 = *(_QWORD *)(v3 + 48);
            v15 = (char *)(v14 + 80 * v2);
            v16 = (char *)(v14 + 80 * v6);
            if (v2 != v6 || (v2 = v6, v15 >= v16 + 80))
            {
              memmove(v15, v16, 0x50uLL);
              v2 = v6;
            }
          }
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v17 = *(_QWORD *)(v3 + 16);
  v18 = __OFSUB__(v17, 1);
  v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v19;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_245429B84(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_2454440B4();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v11 = sub_245444054();

        v12 = v11 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= (uint64_t)v12)
          {
LABEL_16:
            v15 = *(_QWORD *)(v3 + 48);
            v16 = (_QWORD *)(v15 + 8 * v2);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void sub_245429D24(void *a1)
{
  char *v1;
  id v3;
  void *v4;
  unsigned int v5;
  id v6;
  unsigned int v7;
  objc_class *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  char *v21;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[7];
  objc_super v24;

  v3 = objc_msgSend(a1, sel_remoteProcess);
  v4 = (void *)sub_245443D78();
  v5 = objc_msgSend(v3, sel_hasEntitlement_, v4);

  if (v5)
  {
    v6 = objc_msgSend(a1, sel_remoteProcess);
    v7 = objc_msgSend(v6, sel_pid);

    v8 = (objc_class *)type metadata accessor for Client();
    v9 = (char *)objc_allocWithZone(v8);
    v10 = OBJC_IVAR____TtC18ReplicatorServicesP33_E12FEAD95517CBB4AB29168F11BCC1CA6Client_lock;
    __swift_instantiateConcreteTypeFromMangledName(&qword_25440E6F0);
    v11 = swift_allocObject();
    *(_DWORD *)(v11 + 16) = 0;
    *(_QWORD *)&v9[v10] = v11;
    *(_QWORD *)&v9[OBJC_IVAR____TtC18ReplicatorServicesP33_E12FEAD95517CBB4AB29168F11BCC1CA6Client_delegate + 8] = 0;
    v12 = swift_unknownObjectWeakInit();
    *(_QWORD *)&v9[OBJC_IVAR____TtC18ReplicatorServicesP33_E12FEAD95517CBB4AB29168F11BCC1CA6Client_connection] = a1;
    *(_DWORD *)&v9[OBJC_IVAR____TtC18ReplicatorServicesP33_E12FEAD95517CBB4AB29168F11BCC1CA6Client_pid] = v7;
    *(_QWORD *)(v12 + 8) = &off_251652B50;
    swift_unknownObjectWeakAssign();
    v24.receiver = v9;
    v24.super_class = v8;
    v13 = a1;
    v14 = objc_msgSendSuper2(&v24, sel_init);
    v15 = *(os_unfair_lock_s **)&v1[OBJC_IVAR____TtC18ReplicatorServices15MigrationServer_lock];
    MEMORY[0x24BDAC7A8](v14);
    swift_retain();
    os_unfair_lock_lock(v15 + 4);
    sub_2453C62CC(v16, (uint64_t (*)(void))sub_24542A450);
    os_unfair_lock_unlock(v15 + 4);
    swift_release();
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v14;
    *(_QWORD *)(v17 + 24) = v1;
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = sub_24542A494;
    *(_QWORD *)(v18 + 24) = v17;
    aBlock[4] = sub_2453F6D38;
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_24542241C;
    aBlock[3] = &block_descriptor_41;
    v19 = _Block_copy(aBlock);
    v20 = v14;
    v21 = v1;
    swift_retain();
    swift_release();
    objc_msgSend(v13, sel_configureConnection_, v19);
    _Block_release(v19);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      objc_msgSend(v13, sel_activate);
      swift_release();

    }
  }
  else
  {
    objc_msgSend(a1, sel_invalidate);
  }
}

uint64_t method lookup function for MigrationServer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MigrationServer.localDeviceIDProvider.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of MigrationServer.localDeviceIDProvider.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of MigrationServer.localDeviceIDProvider.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of MigrationServer.recordProvider.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of MigrationServer.recordProvider.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of MigrationServer.recordProvider.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of MigrationServer.deviceProvider.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of MigrationServer.deviceProvider.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of MigrationServer.deviceProvider.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of MigrationServer.clientDescriptorProvider.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of MigrationServer.clientDescriptorProvider.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of MigrationServer.clientDescriptorProvider.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of MigrationServer.eraseHandler.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of MigrationServer.eraseHandler.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of MigrationServer.eraseHandler.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of MigrationServer.start()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t type metadata accessor for Client()
{
  return objc_opt_self();
}

unint64_t sub_24542A244()
{
  unint64_t result;

  result = qword_257465570;
  if (!qword_257465570)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for MigrationServiceError, &type metadata for MigrationServiceError);
    atomic_store(result, (unint64_t *)&qword_257465570);
  }
  return result;
}

unint64_t sub_24542A288()
{
  unint64_t result;

  result = qword_257465790;
  if (!qword_257465790)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for MigrationXPCServerResponse.GetClientDescriptors, &type metadata for MigrationXPCServerResponse.GetClientDescriptors);
    atomic_store(result, (unint64_t *)&qword_257465790);
  }
  return result;
}

unint64_t sub_24542A2CC()
{
  unint64_t result;

  result = qword_257465580;
  if (!qword_257465580)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for MigrationXPCServerResponse.GetDevices, &type metadata for MigrationXPCServerResponse.GetDevices);
    atomic_store(result, (unint64_t *)&qword_257465580);
  }
  return result;
}

uint64_t sub_24542A310@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_245423CF4(*(_QWORD *)(v1 + 16), a1);
}

_QWORD *sub_24542A328@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[2];

  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(v1 + 16))(v6);
  if (!v2)
  {
    v5 = v6[1];
    *a1 = v6[0];
    a1[1] = v5;
  }
  return result;
}

uint64_t sub_24542A364(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t sub_24542A388()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_24542A3AC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

_QWORD *sub_24542A3CC()
{
  return sub_24542A3F4();
}

uint64_t sub_24542A3E0@<X0>(uint64_t *a1@<X8>)
{
  return sub_24542A424(a1);
}

_QWORD *sub_24542A3F4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(v0 + 16))(&v3);
  if (!v1)
    return (_QWORD *)v3;
  return result;
}

uint64_t sub_24542A424@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2)
    *a1 = result;
  return result;
}

void sub_24542A450()
{
  uint64_t v0;

  sub_245423688(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_24542A468()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_24542A494(void *a1)
{
  uint64_t v1;

  sub_245423700(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_24542A49C()
{
  return swift_deallocObject();
}

uint64_t sub_24542A4AC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_24542A4D4(uint64_t a1)
{
  uint64_t v1;

  sub_2454239EC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), "Connection interrupted", (uint64_t (*)(void))sub_24542A5A4);
}

uint64_t objectdestroy_46Tm()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void sub_24542A52C(uint64_t a1)
{
  uint64_t v1;

  sub_2454239EC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), "Connection invalidated", (uint64_t (*)(void))sub_24542A554);
}

void sub_24542A554()
{
  uint64_t v0;

  sub_245423B6C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_24542A5A4()
{
  sub_24542A554();
}

uint64_t ReplicatorRemoteDeviceProviding.device(relationshipID:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v6 = type metadata accessor for ReplicatorDevice(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = v10 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v13 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      sub_2453BA364(v12, (uint64_t)v9, type metadata accessor for ReplicatorDevice);
      if ((sub_245443AF0() & 1) != 0)
        break;
      sub_2453BA3A8((uint64_t)v9, type metadata accessor for ReplicatorDevice);
      v12 += v13;
      if (!--v11)
        goto LABEL_5;
    }
    sub_24541FC6C((uint64_t)v9, a3);
    v14 = 0;
  }
  else
  {
LABEL_5:
    v14 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, v14, 1, v6);
  return swift_bridgeObjectRelease();
}

uint64_t ReplicatorRemoteDeviceProviding.device(id:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v6 = type metadata accessor for ReplicatorDevice(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = v10 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v13 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      sub_2453BA364(v12, (uint64_t)v9, type metadata accessor for ReplicatorDevice);
      if ((sub_245443AF0() & 1) != 0)
        break;
      sub_2453BA3A8((uint64_t)v9, type metadata accessor for ReplicatorDevice);
      v12 += v13;
      if (!--v11)
        goto LABEL_5;
    }
    sub_24541FC6C((uint64_t)v9, a3);
    v14 = 0;
  }
  else
  {
LABEL_5:
    v14 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, v14, 1, v6);
  return swift_bridgeObjectRelease();
}

uint64_t ReplicatorRemoteDeviceProviding.pairedDevices()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ReplicatorDevice(0);
  v27 = *(_QWORD *)(v7 - 8);
  v28 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v26 - v11;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  v14 = result;
  v15 = MEMORY[0x24BEE4AF8];
  v29 = MEMORY[0x24BEE4AF8];
  v26 = *(_QWORD *)(result + 16);
  if (!v26)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v15;
  }
  v16 = 0;
  while (v16 < *(_QWORD *)(v14 + 16))
  {
    v17 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    v18 = *(_QWORD *)(v27 + 72);
    sub_2453BA364(v14 + v17 + v18 * v16, (uint64_t)v12, type metadata accessor for ReplicatorDevice);
    sub_2453BA364((uint64_t)&v12[*(int *)(v28 + 48)], (uint64_t)v6, type metadata accessor for ReplicatorDevice.RelationshipState);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
    v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v6, 4, v19);
    if ((v20 - 2) < 2)
      goto LABEL_9;
    if (!v20)
    {
      v21 = sub_245443B14();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v6, v21);
      v15 = v29;
LABEL_9:
      v22 = (uint64_t)v10;
      sub_24541FC6C((uint64_t)v12, (uint64_t)v10);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_2453F1BF4(0, *(_QWORD *)(v15 + 16) + 1, 1);
      v15 = v29;
      v24 = *(_QWORD *)(v29 + 16);
      v23 = *(_QWORD *)(v29 + 24);
      if (v24 >= v23 >> 1)
      {
        sub_2453F1BF4(v23 > 1, v24 + 1, 1);
        v15 = v29;
      }
      *(_QWORD *)(v15 + 16) = v24 + 1;
      v25 = v15 + v17 + v24 * v18;
      v10 = (char *)v22;
      result = sub_24541FC6C(v22, v25);
      goto LABEL_4;
    }
    sub_2453BA3A8((uint64_t)v6, type metadata accessor for ReplicatorDevice.RelationshipState);
    result = sub_2453BA3A8((uint64_t)v12, type metadata accessor for ReplicatorDevice);
LABEL_4:
    if (v26 == ++v16)
    {
      v15 = v29;
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t ReplicatorRemoteDeviceProviding.unpairedDevices()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;

  v4 = type metadata accessor for ReplicatorDevice.RelationshipState(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ReplicatorDevice(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v27 - v12;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  v15 = result;
  v16 = MEMORY[0x24BEE4AF8];
  v30 = MEMORY[0x24BEE4AF8];
  v28 = *(_QWORD *)(result + 16);
  if (!v28)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v16;
  }
  v29 = v11;
  v17 = 0;
  v27 = v7;
  v18 = v28;
  while (v17 < *(_QWORD *)(v15 + 16))
  {
    v20 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v21 = *(_QWORD *)(v8 + 72);
    sub_2453BA364(v15 + v20 + v21 * v17, (uint64_t)v13, type metadata accessor for ReplicatorDevice);
    sub_2453BA364((uint64_t)&v13[*(int *)(v7 + 48)], (uint64_t)v6, type metadata accessor for ReplicatorDevice.RelationshipState);
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_257464870);
    v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v6, 4, v22);
    if ((v23 - 2) >= 2)
    {
      if (v23)
      {
        sub_2453BA3A8((uint64_t)v6, type metadata accessor for ReplicatorDevice.RelationshipState);
        sub_24541FC6C((uint64_t)v13, (uint64_t)v29);
        v24 = v30;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_2453F1BF4(0, *(_QWORD *)(v24 + 16) + 1, 1);
          v24 = v30;
        }
        v26 = *(_QWORD *)(v24 + 16);
        v25 = *(_QWORD *)(v24 + 24);
        if (v26 >= v25 >> 1)
        {
          sub_2453F1BF4(v25 > 1, v26 + 1, 1);
          v24 = v30;
        }
        *(_QWORD *)(v24 + 16) = v26 + 1;
        result = sub_24541FC6C((uint64_t)v29, v24 + v20 + v26 * v21);
        v7 = v27;
        v18 = v28;
        goto LABEL_5;
      }
      v19 = sub_245443B14();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v6, v19);
    }
    result = sub_2453BA3A8((uint64_t)v13, type metadata accessor for ReplicatorDevice);
LABEL_5:
    if (v18 == ++v17)
    {
      v16 = v30;
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t dispatch thunk of ReplicatorLocalDeviceProviding.localDeviceID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ReplicatorLocalDeviceProviding.replicatorProtocolVersion.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ReplicatorRemoteDeviceProviding.devices.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ReplicatorRemoteDeviceUpdateProviding.pairedDeviceUpdates.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

void sub_24542AD24(char a1)
{
  sub_245444414();
  __asm { BR              X10 }
}

uint64_t sub_24542AD68()
{
  sub_245443DF0();
  swift_bridgeObjectRelease();
  return sub_245444444();
}

void sub_24542AE14(char a1)
{
  sub_245444414();
  __asm { BR              X10 }
}

uint64_t sub_24542AE6C()
{
  sub_245443DF0();
  swift_bridgeObjectRelease();
  return sub_245444444();
}

void sub_24542AEF8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_24542AF3C()
{
  sub_245443DF0();
  return swift_bridgeObjectRelease();
}

void sub_24542AFAC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_24542AFE0()
{
  sub_245443DF0();
  return swift_bridgeObjectRelease();
}

void sub_24542B078(uint64_t a1, char a2)
{
  sub_245444414();
  __asm { BR              X10 }
}

uint64_t sub_24542B0B8()
{
  sub_245443DF0();
  swift_bridgeObjectRelease();
  return sub_245444444();
}

void sub_24542B164(uint64_t a1, char a2)
{
  sub_245444414();
  __asm { BR              X10 }
}

uint64_t sub_24542B1B8()
{
  sub_245443DF0();
  swift_bridgeObjectRelease();
  return sub_245444444();
}

void sub_24542B244(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_24542B290(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_24542B308 + 4 * byte_24544B30F[a2]))(a3 + 7);
}

uint64_t sub_24542B308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  if (a1 == a3 + 7 && v3 == 0x800000024544D820)
    v4 = 1;
  else
    v4 = sub_245444390();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

void sub_24542B3C4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_24542B3FC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_24542B4A0 + 4 * byte_24544B318[a2]))(0xD000000000000011);
}

uint64_t sub_24542B4A0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000011 && v1 == 0x800000024544D7A0)
    v2 = 1;
  else
    v2 = sub_245444390();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_24542B588(uint64_t a1)
{
  return sub_24542B6E0(a1, qword_25440EBF8);
}

uint64_t static LogHelper.replicatorClient.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24542B608(&qword_25440EC10, (uint64_t)qword_25440EBF8, a1);
}

uint64_t sub_24542B5C8(uint64_t a1)
{
  return sub_24542B6E0(a1, qword_257463BE0);
}

uint64_t static LogHelper.replicatorControlClient.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24542B608(&qword_257463BF8, (uint64_t)qword_257463BE0, a1);
}

uint64_t sub_24542B608@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_245443C04();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t sub_24542B670(uint64_t a1)
{
  return sub_24542B6E0(a1, qword_257463C38);
}

uint64_t static LogHelper.stateCapture.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24542B608(&qword_257463C50, (uint64_t)qword_257463C38, a1);
}

uint64_t sub_24542B6B4(uint64_t a1)
{
  return sub_24542B6E0(a1, qword_2574642F0);
}

uint64_t sub_24542B6E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_245443C04();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_245443BF8();
}

uint64_t static LogHelper.migrationServer.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24542B608(&qword_257463C78, (uint64_t)qword_2574642F0, a1);
}

uint64_t LogHelper.deinit()
{
  uint64_t v0;

  swift_defaultActor_destroy();
  return v0;
}

uint64_t LogHelper.__deallocating_deinit()
{
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t LogHelper.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_24542B7B4()
{
  uint64_t v0;

  return v0;
}

ReplicatorServices::LoggingCategory_optional __swiftcall LoggingCategory.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  ReplicatorServices::LoggingCategory_optional result;
  char v5;

  v2 = v1;
  v3 = sub_245444258();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t LoggingCategory.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_24542B84C + 4 * byte_24544B31D[*v0]))(0xD000000000000010, 0x800000024544D800);
}

uint64_t sub_24542B84C(uint64_t a1)
{
  return a1 + 7;
}

uint64_t sub_24542B864()
{
  return 0x7061436574617473;
}

uint64_t sub_24542B884()
{
  return 0x6F6974617267696DLL;
}

void sub_24542B8A8(char *a1)
{
  sub_24542B244(*a1);
}

unint64_t sub_24542B8B8()
{
  unint64_t result;

  result = qword_2574655D8;
  if (!qword_2574655D8)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for LoggingCategory, &type metadata for LoggingCategory);
    atomic_store(result, (unint64_t *)&qword_2574655D8);
  }
  return result;
}

void sub_24542B8FC()
{
  char *v0;

  sub_24542AE14(*v0);
}

void sub_24542B904(uint64_t a1)
{
  char *v1;

  sub_24542AEF8(a1, *v1);
}

void sub_24542B90C(uint64_t a1)
{
  char *v1;

  sub_24542B164(a1, *v1);
}

ReplicatorServices::LoggingCategory_optional sub_24542B914(Swift::String *a1)
{
  return LoggingCategory.init(rawValue:)(*a1);
}

uint64_t sub_24542B920()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_24542B954 + 4 * byte_24544B321[*v0]))();
}

void sub_24542B954(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1 + 7;
  a1[1] = 0x800000024544D820;
}

void sub_24542B970(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "stateCapture");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_24542B994(_QWORD *a1@<X8>)
{
  *a1 = 0x6F6974617267696DLL;
  a1[1] = 0xEF7265767265536ELL;
}

uint64_t type metadata accessor for LogHelper()
{
  return objc_opt_self();
}

uint64_t method lookup function for LogHelper()
{
  return swift_lookUpClassMethod();
}

uint64_t storeEnumTagSinglePayload for LoggingCategory(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_24542BA34 + 4 * byte_24544B32A[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_24542BA68 + 4 * byte_24544B325[v4]))();
}

uint64_t sub_24542BA68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24542BA70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24542BA78);
  return result;
}

uint64_t sub_24542BA84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24542BA8CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_24542BA90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24542BA98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LoggingCategory()
{
  return &type metadata for LoggingCategory;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t static ReplicatorRecordDestination.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *a2;
  if (*a1)
  {
    if (v2)
    {
      swift_bridgeObjectRetain();
      v3 = swift_bridgeObjectRetain();
      v4 = sub_24542BB74(v3, v2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v4 & 1;
    }
    return 0;
  }
  if (v2)
    return 0;
  swift_bridgeObjectRelease_n();
  return 1;
}

uint64_t sub_24542BB74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  BOOL v20;
  uint64_t v22;
  uint64_t v23;

  v4 = sub_245443B14();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v22 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v17 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v22 = *(_QWORD *)(v8 + 72);
      v23 = v8;
      v13 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      v14 = v11 - 1;
      do
      {
        v15 = a1;
        v13(v10, a1 + v12, v4);
        v16 = a2;
        v13(v7, a2 + v12, v4);
        sub_2453F8E70(&qword_25440E1B0, MEMORY[0x24BDCEA98]);
        v17 = sub_245443D6C();
        v18 = *(void (**)(char *, uint64_t))(v23 + 8);
        v18(v7, v4);
        v18(v10, v4);
        v20 = v14-- != 0;
        if ((v17 & 1) == 0)
          break;
        v12 += v22;
        a2 = v16;
        a1 = v15;
      }
      while (v20);
    }
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t ReplicatorRecordDestination.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (!*v1)
    return sub_245444420();
  sub_245444420();
  return sub_245412A4C(a1, v3);
}

uint64_t sub_24542BD4C()
{
  sub_24542C76C();
  return sub_245444468();
}

uint64_t sub_24542BD74()
{
  sub_24542C76C();
  return sub_245444474();
}

uint64_t sub_24542BD9C()
{
  _BYTE *v0;

  if (*v0)
    return 7105633;
  else
    return 0x697463656C6C6F63;
}

uint64_t sub_24542BDD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24542CDFC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24542BDF8()
{
  sub_24542C728();
  return sub_245444468();
}

uint64_t sub_24542BE20()
{
  sub_24542C728();
  return sub_245444474();
}

uint64_t sub_24542BE48()
{
  return 12383;
}

uint64_t sub_24542BE54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_245444390();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_24542BED0()
{
  sub_24542C7B0();
  return sub_245444468();
}

uint64_t sub_24542BEF8()
{
  sub_24542C7B0();
  return sub_245444474();
}

uint64_t ReplicatorRecordDestination.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E228);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E230);
  v18 = *(_QWORD *)(v6 - 8);
  v19 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E220);
  v20 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24542C728();
  sub_24544445C();
  if (v12)
  {
    v22 = 0;
    sub_24542C7B0();
    sub_245444300();
    v21 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257464808);
    sub_24542C7F4(&qword_257464A88, &qword_2574639F0, MEMORY[0x24BDCEA70], MEMORY[0x24BEE12A0]);
    v13 = v19;
    sub_245444360();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v13);
  }
  else
  {
    v23 = 1;
    sub_24542C76C();
    sub_245444300();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v11, v9);
}

uint64_t ReplicatorRecordDestination.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_245444414();
  sub_245444420();
  if (v1)
    sub_245412A4C((uint64_t)v3, v1);
  return sub_245444444();
}

uint64_t ReplicatorRecordDestination.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;

  v28 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_257463B50);
  v26 = *(_QWORD *)(v3 - 8);
  v27 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v29 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257463B58);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_257463B48);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v30 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  sub_24542C728();
  v14 = v31;
  sub_245444450();
  if (v14)
    goto LABEL_9;
  v15 = v29;
  v25 = v6;
  v16 = v5;
  v31 = v10;
  v17 = sub_2454442F4();
  v18 = v9;
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v20 = sub_245444168();
    swift_allocError();
    v22 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2574651A8);
    *v22 = &type metadata for ReplicatorRecordDestination;
    sub_245444270();
    sub_24544415C();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x24BEE26D0], v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v18);
LABEL_9:
    v23 = (uint64_t)v30;
    return __swift_destroy_boxed_opaque_existential_1(v23);
  }
  if ((*(_BYTE *)(v17 + 32) & 1) != 0)
  {
    v34 = 1;
    sub_24542C76C();
    sub_245444264();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v15, v27);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v9);
    v19 = 0;
  }
  else
  {
    v33 = 0;
    sub_24542C7B0();
    sub_245444264();
    __swift_instantiateConcreteTypeFromMangledName(&qword_257464808);
    sub_24542C7F4(&qword_257464A98, &qword_25440E1B8, MEMORY[0x24BDCEAA8], MEMORY[0x24BEE12D0]);
    sub_2454442DC();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v16);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v9);
    v19 = v32;
  }
  v23 = (uint64_t)v30;
  *v28 = v19;
  return __swift_destroy_boxed_opaque_existential_1(v23);
}

uint64_t sub_24542C568@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ReplicatorRecordDestination.init(from:)(a1, a2);
}

uint64_t sub_24542C57C(_QWORD *a1)
{
  return ReplicatorRecordDestination.encode(to:)(a1);
}

uint64_t sub_24542C590(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *a2;
  if (*a1)
  {
    if (v2)
    {
      swift_bridgeObjectRetain();
      v3 = swift_bridgeObjectRetain();
      v4 = sub_24542BB74(v3, v2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v4 & 1;
    }
    return 0;
  }
  if (v2)
    return 0;
  swift_bridgeObjectRelease_n();
  return 1;
}

uint64_t sub_24542C610()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_245444414();
  sub_245444420();
  if (v1)
    sub_245412A4C((uint64_t)v3, v1);
  return sub_245444444();
}

uint64_t sub_24542C670(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (!*v1)
    return sub_245444420();
  sub_245444420();
  return sub_245412A4C(a1, v3);
}

uint64_t sub_24542C6CC()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_245444414();
  sub_245444420();
  if (v1)
    sub_245412A4C((uint64_t)v3, v1);
  return sub_245444444();
}

unint64_t sub_24542C728()
{
  unint64_t result;

  result = qword_25440E478;
  if (!qword_25440E478)
  {
    result = MEMORY[0x249534380](&unk_24544B7C4, &type metadata for ReplicatorRecordDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E478);
  }
  return result;
}

unint64_t sub_24542C76C()
{
  unint64_t result;

  result = qword_25440E490;
  if (!qword_25440E490)
  {
    result = MEMORY[0x249534380](&unk_24544B774, &type metadata for ReplicatorRecordDestination.AllCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E490);
  }
  return result;
}

unint64_t sub_24542C7B0()
{
  unint64_t result;

  result = qword_2574655E0;
  if (!qword_2574655E0)
  {
    result = MEMORY[0x249534380](&unk_24544B724, &type metadata for ReplicatorRecordDestination.CollectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574655E0);
  }
  return result;
}

uint64_t sub_24542C7F4(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_257464808);
    v10 = sub_2453F8E70(a2, a3);
    result = MEMORY[0x249534380](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24542C874()
{
  unint64_t result;

  result = qword_2574655E8;
  if (!qword_2574655E8)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorRecordDestination, &type metadata for ReplicatorRecordDestination);
    atomic_store(result, (unint64_t *)&qword_2574655E8);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ReplicatorRecordDestination(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ReplicatorRecordDestination(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *assignWithTake for ReplicatorRecordDestination(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorRecordDestination(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ReplicatorRecordDestination(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t sub_24542C9FC(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_24542CA14(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorRecordDestination()
{
  return &type metadata for ReplicatorRecordDestination;
}

uint64_t storeEnumTagSinglePayload for ReplicatorRecordDestination.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24542CA90 + 4 * byte_24544B445[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24542CAC4 + 4 * byte_24544B440[v4]))();
}

uint64_t sub_24542CAC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24542CACC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24542CAD4);
  return result;
}

uint64_t sub_24542CAE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24542CAE8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24542CAEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24542CAF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorRecordDestination.CodingKeys()
{
  return &type metadata for ReplicatorRecordDestination.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ReplicatorRecordDestination.CollectionCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_24542CB50 + 4 * byte_24544B44A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24542CB70 + 4 * byte_24544B44F[v4]))();
}

_BYTE *sub_24542CB50(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24542CB70(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24542CB78(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24542CB80(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24542CB88(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24542CB90(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorRecordDestination.CollectionCodingKeys()
{
  return &type metadata for ReplicatorRecordDestination.CollectionCodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorRecordDestination.AllCodingKeys()
{
  return &type metadata for ReplicatorRecordDestination.AllCodingKeys;
}

unint64_t sub_24542CBC0()
{
  unint64_t result;

  result = qword_2574655F0;
  if (!qword_2574655F0)
  {
    result = MEMORY[0x249534380](&unk_24544B644, &type metadata for ReplicatorRecordDestination.CollectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574655F0);
  }
  return result;
}

unint64_t sub_24542CC08()
{
  unint64_t result;

  result = qword_2574655F8;
  if (!qword_2574655F8)
  {
    result = MEMORY[0x249534380](&unk_24544B6FC, &type metadata for ReplicatorRecordDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574655F8);
  }
  return result;
}

unint64_t sub_24542CC50()
{
  unint64_t result;

  result = qword_25440E4B0;
  if (!qword_25440E4B0)
  {
    result = MEMORY[0x249534380](&unk_24544B5B4, &type metadata for ReplicatorRecordDestination.CollectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E4B0);
  }
  return result;
}

unint64_t sub_24542CC98()
{
  unint64_t result;

  result = qword_25440E4A8;
  if (!qword_25440E4A8)
  {
    result = MEMORY[0x249534380](&unk_24544B5DC, &type metadata for ReplicatorRecordDestination.CollectionCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E4A8);
  }
  return result;
}

unint64_t sub_24542CCE0()
{
  unint64_t result;

  result = qword_25440E4A0;
  if (!qword_25440E4A0)
  {
    result = MEMORY[0x249534380](&unk_24544B564, &type metadata for ReplicatorRecordDestination.AllCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E4A0);
  }
  return result;
}

unint64_t sub_24542CD28()
{
  unint64_t result;

  result = qword_25440E498;
  if (!qword_25440E498)
  {
    result = MEMORY[0x249534380](&unk_24544B58C, &type metadata for ReplicatorRecordDestination.AllCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E498);
  }
  return result;
}

unint64_t sub_24542CD70()
{
  unint64_t result;

  result = qword_25440E488;
  if (!qword_25440E488)
  {
    result = MEMORY[0x249534380](&unk_24544B66C, &type metadata for ReplicatorRecordDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E488);
  }
  return result;
}

unint64_t sub_24542CDB8()
{
  unint64_t result;

  result = qword_25440E480;
  if (!qword_25440E480)
  {
    result = MEMORY[0x249534380](&unk_24544B694, &type metadata for ReplicatorRecordDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E480);
  }
  return result;
}

uint64_t sub_24542CDFC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x697463656C6C6F63 && a2 == 0xEA00000000006E6FLL;
  if (v2 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7105633 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_245444390();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t ReplicatorMessageType.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReplicatorMessageType.identifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ReplicatorMessageType.identifier.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorMessageType.clientIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReplicatorMessageType.clientIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*ReplicatorMessageType.clientIdentifier.modify())()
{
  return nullsub_1;
}

__n128 ReplicatorMessageType.protocolVersion.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[2];
  *a1 = result;
  return result;
}

__n128 ReplicatorMessageType.protocolVersion.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*ReplicatorMessageType.protocolVersion.modify())()
{
  return nullsub_1;
}

__n128 ReplicatorMessageType.init(identifier:clientIdentifier:protocolVersion:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, __n128 *a5@<X4>, __n128 *a6@<X8>)
{
  __n128 result;

  a6->n128_u64[0] = a1;
  a6->n128_u64[1] = a2;
  a6[1].n128_u64[0] = a3;
  a6[1].n128_u64[1] = a4;
  result = *a5;
  a6[2] = *a5;
  return result;
}

uint64_t ReplicatorMessageType.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  sub_245444438();
  return sub_245444438();
}

uint64_t sub_24542D0A0()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000010;
  if (*v0 != 1)
    v1 = 0x6C6F636F746F7270;
  if (*v0)
    return v1;
  else
    return 0x696669746E656469;
}

uint64_t sub_24542D110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24542DCAC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24542D134()
{
  sub_24542D8B8();
  return sub_245444468();
}

uint64_t sub_24542D15C()
{
  sub_24542D8B8();
  return sub_245444474();
}

uint64_t ReplicatorMessageType.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465600);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v16 = v1[3];
  v17 = v7;
  v8 = v1[4];
  v14 = v1[5];
  v15 = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24542D8B8();
  sub_24544445C();
  LOBYTE(v19) = 0;
  v9 = v18;
  sub_245444348();
  if (!v9)
  {
    v11 = v14;
    v10 = v15;
    LOBYTE(v19) = 1;
    sub_245444348();
    v19 = v10;
    v20 = v11;
    v21 = 2;
    sub_2453BC5D8();
    sub_245444360();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ReplicatorMessageType.hashValue.getter()
{
  sub_245444414();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  sub_245444438();
  sub_245444438();
  return sub_245444444();
}

uint64_t ReplicatorMessageType.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  char v23;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465610);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24542D8B8();
  sub_245444450();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v22) = 0;
  v9 = sub_2454442C4();
  v11 = v10;
  v21 = v9;
  LOBYTE(v22) = 1;
  swift_bridgeObjectRetain();
  v12 = sub_2454442C4();
  v14 = v13;
  v19 = v12;
  v23 = 2;
  sub_2453BC50C();
  swift_bridgeObjectRetain();
  v20 = v14;
  sub_2454442DC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v22;
  v16 = v20;
  *(_QWORD *)a2 = v21;
  *(_QWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 16) = v19;
  *(_QWORD *)(a2 + 24) = v16;
  *(_OWORD *)(a2 + 32) = v15;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24542D5E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorMessageType.init(from:)(a1, a2);
}

uint64_t sub_24542D5F8(_QWORD *a1)
{
  return ReplicatorMessageType.encode(to:)(a1);
}

uint64_t sub_24542D610()
{
  sub_245444414();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  sub_245444438();
  sub_245444438();
  return sub_245444444();
}

uint64_t sub_24542D6C0()
{
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  sub_245444438();
  return sub_245444438();
}

uint64_t sub_24542D754()
{
  sub_245444414();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  sub_245444438();
  sub_245444438();
  return sub_245444444();
}

BOOL _s18ReplicatorServices0A11MessageTypeV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BOOL8 result;
  char v12;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  if (*a1 == *a2 && a1[1] == a2[1] || (v10 = sub_245444390(), result = 0, (v10 & 1) != 0))
  {
    if (v2 == v6 && v3 == v7)
      return v4 == v8 && v5 == v9;
    v12 = sub_245444390();
    result = 0;
    if ((v12 & 1) != 0)
      return v4 == v8 && v5 == v9;
  }
  return result;
}

unint64_t sub_24542D8B8()
{
  unint64_t result;

  result = qword_257465608;
  if (!qword_257465608)
  {
    result = MEMORY[0x249534380](&unk_24544B9DC, &type metadata for ReplicatorMessageType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465608);
  }
  return result;
}

unint64_t sub_24542D900()
{
  unint64_t result;

  result = qword_257465618;
  if (!qword_257465618)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorMessageType, &type metadata for ReplicatorMessageType);
    atomic_store(result, (unint64_t *)&qword_257465618);
  }
  return result;
}

uint64_t initializeWithCopy for ReplicatorZone(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ReplicatorZone(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ReplicatorZone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorZone(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplicatorZone(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorMessageType()
{
  return &type metadata for ReplicatorMessageType;
}

uint64_t storeEnumTagSinglePayload for ReplicatorMessageType.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24542DB54 + 4 * byte_24544B825[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24542DB88 + 4 * byte_24544B820[v4]))();
}

uint64_t sub_24542DB88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24542DB90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24542DB98);
  return result;
}

uint64_t sub_24542DBA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24542DBACLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24542DBB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24542DBB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorMessageType.CodingKeys()
{
  return &type metadata for ReplicatorMessageType.CodingKeys;
}

unint64_t sub_24542DBD8()
{
  unint64_t result;

  result = qword_257465620;
  if (!qword_257465620)
  {
    result = MEMORY[0x249534380](&unk_24544B9B4, &type metadata for ReplicatorMessageType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465620);
  }
  return result;
}

unint64_t sub_24542DC20()
{
  unint64_t result;

  result = qword_257465628;
  if (!qword_257465628)
  {
    result = MEMORY[0x249534380](&unk_24544B924, &type metadata for ReplicatorMessageType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465628);
  }
  return result;
}

unint64_t sub_24542DC68()
{
  unint64_t result;

  result = qword_257465630;
  if (!qword_257465630)
  {
    result = MEMORY[0x249534380](&unk_24544B94C, &type metadata for ReplicatorMessageType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465630);
  }
  return result;
}

uint64_t sub_24542DCAC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000024544F290 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C6F636F746F7270 && a2 == 0xEF6E6F6973726556)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_245444390();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t dispatch thunk of ReplicatorRecordVersionStoring.recordVersions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ReplicatorServices::ZonePublicationMethod_optional __swiftcall ZonePublicationMethod.init(rawValue:)(Swift::Int64 rawValue)
{
  char *v1;
  char v2;

  if (rawValue == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!rawValue)
    v2 = 0;
  *v1 = v2;
  return (ReplicatorServices::ZonePublicationMethod_optional)rawValue;
}

uint64_t ZonePublicationMethod.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t sub_24542DE58()
{
  unint64_t result;

  result = qword_257465638;
  if (!qword_257465638)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ZonePublicationMethod, &type metadata for ZonePublicationMethod);
    atomic_store(result, (unint64_t *)&qword_257465638);
  }
  return result;
}

uint64_t sub_24542DE9C()
{
  sub_24542E010();
  return sub_245443E74();
}

uint64_t sub_24542DEF8()
{
  sub_24542E010();
  return sub_245443E5C();
}

uint64_t storeEnumTagSinglePayload for ZonePublicationMethod(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24542DF90 + 4 * byte_24544BA55[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24542DFC4 + 4 * byte_24544BA50[v4]))();
}

uint64_t sub_24542DFC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24542DFCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24542DFD4);
  return result;
}

uint64_t sub_24542DFE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24542DFE8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24542DFEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24542DFF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ZonePublicationMethod()
{
  return &type metadata for ZonePublicationMethod;
}

unint64_t sub_24542E010()
{
  unint64_t result;

  result = qword_25440E9D0;
  if (!qword_25440E9D0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ZonePublicationMethod, &type metadata for ZonePublicationMethod);
    atomic_store(result, (unint64_t *)&qword_25440E9D0);
  }
  return result;
}

uint64_t ReplicatorRecord.init(id:version:values:expiration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v10 = (int *)type metadata accessor for ReplicatorRecord(0);
  v11 = a5 + v10[7];
  v12 = sub_245443AC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  sub_2453D062C(a1, a5, type metadata accessor for ReplicatorRecord.ID);
  v13 = a5 + v10[5];
  v14 = sub_245443B14();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, a2, v14);
  *(_QWORD *)(a5 + v10[6]) = a3;
  return sub_2453F7820(a4, v11, (uint64_t *)&unk_25440E420);
}

uint64_t type metadata accessor for ReplicatorRecord(uint64_t a1)
{
  return sub_2453FB160(a1, (uint64_t *)&unk_25440E1D8);
}

uint64_t type metadata accessor for ReplicatorRecord.ID(uint64_t a1)
{
  return sub_2453FB160(a1, (uint64_t *)&unk_25440E960);
}

uint64_t ReplicatorRecord.size.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v25;
  _QWORD *v26;
  int64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;

  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E260);
  v1 = MEMORY[0x24BDAC7A8](v29);
  v28 = (uint64_t *)((char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = MEMORY[0x24BDAC7A8](v1);
  v5 = (uint64_t *)((char *)&v25 - v4);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (uint64_t *)((char *)&v25 - v6);
  v8 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ReplicatorRecord(0) + 24));
  v9 = *(_QWORD *)(v8 + 64);
  v26 = (_QWORD *)(v8 + 64);
  v10 = 1 << *(_BYTE *)(v8 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v27 = (unint64_t)(v10 + 63) >> 6;
  v30 = v8;
  swift_bridgeObjectRetain_n();
  if (v12)
  {
    v13 = __clz(__rbit64(v12));
    goto LABEL_22;
  }
  if (v27 > 1)
  {
    v14 = v26[1];
    v15 = 1;
    if (v14)
      goto LABEL_21;
    v15 = 2;
    if (v27 <= 2)
      goto LABEL_23;
    v14 = v26[2];
    if (v14)
      goto LABEL_21;
    v15 = 3;
    if (v27 <= 3)
      goto LABEL_23;
    v14 = v26[3];
    if (v14)
      goto LABEL_21;
    v15 = 4;
    if (v27 <= 4)
      goto LABEL_23;
    v14 = v26[4];
    if (v14)
      goto LABEL_21;
    v15 = 5;
    if (v27 <= 5)
      goto LABEL_23;
    v14 = v26[5];
    if (v14)
    {
LABEL_21:
      v13 = __clz(__rbit64(v14)) + (v15 << 6);
LABEL_22:
      v17 = *(_QWORD *)(v30 + 56);
      v18 = *(_QWORD *)(*(_QWORD *)(v30 + 48) + 8 * v13);
      v19 = v17 + *(_QWORD *)(*(_QWORD *)(type metadata accessor for ReplicatorRecord.Value(0) - 8) + 72) * v13;
      v20 = v29;
      sub_2453BA364(v19, (uint64_t)v7 + *(int *)(v29 + 48), type metadata accessor for ReplicatorRecord.Value);
      *v7 = v18;
      sub_24542E4E8((uint64_t)v7, (uint64_t)v5);
      v21 = *(int *)(v20 + 48);
      v22 = (_QWORD *)((char *)v28 + v21);
      *v28 = *v5;
      sub_2453BA364((uint64_t)v5 + v21, (uint64_t)v22, type metadata accessor for ReplicatorRecord.Value);
      v23 = v22[1];
      sub_2453CFFAC(*v22, v23);
      sub_2453BA3A8((uint64_t)v22, type metadata accessor for ReplicatorRecord.Value);
      __asm { BR              X8 }
    }
    v16 = 6;
    if (v27 > 6)
    {
      v14 = v26[6];
      if (v14)
      {
        v15 = 6;
        goto LABEL_21;
      }
      while (1)
      {
        v15 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
          __break(1u);
          JUMPOUT(0x24542E4C4);
        }
        if (v15 >= v27)
          break;
        v14 = v26[v15];
        ++v16;
        if (v14)
          goto LABEL_21;
      }
    }
  }
LABEL_23:
  swift_release();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t type metadata accessor for ReplicatorRecord.Value(uint64_t a1)
{
  return sub_2453FB160(a1, (uint64_t *)&unk_25440E1C8);
}

uint64_t sub_24542E4E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E260);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ReplicatorRecord.Value.init(data:url:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  v8 = (uint64_t)a4 + *(int *)(type metadata accessor for ReplicatorRecord.Value(0) + 20);
  v9 = sub_245443A24();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *a4 = a1;
  a4[1] = a2;
  return sub_2453F7820(a3, v8, &qword_25440E1A0);
}

uint64_t ReplicatorRecord.init(id:version:values:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);

  v8 = (int *)type metadata accessor for ReplicatorRecord(0);
  v9 = a4 + v8[7];
  v10 = sub_245443AC0();
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  v14(v9, 1, 1, v10);
  sub_2453D062C(a1, a4, type metadata accessor for ReplicatorRecord.ID);
  v11 = a4 + v8[5];
  v12 = sub_245443B14();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, a2, v12);
  *(_QWORD *)(a4 + v8[6]) = a3;
  sub_2453D055C(v9, (uint64_t *)&unk_25440E420);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v14)(v9, 1, 1, v10);
}

uint64_t ReplicatorRecord.ID.init(id:zone:clientID:ownership:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t *v23;
  _QWORD v24[4];

  v24[0] = sub_245443B14();
  v16 = *(_QWORD *)(v24[0] - 8);
  MEMORY[0x24BDAC7A8](v24[0]);
  v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  v19 = type metadata accessor for ReplicatorRecord.ID(0);
  sub_2453BA364(a7, (uint64_t)a8 + *(int *)(v19 + 28), type metadata accessor for ReplicatorRecord.ID.Ownership);
  swift_bridgeObjectRetain();
  if (sub_245443DFC() >= 51)
  {
    v24[2] = a1;
    v24[3] = a2;
    sub_245443B74();
    a1 = sub_245443AD8();
    v21 = v20;
    (*(void (**)(char *, _QWORD))(v16 + 8))(v18, v24[0]);
    swift_bridgeObjectRelease();
    a2 = v21;
  }
  result = sub_2453BA3A8(a7, type metadata accessor for ReplicatorRecord.ID.Ownership);
  v23 = (uint64_t *)((char *)a8 + *(int *)(v19 + 32));
  *v23 = a1;
  v23[1] = a2;
  return result;
}

uint64_t type metadata accessor for ReplicatorRecord.ID.Ownership(uint64_t a1)
{
  return sub_2453FB160(a1, (uint64_t *)&unk_25440E948);
}

uint64_t ReplicatorRecord.ID.Ownership.isLocallyOwned.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v1 = v0;
  v2 = sub_245443B14();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E540);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v20 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))((char *)&v20 - v13, 1, 1, v2);
  v15 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_2453BA364((uint64_t)v14, (uint64_t)v8, type metadata accessor for ReplicatorRecord.ID.Ownership);
  sub_2453BA364(v1, v15, type metadata accessor for ReplicatorRecord.ID.Ownership);
  v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v16((uint64_t)v8, 1, v2) != 1)
  {
    sub_2453BA364((uint64_t)v8, (uint64_t)v12, type metadata accessor for ReplicatorRecord.ID.Ownership);
    if (v16(v15, 1, v2) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v5, v15, v2);
      v17 = sub_245443AF0();
      v18 = *(void (**)(char *, uint64_t))(v3 + 8);
      v18(v5, v2);
      v18(v12, v2);
      sub_2453BA3A8((uint64_t)v8, type metadata accessor for ReplicatorRecord.ID.Ownership);
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
    goto LABEL_6;
  }
  if (v16(v15, 1, v2) != 1)
  {
LABEL_6:
    sub_2453D055C((uint64_t)v8, (uint64_t *)&unk_25440E540);
    v17 = 0;
    goto LABEL_8;
  }
  sub_2453BA3A8((uint64_t)v8, type metadata accessor for ReplicatorRecord.ID.Ownership);
  v17 = 1;
LABEL_8:
  sub_2453BA3A8((uint64_t)v14, type metadata accessor for ReplicatorRecord.ID.Ownership);
  return v17 & 1;
}

uint64_t ReplicatorRecord.ID.Ownership.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v10;

  v1 = sub_245443B14();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2453BA364(v0, (uint64_t)v7, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
    return sub_245444420();
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
  sub_245444420();
  sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  sub_245443D60();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_24542EC04()
{
  _BYTE *v0;

  if (*v0)
    return 0x65746F6D6572;
  else
    return 0x6C61636F6CLL;
}

uint64_t sub_24542EC38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_2454347BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24542EC5C()
{
  sub_245431E20();
  return sub_245444468();
}

uint64_t sub_24542EC84()
{
  sub_245431E20();
  return sub_245444474();
}

uint64_t sub_24542ECAC()
{
  sub_245431EA8();
  return sub_245444468();
}

uint64_t sub_24542ECD4()
{
  sub_245431EA8();
  return sub_245444474();
}

uint64_t sub_24542ECFC()
{
  sub_245431E64();
  return sub_245444468();
}

uint64_t sub_24542ED24()
{
  sub_245431E64();
  return sub_245444474();
}

uint64_t ReplicatorRecord.ID.Ownership.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E298);
  v27 = *(_QWORD *)(v2 - 8);
  v28 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v26 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_245443B14();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v25 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E290);
  v23 = *(_QWORD *)(v7 - 8);
  v24 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E288);
  v13 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245431E20();
  sub_24544445C();
  sub_2453BA364(v29, (uint64_t)v12, type metadata accessor for ReplicatorRecord.ID.Ownership);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4) == 1)
  {
    v31 = 0;
    sub_245431EA8();
    v16 = v30;
    sub_245444300();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v16);
  }
  else
  {
    v29 = v13;
    v18 = v25;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v25, v12, v4);
    v32 = 1;
    sub_245431E64();
    v19 = v26;
    v20 = v30;
    sub_245444300();
    sub_2453B8BF4(&qword_2574639F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
    v21 = v28;
    sub_245444360();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v19, v21);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v18, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v15, v20);
  }
}

uint64_t ReplicatorRecord.ID.Ownership.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v1 = v0;
  v2 = sub_245443B14();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_245444414();
  sub_2453BA364(v1, (uint64_t)v8, type metadata accessor for ReplicatorRecord.ID.Ownership);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_245444420();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    sub_245444420();
    sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    sub_245443D60();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return sub_245444444();
}

uint64_t ReplicatorRecord.ID.Ownership.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char v43;
  char v44;

  v42 = a1;
  v40 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E718);
  v4 = *(_QWORD *)(v3 - 8);
  v36 = v3;
  v37 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v39 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E710);
  v34 = *(_QWORD *)(v6 - 8);
  v35 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v38 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E708);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v33 - v16;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245431E20();
  v18 = v41;
  sub_245444450();
  if (!v18)
  {
    v33 = v12;
    v19 = v38;
    v20 = v39;
    v41 = v9;
    v21 = v40;
    v22 = sub_2454442F4();
    if (*(_QWORD *)(v22 + 16) == 1)
    {
      if ((*(_BYTE *)(v22 + 32) & 1) != 0)
      {
        v38 = (char *)v22;
        v44 = 1;
        sub_245431E64();
        sub_245444264();
        v27 = sub_245443B14();
        sub_2453B8BF4(&qword_25440E1B8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
        v28 = v15;
        v29 = v27;
        v35 = (uint64_t)v28;
        v30 = v36;
        sub_2454442DC();
        (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v30);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v41 + 8))(v11, v8);
        v31 = v35;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v35, 0, 1, v29);
        sub_2453D062C(v31, (uint64_t)v17, type metadata accessor for ReplicatorRecord.ID.Ownership);
      }
      else
      {
        v43 = 0;
        sub_245431EA8();
        sub_245444264();
        (*(void (**)(char *, uint64_t))(v34 + 8))(v19, v35);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v41 + 8))(v11, v8);
        v32 = sub_245443B14();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v17, 1, 1, v32);
      }
      sub_2453D062C((uint64_t)v17, v21, type metadata accessor for ReplicatorRecord.ID.Ownership);
    }
    else
    {
      v23 = sub_245444168();
      swift_allocError();
      v25 = v24;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2574651A8);
      *v25 = v33;
      sub_245444270();
      sub_24544415C();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x24BEE26D0], v23);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v11, v8);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
}

uint64_t sub_24542F600@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorRecord.ID.Ownership.init(from:)(a1, a2);
}

uint64_t sub_24542F614(_QWORD *a1)
{
  return ReplicatorRecord.ID.Ownership.encode(to:)(a1);
}

uint64_t sub_24542F62C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v1 = sub_245443B14();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_2453BA364(v0, (uint64_t)v7, type metadata accessor for ReplicatorRecord.ID.Ownership);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
    return sub_245444420();
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v7, v1);
  sub_245444420();
  sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  sub_245443D60();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
}

uint64_t sub_24542F760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v1 = v0;
  v2 = sub_245443B14();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_245444414();
  sub_2453BA364(v1, (uint64_t)v8, type metadata accessor for ReplicatorRecord.ID.Ownership);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_245444420();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v8, v2);
    sub_245444420();
    sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    sub_245443D60();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  return sub_245444444();
}

uint64_t ReplicatorRecord.ID.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReplicatorRecord.ID.id.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ReplicatorRecord.ID.id.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorRecord.ID.zone.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReplicatorRecord.ID.zone.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*ReplicatorRecord.ID.zone.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorRecord.ID.clientID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReplicatorRecord.ID.clientID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*ReplicatorRecord.ID.clientID.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorRecord.ID.ownership.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24542FA2C(type metadata accessor for ReplicatorRecord.ID, (uint64_t)type metadata accessor for ReplicatorRecord.ID.Ownership, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2453BA364, a1);
}

uint64_t sub_24542FA2C@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;

  v8 = a1(0);
  return a3(v4 + *(int *)(v8 + 28), a4, a2);
}

uint64_t ReplicatorRecord.ID.ownership.setter(uint64_t a1)
{
  return sub_24542FA94(a1, type metadata accessor for ReplicatorRecord.ID, (uint64_t)type metadata accessor for ReplicatorRecord.ID.Ownership, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2453D0034);
}

uint64_t sub_24542FA94(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v8;

  v8 = a2(0);
  return a4(a1, v4 + *(int *)(v8 + 28), a3);
}

uint64_t (*ReplicatorRecord.ID.ownership.modify())()
{
  type metadata accessor for ReplicatorRecord.ID(0);
  return nullsub_1;
}

uint64_t ReplicatorRecord.ID.logIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ReplicatorRecord.ID(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReplicatorRecord.ID.description.getter()
{
  sub_24544412C();
  sub_245443E14();
  type metadata accessor for ReplicatorRecord.ID(0);
  swift_bridgeObjectRetain();
  sub_245443E14();
  swift_bridgeObjectRelease();
  sub_245443E14();
  swift_bridgeObjectRetain();
  sub_245443E14();
  swift_bridgeObjectRelease();
  sub_245443E14();
  swift_bridgeObjectRetain();
  sub_245443E14();
  swift_bridgeObjectRelease();
  sub_245443E14();
  type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  sub_2454441EC();
  return 0;
}

uint64_t ReplicatorRecord.ID.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v1 = v0;
  v2 = sub_245443B14();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  v9 = type metadata accessor for ReplicatorRecord.ID(0);
  sub_2453BA364(v1 + *(int *)(v9 + 28), (uint64_t)v8, type metadata accessor for ReplicatorRecord.ID.Ownership);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_245444420();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    sub_245444420();
    sub_2453B8BF4(&qword_25440E440, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    sub_245443D60();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  swift_bridgeObjectRetain();
  sub_245443DF0();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24542FEC0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24542FEE4 + 4 * byte_24544BB70[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_24542FEE4()
{
  return 1701736314;
}

uint64_t sub_24542FEF4()
{
  return 0x4449746E65696C63;
}

uint64_t sub_24542FF0C()
{
  return 0x69687372656E776FLL;
}

uint64_t sub_24542FF28()
{
  return 0x746E656449676F6CLL;
}

uint64_t sub_24542FF4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24543489C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24542FF70()
{
  sub_245431EEC();
  return sub_245444468();
}

uint64_t sub_24542FF98()
{
  sub_245431EEC();
  return sub_245444474();
}

uint64_t ReplicatorRecord.ID.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E280);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245431EEC();
  sub_24544445C();
  v8[15] = 0;
  sub_245444348();
  if (!v1)
  {
    v8[14] = 1;
    sub_245444348();
    v8[13] = 2;
    sub_245444348();
    type metadata accessor for ReplicatorRecord.ID(0);
    v8[12] = 3;
    type metadata accessor for ReplicatorRecord.ID.Ownership(0);
    sub_2453B8BF4(&qword_25440E270, type metadata accessor for ReplicatorRecord.ID.Ownership, (uint64_t)&protocol conformance descriptor for ReplicatorRecord.ID.Ownership);
    sub_245444360();
    v8[11] = 4;
    sub_245444348();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ReplicatorRecord.ID.hashValue.getter()
{
  sub_245444414();
  ReplicatorRecord.ID.hash(into:)();
  return sub_245444444();
}

uint64_t ReplicatorRecord.ID.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v23 = a2;
  v24 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x24BDAC7A8](v24);
  v25 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E700);
  v4 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ReplicatorRecord.ID(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245431EEC();
  v10 = (uint64_t)v27;
  sub_245444450();
  if (v10)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v27 = a1;
  v11 = v4;
  v32 = 0;
  v12 = (uint64_t)v9;
  *v9 = sub_2454442C4();
  v9[1] = v13;
  v31 = 1;
  v9[2] = sub_2454442C4();
  v9[3] = v14;
  v30 = 2;
  v9[4] = sub_2454442C4();
  v9[5] = v15;
  v29 = 3;
  sub_2453B8BF4(&qword_25440E538, type metadata accessor for ReplicatorRecord.ID.Ownership, (uint64_t)&protocol conformance descriptor for ReplicatorRecord.ID.Ownership);
  v16 = (uint64_t)v25;
  sub_2454442DC();
  sub_2453D062C(v16, v12 + *(int *)(v7 + 28), type metadata accessor for ReplicatorRecord.ID.Ownership);
  v28 = 4;
  v18 = sub_2454442C4();
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v6, v26);
  v21 = (uint64_t *)(v12 + *(int *)(v7 + 32));
  *v21 = v18;
  v21[1] = v20;
  sub_2453BA364(v12, v23, type metadata accessor for ReplicatorRecord.ID);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  return sub_2453BA3A8(v12, type metadata accessor for ReplicatorRecord.ID);
}

uint64_t sub_24543054C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorRecord.ID.init(from:)(a1, a2);
}

uint64_t sub_245430560(_QWORD *a1)
{
  return ReplicatorRecord.ID.encode(to:)(a1);
}

uint64_t sub_245430574()
{
  sub_245444414();
  ReplicatorRecord.ID.hash(into:)();
  return sub_245444444();
}

uint64_t sub_2454305B4()
{
  sub_245444414();
  ReplicatorRecord.ID.hash(into:)();
  return sub_245444444();
}

uint64_t ReplicatorRecord.Value.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_2453CFFAC(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t ReplicatorRecord.Value.data.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_2453BDCF8(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*ReplicatorRecord.Value.data.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorRecord.Value.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ReplicatorRecord.Value(0);
  return sub_2453D02E0(v1 + *(int *)(v3 + 20), a1, &qword_25440E1A0);
}

uint64_t ReplicatorRecord.Value.url.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ReplicatorRecord.Value(0);
  return sub_2453F7820(a1, v1 + *(int *)(v3 + 20), &qword_25440E1A0);
}

uint64_t (*ReplicatorRecord.Value.url.modify())()
{
  type metadata accessor for ReplicatorRecord.Value(0);
  return nullsub_1;
}

uint64_t ReplicatorRecord.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2453BA364(v1, a1, type metadata accessor for ReplicatorRecord.ID);
}

uint64_t ReplicatorRecord.id.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_2453D0034(a1, v1, type metadata accessor for ReplicatorRecord.ID);
}

uint64_t (*ReplicatorRecord.id.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorRecord.version.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReplicatorRecord(0) + 20);
  v4 = sub_245443B14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ReplicatorRecord.version.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ReplicatorRecord(0) + 20);
  v4 = sub_245443B14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ReplicatorRecord.version.modify())()
{
  type metadata accessor for ReplicatorRecord(0);
  return nullsub_1;
}

uint64_t ReplicatorRecord.values.getter()
{
  type metadata accessor for ReplicatorRecord(0);
  return swift_bridgeObjectRetain();
}

uint64_t ReplicatorRecord.expiration.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24542FA2C(type metadata accessor for ReplicatorRecord, (uint64_t)&unk_25440E420, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2453D02E0, a1);
}

uint64_t ReplicatorRecord.expiration.setter(uint64_t a1)
{
  return sub_24542FA94(a1, type metadata accessor for ReplicatorRecord, (uint64_t)&unk_25440E420, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_2453F7820);
}

uint64_t (*ReplicatorRecord.expiration.modify())()
{
  type metadata accessor for ReplicatorRecord(0);
  return nullsub_1;
}

uint64_t ReplicatorRecord.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E420);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = 0;
  v7 = 0xE000000000000000;
  sub_24544412C();
  swift_bridgeObjectRelease();
  v6 = 540697705;
  v7 = 0xE400000000000000;
  ReplicatorRecord.ID.description.getter();
  sub_245443E14();
  swift_bridgeObjectRelease();
  sub_245443E14();
  v4 = type metadata accessor for ReplicatorRecord(0);
  sub_245443B14();
  sub_2453B8BF4((unint64_t *)&qword_257464D40, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
  sub_245444384();
  sub_245443E14();
  swift_bridgeObjectRelease();
  sub_245443E14();
  sub_2453D02E0(v0 + *(int *)(v4 + 28), (uint64_t)v3, (uint64_t *)&unk_25440E420);
  sub_245443DCC();
  sub_245443E14();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t ReplicatorRecord.highestCompatibleValue(for:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16;

  v16 = *a1;
  v4 = ReplicatorRecord.highestCompatibleValueVersion(for:)((unint64_t *)&v16);
  if ((v5 & 1) == 0
    && (v6 = v4,
        v7 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for ReplicatorRecord(0) + 24)),
        *(_QWORD *)(v7 + 16))
    && (v8 = sub_2453C653C(v6), (v9 & 1) != 0))
  {
    v10 = v8;
    v11 = *(_QWORD *)(v7 + 56);
    v12 = type metadata accessor for ReplicatorRecord.Value(0);
    v13 = *(_QWORD *)(v12 - 8);
    sub_2453BA364(v11 + *(_QWORD *)(v13 + 72) * v10, a2, type metadata accessor for ReplicatorRecord.Value);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a2, 0, 1, v12);
  }
  else
  {
    v15 = type metadata accessor for ReplicatorRecord.Value(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a2, 1, 1, v15);
  }
}

uint64_t ReplicatorRecord.highestCompatibleValueVersion(for:)(unint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t result;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;

  v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E260);
  v3 = MEMORY[0x24BDAC7A8](v60);
  v59 = (uint64_t *)((char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = MEMORY[0x24BDAC7A8](v3);
  v56 = (uint64_t *)((char *)&v49 - v6);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v58 = (uint64_t *)((char *)&v49 - v8);
  MEMORY[0x24BDAC7A8](v7);
  v57 = (char *)&v49 - v9;
  v10 = *a1;
  v50 = a1[1];
  v51 = v10;
  v11 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for ReplicatorRecord(0) + 24));
  v12 = *(_QWORD *)(v11 + 16);
  v13 = MEMORY[0x24BEE4AF8];
  if (!v12)
  {
LABEL_26:
    v61 = v13;
    swift_bridgeObjectRetain();
    sub_245430F5C(&v61);
    swift_bridgeObjectRelease();
    v42 = *(_QWORD *)(v61 + 16);
    if (v42)
    {
      v43 = (unint64_t *)(v61 + 32);
      while (1)
      {
        v45 = *v43++;
        v44 = v45;
        if (v45 >= v50 && v51 >= v44)
          break;
        if (!--v42)
        {
          v44 = 0;
          break;
        }
      }
    }
    else
    {
      v44 = 0;
    }
    swift_release();
    return v44;
  }
  v61 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  sub_2453F1D8C(0, v12, 0);
  v15 = sub_245431A70(v11);
  v16 = 0;
  v17 = v11 + 64;
  v18 = *(_BYTE *)(v11 + 32);
  v49 = v11 + 88;
  v52 = v12;
  v53 = v14;
  v54 = v11 + 64;
  v55 = v11;
  while ((v15 & 0x8000000000000000) == 0 && v15 < 1 << v18)
  {
    v21 = (unint64_t)v15 >> 6;
    if ((*(_QWORD *)(v17 + 8 * ((unint64_t)v15 >> 6)) & (1 << v15)) == 0)
      goto LABEL_40;
    if (*(_DWORD *)(v11 + 36) != (_DWORD)v14)
      goto LABEL_41;
    v22 = v60;
    v23 = v57;
    v24 = (uint64_t)&v57[*(int *)(v60 + 48)];
    v25 = *(_QWORD *)(v11 + 48);
    v26 = *(_QWORD *)(v11 + 56);
    v27 = *(_QWORD *)(v25 + 8 * v15);
    v28 = type metadata accessor for ReplicatorRecord.Value(0);
    sub_2453BA364(v26 + *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72) * v15, v24, type metadata accessor for ReplicatorRecord.Value);
    *v23 = v27;
    v29 = (uint64_t)v58;
    *v58 = v27;
    sub_2453BA364(v24, v29 + *(int *)(v22 + 48), type metadata accessor for ReplicatorRecord.Value);
    v30 = v56;
    sub_24542E4E8(v29, (uint64_t)v56);
    sub_2453D055C((uint64_t)v23, &qword_25440E260);
    v31 = *(int *)(v22 + 48);
    v32 = v59;
    v33 = (uint64_t)v59 + v31;
    v34 = *v30;
    *v59 = *v30;
    sub_2453BA364((uint64_t)v30 + v31, (uint64_t)v32 + v31, type metadata accessor for ReplicatorRecord.Value);
    sub_2453BA3A8(v33, type metadata accessor for ReplicatorRecord.Value);
    sub_2453D055C((uint64_t)v30, &qword_25440E260);
    v13 = v61;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_2453F1D8C(0, *(_QWORD *)(v13 + 16) + 1, 1);
      v13 = v61;
    }
    v36 = *(_QWORD *)(v13 + 16);
    v35 = *(_QWORD *)(v13 + 24);
    if (v36 >= v35 >> 1)
    {
      sub_2453F1D8C(v35 > 1, v36 + 1, 1);
      v13 = v61;
    }
    *(_QWORD *)(v13 + 16) = v36 + 1;
    *(_QWORD *)(v13 + 8 * v36 + 32) = v34;
    v11 = v55;
    v18 = *(_BYTE *)(v55 + 32);
    v19 = 1 << v18;
    if (v15 >= 1 << v18)
      goto LABEL_42;
    v17 = v54;
    v37 = *(_QWORD *)(v54 + 8 * v21);
    if ((v37 & (1 << v15)) == 0)
      goto LABEL_43;
    LODWORD(v14) = v53;
    if (*(_DWORD *)(v55 + 36) != (_DWORD)v53)
      goto LABEL_44;
    v38 = v37 & (-2 << (v15 & 0x3F));
    if (v38)
    {
      v19 = __clz(__rbit64(v38)) | v15 & 0xFFFFFFFFFFFFFFC0;
      v20 = v52;
    }
    else
    {
      v39 = v21 + 1;
      v40 = (v19 + 63) >> 6;
      v20 = v52;
      if (v21 + 1 < v40)
      {
        v41 = *(_QWORD *)(v54 + 8 * v39);
        if (!v41)
        {
          v39 = v21 + 2;
          if (v21 + 2 >= v40)
            goto LABEL_4;
          v41 = *(_QWORD *)(v54 + 8 * v39);
          if (!v41)
          {
            while (v40 - 3 != v21)
            {
              v41 = *(_QWORD *)(v49 + 8 * v21++);
              if (v41)
              {
                v39 = v21 + 2;
                goto LABEL_19;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_19:
        v19 = __clz(__rbit64(v41)) + (v39 << 6);
      }
    }
LABEL_4:
    ++v16;
    v15 = v19;
    if (v16 == v20)
    {
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_245430F34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2453BA364(v1, a1, type metadata accessor for ReplicatorRecord.ID);
}

uint64_t sub_245430F5C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_245431AF8(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_245430FC4(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_245430FC4(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  result = sub_245444378();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v78 = 0;
      v79 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v81 = *(_QWORD *)(v79 + 8 * i);
        v82 = v78;
        do
        {
          v83 = *(_QWORD *)(v79 + v82);
          if (v83 >= v81)
            break;
          if (!v79)
            goto LABEL_141;
          *(_QWORD *)(v79 + v82 + 8) = v83;
          *(_QWORD *)(v79 + v82) = v81;
          v82 -= 8;
        }
        while (v82 != -8);
        v78 += 8;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v95 = result;
  v96 = v3;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_103:
      v94 = v8;
      if (v12 >= 2)
      {
        v84 = *v2;
        do
        {
          v85 = v12 - 2;
          if (v12 < 2)
            goto LABEL_132;
          if (!v84)
            goto LABEL_145;
          v86 = v11;
          v87 = v11 + 32;
          v88 = *(_QWORD *)&v11[16 * v85 + 32];
          v89 = *(_QWORD *)&v11[16 * v12 + 24];
          sub_24543164C((char *)(v84 + 8 * v88), (char *)(v84 + 8 * *(_QWORD *)&v87[16 * v12 - 16]), v84 + 8 * v89, __dst);
          if (v1)
            break;
          if (v89 < v88)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v86 = sub_245431A58((uint64_t)v86);
          if (v85 >= *((_QWORD *)v86 + 2))
            goto LABEL_134;
          v90 = &v86[16 * v85 + 32];
          *(_QWORD *)v90 = v88;
          *((_QWORD *)v90 + 1) = v89;
          v91 = *((_QWORD *)v86 + 2);
          if (v12 > v91)
            goto LABEL_135;
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          v11 = v86;
          *((_QWORD *)v86 + 2) = v91 - 1;
          v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v94 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v94 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_245443ED4();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v96;
    v94 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v92 = v2;
  v93 = *v2 - 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v97 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(_QWORD *)(v10 + 8 * v9);
      v15 = *(_QWORD *)(v10 + 8 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = *(_QWORD *)(v10 + 8 * v9);
          if (v15 < v14 == v16 >= v17)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v15 < v14)
      {
        if (v9 < v13)
          goto LABEL_138;
        if (v13 < v9)
        {
          v18 = v9 - 1;
          v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10)
                goto LABEL_144;
              v20 = *(_QWORD *)(v10 + 8 * v19);
              *(_QWORD *)(v10 + 8 * v19) = *(_QWORD *)(v10 + 8 * v18);
              *(_QWORD *)(v10 + 8 * v18) = v20;
            }
            v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_47;
    if (__OFSUB__(v9, v13))
      goto LABEL_136;
    if (v9 - v13 >= v95)
      goto LABEL_47;
    v21 = v13 + v95;
    if (__OFADD__(v13, v95))
      goto LABEL_139;
    if (v21 >= v3)
      v21 = v3;
    if (v21 < v13)
      break;
    if (v9 != v21)
    {
      v22 = (unint64_t *)(v93 + 8 * v9);
      do
      {
        v23 = *(_QWORD *)(v10 + 8 * v9);
        v24 = v13;
        v25 = v22;
        do
        {
          v26 = *v25;
          if (*v25 >= v23)
            break;
          if (!v10)
            goto LABEL_142;
          *v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      v9 = v21;
    }
LABEL_47:
    if (v9 < v13)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_2454318B8(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v28 = *((_QWORD *)v11 + 2);
    v27 = *((_QWORD *)v11 + 3);
    v12 = v28 + 1;
    v10 = v97;
    if (v28 >= v27 >> 1)
    {
      v77 = sub_2454318B8((char *)(v27 > 1), v28 + 1, 1, v11);
      v10 = v97;
      v11 = v77;
    }
    *((_QWORD *)v11 + 2) = v12;
    v29 = v11 + 32;
    v30 = &v11[16 * v28 + 32];
    *(_QWORD *)v30 = v13;
    *((_QWORD *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        v31 = v12 - 1;
        if (v12 >= 4)
        {
          v36 = &v29[16 * v12];
          v37 = *((_QWORD *)v36 - 8);
          v38 = *((_QWORD *)v36 - 7);
          v42 = __OFSUB__(v38, v37);
          v39 = v38 - v37;
          if (v42)
            goto LABEL_120;
          v41 = *((_QWORD *)v36 - 6);
          v40 = *((_QWORD *)v36 - 5);
          v42 = __OFSUB__(v40, v41);
          v34 = v40 - v41;
          v35 = v42;
          if (v42)
            goto LABEL_121;
          v43 = v12 - 2;
          v44 = &v29[16 * v12 - 32];
          v46 = *(_QWORD *)v44;
          v45 = *((_QWORD *)v44 + 1);
          v42 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          if (v42)
            goto LABEL_123;
          v42 = __OFADD__(v34, v47);
          v48 = v34 + v47;
          if (v42)
            goto LABEL_126;
          if (v48 >= v39)
          {
            v66 = &v29[16 * v31];
            v68 = *(_QWORD *)v66;
            v67 = *((_QWORD *)v66 + 1);
            v42 = __OFSUB__(v67, v68);
            v69 = v67 - v68;
            if (v42)
              goto LABEL_130;
            v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v60 = *((_QWORD *)v11 + 4);
            v61 = *((_QWORD *)v11 + 5);
            v42 = __OFSUB__(v61, v60);
            v53 = v61 - v60;
            v54 = v42;
            goto LABEL_78;
          }
          v33 = *((_QWORD *)v11 + 4);
          v32 = *((_QWORD *)v11 + 5);
          v42 = __OFSUB__(v32, v33);
          v34 = v32 - v33;
          v35 = v42;
        }
        if ((v35 & 1) != 0)
          goto LABEL_122;
        v43 = v12 - 2;
        v49 = &v29[16 * v12 - 32];
        v51 = *(_QWORD *)v49;
        v50 = *((_QWORD *)v49 + 1);
        v52 = __OFSUB__(v50, v51);
        v53 = v50 - v51;
        v54 = v52;
        if (v52)
          goto LABEL_125;
        v55 = &v29[16 * v31];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v42 = __OFSUB__(v56, v57);
        v58 = v56 - v57;
        if (v42)
          goto LABEL_128;
        if (__OFADD__(v53, v58))
          goto LABEL_129;
        if (v53 + v58 >= v34)
        {
          v59 = v34 < v58;
LABEL_84:
          if (v59)
            v31 = v43;
          goto LABEL_86;
        }
LABEL_78:
        if ((v54 & 1) != 0)
          goto LABEL_124;
        v62 = &v29[16 * v31];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v42 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v42)
          goto LABEL_127;
        if (v65 < v53)
          goto LABEL_15;
LABEL_86:
        v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10)
          goto LABEL_143;
        v71 = &v29[16 * v70];
        v72 = *(_QWORD *)v71;
        v73 = v29;
        v74 = &v29[16 * v31];
        v75 = *((_QWORD *)v74 + 1);
        sub_24543164C((char *)(v10 + 8 * *(_QWORD *)v71), (char *)(v10 + 8 * *(_QWORD *)v74), v10 + 8 * v75, __dst);
        if (v1)
          goto LABEL_114;
        if (v75 < v72)
          goto LABEL_117;
        if (v31 > *((_QWORD *)v11 + 2))
          goto LABEL_118;
        *(_QWORD *)v71 = v72;
        *(_QWORD *)&v73[16 * v70 + 8] = v75;
        v76 = *((_QWORD *)v11 + 2);
        if (v31 >= v76)
          goto LABEL_119;
        v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        v29 = v73;
        *((_QWORD *)v11 + 2) = v76 - 1;
        v10 = v97;
        if (v76 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v96;
    if (v9 >= v96)
    {
      v8 = v94;
      v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = sub_2454441F8();
  __break(1u);
  return result;
}

uint64_t sub_24543164C(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[8 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (unint64_t *)(a3 - 8);
        while (1)
        {
          v18 = (char *)(v17 + 1);
          v19 = v6 - 8;
          v20 = *((_QWORD *)v6 - 1);
          if (v20 >= *((_QWORD *)v16 - 1))
          {
            v22 = v16 - 8;
            if (v18 < v16 || v17 >= (unint64_t *)v16 || v18 != v16)
              *v17 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= (unint64_t *)v6)
              *v17 = v20;
            v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7)
              goto LABEL_42;
          }
          --v17;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(_QWORD *)v4 >= *(_QWORD *)v6)
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_2454319B0((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = sub_245444234();
  __break(1u);
  return result;
}

char *sub_2454318B8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257465668);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_2454319B0(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)sub_245444234();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_245431A58(uint64_t a1)
{
  return sub_2454318B8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_245431A70(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_245431AF8(uint64_t a1)
{
  return sub_2453F2294(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t _s18ReplicatorServices0A6RecordV2IDV9OwnershipO2eeoiySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = sub_245443B14();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E540);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_2453BA364(a1, (uint64_t)v14, type metadata accessor for ReplicatorRecord.ID.Ownership);
  sub_2453BA364(a2, v15, type metadata accessor for ReplicatorRecord.ID.Ownership);
  v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v16((uint64_t)v14, 1, v4) != 1)
  {
    sub_2453BA364((uint64_t)v14, (uint64_t)v10, type metadata accessor for ReplicatorRecord.ID.Ownership);
    if (v16(v15, 1, v4) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v15, v4);
      v17 = sub_245443AF0();
      v18 = *(void (**)(char *, uint64_t))(v5 + 8);
      v18(v7, v4);
      v18(v10, v4);
      sub_2453BA3A8((uint64_t)v14, type metadata accessor for ReplicatorRecord.ID.Ownership);
      return v17 & 1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    goto LABEL_6;
  }
  if (v16(v15, 1, v4) != 1)
  {
LABEL_6:
    sub_2453D055C((uint64_t)v14, (uint64_t *)&unk_25440E540);
    v17 = 0;
    return v17 & 1;
  }
  sub_2453BA3A8((uint64_t)v14, type metadata accessor for ReplicatorRecord.ID.Ownership);
  v17 = 1;
  return v17 & 1;
}

uint64_t _s18ReplicatorServices0A6RecordV2IDV2eeoiySbAE_AEtFZ_0(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  uint64_t result;
  BOOL v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_245444390(), result = 0, (v5 & 1) != 0))
  {
    v7 = a1[2] == a2[2] && a1[3] == a2[3];
    if (v7 || (v8 = sub_245444390(), result = 0, (v8 & 1) != 0))
    {
      if (a1[4] == a2[4] && a1[5] == a2[5] || (v9 = sub_245444390(), result = 0, (v9 & 1) != 0))
      {
        v10 = type metadata accessor for ReplicatorRecord.ID(0);
        if ((_s18ReplicatorServices0A6RecordV2IDV9OwnershipO2eeoiySbAG_AGtFZ_0((uint64_t)a1 + *(int *)(v10 + 28), (uint64_t)a2 + *(int *)(v10 + 28)) & 1) != 0)
        {
          v11 = *(int *)(v10 + 32);
          v12 = *(_QWORD *)((char *)a1 + v11);
          v13 = *(_QWORD *)((char *)a1 + v11 + 8);
          v14 = (_QWORD *)((char *)a2 + v11);
          if (v12 == *v14 && v13 == v14[1])
            return 1;
          else
            return sub_245444390();
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

unint64_t sub_245431E20()
{
  unint64_t result;

  result = qword_25440E4F8;
  if (!qword_25440E4F8)
  {
    result = MEMORY[0x249534380](&unk_24544C1DC, &type metadata for ReplicatorRecord.ID.Ownership.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E4F8);
  }
  return result;
}

unint64_t sub_245431E64()
{
  unint64_t result;

  result = qword_257465640;
  if (!qword_257465640)
  {
    result = MEMORY[0x249534380](&unk_24544C18C, &type metadata for ReplicatorRecord.ID.Ownership.RemoteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465640);
  }
  return result;
}

unint64_t sub_245431EA8()
{
  unint64_t result;

  result = qword_25440E510;
  if (!qword_25440E510)
  {
    result = MEMORY[0x249534380](&unk_24544C13C, &type metadata for ReplicatorRecord.ID.Ownership.LocalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E510);
  }
  return result;
}

unint64_t sub_245431EEC()
{
  unint64_t result;

  result = qword_25440E4D8;
  if (!qword_25440E4D8)
  {
    result = MEMORY[0x249534380](&unk_24544C0EC, &type metadata for ReplicatorRecord.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E4D8);
  }
  return result;
}

uint64_t sub_245431F30()
{
  return sub_2453B8BF4(&qword_257465648, type metadata accessor for ReplicatorRecord.ID.Ownership, (uint64_t)&protocol conformance descriptor for ReplicatorRecord.ID.Ownership);
}

uint64_t sub_245431F5C()
{
  return sub_2453B8BF4(&qword_25440E958, type metadata accessor for ReplicatorRecord.ID, (uint64_t)&protocol conformance descriptor for ReplicatorRecord.ID);
}

uint64_t sub_245431F88()
{
  return sub_2453B8BF4(&qword_257464530, type metadata accessor for ReplicatorRecord.ID, (uint64_t)&protocol conformance descriptor for ReplicatorRecord.ID);
}

uint64_t *initializeBufferWithCopyOfBuffer for ReplicatorRecord(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  char *__dst;
  uint64_t v36;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    v10 = type metadata accessor for ReplicatorRecord.ID(0);
    v11 = *(int *)(v10 + 28);
    __dst = (char *)v4 + v11;
    v36 = v10;
    v12 = (char *)a2 + v11;
    v13 = sub_245443B14();
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v15(v12, 1, v13))
    {
      v16 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
      memcpy(__dst, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(__dst, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
    }
    v18 = v14;
    v19 = *(int *)(v36 + 32);
    v20 = (uint64_t *)((char *)v4 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = a3[5];
    v24 = (char *)v4 + v23;
    v25 = (char *)a2 + v23;
    v26 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
    swift_bridgeObjectRetain();
    v26(v24, v25, v13);
    v27 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v28 = (char *)v4 + v27;
    v29 = (char *)a2 + v27;
    v30 = sub_245443AC0();
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    if (v32(v29, 1, v30))
    {
      v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E420);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
  }
  return v4;
}

uint64_t destroy for ReplicatorRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(type metadata accessor for ReplicatorRecord.ID(0) + 28);
  v5 = sub_245443B14();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1 + *(int *)(a2 + 20), v5);
  swift_bridgeObjectRelease();
  v7 = a1 + *(int *)(a2 + 28);
  v8 = sub_245443AC0();
  v9 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  return result;
}

_QWORD *initializeWithCopy for ReplicatorRecord(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  char *__dst;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v8 = type metadata accessor for ReplicatorRecord.ID(0);
  v9 = *(int *)(v8 + 28);
  __dst = (char *)a1 + v9;
  v10 = (char *)a2 + v9;
  v11 = sub_245443B14();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    v14 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v15 = *(int *)(v8 + 32);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = a3[5];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  swift_bridgeObjectRetain();
  v22(v20, v21, v11);
  v23 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = sub_245443AC0();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  swift_bridgeObjectRetain();
  if (v28(v25, 1, v26))
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E420);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

char *assignWithCopy for ReplicatorRecord(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = type metadata accessor for ReplicatorRecord.ID(0);
  v7 = *(int *)(v6 + 28);
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = sub_245443B14();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  v16 = *(int *)(v6 + 32);
  v17 = &a1[v16];
  v18 = &a2[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(&a1[a3[5]], &a2[a3[5]], v10);
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = sub_245443AC0();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E420);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  return a1;
}

char *initializeWithTake for ReplicatorRecord(char *a1, char *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v6;
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  v7 = type metadata accessor for ReplicatorRecord.ID(0);
  v8 = *(int *)(v7 + 28);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_245443B14();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    v14 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  }
  else
  {
    v14 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v14(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(_OWORD *)&a1[*(int *)(v7 + 32)] = *(_OWORD *)&a2[*(int *)(v7 + 32)];
  v14(&a1[a3[5]], &a2[a3[5]], v11);
  v15 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = sub_245443AC0();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E420);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  return a1;
}

char *assignWithTake for ReplicatorRecord(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  v7 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a1 + 3) = v7;
  swift_bridgeObjectRelease();
  v8 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a1 + 5) = v8;
  swift_bridgeObjectRelease();
  v9 = type metadata accessor for ReplicatorRecord.ID(0);
  v10 = *(int *)(v9 + 28);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = sub_245443B14();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    v18 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
LABEL_7:
  v19 = *(int *)(v9 + 32);
  v20 = &a1[v19];
  v21 = &a2[v19];
  v23 = *(_QWORD *)v21;
  v22 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v20 = v23;
  *((_QWORD *)v20 + 1) = v22;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v14 + 40))(&a1[a3[5]], &a2[a3[5]], v13);
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  swift_bridgeObjectRelease();
  v24 = a3[7];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = sub_245443AC0();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v25, v26, v27);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E420);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorRecord()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_245432B54(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = type metadata accessor for ReplicatorRecord.ID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_245443B14();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_10:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E420);
    v12 = *(_QWORD *)(v8 - 8);
    v13 = a3[7];
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(a1 + a3[6]);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplicatorRecord()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_245432C30(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for ReplicatorRecord.ID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_245443B14();
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[6]) = (a2 - 1);
        return result;
      }
      v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E420);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[7];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_245432CFC()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for ReplicatorRecord.ID(319);
  if (v0 <= 0x3F)
  {
    sub_245443B14();
    if (v1 <= 0x3F)
    {
      sub_24540B9E4(319, &qword_25440E430, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ReplicatorRecord.ID(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    v10 = *(int *)(a3 + 28);
    __dst = (char *)a1 + v10;
    v11 = (char *)a2 + v10;
    a1[4] = a2[4];
    a1[5] = v9;
    v12 = sub_245443B14();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      v15 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v17 = *(int *)(a3 + 32);
    v18 = (uint64_t *)((char *)v4 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for ReplicatorRecord.ID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_245443B14();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ReplicatorRecord.ID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  v8 = *(int *)(a3 + 28);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  a1[4] = a2[4];
  a1[5] = v7;
  v11 = sub_245443B14();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    v14 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = *(int *)(a3 + 32);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ReplicatorRecord.ID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_245443B14();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = *(int *)(a3 + 32);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for ReplicatorRecord.ID(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_245443B14();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 32)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 32));
  return a1;
}

_QWORD *assignWithTake for ReplicatorRecord.ID(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 28);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = sub_245443B14();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  v18 = *(int *)(a3 + 32);
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorRecord.ID()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24543348C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ReplicatorRecord.ID()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_245433514(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_245433588()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ReplicatorRecord.ID.Ownership(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReplicatorRecord.ID.Ownership(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = sub_245443B14();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

void *initializeWithCopy for ReplicatorRecord.ID.Ownership(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_245443B14();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithCopy for ReplicatorRecord.ID.Ownership(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = sub_245443B14();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *initializeWithTake for ReplicatorRecord.ID.Ownership(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_245443B14();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithTake for ReplicatorRecord.ID.Ownership(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = sub_245443B14();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorRecord.ID.Ownership()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2454339FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_245443B14();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ReplicatorRecord.ID.Ownership()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_245433A54(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = sub_245443B14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_245433AA4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_245443B14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
}

uint64_t sub_245433ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_245443B14();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 1, v4);
}

uint64_t sub_245433B1C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_245443B14();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReplicatorRecord.Value(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_2453CFFAC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_245443A24();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E1A0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for ReplicatorRecord.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  sub_2453BDCF8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_245443A24();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t *initializeWithCopy for ReplicatorRecord.Value(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  sub_2453CFFAC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_245443A24();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E1A0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t *assignWithCopy for ReplicatorRecord.Value(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  uint64_t v17;

  v6 = *a2;
  v7 = a2[1];
  sub_2453CFFAC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_2453BDCF8(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_245443A24();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v7) = v15(v11, 1, v13);
  v16 = v15(v12, 1, v13);
  if (!(_DWORD)v7)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E1A0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

_OWORD *initializeWithTake for ReplicatorRecord.Value(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_245443A24();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E1A0);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t *assignWithTake for ReplicatorRecord.Value(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_2453BDCF8(v6, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_245443A24();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E1A0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorRecord.Value()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_2454340C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E1A0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ReplicatorRecord.Value()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_24543415C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E1A0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void sub_2454341DC()
{
  unint64_t v0;

  sub_24540B9E4(319, (unint64_t *)&qword_25440E1A8, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t storeEnumTagSinglePayload for ReplicatorRecord.ID.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_2454342AC + 4 * byte_24544BB7A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_2454342E0 + 4 * byte_24544BB75[v4]))();
}

uint64_t sub_2454342E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2454342E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2454342F0);
  return result;
}

uint64_t sub_2454342FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245434304);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_245434308(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245434310(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorRecord.ID.CodingKeys()
{
  return &type metadata for ReplicatorRecord.ID.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ReplicatorRecord.ID.Ownership.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_245434378 + 4 * byte_24544BB84[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_2454343AC + 4 * byte_24544BB7F[v4]))();
}

uint64_t sub_2454343AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_2454343B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x2454343BCLL);
  return result;
}

uint64_t sub_2454343C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x2454343D0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_2454343D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_2454343DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorRecord.ID.Ownership.CodingKeys()
{
  return &type metadata for ReplicatorRecord.ID.Ownership.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorRecord.ID.Ownership.LocalCodingKeys()
{
  return &type metadata for ReplicatorRecord.ID.Ownership.LocalCodingKeys;
}

uint64_t storeEnumTagSinglePayload for ReplicatorRecord.ID.Ownership.RemoteCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_245434448 + 4 * byte_24544BB89[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_245434468 + 4 * byte_24544BB8E[v4]))();
}

_BYTE *sub_245434448(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_245434468(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_245434470(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_245434478(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_245434480(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_245434488(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorRecord.ID.Ownership.RemoteCodingKeys()
{
  return &type metadata for ReplicatorRecord.ID.Ownership.RemoteCodingKeys;
}

unint64_t sub_2454344A8()
{
  unint64_t result;

  result = qword_257465650;
  if (!qword_257465650)
  {
    result = MEMORY[0x249534380](&unk_24544BF04, &type metadata for ReplicatorRecord.ID.Ownership.RemoteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465650);
  }
  return result;
}

unint64_t sub_2454344F0()
{
  unint64_t result;

  result = qword_257465658;
  if (!qword_257465658)
  {
    result = MEMORY[0x249534380](&unk_24544C00C, &type metadata for ReplicatorRecord.ID.Ownership.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465658);
  }
  return result;
}

unint64_t sub_245434538()
{
  unint64_t result;

  result = qword_257465660;
  if (!qword_257465660)
  {
    result = MEMORY[0x249534380](&unk_24544C0C4, &type metadata for ReplicatorRecord.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465660);
  }
  return result;
}

unint64_t sub_245434580()
{
  unint64_t result;

  result = qword_25440E4E8;
  if (!qword_25440E4E8)
  {
    result = MEMORY[0x249534380](&unk_24544C034, &type metadata for ReplicatorRecord.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E4E8);
  }
  return result;
}

unint64_t sub_2454345C8()
{
  unint64_t result;

  result = qword_25440E4E0;
  if (!qword_25440E4E0)
  {
    result = MEMORY[0x249534380](&unk_24544C05C, &type metadata for ReplicatorRecord.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E4E0);
  }
  return result;
}

unint64_t sub_245434610()
{
  unint64_t result;

  result = qword_25440E520;
  if (!qword_25440E520)
  {
    result = MEMORY[0x249534380](&unk_24544BF2C, &type metadata for ReplicatorRecord.ID.Ownership.LocalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E520);
  }
  return result;
}

unint64_t sub_245434658()
{
  unint64_t result;

  result = qword_25440E518;
  if (!qword_25440E518)
  {
    result = MEMORY[0x249534380](&unk_24544BF54, &type metadata for ReplicatorRecord.ID.Ownership.LocalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E518);
  }
  return result;
}

unint64_t sub_2454346A0()
{
  unint64_t result;

  result = qword_25440E530;
  if (!qword_25440E530)
  {
    result = MEMORY[0x249534380](&unk_24544BE74, &type metadata for ReplicatorRecord.ID.Ownership.RemoteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E530);
  }
  return result;
}

unint64_t sub_2454346E8()
{
  unint64_t result;

  result = qword_25440E528;
  if (!qword_25440E528)
  {
    result = MEMORY[0x249534380](&unk_24544BE9C, &type metadata for ReplicatorRecord.ID.Ownership.RemoteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E528);
  }
  return result;
}

unint64_t sub_245434730()
{
  unint64_t result;

  result = qword_25440E508;
  if (!qword_25440E508)
  {
    result = MEMORY[0x249534380](&unk_24544BF7C, &type metadata for ReplicatorRecord.ID.Ownership.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E508);
  }
  return result;
}

unint64_t sub_245434778()
{
  unint64_t result;

  result = qword_25440E500;
  if (!qword_25440E500)
  {
    result = MEMORY[0x249534380](&unk_24544BFA4, &type metadata for ReplicatorRecord.ID.Ownership.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E500);
  }
  return result;
}

uint64_t sub_2454347BC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C61636F6CLL && a2 == 0xE500000000000000;
  if (v2 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65746F6D6572 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_245444390();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_24543489C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701736314 && a2 == 0xE400000000000000 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4449746E65696C63 && a2 == 0xE800000000000000 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x69687372656E776FLL && a2 == 0xE900000000000070 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x746E656449676F6CLL && a2 == 0xED00007265696669)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_245444390();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

unint64_t sub_245434AC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E558);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (_QWORD *)((char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E210);
  v6 = sub_245444228();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = (char *)v5 + *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_2453D02E0(v12, (uint64_t)v5, &qword_25440E558);
    result = sub_2453C656C(v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = type metadata accessor for ReplicatorRecord.ID(0);
    sub_2453B9DE0((uint64_t)v5, v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16);
    v19 = v7[7];
    v20 = sub_245443B14();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v16, v9, v20);
    v21 = v7[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_11;
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_245434C70(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_257464370);
  v2 = sub_245444228();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_2453D02E0(v6, (uint64_t)&v13, &qword_257464368);
    v7 = v13;
    result = sub_2453C65C4(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)sub_245435EF4(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_245434D9C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_257465670);
  v2 = sub_245444228();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_2453D02E0(v6, (uint64_t)&v15, (uint64_t *)&unk_257465678);
    v7 = v15;
    v8 = v16;
    result = sub_2453C64D8(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_245435EF4(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t NSFileHandle.decompressFile(to:extendedAttributes:)()
{
  return sub_245435B80();
}

uint64_t NSFileHandle.copyFile(to:extendedAttributes:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  void *v15;
  unsigned int v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  void (*v22)(char *, uint64_t);
  id v24;
  void (*v25)(char *, uint64_t);
  void *v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  int64_t i;
  void *v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  int64_t v51;
  id v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  id v55;
  uint64_t inited;
  void **v57;
  void *v58;
  void *v59;
  uint64_t v60;
  id v61;
  id v62;
  void *v63;
  char *v64;
  void *v65;
  id v66;
  id v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  _OWORD *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  __int128 *v81;
  __int128 v82;
  _OWORD v83[3];
  id v84;
  unint64_t v85;
  char v86;
  uint64_t v87;

  v78 = a2;
  v87 = *MEMORY[0x24BDAC8D0];
  v3 = sub_245443A24();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v69 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v69 - v11;
  sub_2454439E8();
  v79 = a1;
  sub_2454439C4();
  v13 = (void *)objc_opt_self();
  v14 = objc_msgSend(v13, sel_defaultManager);
  v15 = (void *)sub_2454439DC();
  v84 = 0;
  v16 = objc_msgSend(v14, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v15, 1, 0, &v84);

  if (!v16)
  {
    v24 = v84;
    sub_2454439B8();

    swift_willThrow();
    v25 = *(void (**)(char *, uint64_t))(v4 + 8);
    v25(v10, v3);
    return ((uint64_t (*)(char *, uint64_t))v25)(v12, v3);
  }
  v17 = v84;
  v18 = objc_msgSend(v13, sel_defaultManager);
  sub_245443A00();
  v19 = (void *)sub_245443D78();
  swift_bridgeObjectRelease();
  objc_msgSend(v18, sel_createFileAtPath_contents_attributes_, v19, 0, 0);

  sub_245435DE4();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v10, v3);
  v20 = v80;
  v21 = sub_245435808((uint64_t)v7);
  if (v20)
  {
    v22 = *(void (**)(char *, uint64_t))(v4 + 8);
    v22(v10, v3);
    return ((uint64_t (*)(char *, uint64_t))v22)(v12, v3);
  }
  v76 = v10;
  v77 = v13;
  v80 = v21;
  v74 = v4;
  v75 = v12;
  v26 = (void *)MEMORY[0x249533EB8]();
  v27 = (void *)sub_245443FC4();
  v29 = v28;
  v71 = v3;
  v30 = (uint64_t)v27;
  v31 = v28;
  sub_2453BDCE4(0, 0xF000000000000000);
  if (v31 >> 60 != 15)
  {
    v84 = v27;
    v85 = v29;
    sub_2453CFFAC((uint64_t)v27, v29);
    sub_245435EB0();
    sub_245443FD0();
    sub_2453BDCE4((uint64_t)v27, v29);
    objc_autoreleasePoolPop(v26);
    __asm { BR              X9 }
  }
  objc_autoreleasePoolPop(v26);
  v84 = 0;
  v32 = v80;
  if (!objc_msgSend(v80, sel_closeAndReturnError_, &v84))
  {
    v52 = v84;
    sub_2454439B8();

    swift_willThrow();
    v53 = *(void (**)(char *, uint64_t))(v74 + 8);
    v54 = v76;
    goto LABEL_43;
  }
  v33 = *(_QWORD *)(v78 + 64);
  v70 = v78 + 64;
  v34 = 1 << *(_BYTE *)(v78 + 32);
  v35 = -1;
  if (v34 < 64)
    v35 = ~(-1 << v34);
  v36 = v35 & v33;
  v73 = v83;
  v81 = (__int128 *)&v86;
  v72 = (unint64_t)(v34 + 63) >> 6;
  v69 = v72 - 1;
  v37 = v84;
  swift_bridgeObjectRetain();
  for (i = 0; ; i = v41)
  {
    v39 = v77;
    if (v36)
    {
      v40 = __clz(__rbit64(v36));
      v36 &= v36 - 1;
      v41 = i;
      v42 = v40 | (i << 6);
LABEL_13:
      v43 = *(_QWORD *)(v78 + 56);
      v44 = (_QWORD *)(*(_QWORD *)(v78 + 48) + 16 * v42);
      v45 = v44[1];
      *(_QWORD *)&v82 = *v44;
      *((_QWORD *)&v82 + 1) = v45;
      sub_2453CFFF0(v43 + 48 * v42, (uint64_t)v73);
      swift_bridgeObjectRetain();
      goto LABEL_20;
    }
    v46 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
LABEL_45:
      __break(1u);
    }
    if (v46 >= v72)
    {
      v41 = i;
    }
    else
    {
      v47 = *(_QWORD *)(v70 + 8 * v46);
      if (v47)
        goto LABEL_17;
      v41 = i + 2;
      if (i + 2 >= v72)
      {
        v41 = i + 1;
      }
      else
      {
        v47 = *(_QWORD *)(v70 + 8 * v41);
        if (v47)
        {
          v46 = i + 2;
LABEL_17:
          v36 = (v47 - 1) & v47;
          v42 = __clz(__rbit64(v47)) + (v46 << 6);
          v41 = v46;
          goto LABEL_13;
        }
        v50 = i + 3;
        if (i + 3 < v72)
        {
          v47 = *(_QWORD *)(v70 + 8 * v50);
          if (v47)
          {
            v46 = i + 3;
            goto LABEL_17;
          }
          v51 = i + 4;
          if (v51 >= v72)
          {
            v41 = v50;
          }
          else
          {
            v47 = *(_QWORD *)(v70 + 8 * v51);
            if (v47)
            {
              v46 = v51;
              goto LABEL_17;
            }
            while (1)
            {
              v46 = v51 + 1;
              if (__OFADD__(v51, 1))
                goto LABEL_45;
              if (v46 >= v72)
                break;
              v47 = *(_QWORD *)(v70 + 8 * v46);
              ++v51;
              if (v47)
                goto LABEL_17;
            }
            v41 = v69;
          }
        }
      }
    }
    v36 = 0;
    v82 = 0u;
    memset(v83, 0, sizeof(v83));
LABEL_20:
    sub_245435E20((uint64_t)&v82, (uint64_t)&v84);
    v48 = v85;
    if (!v85)
      break;
    v49 = (uint64_t)v84;
    sub_2453CBAF0(v81, &v82);
    __swift_project_boxed_opaque_existential_1(&v82, *((uint64_t *)&v83[0] + 1));
    sub_24543B258(v49, v48);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v82);
  }
  swift_release();
  v55 = objc_msgSend(v39, sel_defaultManager);
  __swift_instantiateConcreteTypeFromMangledName(qword_257464398);
  inited = swift_initStackObject();
  v57 = (void **)MEMORY[0x24BDD0CF0];
  *(_OWORD *)(inited + 16) = xmmword_245445910;
  v58 = *v57;
  *(_QWORD *)(inited + 32) = *v57;
  v59 = (void *)*MEMORY[0x24BDD0CE0];
  type metadata accessor for FileProtectionType(0);
  *(_QWORD *)(inited + 64) = v60;
  *(_QWORD *)(inited + 40) = v59;
  v61 = v58;
  v62 = v59;
  sub_245434C70(inited);
  type metadata accessor for FileAttributeKey(0);
  sub_245435E68();
  v63 = (void *)sub_245443D0C();
  swift_bridgeObjectRelease();
  v64 = v76;
  sub_245443A00();
  v65 = (void *)sub_245443D78();
  swift_bridgeObjectRelease();
  v84 = 0;
  LOBYTE(v58) = objc_msgSend(v55, sel_setAttributes_ofItemAtPath_error_, v63, v65, &v84);

  if ((v58 & 1) != 0)
  {
    v66 = v84;
  }
  else
  {
    v67 = v84;
    sub_2454439B8();

    swift_willThrow();
  }

  v53 = *(void (**)(char *, uint64_t))(v74 + 8);
  v54 = v64;
LABEL_43:
  v68 = v71;
  v53(v54, v71);
  v53(v75, v68);
  return sub_2453BDCE4(v30, v31);
}

id sub_245435808(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  id v7;
  id v8;
  uint64_t v9;
  id v11[2];

  v11[1] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = (void *)sub_2454439DC();
  v11[0] = 0;
  v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_fileHandleForWritingToURL_error_, v2, v11);

  v4 = v11[0];
  if (v3)
  {
    v5 = sub_245443A24();
    v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    v7 = v4;
    v6(a1, v5);
  }
  else
  {
    v8 = v11[0];
    sub_2454439B8();

    swift_willThrow();
    v9 = sub_245443A24();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
  }
  return v3;
}

uint64_t NSFileHandle.compressFile(to:extendedAttributes:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  void *v11;
  unsigned int v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void (*v21)(char *, uint64_t);
  void *v23[3];
  uint64_t v24;
  id v25[2];

  v25[1] = *(id *)MEMORY[0x24BDAC8D0];
  v0 = sub_245443A24();
  v24 = *(_QWORD *)(v0 - 8);
  v1 = MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x24BDAC7A8](v1);
  v6 = (char *)v23 - v5;
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v23 - v7;
  sub_2454439E8();
  sub_2454439C4();
  v9 = (void *)objc_opt_self();
  v10 = objc_msgSend(v9, sel_defaultManager);
  v11 = (void *)sub_2454439DC();
  v25[0] = 0;
  v12 = objc_msgSend(v10, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v11, 1, 0, v25);

  if (v12)
  {
    v13 = v25[0];
    v14 = objc_msgSend(v9, sel_defaultManager);
    sub_245443A00();
    v15 = (void *)sub_245443D78();
    swift_bridgeObjectRelease();
    objc_msgSend(v14, sel_createFileAtPath_contents_attributes_, v15, 0, 0);

    sub_245435DE4();
    v16 = v24;
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v3, v6, v0);
    v17 = v23[2];
    v18 = sub_245435808((uint64_t)v3);
    if (!v17)
    {
      v19 = v18;
      sub_24543ED0C(0, v23[1], v18);

    }
  }
  else
  {
    v20 = v25[0];
    sub_2454439B8();

    swift_willThrow();
    v16 = v24;
  }
  v21 = *(void (**)(char *, uint64_t))(v16 + 8);
  v21(v6, v0);
  return ((uint64_t (*)(char *, uint64_t))v21)(v8, v0);
}

uint64_t sub_245435B80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  void *v11;
  unsigned int v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void (*v21)(char *, uint64_t);
  void *v23[3];
  uint64_t v24;
  id v25[2];

  v25[1] = *(id *)MEMORY[0x24BDAC8D0];
  v0 = sub_245443A24();
  v24 = *(_QWORD *)(v0 - 8);
  v1 = MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x24BDAC7A8](v1);
  v6 = (char *)v23 - v5;
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v23 - v7;
  sub_2454439E8();
  sub_2454439C4();
  v9 = (void *)objc_opt_self();
  v10 = objc_msgSend(v9, sel_defaultManager);
  v11 = (void *)sub_2454439DC();
  v25[0] = 0;
  v12 = objc_msgSend(v10, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v11, 1, 0, v25);

  if (v12)
  {
    v13 = v25[0];
    v14 = objc_msgSend(v9, sel_defaultManager);
    sub_245443A00();
    v15 = (void *)sub_245443D78();
    swift_bridgeObjectRelease();
    objc_msgSend(v14, sel_createFileAtPath_contents_attributes_, v15, 0, 0);

    sub_245435DE4();
    v16 = v24;
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v3, v6, v0);
    v17 = v23[2];
    v18 = sub_245435808((uint64_t)v3);
    if (!v17)
    {
      v19 = v18;
      sub_24543ED0C(1, v23[1], v18);

    }
  }
  else
  {
    v20 = v25[0];
    sub_2454439B8();

    swift_willThrow();
    v16 = v24;
  }
  v21 = *(void (**)(char *, uint64_t))(v16 + 8);
  v21(v6, v0);
  return ((uint64_t (*)(char *, uint64_t))v21)(v8, v0);
}

unint64_t sub_245435DE4()
{
  unint64_t result;

  result = qword_25440E068;
  if (!qword_25440E068)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25440E068);
  }
  return result;
}

uint64_t sub_245435E20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_257464350);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_245435E68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25440E0F8;
  if (!qword_25440E0F8)
  {
    type metadata accessor for FileAttributeKey(255);
    result = MEMORY[0x249534380](&unk_245445488, v1);
    atomic_store(result, (unint64_t *)&qword_25440E0F8);
  }
  return result;
}

unint64_t sub_245435EB0()
{
  unint64_t result;

  result = qword_257464308;
  if (!qword_257464308)
  {
    result = MEMORY[0x249534380](MEMORY[0x24BDCDDC0], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_257464308);
  }
  return result;
}

_OWORD *sub_245435EF4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_245435F04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t LocalDeviceID;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v17;
  uint64_t result;
  uint64_t v19[2];

  v19[0] = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2574642C0);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)v19 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v19 - v12;
  LocalDeviceID = type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID(0);
  v15 = *(_QWORD *)(LocalDeviceID - 8);
  v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v16(v13, 1, 1, LocalDeviceID);
  if (a1)
  {
    sub_245443964();
    swift_allocObject();
    sub_245443958();
    v3 = sub_245443A78();
    v2 = v17;
    sub_2453B8BF4((unint64_t *)&unk_25440E0E8, type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerResponse.GetLocalDeviceID);
    sub_24544394C();
    sub_2453D055C((uint64_t)v13, (uint64_t *)&unk_2574642C0);
    sub_2453BDCF8(v3, v2);
    swift_release();
    v16(v11, 0, 1, LocalDeviceID);
    sub_2453D0428((uint64_t)v11, (uint64_t)v13, (uint64_t *)&unk_2574642C0);
    sub_2453D02E0((uint64_t)v13, (uint64_t)v8, (uint64_t *)&unk_2574642C0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v8, 1, LocalDeviceID) != 1)
    {
      sub_2453D055C((uint64_t)v13, (uint64_t *)&unk_2574642C0);
      return sub_2453D062C((uint64_t)v8, v19[0], type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  sub_2453BDCF8(v3, v2);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_245436128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_245436170(a1, &qword_257464D00, (unint64_t *)type metadata accessor for ReplicatorControlXPCServerParameters.Pair, (unint64_t *)&unk_2574658C0, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.Pair, a2);
}

uint64_t sub_24543614C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_245436170(a1, &qword_257464CF8, (unint64_t *)type metadata accessor for ReplicatorControlXPCServerParameters.Unpair, (unint64_t *)&unk_2574658B0, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.Unpair, a2);
}

uint64_t sub_245436170@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;

  v26 = a4;
  v27 = a5;
  v25 = a6;
  v11 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v24 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v24 - v18;
  v20 = ((uint64_t (*)(_QWORD))a3)(0);
  v29 = *(_QWORD *)(v20 - 8);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
  v28(v19, 1, 1, v20);
  if (a1)
  {
    sub_245443964();
    swift_allocObject();
    sub_245443958();
    v6 = sub_245443A78();
    v7 = v21;
    v22 = v26;
    v26 = a3;
    sub_2453B8BF4(v22, (uint64_t (*)(uint64_t))a3, v27);
    sub_24544394C();
    sub_2453D055C((uint64_t)v19, a2);
    sub_2453BDCF8(v6, v7);
    swift_release();
    v28(v17, 0, 1, v20);
    sub_2453D0428((uint64_t)v17, (uint64_t)v19, a2);
    sub_2453D02E0((uint64_t)v19, (uint64_t)v14, a2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v14, 1, v20) != 1)
    {
      sub_2453D055C((uint64_t)v19, a2);
      return sub_2453D062C((uint64_t)v14, v25, (uint64_t (*)(_QWORD))v26);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  sub_2453BDCF8(v6, v7);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_245436390@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_245436BD4(a1, (void (*)(void))sub_2453FCCF4, a2);
}

uint64_t sub_2454363A4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_245436BD4(a1, (void (*)(void))sub_2453FCDDC, a2);
}

uint64_t sub_2454363B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_245436170(a1, &qword_257464CF0, (unint64_t *)type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID, (unint64_t *)&unk_2574658A0, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.AllowListID, a2);
}

uint64_t sub_2454363DC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_245436CCC(a1, (void (*)(void))sub_2453FCF3C, a2);
}

uint64_t sub_2454363F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_245436170(a1, (uint64_t *)&unk_257465880, (unint64_t *)type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken, &qword_257464B68, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.GetPushToken, a2);
}

uint64_t sub_245436414@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_245436BD4(a1, (void (*)(void))sub_2453FD09C, a2);
}

uint64_t sub_245436428@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_245436CCC(a1, (void (*)(void))sub_2453FD184, a2);
}

uint64_t sub_24543643C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_245436BD4(a1, (void (*)(void))sub_2453FD26C, a2);
}

uint64_t sub_245436450@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_245436CCC(a1, (void (*)(void))sub_2453FD354, a2);
}

uint64_t sub_245436464@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;

  if (a1)
  {
    sub_245443964();
    swift_allocObject();
    sub_245443958();
    v3 = sub_245443A78();
    v5 = v4;
    sub_2453FD4A8();
    sub_24544394C();
    sub_2453BDCF8(v3, v5);
    result = swift_release();
    if (v8 >> 60 != 15)
    {
      *a2 = v7;
      a2[1] = v8;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_245436554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_245436A34(a1, (void (*)(void))sub_245408A54, a2);
}

uint64_t sub_245436568@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_2454365CC(a1, (void (*)(void))sub_245408AF8, a2);
}

uint64_t sub_24543657C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_2454365CC(a1, (void (*)(void))sub_245408B9C, a2);
}

uint64_t sub_245436590@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_2454365CC(a1, (void (*)(void))sub_245408C40, a2);
}

uint64_t sub_2454365A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_2454365CC(a1, (void (*)(void))sub_245408CE4, a2);
}

uint64_t sub_2454365B8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_2454365CC(a1, (void (*)(void))sub_245408D88, a2);
}

uint64_t sub_2454365CC@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  if (a1)
  {
    sub_245443964();
    swift_allocObject();
    sub_245443958();
    v5 = sub_245443A78();
    v7 = v6;
    a2();
    sub_24544394C();
    sub_2453BDCF8(v5, v7);
    result = swift_release();
    if (v10)
    {
      *a3 = v9;
      a3[1] = v10;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_2454366C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;

  if (a1)
  {
    sub_245443964();
    swift_allocObject();
    sub_245443958();
    v3 = sub_245443A78();
    v5 = v4;
    sub_245408E2C();
    sub_24544394C();
    sub_2453BDCF8(v3, v5);
    result = swift_release();
    if (v7 != 1)
    {
      *(_QWORD *)a2 = v7;
      *(_BYTE *)(a2 + 8) = v8 & 1;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_2454367B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;

  if (a1)
  {
    sub_245443964();
    swift_allocObject();
    sub_245443958();
    v3 = sub_245443A78();
    v5 = v4;
    sub_245408ED0();
    sub_24544394C();
    sub_2453BDCF8(v3, v5);
    result = swift_release();
    if (v7)
    {
      *(_QWORD *)a2 = v7;
      *(_BYTE *)(a2 + 8) = v8 & 1;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_2454368A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;

  if (a1)
  {
    sub_245443964();
    swift_allocObject();
    sub_245443958();
    v3 = sub_245443A78();
    v5 = v4;
    sub_245408F74();
    sub_24544394C();
    sub_2453BDCF8(v3, v5);
    result = swift_release();
    if (v7)
    {
      *(_QWORD *)a2 = v7;
      *(_BYTE *)(a2 + 8) = v8 & 1;
      *(_BYTE *)(a2 + 9) = v9 & 1;
      *(_QWORD *)(a2 + 16) = v10;
      *(_BYTE *)(a2 + 24) = v11 & 1;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_2454369AC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_245436CCC(a1, (void (*)(void))sub_245409018, a2);
}

uint64_t sub_2454369C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_245436170(a1, (uint64_t *)&unk_2574650C8, (unint64_t *)type metadata accessor for ReplicationXPCServerParameters.SendMessage, (unint64_t *)&unk_257464EB0, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerParameters.SendMessage, a2);
}

uint64_t sub_2454369E4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_245436CCC(a1, (void (*)(void))sub_245409134, a2);
}

uint64_t sub_2454369F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_245436CCC(a1, (void (*)(void))sub_2453F6DB0, a2);
}

uint64_t sub_245436A0C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_245436CCC(a1, (void (*)(void))sub_2453F6DF4, a2);
}

uint64_t sub_245436A20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_245436A34(a1, (void (*)(void))sub_2453F7440, a2);
}

uint64_t sub_245436A34@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  if (a1)
  {
    sub_245443964();
    swift_allocObject();
    sub_245443958();
    v5 = sub_245443A78();
    v7 = v6;
    a2();
    sub_24544394C();
    sub_2453BDCF8(v5, v7);
    result = swift_release();
    if (v10)
    {
      *(_QWORD *)a3 = v9;
      *(_QWORD *)(a3 + 8) = v10;
      *(_QWORD *)(a3 + 16) = v11;
      *(_QWORD *)(a3 + 24) = v12;
      *(_QWORD *)(a3 + 32) = v13;
      *(_QWORD *)(a3 + 40) = v14;
      *(_QWORD *)(a3 + 48) = v15;
      *(_OWORD *)(a3 + 56) = v16;
      *(_QWORD *)(a3 + 72) = v17;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_245436B50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_245436170(a1, &qword_2574650C0, (unint64_t *)type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage, (unint64_t *)&unk_257465840, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerResponse.ReceiveMessage, a2);
}

uint64_t sub_245436B74@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_245436CCC(a1, (void (*)(void))sub_2453F7384, a2);
}

uint64_t sub_245436B88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_245436170(a1, (uint64_t *)&unk_2574642C0, (unint64_t *)type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID, (unint64_t *)&unk_25440E0E8, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerResponse.GetLocalDeviceID, a2);
}

uint64_t sub_245436BAC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_245436CCC(a1, (void (*)(void))sub_245409558, a2);
}

uint64_t sub_245436BC0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_245436BD4(a1, (void (*)(void))sub_2453F7754, a2);
}

uint64_t sub_245436BD4@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  char v9;

  if (a1)
  {
    sub_245443964();
    swift_allocObject();
    sub_245443958();
    v5 = sub_245443A78();
    v7 = v6;
    a2();
    sub_24544394C();
    sub_2453BDCF8(v5, v7);
    result = swift_release();
    if (v9 != 2)
    {
      *a3 = v9 & 1;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_245436CCC@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  if (a1)
  {
    sub_245443964();
    swift_allocObject();
    sub_245443958();
    v5 = sub_245443A78();
    v7 = v6;
    a2();
    sub_24544394C();
    sub_2453BDCF8(v5, v7);
    result = swift_release();
    if (v9)
    {
      *a3 = v9;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_245436DBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v17;
  uint64_t result;
  uint64_t v19[2];

  v19[0] = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574650C0);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)v19 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v19 - v12;
  v14 = type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v16(v13, 1, 1, v14);
  if (a1)
  {
    sub_245443964();
    swift_allocObject();
    sub_245443958();
    v3 = sub_245443A78();
    v2 = v17;
    sub_2453B8BF4((unint64_t *)&unk_257465840, type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerResponse.ReceiveMessage);
    sub_24544394C();
    sub_2453D055C((uint64_t)v13, &qword_2574650C0);
    sub_2453BDCF8(v3, v2);
    swift_release();
    v16(v11, 0, 1, v14);
    sub_2453D0428((uint64_t)v11, (uint64_t)v13, &qword_2574650C0);
    sub_2453D02E0((uint64_t)v13, (uint64_t)v8, &qword_2574650C0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v8, 1, v14) != 1)
    {
      sub_2453D055C((uint64_t)v13, &qword_2574650C0);
      return sub_2453D062C((uint64_t)v8, v19[0], type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  sub_2453BDCF8(v3, v2);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_245436FE0(uint64_t a1, _QWORD *a2)
{
  return sub_2454375CC(a1, a2, (void (*)(void))sub_2453FD184);
}

uint64_t sub_245436FF4(uint64_t a1, _QWORD *a2)
{
  return sub_2454375CC(a1, a2, (void (*)(void))sub_2453FD354);
}

double sub_245437008(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  double result;
  __int128 v7;

  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v3 = sub_245443A78();
  v5 = v4;
  sub_2453FD4A8();
  sub_24544394C();
  sub_2453BDCE4(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  sub_2453BDCF8(v3, v5);
  swift_release();
  result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  return result;
}

uint64_t sub_2454370EC(uint64_t a1, _QWORD *a2)
{
  return sub_2454375CC(a1, a2, (void (*)(void))sub_2453FCF3C);
}

uint64_t sub_245437100(uint64_t a1, _QWORD *a2)
{
  return sub_2454375CC(a1, a2, (void (*)(void))sub_2453F6DF4);
}

uint64_t sub_245437114(uint64_t a1, _QWORD *a2)
{
  return sub_2454375CC(a1, a2, (void (*)(void))sub_2453F7384);
}

uint64_t sub_245437128(uint64_t a1, _QWORD *a2)
{
  return sub_2454375CC(a1, a2, (void (*)(void))sub_2453F6DB0);
}

double sub_24543713C(uint64_t a1, uint64_t a2)
{
  return sub_245437484(a1, a2, (void (*)(void))sub_2453F7440);
}

uint64_t sub_245437150(uint64_t a1, _QWORD *a2)
{
  return sub_2454375CC(a1, a2, (void (*)(void))sub_245409558);
}

uint64_t sub_245437164(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;

  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v3 = sub_245443A78();
  v5 = v4;
  sub_245408E2C();
  sub_24544394C();
  sub_24543AC04(*(_QWORD *)a2);
  sub_2453BDCF8(v3, v5);
  result = swift_release();
  *(_QWORD *)a2 = v7;
  *(_BYTE *)(a2 + 8) = v8;
  return result;
}

double sub_245437254(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  double result;
  __int128 v7;
  uint64_t v8;
  char v9;

  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v3 = sub_245443A78();
  v5 = v4;
  sub_245408F74();
  sub_24544394C();
  swift_bridgeObjectRelease();
  sub_2453BDCF8(v3, v5);
  swift_release();
  result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 24) = v9;
  return result;
}

uint64_t sub_245437348(uint64_t a1, _QWORD *a2)
{
  return sub_2454375CC(a1, a2, (void (*)(void))sub_245409134);
}

double sub_24543735C(uint64_t a1, _OWORD *a2)
{
  return sub_2454376C8(a1, a2, (void (*)(void))sub_245408C40);
}

double sub_245437370(uint64_t a1, _OWORD *a2)
{
  return sub_2454376C8(a1, a2, (void (*)(void))sub_245408CE4);
}

uint64_t sub_245437384(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;

  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v3 = sub_245443A78();
  v5 = v4;
  sub_245408ED0();
  sub_24544394C();
  swift_bridgeObjectRelease();
  sub_2453BDCF8(v3, v5);
  result = swift_release();
  *(_QWORD *)a2 = v7;
  *(_BYTE *)(a2 + 8) = v8;
  return result;
}

double sub_245437470(uint64_t a1, uint64_t a2)
{
  return sub_245437484(a1, a2, (void (*)(void))sub_245408A54);
}

double sub_245437484(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  double result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v5 = sub_245443A78();
  v7 = v6;
  a3();
  sub_24544394C();
  sub_2453F1C90(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  sub_2453BDCF8(v5, v7);
  swift_release();
  *(_OWORD *)a2 = v9;
  *(_OWORD *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 32) = v11;
  *(_OWORD *)(a2 + 48) = v12;
  result = *(double *)&v13;
  *(_OWORD *)(a2 + 64) = v13;
  return result;
}

double sub_245437590(uint64_t a1, _OWORD *a2)
{
  return sub_2454376C8(a1, a2, (void (*)(void))sub_245408B9C);
}

double sub_2454375A4(uint64_t a1, _OWORD *a2)
{
  return sub_2454376C8(a1, a2, (void (*)(void))sub_245408AF8);
}

uint64_t sub_2454375B8(uint64_t a1, _QWORD *a2)
{
  return sub_2454375CC(a1, a2, (void (*)(void))sub_245409018);
}

uint64_t sub_2454375CC(uint64_t a1, _QWORD *a2, void (*a3)(void))
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v5 = sub_245443A78();
  v7 = v6;
  a3();
  sub_24544394C();
  swift_bridgeObjectRelease();
  sub_2453BDCF8(v5, v7);
  result = swift_release();
  *a2 = v9;
  return result;
}

double sub_2454376B4(uint64_t a1, _OWORD *a2)
{
  return sub_2454376C8(a1, a2, (void (*)(void))sub_245408D88);
}

double sub_2454376C8(uint64_t a1, _OWORD *a2, void (*a3)(void))
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  double result;
  __int128 v9;

  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v5 = sub_245443A78();
  v7 = v6;
  a3();
  sub_24544394C();
  swift_bridgeObjectRelease();
  sub_2453BDCF8(v5, v7);
  swift_release();
  result = *(double *)&v9;
  *a2 = v9;
  return result;
}

BOOL sub_2454377B0(uint64_t a1, uint64_t a2)
{
  return sub_2454377F8(a1, a2, &qword_257464D00, type metadata accessor for ReplicatorControlXPCServerParameters.Pair, (unint64_t *)&unk_2574658C0, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.Pair);
}

BOOL sub_2454377D4(uint64_t a1, uint64_t a2)
{
  return sub_2454377F8(a1, a2, &qword_257464CF8, type metadata accessor for ReplicatorControlXPCServerParameters.Unpair, (unint64_t *)&unk_2574658B0, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.Unpair);
}

BOOL sub_2454377F8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v23[2];

  v23[0] = a6;
  v10 = __swift_instantiateConcreteTypeFromMangledName(a3);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v23 - v14;
  sub_2453D055C(a2, a3);
  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v16 = a4(0);
  v17 = sub_245443A78();
  v19 = v18;
  sub_2453B8BF4(a5, a4, v23[0]);
  sub_24544394C();
  swift_release();
  sub_2453BDCF8(v17, v19);
  v20 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v15, 0, 1, v16);
  sub_2453D0428((uint64_t)v15, a2, a3);
  sub_2453D02E0(a2, (uint64_t)v13, a3);
  v21 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v13, 1, v16) != 1;
  sub_2453D055C((uint64_t)v13, a3);
  return v21;
}

BOOL sub_2454379A4(uint64_t a1, _BYTE *a2)
{
  return sub_2454381F4(a1, a2, (void (*)(void))sub_2453FCCF4);
}

BOOL sub_2454379B8(uint64_t a1, _BYTE *a2)
{
  return sub_2454381F4(a1, a2, (void (*)(void))sub_2453FCDDC);
}

BOOL sub_2454379CC(uint64_t a1, uint64_t a2)
{
  return sub_2454377F8(a1, a2, &qword_257464CF0, type metadata accessor for ReplicatorControlXPCServerParameters.AllowListID, (unint64_t *)&unk_2574658A0, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.AllowListID);
}

BOOL sub_2454379F0(uint64_t a1, _QWORD *a2)
{
  return sub_2454382D4(a1, a2, (void (*)(void))sub_2453FCF3C);
}

BOOL sub_245437A04(uint64_t a1, uint64_t a2)
{
  return sub_2454377F8(a1, a2, (uint64_t *)&unk_257465880, type metadata accessor for ReplicatorControlXPCServerParameters.GetPushToken, &qword_257464B68, (uint64_t)&protocol conformance descriptor for ReplicatorControlXPCServerParameters.GetPushToken);
}

BOOL sub_245437A28(uint64_t a1, _BYTE *a2)
{
  return sub_2454381F4(a1, a2, (void (*)(void))sub_2453FD09C);
}

BOOL sub_245437A3C(uint64_t a1, _QWORD *a2)
{
  return sub_2454382D4(a1, a2, (void (*)(void))sub_2453FD184);
}

BOOL sub_245437A50(uint64_t a1, _BYTE *a2)
{
  return sub_2454381F4(a1, a2, (void (*)(void))sub_2453FD26C);
}

BOOL sub_245437A64(uint64_t a1, _QWORD *a2)
{
  return sub_2454382D4(a1, a2, (void (*)(void))sub_2453FD354);
}

BOOL sub_245437A78(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;

  sub_2453BDCE4(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v3 = sub_245443A78();
  v5 = v4;
  sub_2453FD4A8();
  sub_24544394C();
  swift_release();
  sub_2453BDCF8(v3, v5);
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v8;
  return v8 >> 60 != 15;
}

BOOL sub_245437B64(uint64_t a1, uint64_t a2)
{
  return sub_245438034(a1, a2, (void (*)(uint64_t, unint64_t))sub_245408A54);
}

BOOL sub_245437B78(uint64_t a1, _QWORD *a2)
{
  return sub_245437BDC(a1, a2, (void (*)(void))sub_245408AF8);
}

BOOL sub_245437B8C(uint64_t a1, _QWORD *a2)
{
  return sub_245437BDC(a1, a2, (void (*)(void))sub_245408B9C);
}

BOOL sub_245437BA0(uint64_t a1, _QWORD *a2)
{
  return sub_245437BDC(a1, a2, (void (*)(void))sub_245408C40);
}

BOOL sub_245437BB4(uint64_t a1, _QWORD *a2)
{
  return sub_245437BDC(a1, a2, (void (*)(void))sub_245408CE4);
}

BOOL sub_245437BC8(uint64_t a1, _QWORD *a2)
{
  return sub_245437BDC(a1, a2, (void (*)(void))sub_245408D88);
}

BOOL sub_245437BDC(uint64_t a1, _QWORD *a2, void (*a3)(void))
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRelease();
  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v5 = sub_245443A78();
  v7 = v6;
  a3();
  sub_24544394C();
  swift_release();
  sub_2453BDCF8(v5, v7);
  *a2 = v9;
  a2[1] = v10;
  return v10 != 0;
}

BOOL sub_245437CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  sub_24543AC04(*(_QWORD *)a2);
  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v3 = sub_245443A78();
  v5 = v4;
  sub_245408E2C();
  sub_24544394C();
  swift_release();
  sub_2453BDCF8(v3, v5);
  *(_QWORD *)a2 = v7;
  *(_BYTE *)(a2 + 8) = v8;
  return v7 != 1;
}

BOOL sub_245437DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char v8;

  swift_bridgeObjectRelease();
  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v3 = sub_245443A78();
  v5 = v4;
  sub_245408ED0();
  sub_24544394C();
  swift_release();
  sub_2453BDCF8(v3, v5);
  *(_QWORD *)a2 = v7;
  *(_BYTE *)(a2 + 8) = v8;
  return v7 != 0;
}

BOOL sub_245437EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v7;
  uint64_t v8;
  char v9;

  swift_bridgeObjectRelease();
  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v3 = sub_245443A78();
  v5 = v4;
  sub_245408F74();
  sub_24544394C();
  swift_release();
  sub_2453BDCF8(v3, v5);
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
  *(_BYTE *)(a2 + 24) = v9;
  return (_QWORD)v7 != 0;
}

BOOL sub_245437FAC(uint64_t a1, _QWORD *a2)
{
  return sub_2454382D4(a1, a2, (void (*)(void))sub_245409018);
}

BOOL sub_245437FC0(uint64_t a1, uint64_t a2)
{
  return sub_2454377F8(a1, a2, (uint64_t *)&unk_2574650C8, type metadata accessor for ReplicationXPCServerParameters.SendMessage, (unint64_t *)&unk_257464EB0, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerParameters.SendMessage);
}

BOOL sub_245437FE4(uint64_t a1, _QWORD *a2)
{
  return sub_2454382D4(a1, a2, (void (*)(void))sub_245409134);
}

BOOL sub_245437FF8(uint64_t a1, _QWORD *a2)
{
  return sub_2454382D4(a1, a2, (void (*)(void))sub_2453F6DB0);
}

BOOL sub_24543800C(uint64_t a1, _QWORD *a2)
{
  return sub_2454382D4(a1, a2, (void (*)(void))sub_2453F6DF4);
}

BOOL sub_245438020(uint64_t a1, uint64_t a2)
{
  return sub_245438034(a1, a2, (void (*)(uint64_t, unint64_t))sub_2453F7440);
}

BOOL sub_245438034(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t))
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  sub_2453F1C90(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v5 = sub_245443A78();
  v7 = v6;
  a3(v5, v6);
  sub_24544394C();
  swift_release();
  sub_2453BDCF8(v5, v7);
  *(_QWORD *)a2 = v9;
  *(_OWORD *)(a2 + 8) = v10;
  *(_OWORD *)(a2 + 24) = v11;
  *(_OWORD *)(a2 + 40) = v12;
  *(_OWORD *)(a2 + 56) = v13;
  *(_QWORD *)(a2 + 72) = v14;
  return (_QWORD)v10 != 0;
}

BOOL sub_245438170(uint64_t a1, uint64_t a2)
{
  return sub_2454377F8(a1, a2, &qword_2574650C0, type metadata accessor for ReplicationXPCServerResponse.ReceiveMessage, (unint64_t *)&unk_257465840, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerResponse.ReceiveMessage);
}

BOOL sub_245438194(uint64_t a1, _QWORD *a2)
{
  return sub_2454382D4(a1, a2, (void (*)(void))sub_2453F7384);
}

BOOL sub_2454381A8(uint64_t a1, uint64_t a2)
{
  return sub_2454377F8(a1, a2, (uint64_t *)&unk_2574642C0, type metadata accessor for ReplicationXPCServerResponse.GetLocalDeviceID, (unint64_t *)&unk_25440E0E8, (uint64_t)&protocol conformance descriptor for ReplicationXPCServerResponse.GetLocalDeviceID);
}

BOOL sub_2454381CC(uint64_t a1, _QWORD *a2)
{
  return sub_2454382D4(a1, a2, (void (*)(void))sub_245409558);
}

BOOL sub_2454381E0(uint64_t a1, _BYTE *a2)
{
  return sub_2454381F4(a1, a2, (void (*)(void))sub_2453F7754);
}

BOOL sub_2454381F4(uint64_t a1, _BYTE *a2, void (*a3)(void))
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v9;

  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v5 = sub_245443A78();
  v7 = v6;
  a3();
  sub_24544394C();
  swift_release();
  sub_2453BDCF8(v5, v7);
  *a2 = v9;
  return v9 != 2;
}

BOOL sub_2454382D4(uint64_t a1, _QWORD *a2, void (*a3)(void))
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;

  swift_bridgeObjectRelease();
  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v5 = sub_245443A78();
  v7 = v6;
  a3();
  sub_24544394C();
  swift_release();
  sub_2453BDCF8(v5, v7);
  *a2 = v9;
  return v9 != 0;
}

_BYTE *MigrationServiceError.init(code:underlyingError:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_BYTE *)a3 = *result;
  *(_QWORD *)(a3 + 8) = a2;
  return result;
}

uint64_t MigrationXPCServerResponse.GetLocalDeviceID.init(localDeviceID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2453D0428(a1, a2, (uint64_t *)&unk_25440E8F0);
}

id MigrationXPCServerResponseGetRecords.__allocating_init(records:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC18ReplicatorServices36MigrationXPCServerResponseGetRecords_records] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

ReplicatorServices::MigrationXPCServerResponse::GetDevices __swiftcall MigrationXPCServerResponse.GetDevices.init(devices:)(ReplicatorServices::MigrationXPCServerResponse::GetDevices devices)
{
  ReplicatorServices::MigrationXPCServerResponse::GetDevices *v1;

  v1->devices._rawValue = devices.devices._rawValue;
  return devices;
}

void static MigrationServiceDefinition.domain.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000026;
  a1[1] = 0x800000024544F1E0;
  a1[2] = 0xD00000000000001CLL;
  a1[3] = 0x800000024544F210;
}

unint64_t static MigrationServiceDefinition.serviceName.getter()
{
  return 0xD000000000000026;
}

void sub_245438494(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000026;
  a1[1] = 0x800000024544F1E0;
  a1[2] = 0xD00000000000001CLL;
  a1[3] = 0x800000024544F210;
}

unint64_t sub_2454384CC()
{
  return 0xD000000000000026;
}

ReplicatorServices::MigrationServiceError::Code_optional __swiftcall MigrationServiceError.Code.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (ReplicatorServices::MigrationServiceError::Code_optional)rawValue;
}

uint64_t MigrationServiceError.Code.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

ReplicatorServices::MigrationServiceError::Code_optional sub_245438504(Swift::Int *a1)
{
  return MigrationServiceError.Code.init(rawValue:)(*a1);
}

unint64_t static MigrationServiceError.errorDomain.getter()
{
  return 0xD00000000000002DLL;
}

uint64_t MigrationServiceError.errorCode.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t MigrationServiceError.errorUserInfo.getter()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t *boxed_opaque_existential_2;
  uint64_t v5;

  if (!*(_QWORD *)(v0 + 8))
    return sub_245434D9C(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257465690);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245445910;
  *(_QWORD *)(inited + 32) = sub_245443D9C();
  *(_QWORD *)(inited + 40) = v2;
  swift_getErrorValue();
  *(_QWORD *)(inited + 72) = v5;
  boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2((uint64_t *)(inited + 48));
  (*(void (**)(uint64_t *))(*(_QWORD *)(v5 - 8) + 16))(boxed_opaque_existential_2);
  return sub_245434D9C(inited);
}

unint64_t sub_2454385F4()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_245438610()
{
  sub_24543ABC0();
  return sub_2454443C0();
}

uint64_t sub_245438638()
{
  sub_24543ABC0();
  return sub_2454443B4();
}

uint64_t MigrationXPCServerResponse.GetLocalDeviceID.localDeviceID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_2453D02E0(v1, a1, (uint64_t *)&unk_25440E8F0);
}

uint64_t sub_245438684()
{
  sub_2454398FC();
  return sub_245444468();
}

uint64_t sub_2454386AC()
{
  sub_2454398FC();
  return sub_245444474();
}

uint64_t MigrationXPCServerResponse.GetLocalDeviceID.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465698);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2454398FC();
  sub_24544445C();
  sub_245443B14();
  sub_2453B8BF4(&qword_2574639F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  sub_245444330();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t MigrationXPCServerResponse.GetLocalDeviceID.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t LocalDeviceID;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
  MEMORY[0x24BDAC7A8](v4);
  v16 = (uint64_t)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2574656B0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalDeviceID = type metadata accessor for MigrationXPCServerResponse.GetLocalDeviceID();
  MEMORY[0x24BDAC7A8](LocalDeviceID);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2454398FC();
  sub_245444450();
  if (!v2)
  {
    sub_245443B14();
    sub_2453B8BF4(&qword_25440E1B8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    sub_2454442AC();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    sub_2453D0428(v16, (uint64_t)v12, (uint64_t *)&unk_25440E8F0);
    sub_2453D062C((uint64_t)v12, v15, (uint64_t (*)(_QWORD))type metadata accessor for MigrationXPCServerResponse.GetLocalDeviceID);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_2454389B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return MigrationXPCServerResponse.GetLocalDeviceID.init(from:)(a1, a2);
}

uint64_t sub_2454389C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465698);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2454398FC();
  sub_24544445C();
  sub_245443B14();
  sub_2453B8BF4(&qword_2574639F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  sub_245444330();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_245438AD8()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  sub_245443994();
  swift_allocObject();
  sub_245443988();
  sub_2453B8BF4((unint64_t *)&unk_257465590, (uint64_t (*)(uint64_t))type metadata accessor for MigrationXPCServerResponse.GetLocalDeviceID, (uint64_t)&protocol conformance descriptor for MigrationXPCServerResponse.GetLocalDeviceID);
  v0 = sub_24544397C();
  v2 = v1;
  v3 = sub_245443A6C();
  sub_2453BDCF8(v0, v2);
  swift_release();
  return v3;
}

uint64_t sub_245438BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465830);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v8 = sub_245443A78();
  v10 = v9;
  sub_2453B8BF4((unint64_t *)&unk_257465758, (uint64_t (*)(uint64_t))type metadata accessor for MigrationXPCServerResponse.GetLocalDeviceID, (uint64_t)&protocol conformance descriptor for MigrationXPCServerResponse.GetLocalDeviceID);
  sub_24544394C();
  sub_2453D055C(a2, &qword_257465830);
  sub_2453BDCF8(v8, v10);
  swift_release();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v7, 0, 1, a3);
  return sub_2453D0428((uint64_t)v7, a2, &qword_257465830);
}

BOOL sub_245438D14(uint64_t a1, uint64_t a2)
{
  return sub_2454377F8(a1, a2, &qword_257465830, (uint64_t (*)(uint64_t))type metadata accessor for MigrationXPCServerResponse.GetLocalDeviceID, (unint64_t *)&unk_257465758, (uint64_t)&protocol conformance descriptor for MigrationXPCServerResponse.GetLocalDeviceID);
}

uint64_t sub_245438D4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_245436170(a1, &qword_257465830, (unint64_t *)type metadata accessor for MigrationXPCServerResponse.GetLocalDeviceID, (unint64_t *)&unk_257465758, (uint64_t)&protocol conformance descriptor for MigrationXPCServerResponse.GetLocalDeviceID, a2);
}

uint64_t MigrationXPCServerResponse.GetDevices.devices.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_245438D88()
{
  sub_24543997C();
  return sub_245444468();
}

uint64_t sub_245438DB0()
{
  sub_24543997C();
  return sub_245444474();
}

uint64_t MigrationXPCServerResponse.GetDevices.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574656C0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24543997C();
  sub_24544445C();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB00);
  sub_2453FBA04((unint64_t *)&qword_257463B10, (unint64_t *)&unk_257463A40, (uint64_t)&protocol conformance descriptor for ReplicatorDevice, MEMORY[0x24BEE12A0]);
  sub_245444360();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t MigrationXPCServerResponse.GetDevices.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574656D8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24543997C();
  sub_245444450();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB00);
    sub_2453FBA04((unint64_t *)&qword_25440E660, &qword_25440E4D0, (uint64_t)&protocol conformance descriptor for ReplicatorDevice, MEMORY[0x24BEE12D0]);
    sub_2454442DC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_245439048@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return MigrationXPCServerResponse.GetDevices.init(from:)(a1, a2);
}

uint64_t sub_24543905C(_QWORD *a1)
{
  return MigrationXPCServerResponse.GetDevices.encode(to:)(a1);
}

uint64_t sub_245439070(uint64_t a1, uint64_t a2)
{
  return sub_2453FC66C(a1, a2, (void (*)(void))sub_24542A2CC);
}

uint64_t sub_24543907C(uint64_t a1, _QWORD *a2)
{
  return sub_2454375CC(a1, a2, (void (*)(void))sub_24543A354);
}

BOOL sub_2454390A0(uint64_t a1, _QWORD *a2)
{
  return sub_2454382D4(a1, a2, (void (*)(void))sub_24543A354);
}

uint64_t sub_2454390C8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_245436CCC(a1, (void (*)(void))sub_24543A354, a2);
}

uint64_t sub_2454390EC()
{
  sub_2454399C0();
  return sub_245444468();
}

uint64_t sub_245439114()
{
  sub_2454399C0();
  return sub_245444474();
}

uint64_t MigrationXPCServerResponse.GetClientDescriptors.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574656E0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2454399C0();
  sub_24544445C();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB10);
  sub_2454137AC(&qword_25440E668, &qword_25440EB10, (uint64_t (*)(void))sub_245407E20, MEMORY[0x24BEE12A0]);
  sub_245444360();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t MigrationXPCServerResponse.GetClientDescriptors.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2574656F8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_2454399C0();
  sub_245444450();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25440EB10);
    sub_2454137AC((unint64_t *)&unk_257463B30, &qword_25440EB10, (uint64_t (*)(void))sub_245407E64, MEMORY[0x24BEE12D0]);
    sub_2454442DC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_2454393AC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return MigrationXPCServerResponse.GetClientDescriptors.init(from:)(a1, a2);
}

uint64_t sub_2454393C0(_QWORD *a1)
{
  return MigrationXPCServerResponse.GetClientDescriptors.encode(to:)(a1);
}

uint64_t sub_2454393D4(uint64_t a1, uint64_t a2)
{
  return sub_2453FC66C(a1, a2, (void (*)(void))sub_24542A288);
}

uint64_t sub_2454393E0(uint64_t a1, _QWORD *a2)
{
  return sub_2454375CC(a1, a2, (void (*)(void))sub_24543A3F8);
}

BOOL sub_245439404(uint64_t a1, _QWORD *a2)
{
  return sub_2454382D4(a1, a2, (void (*)(void))sub_24543A3F8);
}

uint64_t sub_24543942C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_245436CCC(a1, (void (*)(void))sub_24543A3F8, a2);
}

uint64_t sub_245439450()
{
  return 0x74616E6974736564;
}

uint64_t sub_245439470@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x74616E6974736564 && a2 == 0xEC000000736E6F69)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_245444390();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_24543951C()
{
  sub_245439A04();
  return sub_245444468();
}

uint64_t sub_245439544()
{
  sub_245439A04();
  return sub_245444474();
}

uint64_t MigrationXPCServerResponse.GetRecordDestinations.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465700);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245439A04();
  sub_24544445C();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257465710);
  sub_2454137AC((unint64_t *)&unk_257465718, &qword_257465710, (uint64_t (*)(void))sub_245408040, MEMORY[0x24BEE12A0]);
  sub_245444360();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t MigrationXPCServerResponse.GetRecordDestinations.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465728);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245439A04();
  sub_245444450();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257465710);
    sub_2454137AC((unint64_t *)&unk_257465730, &qword_257465710, (uint64_t (*)(void))sub_2454080C8, MEMORY[0x24BEE12D0]);
    sub_2454442DC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_2454397DC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return MigrationXPCServerResponse.GetRecordDestinations.init(from:)(a1, a2);
}

uint64_t sub_2454397F0(_QWORD *a1)
{
  return MigrationXPCServerResponse.GetRecordDestinations.encode(to:)(a1);
}

uint64_t sub_245439804(uint64_t a1, uint64_t a2)
{
  return sub_2453FC66C(a1, a2, (void (*)(void))sub_24543A230);
}

uint64_t sub_245439810(uint64_t a1, _QWORD *a2)
{
  return sub_2454375CC(a1, a2, (void (*)(void))sub_24543A49C);
}

BOOL sub_245439834(uint64_t a1, _QWORD *a2)
{
  return sub_2454382D4(a1, a2, (void (*)(void))sub_24543A49C);
}

uint64_t sub_24543985C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_245436CCC(a1, (void (*)(void))sub_24543A49C, a2);
}

uint64_t static MigrationXPCServerResponseGetRecords.supportsBSXPCSecureCoding()()
{
  return 1;
}

Swift::Bool __swiftcall MigrationXPCServerResponseGetRecords.supportsBSXPCSecureCoding()()
{
  return 1;
}

uint64_t MigrationXPCServerResponseGetRecords.records.getter()
{
  return swift_bridgeObjectRetain();
}

id MigrationXPCServerResponseGetRecords.init(records:)(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v1[OBJC_IVAR____TtC18ReplicatorServices36MigrationXPCServerResponseGetRecords_records] = a1;
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

unint64_t sub_2454398FC()
{
  unint64_t result;

  result = qword_2574656A0;
  if (!qword_2574656A0)
  {
    result = MEMORY[0x249534380](&unk_24544CB64, &type metadata for MigrationXPCServerResponse.GetLocalDeviceID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574656A0);
  }
  return result;
}

uint64_t type metadata accessor for MigrationXPCServerResponse.GetLocalDeviceID()
{
  uint64_t result;

  result = qword_2574657B8;
  if (!qword_2574657B8)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_24543997C()
{
  unint64_t result;

  result = qword_2574656C8;
  if (!qword_2574656C8)
  {
    result = MEMORY[0x249534380](&unk_24544CB14, &type metadata for MigrationXPCServerResponse.GetDevices.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574656C8);
  }
  return result;
}

unint64_t sub_2454399C0()
{
  unint64_t result;

  result = qword_2574656E8;
  if (!qword_2574656E8)
  {
    result = MEMORY[0x249534380](&unk_24544CAC4, &type metadata for MigrationXPCServerResponse.GetClientDescriptors.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574656E8);
  }
  return result;
}

unint64_t sub_245439A04()
{
  unint64_t result;

  result = qword_257465708;
  if (!qword_257465708)
  {
    result = MEMORY[0x249534380](&unk_24544CA74, &type metadata for MigrationXPCServerResponse.GetRecordDestinations.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465708);
  }
  return result;
}

void MigrationXPCServerResponseGetRecords.encode(withBSXPCCoder:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC18ReplicatorServices36MigrationXPCServerResponseGetRecords_records);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    sub_2454441A4();
    v5 = 32;
    do
    {
      v6 = *(id *)(v3 + v5);
      sub_245444180();
      sub_2454441B0();
      sub_2454441BC();
      sub_24544418C();
      v5 += 16;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    v7 = *(_QWORD *)(v3 + 16);
    if (v7)
    {
      v19 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      sub_2453F1DA8(0, v7, 0);
      v8 = 40;
      do
      {
        v9 = *(_QWORD *)(v3 + v8);
        v11 = *(_QWORD *)(v19 + 16);
        v10 = *(_QWORD *)(v19 + 24);
        swift_bridgeObjectRetain();
        if (v11 >= v10 >> 1)
          sub_2453F1DA8(v10 > 1, v11 + 1, 1);
        *(_QWORD *)(v19 + 16) = v11 + 1;
        *(_QWORD *)(v19 + 8 * v11 + 32) = v9;
        v8 += 16;
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease();
    }
  }
  type metadata accessor for ReplicationXPCServerParametersRecord(0);
  v12 = (void *)sub_245443E8C();
  swift_bridgeObjectRelease();
  v13 = (void *)sub_245443D78();
  objc_msgSend(a1, sel_encodeCollection_forKey_, v12, v13);

  sub_245443994();
  swift_allocObject();
  sub_245443988();
  sub_24543A230();
  v14 = sub_24544397C();
  v16 = v15;
  v17 = (void *)sub_245443A6C();
  sub_2453BDCF8(v14, v16);
  swift_bridgeObjectRelease();
  swift_release();
  v18 = (void *)sub_245443D78();
  objc_msgSend(a1, sel_encodeObject_forKey_, v17, v18);

}

uint64_t MigrationXPCServerResponseGetRecords.__allocating_init(bsxpcCoder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return MigrationXPCServerResponseGetRecords.init(bsxpcCoder:)(a1);
}

uint64_t MigrationXPCServerResponseGetRecords.init(bsxpcCoder:)(void *a1)
{
  void *v1;
  objc_class *ObjectType;
  uint64_t ObjCClassFromMetadata;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  objc_class *v25;
  objc_super v26;
  uint64_t v27;
  _OWORD v28[2];
  _QWORD v29[4];

  ObjectType = (objc_class *)swift_getObjectType();
  sub_24540D76C(0, &qword_25440DEA8);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  type metadata accessor for ReplicationXPCServerParametersRecord(0);
  v5 = swift_getObjCClassFromMetadata();
  v6 = v1;
  v7 = (void *)sub_245443D78();
  v8 = objc_msgSend(a1, sel_decodeCollectionOfClass_containingClass_forKey_, ObjCClassFromMetadata, v5, v7);

  if (!v8
    || (v29[0] = v8,
        __swift_instantiateConcreteTypeFromMangledName(&qword_25440E060),
        __swift_instantiateConcreteTypeFromMangledName(&qword_25440E050),
        (swift_dynamicCast() & 1) == 0))
  {
    swift_unknownObjectRelease();

LABEL_6:
    swift_deallocPartialClassInstance();
    return 0;
  }
  v9 = *(_QWORD *)&v28[0];
  sub_24540D76C(0, (unint64_t *)&unk_25440E070);
  v10 = swift_getObjCClassFromMetadata();
  v11 = (void *)sub_245443D78();
  v12 = objc_msgSend(a1, sel_decodeObjectOfClass_forKey_, v10, v11);

  if (v12)
  {
    sub_24544409C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v28, 0, sizeof(v28));
  }
  sub_2453D0428((uint64_t)v28, (uint64_t)v29, &qword_25440E7F8);
  if (!v29[3])
  {
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
    sub_2453D055C((uint64_t)v29, &qword_25440E7F8);
    goto LABEL_6;
  }
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  v15 = v27;
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    v16 = sub_245444204();
    result = swift_bridgeObjectRelease();
    if (v16 < 0)
    {
      __break(1u);
      goto LABEL_31;
    }
  }
  else
  {
    v16 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v16)
  {
    swift_bridgeObjectRelease();
    v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_28:
    swift_bridgeObjectRelease();
    *(_QWORD *)&v6[OBJC_IVAR____TtC18ReplicatorServices36MigrationXPCServerResponseGetRecords_records] = v18;

    v26.receiver = v6;
    v26.super_class = ObjectType;
    v13 = objc_msgSendSuper2(&v26, sel_init);
    swift_unknownObjectRelease();
    return (uint64_t)v13;
  }
  v25 = ObjectType;
  if ((unint64_t)(v16 - 1) < *(_QWORD *)(v27 + 16))
  {
    v17 = 0;
    v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      if ((v9 & 0xC000000000000001) != 0)
        v19 = (id)MEMORY[0x249533B58](v17, v9);
      else
        v19 = *(id *)(v9 + 8 * v17 + 32);
      v20 = v19;
      v21 = *(_QWORD *)(v15 + 8 * v17 + 32);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v18 = sub_2453F1A90(0, v18[2] + 1, 1, v18);
      v23 = v18[2];
      v22 = v18[3];
      if (v23 >= v22 >> 1)
        v18 = sub_2453F1A90((_QWORD *)(v22 > 1), v23 + 1, 1, v18);
      ++v17;
      v18[2] = v23 + 1;
      v24 = &v18[2 * v23];
      v24[4] = v20;
      v24[5] = v21;
    }
    while (v16 != v17);
    swift_bridgeObjectRelease();
    ObjectType = v25;
    goto LABEL_28;
  }
LABEL_31:
  __break(1u);
  return result;
}

id MigrationXPCServerResponseGetRecords.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void MigrationXPCServerResponseGetRecords.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id MigrationXPCServerResponseGetRecords.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_24543A230()
{
  unint64_t result;

  result = qword_257465740;
  if (!qword_257465740)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for MigrationXPCServerResponse.GetRecordDestinations, &type metadata for MigrationXPCServerResponse.GetRecordDestinations);
    atomic_store(result, (unint64_t *)&qword_257465740);
  }
  return result;
}

unint64_t sub_24543A278()
{
  unint64_t result;

  result = qword_257465748;
  if (!qword_257465748)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for MigrationServiceError.Code, &type metadata for MigrationServiceError.Code);
    atomic_store(result, (unint64_t *)&qword_257465748);
  }
  return result;
}

uint64_t sub_24543A2C0(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_2453B8BF4((unint64_t *)&unk_257465758, (uint64_t (*)(uint64_t))type metadata accessor for MigrationXPCServerResponse.GetLocalDeviceID, (uint64_t)&protocol conformance descriptor for MigrationXPCServerResponse.GetLocalDeviceID);
  a1[2] = sub_2453B8BF4((unint64_t *)&unk_257465590, (uint64_t (*)(uint64_t))type metadata accessor for MigrationXPCServerResponse.GetLocalDeviceID, (uint64_t)&protocol conformance descriptor for MigrationXPCServerResponse.GetLocalDeviceID);
  result = sub_2453B8BF4(&qword_257465768, (uint64_t (*)(uint64_t))type metadata accessor for MigrationXPCServerResponse.GetLocalDeviceID, (uint64_t)&protocol conformance descriptor for MigrationXPCServerResponse.GetLocalDeviceID);
  a1[3] = result;
  return result;
}

uint64_t sub_24543A338(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_24543A354, (uint64_t (*)(void))sub_24542A2CC, (uint64_t (*)(void))sub_24543A398);
}

unint64_t sub_24543A354()
{
  unint64_t result;

  result = qword_257465770;
  if (!qword_257465770)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for MigrationXPCServerResponse.GetDevices, &type metadata for MigrationXPCServerResponse.GetDevices);
    atomic_store(result, (unint64_t *)&qword_257465770);
  }
  return result;
}

unint64_t sub_24543A398()
{
  unint64_t result;

  result = qword_257465780;
  if (!qword_257465780)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for MigrationXPCServerResponse.GetDevices, &type metadata for MigrationXPCServerResponse.GetDevices);
    atomic_store(result, (unint64_t *)&qword_257465780);
  }
  return result;
}

uint64_t sub_24543A3DC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_24543A3F8, (uint64_t (*)(void))sub_24542A288, (uint64_t (*)(void))sub_24543A43C);
}

unint64_t sub_24543A3F8()
{
  unint64_t result;

  result = qword_257465788;
  if (!qword_257465788)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for MigrationXPCServerResponse.GetClientDescriptors, &type metadata for MigrationXPCServerResponse.GetClientDescriptors);
    atomic_store(result, (unint64_t *)&qword_257465788);
  }
  return result;
}

unint64_t sub_24543A43C()
{
  unint64_t result;

  result = qword_257465798;
  if (!qword_257465798)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for MigrationXPCServerResponse.GetClientDescriptors, &type metadata for MigrationXPCServerResponse.GetClientDescriptors);
    atomic_store(result, (unint64_t *)&qword_257465798);
  }
  return result;
}

uint64_t sub_24543A480(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_2453FD464(a1, a2, a3, (uint64_t (*)(void))sub_24543A49C, (uint64_t (*)(void))sub_24543A230, (uint64_t (*)(void))sub_24543A4E0);
}

unint64_t sub_24543A49C()
{
  unint64_t result;

  result = qword_2574657A0;
  if (!qword_2574657A0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for MigrationXPCServerResponse.GetRecordDestinations, &type metadata for MigrationXPCServerResponse.GetRecordDestinations);
    atomic_store(result, (unint64_t *)&qword_2574657A0);
  }
  return result;
}

unint64_t sub_24543A4E0()
{
  unint64_t result;

  result = qword_2574657A8;
  if (!qword_2574657A8)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for MigrationXPCServerResponse.GetRecordDestinations, &type metadata for MigrationXPCServerResponse.GetRecordDestinations);
    atomic_store(result, (unint64_t *)&qword_2574657A8);
  }
  return result;
}

ValueMetadata *type metadata accessor for MigrationServiceDefinition()
{
  return &type metadata for MigrationServiceDefinition;
}

ValueMetadata *type metadata accessor for MigrationServiceError()
{
  return &type metadata for MigrationServiceError;
}

uint64_t storeEnumTagSinglePayload for MigrationServiceError.Code(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24543A590 + 4 * byte_24544C235[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24543A5C4 + 4 * byte_24544C230[v4]))();
}

uint64_t sub_24543A5C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24543A5CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24543A5D4);
  return result;
}

uint64_t sub_24543A5E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24543A5E8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24543A5EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24543A5F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MigrationServiceError.Code()
{
  return &type metadata for MigrationServiceError.Code;
}

ValueMetadata *type metadata accessor for MigrationXPCServerResponse()
{
  return &type metadata for MigrationXPCServerResponse;
}

uint64_t getEnumTagSinglePayload for MigrationXPCServerResponse.GetLocalDeviceID()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24543A62C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MigrationXPCServerResponse.GetLocalDeviceID()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24543A678(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_25440E8F0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_24543A6BC()
{
  unint64_t v0;

  sub_2453F5D28();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

ValueMetadata *type metadata accessor for MigrationXPCServerResponse.GetDevices()
{
  return &type metadata for MigrationXPCServerResponse.GetDevices;
}

ValueMetadata *type metadata accessor for MigrationXPCServerResponse.GetClientDescriptors()
{
  return &type metadata for MigrationXPCServerResponse.GetClientDescriptors;
}

ValueMetadata *type metadata accessor for MigrationXPCServerResponse.GetRecordDestinations()
{
  return &type metadata for MigrationXPCServerResponse.GetRecordDestinations;
}

uint64_t type metadata accessor for MigrationXPCServerResponseGetRecords()
{
  return objc_opt_self();
}

uint64_t method lookup function for MigrationXPCServerResponseGetRecords()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MigrationXPCServerResponseGetRecords.__allocating_init(records:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of MigrationXPCServerResponseGetRecords.__allocating_init(bsxpcCoder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

ValueMetadata *type metadata accessor for MigrationXPCServerResponse.GetRecordDestinations.CodingKeys()
{
  return &type metadata for MigrationXPCServerResponse.GetRecordDestinations.CodingKeys;
}

ValueMetadata *type metadata accessor for MigrationXPCServerResponse.GetClientDescriptors.CodingKeys()
{
  return &type metadata for MigrationXPCServerResponse.GetClientDescriptors.CodingKeys;
}

ValueMetadata *type metadata accessor for MigrationXPCServerResponse.GetDevices.CodingKeys()
{
  return &type metadata for MigrationXPCServerResponse.GetDevices.CodingKeys;
}

uint64_t _s18ReplicatorServices26MigrationXPCServerResponseO21GetRecordDestinationsV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_24543A804 + 4 * byte_24544C23A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24543A824 + 4 * byte_24544C23F[v4]))();
}

_BYTE *sub_24543A804(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24543A824(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24543A82C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24543A834(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24543A83C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24543A844(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MigrationXPCServerResponse.GetLocalDeviceID.CodingKeys()
{
  return &type metadata for MigrationXPCServerResponse.GetLocalDeviceID.CodingKeys;
}

unint64_t sub_24543A864()
{
  unint64_t result;

  result = qword_2574657D0;
  if (!qword_2574657D0)
  {
    result = MEMORY[0x249534380](&unk_24544C824, &type metadata for MigrationXPCServerResponse.GetLocalDeviceID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574657D0);
  }
  return result;
}

unint64_t sub_24543A8AC()
{
  unint64_t result;

  result = qword_2574657D8;
  if (!qword_2574657D8)
  {
    result = MEMORY[0x249534380](&unk_24544C8DC, &type metadata for MigrationXPCServerResponse.GetDevices.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574657D8);
  }
  return result;
}

unint64_t sub_24543A8F4()
{
  unint64_t result;

  result = qword_2574657E0;
  if (!qword_2574657E0)
  {
    result = MEMORY[0x249534380](&unk_24544C994, &type metadata for MigrationXPCServerResponse.GetClientDescriptors.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574657E0);
  }
  return result;
}

unint64_t sub_24543A93C()
{
  unint64_t result;

  result = qword_2574657E8;
  if (!qword_2574657E8)
  {
    result = MEMORY[0x249534380](&unk_24544CA4C, &type metadata for MigrationXPCServerResponse.GetRecordDestinations.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574657E8);
  }
  return result;
}

unint64_t sub_24543A984()
{
  unint64_t result;

  result = qword_2574657F0;
  if (!qword_2574657F0)
  {
    result = MEMORY[0x249534380](&unk_24544C9BC, &type metadata for MigrationXPCServerResponse.GetRecordDestinations.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574657F0);
  }
  return result;
}

unint64_t sub_24543A9CC()
{
  unint64_t result;

  result = qword_2574657F8;
  if (!qword_2574657F8)
  {
    result = MEMORY[0x249534380](&unk_24544C9E4, &type metadata for MigrationXPCServerResponse.GetRecordDestinations.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2574657F8);
  }
  return result;
}

unint64_t sub_24543AA14()
{
  unint64_t result;

  result = qword_257465800;
  if (!qword_257465800)
  {
    result = MEMORY[0x249534380](&unk_24544C904, &type metadata for MigrationXPCServerResponse.GetClientDescriptors.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465800);
  }
  return result;
}

unint64_t sub_24543AA5C()
{
  unint64_t result;

  result = qword_257465808;
  if (!qword_257465808)
  {
    result = MEMORY[0x249534380](&unk_24544C92C, &type metadata for MigrationXPCServerResponse.GetClientDescriptors.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465808);
  }
  return result;
}

unint64_t sub_24543AAA4()
{
  unint64_t result;

  result = qword_257465810;
  if (!qword_257465810)
  {
    result = MEMORY[0x249534380](&unk_24544C84C, &type metadata for MigrationXPCServerResponse.GetDevices.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465810);
  }
  return result;
}

unint64_t sub_24543AAEC()
{
  unint64_t result;

  result = qword_257465818;
  if (!qword_257465818)
  {
    result = MEMORY[0x249534380](&unk_24544C874, &type metadata for MigrationXPCServerResponse.GetDevices.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465818);
  }
  return result;
}

unint64_t sub_24543AB34()
{
  unint64_t result;

  result = qword_257465820;
  if (!qword_257465820)
  {
    result = MEMORY[0x249534380](&unk_24544C794, &type metadata for MigrationXPCServerResponse.GetLocalDeviceID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465820);
  }
  return result;
}

unint64_t sub_24543AB7C()
{
  unint64_t result;

  result = qword_257465828;
  if (!qword_257465828)
  {
    result = MEMORY[0x249534380](&unk_24544C7BC, &type metadata for MigrationXPCServerResponse.GetLocalDeviceID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465828);
  }
  return result;
}

unint64_t sub_24543ABC0()
{
  unint64_t result;

  result = qword_257465838;
  if (!qword_257465838)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for MigrationServiceError, &type metadata for MigrationServiceError);
    atomic_store(result, (unint64_t *)&qword_257465838);
  }
  return result;
}

uint64_t sub_24543AC04(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRelease();
  return result;
}

void static StateCaptureServiceDefinition.domain.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000014;
  a1[1] = 0x800000024544DCB0;
  a1[2] = 0xD00000000000001CLL;
  a1[3] = 0x800000024544DCD0;
}

unint64_t static StateCaptureServiceDefinition.serviceName.getter()
{
  return 0xD00000000000001ALL;
}

unint64_t sub_24543AC78()
{
  return 0xD00000000000001ALL;
}

ReplicatorServices::StateCaptureServiceError::Code_optional __swiftcall StateCaptureServiceError.Code.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (ReplicatorServices::StateCaptureServiceError::Code_optional)rawValue;
}

uint64_t StateCaptureServiceError.Code.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

ReplicatorServices::StateCaptureServiceError::Code_optional sub_24543ACB0(Swift::Int *a1)
{
  return StateCaptureServiceError.Code.init(rawValue:)(*a1);
}

unint64_t static StateCaptureServiceError.errorDomain.getter()
{
  return 0xD000000000000028;
}

_BYTE *StateCaptureServiceError.init(code:underlyingError:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_BYTE *)a3 = *result;
  *(_QWORD *)(a3 + 8) = a2;
  return result;
}

uint64_t StateCaptureServiceError.errorCode.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t StateCaptureServiceError.errorUserInfo.getter()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t *boxed_opaque_existential_2;
  uint64_t v5;

  if (!*(_QWORD *)(v0 + 8))
    return sub_245434D9C(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257465690);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_245445910;
  *(_QWORD *)(inited + 32) = sub_245443D9C();
  *(_QWORD *)(inited + 40) = v2;
  swift_getErrorValue();
  *(_QWORD *)(inited + 72) = v5;
  boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2((uint64_t *)(inited + 48));
  (*(void (**)(uint64_t *))(*(_QWORD *)(v5 - 8) + 16))(boxed_opaque_existential_2);
  return sub_245434D9C(inited);
}

unint64_t sub_24543ADB4()
{
  unint64_t result;

  result = qword_2574658D0;
  if (!qword_2574658D0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for StateCaptureServiceError.Code, &type metadata for StateCaptureServiceError.Code);
    atomic_store(result, (unint64_t *)&qword_2574658D0);
  }
  return result;
}

unint64_t sub_24543ADFC()
{
  unint64_t result;

  result = qword_2574658D8;
  if (!qword_2574658D8)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for StateCaptureServiceError, &type metadata for StateCaptureServiceError);
    atomic_store(result, (unint64_t *)&qword_2574658D8);
  }
  return result;
}

unint64_t sub_24543AE40()
{
  return 0xD000000000000028;
}

uint64_t sub_24543AE5C()
{
  sub_24543AF98();
  return sub_2454443C0();
}

uint64_t sub_24543AE84()
{
  sub_24543AF98();
  return sub_2454443B4();
}

ValueMetadata *type metadata accessor for StateCaptureServiceDefinition()
{
  return &type metadata for StateCaptureServiceDefinition;
}

ValueMetadata *type metadata accessor for StateCaptureServiceError()
{
  return &type metadata for StateCaptureServiceError;
}

uint64_t storeEnumTagSinglePayload for StateCaptureServiceError.Code(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24543AF18 + 4 * byte_24544CBC5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24543AF4C + 4 * byte_24544CBC0[v4]))();
}

uint64_t sub_24543AF4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24543AF54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24543AF5CLL);
  return result;
}

uint64_t sub_24543AF68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24543AF70);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24543AF74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24543AF7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StateCaptureServiceError.Code()
{
  return &type metadata for StateCaptureServiceError.Code;
}

unint64_t sub_24543AF98()
{
  unint64_t result;

  result = qword_2574658E0;
  if (!qword_2574658E0)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for StateCaptureServiceError, &type metadata for StateCaptureServiceError);
    atomic_store(result, (unint64_t *)&qword_2574658E0);
  }
  return result;
}

uint64_t URL.extendedAttributes()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  sub_24543B3C8();
  if (v0)
    return (uint64_t)v1;
  v4 = *(_QWORD *)(v2 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4B00];
  }
  v1 = (_QWORD *)MEMORY[0x24BEE4B00];
  v5 = (uint64_t *)(v2 + 40);
  while (1)
  {
    v7 = *(v5 - 1);
    v8 = *v5;
    MEMORY[0x24BDAC7A8](v2);
    swift_bridgeObjectRetain();
    sub_2454439F4();
    v24 = v5;
    v25 = v4;
    v9 = v26;
    sub_2453CFFAC(v26, v27);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v26 = (uint64_t)v1;
    v12 = sub_2453C64D8(v7, v8);
    v13 = v1[2];
    v14 = (v11 & 1) == 0;
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
      break;
    v16 = v11;
    if (v1[3] >= v15)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v11 & 1) != 0)
          goto LABEL_5;
      }
      else
      {
        sub_2453CA894();
        if ((v16 & 1) != 0)
          goto LABEL_5;
      }
    }
    else
    {
      sub_2453C73F8(v15, isUniquelyReferenced_nonNull_native);
      v17 = sub_2453C64D8(v7, v8);
      if ((v16 & 1) != (v18 & 1))
        goto LABEL_22;
      v12 = v17;
      if ((v16 & 1) != 0)
      {
LABEL_5:
        v6 = v1[7] + 16 * v12;
        sub_2453BDCF8(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
        *(_QWORD *)v6 = v9;
        *(_QWORD *)(v6 + 8) = v27;
        goto LABEL_6;
      }
    }
    v1[(v12 >> 6) + 8] |= 1 << v12;
    v19 = (uint64_t *)(v1[6] + 16 * v12);
    *v19 = v7;
    v19[1] = v8;
    v20 = (uint64_t *)(v1[7] + 16 * v12);
    *v20 = v9;
    v20[1] = v27;
    v21 = v1[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_21;
    v1[2] = v23;
    swift_bridgeObjectRetain();
LABEL_6:
    v5 = v24 + 2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v2 = sub_2453BDCF8(v9, v27);
    v4 = v25 - 1;
    if (v25 == 1)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v1;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = sub_2454443A8();
  __break(1u);
  return result;
}

uint64_t sub_24543B258(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v13[2];

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7, v8);
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    v10 = v13[0];
    v11 = v13[1];
  }
  else
  {
    sub_245443994();
    swift_allocObject();
    sub_245443988();
    sub_245443970();
    v10 = sub_24544397C();
    v11 = v12;
    result = swift_release();
    if (v2)
      return result;
  }
  MEMORY[0x24BDAC7A8](result);
  v13[-4] = v10;
  v13[-3] = v11;
  v13[-2] = a1;
  v13[-1] = a2;
  sub_2454439F4();
  return sub_2453BDCF8(v10, v11);
}

void sub_24543B3C8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  ssize_t v7;
  char *v8;
  uint64_t v9;
  ssize_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t (*v21)(uint64_t);
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  int v27;
  int v28;

  v1 = v0;
  v2 = sub_245443DC0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_245443A0C();
  v6 = sub_245443DD8();
  swift_bridgeObjectRelease();
  v7 = listxattr((const char *)(v6 + 32), 0, 0, 0);
  swift_release();
  if (v7 == -1)
  {
    type metadata accessor for ExtendedAttributeError();
    sub_2453B8BF4(&qword_2574658E8, (uint64_t (*)(uint64_t))type metadata accessor for ExtendedAttributeError, (uint64_t)&unk_24544CDA0);
    v1 = (void *)swift_allocError();
    *v18 = 0;
    v18[1] = 0xE000000000000000;
    v18[2] = -1;
    MEMORY[0x249533624]();
    v19 = sub_245443C10();
    if ((v19 & 0x100000000) == 0)
    {
      v20 = v19;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2574658F0);
      sub_2454438F8();
      v21 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0];
      v27 = v20;
      sub_24543BED0(MEMORY[0x24BEE4AF8]);
      sub_2453B8BF4(&qword_2574658F8, v21, MEMORY[0x24BDCAFD8]);
      sub_2454439A0();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      return;
    }
    goto LABEL_16;
  }
  v8 = (char *)swift_slowAlloc();
  sub_245443A0C();
  v9 = sub_245443DD8();
  swift_bridgeObjectRelease();
  v10 = listxattr((const char *)(v9 + 32), v8, v7, 0);
  swift_release();
  if (v10 == -1)
  {
    type metadata accessor for ExtendedAttributeError();
    sub_2453B8BF4(&qword_2574658E8, (uint64_t (*)(uint64_t))type metadata accessor for ExtendedAttributeError, (uint64_t)&unk_24544CDA0);
    v1 = (void *)swift_allocError();
    *v22 = 0;
    v22[1] = 0xE000000000000000;
    v22[2] = -1;
    MEMORY[0x249533624]();
    v23 = sub_245443C10();
    if ((v23 & 0x100000000) == 0)
    {
      v24 = v23;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2574658F0);
      sub_2454438F8();
      v25 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0];
      v28 = v24;
      sub_24543BED0(MEMORY[0x24BEE4AF8]);
      sub_2453B8BF4(&qword_2574658F8, v25, MEMORY[0x24BDCAFD8]);
      sub_2454439A0();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      MEMORY[0x249534440](v8, -1, -1);
      return;
    }
    goto LABEL_17;
  }
  sub_245443DA8();
  v11 = sub_245443DB4();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD17C8]), sel_initWithBytes_length_encoding_, v8, v7, v11);
  if (!v12)
  {
LABEL_12:
    MEMORY[0x249534440](v8, -1, -1);
    return;
  }
  v13 = v12;
  v14 = (void *)sub_245443D78();
  v15 = objc_msgSend(v13, sel_componentsSeparatedByString_, v14);

  v16 = (_QWORD *)sub_245443E98();
  if (v16[2])
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v17 = v16[2];
      if (v17)
      {
LABEL_7:
        v16[2] = v17 - 1;
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
      goto LABEL_15;
    }
  }
  else
  {
    __break(1u);
  }
  v16 = sub_24543C5C0(v16);
  v17 = v16[2];
  if (v17)
    goto LABEL_7;
LABEL_15:
  __break(1u);
LABEL_16:

  __break(1u);
LABEL_17:

  __break(1u);
}

uint64_t sub_24543B7E8@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  ssize_t v10;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;

  v9 = sub_245443DD8();
  v10 = getxattr(a1, (const char *)(v9 + 32), 0, 0, 0, 0);
  swift_release();
  if (v10 < 1)
  {
    type metadata accessor for ExtendedAttributeError();
    sub_2453B8BF4(&qword_2574658E8, (uint64_t (*)(uint64_t))type metadata accessor for ExtendedAttributeError, (uint64_t)&unk_24544CDA0);
    swift_allocError();
    *v14 = a2;
    v14[1] = a3;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  else
  {
    v15 = sub_24543C5D4(v10);
    v16 = v11;
    swift_bridgeObjectRetain();
    sub_24543C240((uint64_t)&v15);
    result = v15;
    v13 = v16;
    if (v4)
    {
      return sub_2453BDCF8(v15, v16);
    }
    else
    {
      *a4 = v15;
      a4[1] = v13;
    }
  }
  return result;
}

uint64_t sub_24543B928@<X0>(const char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_24543B7E8(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

void sub_24543B940(void *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, size_t a6)
{
  uint64_t v11;
  ssize_t v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);

  v11 = sub_245443DD8();
  v12 = getxattr(a3, (const char *)(v11 + 32), a1, a6, 0, 0);
  swift_release();
  if (v12 < 1)
  {
    type metadata accessor for ExtendedAttributeError();
    sub_2453B8BF4(&qword_2574658E8, (uint64_t (*)(uint64_t))type metadata accessor for ExtendedAttributeError, (uint64_t)&unk_24544CDA0);
    v13 = (void *)swift_allocError();
    *v14 = a4;
    v14[1] = a5;
    v14[2] = v12;
    v15 = swift_bridgeObjectRetain();
    MEMORY[0x249533624](v15);
    if ((sub_245443C10() & 0x100000000) != 0)
    {

      __break(1u);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2574658F0);
      sub_2454438F8();
      v16 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0];
      sub_24543BED0(MEMORY[0x24BEE4AF8]);
      sub_2453B8BF4(&qword_2574658F8, v16, MEMORY[0x24BDCAFD8]);
      sub_2454439A0();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
  }
}

void sub_24543BAC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_24543BB28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t value, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t result;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t (*v39)(uint64_t);
  int v40;
  char v41;
  char v42;
  char v43;
  char v44;
  __int16 v45;
  char v46;
  char v47;
  char v48;
  char v49;

  LOWORD(v40) = v29;
  BYTE2(v40) = BYTE2(v29);
  HIBYTE(v40) = BYTE3(v29);
  v41 = BYTE4(v29);
  v42 = BYTE5(v29);
  v43 = BYTE6(v29);
  v44 = HIBYTE(v29);
  v45 = v30;
  v46 = BYTE2(v30);
  v47 = BYTE3(v30);
  v48 = BYTE4(v30);
  v49 = BYTE5(v30);
  v31 = sub_245443DD8();
  v32 = setxattr(v28, (const char *)(v31 + 32), &v40, BYTE6(v30), 0, 0);
  result = swift_release();
  if (v32 < 0)
  {
    type metadata accessor for ExtendedAttributeError();
    sub_2453B8BF4(&qword_2574658E8, (uint64_t (*)(uint64_t))type metadata accessor for ExtendedAttributeError, (uint64_t)&unk_24544CDA0);
    v34 = (void *)swift_allocError();
    *v35 = v27;
    v35[1] = v26;
    v35[2] = v32;
    v36 = swift_bridgeObjectRetain();
    MEMORY[0x249533624](v36);
    v37 = sub_245443C10();
    if ((v37 & 0x100000000) != 0)
    {

      __break(1u);
      JUMPOUT(0x24543BEB8);
    }
    v38 = v37;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2574658F0);
    sub_2454438F8();
    v39 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCAFE0];
    v40 = v38;
    sub_24543BED0(MEMORY[0x24BEE4AF8]);
    sub_2453B8BF4(&qword_2574658F8, v39, MEMORY[0x24BDCAFD8]);
    sub_2454439A0();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  return result;
}

unint64_t sub_24543BED0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_257465670);
  v2 = sub_245444228();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_24543C1F8(v6, (uint64_t)&v15);
    v7 = v15;
    v8 = v16;
    result = sub_24543BFF8(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_245435EF4(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_24543BFF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_245444414();
  sub_245443DF0();
  v4 = sub_245444444();
  return sub_24543C05C(a1, a2, v4);
}

unint64_t sub_24543C05C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (sub_245444390() & 1) == 0)
    {
      v12 = ~v5;
      i = (i + 1) & v12;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v13 = (_QWORD *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (sub_245444390() & 1) == 0)
        {
          for (i = (i + 1) & v12; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
          {
            v15 = (_QWORD *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2)
              break;
            if ((sub_245444390() & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

void sub_24543C1A0(uint64_t a1)
{
  uint64_t v1;

  sub_24543BAC4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t type metadata accessor for ExtendedAttributeError()
{
  uint64_t result;

  result = qword_257465900;
  if (!qword_257465900)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_24543C1F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_257465678);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_24543C240(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_24543C2A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  size_t v3;
  _QWORD *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;

  v13 = v1;
  LOWORD(v14) = a1;
  BYTE2(v14) = BYTE2(a1);
  HIBYTE(v14) = BYTE3(a1);
  v15 = BYTE4(a1);
  v16 = BYTE5(a1);
  v17 = BYTE6(a1);
  sub_24543B940(&v13, (uint64_t)&v13 + BYTE6(a1), v6, v5, v2, v3);
  v7 = v13;
  v8 = v14;
  v9 = v15;
  v10 = v16;
  v11 = v17;
  result = swift_bridgeObjectRelease();
  *v4 = v7;
  v4[1] = v8 | (v9 << 32) | (v10 << 40) | (v11 << 48);
  return result;
}

uint64_t sub_24543C4DC(int *a1, const char *a2, uint64_t a3, uint64_t a4, size_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;

  result = sub_245443A54();
  v12 = *a1;
  v11 = a1[1];
  if ((int)v11 < (int)v12)
  {
    __break(1u);
    goto LABEL_9;
  }
  v18 = a4;
  v19 = a2;
  result = sub_245443910();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v13 = result;
  result = sub_245443934();
  v14 = v12 - result;
  if (__OFSUB__(v12, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v15 = v11 - v12;
  v16 = sub_245443928();
  if (v16 >= v15)
    v17 = v15;
  else
    v17 = v16;
  sub_24543B940((void *)(v13 + v14), v13 + v14 + v17, v19, a3, v18, a5);
  return swift_bridgeObjectRelease();
}

_QWORD *sub_24543C5C0(_QWORD *a1)
{
  return sub_2453F1878(0, a1[2], 0, a1);
}

uint64_t sub_24543C5D4(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      sub_245443940();
      swift_allocObject();
      sub_24544391C();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_245443A60();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t *sub_24543C670(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2574658F0) + 64);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = sub_2454438F8();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_24543C754(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  result = swift_bridgeObjectRelease();
  if (EnumCaseMultiPayload == 1)
  {
    v4 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2574658F0) + 64);
    v5 = sub_2454438F8();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  return result;
}

_QWORD *sub_24543C7C0(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  if (EnumCaseMultiPayload == 1)
  {
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2574658F0) + 64);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_2454438F8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *sub_24543C870(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  if (a1 != a2)
  {
    sub_24543C938((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2574658F0) + 64);
      v6 = (char *)a1 + v5;
      v7 = (char *)a2 + v5;
      v8 = sub_2454438F8();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_24543C938(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ExtendedAttributeError();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_24543C974(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2574658F0) + 64);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_2454438F8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_24543CA28(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_24543C938((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2574658F0) + 64);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = sub_2454438F8();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorRecordChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for ReplicatorRecordChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_24543CB08()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_24543CB18()
{
  uint64_t result;
  unint64_t v1;
  _QWORD v2[6];

  v2[4] = &unk_24544CD88;
  result = sub_2454438F8();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t ReplicatorZone.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReplicatorZone.identifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ReplicatorZone.identifier.modify())()
{
  return nullsub_1;
}

uint64_t ReplicatorZone.clientIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ReplicatorZone.clientIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*ReplicatorZone.clientIdentifier.modify())()
{
  return nullsub_1;
}

__n128 ReplicatorZone.protocolVersion.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[2];
  *a1 = result;
  return result;
}

__n128 ReplicatorZone.protocolVersion.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*ReplicatorZone.protocolVersion.modify())()
{
  return nullsub_1;
}

__n128 ReplicatorZone.init(identifier:clientIdentifier:protocolVersion:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, __n128 *a5@<X4>, __n128 *a6@<X8>)
{
  __n128 result;

  a6->n128_u64[0] = a1;
  a6->n128_u64[1] = a2;
  a6[1].n128_u64[0] = a3;
  a6[1].n128_u64[1] = a4;
  result = *a5;
  a6[2] = *a5;
  return result;
}

uint64_t ReplicatorZone.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  sub_245444438();
  return sub_245444438();
}

uint64_t sub_24543CD5C()
{
  sub_24543D234();
  return sub_245444468();
}

uint64_t sub_24543CD84()
{
  sub_24543D234();
  return sub_245444474();
}

uint64_t ReplicatorZone.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465910);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v16 = v1[3];
  v17 = v7;
  v8 = v1[4];
  v14 = v1[5];
  v15 = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24543D234();
  sub_24544445C();
  LOBYTE(v19) = 0;
  v9 = v18;
  sub_245444348();
  if (!v9)
  {
    v11 = v14;
    v10 = v15;
    LOBYTE(v19) = 1;
    sub_245444348();
    v19 = v10;
    v20 = v11;
    v21 = 2;
    sub_2453BC5D8();
    sub_245444360();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ReplicatorZone.hashValue.getter()
{
  sub_245444414();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  sub_245444438();
  sub_245444438();
  return sub_245444444();
}

uint64_t ReplicatorZone.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  char v23;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257465920);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24543D234();
  sub_245444450();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v22) = 0;
  v9 = sub_2454442C4();
  v11 = v10;
  v21 = v9;
  LOBYTE(v22) = 1;
  swift_bridgeObjectRetain();
  v12 = sub_2454442C4();
  v14 = v13;
  v19 = v12;
  v23 = 2;
  sub_2453BC50C();
  swift_bridgeObjectRetain();
  v20 = v14;
  sub_2454442DC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v22;
  v16 = v20;
  *(_QWORD *)a2 = v21;
  *(_QWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 16) = v19;
  *(_QWORD *)(a2 + 24) = v16;
  *(_OWORD *)(a2 + 32) = v15;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24543D20C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ReplicatorZone.init(from:)(a1, a2);
}

uint64_t sub_24543D220(_QWORD *a1)
{
  return ReplicatorZone.encode(to:)(a1);
}

unint64_t sub_24543D234()
{
  unint64_t result;

  result = qword_257465918;
  if (!qword_257465918)
  {
    result = MEMORY[0x249534380](&unk_24544CF98, &type metadata for ReplicatorZone.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465918);
  }
  return result;
}

unint64_t sub_24543D27C()
{
  unint64_t result;

  result = qword_257465928;
  if (!qword_257465928)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for ReplicatorZone, &type metadata for ReplicatorZone);
    atomic_store(result, (unint64_t *)&qword_257465928);
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorZone()
{
  return &type metadata for ReplicatorZone;
}

uint64_t storeEnumTagSinglePayload for ReplicatorZone.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24543D31C + 4 * byte_24544CDE5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24543D350 + 4 * byte_24544CDE0[v4]))();
}

uint64_t sub_24543D350(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24543D358(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24543D360);
  return result;
}

uint64_t sub_24543D36C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24543D374);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24543D378(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24543D380(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorZone.CodingKeys()
{
  return &type metadata for ReplicatorZone.CodingKeys;
}

unint64_t sub_24543D3A0()
{
  unint64_t result;

  result = qword_257465930;
  if (!qword_257465930)
  {
    result = MEMORY[0x249534380](&unk_24544CF70, &type metadata for ReplicatorZone.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465930);
  }
  return result;
}

unint64_t sub_24543D3E8()
{
  unint64_t result;

  result = qword_257465938;
  if (!qword_257465938)
  {
    result = MEMORY[0x249534380](&unk_24544CEE0, &type metadata for ReplicatorZone.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465938);
  }
  return result;
}

unint64_t sub_24543D430()
{
  unint64_t result;

  result = qword_257465940;
  if (!qword_257465940)
  {
    result = MEMORY[0x249534380](&unk_24544CF08, &type metadata for ReplicatorZone.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465940);
  }
  return result;
}

uint64_t OpaqueObjectiveCBridgable<>._bridgeToObjectiveC()()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  sub_245443994();
  swift_allocObject();
  sub_245443988();
  v0 = sub_24544397C();
  v2 = v1;
  v3 = sub_245443A6C();
  sub_2453BDCF8(v0, v2);
  swift_release();
  return v3;
}

uint64_t static OpaqueObjectiveCBridgable<>._unconditionallyBridgeFromObjectiveC(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v6 = sub_24544406C();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v15 - v11;
  v13 = *(_QWORD *)(a2 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))((char *)&v15 - v11, 1, 1, a2);
  if (a1)
  {
    sub_24544424C();
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, a2);
    if ((_DWORD)result != 1)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3, v10, a2);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static OpaqueObjectiveCBridgable<>._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v5 = sub_24544406C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - v7;
  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v9 = sub_245443A78();
  v11 = v10;
  sub_24544394C();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v5);
  sub_2453BDCF8(v9, v11);
  swift_release();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v8, 0, 1, a3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
}

BOOL static OpaqueObjectiveCBridgable<>._conditionallyBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  _QWORD v18[2];

  v5 = sub_24544406C();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v18 - v10;
  v18[0] = *(_QWORD *)(v6 + 8);
  ((void (*)(uint64_t, uint64_t))v18[0])(a2, v5);
  sub_245443964();
  swift_allocObject();
  sub_245443958();
  v12 = sub_245443A78();
  v14 = v13;
  sub_24544394C();
  swift_release();
  sub_2453BDCF8(v12, v14);
  v15 = *(_QWORD *)(a3 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v11, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a2, v5);
  v16 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v9, 1, a3) != 1;
  ((void (*)(char *, uint64_t))v18[0])(v9, v5);
  return v16;
}

uint64_t *initializeBufferWithCopyOfBuffer for ReplicatorRecordChange(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  int EnumCaseMultiPayload;
  char *__dst;
  uint64_t v34;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    v9 = type metadata accessor for ReplicatorRecord.ID(0);
    v10 = *(int *)(v9 + 28);
    __dst = (char *)a1 + v10;
    v34 = v9;
    v11 = (char *)a2 + v10;
    v12 = sub_245443B14();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = v14(v11, 1, v12);
    if (EnumCaseMultiPayload == 1)
    {
      if (v15)
      {
        v16 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
        memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
      }
      v19 = *(int *)(v34 + 32);
      v20 = (uint64_t *)((char *)a1 + v19);
      v21 = (uint64_t *)((char *)a2 + v19);
      v22 = v21[1];
      *v20 = *v21;
      v20[1] = v22;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (v15)
      {
        v18 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
        memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
      }
      v23 = *(int *)(v34 + 32);
      v24 = (uint64_t *)((char *)a1 + v23);
      v25 = (uint64_t *)((char *)a2 + v23);
      v26 = v25[1];
      *v24 = *v25;
      v24[1] = v26;
      v27 = *(int *)(type metadata accessor for ReplicatorRecordVersion() + 20);
      v28 = (char *)a1 + v27;
      v29 = (char *)a2 + v27;
      v30 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
      swift_bridgeObjectRetain();
      v30(v28, v29, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ReplicatorRecordChange(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = a1 + *(int *)(type metadata accessor for ReplicatorRecord.ID(0) + 28);
  v4 = sub_245443B14();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
  if (EnumCaseMultiPayload == 1)
  {
    if (!v6)
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (!v6)
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    swift_bridgeObjectRelease();
    v8 = a1 + *(int *)(type metadata accessor for ReplicatorRecordVersion() + 20);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
  }
}

_QWORD *initializeWithCopy for ReplicatorRecordChange(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  char *__dst;
  uint64_t v31;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  v8 = type metadata accessor for ReplicatorRecord.ID(0);
  v9 = *(int *)(v8 + 28);
  __dst = (char *)a1 + v9;
  v31 = v8;
  v10 = (char *)a2 + v9;
  v11 = sub_245443B14();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = v13(v10, 1, v11);
  if (EnumCaseMultiPayload == 1)
  {
    if (v14)
    {
      v15 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
      memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    v17 = *(int *)(v31 + 32);
    v18 = (_QWORD *)((char *)a1 + v17);
    v19 = (_QWORD *)((char *)a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v14)
    {
      v16 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
      memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    v21 = *(int *)(v31 + 32);
    v22 = (_QWORD *)((char *)a1 + v21);
    v23 = (_QWORD *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = *(int *)(type metadata accessor for ReplicatorRecordVersion() + 20);
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    v28 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    swift_bridgeObjectRetain();
    v28(v26, v27, v11);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for ReplicatorRecordChange(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t, uint64_t);
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  char *__dst;
  uint64_t v26;

  if (a1 != a2)
  {
    sub_24543E0B4((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    a1[3] = a2[3];
    a1[4] = a2[4];
    a1[5] = a2[5];
    v5 = type metadata accessor for ReplicatorRecord.ID(0);
    v6 = *(int *)(v5 + 28);
    __dst = (char *)a1 + v6;
    v26 = v5;
    v7 = (char *)a2 + v6;
    v8 = sub_245443B14();
    v9 = *(_QWORD *)(v8 - 8);
    v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11 = v10(v7, 1, v8);
    if (EnumCaseMultiPayload == 1)
    {
      if (v11)
      {
        v12 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
        memcpy(__dst, v7, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v9 + 16))(__dst, v7, v8);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(__dst, 0, 1, v8);
      }
      v14 = *(int *)(v26 + 32);
      v15 = (_QWORD *)((char *)a1 + v14);
      v16 = (_QWORD *)((char *)a2 + v14);
      *v15 = *v16;
      v15[1] = v16[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      if (v11)
      {
        v13 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
        memcpy(__dst, v7, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v9 + 16))(__dst, v7, v8);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(__dst, 0, 1, v8);
      }
      v17 = *(int *)(v26 + 32);
      v18 = (_QWORD *)((char *)a1 + v17);
      v19 = (_QWORD *)((char *)a2 + v17);
      *v18 = *v19;
      v18[1] = v19[1];
      v20 = *(int *)(type metadata accessor for ReplicatorRecordVersion() + 20);
      v21 = (char *)a1 + v20;
      v22 = (char *)a2 + v20;
      v23 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
      swift_bridgeObjectRetain();
      v23(v21, v22, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_24543E0B4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ReplicatorRecordChange();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for ReplicatorRecordChange()
{
  uint64_t result;

  result = qword_25440E448;
  if (!qword_25440E448)
    return swift_getSingletonMetadata();
  return result;
}

char *initializeWithTake for ReplicatorRecordChange(char *a1, char *a2)
{
  int EnumCaseMultiPayload;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v5;
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  v6 = type metadata accessor for ReplicatorRecord.ID(0);
  v7 = *(int *)(v6 + 28);
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = sub_245443B14();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  if (EnumCaseMultiPayload == 1)
  {
    if (v12)
    {
      v13 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *(_OWORD *)&a1[*(int *)(v6 + 32)] = *(_OWORD *)&a2[*(int *)(v6 + 32)];
  }
  else
  {
    if (v12)
    {
      v14 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *(_OWORD *)&a1[*(int *)(v6 + 32)] = *(_OWORD *)&a2[*(int *)(v6 + 32)];
    v15 = type metadata accessor for ReplicatorRecordVersion();
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&a1[*(int *)(v15 + 20)], &a2[*(int *)(v15 + 20)], v10);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithTake for ReplicatorRecordChange(char *a1, char *a2)
{
  int EnumCaseMultiPayload;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 != a2)
  {
    sub_24543E0B4((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v5;
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    v6 = type metadata accessor for ReplicatorRecord.ID(0);
    v7 = *(int *)(v6 + 28);
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = sub_245443B14();
    v11 = *(_QWORD *)(v10 - 8);
    v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
    if (EnumCaseMultiPayload == 1)
    {
      if (v12)
      {
        v13 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      *(_OWORD *)&a1[*(int *)(v6 + 32)] = *(_OWORD *)&a2[*(int *)(v6 + 32)];
    }
    else
    {
      if (v12)
      {
        v14 = type metadata accessor for ReplicatorRecord.ID.Ownership(0);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      *(_OWORD *)&a1[*(int *)(v6 + 32)] = *(_OWORD *)&a2[*(int *)(v6 + 32)];
      v15 = type metadata accessor for ReplicatorRecordVersion();
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&a1[*(int *)(v15 + 20)], &a2[*(int *)(v15 + 20)], v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_24543E474()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for ReplicatorRecordVersion();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for ReplicatorRecord.ID(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t sub_24543E4F4(_QWORD *a1, uint64_t *a2, void *a3, uint64_t a4, _DWORD *a5, uint64_t a6, void *a7)
{
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  _BYTE *v36;
  void (*v37)(uint64_t, _QWORD);
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;

  v44 = a5;
  v45 = *MEMORY[0x24BDAC8D0];
  v13 = sub_245443A48();
  v42 = *(_QWORD *)(v13 - 8);
  v43 = v13;
  result = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v41 = a7;
  if (!v17)
  {
    v19 = objc_msgSend(a3, sel_readDataOfLength_, a4);
    v20 = sub_245443A78();
    v22 = v21;

    v23 = *a2;
    v24 = a2[1];
    *a2 = v20;
    a2[1] = v22;
    sub_2453BDCE4(v23, v24);
    v25 = a2[1];
    if (v25 >> 60 != 15)
      __asm { BR              X12 }
    __break(1u);
    JUMPOUT(0x24543EB08);
  }
  v18 = a2[1];
  if (v18 >> 60 != 15)
    __asm { BR              X11 }
  if (*v44 >= 2u)
  {
    if (*v44 != -1)
      return result;
    if (qword_25440EC10 == -1)
      goto LABEL_12;
  }
  else
  {
    v26 = a1[1];
    v27 = a4 - v26;
    if (!__OFSUB__(a4, v26))
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v16, *MEMORY[0x24BDCDB98], v43);
      sub_245443A3C();
      if (v27)
      {
        sub_245443940();
        swift_allocObject();
        swift_retain();
        v28 = sub_245443904();
        v29 = sub_24543EC28(v28, v27);
        v31 = v30;
        swift_release();
      }
      else
      {
        v37 = (void (*)(uint64_t, _QWORD))sub_245443A3C();
        v37(a6, 0);
        swift_release();
        swift_release();
        v29 = 0;
        v31 = 0xC000000000000000;
      }
      v38 = v41;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v43);
      v39 = (void *)sub_245443A6C();
      objc_msgSend(v38, sel_writeData_, v39);

      *a1 = a6;
      a1[1] = a4;
      return sub_2453BDCF8(v29, v31);
    }
    __break(1u);
  }
  swift_once();
LABEL_12:
  v32 = sub_245443C04();
  __swift_project_value_buffer(v32, (uint64_t)qword_25440EBF8);
  v33 = sub_245443BEC();
  v34 = sub_245443FE8();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v35 = 0;
    _os_log_impl(&dword_2453B6000, v33, v34, "Encountered error while compressing", v35, 2u);
    MEMORY[0x249534440](v35, -1, -1);
  }

  sub_24543EEF8();
  swift_allocError();
  *v36 = 1;
  return swift_willThrow();
}

uint64_t sub_24543EB38()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Compressor()
{
  return objc_opt_self();
}

uint64_t sub_24543EB68(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_24543EC28(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF)
      return a2 << 32;
    sub_245443A60();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = (_BYTE *)sub_245443910();
    if (!v4)
    {
LABEL_10:
      v5 = sub_245443928();
      if (v5 >= a2)
        v6 = a2;
      else
        v6 = v5;
      v7 = &v4[v6];
      if (v4)
        v8 = v7;
      else
        v8 = 0;
      v3 = sub_24543EB68(v4, v8);
      swift_release();
      return v3;
    }
    result = sub_245443934();
    if (!__OFSUB__(0, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_24543ED0C(char a1, void *a2, void *a3)
{
  uint64_t v3;
  compression_stream_operation v6;
  uint64_t v7;
  compression_stream *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  _BYTE *v14;
  __int128 v16;
  compression_status v17;

  v6 = a1 & 1;
  v7 = swift_slowAlloc();
  v8 = (compression_stream *)swift_slowAlloc();
  v17 = compression_stream_init(v8, v6, COMPRESSION_LZFSE);
  if (v17 == COMPRESSION_STATUS_ERROR)
  {
    if (qword_25440EC10 != -1)
      swift_once();
    v10 = sub_245443C04();
    __swift_project_value_buffer(v10, (uint64_t)qword_25440EBF8);
    v11 = sub_245443BEC();
    v12 = sub_245443FE8();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_2453B6000, v11, v12, "Unable to initialize the compression stream", v13, 2u);
      MEMORY[0x249534440](v13, -1, -1);
    }

    sub_24543EEF8();
    swift_allocError();
    *v14 = 0;
    swift_willThrow();
  }
  else
  {
    v8->src_size = 0;
    v8->dst_ptr = (uint8_t *)v7;
    v8->dst_size = 0x8000;
    v16 = xmmword_245445F70;
    while (1)
    {
      v9 = (void *)MEMORY[0x249533EB8]();
      sub_24543E4F4(v8, (uint64_t *)&v16, a2, 0x8000, &v17, v7, a3);
      if (v3)
        break;
      objc_autoreleasePoolPop(v9);
      if (v17)
        goto LABEL_12;
    }
    objc_autoreleasePoolPop(v9);
LABEL_12:
    sub_2453BDCE4(v16, *((unint64_t *)&v16 + 1));
    compression_stream_destroy(v8);
    MEMORY[0x249534440](v8, -1, -1);
  }
  return MEMORY[0x249534440](v7, -1, -1);
}

unint64_t sub_24543EEF8()
{
  unint64_t result;

  result = qword_257465948;
  if (!qword_257465948)
  {
    result = MEMORY[0x249534380](&unk_24544D0C8, &type metadata for Compressor.CompressorError);
    atomic_store(result, (unint64_t *)&qword_257465948);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Compressor.CompressorError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24543EF88 + 4 * byte_24544D035[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24543EFBC + 4 * asc_24544D030[v4]))();
}

uint64_t sub_24543EFBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24543EFC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24543EFCCLL);
  return result;
}

uint64_t sub_24543EFD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24543EFE0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24543EFE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24543EFEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Compressor.CompressorError()
{
  return &type metadata for Compressor.CompressorError;
}

unint64_t sub_24543F00C()
{
  unint64_t result;

  result = qword_257465950;
  if (!qword_257465950)
  {
    result = MEMORY[0x249534380](&unk_24544D0A0, &type metadata for Compressor.CompressorError);
    atomic_store(result, (unint64_t *)&qword_257465950);
  }
  return result;
}

uint64_t static ReplicatorHasher.hash<A>(_:)()
{
  return sub_245443B74();
}

{
  return sub_245443B80();
}

uint64_t ReplicatorHasher.combine<A>(_:)()
{
  return sub_245443B8C();
}

{
  return sub_245443B98();
}

uint64_t initializeBufferWithCopyOfBuffer for ReplicatorHasher(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_245443BBC();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for ReplicatorHasher(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_245443BBC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for ReplicatorHasher(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_245443BBC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for ReplicatorHasher(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_245443BBC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for ReplicatorHasher(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_245443BBC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for ReplicatorHasher(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_245443BBC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplicatorHasher()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24543F234(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_245443BBC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ReplicatorHasher()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24543F27C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_245443BBC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ReplicatorHasher()
{
  uint64_t result;

  result = qword_257463948;
  if (!qword_257463948)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_24543F2F8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_245443BBC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t dispatch thunk of ReplicatorMessageProviding.messageUpdates.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ReplicatorMessageProviding.send(message:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ReplicatorMessageProviding.sendExpectingResponse(message:timeout:retries:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of ReplicatorRecordProviding.recordUpdates.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ReplicatorRecordProviding.zoneUpdates(zone:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of ReplicatorRecordProviding.add(records:destination:schedule:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of ReplicatorRecordProviding.delete(recordIDs:schedule:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of ReplicatorRecordProviding.records(recordIDs:url:protocolVersion:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a6 + 40))(a1, a2, a3, a4 & 1);
}

uint64_t dispatch thunk of ReplicatorRecordProviding.urls(recordIDs:url:protocolVersion:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a6 + 48))(a1, a2, a3, a4 & 1);
}

uint64_t dispatch thunk of ReplicatorRecordProviding.recordVersions()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of ReplicatorRecordSyncing.sync()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ReplicatorClientDescribing.descriptor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t MessageDescriptor.messageType.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MessageDescriptor.messageType.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MessageDescriptor.messageType.modify())()
{
  return nullsub_1;
}

__n128 MessageDescriptor.protocolVersion.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[1];
  *a1 = result;
  return result;
}

__n128 MessageDescriptor.init(messageType:protocolVersion:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X2>, __n128 *a4@<X8>)
{
  __n128 result;

  a4->n128_u64[0] = a1;
  a4->n128_u64[1] = a2;
  result = *a3;
  a4[1] = *a3;
  return result;
}

uint64_t MessageDescriptor.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  sub_245444438();
  return sub_245444438();
}

uint64_t sub_24543F540()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C6F636F746F7270;
  else
    return 0x546567617373656DLL;
}

uint64_t sub_24543F590@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_24543FE88(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24543F5B4()
{
  sub_24543FB7C();
  return sub_245444468();
}

uint64_t sub_24543F5DC()
{
  sub_24543FB7C();
  return sub_245444474();
}

uint64_t MessageDescriptor.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E238);
  v12 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24543FB7C();
  sub_24544445C();
  LOBYTE(v13) = 0;
  sub_245444348();
  if (!v2)
  {
    v13 = v11;
    v14 = v10;
    v15 = 1;
    sub_2453BC5D8();
    sub_245444360();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v6, v4);
}

uint64_t MessageDescriptor.hashValue.getter()
{
  sub_245444414();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  sub_245444438();
  sub_245444438();
  return sub_245444444();
}

uint64_t MessageDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v14;
  char v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_25440E278);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24543FB7C();
  sub_245444450();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v14) = 0;
  v9 = sub_2454442C4();
  v11 = v10;
  v15 = 1;
  sub_2453BC50C();
  swift_bridgeObjectRetain();
  sub_2454442DC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v12 = v14;
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v11;
  *(_OWORD *)(a2 + 16) = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24543F97C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return MessageDescriptor.init(from:)(a1, a2);
}

uint64_t sub_24543F990(_QWORD *a1)
{
  return MessageDescriptor.encode(to:)(a1);
}

uint64_t sub_24543F9A8()
{
  sub_245444414();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  sub_245444438();
  sub_245444438();
  return sub_245444444();
}

uint64_t sub_24543FA2C()
{
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  sub_245444438();
  return sub_245444438();
}

uint64_t sub_24543FA94()
{
  sub_245444414();
  swift_bridgeObjectRetain();
  sub_245443DF0();
  swift_bridgeObjectRelease();
  sub_245444438();
  sub_245444438();
  return sub_245444444();
}

BOOL _s18ReplicatorServices17MessageDescriptorV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  _BOOL8 result;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a2[2];
  v5 = a2[3];
  if (*a1 == *a2 && a1[1] == a2[1])
    return v2 == v4 && v3 == v5;
  v7 = sub_245444390();
  result = 0;
  if ((v7 & 1) != 0)
    return v2 == v4 && v3 == v5;
  return result;
}

unint64_t sub_24543FB7C()
{
  unint64_t result;

  result = qword_25440E1E8;
  if (!qword_25440E1E8)
  {
    result = MEMORY[0x249534380](&unk_24544D358, &type metadata for MessageDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E1E8);
  }
  return result;
}

unint64_t sub_24543FBC4()
{
  unint64_t result;

  result = qword_257465958;
  if (!qword_257465958)
  {
    result = MEMORY[0x249534380](&protocol conformance descriptor for MessageDescriptor, &type metadata for MessageDescriptor);
    atomic_store(result, (unint64_t *)&qword_257465958);
  }
  return result;
}

uint64_t initializeWithCopy for MessageDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MessageDescriptor(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for MessageDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for MessageDescriptor()
{
  return &type metadata for MessageDescriptor;
}

uint64_t storeEnumTagSinglePayload for MessageDescriptor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24543FD30 + 4 * byte_24544D1B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24543FD64 + 4 * asc_24544D1B0[v4]))();
}

uint64_t sub_24543FD64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24543FD6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24543FD74);
  return result;
}

uint64_t sub_24543FD80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24543FD88);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24543FD8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24543FD94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MessageDescriptor.CodingKeys()
{
  return &type metadata for MessageDescriptor.CodingKeys;
}

unint64_t sub_24543FDB4()
{
  unint64_t result;

  result = qword_257465960;
  if (!qword_257465960)
  {
    result = MEMORY[0x249534380](&unk_24544D330, &type metadata for MessageDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257465960);
  }
  return result;
}

unint64_t sub_24543FDFC()
{
  unint64_t result;

  result = qword_25440E1F8;
  if (!qword_25440E1F8)
  {
    result = MEMORY[0x249534380](&unk_24544D2A0, &type metadata for MessageDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E1F8);
  }
  return result;
}

unint64_t sub_24543FE44()
{
  unint64_t result;

  result = qword_25440E1F0;
  if (!qword_25440E1F0)
  {
    result = MEMORY[0x249534380](&unk_24544D2C8, &type metadata for MessageDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25440E1F0);
  }
  return result;
}

uint64_t sub_24543FE88(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x546567617373656DLL && a2 == 0xEB00000000657079;
  if (v2 || (sub_245444390() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6F636F746F7270 && a2 == 0xEF6E6F6973726556)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_245444390();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t dispatch thunk of ReplicatorDecoding.decode<A>(_:from:version:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t))(a9 + 8))(a1);
}

uint64_t dispatch thunk of ReplicatorEncoding.encode<A>(_:version:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 8))();
}

uint64_t dispatch thunk of ReplicatorRecordEncoding.encode<A>(_:zone:relationshipID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t))(a9 + 8))(a1);
}

uint64_t dispatch thunk of ReplicatorMessageEncoding.encode<A>(_:messageType:relationshipID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return dispatch thunk of ReplicatorRecordEncoding.encode<A>(_:zone:relationshipID:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

id sub_245440040()
{
  return sub_245440078();
}

id sub_24544005C()
{
  return sub_245440078();
}

id sub_245440078()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v0 = (void *)objc_opt_self();
  v1 = (void *)sub_245443D78();
  v2 = (void *)sub_245443D78();
  v3 = objc_msgSend(v0, sel_endpointForMachName_service_instance_, v1, v2, 0);

  if (v3)
  {
    v4 = objc_msgSend((id)objc_opt_self(), sel_connectionWithEndpoint_, v3);

    if (v4)
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2574647D8);
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_245445910;
    sub_24544412C();
    swift_bridgeObjectRelease();
    sub_245443E14();
    *(_QWORD *)(v5 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v5 + 32) = 0xD000000000000025;
    *(_QWORD *)(v5 + 40) = 0x800000024544DCF0;
    sub_2454443FC();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v4;
}

uint64_t sub_245440220(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_245440240(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_245440260(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t sub_2454402B0(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

id StateCaptureClient.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t StateCaptureClient.init()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  objc_class *v10;
  char *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t result;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];
  objc_super v22;

  v1 = v0;
  v20 = sub_245444024();
  v2 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_24544400C();
  MEMORY[0x24BDAC7A8](v5);
  v6 = sub_245443CAC();
  MEMORY[0x24BDAC7A8](v6);
  v7 = OBJC_IVAR____TtC18ReplicatorServices18StateCaptureClient_connection;
  *(_QWORD *)&v0[OBJC_IVAR____TtC18ReplicatorServices18StateCaptureClient_connection] = 0;
  v19 = OBJC_IVAR____TtC18ReplicatorServices18StateCaptureClient_queue;
  v18[1] = sub_2453D0348();
  v8 = v0;
  sub_245443CA0();
  aBlock[0] = MEMORY[0x24BEE4AF8];
  sub_2454405D8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25440E688);
  sub_2454222C8();
  sub_2454440A8();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE5758], v20);
  *(_QWORD *)&v0[v19] = sub_245444048();
  v9 = *(void **)&v0[v7];
  *(_QWORD *)&v1[v7] = 0;

  v10 = (objc_class *)type metadata accessor for StateCaptureClient();
  v22.receiver = v8;
  v22.super_class = v10;
  v11 = (char *)objc_msgSendSuper2(&v22, sel_init);
  v12 = *(NSObject **)&v11[OBJC_IVAR____TtC18ReplicatorServices18StateCaptureClient_queue];
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v11;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = sub_245440664;
  *(_QWORD *)(v14 + 24) = v13;
  aBlock[4] = sub_2454223FC;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_245440240;
  aBlock[3] = &block_descriptor_3;
  v15 = _Block_copy(aBlock);
  v16 = v11;
  swift_retain();
  swift_release();
  dispatch_sync(v12, v15);

  _Block_release(v15);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v12 & 1) == 0)
    return (uint64_t)v16;
  __break(1u);
  return result;
}

unint64_t sub_2454405D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25440E6C0;
  if (!qword_25440E6C0)
  {
    v1 = sub_24544400C();
    result = MEMORY[0x249534380](MEMORY[0x24BEE5698], v1);
    atomic_store(result, (unint64_t *)&qword_25440E6C0);
  }
  return result;
}

uint64_t type metadata accessor for StateCaptureClient()
{
  return objc_opt_self();
}

uint64_t sub_245440640()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_245440664()
{
  sub_245440C48();
}

uint64_t sub_245440684()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

void *sub_2454406CC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  void *result;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v14;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[6];

  v1 = sub_245443CDC();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (_QWORD *)((char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)&v0[OBJC_IVAR____TtC18ReplicatorServices18StateCaptureClient_queue];
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE5610], v1);
  v6 = v5;
  LOBYTE(v5) = sub_245443CE8();
  result = (void *)(*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  v8 = OBJC_IVAR____TtC18ReplicatorServices18StateCaptureClient_connection;
  if (!*(_QWORD *)&v0[OBJC_IVAR____TtC18ReplicatorServices18StateCaptureClient_connection])
  {
    result = sub_245440078();
    if (result)
    {
      v9 = *(void **)&v0[v8];
      *(_QWORD *)&v0[v8] = result;
      v10 = result;

      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v0;
      v12 = swift_allocObject();
      *(_QWORD *)(v12 + 16) = sub_245441454;
      *(_QWORD *)(v12 + 24) = v11;
      aBlock[4] = sub_2454223FC;
      aBlock[5] = v12;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_24542241C;
      aBlock[3] = &block_descriptor_12;
      v13 = _Block_copy(aBlock);
      v14 = v0;
      swift_retain();
      swift_release();
      objc_msgSend(v10, sel_configureConnection_, v13);

      _Block_release(v13);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      result = (void *)swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
        goto LABEL_7;
    }
  }
  return result;
}

void sub_2454408CC(void *a1, uint64_t a2)
{
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, void *);
  void *v17;
  void (*v18)(uint64_t);
  uint64_t v19;

  v4 = (void *)sub_245443D78();
  v5 = objc_msgSend((id)objc_opt_self(), sel_interfaceWithIdentifier_, v4);

  v6 = (void *)objc_opt_self();
  v7 = objc_msgSend(v6, sel_protocolForProtocol_, &unk_257475E38);
  objc_msgSend(v5, sel_setClient_, v7);

  v8 = objc_msgSend(v6, sel_protocolForProtocol_, &unk_257475DA0);
  objc_msgSend(v5, sel_setServer_, v8);

  v9 = objc_msgSend((id)objc_opt_self(), sel_utility);
  objc_msgSend(a1, sel_setServiceQuality_, v9);

  objc_msgSend(a1, sel_setInterface_, v5);
  objc_msgSend(a1, sel_setInterfaceTarget_, a2);
  objc_msgSend(a1, sel_setTargetQueue_, *(_QWORD *)(a2 + OBJC_IVAR____TtC18ReplicatorServices18StateCaptureClient_queue));
  v18 = sub_245440B50;
  v19 = 0;
  v10 = MEMORY[0x24BDAC760];
  v14 = MEMORY[0x24BDAC760];
  v15 = 1107296256;
  v16 = sub_245440260;
  v17 = &block_descriptor_15;
  v11 = _Block_copy(&v14);
  objc_msgSend(a1, sel_setActivationHandler_, v11);
  _Block_release(v11);
  v18 = sub_245440B5C;
  v19 = 0;
  v14 = v10;
  v15 = 1107296256;
  v16 = sub_245440260;
  v17 = &block_descriptor_18;
  v12 = _Block_copy(&v14);
  objc_msgSend(a1, sel_setInterruptionHandler_, v12);
  _Block_release(v12);
  v18 = sub_245440B68;
  v19 = 0;
  v14 = v10;
  v15 = 1107296256;
  v16 = sub_245440260;
  v17 = &block_descriptor_21;
  v13 = _Block_copy(&v14);
  objc_msgSend(a1, sel_setInvalidationHandler_, v13);
  _Block_release(v13);

}

void sub_245440B50(uint64_t a1)
{
  sub_245440B74(a1, "StateCapture Service: Activated");
}

void sub_245440B5C(uint64_t a1)
{
  sub_245440B74(a1, "StateCapture Service: Interrupted");
}

void sub_245440B68(uint64_t a1)
{
  sub_245440B74(a1, "StateCapture Service: Invalidated");
}

void sub_245440B74(uint64_t a1, const char *a2)
{
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  NSObject *oslog;

  if (qword_257463C50 != -1)
    swift_once();
  v3 = sub_245443C04();
  __swift_project_value_buffer(v3, (uint64_t)qword_257463C38);
  oslog = sub_245443BEC();
  v4 = sub_245443FDC();
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_2453B6000, oslog, v4, a2, v5, 2u);
    MEMORY[0x249534440](v5, -1, -1);
  }

}

