void sub_1C9A3F884(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9A3F9AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id __atxlog_handle_heuristic()
{
  if (__atxlog_handle_heuristic_onceToken != -1)
    dispatch_once(&__atxlog_handle_heuristic_onceToken, &__block_literal_global_5_1);
  return (id)__atxlog_handle_heuristic_log;
}

id __dispatch_async_txn_block_invoke(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1CAA48B6C]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  objc_autoreleasePoolPop(v2);
  return (id)objc_opt_self();
}

void sub_1C9A4062C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  pthread_mutex_t *v10;
  void *v11;
  void *v12;

  v12 = v11;

  pthread_mutex_unlock(v10);
  _Unwind_Resume(a1);
}

void sub_1C9A40734(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9A40E00(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1C9A41274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id __atxlog_handle_default()
{
  if (__atxlog_handle_default_onceToken != -1)
    dispatch_once(&__atxlog_handle_default_onceToken, &__block_literal_global_230);
  return (id)__atxlog_handle_default_log;
}

id __atxlog_handle_app_library()
{
  if (__atxlog_handle_app_library_onceToken != -1)
    dispatch_once(&__atxlog_handle_app_library_onceToken, &__block_literal_global_52_0);
  return (id)__atxlog_handle_app_library_log;
}

id __atxlog_handle_app_install()
{
  if (__atxlog_handle_app_install_onceToken != -1)
    dispatch_once(&__atxlog_handle_app_install_onceToken, &__block_literal_global_54_0);
  return (id)__atxlog_handle_app_install_log;
}

uint64_t shouldConsiderAppForRecents(void *a1)
{
  id v1;
  NSObject *v2;
  uint64_t v3;
  int v5;
  id v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(MEMORY[0x1E0CF8CE8], "isOffloadedForBundle:", v1))
  {
    __atxlog_handle_app_library();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v1;
      _os_log_impl(&dword_1C9A3B000, v2, OS_LOG_TYPE_DEFAULT, "ATXAppDirectoryOrderingProvider: Ignoring offloaded app for recents: %@", (uint8_t *)&v5, 0xCu);
    }

    v3 = 0;
  }
  else
  {
    v3 = objc_msgSend(MEMORY[0x1E0CF8CD8], "bundleIdIsHiddenByUserPreference:", v1) ^ 1;
  }

  return v3;
}

id __atxlog_handle_backup()
{
  if (__atxlog_handle_backup_onceToken != -1)
    dispatch_once(&__atxlog_handle_backup_onceToken, &__block_literal_global_56_2);
  return (id)__atxlog_handle_backup_log;
}

uint64_t _ATXRestoreIsInProgress()
{
  NSObject *v0;
  uint64_t v1;
  _QWORD block[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  restoreStateQueue();
  v0 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ATXRestoreIsInProgress_block_invoke;
  block[3] = &unk_1E82DA7D8;
  block[4] = &v4;
  dispatch_sync(v0, block);

  v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

id restoreStateQueue()
{
  if (restoreStateQueue_onceToken != -1)
    dispatch_once(&restoreStateQueue_onceToken, &__block_literal_global_324);
  return (id)restoreStateQueue_instance;
}

void sub_1C9A42968(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void handleAmbientLightEvent(void *a1)
{
  double Current;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  double *v8;

  if (a1)
  {
    v8 = a1;
    Current = CFAbsoluteTimeGetCurrent();
    if (Current - v8[6] >= 1.0)
    {
      v8[6] = Current;
      v2 = (void *)MEMORY[0x1E0CB37E8];
      IOHIDEventGetDoubleValue();
      objc_msgSend(v2, "numberWithDouble:");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = (void *)MEMORY[0x1E0CB37E8];
      IOHIDEventGetDoubleValue();
      objc_msgSend(v4, "numberWithDouble:");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = (void *)MEMORY[0x1E0CB37E8];
      IOHIDEventGetDoubleValue();
      objc_msgSend(v6, "numberWithDouble:");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "addSampleWithXValue:YValue:ZValue:", v3, v5, v7);

    }
  }
}

void sub_1C9A438BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id decodeSubGenresData(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  id v11;

  v1 = a1;
  if (v1)
  {
    v2 = (void *)MEMORY[0x1CAA48B6C]();
    v3 = (void *)MEMORY[0x1E0CB3710];
    v4 = (void *)MEMORY[0x1E0C99E60];
    v5 = objc_opt_class();
    objc_msgSend(v4, "setWithObjects:", v5, objc_opt_class(), 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 0;
    objc_msgSend(v3, "unarchivedObjectOfClasses:fromData:error:", v6, v1, &v11);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v11;

    objc_autoreleasePoolPop(v2);
    if (!v7)
    {
      __atxlog_handle_default();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        decodeSubGenresData_cold_1();

    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id __atxlog_handle_blending_ecosystem()
{
  if (__atxlog_handle_blending_ecosystem_onceToken != -1)
    dispatch_once(&__atxlog_handle_blending_ecosystem_onceToken, &__block_literal_global_38_4);
  return (id)__atxlog_handle_blending_ecosystem_log;
}

void sub_1C9A4642C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

void __Block_byref_object_dispose__9(uint64_t a1)
{

}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

void __Block_byref_object_dispose__13(uint64_t a1)
{

}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

void __Block_byref_object_dispose__15(uint64_t a1)
{

}

void __Block_byref_object_dispose__16(uint64_t a1)
{

}

void __Block_byref_object_dispose__17(uint64_t a1)
{

}

void __Block_byref_object_dispose__18(uint64_t a1)
{

}

void __Block_byref_object_dispose__19(uint64_t a1)
{

}

void __Block_byref_object_dispose__20(uint64_t a1)
{

}

void __Block_byref_object_dispose__21(uint64_t a1)
{

}

void __Block_byref_object_dispose__22(uint64_t a1)
{

}

void __Block_byref_object_dispose__23(uint64_t a1)
{

}

void __Block_byref_object_dispose__24(uint64_t a1)
{

}

void __Block_byref_object_dispose__25(uint64_t a1)
{

}

void __Block_byref_object_dispose__26(uint64_t a1)
{

}

void __Block_byref_object_dispose__27(uint64_t a1)
{

}

void __Block_byref_object_dispose__28(uint64_t a1)
{

}

void __Block_byref_object_dispose__29(uint64_t a1)
{

}

void __Block_byref_object_dispose__30(uint64_t a1)
{

}

void __Block_byref_object_dispose__31(uint64_t a1)
{

}

void __Block_byref_object_dispose__32(uint64_t a1)
{

}

void __Block_byref_object_dispose__33(uint64_t a1)
{

}

void __Block_byref_object_dispose__34(uint64_t a1)
{

}

void __Block_byref_object_dispose__35(uint64_t a1)
{

}

void __Block_byref_object_dispose__36(uint64_t a1)
{

}

void __Block_byref_object_dispose__37(uint64_t a1)
{

}

void __Block_byref_object_dispose__38(uint64_t a1)
{

}

void __Block_byref_object_dispose__39(uint64_t a1)
{

}

void __Block_byref_object_dispose__40(uint64_t a1)
{

}

void __Block_byref_object_dispose__41(uint64_t a1)
{

}

void __Block_byref_object_dispose__42(uint64_t a1)
{

}

void __Block_byref_object_dispose__43(uint64_t a1)
{

}

void __Block_byref_object_dispose__44(uint64_t a1)
{

}

void __Block_byref_object_dispose__45(uint64_t a1)
{

}

void __Block_byref_object_dispose__46(uint64_t a1)
{

}

void __Block_byref_object_dispose__47(uint64_t a1)
{

}

void __Block_byref_object_dispose__48(uint64_t a1)
{

}

void __Block_byref_object_dispose__49(uint64_t a1)
{

}

void __Block_byref_object_dispose__50(uint64_t a1)
{

}

void __Block_byref_object_dispose__51(uint64_t a1)
{

}

void __Block_byref_object_dispose__52(uint64_t a1)
{

}

void __Block_byref_object_dispose__53(uint64_t a1)
{

}

void __Block_byref_object_dispose__54(uint64_t a1)
{

}

void __Block_byref_object_dispose__55(uint64_t a1)
{

}

void __Block_byref_object_dispose__56(uint64_t a1)
{

}

void __Block_byref_object_dispose__57(uint64_t a1)
{

}

void __Block_byref_object_dispose__58(uint64_t a1)
{

}

void __Block_byref_object_dispose__59(uint64_t a1)
{

}

void __Block_byref_object_dispose__60(uint64_t a1)
{

}

void __Block_byref_object_dispose__61(uint64_t a1)
{

}

void __Block_byref_object_dispose__62(uint64_t a1)
{

}

void __Block_byref_object_dispose__63(uint64_t a1)
{

}

void __Block_byref_object_dispose__64(uint64_t a1)
{

}

void __Block_byref_object_dispose__65(uint64_t a1)
{

}

void __Block_byref_object_dispose__66(uint64_t a1)
{

}

void __Block_byref_object_dispose__67(uint64_t a1)
{

}

void __Block_byref_object_dispose__68(uint64_t a1)
{

}

void __Block_byref_object_dispose__69(uint64_t a1)
{

}

void __Block_byref_object_dispose__70(uint64_t a1)
{

}

void __Block_byref_object_dispose__71(uint64_t a1)
{

}

void __Block_byref_object_dispose__72(uint64_t a1)
{

}

void __Block_byref_object_dispose__73(uint64_t a1)
{

}

void __Block_byref_object_dispose__74(uint64_t a1)
{

}

void __Block_byref_object_dispose__75(uint64_t a1)
{

}

void __Block_byref_object_dispose__76(uint64_t a1)
{

}

void __Block_byref_object_dispose__77(uint64_t a1)
{

}

void __Block_byref_object_dispose__78(uint64_t a1)
{

}

void __Block_byref_object_dispose__79(uint64_t a1)
{

}

void __Block_byref_object_dispose__80(uint64_t a1)
{

}

void __Block_byref_object_dispose__81(uint64_t a1)
{

}

void __Block_byref_object_dispose__82(uint64_t a1)
{

}

void __Block_byref_object_dispose__83(uint64_t a1)
{

}

void __Block_byref_object_dispose__84(uint64_t a1)
{

}

void __Block_byref_object_dispose__85(uint64_t a1)
{

}

void __Block_byref_object_dispose__86(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void __Block_byref_object_dispose__87(uint64_t a1)
{

}

void __Block_byref_object_dispose__88(uint64_t a1)
{

}

void __Block_byref_object_dispose__89(uint64_t a1)
{

}

void __Block_byref_object_dispose__90(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void __Block_byref_object_dispose__91(uint64_t a1)
{

}

void __Block_byref_object_dispose__92(uint64_t a1)
{

}

void __Block_byref_object_dispose__93(uint64_t a1)
{

}

void __Block_byref_object_dispose__94(uint64_t a1)
{

}

void __Block_byref_object_dispose__95(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 40));
}

void __Block_byref_object_dispose__96(uint64_t a1)
{

}

void __Block_byref_object_dispose__97(uint64_t a1)
{

}

void __Block_byref_object_dispose__98(uint64_t a1)
{

}

void __Block_byref_object_dispose__99(uint64_t a1)
{

}

void __Block_byref_object_dispose__100(uint64_t a1)
{

}

void __Block_byref_object_dispose__101(uint64_t a1)
{

}

void __Block_byref_object_dispose__102(uint64_t a1)
{

}

void __Block_byref_object_dispose__103(uint64_t a1)
{

}

void __Block_byref_object_dispose__104(uint64_t a1)
{

}

void __Block_byref_object_dispose__105(uint64_t a1)
{

}

void __Block_byref_object_dispose__106(uint64_t a1)
{

}

void __Block_byref_object_dispose__107(uint64_t a1)
{

}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__24(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__26(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__27(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__28(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__29(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__30(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__31(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__32(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__33(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__34(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__35(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void *__Block_byref_object_copy__36(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 48) = v2;
  return memcpy((void *)(a1 + 56), (const void *)(a2 + 56), 0xCD2uLL);
}

uint64_t __Block_byref_object_copy__37(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__38(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__39(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__40(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__41(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__42(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__43(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__44(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__45(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__46(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__47(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__48(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__49(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__50(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__51(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__52(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__53(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__54(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__55(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__56(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__57(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__58(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__59(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__60(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__61(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__62(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__63(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__64(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__65(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__66(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__67(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__68(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__69(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__70(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__71(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__72(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__73(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__74(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__75(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__76(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__77(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__78(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__79(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__80(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__81(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__82(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__83(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__84(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__85(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

__n128 __Block_byref_object_copy__86(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t __Block_byref_object_copy__87(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__88(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__89(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

__n128 __Block_byref_object_copy__90(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t __Block_byref_object_copy__91(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__92(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__93(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__94(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_copy__95(uint64_t a1, uint64_t a2)
{
  objc_moveWeak((id *)(a1 + 40), (id *)(a2 + 40));
}

uint64_t __Block_byref_object_copy__96(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__97(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__98(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__99(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__100(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__101(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__102(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__103(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__104(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__105(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__106(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__107(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1C9A4B014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_1C9A4B32C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9A4B850(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9A4BBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ATXUpdatePredictionsImmediatelyWithReason(uint64_t a1)
{
  ATXUpdatePredictions(a1, 0.0);
}

void ATXUpdatePredictions(uint64_t a1, double a2)
{
  void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  int AppBooleanValue;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  dispatch_block_t v21;
  NSObject *v22;
  void *v23;
  _QWORD block[6];
  uint8_t buf[4];
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = (void *)os_transaction_create();
  if (a1 == 20)
  {
    +[ATXFaceSuggestionServer sharedInstance](ATXFaceSuggestionServer, "sharedInstance");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "regenerateFaceGalleryConfigurationWithCompletion:", &__block_literal_global_67);

  }
  else if (a1 == 13)
  {
    __atxlog_handle_default();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C9A3B000, v5, OS_LOG_TYPE_DEFAULT, "ATXUpdatePredictions: clearing ATXMagicalMomentsBlendingUpdater", buf, 2u);
    }

    v6 = (void *)objc_opt_new();
    +[ATXMagicalMomentsBlendingUpdater updateBlendingLayerWithMagicalMomentsMap:](ATXMagicalMomentsBlendingUpdater, "updateBlendingLayerWithMagicalMomentsMap:", v6);

    __atxlog_handle_default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C9A3B000, v7, OS_LOG_TYPE_DEFAULT, "ATXUpdatePredictions: clearing ATXHeroAppBlendingUpdater", buf, 2u);
    }

    v8 = (void *)objc_opt_new();
    +[ATXHeroAppBlendingUpdater updateBlendingLayerWithHeroAppPredictions:currentLocation:](ATXHeroAppBlendingUpdater, "updateBlendingLayerWithHeroAppPredictions:currentLocation:", v8, 0);

  }
  if (predictionUpdateDisabledByInternalSettings_onceToken != -1)
    dispatch_once(&predictionUpdateDisabledByInternalSettings_onceToken, &__block_literal_global_78);
  if (predictionUpdateDisabledByInternalSettings_disableCacheUpdateSetting)
  {
    __atxlog_handle_default();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v11 = "ATXUpdatePredictions: Skipping cache refresh due to internal settings";
LABEL_18:
      _os_log_impl(&dword_1C9A3B000, (os_log_t)v10, OS_LOG_TYPE_DEFAULT, v11, buf, 2u);
    }
  }
  else
  {
    buf[0] = 0;
    AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("displayDonationsOnLockscreen"), (CFStringRef)*MEMORY[0x1E0CF9510], buf);
    if (a1 == 5 && AppBooleanValue)
    {
      __atxlog_handle_default();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v11 = "ATXUpdatePredictions: Skipping cache refresh for hero app w/ developer switch";
        goto LABEL_18;
      }
    }
    else
    {
      if (objc_msgSend(MEMORY[0x1E0D81590], "isClassCLocked"))
      {
        __atxlog_handle_default();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          ATXUpdatePredictions_cold_1(a1, v13);

        v14 = (void *)MEMORY[0x1E0C99DA0];
        v15 = *MEMORY[0x1E0C99768];
        +[ATXUpdatePredictionsReasons stringForUpdatePredictionsReason:](ATXUpdatePredictionsReasons, "stringForUpdatePredictionsReason:", a1);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "raise:format:", v15, CFSTR("ATXUpdatePredictions: Can not refresh predictions when class C locked! Reason: %@"), v16);

      }
      pthread_mutex_lock(&lock_0);
      v10 = (uint64_t)_Block_copy((const void *)overrideBlock);
      pthread_mutex_unlock(&lock_0);
      if (v10)
      {
        (*(void (**)(uint64_t, double))(v10 + 16))(v10, a2);
      }
      else
      {
        while (!__ldaxr(ATXUpdatePredictions_updateInProgress))
        {
          if (!__stlxr(1u, ATXUpdatePredictions_updateInProgress))
          {
            dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
            v18 = objc_claimAutoreleasedReturnValue();
            dispatch_queue_attr_make_with_qos_class(v18, QOS_CLASS_BACKGROUND, 0);
            v19 = objc_claimAutoreleasedReturnValue();
            v20 = dispatch_queue_create("ATXUpdatePredictions", v19);

            block[0] = MEMORY[0x1E0C809B0];
            block[1] = 3221225472;
            block[2] = __ATXUpdatePredictions_block_invoke_20;
            block[3] = &__block_descriptor_48_e5_v8__0l;
            *(double *)&block[4] = a2;
            block[5] = a1;
            v21 = dispatch_block_create(DISPATCH_BLOCK_DETACHED, block);
            dispatch_async(v20, v21);

            goto LABEL_31;
          }
        }
        __clrex();
        __atxlog_handle_default();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          +[ATXUpdatePredictionsReasons stringForUpdatePredictionsReason:](ATXUpdatePredictionsReasons, "stringForUpdatePredictionsReason:", a1);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v26 = v23;
          _os_log_impl(&dword_1C9A3B000, v22, OS_LOG_TYPE_DEFAULT, "ATXUpdatePredictions: Update in progress already, coalescing update with reason: %@", buf, 0xCu);

        }
      }
    }
  }
LABEL_31:

}

void sub_1C9A4C304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9A4CC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _ATXInitializeInOwnerProcess()
{
  void *v0;

  v0 = (void *)MEMORY[0x1CAA48B6C]();
  if (_ATXInitializeInOwnerProcess_onceToken != -1)
    dispatch_once(&_ATXInitializeInOwnerProcess_onceToken, &__block_literal_global_245);
  objc_autoreleasePoolPop(v0);
}

uint64_t ATXPBPredictionContextReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  ATXPBPredictionDeviceStateContext *v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 52) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_46;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_48;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_48:
        *(_BYTE *)(a1 + 48) = v19 != 0;
        goto LABEL_43;
      case 2u:
        v24 = objc_alloc_init(ATXPBPredictionDeviceStateContext);
        objc_storeStrong((id *)(a1 + 16), v24);
        if (!PBReaderPlaceMark()
          || (ATXPBPredictionDeviceStateContextReadFrom((uint64_t)v24, a2) & 1) == 0)
        {
          goto LABEL_50;
        }
        goto LABEL_42;
      case 3u:
        v24 = objc_alloc_init(ATXPBPredictionTimeContext);
        objc_storeStrong((id *)(a1 + 32), v24);
        if (!PBReaderPlaceMark() || (ATXPBPredictionTimeContextReadFrom((uint64_t)v24, a2) & 1) == 0)
          goto LABEL_50;
        goto LABEL_42;
      case 4u:
        v24 = objc_alloc_init(ATXPBPredictionLocationMotionContext);
        objc_storeStrong((id *)(a1 + 24), v24);
        if (!PBReaderPlaceMark()
          || (ATXPBPredictionLocationMotionContextReadFrom((uint64_t)v24, a2) & 1) == 0)
        {
          goto LABEL_50;
        }
        goto LABEL_42;
      case 5u:
        v24 = objc_alloc_init(ATXPBPredictionAmbientLightContext);
        objc_storeStrong((id *)(a1 + 8), v24);
        if (!PBReaderPlaceMark()
          || (ATXPBPredictionAmbientLightContextReadFrom((uint64_t)v24, a2) & 1) == 0)
        {
          goto LABEL_50;
        }
        goto LABEL_42;
      case 6u:
        v24 = objc_alloc_init(ATXPBPredictionUserContext);
        objc_storeStrong((id *)(a1 + 40), v24);
        if (PBReaderPlaceMark() && (ATXPBPredictionUserContextReadFrom((uint64_t)v24, a2) & 1) != 0)
        {
LABEL_42:
          PBReaderRecallMark();

LABEL_43:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_50:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_43;
    }
  }
}

uint64_t ATXPBPredictionUserContextReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  void *v26;
  uint64_t v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
            break;
          v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v16)
          v17 = 1;
        else
          v17 = (v10 & 7) == 4;
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 48) |= 2u;
              v18 = *v3;
              v19 = *(_QWORD *)(a2 + v18);
              if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
                *(_QWORD *)(a2 + v18) = v19 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v20 = 0;
              }
              v27 = 16;
              goto LABEL_35;
            case 2u:
              PBReaderReadString();
              v23 = objc_claimAutoreleasedReturnValue();
              v24 = 32;
              goto LABEL_30;
            case 3u:
              *(_BYTE *)(a1 + 48) |= 1u;
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
                *(_QWORD *)(a2 + v21) = v22 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v20 = 0;
              }
              v27 = 8;
LABEL_35:
              *(_QWORD *)(a1 + v27) = v20;
              goto LABEL_36;
            case 4u:
              PBReaderReadString();
              v23 = objc_claimAutoreleasedReturnValue();
              v24 = 40;
              goto LABEL_30;
            case 5u:
              PBReaderReadString();
              v23 = objc_claimAutoreleasedReturnValue();
              v24 = 24;
LABEL_30:
              v26 = *(void **)(a1 + v24);
              *(_QWORD *)(a1 + v24) = v23;

              goto LABEL_36;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_36:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t ATXPBPredictionTimeContextReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        *(_QWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t ATXPBPredictionLocationMotionContextReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  ATXPBPredictionLocationOfInterest *v18;
  uint64_t v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = objc_alloc_init(ATXPBPredictionLocationOfInterest);
        v19 = 88;
        goto LABEL_23;
      case 2u:
        v18 = objc_alloc_init(ATXPBPredictionLocationOfInterest);
        v19 = 64;
LABEL_23:
        objc_storeStrong((id *)(a1 + v19), v18);
        if (PBReaderPlaceMark() && (ATXPBPredictionLocationOfInterestReadFrom((uint64_t)v18, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_98:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 3u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_WORD *)(a1 + 100) |= 0x80u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if (v27 < 0)
            {
              v21 += 7;
              v15 = v22++ >= 9;
              if (v15)
              {
                LODWORD(v23) = 0;
                goto LABEL_72;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v23) = 0;
LABEL_72:
        *(_DWORD *)(a1 + 80) = v23;
        goto LABEL_98;
      case 4u:
        PBReaderReadData();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = *(void **)(a1 + 72);
        *(_QWORD *)(a1 + 72) = v28;

        goto LABEL_98;
      case 5u:
        v30 = 0;
        v31 = 0;
        v32 = 0;
        *(_WORD *)(a1 + 100) |= 0x200u;
        while (2)
        {
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          v35 = v34 + 1;
          if (v34 == -1 || v35 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v35;
            v32 |= (unint64_t)(v36 & 0x7F) << v30;
            if (v36 < 0)
            {
              v30 += 7;
              v15 = v31++ >= 9;
              if (v15)
              {
                v32 = 0;
                goto LABEL_76;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
LABEL_76:
        v63 = v32 != 0;
        v64 = 97;
        goto LABEL_81;
      case 6u:
        *(_WORD *)(a1 + 100) |= 4u;
        v37 = *v3;
        v38 = *(_QWORD *)(a2 + v37);
        if (v38 <= 0xFFFFFFFFFFFFFFF7 && v38 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v39 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v38);
          *(_QWORD *)(a2 + v37) = v38 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v39 = 0;
        }
        v65 = 24;
        goto LABEL_90;
      case 7u:
        *(_WORD *)(a1 + 100) |= 0x10u;
        v40 = *v3;
        v41 = *(_QWORD *)(a2 + v40);
        if (v41 <= 0xFFFFFFFFFFFFFFF7 && v41 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v39 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v41);
          *(_QWORD *)(a2 + v40) = v41 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v39 = 0;
        }
        v65 = 40;
        goto LABEL_90;
      case 8u:
        *(_WORD *)(a1 + 100) |= 8u;
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 <= 0xFFFFFFFFFFFFFFF7 && v43 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v39 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v43);
          *(_QWORD *)(a2 + v42) = v43 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v39 = 0;
        }
        v65 = 32;
        goto LABEL_90;
      case 9u:
        *(_WORD *)(a1 + 100) |= 2u;
        v44 = *v3;
        v45 = *(_QWORD *)(a2 + v44);
        if (v45 <= 0xFFFFFFFFFFFFFFF7 && v45 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v39 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v45);
          *(_QWORD *)(a2 + v44) = v45 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v39 = 0;
        }
        v65 = 16;
LABEL_90:
        *(_QWORD *)(a1 + v65) = v39;
        goto LABEL_98;
      case 0xAu:
        v46 = 0;
        v47 = 0;
        v48 = 0;
        *(_WORD *)(a1 + 100) |= 0x100u;
        while (2)
        {
          v49 = *v3;
          v50 = *(_QWORD *)(a2 + v49);
          v51 = v50 + 1;
          if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
            *(_QWORD *)(a2 + v49) = v51;
            v48 |= (unint64_t)(v52 & 0x7F) << v46;
            if (v52 < 0)
            {
              v46 += 7;
              v15 = v47++ >= 9;
              if (v15)
              {
                v48 = 0;
                goto LABEL_80;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v48 = 0;
LABEL_80:
        v63 = v48 != 0;
        v64 = 96;
LABEL_81:
        *(_BYTE *)(a1 + v64) = v63;
        goto LABEL_98;
      case 0xBu:
        *(_WORD *)(a1 + 100) |= 0x20u;
        v53 = *v3;
        v54 = *(_QWORD *)(a2 + v53);
        if (v54 <= 0xFFFFFFFFFFFFFFF7 && (v55 = v54 + 8, v54 + 8 <= *(_QWORD *)(a2 + *v4)))
        {
          v56 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v54);
          *(_QWORD *)(a2 + v53) = v55;
        }
        else
        {
          v56 = 0;
          *(_BYTE *)(a2 + *v5) = 1;
        }
        v66 = 48;
        goto LABEL_97;
      case 0xCu:
        *(_WORD *)(a1 + 100) |= 1u;
        v57 = *v3;
        v58 = *(_QWORD *)(a2 + v57);
        if (v58 <= 0xFFFFFFFFFFFFFFF7 && (v59 = v58 + 8, v58 + 8 <= *(_QWORD *)(a2 + *v4)))
        {
          v56 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v58);
          *(_QWORD *)(a2 + v57) = v59;
        }
        else
        {
          v56 = 0;
          *(_BYTE *)(a2 + *v5) = 1;
        }
        v66 = 8;
        goto LABEL_97;
      case 0xDu:
        *(_WORD *)(a1 + 100) |= 0x40u;
        v60 = *v3;
        v61 = *(_QWORD *)(a2 + v60);
        if (v61 <= 0xFFFFFFFFFFFFFFF7 && (v62 = v61 + 8, v61 + 8 <= *(_QWORD *)(a2 + *v4)))
        {
          v56 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v61);
          *(_QWORD *)(a2 + v60) = v62;
        }
        else
        {
          v56 = 0;
          *(_BYTE *)(a2 + *v5) = 1;
        }
        v66 = 56;
LABEL_97:
        *(_QWORD *)(a1 + v66) = v56;
        goto LABEL_98;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_98;
    }
  }
}

uint64_t ATXPBPredictionDeviceStateContextReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  void *v31;
  uint64_t result;
  BOOL v33;
  uint64_t v34;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 != 2)
      {
        if ((_DWORD)v17 != 1)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          goto LABEL_47;
        }
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 20) |= 2u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_39;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_41;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_41:
        v33 = v20 != 0;
        v34 = 17;
        goto LABEL_46;
      }
      PBReaderReadString();
      v30 = objc_claimAutoreleasedReturnValue();
      v31 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v30;

LABEL_47:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v24 = 0;
    v25 = 0;
    v26 = 0;
    *(_BYTE *)(a1 + 20) |= 1u;
    while (1)
    {
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
      *(_QWORD *)(a2 + v27) = v28 + 1;
      v26 |= (unint64_t)(v29 & 0x7F) << v24;
      if ((v29 & 0x80) == 0)
        goto LABEL_43;
      v24 += 7;
      v14 = v25++ >= 9;
      if (v14)
      {
        v26 = 0;
        goto LABEL_45;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
    if (*(_BYTE *)(a2 + *v5))
      v26 = 0;
LABEL_45:
    v33 = v26 != 0;
    v34 = 16;
LABEL_46:
    *(_BYTE *)(a1 + v34) = v33;
    goto LABEL_47;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t ATXPBPredictionAmbientLightContextReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 12) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_29;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_29:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_31:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9A4F484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C9A4F5F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFString *dateColumnNameForLaunchType(uint64_t a1)
{
  NSObject *v2;

  if (!a1)
    return CFSTR("lastLaunchDate");
  if (a1 == 1)
    return CFSTR("lastSpotlightLaunchDate");
  __atxlog_handle_default();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    dateColumnNameForLaunchType_cold_1();

  objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("launchType must be a valid _ATXLaunchType."));
  return 0;
}

id __atxlog_handle_blending()
{
  if (__atxlog_handle_blending_onceToken != -1)
    dispatch_once(&__atxlog_handle_blending_onceToken, &__block_literal_global_34_1);
  return (id)__atxlog_handle_blending_log;
}

void sub_1C9A50114(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

BOOL ATXPBTaskAgnosticBehaviorFeatureVectorReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  char v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  unint64_t v318;
  char v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  unint64_t v325;
  int *v326;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = *(unsigned __int16 *)(a1 + 1184);
          v18 = (v17 | (*(unsigned __int8 *)(a1 + 1186) << 16) | 0x10000u) >> 16;
          *(_WORD *)(a1 + 1184) = v17;
          *(_BYTE *)(a1 + 1186) = v18;
          v19 = *v3;
          v20 = *(_QWORD *)(a2 + v19);
          if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
            *(_QWORD *)(a2 + v19) = v20 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__unlockTime;
          goto LABEL_746;
        case 2u:
          v22 = *(_BYTE *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x10u;
          *(_BYTE *)(a1 + 1186) = v22;
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__launchTimePopularity;
          goto LABEL_746;
        case 3u:
          v25 = *(_BYTE *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x100u;
          *(_BYTE *)(a1 + 1186) = v25;
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__timeOfDayBucket;
          goto LABEL_746;
        case 4u:
          v28 = *(_BYTE *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x200u;
          *(_BYTE *)(a1 + 1186) = v28;
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__timeOfDayPopularity;
          goto LABEL_746;
        case 5u:
          *(_QWORD *)(a1 + 1176) |= 0x8000000000000uLL;
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v32 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__coarseTimeOfDayPopularity;
          goto LABEL_746;
        case 6u:
          v33 = *(_BYTE *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 8u;
          *(_BYTE *)(a1 + 1186) = v33;
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 <= 0xFFFFFFFFFFFFFFF7 && v35 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__launchPopularity;
          goto LABEL_746;
        case 7u:
          v36 = *(_BYTE *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 4u;
          *(_BYTE *)(a1 + 1186) = v36;
          v37 = *v3;
          v38 = *(_QWORD *)(a2 + v37);
          if (v38 <= 0xFFFFFFFFFFFFFFF7 && v38 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__launchDayOfWeekPopularity;
          goto LABEL_746;
        case 8u:
          *(_QWORD *)(a1 + 1176) |= 0x40000000000000uLL;
          v39 = *v3;
          v40 = *(_QWORD *)(a2 + v39);
          if (v40 <= 0xFFFFFFFFFFFFFFF7 && v40 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v40);
            *(_QWORD *)(a2 + v39) = v40 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__dayOfWeekBucket;
          goto LABEL_746;
        case 9u:
          *(_QWORD *)(a1 + 1176) |= 0x80000000000000uLL;
          v41 = *v3;
          v42 = *(_QWORD *)(a2 + v41);
          if (v42 <= 0xFFFFFFFFFFFFFFF7 && v42 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v42 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__dayOfWeekPopularity;
          goto LABEL_746;
        case 0xAu:
          *(_QWORD *)(a1 + 1176) |= 0x800000000000000uLL;
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 <= 0xFFFFFFFFFFFFFFF7 && v44 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__entropyLaunchPopularity;
          goto LABEL_746;
        case 0xBu:
          *(_QWORD *)(a1 + 1176) |= 0x100000000000000uLL;
          v45 = *v3;
          v46 = *(_QWORD *)(a2 + v45);
          if (v46 <= 0xFFFFFFFFFFFFFFF7 && v46 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v46);
            *(_QWORD *)(a2 + v45) = v46 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__entropyDayOfWeekPopularity;
          goto LABEL_746;
        case 0xCu:
          *(_QWORD *)(a1 + 1176) |= 0x400000000000000uLL;
          v47 = *v3;
          v48 = *(_QWORD *)(a2 + v47);
          if (v48 <= 0xFFFFFFFFFFFFFFF7 && v48 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v48);
            *(_QWORD *)(a2 + v47) = v48 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__entropyDayOfWeekPopularityByDay;
          goto LABEL_746;
        case 0xDu:
          *(_QWORD *)(a1 + 1176) |= 0x200000000000000uLL;
          v49 = *v3;
          v50 = *(_QWORD *)(a2 + v49);
          if (v50 <= 0xFFFFFFFFFFFFFFF7 && v50 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v50);
            *(_QWORD *)(a2 + v49) = v50 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__entropyDayOfWeekPopularityByApp;
          goto LABEL_746;
        case 0xEu:
          *(_QWORD *)(a1 + 1176) |= 0x8000000000000000;
          v51 = *v3;
          v52 = *(_QWORD *)(a2 + v51);
          if (v52 <= 0xFFFFFFFFFFFFFFF7 && v52 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v52);
            *(_QWORD *)(a2 + v51) = v52 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__entropyTrendingPopularity;
          goto LABEL_746;
        case 0xFu:
          *(_QWORD *)(a1 + 1176) |= 0x1000000000000000uLL;
          v53 = *v3;
          v54 = *(_QWORD *)(a2 + v53);
          if (v54 <= 0xFFFFFFFFFFFFFFF7 && v54 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v54);
            *(_QWORD *)(a2 + v53) = v54 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__entropySSIDPopularity;
          goto LABEL_746;
        case 0x10u:
          *(_QWORD *)(a1 + 1176) |= 0x4000000000000000uLL;
          v55 = *v3;
          v56 = *(_QWORD *)(a2 + v55);
          if (v56 <= 0xFFFFFFFFFFFFFFF7 && v56 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v56);
            *(_QWORD *)(a2 + v55) = v56 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__entropySSIDPopularityBySSID;
          goto LABEL_746;
        case 0x11u:
          *(_QWORD *)(a1 + 1176) |= 0x2000000000000000uLL;
          v57 = *v3;
          v58 = *(_QWORD *)(a2 + v57);
          if (v58 <= 0xFFFFFFFFFFFFFFF7 && v58 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v58);
            *(_QWORD *)(a2 + v57) = v58 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__entropySSIDPopularityByApp;
          goto LABEL_746;
        case 0x12u:
          v59 = *(_BYTE *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x1000u;
          *(_BYTE *)(a1 + 1186) = v59;
          v60 = *v3;
          v61 = *(_QWORD *)(a2 + v60);
          if (v61 <= 0xFFFFFFFFFFFFFFF7 && v61 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v61);
            *(_QWORD *)(a2 + v60) = v61 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__totalNumberOfLaunches;
          goto LABEL_746;
        case 0x13u:
          *(_QWORD *)(a1 + 1168) |= 1uLL;
          v62 = *v3;
          v63 = *(_QWORD *)(a2 + v62);
          if (v63 <= 0xFFFFFFFFFFFFFFF7 && v63 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v63);
            *(_QWORD *)(a2 + v62) = v63 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__airplaneModePopularity;
          goto LABEL_746;
        case 0x14u:
          v64 = *(_BYTE *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x400u;
          *(_BYTE *)(a1 + 1186) = v64;
          v65 = *v3;
          v66 = *(_QWORD *)(a2 + v65);
          if (v66 <= 0xFFFFFFFFFFFFFFF7 && v66 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v66);
            *(_QWORD *)(a2 + v65) = v66 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__totalNumberOfAirplaneModeLaunches;
          goto LABEL_746;
        case 0x15u:
          v67 = *(_BYTE *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x8000u;
          *(_BYTE *)(a1 + 1186) = v67;
          v68 = *v3;
          v69 = *(_QWORD *)(a2 + v68);
          if (v69 <= 0xFFFFFFFFFFFFFFF7 && v69 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v69);
            *(_QWORD *)(a2 + v68) = v69 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__trendingPopularity;
          goto LABEL_746;
        case 0x16u:
          v70 = *(_BYTE *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x4000u;
          *(_BYTE *)(a1 + 1186) = v70;
          v71 = *v3;
          v72 = *(_QWORD *)(a2 + v71);
          if (v72 <= 0xFFFFFFFFFFFFFFF7 && v72 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v72);
            *(_QWORD *)(a2 + v71) = v72 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__totalNumberOfTrendingLaunches;
          goto LABEL_746;
        case 0x17u:
          v73 = *(_BYTE *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x80u;
          *(_BYTE *)(a1 + 1186) = v73;
          v74 = *v3;
          v75 = *(_QWORD *)(a2 + v74);
          if (v75 <= 0xFFFFFFFFFFFFFFF7 && v75 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v75);
            *(_QWORD *)(a2 + v74) = v75 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__sSIDPopularity;
          goto LABEL_746;
        case 0x18u:
          v76 = *(_BYTE *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x2000u;
          *(_BYTE *)(a1 + 1186) = v76;
          v77 = *v3;
          v78 = *(_QWORD *)(a2 + v77);
          if (v78 <= 0xFFFFFFFFFFFFFFF7 && v78 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v78);
            *(_QWORD *)(a2 + v77) = v78 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__totalNumberOfSSIDLaunches;
          goto LABEL_746;
        case 0x19u:
          v79 = *(_BYTE *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x20u;
          *(_BYTE *)(a1 + 1186) = v79;
          v80 = *v3;
          v81 = *(_QWORD *)(a2 + v80);
          if (v81 <= 0xFFFFFFFFFFFFFFF7 && v81 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v81);
            *(_QWORD *)(a2 + v80) = v81 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__onWifi;
          goto LABEL_746;
        case 0x1Au:
          *(_QWORD *)(a1 + 1176) |= 0x10000000000000uLL;
          v82 = *v3;
          v83 = *(_QWORD *)(a2 + v82);
          if (v83 <= 0xFFFFFFFFFFFFFFF7 && v83 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v83);
            *(_QWORD *)(a2 + v82) = v83 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__coreMotionPopularity;
          goto LABEL_746;
        case 0x1Bu:
          v84 = *(_BYTE *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x800u;
          *(_BYTE *)(a1 + 1186) = v84;
          v85 = *v3;
          v86 = *(_QWORD *)(a2 + v85);
          if (v86 <= 0xFFFFFFFFFFFFFFF7 && v86 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v86);
            *(_QWORD *)(a2 + v85) = v86 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__totalNumberOfCoreMotionLaunches;
          goto LABEL_746;
        case 0x1Cu:
          v87 = *(_BYTE *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 1u;
          *(_BYTE *)(a1 + 1186) = v87;
          v88 = *v3;
          v89 = *(_QWORD *)(a2 + v88);
          if (v89 <= 0xFFFFFFFFFFFFFFF7 && v89 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v89);
            *(_QWORD *)(a2 + v88) = v89 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__isDateInWeekendOnDevice;
          goto LABEL_746;
        case 0x1Du:
          *(_QWORD *)(a1 + 1168) |= 4uLL;
          v90 = *v3;
          v91 = *(_QWORD *)(a2 + v90);
          if (v91 <= 0xFFFFFFFFFFFFFFF7 && v91 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v91);
            *(_QWORD *)(a2 + v90) = v91 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__ambientLightTypePopularity;
          goto LABEL_746;
        case 0x1Eu:
          *(_QWORD *)(a1 + 1168) |= 2uLL;
          v92 = *v3;
          v93 = *(_QWORD *)(a2 + v92);
          if (v93 <= 0xFFFFFFFFFFFFFFF7 && v93 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v93);
            *(_QWORD *)(a2 + v92) = v93 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__ambientLightTypeLaunchPopularity;
          goto LABEL_746;
        case 0x1Fu:
          *(_QWORD *)(a1 + 1176) |= 0x2000000000000uLL;
          v94 = *v3;
          v95 = *(_QWORD *)(a2 + v94);
          if (v95 <= 0xFFFFFFFFFFFFFFF7 && v95 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v95);
            *(_QWORD *)(a2 + v94) = v95 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appTimeOfDayLaunches;
          goto LABEL_746;
        case 0x20u:
          *(_QWORD *)(a1 + 1168) |= 8uLL;
          v96 = *v3;
          v97 = *(_QWORD *)(a2 + v96);
          if (v97 <= 0xFFFFFFFFFFFFFFF7 && v97 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v97);
            *(_QWORD *)(a2 + v96) = v97 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appDayOfWeekLaunches;
          goto LABEL_746;
        case 0x21u:
          *(_QWORD *)(a1 + 1176) |= 0x1000000000000uLL;
          v98 = *v3;
          v99 = *(_QWORD *)(a2 + v98);
          if (v99 <= 0xFFFFFFFFFFFFFFF7 && v99 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v99);
            *(_QWORD *)(a2 + v98) = v99 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appTimeAndDayOfWeekPopularity;
          goto LABEL_746;
        case 0x22u:
          *(_QWORD *)(a1 + 1176) |= 0x400000000000uLL;
          v100 = *v3;
          v101 = *(_QWORD *)(a2 + v100);
          if (v101 <= 0xFFFFFFFFFFFFFFF7 && v101 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v101);
            *(_QWORD *)(a2 + v100) = v101 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appPopularityGivenTimeAndDayOfWeek;
          goto LABEL_746;
        case 0x23u:
          *(_QWORD *)(a1 + 1176) |= 0x800000000000uLL;
          v102 = *v3;
          v103 = *(_QWORD *)(a2 + v102);
          if (v103 <= 0xFFFFFFFFFFFFFFF7 && v103 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v103);
            *(_QWORD *)(a2 + v102) = v103 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appPopularityOfTimeAndDayOfWeekGivenApp;
          goto LABEL_746;
        case 0x24u:
          *(_QWORD *)(a1 + 1176) |= 0x4000000000000uLL;
          v104 = *v3;
          v105 = *(_QWORD *)(a2 + v104);
          if (v105 <= 0xFFFFFFFFFFFFFFF7 && v105 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v105);
            *(_QWORD *)(a2 + v104) = v105 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appTotalNumberOfTimeAndDayOfWeekLaunches;
          goto LABEL_746;
        case 0x25u:
          *(_QWORD *)(a1 + 1168) |= 0x4000000000000000uLL;
          v106 = *v3;
          v107 = *(_QWORD *)(a2 + v106);
          if (v107 <= 0xFFFFFFFFFFFFFFF7 && v107 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v107);
            *(_QWORD *)(a2 + v106) = v107 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesCoarseTimePowLocationForAppInContext;
          goto LABEL_746;
        case 0x26u:
          *(_QWORD *)(a1 + 1168) |= 0x8000000000000000;
          v108 = *v3;
          v109 = *(_QWORD *)(a2 + v108);
          if (v109 <= 0xFFFFFFFFFFFFFFF7 && v109 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v109);
            *(_QWORD *)(a2 + v108) = v109 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesCoarseTimePowLocationInContext;
          goto LABEL_746;
        case 0x27u:
          *(_QWORD *)(a1 + 1168) |= 0x2000000000000000uLL;
          v110 = *v3;
          v111 = *(_QWORD *)(a2 + v110);
          if (v111 <= 0xFFFFFFFFFFFFFFF7 && v111 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v111);
            *(_QWORD *)(a2 + v110) = v111 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesCoarseTimePowLocationForApp;
          goto LABEL_746;
        case 0x28u:
          *(_QWORD *)(a1 + 1168) |= 0x1000000000000000uLL;
          v112 = *v3;
          v113 = *(_QWORD *)(a2 + v112);
          if (v113 <= 0xFFFFFFFFFFFFFFF7 && v113 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v113);
            *(_QWORD *)(a2 + v112) = v113 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesCoarseTimePowLocationForAllAppsAndContexts;
          goto LABEL_746;
        case 0x29u:
          *(_QWORD *)(a1 + 1176) |= 0x20000000000uLL;
          v114 = *v3;
          v115 = *(_QWORD *)(a2 + v114);
          if (v115 <= 0xFFFFFFFFFFFFFFF7 && v115 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v115);
            *(_QWORD *)(a2 + v114) = v115 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesSpecificTimeDowLocationForAppInContext;
          goto LABEL_746;
        case 0x2Au:
          *(_QWORD *)(a1 + 1176) |= 0x40000000000uLL;
          v116 = *v3;
          v117 = *(_QWORD *)(a2 + v116);
          if (v117 <= 0xFFFFFFFFFFFFFFF7 && v117 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v117);
            *(_QWORD *)(a2 + v116) = v117 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesSpecificTimeDowLocationInContext;
          goto LABEL_746;
        case 0x2Bu:
          *(_QWORD *)(a1 + 1176) |= 0x10000000000uLL;
          v118 = *v3;
          v119 = *(_QWORD *)(a2 + v118);
          if (v119 <= 0xFFFFFFFFFFFFFFF7 && v119 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v119);
            *(_QWORD *)(a2 + v118) = v119 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesSpecificTimeDowLocationForApp;
          goto LABEL_746;
        case 0x2Cu:
          *(_QWORD *)(a1 + 1176) |= 0x8000000000uLL;
          v120 = *v3;
          v121 = *(_QWORD *)(a2 + v120);
          if (v121 <= 0xFFFFFFFFFFFFFFF7 && v121 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v121);
            *(_QWORD *)(a2 + v120) = v121 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesSpecificTimeDowLocationForAllAppsAndContexts;
          goto LABEL_746;
        case 0x2Du:
          *(_QWORD *)(a1 + 1176) |= 0x10uLL;
          v122 = *v3;
          v123 = *(_QWORD *)(a2 + v122);
          if (v123 <= 0xFFFFFFFFFFFFFFF7 && v123 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v123);
            *(_QWORD *)(a2 + v122) = v123 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket0ForApp;
          goto LABEL_746;
        case 0x2Eu:
          *(_QWORD *)(a1 + 1176) |= 0x8000uLL;
          v124 = *v3;
          v125 = *(_QWORD *)(a2 + v124);
          if (v125 <= 0xFFFFFFFFFFFFFFF7 && v125 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v125);
            *(_QWORD *)(a2 + v124) = v125 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket1ForApp;
          goto LABEL_746;
        case 0x2Fu:
          *(_QWORD *)(a1 + 1176) |= 0x200000uLL;
          v126 = *v3;
          v127 = *(_QWORD *)(a2 + v126);
          if (v127 <= 0xFFFFFFFFFFFFFFF7 && v127 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v127);
            *(_QWORD *)(a2 + v126) = v127 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket2ForApp;
          goto LABEL_746;
        case 0x30u:
          *(_QWORD *)(a1 + 1176) |= 0x400000uLL;
          v128 = *v3;
          v129 = *(_QWORD *)(a2 + v128);
          if (v129 <= 0xFFFFFFFFFFFFFFF7 && v129 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v129);
            *(_QWORD *)(a2 + v128) = v129 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket3ForApp;
          goto LABEL_746;
        case 0x31u:
          *(_QWORD *)(a1 + 1176) |= 0x800000uLL;
          v130 = *v3;
          v131 = *(_QWORD *)(a2 + v130);
          if (v131 <= 0xFFFFFFFFFFFFFFF7 && v131 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v131);
            *(_QWORD *)(a2 + v130) = v131 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket4ForApp;
          goto LABEL_746;
        case 0x32u:
          *(_QWORD *)(a1 + 1176) |= 0x1000000uLL;
          v132 = *v3;
          v133 = *(_QWORD *)(a2 + v132);
          if (v133 <= 0xFFFFFFFFFFFFFFF7 && v133 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v133);
            *(_QWORD *)(a2 + v132) = v133 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket5ForApp;
          goto LABEL_746;
        case 0x33u:
          *(_QWORD *)(a1 + 1176) |= 0x2000000uLL;
          v134 = *v3;
          v135 = *(_QWORD *)(a2 + v134);
          if (v135 <= 0xFFFFFFFFFFFFFFF7 && v135 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v135);
            *(_QWORD *)(a2 + v134) = v135 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket6ForApp;
          goto LABEL_746;
        case 0x34u:
          *(_QWORD *)(a1 + 1176) |= 0x4000000uLL;
          v136 = *v3;
          v137 = *(_QWORD *)(a2 + v136);
          if (v137 <= 0xFFFFFFFFFFFFFFF7 && v137 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v137);
            *(_QWORD *)(a2 + v136) = v137 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket7ForApp;
          goto LABEL_746;
        case 0x35u:
          *(_QWORD *)(a1 + 1176) |= 0x8000000uLL;
          v138 = *v3;
          v139 = *(_QWORD *)(a2 + v138);
          if (v139 <= 0xFFFFFFFFFFFFFFF7 && v139 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v139);
            *(_QWORD *)(a2 + v138) = v139 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket8ForApp;
          goto LABEL_746;
        case 0x36u:
          *(_QWORD *)(a1 + 1176) |= 0x10000000uLL;
          v140 = *v3;
          v141 = *(_QWORD *)(a2 + v140);
          if (v141 <= 0xFFFFFFFFFFFFFFF7 && v141 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v141);
            *(_QWORD *)(a2 + v140) = v141 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket9ForApp;
          goto LABEL_746;
        case 0x37u:
          *(_QWORD *)(a1 + 1176) |= 0x20uLL;
          v142 = *v3;
          v143 = *(_QWORD *)(a2 + v142);
          if (v143 <= 0xFFFFFFFFFFFFFFF7 && v143 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v143);
            *(_QWORD *)(a2 + v142) = v143 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket10ForApp;
          goto LABEL_746;
        case 0x38u:
          *(_QWORD *)(a1 + 1176) |= 0x40uLL;
          v144 = *v3;
          v145 = *(_QWORD *)(a2 + v144);
          if (v145 <= 0xFFFFFFFFFFFFFFF7 && v145 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v145);
            *(_QWORD *)(a2 + v144) = v145 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket11ForApp;
          goto LABEL_746;
        case 0x39u:
          *(_QWORD *)(a1 + 1176) |= 0x80uLL;
          v146 = *v3;
          v147 = *(_QWORD *)(a2 + v146);
          if (v147 <= 0xFFFFFFFFFFFFFFF7 && v147 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v147);
            *(_QWORD *)(a2 + v146) = v147 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket12ForApp;
          goto LABEL_746;
        case 0x3Au:
          *(_QWORD *)(a1 + 1176) |= 0x100uLL;
          v148 = *v3;
          v149 = *(_QWORD *)(a2 + v148);
          if (v149 <= 0xFFFFFFFFFFFFFFF7 && v149 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v149);
            *(_QWORD *)(a2 + v148) = v149 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket13ForApp;
          goto LABEL_746;
        case 0x3Bu:
          *(_QWORD *)(a1 + 1176) |= 0x200uLL;
          v150 = *v3;
          v151 = *(_QWORD *)(a2 + v150);
          if (v151 <= 0xFFFFFFFFFFFFFFF7 && v151 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v151);
            *(_QWORD *)(a2 + v150) = v151 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket14ForApp;
          goto LABEL_746;
        case 0x3Cu:
          *(_QWORD *)(a1 + 1176) |= 0x400uLL;
          v152 = *v3;
          v153 = *(_QWORD *)(a2 + v152);
          if (v153 <= 0xFFFFFFFFFFFFFFF7 && v153 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v153);
            *(_QWORD *)(a2 + v152) = v153 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket15ForApp;
          goto LABEL_746;
        case 0x3Du:
          *(_QWORD *)(a1 + 1176) |= 0x800uLL;
          v154 = *v3;
          v155 = *(_QWORD *)(a2 + v154);
          if (v155 <= 0xFFFFFFFFFFFFFFF7 && v155 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v155);
            *(_QWORD *)(a2 + v154) = v155 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket16ForApp;
          goto LABEL_746;
        case 0x3Eu:
          *(_QWORD *)(a1 + 1176) |= 0x1000uLL;
          v156 = *v3;
          v157 = *(_QWORD *)(a2 + v156);
          if (v157 <= 0xFFFFFFFFFFFFFFF7 && v157 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v157);
            *(_QWORD *)(a2 + v156) = v157 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket17ForApp;
          goto LABEL_746;
        case 0x3Fu:
          *(_QWORD *)(a1 + 1176) |= 0x2000uLL;
          v158 = *v3;
          v159 = *(_QWORD *)(a2 + v158);
          if (v159 <= 0xFFFFFFFFFFFFFFF7 && v159 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v159);
            *(_QWORD *)(a2 + v158) = v159 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket18ForApp;
          goto LABEL_746;
        case 0x40u:
          *(_QWORD *)(a1 + 1176) |= 0x4000uLL;
          v160 = *v3;
          v161 = *(_QWORD *)(a2 + v160);
          if (v161 <= 0xFFFFFFFFFFFFFFF7 && v161 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v161);
            *(_QWORD *)(a2 + v160) = v161 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket19ForApp;
          goto LABEL_746;
        case 0x41u:
          *(_QWORD *)(a1 + 1176) |= 0x10000uLL;
          v162 = *v3;
          v163 = *(_QWORD *)(a2 + v162);
          if (v163 <= 0xFFFFFFFFFFFFFFF7 && v163 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v163);
            *(_QWORD *)(a2 + v162) = v163 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket20ForApp;
          goto LABEL_746;
        case 0x42u:
          *(_QWORD *)(a1 + 1176) |= 0x20000uLL;
          v164 = *v3;
          v165 = *(_QWORD *)(a2 + v164);
          if (v165 <= 0xFFFFFFFFFFFFFFF7 && v165 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v165);
            *(_QWORD *)(a2 + v164) = v165 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket21ForApp;
          goto LABEL_746;
        case 0x43u:
          *(_QWORD *)(a1 + 1176) |= 0x40000uLL;
          v166 = *v3;
          v167 = *(_QWORD *)(a2 + v166);
          if (v167 <= 0xFFFFFFFFFFFFFFF7 && v167 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v167);
            *(_QWORD *)(a2 + v166) = v167 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket22ForApp;
          goto LABEL_746;
        case 0x44u:
          *(_QWORD *)(a1 + 1176) |= 0x80000uLL;
          v168 = *v3;
          v169 = *(_QWORD *)(a2 + v168);
          if (v169 <= 0xFFFFFFFFFFFFFFF7 && v169 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v169);
            *(_QWORD *)(a2 + v168) = v169 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket23ForApp;
          goto LABEL_746;
        case 0x45u:
          *(_QWORD *)(a1 + 1176) |= 0x100000uLL;
          v170 = *v3;
          v171 = *(_QWORD *)(a2 + v170);
          if (v171 <= 0xFFFFFFFFFFFFFFF7 && v171 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v171);
            *(_QWORD *)(a2 + v170) = v171 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket24ForApp;
          goto LABEL_746;
        case 0x46u:
          *(_QWORD *)(a1 + 1176) |= 0x800000000uLL;
          v172 = *v3;
          v173 = *(_QWORD *)(a2 + v172);
          if (v173 <= 0xFFFFFFFFFFFFFFF7 && v173 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v173);
            *(_QWORD *)(a2 + v172) = v173 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesOnDayOfWeekSundayForApp;
          goto LABEL_746;
        case 0x47u:
          *(_QWORD *)(a1 + 1176) |= 0x200000000uLL;
          v174 = *v3;
          v175 = *(_QWORD *)(a2 + v174);
          if (v175 <= 0xFFFFFFFFFFFFFFF7 && v175 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v175);
            *(_QWORD *)(a2 + v174) = v175 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesOnDayOfWeekMondayForApp;
          goto LABEL_746;
        case 0x48u:
          *(_QWORD *)(a1 + 1176) |= 0x2000000000uLL;
          v176 = *v3;
          v177 = *(_QWORD *)(a2 + v176);
          if (v177 <= 0xFFFFFFFFFFFFFFF7 && v177 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v177);
            *(_QWORD *)(a2 + v176) = v177 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesOnDayOfWeekTuesdayForApp;
          goto LABEL_746;
        case 0x49u:
          *(_QWORD *)(a1 + 1176) |= 0x4000000000uLL;
          v178 = *v3;
          v179 = *(_QWORD *)(a2 + v178);
          if (v179 <= 0xFFFFFFFFFFFFFFF7 && v179 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v179);
            *(_QWORD *)(a2 + v178) = v179 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesOnDayOfWeekWednesdayForApp;
          goto LABEL_746;
        case 0x4Au:
          *(_QWORD *)(a1 + 1176) |= 0x1000000000uLL;
          v180 = *v3;
          v181 = *(_QWORD *)(a2 + v180);
          if (v181 <= 0xFFFFFFFFFFFFFFF7 && v181 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v181);
            *(_QWORD *)(a2 + v180) = v181 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesOnDayOfWeekThursdayForApp;
          goto LABEL_746;
        case 0x4Bu:
          *(_QWORD *)(a1 + 1176) |= 0x100000000uLL;
          v182 = *v3;
          v183 = *(_QWORD *)(a2 + v182);
          if (v183 <= 0xFFFFFFFFFFFFFFF7 && v183 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v183);
            *(_QWORD *)(a2 + v182) = v183 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesOnDayOfWeekFridayForApp;
          goto LABEL_746;
        case 0x4Cu:
          *(_QWORD *)(a1 + 1176) |= 0x400000000uLL;
          v184 = *v3;
          v185 = *(_QWORD *)(a2 + v184);
          if (v185 <= 0xFFFFFFFFFFFFFFF7 && v185 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v185);
            *(_QWORD *)(a2 + v184) = v185 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesOnDayOfWeekSaturdayForApp;
          goto LABEL_746;
        case 0x4Du:
          *(_QWORD *)(a1 + 1168) |= 0x200uLL;
          v186 = *v3;
          v187 = *(_QWORD *)(a2 + v186);
          if (v187 <= 0xFFFFFFFFFFFFFFF7 && v187 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v187);
            *(_QWORD *)(a2 + v186) = v187 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHash0ForApp;
          goto LABEL_746;
        case 0x4Eu:
          *(_QWORD *)(a1 + 1168) |= 0x400uLL;
          v188 = *v3;
          v189 = *(_QWORD *)(a2 + v188);
          if (v189 <= 0xFFFFFFFFFFFFFFF7 && v189 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v189);
            *(_QWORD *)(a2 + v188) = v189 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHash1ForApp;
          goto LABEL_746;
        case 0x4Fu:
          *(_QWORD *)(a1 + 1168) |= 0x800uLL;
          v190 = *v3;
          v191 = *(_QWORD *)(a2 + v190);
          if (v191 <= 0xFFFFFFFFFFFFFFF7 && v191 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v191);
            *(_QWORD *)(a2 + v190) = v191 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHash2ForApp;
          goto LABEL_746;
        case 0x50u:
          *(_QWORD *)(a1 + 1168) |= 0x1000uLL;
          v192 = *v3;
          v193 = *(_QWORD *)(a2 + v192);
          if (v193 <= 0xFFFFFFFFFFFFFFF7 && v193 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v193);
            *(_QWORD *)(a2 + v192) = v193 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHash3ForApp;
          goto LABEL_746;
        case 0x51u:
          *(_QWORD *)(a1 + 1168) |= 0x2000uLL;
          v194 = *v3;
          v195 = *(_QWORD *)(a2 + v194);
          if (v195 <= 0xFFFFFFFFFFFFFFF7 && v195 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v195);
            *(_QWORD *)(a2 + v194) = v195 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHash4ForApp;
          goto LABEL_746;
        case 0x52u:
          *(_QWORD *)(a1 + 1168) |= 0x4000uLL;
          v196 = *v3;
          v197 = *(_QWORD *)(a2 + v196);
          if (v197 <= 0xFFFFFFFFFFFFFFF7 && v197 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v197);
            *(_QWORD *)(a2 + v196) = v197 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHash5ForApp;
          goto LABEL_746;
        case 0x53u:
          *(_QWORD *)(a1 + 1168) |= 0x8000uLL;
          v198 = *v3;
          v199 = *(_QWORD *)(a2 + v198);
          if (v199 <= 0xFFFFFFFFFFFFFFF7 && v199 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v199);
            *(_QWORD *)(a2 + v198) = v199 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHash6ForApp;
          goto LABEL_746;
        case 0x54u:
          *(_QWORD *)(a1 + 1168) |= 0x10000uLL;
          v200 = *v3;
          v201 = *(_QWORD *)(a2 + v200);
          if (v201 <= 0xFFFFFFFFFFFFFFF7 && v201 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v201);
            *(_QWORD *)(a2 + v200) = v201 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHash7ForApp;
          goto LABEL_746;
        case 0x55u:
          *(_QWORD *)(a1 + 1168) |= 0x20000uLL;
          v202 = *v3;
          v203 = *(_QWORD *)(a2 + v202);
          if (v203 <= 0xFFFFFFFFFFFFFFF7 && v203 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v203);
            *(_QWORD *)(a2 + v202) = v203 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHash8ForApp;
          goto LABEL_746;
        case 0x56u:
          *(_QWORD *)(a1 + 1168) |= 0x40000uLL;
          v204 = *v3;
          v205 = *(_QWORD *)(a2 + v204);
          if (v205 <= 0xFFFFFFFFFFFFFFF7 && v205 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v205);
            *(_QWORD *)(a2 + v204) = v205 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHash9ForApp;
          goto LABEL_746;
        case 0x57u:
          *(_QWORD *)(a1 + 1168) |= 0x4000000uLL;
          v206 = *v3;
          v207 = *(_QWORD *)(a2 + v206);
          if (v207 <= 0xFFFFFFFFFFFFFFF7 && v207 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v207);
            *(_QWORD *)(a2 + v206) = v207 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash0ForApp;
          goto LABEL_746;
        case 0x58u:
          *(_QWORD *)(a1 + 1168) |= 0x100000000uLL;
          v208 = *v3;
          v209 = *(_QWORD *)(a2 + v208);
          if (v209 <= 0xFFFFFFFFFFFFFFF7 && v209 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v209);
            *(_QWORD *)(a2 + v208) = v209 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash1ForApp;
          goto LABEL_746;
        case 0x59u:
          *(_QWORD *)(a1 + 1168) |= 0x200000000uLL;
          v210 = *v3;
          v211 = *(_QWORD *)(a2 + v210);
          if (v211 <= 0xFFFFFFFFFFFFFFF7 && v211 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v211);
            *(_QWORD *)(a2 + v210) = v211 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash2ForApp;
          goto LABEL_746;
        case 0x5Au:
          *(_QWORD *)(a1 + 1168) |= 0x400000000uLL;
          v212 = *v3;
          v213 = *(_QWORD *)(a2 + v212);
          if (v213 <= 0xFFFFFFFFFFFFFFF7 && v213 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v213);
            *(_QWORD *)(a2 + v212) = v213 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash3ForApp;
          goto LABEL_746;
        case 0x5Bu:
          *(_QWORD *)(a1 + 1168) |= 0x800000000uLL;
          v214 = *v3;
          v215 = *(_QWORD *)(a2 + v214);
          if (v215 <= 0xFFFFFFFFFFFFFFF7 && v215 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v215);
            *(_QWORD *)(a2 + v214) = v215 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash4ForApp;
          goto LABEL_746;
        case 0x5Cu:
          *(_QWORD *)(a1 + 1168) |= 0x1000000000uLL;
          v216 = *v3;
          v217 = *(_QWORD *)(a2 + v216);
          if (v217 <= 0xFFFFFFFFFFFFFFF7 && v217 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v217);
            *(_QWORD *)(a2 + v216) = v217 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash5ForApp;
          goto LABEL_746;
        case 0x5Du:
          *(_QWORD *)(a1 + 1168) |= 0x2000000000uLL;
          v218 = *v3;
          v219 = *(_QWORD *)(a2 + v218);
          if (v219 <= 0xFFFFFFFFFFFFFFF7 && v219 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v219);
            *(_QWORD *)(a2 + v218) = v219 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash6ForApp;
          goto LABEL_746;
        case 0x5Eu:
          *(_QWORD *)(a1 + 1168) |= 0x4000000000uLL;
          v220 = *v3;
          v221 = *(_QWORD *)(a2 + v220);
          if (v221 <= 0xFFFFFFFFFFFFFFF7 && v221 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v221);
            *(_QWORD *)(a2 + v220) = v221 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash7ForApp;
          goto LABEL_746;
        case 0x5Fu:
          *(_QWORD *)(a1 + 1168) |= 0x8000000000uLL;
          v222 = *v3;
          v223 = *(_QWORD *)(a2 + v222);
          if (v223 <= 0xFFFFFFFFFFFFFFF7 && v223 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v223);
            *(_QWORD *)(a2 + v222) = v223 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash8ForApp;
          goto LABEL_746;
        case 0x60u:
          *(_QWORD *)(a1 + 1168) |= 0x10000000000uLL;
          v224 = *v3;
          v225 = *(_QWORD *)(a2 + v224);
          if (v225 <= 0xFFFFFFFFFFFFFFF7 && v225 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v225);
            *(_QWORD *)(a2 + v224) = v225 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash9ForApp;
          goto LABEL_746;
        case 0x61u:
          *(_QWORD *)(a1 + 1168) |= 0x8000000uLL;
          v226 = *v3;
          v227 = *(_QWORD *)(a2 + v226);
          if (v227 <= 0xFFFFFFFFFFFFFFF7 && v227 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v227);
            *(_QWORD *)(a2 + v226) = v227 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash10ForApp;
          goto LABEL_746;
        case 0x62u:
          *(_QWORD *)(a1 + 1168) |= 0x10000000uLL;
          v228 = *v3;
          v229 = *(_QWORD *)(a2 + v228);
          if (v229 <= 0xFFFFFFFFFFFFFFF7 && v229 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v229);
            *(_QWORD *)(a2 + v228) = v229 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash11ForApp;
          goto LABEL_746;
        case 0x63u:
          *(_QWORD *)(a1 + 1168) |= 0x20000000uLL;
          v230 = *v3;
          v231 = *(_QWORD *)(a2 + v230);
          if (v231 <= 0xFFFFFFFFFFFFFFF7 && v231 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v231);
            *(_QWORD *)(a2 + v230) = v231 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash12ForApp;
          goto LABEL_746;
        case 0x64u:
          *(_QWORD *)(a1 + 1168) |= 0x40000000uLL;
          v232 = *v3;
          v233 = *(_QWORD *)(a2 + v232);
          if (v233 <= 0xFFFFFFFFFFFFFFF7 && v233 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v233);
            *(_QWORD *)(a2 + v232) = v233 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash13ForApp;
          goto LABEL_746;
        case 0x65u:
          *(_QWORD *)(a1 + 1168) |= 0x80000000uLL;
          v234 = *v3;
          v235 = *(_QWORD *)(a2 + v234);
          if (v235 <= 0xFFFFFFFFFFFFFFF7 && v235 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v235);
            *(_QWORD *)(a2 + v234) = v235 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash14ForApp;
          goto LABEL_746;
        case 0x66u:
          *(_QWORD *)(a1 + 1176) |= 0x100000000000uLL;
          v236 = *v3;
          v237 = *(_QWORD *)(a2 + v236);
          if (v237 <= 0xFFFFFFFFFFFFFFF7 && v237 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v237);
            *(_QWORD *)(a2 + v236) = v237 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appNumberOfSpecificGeohashesForApp;
          goto LABEL_746;
        case 0x67u:
          *(_QWORD *)(a1 + 1176) |= 0x80000000000uLL;
          v238 = *v3;
          v239 = *(_QWORD *)(a2 + v238);
          if (v239 <= 0xFFFFFFFFFFFFFFF7 && v239 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v239);
            *(_QWORD *)(a2 + v238) = v239 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appNumberOfCoarseGeohashesForApp;
          goto LABEL_746;
        case 0x68u:
          *(_QWORD *)(a1 + 1168) |= 0x40uLL;
          v240 = *v3;
          v241 = *(_QWORD *)(a2 + v240);
          if (v241 <= 0xFFFFFFFFFFFFFFF7 && v241 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v241);
            *(_QWORD *)(a2 + v240) = v241 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appEntropyForTimeBuckets;
          goto LABEL_746;
        case 0x69u:
          *(_QWORD *)(a1 + 1168) |= 0x20uLL;
          v242 = *v3;
          v243 = *(_QWORD *)(a2 + v242);
          if (v243 <= 0xFFFFFFFFFFFFFFF7 && v243 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v243);
            *(_QWORD *)(a2 + v242) = v243 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appEntropyForSpecificGeoHash;
          goto LABEL_746;
        case 0x6Au:
          *(_QWORD *)(a1 + 1168) |= 0x10uLL;
          v244 = *v3;
          v245 = *(_QWORD *)(a2 + v244);
          if (v245 <= 0xFFFFFFFFFFFFFFF7 && v245 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v245);
            *(_QWORD *)(a2 + v244) = v245 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appEntropyForCoarseGeoHash;
          goto LABEL_746;
        case 0x6Bu:
          *(_QWORD *)(a1 + 1168) |= 0x40000000000uLL;
          v246 = *v3;
          v247 = *(_QWORD *)(a2 + v246);
          if (v247 <= 0xFFFFFFFFFFFFFFF7 && v247 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v247);
            *(_QWORD *)(a2 + v246) = v247 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHashForAppInContext;
          goto LABEL_746;
        case 0x6Cu:
          *(_QWORD *)(a1 + 1168) |= 0x100000uLL;
          v248 = *v3;
          v249 = *(_QWORD *)(a2 + v248);
          if (v249 <= 0xFFFFFFFFFFFFFFF7 && v249 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v249);
            *(_QWORD *)(a2 + v248) = v249 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHashForAppInContext;
          goto LABEL_746;
        case 0x6Du:
          *(_QWORD *)(a1 + 1168) |= 0x400000uLL;
          v250 = *v3;
          v251 = *(_QWORD *)(a2 + v250);
          if (v251 <= 0xFFFFFFFFFFFFFFF7 && v251 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v251);
            *(_QWORD *)(a2 + v250) = v251 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtDayOfWeekForApp;
          goto LABEL_746;
        case 0x6Eu:
          *(_QWORD *)(a1 + 1168) |= 0x200000000000uLL;
          v252 = *v3;
          v253 = *(_QWORD *)(a2 + v252);
          if (v253 <= 0xFFFFFFFFFFFFFFF7 && v253 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v253);
            *(_QWORD *)(a2 + v252) = v253 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtTimeAndDayForAppInContext;
          goto LABEL_746;
        case 0x6Fu:
          *(_QWORD *)(a1 + 1168) |= 0x400000000000uLL;
          v254 = *v3;
          v255 = *(_QWORD *)(a2 + v254);
          if (v255 <= 0xFFFFFFFFFFFFFFF7 && v255 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v255);
            *(_QWORD *)(a2 + v254) = v255 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtTimeAndDayInContext;
          goto LABEL_746;
        case 0x70u:
          *(_QWORD *)(a1 + 1168) |= 0x100000000000uLL;
          v256 = *v3;
          v257 = *(_QWORD *)(a2 + v256);
          if (v257 <= 0xFFFFFFFFFFFFFFF7 && v257 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v257);
            *(_QWORD *)(a2 + v256) = v257 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtTimeAndDayForApp;
          goto LABEL_746;
        case 0x71u:
          *(_QWORD *)(a1 + 1168) |= 0x200000uLL;
          v258 = *v3;
          v259 = *(_QWORD *)(a2 + v258);
          if (v259 <= 0xFFFFFFFFFFFFFFF7 && v259 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v259);
            *(_QWORD *)(a2 + v258) = v259 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHashInContext;
          goto LABEL_746;
        case 0x72u:
          *(_QWORD *)(a1 + 1168) |= 0x80000uLL;
          v260 = *v3;
          v261 = *(_QWORD *)(a2 + v260);
          if (v261 <= 0xFFFFFFFFFFFFFFF7 && v261 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v261);
            *(_QWORD *)(a2 + v260) = v261 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHashForApp;
          goto LABEL_746;
        case 0x73u:
          *(_QWORD *)(a1 + 1168) |= 0x80000000000uLL;
          v262 = *v3;
          v263 = *(_QWORD *)(a2 + v262);
          if (v263 <= 0xFFFFFFFFFFFFFFF7 && v263 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v263);
            *(_QWORD *)(a2 + v262) = v263 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHashInContext;
          goto LABEL_746;
        case 0x74u:
          *(_QWORD *)(a1 + 1168) |= 0x20000000000uLL;
          v264 = *v3;
          v265 = *(_QWORD *)(a2 + v264);
          if (v265 <= 0xFFFFFFFFFFFFFFF7 && v265 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v265);
            *(_QWORD *)(a2 + v264) = v265 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHashForApp;
          goto LABEL_746;
        case 0x75u:
          *(_QWORD *)(a1 + 1176) |= 1uLL;
          v266 = *v3;
          v267 = *(_QWORD *)(a2 + v266);
          if (v267 <= 0xFFFFFFFFFFFFFFF7 && v267 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v267);
            *(_QWORD *)(a2 + v266) = v267 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesForAllAppsAndContextsDecayedAtCoarseContextRate;
          goto LABEL_746;
        case 0x76u:
          *(_QWORD *)(a1 + 1176) |= 2uLL;
          v268 = *v3;
          v269 = *(_QWORD *)(a2 + v268);
          if (v269 <= 0xFFFFFFFFFFFFFFF7 && v269 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v269);
            *(_QWORD *)(a2 + v268) = v269 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesForAllAppsAndContextsDecayedAtSpecificContextRate;
          goto LABEL_746;
        case 0x77u:
          v270 = *(_BYTE *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 2u;
          *(_BYTE *)(a1 + 1186) = v270;
          v271 = *v3;
          v272 = *(_QWORD *)(a2 + v271);
          if (v272 <= 0xFFFFFFFFFFFFFFF7 && v272 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v272);
            *(_QWORD *)(a2 + v271) = v272 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__isLocationServicesDisabled;
          goto LABEL_746;
        case 0x78u:
          *(_QWORD *)(a1 + 1176) |= 0x40000000uLL;
          v273 = *v3;
          v274 = *(_QWORD *)(a2 + v273);
          if (v274 <= 0xFFFFFFFFFFFFFFF7 && v274 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v274);
            *(_QWORD *)(a2 + v273) = v274 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTwoHourTimeBucketForAppInContext;
          goto LABEL_746;
        case 0x79u:
          *(_QWORD *)(a1 + 1176) |= 0x80000000uLL;
          v275 = *v3;
          v276 = *(_QWORD *)(a2 + v275);
          if (v276 <= 0xFFFFFFFFFFFFFFF7 && v276 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v276);
            *(_QWORD *)(a2 + v275) = v276 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTwoHourTimeBucketInContext;
          goto LABEL_746;
        case 0x7Au:
          *(_QWORD *)(a1 + 1176) |= 0x20000000uLL;
          v277 = *v3;
          v278 = *(_QWORD *)(a2 + v277);
          if (v278 <= 0xFFFFFFFFFFFFFFF7 && v278 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v278);
            *(_QWORD *)(a2 + v277) = v278 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTwoHourTimeBucketForApp;
          goto LABEL_746;
        case 0x7Bu:
          *(_QWORD *)(a1 + 1176) |= 0x20000000000000uLL;
          v279 = *v3;
          v280 = *(_QWORD *)(a2 + v279);
          if (v280 <= 0xFFFFFFFFFFFFFFF7 && v280 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v280);
            *(_QWORD *)(a2 + v279) = v280 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__currentTimeBucketFromZeroToTwentyFour;
          goto LABEL_746;
        case 0x7Cu:
          *(_QWORD *)(a1 + 1168) |= 0x400000000000000uLL;
          v281 = *v3;
          v282 = *(_QWORD *)(a2 + v281);
          if (v282 <= 0xFFFFFFFFFFFFFFF7 && v282 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v282);
            *(_QWORD *)(a2 + v281) = v282 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHashForAppInContext;
          goto LABEL_746;
        case 0x7Du:
          *(_QWORD *)(a1 + 1168) |= 0x800000000000000uLL;
          v283 = *v3;
          v284 = *(_QWORD *)(a2 + v283);
          if (v284 <= 0xFFFFFFFFFFFFFFF7 && v284 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v284);
            *(_QWORD *)(a2 + v283) = v284 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHashInContext;
          goto LABEL_746;
        case 0x7Eu:
          *(_QWORD *)(a1 + 1168) |= 0x200000000000000uLL;
          v285 = *v3;
          v286 = *(_QWORD *)(a2 + v285);
          if (v286 <= 0xFFFFFFFFFFFFFFF7 && v286 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v286);
            *(_QWORD *)(a2 + v285) = v286 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHashForApp;
          goto LABEL_746;
        case 0x7Fu:
          *(_QWORD *)(a1 + 1168) |= 0x800000000000uLL;
          v287 = *v3;
          v288 = *(_QWORD *)(a2 + v287);
          if (v288 <= 0xFFFFFFFFFFFFFFF7 && v288 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v288);
            *(_QWORD *)(a2 + v287) = v288 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHash0ForApp;
          goto LABEL_746;
        case 0x80u:
          *(_QWORD *)(a1 + 1168) |= 0x1000000000000uLL;
          v289 = *v3;
          v290 = *(_QWORD *)(a2 + v289);
          if (v290 <= 0xFFFFFFFFFFFFFFF7 && v290 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v290);
            *(_QWORD *)(a2 + v289) = v290 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHash1ForApp;
          goto LABEL_746;
        case 0x81u:
          *(_QWORD *)(a1 + 1168) |= 0x2000000000000uLL;
          v291 = *v3;
          v292 = *(_QWORD *)(a2 + v291);
          if (v292 <= 0xFFFFFFFFFFFFFFF7 && v292 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v292);
            *(_QWORD *)(a2 + v291) = v292 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHash2ForApp;
          goto LABEL_746;
        case 0x82u:
          *(_QWORD *)(a1 + 1168) |= 0x4000000000000uLL;
          v293 = *v3;
          v294 = *(_QWORD *)(a2 + v293);
          if (v294 <= 0xFFFFFFFFFFFFFFF7 && v294 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v294);
            *(_QWORD *)(a2 + v293) = v294 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHash3ForApp;
          goto LABEL_746;
        case 0x83u:
          *(_QWORD *)(a1 + 1168) |= 0x8000000000000uLL;
          v295 = *v3;
          v296 = *(_QWORD *)(a2 + v295);
          if (v296 <= 0xFFFFFFFFFFFFFFF7 && v296 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v296);
            *(_QWORD *)(a2 + v295) = v296 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHash4ForApp;
          goto LABEL_746;
        case 0x84u:
          *(_QWORD *)(a1 + 1168) |= 0x10000000000000uLL;
          v297 = *v3;
          v298 = *(_QWORD *)(a2 + v297);
          if (v298 <= 0xFFFFFFFFFFFFFFF7 && v298 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v298);
            *(_QWORD *)(a2 + v297) = v298 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHash5ForApp;
          goto LABEL_746;
        case 0x85u:
          *(_QWORD *)(a1 + 1168) |= 0x20000000000000uLL;
          v299 = *v3;
          v300 = *(_QWORD *)(a2 + v299);
          if (v300 <= 0xFFFFFFFFFFFFFFF7 && v300 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v300);
            *(_QWORD *)(a2 + v299) = v300 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHash6ForApp;
          goto LABEL_746;
        case 0x86u:
          *(_QWORD *)(a1 + 1168) |= 0x40000000000000uLL;
          v301 = *v3;
          v302 = *(_QWORD *)(a2 + v301);
          if (v302 <= 0xFFFFFFFFFFFFFFF7 && v302 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v302);
            *(_QWORD *)(a2 + v301) = v302 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHash7ForApp;
          goto LABEL_746;
        case 0x87u:
          *(_QWORD *)(a1 + 1168) |= 0x80000000000000uLL;
          v303 = *v3;
          v304 = *(_QWORD *)(a2 + v303);
          if (v304 <= 0xFFFFFFFFFFFFFFF7 && v304 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v304);
            *(_QWORD *)(a2 + v303) = v304 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHash8ForApp;
          goto LABEL_746;
        case 0x88u:
          *(_QWORD *)(a1 + 1168) |= 0x100000000000000uLL;
          v305 = *v3;
          v306 = *(_QWORD *)(a2 + v305);
          if (v306 <= 0xFFFFFFFFFFFFFFF7 && v306 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v306);
            *(_QWORD *)(a2 + v305) = v306 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHash9ForApp;
          goto LABEL_746;
        case 0x89u:
          *(_QWORD *)(a1 + 1168) |= 0x80uLL;
          v307 = *v3;
          v308 = *(_QWORD *)(a2 + v307);
          if (v308 <= 0xFFFFFFFFFFFFFFF7 && v308 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v308);
            *(_QWORD *)(a2 + v307) = v308 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appEntropyForZoom7GeoHash;
          goto LABEL_746;
        case 0x8Au:
          *(_QWORD *)(a1 + 1176) |= 0x200000000000uLL;
          v309 = *v3;
          v310 = *(_QWORD *)(a2 + v309);
          if (v310 <= 0xFFFFFFFFFFFFFFF7 && v310 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v310);
            *(_QWORD *)(a2 + v309) = v310 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appNumberOfZoom7GeohashesForApp;
          goto LABEL_746;
        case 0x8Bu:
          *(_QWORD *)(a1 + 1168) |= 0x2000000uLL;
          v311 = *v3;
          v312 = *(_QWORD *)(a2 + v311);
          if (v312 <= 0xFFFFFFFFFFFFFFF7 && v312 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v312);
            *(_QWORD *)(a2 + v311) = v312 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSSIDForAppInContext;
          goto LABEL_746;
        case 0x8Cu:
          *(_QWORD *)(a1 + 1168) |= 0x1000000uLL;
          v313 = *v3;
          v314 = *(_QWORD *)(a2 + v313);
          if (v314 <= 0xFFFFFFFFFFFFFFF7 && v314 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v314);
            *(_QWORD *)(a2 + v313) = v314 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSSIDForApp;
          goto LABEL_746;
        case 0x8Du:
          *(_QWORD *)(a1 + 1176) |= 4uLL;
          v315 = *v3;
          v316 = *(_QWORD *)(a2 + v315);
          if (v316 <= 0xFFFFFFFFFFFFFFF7 && v316 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v316);
            *(_QWORD *)(a2 + v315) = v316 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesForCoreMotionForAppInContext;
          goto LABEL_746;
        case 0x8Eu:
          *(_QWORD *)(a1 + 1176) |= 8uLL;
          v317 = *v3;
          v318 = *(_QWORD *)(a2 + v317);
          if (v318 <= 0xFFFFFFFFFFFFFFF7 && v318 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v318);
            *(_QWORD *)(a2 + v317) = v318 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInAirplaneModeForAppInContext;
          goto LABEL_746;
        case 0x8Fu:
          v319 = *(_BYTE *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x40u;
          *(_BYTE *)(a1 + 1186) = v319;
          v320 = *v3;
          v321 = *(_QWORD *)(a2 + v320);
          if (v321 <= 0xFFFFFFFFFFFFFFF7 && v321 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v321);
            *(_QWORD *)(a2 + v320) = v321 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__poiPopularityForAppInContext;
          goto LABEL_746;
        case 0x90u:
          *(_QWORD *)(a1 + 1168) |= 0x100uLL;
          v322 = *v3;
          v323 = *(_QWORD *)(a2 + v322);
          if (v323 <= 0xFFFFFFFFFFFFFFF7 && v323 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v323);
            *(_QWORD *)(a2 + v322) = v323 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchPopularityAtPOIForAppInContext;
          goto LABEL_746;
        case 0x91u:
          *(_QWORD *)(a1 + 1168) |= 0x800000uLL;
          v324 = *v3;
          v325 = *(_QWORD *)(a2 + v324);
          if (v325 <= 0xFFFFFFFFFFFFFFF7 && v325 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v325);
            *(_QWORD *)(a2 + v324) = v325 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtPOIForAppInContext;
LABEL_746:
          *(_QWORD *)(a1 + *v326) = v21;
          goto LABEL_747;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_747:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void OUTLINED_FUNCTION_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

id ATXSleepSuggestedHomePageWasCreatedDuringMigration()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  objc_class *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  id v13;
  _QWORD v14[5];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v0 = objc_alloc(MEMORY[0x1E0C99EA0]);
  v1 = (void *)objc_msgSend(v0, "initWithSuiteName:", *MEMORY[0x1E0CF9510]);
  objc_msgSend(v1, "objectForKey:", CFSTR("ATXSleepSuggestedHomePageWasCreatedDuringMigration"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(v1, "objectForKey:", CFSTR("ATXSleepSuggestedHomePageWasCreatedDuringMigration"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v15 = 0;
    v16 = &v15;
    v17 = 0x2050000000;
    v4 = (void *)getHKSPSleepStoreClass_softClass;
    v18 = getHKSPSleepStoreClass_softClass;
    if (!getHKSPSleepStoreClass_softClass)
    {
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 3221225472;
      v14[2] = __getHKSPSleepStoreClass_block_invoke;
      v14[3] = &unk_1E82DA7D8;
      v14[4] = &v15;
      __getHKSPSleepStoreClass_block_invoke((uint64_t)v14);
      v4 = (void *)v16[3];
    }
    v5 = objc_retainAutorelease(v4);
    _Block_object_dispose(&v15, 8);
    if (v5)
    {
      v6 = (void *)objc_msgSend([v5 alloc], "initWithIdentifier:", CFSTR("proactive-migration-thingy"));
      v13 = 0;
      objc_msgSend(v6, "currentSleepSettingsWithError:", &v13);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = v13;
      v9 = v8;
      if (!v7 || v8)
      {
        __atxlog_handle_home_screen();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          ATXSleepSuggestedHomePageWasCreatedDuringMigration_cold_2((uint64_t)v9, v11);

        v3 = 0;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v7, "springBoardSuggestedPageCreated"));
        v3 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v1, "setObject:forKey:", v3, CFSTR("ATXSleepSuggestedHomePageWasCreatedDuringMigration"));
      }

    }
    else
    {
      __atxlog_handle_home_screen();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        ATXSleepSuggestedHomePageWasCreatedDuringMigration_cold_1(v10);

      v3 = 0;
    }
  }

  return v3;
}

void sub_1C9A6B178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getHKSPSleepStoreClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!SleepLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E82DA7F8;
    v5 = 0;
    SleepLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SleepLibraryCore_frameworkLibrary)
    __getHKSPSleepStoreClass_block_invoke_cold_1(&v3);
  result = objc_getClass("HKSPSleepStore");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getHKSPSleepStoreClass_block_invoke_cold_2();
  getHKSPSleepStoreClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1C9A6CE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9A6D8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9A6EF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_6(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_1C9A77530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 176), 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_2_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

uint64_t OUTLINED_FUNCTION_3_0()
{
  return objc_opt_class();
}

uint64_t ATXMPBBlendingLayerRefreshTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  void *v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_38;
        case 2u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 44) |= 2u;
          while (2)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_42;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_42:
          v32 = 40;
          goto LABEL_47;
        case 3u:
          v26 = 0;
          v27 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 44) |= 1u;
          break;
        case 4u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_38;
        case 5u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
LABEL_38:
          v31 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v28 = *v3;
        v29 = *(_QWORD *)(a2 + v28);
        if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          break;
        v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
        *(_QWORD *)(a2 + v28) = v29 + 1;
        v22 |= (unint64_t)(v30 & 0x7F) << v26;
        if ((v30 & 0x80) == 0)
          goto LABEL_44;
        v26 += 7;
        v14 = v27++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_46;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v22) = 0;
LABEL_46:
      v32 = 24;
LABEL_47:
      *(_DWORD *)(a1 + v32) = v22;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9A7A214(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;
  id *v4;

  v4 = v2;
  objc_destroyWeak(v4);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1C9A7C17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1C9A7C738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C9A7E454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1C9A821B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

const __CFString *ATXUserNotificationResolutionTypeToString(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("error_ATXUserNotificationResolutionTotal");
  else
    return off_1E82DB240[a1];
}

uint64_t ATXUserNotificationResolutionTypeForNotificationEventType(unint64_t a1)
{
  if (a1 > 0x13)
    return 2;
  else
    return qword_1C9E7E900[a1];
}

void sub_1C9A8481C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9A848B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1C9A8509C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, _Unwind_Exception *exception_object, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,void *a42,uint64_t a43,void *a44)
{
  void *v44;
  void *v45;

  _Unwind_Resume(a1);
}

void sub_1C9A85438(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1C9A85520(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9A855C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9A8586C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1C9A85988(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9A86D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1C9A87B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Block_object_dispose(&STACK[0x1AA0], 8);

  _Unwind_Resume(a1);
}

const __CFString *engagementTypeForPrediction(uint64_t a1, int a2)
{
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  _BYTE v9[24];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return CFSTR("NO");
  v3 = a1 - 2;
  if ((unint64_t)(a1 - 2) < 7 && ((0x67u >> v3) & 1) != 0)
    return off_1E82DB4D8[v3];
  __atxlog_handle_default();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    objc_msgSend(MEMORY[0x1E0CF8C40], "engagementTypeToString:", a1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    engagementTypeForPrediction(v5, (uint64_t)v9, v4);
  }

  v6 = (void *)MEMORY[0x1E0C99DA0];
  objc_msgSend(MEMORY[0x1E0CF8C40], "engagementTypeToString:", a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "raise:format:", *MEMORY[0x1E0C99768], CFSTR("%@ is not a valid engagment type to call engagementTypeForPrediction with engaged==YES"), v7);

  return CFSTR("Error");
}

void sub_1C9A87F44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void addScoreInputsForPredictionItemToDictionary(ATXPredictionItem *a1, NSMutableDictionary *a2)
{
  NSMutableDictionary *v3;
  uint64_t i;
  double v5;
  void *v6;
  void *v7;

  v3 = a2;
  for (i = 4; i != 821; ++i)
  {
    v5 = *((float *)&a1->key + i);
    if (fabs(v5) == INFINITY)
      v5 = -31337.0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    +[_ATXScoreTypes stringForScoreInput:](_ATXScoreTypes, "stringForScoreInput:", i - 4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v6, v7);

  }
}

void sub_1C9A88038(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C9A8850C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_1C9A8ACE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9A8B034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void **a15)
{
  a15 = (void **)&STACK[0xD50];
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&a15);

  _Unwind_Resume(a1);
}

void sub_1C9A8B114(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9A8B160(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9A8B240(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9A8B384(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9A8B67C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9A8B950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9A8BC24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 412;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E82D98E8, MEMORY[0x1E0DE42D0]);
}

void sub_1C9A8BD20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ATXPredictionItem>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x13E22CBCE4A903)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(3296 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

uint64_t std::__split_buffer<ATXPredictionItem>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  id *v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (id *)(i - 3296);
    *(_QWORD *)(a1 + 16) = v4;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1C9A8C018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9A8C554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

void sub_1C9A8D3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_1C9A90C68(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x870], 8);
  _Block_object_dispose(&STACK[0x8A0], 8);
  _Block_object_dispose(&STACK[0x8F0], 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_2_1(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_3_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 8u);
}

void sub_1C9A930B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C9A94150(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_2_2(uint64_t a1, uint64_t a2)
{
  return a2;
}

void OUTLINED_FUNCTION_5_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

id allRelevanceModelConfigs()
{
  void *v0;
  void *v1;
  void *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  v0 = (void *)objc_opt_new();
  v4[0] = v0;
  v1 = (void *)objc_opt_new();
  v4[1] = v1;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, 2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t AWDProactiveAppPredictionActionTimeEstimateContainerReadFrom(_QWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  unint64_t v7;
  int *v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  int v19;
  uint64_t v21;
  void *v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = 0x1EF924000uLL;
    v8 = (int *)MEMORY[0x1E0D82BB8];
    v9 = 0x1EF924000uLL;
    v10 = 0x1EF924000uLL;
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        while (1)
        {
          v14 = *v3;
          v15 = *(_QWORD *)(a2 + v14);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + *v4))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v15);
          *(_QWORD *)(a2 + v14) = v15 + 1;
          v13 |= (unint64_t)(v16 & 0x7F) << v11;
          if ((v16 & 0x80) == 0)
            goto LABEL_12;
          v11 += 7;
          v17 = v12++ >= 9;
          if (v17)
          {
            v13 = 0;
            v18 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v18 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v13 = 0;
LABEL_14:
        v19 = v13 & 7;
        if (!v18 && v19 != 4)
        {
          switch((v13 >> 3))
          {
            case 1u:
              PBReaderReadString();
              v21 = objc_claimAutoreleasedReturnValue();
              v22 = (void *)a1[13];
              a1[13] = v21;

              goto LABEL_131;
            case 2u:
              v23 = 0;
              v24 = 0;
              v25 = 0;
              *((_BYTE *)a1 + *(int *)(v7 + 3140)) |= 1u;
              while (2)
              {
                v26 = *v3;
                v27 = *(_QWORD *)(a2 + v26);
                if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v27);
                  *(_QWORD *)(a2 + v26) = v27 + 1;
                  v25 |= (unint64_t)(v28 & 0x7F) << v23;
                  if (v28 < 0)
                  {
                    v23 += 7;
                    v17 = v24++ >= 9;
                    if (v17)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_95;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_95:
              v62 = 112;
              goto LABEL_100;
            case 3u:
              v29 = v10;
              v30 = v9;
              v31 = v7;
              PBReaderReadString();
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              if (v32)
                objc_msgSend(a1, "addParameter:", v32);

              v7 = v31;
              v9 = v30;
              v10 = v29;
              goto LABEL_131;
            case 4u:
              if (v19 != 2)
              {
                v63 = 0;
                v64 = 0;
                v65 = 0;
                while (1)
                {
                  v66 = *v3;
                  v67 = *(_QWORD *)(a2 + v66);
                  if (v67 == -1 || v67 >= *(_QWORD *)(a2 + *v4))
                    goto LABEL_129;
                  v68 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v67);
                  *(_QWORD *)(a2 + v66) = v67 + 1;
                  v65 |= (unint64_t)(v68 & 0x7F) << v63;
                  if (v68 < 0)
                  {
                    v63 += 7;
                    v17 = v64++ >= 9;
                    if (!v17)
                      continue;
                  }
                  goto LABEL_130;
                }
              }
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v33 = 0;
                v34 = 0;
                v35 = 0;
                while (1)
                {
                  v36 = *v3;
                  v37 = *(_QWORD *)(a2 + v36);
                  if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v37);
                  *(_QWORD *)(a2 + v36) = v37 + 1;
                  v35 |= (unint64_t)(v38 & 0x7F) << v33;
                  if (v38 < 0)
                  {
                    v33 += 7;
                    v17 = v34++ >= 9;
                    if (!v17)
                      continue;
                  }
                  goto LABEL_44;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
                PBRepeatedInt32Add();
              }
              goto LABEL_91;
            case 5u:
              if (v19 != 2)
              {
                v69 = 0;
                v70 = 0;
                v71 = 0;
                while (1)
                {
                  v72 = *v3;
                  v73 = *(_QWORD *)(a2 + v72);
                  if (v73 == -1 || v73 >= *(_QWORD *)(a2 + *v4))
                    goto LABEL_129;
                  v74 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v73);
                  *(_QWORD *)(a2 + v72) = v73 + 1;
                  v71 |= (unint64_t)(v74 & 0x7F) << v69;
                  if (v74 < 0)
                  {
                    v69 += 7;
                    v17 = v70++ >= 9;
                    if (!v17)
                      continue;
                  }
                  goto LABEL_130;
                }
              }
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v39 = 0;
                v40 = 0;
                v41 = 0;
                while (1)
                {
                  v42 = *v3;
                  v43 = *(_QWORD *)(a2 + v42);
                  if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v43);
                  *(_QWORD *)(a2 + v42) = v43 + 1;
                  v41 |= (unint64_t)(v44 & 0x7F) << v39;
                  if (v44 < 0)
                  {
                    v39 += 7;
                    v17 = v40++ >= 9;
                    if (!v17)
                      continue;
                  }
                  goto LABEL_57;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_57:
                PBRepeatedInt32Add();
              }
              goto LABEL_91;
            case 6u:
              if (v19 != 2)
              {
                v75 = 0;
                v76 = 0;
                v77 = 0;
                while (1)
                {
                  v78 = *v3;
                  v79 = *(_QWORD *)(a2 + v78);
                  if (v79 == -1 || v79 >= *(_QWORD *)(a2 + *v4))
                    goto LABEL_129;
                  v80 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v79);
                  *(_QWORD *)(a2 + v78) = v79 + 1;
                  v77 |= (unint64_t)(v80 & 0x7F) << v75;
                  if (v80 < 0)
                  {
                    v75 += 7;
                    v17 = v76++ >= 9;
                    if (!v17)
                      continue;
                  }
                  goto LABEL_130;
                }
              }
              result = PBReaderPlaceMark();
              if (!(_DWORD)result)
                return result;
              while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
              {
                v45 = 0;
                v46 = 0;
                v47 = 0;
                while (1)
                {
                  v48 = *v3;
                  v49 = *(_QWORD *)(a2 + v48);
                  if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v49);
                  *(_QWORD *)(a2 + v48) = v49 + 1;
                  v47 |= (unint64_t)(v50 & 0x7F) << v45;
                  if (v50 < 0)
                  {
                    v45 += 7;
                    v17 = v46++ >= 9;
                    if (!v17)
                      continue;
                  }
                  goto LABEL_70;
                }
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_70:
                PBRepeatedInt32Add();
              }
              goto LABEL_91;
            case 7u:
              v51 = 0;
              v52 = 0;
              v25 = 0;
              *((_BYTE *)a1 + *(int *)(v7 + 3140)) |= 2u;
              while (2)
              {
                v53 = *v3;
                v54 = *(_QWORD *)(a2 + v53);
                if (v54 == -1 || v54 >= *(_QWORD *)(a2 + *v4))
                {
                  *(_BYTE *)(a2 + *v5) = 1;
                }
                else
                {
                  v55 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v54);
                  *(_QWORD *)(a2 + v53) = v54 + 1;
                  v25 |= (unint64_t)(v55 & 0x7F) << v51;
                  if (v55 < 0)
                  {
                    v51 += 7;
                    v17 = v52++ >= 9;
                    if (v17)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_99;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(_BYTE *)(a2 + *v5))
                LODWORD(v25) = 0;
LABEL_99:
              v62 = 116;
LABEL_100:
              *(_DWORD *)((char *)a1 + v62) = v25;
              goto LABEL_131;
            case 8u:
              if (v19 == 2)
              {
                result = PBReaderPlaceMark();
                if (!(_DWORD)result)
                  return result;
                while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
                {
                  v56 = 0;
                  v57 = 0;
                  v58 = 0;
                  while (1)
                  {
                    v59 = *v3;
                    v60 = *(_QWORD *)(a2 + v59);
                    if (v60 == -1 || v60 >= *(_QWORD *)(a2 + *v4))
                      break;
                    v61 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v60);
                    *(_QWORD *)(a2 + v59) = v60 + 1;
                    v58 |= (unint64_t)(v61 & 0x7F) << v56;
                    if (v61 < 0)
                    {
                      v56 += 7;
                      v17 = v57++ >= 9;
                      if (!v17)
                        continue;
                    }
                    goto LABEL_90;
                  }
                  *(_BYTE *)(a2 + *v5) = 1;
LABEL_90:
                  PBRepeatedInt32Add();
                }
LABEL_91:
                PBReaderRecallMark();
              }
              else
              {
                v81 = 0;
                v82 = 0;
                v83 = 0;
                while (1)
                {
                  v84 = *v3;
                  v85 = *(_QWORD *)(a2 + v84);
                  if (v85 == -1 || v85 >= *(_QWORD *)(a2 + *v4))
                    break;
                  v86 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v85);
                  *(_QWORD *)(a2 + v84) = v85 + 1;
                  v83 |= (unint64_t)(v86 & 0x7F) << v81;
                  if (v86 < 0)
                  {
                    v81 += 7;
                    v17 = v82++ >= 9;
                    if (!v17)
                      continue;
                  }
                  goto LABEL_130;
                }
LABEL_129:
                *(_BYTE *)(a2 + *v5) = 1;
LABEL_130:
                PBRepeatedInt32Add();
              }
LABEL_131:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
            default:
              if ((PBReaderSkipValueWithTag() & 1) != 0)
                goto LABEL_131;
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9A9B448(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9A9B7DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9A9BC80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1C9A9C140(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9A9C1BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9A9C228(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

uint64_t ATXMagicalMomentsPBMMPredictedCountTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v23;

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_33:
        *(_DWORD *)(a1 + 16) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9A9D618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9A9D984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1C9A9E6D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

BOOL isTimeRangeWithinTimeRange(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  _BOOL8 v13;

  v7 = a1;
  v8 = a3;
  v9 = a4;
  objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_alloc_init(MEMORY[0x1E0C99D78]);
  objc_msgSend(v11, "setSecond:", a2);
  objc_msgSend(v10, "dateByAddingComponents:toDate:options:", v11, v7, 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "compare:", v8) == 1 || !objc_msgSend(v7, "compare:", v8))
    v13 = objc_msgSend(v12, "compare:", v9) == -1 || objc_msgSend(v12, "compare:", v9) == 0;
  else
    v13 = 0;

  return v13;
}

double percentageOfBundleIDInBucket(uint64_t a1, void *a2)
{
  id v3;
  unint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t i;
  double v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_msgSend(v3, "countForObject:", a1);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = 0;
    v9 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(v5);
        v8 += objc_msgSend(v5, "countForObject:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * i), (_QWORD)v13);
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v7);

    v11 = 0.0;
    if (v4 && v8)
      v11 = (double)v4 / (double)v8;
  }
  else
  {

    v11 = 0.0;
  }

  return v11;
}

void sub_1C9AA2154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
  id *v18;
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

id OUTLINED_FUNCTION_3_3(id a1)
{
  return a1;
}

void OUTLINED_FUNCTION_6_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_9()
{
  void *v0;

  return objc_msgSend(v0, "type");
}

void sub_1C9AA4788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9AA4A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9AA4BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9AA4DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXMPBCacheAgeAtCacheRefreshTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  void *v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0)
            goto LABEL_34;
          v20 += 7;
          v14 = v21++ >= 9;
          if (v14)
          {
            LODWORD(v22) = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_36:
        *(_DWORD *)(a1 + 16) = v22;
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 8;
        }
        else
        {
          if ((_DWORD)v17 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 24;
        }
        v26 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t ATXPBBlendingSessionDeviceContextReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 32) |= 8u;
          while (1)
          {
            v21 = *v3;
            v22 = *(_QWORD *)(a2 + v21);
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_67;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_69;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_67:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v20) = 0;
LABEL_69:
          v62 = 24;
          goto LABEL_91;
        case 2u:
          v26 = 0;
          v27 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 32) |= 4u;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v30;
              v20 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v15 = v27++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_73;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v20) = 0;
LABEL_73:
          v62 = 20;
          goto LABEL_91;
        case 3u:
          v32 = 0;
          v33 = 0;
          v34 = 0;
          *(_BYTE *)(a1 + 32) |= 0x10u;
          while (2)
          {
            v35 = *v3;
            v36 = *(_QWORD *)(a2 + v35);
            v37 = v36 + 1;
            if (v36 == -1 || v37 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
              *(_QWORD *)(a2 + v35) = v37;
              v34 |= (unint64_t)(v38 & 0x7F) << v32;
              if (v38 < 0)
              {
                v32 += 7;
                v15 = v33++ >= 9;
                if (v15)
                {
                  v34 = 0;
                  goto LABEL_77;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v34 = 0;
LABEL_77:
          v63 = v34 != 0;
          v64 = 28;
          goto LABEL_86;
        case 4u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          *(_BYTE *)(a1 + 32) |= 0x40u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            v44 = v43 + 1;
            if (v43 == -1 || v44 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v44;
              v41 |= (unint64_t)(v45 & 0x7F) << v39;
              if (v45 < 0)
              {
                v39 += 7;
                v15 = v40++ >= 9;
                if (v15)
                {
                  v41 = 0;
                  goto LABEL_81;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v41 = 0;
LABEL_81:
          v63 = v41 != 0;
          v64 = 30;
          goto LABEL_86;
        case 5u:
          v46 = 0;
          v47 = 0;
          v48 = 0;
          *(_BYTE *)(a1 + 32) |= 0x20u;
          while (2)
          {
            v49 = *v3;
            v50 = *(_QWORD *)(a2 + v49);
            v51 = v50 + 1;
            if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
              *(_QWORD *)(a2 + v49) = v51;
              v48 |= (unint64_t)(v52 & 0x7F) << v46;
              if (v52 < 0)
              {
                v46 += 7;
                v15 = v47++ >= 9;
                if (v15)
                {
                  v48 = 0;
                  goto LABEL_85;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v48 = 0;
LABEL_85:
          v63 = v48 != 0;
          v64 = 29;
LABEL_86:
          *(_BYTE *)(a1 + v64) = v63;
          continue;
        case 6u:
          v53 = 0;
          v54 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 32) |= 2u;
          break;
        case 7u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v59 = *v3;
          v60 = *(_QWORD *)(a2 + v59);
          if (v60 <= 0xFFFFFFFFFFFFFFF7 && v60 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v61 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v60);
            *(_QWORD *)(a2 + v59) = v60 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v61 = 0;
          }
          *(_QWORD *)(a1 + 8) = v61;
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v55 = *v3;
        v56 = *(_QWORD *)(a2 + v55);
        v57 = v56 + 1;
        if (v56 == -1 || v57 > *(_QWORD *)(a2 + *v4))
          break;
        v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
        *(_QWORD *)(a2 + v55) = v57;
        v20 |= (unint64_t)(v58 & 0x7F) << v53;
        if ((v58 & 0x80) == 0)
          goto LABEL_88;
        v53 += 7;
        v15 = v54++ >= 9;
        if (v15)
        {
          LODWORD(v20) = 0;
          goto LABEL_90;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_88:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v20) = 0;
LABEL_90:
      v62 = 16;
LABEL_91:
      *(_DWORD *)(a1 + v62) = v20;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void OUTLINED_FUNCTION_1_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1C9AA8B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

void sub_1C9AAA3FC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

uint64_t ATXMPBBlendingClientModelHomeScreenLayoutTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  void *v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 40;
          goto LABEL_33;
        case 2u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
          goto LABEL_33;
        case 3u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 52) |= 1u;
          break;
        case 4u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
          goto LABEL_33;
        case 5u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_33;
        case 6u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
LABEL_33:
          v26 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v23 = *v3;
        v24 = *(_QWORD *)(a2 + v23);
        if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          break;
        v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
        *(_QWORD *)(a2 + v23) = v24 + 1;
        v22 |= (unint64_t)(v25 & 0x7F) << v20;
        if ((v25 & 0x80) == 0)
          goto LABEL_37;
        v20 += 7;
        v14 = v21++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_39;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v22) = 0;
LABEL_39:
      *(_DWORD *)(a1 + 48) = v22;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void OUTLINED_FUNCTION_2_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_4_2(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void sub_1C9AAD994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id *location, id *a18)
{
  id *v18;
  id *v19;
  id *v20;
  id *v21;
  id *v22;
  id *v23;
  id *v24;
  uint64_t v25;

  objc_destroyWeak(v18);
  objc_destroyWeak(v19);
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(location);
  objc_destroyWeak(a18);
  objc_destroyWeak((id *)(v25 - 128));
  _Unwind_Resume(a1);
}

void updateCache()
{
  id v0;

  if (objc_msgSend(MEMORY[0x1E0D81588], "isInternalBuild"))
  {
    +[ATXAppDirectoryOrderingProvider sharedInstance](ATXAppDirectoryOrderingProvider, "sharedInstance");
    v0 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "updateCacheWithActivity:completionHandler:", 0, 0);

  }
}

void sub_1C9AAFE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9AB1ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1C9AB35B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,id location)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a41, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_3_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 2u);
}

void OUTLINED_FUNCTION_5_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_9_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0xCu);
}

void sub_1C9AB86EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9AB9CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 152), 8);
  _Unwind_Resume(a1);
}

void ATXSmoothedProbability(double a1, double a2)
{
  NSObject *v4;
  const __CFString *v5;
  double v6;

  if (a2 + 0.00000011920929 < a1)
  {
    __atxlog_handle_default();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      ATXSmoothedProbability_cold_1();
    v5 = CFSTR("ATXSmoothedProbability called with invalid arguments. numerator: %f denominator: %f");
LABEL_14:

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], v5, *(_QWORD *)&a1, *(_QWORD *)&a2);
    return;
  }
  if (a2 > 0.0)
  {
    +[ATXSlotResolutionParametersStatistics smoothedRatio:over:](ATXSlotResolutionParametersStatistics, "smoothedRatio:over:", a1, a2);
    if (v6 < 0.0 || v6 > 1.0)
    {
      __atxlog_handle_default();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        ATXSmoothedProbability_cold_2();
      v5 = CFSTR("Invalid probability found. numerator: %f denominator: %f");
      goto LABEL_14;
    }
  }
}

void ATXProbability(double a1, double a2)
{
  NSObject *v4;
  const __CFString *v5;

  if (a2 + 0.00000011920929 < a1)
  {
    __atxlog_handle_default();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      ATXProbability_cold_1();
    v5 = CFSTR("ATXProbability called with invalid arguments. numerator: %f denominator: %f");
LABEL_14:

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], v5, *(_QWORD *)&a1, *(_QWORD *)&a2);
    return;
  }
  if (a2 > 0.0 && (a1 / a2 < 0.0 || a1 / a2 > 1.0))
  {
    __atxlog_handle_default();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      ATXSmoothedProbability_cold_2();
    v5 = CFSTR("Invalid probability found. numerator: %f denominator: %f");
    goto LABEL_14;
  }
}

double ATXRatio(double a1, double a2)
{
  double result;

  result = a1 / a2;
  if (a2 <= 0.0)
    return 0.0;
  return result;
}

double ATXGaussianDistributionWithZeroMean(double a1, double a2)
{
  void *v4;
  double v5;
  double v6;

  +[_ATXGlobals sharedInstance](_ATXGlobals, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "clippingThresholdForGaussianDist");
  v6 = v5;

  if (fabs(a2) <= v6 * a1)
    return exp(a2 / a1 * (a2 / a1) * -0.5);
  else
    return 0.0;
}

void OUTLINED_FUNCTION_1_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_1C9AC35B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 176), 8);
  _Unwind_Resume(a1);
}

id ATXMaxDate(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  v6 = v4;
  if (v3)
  {
    v6 = v3;
    if (v4)
    {
      if (objc_msgSend(v3, "atx_isBeforeDate:", v4))
        v6 = v5;
      else
        v6 = v3;
    }
  }
  v7 = v6;

  return v7;
}

uint64_t ATXPBUnifiedInferredActivitySessionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 48) |= 8u;
          v18 = *v3;
          v19 = *(_QWORD *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
            *(_QWORD *)(a2 + v18) = v19 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v35 = 32;
          goto LABEL_48;
        case 2u:
          *(_BYTE *)(a1 + 48) |= 2u;
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v35 = 16;
          goto LABEL_48;
        case 3u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 48) |= 4u;
          break;
        case 4u:
          PBReaderReadString();
          v31 = objc_claimAutoreleasedReturnValue();
          v32 = *(void **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v31;

          continue;
        case 5u:
          *(_BYTE *)(a1 + 48) |= 1u;
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v35 = 8;
LABEL_48:
          *(_QWORD *)(a1 + v35) = v20;
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v27 = *v3;
        v28 = *(_QWORD *)(a2 + v27);
        v29 = v28 + 1;
        if (v28 == -1 || v29 > *(_QWORD *)(a2 + *v4))
          break;
        v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
        *(_QWORD *)(a2 + v27) = v29;
        v26 |= (unint64_t)(v30 & 0x7F) << v24;
        if ((v30 & 0x80) == 0)
          goto LABEL_39;
        v24 += 7;
        v15 = v25++ >= 9;
        if (v15)
        {
          v26 = 0;
          goto LABEL_41;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
      if (*(_BYTE *)(a2 + *v5))
        v26 = 0;
LABEL_41:
      *(_QWORD *)(a1 + 24) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9AC7D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void dispatch_sync_notxn(NSObject *a1, void *a2)
{
  id v3;
  id v4;
  _QWORD block[4];
  id v6;

  v3 = a2;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __dispatch_sync_notxn_block_invoke;
  block[3] = &unk_1E82DA9F8;
  v6 = v3;
  v4 = v3;
  dispatch_sync(a1, block);

}

void __dispatch_sync_notxn_block_invoke(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1CAA48B6C]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

void OUTLINED_FUNCTION_0_6(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x16u);
}

void sub_1C9AC8D38(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_3_5()
{
  return objc_opt_class();
}

uint64_t OUTLINED_FUNCTION_4_3()
{
  return objc_opt_class();
}

void sub_1C9AC9B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXPBBlendingSessionClientModelSuggestionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
            break;
          v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
          *(_QWORD *)(a2 + v24) = v26;
          v23 |= (unint64_t)(v27 & 0x7F) << v21;
          if ((v27 & 0x80) == 0)
            goto LABEL_35;
          v21 += 7;
          v15 = v22++ >= 9;
          if (v15)
          {
            LODWORD(v23) = 0;
            goto LABEL_37;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v23) = 0;
LABEL_37:
        *(_DWORD *)(a1 + 24) = v23;
      }
      else if ((_DWORD)v18 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 1u;
        v28 = *v3;
        v29 = *(_QWORD *)(a2 + v28);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v30 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v30 = 0;
        }
        *(_QWORD *)(a1 + 8) = v30;
      }
      else if ((_DWORD)v18 == 1)
      {
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v19;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9ACC9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9ACCE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9ACD344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9ACD820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9ACDCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void shouldReturnUndefined(void *a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  NSObject *v9;
  void *v10;
  void *v11;

  v3 = a1;
  v4 = v3[1];
  v5 = v4 - a2;
  if (v4 < a2)
  {
    __atxlog_handle_default();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      shouldReturnUndefined_cold_1();

    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL shouldReturnUndefined(_ATXScoreInterpreterCtx *__strong, NSUInteger)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("_ATXScoreInterpreter.m"), 224, CFSTR("App prediction interpreter stack underflow"));

    __break(1u);
  }
  else
  {
    if (v5 < v4 && *(double *)&v3[v5 + 2] != -31337.0)
    {
      v6 = -(uint64_t)a2;
      do
      {
        v7 = v6;
        v8 = __CFADD__(v6++, 1);
      }
      while (!v8 && *(double *)&v3[v4 + 3 + v7] != -31337.0);
    }

  }
}

void drop(void *a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  NSObject *v7;
  void *v9;
  void *v10;

  v3 = a1;
  v4 = v3[1];
  v5 = v4 >= a2;
  v6 = v4 - a2;
  if (v5)
  {
    v3[1] = v6;

  }
  else
  {
    __atxlog_handle_default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      shouldReturnUndefined_cold_1();

    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void drop(_ATXScoreInterpreterCtx *__strong, NSUInteger)");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("_ATXScoreInterpreter.m"), 214, CFSTR("App prediction interpreter stack underflow"));

    __break(1u);
  }
}

void push(void *a1, double a2)
{
  _QWORD *v3;
  unint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;

  v3 = a1;
  v4 = v3[1];
  if (v4 >= 0x1F4)
  {
    __atxlog_handle_default();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      push_cold_1();

    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void push(_ATXScoreInterpreterCtx *__strong, double)");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "handleFailureInFunction:file:lineNumber:description:", v7, CFSTR("_ATXScoreInterpreter.m"), 194, CFSTR("App prediction interpreter stack overflow"));

    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    *(double *)&v3[v4 + 2] = a2;

  }
}

void pop(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;

  v1 = a1;
  v2 = v1[1];
  if (v2)
  {
    v1[1] = v2 - 1;

  }
  else
  {
    __atxlog_handle_default();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      shouldReturnUndefined_cold_1();

    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "double pop(_ATXScoreInterpreterCtx *__strong)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_ATXScoreInterpreter.m"), 204, CFSTR("App prediction interpreter stack underflow"));

    __break(1u);
  }
}

void sub_1C9AD06C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1C9AD13A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXAnchorModelPBLinkActionMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  void *v20;
  ATXAnchorModelPBLaunchHistoryMetadata *v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 24;
        goto LABEL_23;
      case 2u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
LABEL_23:
        v20 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_38;
      case 3u:
        v21 = objc_alloc_init(ATXAnchorModelPBLaunchHistoryMetadata);
        objc_storeStrong((id *)(a1 + 8), v21);
        if (PBReaderPlaceMark() && ATXAnchorModelPBLaunchHistoryMetadataReadFrom((uint64_t)v21, a2))
        {
          PBReaderRecallMark();

LABEL_38:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 4u:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 36) |= 1u;
        while (2)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
            *(_QWORD *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              v14 = v23++ >= 9;
              if (v14)
              {
                LODWORD(v24) = 0;
                goto LABEL_37;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v24) = 0;
LABEL_37:
        *(_DWORD *)(a1 + 32) = v24;
        goto LABEL_38;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_38;
    }
  }
}

void sub_1C9AD289C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXMPBAnchorModelPhaseFilterTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  void *v36;
  uint64_t v37;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 48) |= 4u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_47;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_49;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_47:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_49:
          v37 = 32;
          goto LABEL_58;
        case 2u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 40;
          goto LABEL_45;
        case 3u:
          v26 = 0;
          v27 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 48) |= 2u;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v19 |= (unint64_t)(v30 & 0x7F) << v26;
              if (v30 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_53;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_53:
          v37 = 28;
          goto LABEL_58;
        case 4u:
          v31 = 0;
          v32 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 48) |= 1u;
          break;
        case 5u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 16;
          goto LABEL_45;
        case 6u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 8;
LABEL_45:
          v36 = *(void **)(a1 + v25);
          *(_QWORD *)(a1 + v25) = v24;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v33 = *v3;
        v34 = *(_QWORD *)(a2 + v33);
        if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
          break;
        v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
        *(_QWORD *)(a2 + v33) = v34 + 1;
        v19 |= (unint64_t)(v35 & 0x7F) << v31;
        if ((v35 & 0x80) == 0)
          goto LABEL_55;
        v31 += 7;
        v14 = v32++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_57;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_55:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_57:
      v37 = 24;
LABEL_58:
      *(_DWORD *)(a1 + v37) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9AD5434(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9ADA34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  uint64_t v21;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v21 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C9ADABD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9ADACEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9ADAE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  void *v14;

  a14 = (void **)&a11;
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void sub_1C9ADAF78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9ADB05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C9ADB0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C9ADB2A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9ADB4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void **a24)
{
  void *v24;
  void *v25;
  void *v26;

  a24 = (void **)&a21;
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&a24);

  _Unwind_Resume(a1);
}

void sub_1C9ADB688(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9ADB838(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C9ADBA34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9ADBCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C9ADC044(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9ADC40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a22, 8);

  _Unwind_Resume(a1);
}

void sub_1C9ADC650(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<ATXPredictionItem>::__init_with_size[abi:ne180100]<ATXPredictionItem*,ATXPredictionItem*>(_QWORD *result, id *a2, id *a3, unint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;

  if (a4)
  {
    v6 = result;
    result = std::vector<ATXPredictionItem>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)v6[1];
    while (a2 != a3)
    {
      *v7 = *a2;
      result = memcpy(v7 + 1, a2 + 1, 0xCD2uLL);
      v7 += 412;
      a2 += 412;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_1C9ADC71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<ATXPredictionItem>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x13E22CBCE4A903)
    std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ATXPredictionItem>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[3296 * v4];
  return result;
}

void __initFeedbackConstantsData_block_invoke()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  void *v8;
  double v9;
  void *v10;
  void *v11;
  double v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  v0 = (void *)MEMORY[0x1CAA48B6C]();
  objc_msgSend(MEMORY[0x1E0CF8CF0], "dictionaryForResource:ofType:specifiedABGroup:", CFSTR("_ATXFeedback"), CFSTR("plist"), 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("Constants"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("BaseAlpha"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  v5 = 1.0;
  v6 = 1.0;
  if (v3)
    objc_msgSend(v3, "doubleValue", 1.0);
  _ATXFeedbackConstantsData_0 = *(_QWORD *)&v6;

  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("BaseBeta"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "doubleValue");
    v5 = v9;
  }
  _ATXFeedbackConstantsData_1 = *(_QWORD *)&v5;

  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("MultiplierForAppAlphasAndBetas"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10)
    objc_msgSend(v10, "doubleValue");
  else
    v12 = 1.0;
  _ATXFeedbackConstantsData_2 = *(_QWORD *)&v12;

  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("DecayHalfLifeSeconds"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  v15 = 0x4122750000000000;
  v16 = 0x4122750000000000;
  if (v13)
    objc_msgSend(v13, "doubleValue", 604800.0);
  _ATXFeedbackConstantsData_3 = v16;

  objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("ActionDecayHalfLifeSeconds"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = v17;
  if (v17)
  {
    objc_msgSend(v17, "doubleValue");
    v15 = v19;
  }
  _ATXFeedbackConstantsData_4 = v15;

  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("AppSpecificAlphas"));
  v20 = objc_claimAutoreleasedReturnValue();
  v21 = (void *)_ATXFeedbackConstantsData_5;
  _ATXFeedbackConstantsData_5 = v20;

  objc_autoreleasePoolPop(v0);
}

void sub_1C9ADF1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9AE11C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9AE2EEC(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x220], 8);
  _Unwind_Resume(a1);
}

uint64_t ATXAnchorModelPBAppLaunchMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;
  ATXAnchorModelPBLaunchHistoryMetadata *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v17;

        goto LABEL_70;
      case 2u:
        v20 = objc_alloc_init(ATXAnchorModelPBLaunchHistoryMetadata);
        objc_storeStrong((id *)(a1 + 24), v20);
        if (PBReaderPlaceMark() && ATXAnchorModelPBLaunchHistoryMetadataReadFrom((uint64_t)v20, a2))
        {
          PBReaderRecallMark();

LABEL_70:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 3u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 48) |= 8u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              v14 = v22++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_56:
        *(_BYTE *)(a1 + 44) = v23 != 0;
        goto LABEL_70;
      case 4u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        *(_BYTE *)(a1 + 48) |= 4u;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v29) = 0;
LABEL_60:
        *(_DWORD *)(a1 + 40) = v29;
        goto LABEL_70;
      case 5u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        *(_BYTE *)(a1 + 48) |= 2u;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v35 = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v35 = 0;
LABEL_64:
        v44 = 16;
        goto LABEL_69;
      case 6u:
        v39 = 0;
        v40 = 0;
        v35 = 0;
        *(_BYTE *)(a1 + 48) |= 1u;
        while (2)
        {
          v41 = *v3;
          v42 = *(_QWORD *)(a2 + v41);
          if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v42 + 1;
            v35 |= (unint64_t)(v43 & 0x7F) << v39;
            if (v43 < 0)
            {
              v39 += 7;
              v14 = v40++ >= 9;
              if (v14)
              {
                v35 = 0;
                goto LABEL_68;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v35 = 0;
LABEL_68:
        v44 = 8;
LABEL_69:
        *(_QWORD *)(a1 + v44) = v35;
        goto LABEL_70;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_70;
    }
  }
}

uint64_t ATXPBPredictionLocationOfInterestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  void *v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = *(void **)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v18;

          continue;
        case 2u:
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 40) |= 4u;
          break;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v30 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v30 = 0;
          }
          v33 = 8;
          goto LABEL_43;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v30 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v32 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v30 = 0;
          }
          v33 = 16;
LABEL_43:
          *(_QWORD *)(a1 + v33) = v30;
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v24 = *v3;
        v25 = *(_QWORD *)(a2 + v24);
        v26 = v25 + 1;
        if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
          break;
        v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
        *(_QWORD *)(a2 + v24) = v26;
        v23 |= (unint64_t)(v27 & 0x7F) << v21;
        if ((v27 & 0x80) == 0)
          goto LABEL_36;
        v21 += 7;
        v15 = v22++ >= 9;
        if (v15)
        {
          LODWORD(v23) = 0;
          goto LABEL_38;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_36:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v23) = 0;
LABEL_38:
      *(_DWORD *)(a1 + 24) = v23;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void OUTLINED_FUNCTION_2_6(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_debug_impl(a1, v4, OS_LOG_TYPE_DEBUG, a4, v5, 0xCu);
}

void sub_1C9AE77D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9AE84A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id _ATXInspectionInterface()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;

  objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EF94E5A8);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "atx_addClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_appHistoryStopDeltaRecording_, 0, 1);
  objc_msgSend(v0, "atx_addClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_predictItemsAndReturnMetaDataAndInputsAndSubScoresWithCandidateBundleIdentifiers_candidateActiontypes_consumerSubType_reply_, 0, 1);
  v1 = (void *)MEMORY[0x1E0C99E60];
  v2 = objc_opt_class();
  objc_msgSend(v1, "setWithObjects:", v2, objc_opt_class(), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v3, sel_categoriesWithShouldUseDefault_reply_, 0, 1);

  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  objc_msgSend(v4, "setWithObjects:", v5, objc_opt_class(), 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v6, sel_blendedSuggestionsForConsumerSubType_reply_, 0, 1);

  v7 = (void *)MEMORY[0x1E0C99E60];
  v8 = objc_opt_class();
  objc_msgSend(v7, "setWithObjects:", v8, objc_opt_class(), 0);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v9, sel_scheduledPredictionsForAnchorModelWithReply_, 0, 1);

  v10 = (void *)MEMORY[0x1E0C99E60];
  v11 = objc_opt_class();
  objc_msgSend(v10, "setWithObjects:", v11, objc_opt_class(), 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v12, sel_validPredictionsRightNowForAnchorModelWithReply_, 0, 1);

  v13 = (void *)MEMORY[0x1E0C99E60];
  v14 = objc_opt_class();
  objc_msgSend(v13, "setWithObjects:", v14, objc_opt_class(), 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v15, sel_schedulePredictionsForAnchorModel_anchorType_reply_, 0, 0);

  v16 = (void *)MEMORY[0x1E0C99E60];
  v17 = objc_opt_class();
  objc_msgSend(v16, "setWithObjects:", v17, objc_opt_class(), 0);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v18, sel_inspectInferredActivitySessionStream_fromTimestamp_reply_, 0, 1);

  v19 = (void *)MEMORY[0x1E0C99E60];
  v20 = objc_opt_class();
  objc_msgSend(v19, "setWithObjects:", v20, objc_opt_class(), 0);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v21, sel_inspectInferredActivityTransitionStream_fromTimestamp_reply_, 0, 1);

  v22 = (void *)MEMORY[0x1E0C99E60];
  v23 = objc_opt_class();
  objc_msgSend(v22, "setWithObjects:", v23, objc_opt_class(), 0);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v24, sel_fetchPosterDescriptorsWithReply_, 0, 1);

  return v0;
}

void sub_1C9AEA350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9AEAD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Block_object_dispose((const void *)(v33 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t AWDProactiveAppDataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  AWDProactiveAppPredictionSubscores *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_BYTE *)(a1 + 52) |= 2u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          v23 = v22 + 1;
          if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0)
            goto LABEL_45;
          v18 += 7;
          v15 = v19++ >= 9;
          if (v15)
          {
            v20 = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_47:
        *(_QWORD *)(a1 + 16) = v20;
        goto LABEL_54;
      case 2u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 52) |= 4u;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          v31 = v30 + 1;
          if (v30 == -1 || v31 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v31;
            v28 |= (unint64_t)(v32 & 0x7F) << v26;
            if (v32 < 0)
            {
              v26 += 7;
              v15 = v27++ >= 9;
              if (v15)
              {
                v28 = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v28 = 0;
LABEL_51:
        *(_BYTE *)(a1 + 48) = v28 != 0;
        goto LABEL_54;
      case 3u:
        *(_BYTE *)(a1 + 52) |= 1u;
        v33 = *v3;
        v34 = *(_QWORD *)(a2 + v33);
        if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v35 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v34);
          *(_QWORD *)(a2 + v33) = v34 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v35 = 0;
        }
        *(_QWORD *)(a1 + 8) = v35;
        goto LABEL_54;
      case 4u:
        v36 = objc_alloc_init(AWDProactiveAppPredictionSubscores);
        objc_storeStrong((id *)(a1 + 40), v36);
        if (PBReaderPlaceMark()
          && (AWDProactiveAppPredictionSubscoresReadFrom((uint64_t)v36, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_54:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 5u:
        PBReaderReadString();
        v37 = objc_claimAutoreleasedReturnValue();
        v38 = 32;
        goto LABEL_43;
      case 6u:
        PBReaderReadString();
        v37 = objc_claimAutoreleasedReturnValue();
        v38 = 24;
LABEL_43:
        v39 = *(void **)(a1 + v38);
        *(_QWORD *)(a1 + v38) = v37;

        goto LABEL_54;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_54;
    }
  }
}

void OUTLINED_FUNCTION_2_7(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x20u);
}

id OUTLINED_FUNCTION_3_6(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 72));
}

void printStringRepresentation(FILE *a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  v3 = (void *)MEMORY[0x1CAA48B6C]();
  objc_msgSend(v5, "description");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  printQuotedString(a1, v4);

  objc_autoreleasePoolPop(v3);
}

void printQuotedString(FILE *a1, void *a2)
{
  __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  UniChar v20;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  __CFString *v26;
  void *v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  CFStringRef theString;
  const UniChar *v38;
  const char *v39;
  uint64_t v40;
  int64_t v41;
  int64_t v42;
  int64_t v43;
  CFRange v44;

  v3 = a2;
  v4 = -[__CFString length](v3, "length");
  theString = v3;
  v40 = 0;
  v41 = v4;
  CharactersPtr = CFStringGetCharactersPtr(v3);
  CStringPtr = 0;
  v38 = CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v42 = 0;
  v43 = 0;
  v39 = CStringPtr;
  if (v4)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 64;
    while (2)
    {
      if ((unint64_t)v16 >= 4)
        v18 = 4;
      else
        v18 = v16;
      v19 = v41;
      if (v41 <= v16)
      {
LABEL_27:
        v27 = (void *)MEMORY[0x1CAA48B6C](CStringPtr, v5, v6, v7, v8, v9, v10, v11, v29, *((_QWORD *)&v29 + 1), v30, *((_QWORD *)&v30 + 1), v31, *((_QWORD *)&v31 + 1), v32, *((_QWORD *)&v32 + 1));
        -[__CFString _stringRepresentation](v3, "_stringRepresentation");
        v28 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        fputs((const char *)objc_msgSend(v28, "UTF8String"), a1);

        objc_autoreleasePoolPop(v27);
      }
      else
      {
        if (v38)
        {
          v20 = v38[v16 + v40];
        }
        else if (v39)
        {
          v20 = v39[v40 + v16];
        }
        else
        {
          if (v43 <= v16 || v15 > v16)
          {
            v22 = v18 + v14;
            v23 = v17 - v18;
            v24 = v16 - v18;
            v25 = v24 + 64;
            if (v24 + 64 >= v41)
              v25 = v41;
            v42 = v24;
            v43 = v25;
            if (v41 >= v23)
              v19 = v23;
            v44.length = v19 + v22;
            v44.location = v24 + v40;
            CFStringGetCharacters(theString, v44, (UniChar *)&v29);
            v15 = v42;
          }
          v20 = *((_WORD *)&v29 + v16 - v15);
        }
        switch(v20)
        {
          case ' ':
          case '-':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
          case 'E':
          case 'F':
          case 'G':
          case 'H':
          case 'I':
          case 'J':
          case 'K':
          case 'L':
          case 'M':
          case 'N':
          case 'O':
          case 'P':
          case 'Q':
          case 'R':
          case 'S':
          case 'T':
          case 'U':
          case 'V':
          case 'W':
          case 'X':
          case 'Y':
          case 'Z':
          case '_':
          case 'a':
          case 'b':
          case 'c':
          case 'd':
          case 'e':
          case 'f':
          case 'g':
          case 'h':
          case 'i':
          case 'j':
          case 'k':
          case 'l':
          case 'm':
          case 'n':
          case 'o':
          case 'p':
          case 'q':
          case 'r':
          case 's':
          case 't':
          case 'u':
          case 'v':
          case 'w':
          case 'x':
          case 'y':
          case 'z':
            ++v16;
            --v14;
            ++v17;
            if (v4 != v16)
              continue;
            fputc(34, a1);
            v26 = objc_retainAutorelease(v3);
            fputs((const char *)-[__CFString UTF8String](v26, "UTF8String", v29, v30, v31, v32, v33, v34, v35, v36), a1);
            fputc(34, a1);
            break;
          default:
            goto LABEL_27;
        }
      }
      break;
    }
  }
  else
  {
    fputs((const char *)-[__CFString UTF8String](objc_retainAutorelease(v3), "UTF8String", v29, v30, v31, v32, v33, v34, v35, v36), a1);
  }

}

uint64_t compareIds(id *a1, _QWORD *a2)
{
  return objc_msgSend(*a1, "compare:", *a2);
}

double ATXSampleFromGammaDistribution(double a1, double a2)
{
  unsigned __int8 v4;
  double v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  double v11[2];

  if (a1 <= 0.0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "double ATXSampleFromGammaDistribution(double, double)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("ATXGammaDistribution.mm"), 18, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("shape > 0"));

  }
  if (a2 <= 0.0)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "double ATXSampleFromGammaDistribution(double, double)");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("ATXGammaDistribution.mm"), 19, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("scale > 0"));

  }
  {
    ATXSampleFromGammaDistribution::rng = 1;
  }
  v11[0] = a1;
  v11[1] = a2;
  pthread_mutex_lock(&ATXSampleFromGammaDistribution::lock);
  v5 = std::gamma_distribution<double>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>((uint64_t)v11, (unsigned int *)&ATXSampleFromGammaDistribution::rng, v11);
  pthread_mutex_unlock(&ATXSampleFromGammaDistribution::lock);
  return v5;
}

void sub_1C9AEF8A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

double std::gamma_distribution<double>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(uint64_t a1, unsigned int *a2, double *a3)
{
  double v5;
  double v6;
  double v7;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  long double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;

  v5 = *a3;
  if (*a3 == 1.0)
  {
    v6 = std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(a2);
    v7 = -log(1.0 - v6);
  }
  else if (*a3 <= 1.0)
  {
    v18 = 1.0 - v5;
    do
    {
      while (1)
      {
        v19 = std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(a2)
            + 0.0;
        v20 = std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(a2);
        v21 = -log(1.0 - v20);
        if (v19 <= v18)
          break;
        v22 = log((1.0 - v19) / v5);
        v7 = pow(v18 - v5 * v22, 1.0 / v5);
        if (v7 <= v21 - v22)
          return v7 * a3[1];
      }
      v23 = pow(v19, 1.0 / v5);
    }
    while (v23 > v21);
    v7 = v23;
  }
  else
  {
    v9 = v5 + -1.0;
    v10 = v5 * 3.0 + -0.75;
    while (1)
    {
      do
      {
        v11 = std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(a2)
            + 0.0;
        v12 = std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(a2);
        v13 = v11 * (1.0 - v11);
      }
      while (v13 == 0.0);
      v14 = (v11 + -0.5) * sqrt(v10 / v13);
      v7 = v9 + v14;
      if (v9 + v14 >= 0.0)
      {
        v15 = (v12 + 0.0) * ((v12 + 0.0) * (v13 * (v13 * (v13 * 64.0))));
        if (v15 <= 1.0 - v14 * (v14 + v14) / v7)
          break;
        v16 = log(v15);
        v17 = log(v7 / v9);
        if (v16 <= -(v14 - v9 * v17) - (v14 - v9 * v17))
          break;
      }
    }
  }
  return v7 * a3[1];
}

double std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(unsigned int *a1)
{
  unsigned int v1;
  unsigned int v2;
  BOOL v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v1 = 48271 * (*a1 % 0xADC8);
  v2 = 3399 * (*a1 / 0xADC8);
  v3 = v1 >= v2;
  v4 = v1 - v2;
  if (v3)
    v5 = 0;
  else
    v5 = 0x7FFFFFFF;
  v6 = v5 + v4;
  v7 = v6 - 1;
  v8 = v6 / 0xADC8;
  v9 = 48271 * (v6 % 0xADC8);
  v8 *= 3399;
  v3 = v9 >= v8;
  v10 = v9 - v8;
  if (v3)
    v11 = 0;
  else
    v11 = 0x7FFFFFFF;
  v12 = v11 + v10;
  *a1 = v12;
  return ((double)v7 + (double)(v12 - 1) * 2147483650.0) / 4.61168601e18;
}

uint64_t ATXPBContextHeuristicsEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 16;
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v24 = *v3;
            v25 = *(_QWORD *)(a2 + v24);
            if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
              break;
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if ((v26 & 0x80) == 0)
              goto LABEL_34;
            v21 += 7;
            v14 = v22++ >= 9;
            if (v14)
            {
              v23 = 0;
              goto LABEL_36;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
LABEL_36:
          *(_BYTE *)(a1 + 24) = v23 != 0;
          continue;
        }
        if ((_DWORD)v17 != 1)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
        }
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 8;
      }
      v20 = *(void **)(a1 + v19);
      *(_QWORD *)(a1 + v19) = v18;

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9AF21A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9AF4F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9AF513C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9AF5DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Block_object_dispose(&a36, 8);
  _Unwind_Resume(a1);
}

void sub_1C9AF6320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9AF8DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x16u);
}

uint64_t ATXCandidateRelevanceModelPBCandidateMetricsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_WORD *)(a1 + 76) |= 8u;
          while (1)
          {
            v21 = *v3;
            v22 = *(_QWORD *)(a2 + v21);
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_88;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_90;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_88:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v20) = 0;
LABEL_90:
          v73 = 28;
          goto LABEL_107;
        case 2u:
          v26 = 0;
          v27 = 0;
          v20 = 0;
          *(_WORD *)(a1 + 76) |= 0x10u;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v30;
              v20 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                v15 = v27++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_94;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v20) = 0;
LABEL_94:
          v73 = 32;
          goto LABEL_107;
        case 3u:
          v32 = 0;
          v33 = 0;
          v20 = 0;
          *(_WORD *)(a1 + 76) |= 1u;
          while (2)
          {
            v34 = *v3;
            v35 = *(_QWORD *)(a2 + v34);
            v36 = v35 + 1;
            if (v35 == -1 || v36 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
              *(_QWORD *)(a2 + v34) = v36;
              v20 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                v15 = v33++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_98;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v20) = 0;
LABEL_98:
          v73 = 16;
          goto LABEL_107;
        case 4u:
          v38 = 0;
          v39 = 0;
          v20 = 0;
          *(_WORD *)(a1 + 76) |= 2u;
          while (2)
          {
            v40 = *v3;
            v41 = *(_QWORD *)(a2 + v40);
            v42 = v41 + 1;
            if (v41 == -1 || v42 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
              *(_QWORD *)(a2 + v40) = v42;
              v20 |= (unint64_t)(v43 & 0x7F) << v38;
              if (v43 < 0)
              {
                v38 += 7;
                v15 = v39++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_102;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v20) = 0;
LABEL_102:
          v73 = 20;
          goto LABEL_107;
        case 5u:
          v44 = 0;
          v45 = 0;
          v20 = 0;
          *(_WORD *)(a1 + 76) |= 4u;
          break;
        case 6u:
          *(_WORD *)(a1 + 76) |= 0x40u;
          v50 = *v3;
          v51 = *(_QWORD *)(a2 + v50);
          if (v51 <= 0xFFFFFFFFFFFFFFFBLL && v51 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v52 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v51);
            *(_QWORD *)(a2 + v50) = v51 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v52 = 0;
          }
          v74 = 40;
          goto LABEL_128;
        case 7u:
          *(_WORD *)(a1 + 76) |= 0x200u;
          v53 = *v3;
          v54 = *(_QWORD *)(a2 + v53);
          if (v54 <= 0xFFFFFFFFFFFFFFFBLL && v54 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v52 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v54);
            *(_QWORD *)(a2 + v53) = v54 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v52 = 0;
          }
          v74 = 52;
          goto LABEL_128;
        case 8u:
          *(_WORD *)(a1 + 76) |= 0x80u;
          v55 = *v3;
          v56 = *(_QWORD *)(a2 + v55);
          if (v56 <= 0xFFFFFFFFFFFFFFFBLL && v56 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v52 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v56);
            *(_QWORD *)(a2 + v55) = v56 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v52 = 0;
          }
          v74 = 44;
          goto LABEL_128;
        case 9u:
          *(_WORD *)(a1 + 76) |= 0x100u;
          v57 = *v3;
          v58 = *(_QWORD *)(a2 + v57);
          if (v58 <= 0xFFFFFFFFFFFFFFFBLL && v58 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v52 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v58);
            *(_QWORD *)(a2 + v57) = v58 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v52 = 0;
          }
          v74 = 48;
          goto LABEL_128;
        case 0xAu:
          *(_WORD *)(a1 + 76) |= 0x20u;
          v59 = *v3;
          v60 = *(_QWORD *)(a2 + v59);
          if (v60 <= 0xFFFFFFFFFFFFFFFBLL && v60 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v52 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v60);
            *(_QWORD *)(a2 + v59) = v60 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v52 = 0;
          }
          v74 = 36;
          goto LABEL_128;
        case 0xBu:
          *(_WORD *)(a1 + 76) |= 0x800u;
          v61 = *v3;
          v62 = *(_QWORD *)(a2 + v61);
          if (v62 <= 0xFFFFFFFFFFFFFFFBLL && v62 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v52 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v62);
            *(_QWORD *)(a2 + v61) = v62 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v52 = 0;
          }
          v74 = 60;
          goto LABEL_128;
        case 0xCu:
          *(_WORD *)(a1 + 76) |= 0x4000u;
          v63 = *v3;
          v64 = *(_QWORD *)(a2 + v63);
          if (v64 <= 0xFFFFFFFFFFFFFFFBLL && v64 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v52 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v64);
            *(_QWORD *)(a2 + v63) = v64 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v52 = 0;
          }
          v74 = 72;
          goto LABEL_128;
        case 0xDu:
          *(_WORD *)(a1 + 76) |= 0x1000u;
          v65 = *v3;
          v66 = *(_QWORD *)(a2 + v65);
          if (v66 <= 0xFFFFFFFFFFFFFFFBLL && v66 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v52 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v66);
            *(_QWORD *)(a2 + v65) = v66 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v52 = 0;
          }
          v74 = 64;
          goto LABEL_128;
        case 0xEu:
          *(_WORD *)(a1 + 76) |= 0x2000u;
          v67 = *v3;
          v68 = *(_QWORD *)(a2 + v67);
          if (v68 <= 0xFFFFFFFFFFFFFFFBLL && v68 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v52 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v68);
            *(_QWORD *)(a2 + v67) = v68 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v52 = 0;
          }
          v74 = 68;
          goto LABEL_128;
        case 0xFu:
          *(_WORD *)(a1 + 76) |= 0x400u;
          v69 = *v3;
          v70 = *(_QWORD *)(a2 + v69);
          if (v70 <= 0xFFFFFFFFFFFFFFFBLL && v70 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v52 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v70);
            *(_QWORD *)(a2 + v69) = v70 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v52 = 0;
          }
          v74 = 56;
LABEL_128:
          *(_DWORD *)(a1 + v74) = v52;
          continue;
        case 0x10u:
          PBReaderReadString();
          v71 = objc_claimAutoreleasedReturnValue();
          v72 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v71;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v46 = *v3;
        v47 = *(_QWORD *)(a2 + v46);
        v48 = v47 + 1;
        if (v47 == -1 || v48 > *(_QWORD *)(a2 + *v4))
          break;
        v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v47);
        *(_QWORD *)(a2 + v46) = v48;
        v20 |= (unint64_t)(v49 & 0x7F) << v44;
        if ((v49 & 0x80) == 0)
          goto LABEL_104;
        v44 += 7;
        v15 = v45++ >= 9;
        if (v15)
        {
          LODWORD(v20) = 0;
          goto LABEL_106;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_104:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v20) = 0;
LABEL_106:
      v73 = 24;
LABEL_107:
      *(_DWORD *)(a1 + v73) = v20;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDProactiveAppPredictionSessionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  char v101;
  unsigned int v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  char v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  char v111;
  unsigned int v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  char v121;
  unsigned int v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  char v126;
  unsigned int v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  char v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  char v137;
  unsigned int v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  char v142;
  unsigned int v143;
  uint64_t v144;
  unint64_t v145;
  char v146;
  char v147;
  unsigned int v148;
  uint64_t v149;
  unint64_t v150;
  char v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  char v157;
  unsigned int v158;
  uint64_t v159;
  unint64_t v160;
  char v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  BOOL v167;
  uint64_t v168;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_DWORD *)(a1 + 192) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_229;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_231;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_229:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_231:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 8u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_235;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_235:
          v166 = 76;
          goto LABEL_341;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x8000u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_239;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_239:
          v166 = 144;
          goto LABEL_341;
        case 4u:
          v35 = 0;
          v36 = 0;
          v37 = 0;
          *(_DWORD *)(a1 + 192) |= 0x4000000u;
          while (2)
          {
            v38 = *v3;
            v39 = *(_QWORD *)(a2 + v38);
            if (v39 == -1 || v39 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v39);
              *(_QWORD *)(a2 + v38) = v39 + 1;
              v37 |= (unint64_t)(v40 & 0x7F) << v35;
              if (v40 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  v37 = 0;
                  goto LABEL_243;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v37 = 0;
LABEL_243:
          v167 = v37 != 0;
          v168 = 188;
          goto LABEL_320;
        case 5u:
          v41 = 0;
          v42 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 4u;
          while (2)
          {
            v43 = *v3;
            v44 = *(_QWORD *)(a2 + v43);
            if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
              *(_QWORD *)(a2 + v43) = v44 + 1;
              v26 |= (unint64_t)(v45 & 0x7F) << v41;
              if (v45 < 0)
              {
                v41 += 7;
                v14 = v42++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_247;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_247:
          v166 = 72;
          goto LABEL_341;
        case 6u:
          v46 = 0;
          v47 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x200000u;
          while (2)
          {
            v48 = *v3;
            v49 = *(_QWORD *)(a2 + v48);
            if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v49);
              *(_QWORD *)(a2 + v48) = v49 + 1;
              v26 |= (unint64_t)(v50 & 0x7F) << v46;
              if (v50 < 0)
              {
                v46 += 7;
                v14 = v47++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_251;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_251:
          v166 = 168;
          goto LABEL_341;
        case 7u:
          v51 = 0;
          v52 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x40000u;
          while (2)
          {
            v53 = *v3;
            v54 = *(_QWORD *)(a2 + v53);
            if (v54 == -1 || v54 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v55 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v54);
              *(_QWORD *)(a2 + v53) = v54 + 1;
              v26 |= (unint64_t)(v55 & 0x7F) << v51;
              if (v55 < 0)
              {
                v51 += 7;
                v14 = v52++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_255;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_255:
          v166 = 156;
          goto LABEL_341;
        case 8u:
          v56 = 0;
          v57 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x10000u;
          while (2)
          {
            v58 = *v3;
            v59 = *(_QWORD *)(a2 + v58);
            if (v59 == -1 || v59 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v60 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v59);
              *(_QWORD *)(a2 + v58) = v59 + 1;
              v26 |= (unint64_t)(v60 & 0x7F) << v56;
              if (v60 < 0)
              {
                v56 += 7;
                v14 = v57++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_259;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_259:
          v166 = 148;
          goto LABEL_341;
        case 9u:
          v61 = 0;
          v62 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x2000000u;
          while (2)
          {
            v63 = *v3;
            v64 = *(_QWORD *)(a2 + v63);
            if (v64 == -1 || v64 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v65 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v64);
              *(_QWORD *)(a2 + v63) = v64 + 1;
              v26 |= (unint64_t)(v65 & 0x7F) << v61;
              if (v65 < 0)
              {
                v61 += 7;
                v14 = v62++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_263;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_263:
          v166 = 184;
          goto LABEL_341;
        case 0xAu:
          v66 = 0;
          v67 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x4000u;
          while (2)
          {
            v68 = *v3;
            v69 = *(_QWORD *)(a2 + v68);
            if (v69 == -1 || v69 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v70 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v69);
              *(_QWORD *)(a2 + v68) = v69 + 1;
              v26 |= (unint64_t)(v70 & 0x7F) << v66;
              if (v70 < 0)
              {
                v66 += 7;
                v14 = v67++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_267;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_267:
          v166 = 140;
          goto LABEL_341;
        case 0xBu:
          v71 = 0;
          v72 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 2u;
          while (2)
          {
            v73 = *v3;
            v74 = *(_QWORD *)(a2 + v73);
            if (v74 == -1 || v74 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v75 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v74);
              *(_QWORD *)(a2 + v73) = v74 + 1;
              v26 |= (unint64_t)(v75 & 0x7F) << v71;
              if (v75 < 0)
              {
                v71 += 7;
                v14 = v72++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_271;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_271:
          v166 = 56;
          goto LABEL_341;
        case 0xCu:
          v76 = 0;
          v77 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x10u;
          while (2)
          {
            v78 = *v3;
            v79 = *(_QWORD *)(a2 + v78);
            if (v79 == -1 || v79 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v80 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v79);
              *(_QWORD *)(a2 + v78) = v79 + 1;
              v26 |= (unint64_t)(v80 & 0x7F) << v76;
              if (v80 < 0)
              {
                v76 += 7;
                v14 = v77++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_275;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_275:
          v166 = 80;
          goto LABEL_341;
        case 0xDu:
          v81 = 0;
          v82 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x80000u;
          while (2)
          {
            v83 = *v3;
            v84 = *(_QWORD *)(a2 + v83);
            if (v84 == -1 || v84 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v85 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v84);
              *(_QWORD *)(a2 + v83) = v84 + 1;
              v26 |= (unint64_t)(v85 & 0x7F) << v81;
              if (v85 < 0)
              {
                v81 += 7;
                v14 = v82++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_279;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_279:
          v166 = 160;
          goto LABEL_341;
        case 0xEu:
          v86 = 0;
          v87 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x800u;
          while (2)
          {
            v88 = *v3;
            v89 = *(_QWORD *)(a2 + v88);
            if (v89 == -1 || v89 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v90 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v89);
              *(_QWORD *)(a2 + v88) = v89 + 1;
              v26 |= (unint64_t)(v90 & 0x7F) << v86;
              if (v90 < 0)
              {
                v86 += 7;
                v14 = v87++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_283;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_283:
          v166 = 120;
          goto LABEL_341;
        case 0xFu:
          v91 = 0;
          v92 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x40u;
          while (2)
          {
            v93 = *v3;
            v94 = *(_QWORD *)(a2 + v93);
            if (v94 == -1 || v94 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v95 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v94);
              *(_QWORD *)(a2 + v93) = v94 + 1;
              v26 |= (unint64_t)(v95 & 0x7F) << v91;
              if (v95 < 0)
              {
                v91 += 7;
                v14 = v92++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_287;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_287:
          v166 = 88;
          goto LABEL_341;
        case 0x10u:
          v96 = 0;
          v97 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x1000000u;
          while (2)
          {
            v98 = *v3;
            v99 = *(_QWORD *)(a2 + v98);
            if (v99 == -1 || v99 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v100 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v99);
              *(_QWORD *)(a2 + v98) = v99 + 1;
              v26 |= (unint64_t)(v100 & 0x7F) << v96;
              if (v100 < 0)
              {
                v96 += 7;
                v14 = v97++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_291;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_291:
          v166 = 180;
          goto LABEL_341;
        case 0x11u:
          v101 = 0;
          v102 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x800000u;
          while (2)
          {
            v103 = *v3;
            v104 = *(_QWORD *)(a2 + v103);
            if (v104 == -1 || v104 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v105 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v104);
              *(_QWORD *)(a2 + v103) = v104 + 1;
              v26 |= (unint64_t)(v105 & 0x7F) << v101;
              if (v105 < 0)
              {
                v101 += 7;
                v14 = v102++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_295;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_295:
          v166 = 176;
          goto LABEL_341;
        case 0x12u:
          v106 = 0;
          v107 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x100000u;
          while (2)
          {
            v108 = *v3;
            v109 = *(_QWORD *)(a2 + v108);
            if (v109 == -1 || v109 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v110 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v109);
              *(_QWORD *)(a2 + v108) = v109 + 1;
              v26 |= (unint64_t)(v110 & 0x7F) << v106;
              if (v110 < 0)
              {
                v106 += 7;
                v14 = v107++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_299;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_299:
          v166 = 164;
          goto LABEL_341;
        case 0x13u:
          v111 = 0;
          v112 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x100u;
          while (2)
          {
            v113 = *v3;
            v114 = *(_QWORD *)(a2 + v113);
            if (v114 == -1 || v114 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v115 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v114);
              *(_QWORD *)(a2 + v113) = v114 + 1;
              v26 |= (unint64_t)(v115 & 0x7F) << v111;
              if (v115 < 0)
              {
                v111 += 7;
                v14 = v112++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_303;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_303:
          v166 = 108;
          goto LABEL_341;
        case 0x14u:
          v116 = 0;
          v117 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x400u;
          while (2)
          {
            v118 = *v3;
            v119 = *(_QWORD *)(a2 + v118);
            if (v119 == -1 || v119 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v120 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v119);
              *(_QWORD *)(a2 + v118) = v119 + 1;
              v26 |= (unint64_t)(v120 & 0x7F) << v116;
              if (v120 < 0)
              {
                v116 += 7;
                v14 = v117++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_307;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_307:
          v166 = 116;
          goto LABEL_341;
        case 0x15u:
          v121 = 0;
          v122 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x200u;
          while (2)
          {
            v123 = *v3;
            v124 = *(_QWORD *)(a2 + v123);
            if (v124 == -1 || v124 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v125 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v124);
              *(_QWORD *)(a2 + v123) = v124 + 1;
              v26 |= (unint64_t)(v125 & 0x7F) << v121;
              if (v125 < 0)
              {
                v121 += 7;
                v14 = v122++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_311;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_311:
          v166 = 112;
          goto LABEL_341;
        case 0x16u:
          v126 = 0;
          v127 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x80u;
          while (2)
          {
            v128 = *v3;
            v129 = *(_QWORD *)(a2 + v128);
            if (v129 == -1 || v129 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v130 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v129);
              *(_QWORD *)(a2 + v128) = v129 + 1;
              v26 |= (unint64_t)(v130 & 0x7F) << v126;
              if (v130 < 0)
              {
                v126 += 7;
                v14 = v127++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_315;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_315:
          v166 = 104;
          goto LABEL_341;
        case 0x17u:
          v131 = 0;
          v132 = 0;
          v133 = 0;
          *(_DWORD *)(a1 + 192) |= 0x8000000u;
          while (2)
          {
            v134 = *v3;
            v135 = *(_QWORD *)(a2 + v134);
            if (v135 == -1 || v135 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v136 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v135);
              *(_QWORD *)(a2 + v134) = v135 + 1;
              v133 |= (unint64_t)(v136 & 0x7F) << v131;
              if (v136 < 0)
              {
                v131 += 7;
                v14 = v132++ >= 9;
                if (v14)
                {
                  v133 = 0;
                  goto LABEL_319;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v133 = 0;
LABEL_319:
          v167 = v133 != 0;
          v168 = 189;
LABEL_320:
          *(_BYTE *)(a1 + v168) = v167;
          continue;
        case 0x18u:
          v137 = 0;
          v138 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x1000u;
          while (2)
          {
            v139 = *v3;
            v140 = *(_QWORD *)(a2 + v139);
            if (v140 == -1 || v140 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v141 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v140);
              *(_QWORD *)(a2 + v139) = v140 + 1;
              v26 |= (unint64_t)(v141 & 0x7F) << v137;
              if (v141 < 0)
              {
                v137 += 7;
                v14 = v138++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_324;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_324:
          v166 = 124;
          goto LABEL_341;
        case 0x19u:
          v142 = 0;
          v143 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x2000u;
          while (2)
          {
            v144 = *v3;
            v145 = *(_QWORD *)(a2 + v144);
            if (v145 == -1 || v145 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v146 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v145);
              *(_QWORD *)(a2 + v144) = v145 + 1;
              v26 |= (unint64_t)(v146 & 0x7F) << v142;
              if (v146 < 0)
              {
                v142 += 7;
                v14 = v143++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_328;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_328:
          v166 = 136;
          goto LABEL_341;
        case 0x1Au:
          v147 = 0;
          v148 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x400000u;
          while (2)
          {
            v149 = *v3;
            v150 = *(_QWORD *)(a2 + v149);
            if (v150 == -1 || v150 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v151 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v150);
              *(_QWORD *)(a2 + v149) = v150 + 1;
              v26 |= (unint64_t)(v151 & 0x7F) << v147;
              if (v151 < 0)
              {
                v147 += 7;
                v14 = v148++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_332;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_332:
          v166 = 172;
          goto LABEL_341;
        case 0x1Bu:
          v152 = 0;
          v153 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x20u;
          while (2)
          {
            v154 = *v3;
            v155 = *(_QWORD *)(a2 + v154);
            if (v155 == -1 || v155 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v156 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v155);
              *(_QWORD *)(a2 + v154) = v155 + 1;
              v26 |= (unint64_t)(v156 & 0x7F) << v152;
              if (v156 < 0)
              {
                v152 += 7;
                v14 = v153++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_336;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_336:
          v166 = 84;
          goto LABEL_341;
        case 0x1Cu:
          v157 = 0;
          v158 = 0;
          v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x20000u;
          break;
        case 0x1Du:
          PBReaderReadString();
          v162 = (void *)objc_claimAutoreleasedReturnValue();
          if (v162)
            objc_msgSend((id)a1, "addAppSequence:", v162);

          continue;
        case 0x1Eu:
          PBReaderReadString();
          v163 = objc_claimAutoreleasedReturnValue();
          v164 = 32;
          goto LABEL_227;
        case 0x1Fu:
          PBReaderReadString();
          v163 = objc_claimAutoreleasedReturnValue();
          v164 = 24;
          goto LABEL_227;
        case 0x20u:
          PBReaderReadString();
          v163 = objc_claimAutoreleasedReturnValue();
          v164 = 40;
          goto LABEL_227;
        case 0x21u:
          PBReaderReadString();
          v163 = objc_claimAutoreleasedReturnValue();
          v164 = 96;
          goto LABEL_227;
        case 0x22u:
          PBReaderReadString();
          v163 = objc_claimAutoreleasedReturnValue();
          v164 = 64;
          goto LABEL_227;
        case 0x23u:
          PBReaderReadString();
          v163 = objc_claimAutoreleasedReturnValue();
          v164 = 128;
          goto LABEL_227;
        case 0x24u:
          PBReaderReadString();
          v163 = objc_claimAutoreleasedReturnValue();
          v164 = 16;
LABEL_227:
          v165 = *(void **)(a1 + v164);
          *(_QWORD *)(a1 + v164) = v163;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v159 = *v3;
        v160 = *(_QWORD *)(a2 + v159);
        if (v160 == -1 || v160 >= *(_QWORD *)(a2 + *v4))
          break;
        v161 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v160);
        *(_QWORD *)(a2 + v159) = v160 + 1;
        v26 |= (unint64_t)(v161 & 0x7F) << v157;
        if ((v161 & 0x80) == 0)
          goto LABEL_338;
        v157 += 7;
        v14 = v158++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_340;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_338:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_340:
      v166 = 152;
LABEL_341:
      *(_DWORD *)(a1 + v166) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9B0B488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void sub_1C9B0F8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_3_7(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, a3, a4, a5, 0xCu);
}

void sub_1C9B115EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a55, 8);
  _Unwind_Resume(a1);
}

void sub_1C9B125DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9B14360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1C9B14B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9B15CDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9B15F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1C9B16190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1C9B1643C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

__CFString *widgetKindForDeduping(void *a1)
{
  id v1;
  __CFString *v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.CalendarWidget.CalendarListWidget")) & 1) != 0)
    v2 = CFSTR("com.apple.CalendarWidget.CalendarUpNextWidget");
  else
    v2 = (__CFString *)v1;

  return v2;
}

void sub_1C9B1A160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9B1ABC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<ATXGamePlayKitCDecisionNode>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

id ATXGamePlayKitCDecisionNode::branches(ATXGamePlayKitCDecisionNode *this)
{
  id v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v4 = *(_QWORD **)this;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  while (v4 != v3)
  {
    if (*v4)
      objc_msgSend(v2, "addObject:");
    v4 += 3;
  }
  return v2;
}

void sub_1C9B1AD30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9B1B4C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    v18[4] = result;
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>>(result, v13);
    v15 = &v14[24 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[24 * v16];
    v17 = *a2;
    *(_QWORD *)a2 = 0;
    *(_OWORD *)v15 = v17;
    *((_QWORD *)v15 + 2) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    v18[2] = v15 + 24;
    std::vector<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::__swap_out_circular_buffer(a1, v18);
    v9 = a1[1];
    result = std::__split_buffer<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::~__split_buffer((uint64_t)v18);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)a2 = 0;
    *(_OWORD *)v7 = v8;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    v9 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v9;
  return result;
}

void sub_1C9B1B690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<ATXGamePlayKitCDecisionNode>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_1C9B1B840(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9B1B9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<ATXGamePlayKitCDecisionNode>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1C9B1BB38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<ATXGamePlayKitCDecisionNode>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1C9B1BC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  std::shared_ptr<ATXGamePlayKitCDecisionNode>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1C9B1BD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C9B1BE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C9B1C24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a3);
  v10 = v6;

  std::shared_ptr<ATXGamePlayKitCDecisionNode>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ATXGamePlayKitCDecisionTree::decode(ATXGamePlayKitCDecisionTree *this, NSArray *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  void *v6;
  _BOOL4 v7;
  char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  _BOOL4 v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  ATXGamePlayKitRandomDistribution *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  BOOL v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  ATXGamePlayKitRandomDistribution *v47;
  void *v48;
  void *v49;
  _QWORD *v50;
  uint64_t *v51;
  NSArray *obj;
  __int128 v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  std::__shared_weak_count *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t *v64;
  _QWORD *v65[2];
  _BYTE v66[128];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v65[0] = 0;
  v65[1] = 0;
  v64 = (uint64_t *)v65;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  obj = a2;
  v2 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v60, v66, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v61;
    do
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v61 != v3)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * i);
        objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("branch"));
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = v6 == 0;

        if (v7)
        {
          -[NSArray firstObject](obj, "firstObject");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("attribute"));
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = *(void **)(*(_QWORD *)this + 56);
          *(_QWORD *)(*(_QWORD *)this + 56) = v37;

          objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("randomDistribution"));
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          v40 = v39 == 0;

          if (!v40)
          {
            objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("randomDistribution"));
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v41, "objectAtIndexedSubscript:", 0);
            v42 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("randomDistribution"));
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v43, "objectAtIndexedSubscript:", 1);
            v44 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("randomDistribution"));
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v45, "objectAtIndexedSubscript:", 2);
            v46 = (void *)objc_claimAutoreleasedReturnValue();

            v47 = -[ATXGamePlayKitRandomDistribution initWithRandomSource:lowestValue:highestValue:]([ATXGamePlayKitRandomDistribution alloc], "initWithRandomSource:lowestValue:highestValue:", v46, objc_msgSend(v42, "integerValue"), objc_msgSend(v44, "integerValue"));
            v48 = *(void **)(*(_QWORD *)this + 72);
            *(_QWORD *)(*(_QWORD *)this + 72) = v47;

          }
          v58 = 0;
          objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("depth"));
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          v50 = (_QWORD *)objc_msgSend(v49, "integerValue");

          v58 = v50;
          *(_QWORD *)&v54 = &v58;
          v51 = std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(&v64, (uint64_t *)&v58, (uint64_t)&std::piecewise_construct, (uint64_t **)&v54);
          std::shared_ptr<ATXGamePlayKitCDecisionNode>::operator=[abi:ne180100](v51 + 5, (uint64_t *)this);

        }
        else
        {
          v8 = (char *)operator new(0x78uLL);
          *((_QWORD *)v8 + 1) = 0;
          *((_QWORD *)v8 + 2) = 0;
          *(_QWORD *)v8 = &off_1E82DE580;
          *(_OWORD *)(v8 + 40) = 0u;
          *((_QWORD *)v8 + 7) = 0;
          *(_OWORD *)(v8 + 24) = 0u;
          *((_OWORD *)v8 + 5) = 0u;
          *((_OWORD *)v8 + 6) = 0u;
          *((_QWORD *)v8 + 14) = 0;
          *((_OWORD *)v8 + 4) = xmmword_1C9E7EE50;
          v58 = v8 + 24;
          v59 = (std::__shared_weak_count *)v8;
          objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("attribute"));
          v9 = objc_claimAutoreleasedReturnValue();
          v10 = (void *)v58[7];
          v58[7] = v9;

          objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("randomDistribution"));
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = v11 == 0;

          if (!v12)
          {
            objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("randomDistribution"));
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "objectAtIndexedSubscript:", 0);
            v14 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("randomDistribution"));
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "objectAtIndexedSubscript:", 1);
            v16 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("randomDistribution"));
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "objectAtIndexedSubscript:", 2);
            v18 = objc_claimAutoreleasedReturnValue();

            v19 = -[ATXGamePlayKitRandomDistribution initWithRandomSource:lowestValue:highestValue:]([ATXGamePlayKitRandomDistribution alloc], "initWithRandomSource:lowestValue:highestValue:", v18, objc_msgSend(v14, "integerValue"), objc_msgSend(v16, "integerValue"));
            v20 = (void *)v58[9];
            v58[9] = v19;

            v21 = (void *)v58[10];
            v58[10] = v18;

          }
          objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("branchValue"));
          v22 = objc_claimAutoreleasedReturnValue();
          v23 = (void *)v58[8];
          v58[8] = v22;

          v57 = 0;
          objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("depth"));
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = objc_msgSend(v24, "integerValue");

          v57 = v25;
          *(_QWORD *)&v54 = &v57;
          v26 = std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(&v64, &v57, (uint64_t)&std::piecewise_construct, (uint64_t **)&v54);
          std::shared_ptr<ATXGamePlayKitCDecisionNode>::operator=[abi:ne180100](v26 + 5, (uint64_t *)&v58);
          v56 = v57 - 1;
          *(_QWORD *)&v54 = &v56;
          v27 = (uint64_t *)std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(&v64, &v56, (uint64_t)&std::piecewise_construct, (uint64_t **)&v54)[5];
          objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("branch"));
          *(_QWORD *)&v54 = objc_claimAutoreleasedReturnValue();
          *((_QWORD *)&v54 + 1) = v58;
          v55 = v59;
          if (v59)
          {
            p_shared_owners = (unint64_t *)&v59->__shared_owners_;
            do
              v29 = __ldxr(p_shared_owners);
            while (__stxr(v29 + 1, p_shared_owners));
          }
          std::vector<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::push_back[abi:ne180100](v27, &v54);
          v30 = v55;
          if (v55)
          {
            v31 = (unint64_t *)&v55->__shared_owners_;
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }

          v33 = v59;
          if (v59)
          {
            v34 = (unint64_t *)&v59->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
        }
      }
      v2 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v60, v66, 16);
    }
    while (v2);
  }

  std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::destroy((uint64_t)&v64, v65[0]);
}

void sub_1C9B1C8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,_QWORD *a32)
{

  std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::destroy((uint64_t)&a31, a32);
  _Unwind_Resume(a1);
}

id ATXGamePlayKitCDecisionTree::encodeWithCoder(uint64_t *a1, uint64_t **a2, void *a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  ATXGamePlayKitCDecisionNode *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v37;
  std::__shared_weak_count *v38;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x1E0C80C00];
  v9 = a3;
  v10 = a5;
  v11 = v10;
  if (v9)
  {
    v12 = v10;
  }
  else
  {
    std::shared_ptr<ATXGamePlayKitCDecisionNode>::operator=[abi:ne180100](a2, a1);
    v13 = (void *)MEMORY[0x1E0C99E08];
    ATXGamePlayKitCDecisionNode::nodeData((ATXGamePlayKitCDecisionNode *)*a2, 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "dictionaryWithDictionary:", v14);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a4);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "setObject:forKeyedSubscript:", v15, CFSTR("depth"));

    v16 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    objc_msgSend(v12, "setObject:forKeyedSubscript:", v16, CFSTR("children"));

    v39[0] = v12;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v39, 1);
    v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  v18 = **a2;
  v17 = (*a2)[1];
  if (v18 != v17)
  {
    v19 = a4 + 1;
    do
    {
      v20 = *(ATXGamePlayKitCDecisionNode **)(v18 + 8);
      if (v20)
      {
        v21 = (void *)MEMORY[0x1E0C99E08];
        ATXGamePlayKitCDecisionNode::nodeData(v20, *(objc_object **)v18);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "dictionaryWithDictionary:", v22);
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v19);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "setObject:forKeyedSubscript:", v24, CFSTR("depth"));

        v25 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        objc_msgSend(v23, "setObject:forKeyedSubscript:", v25, CFSTR("children"));

        objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("children"));
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v9, "count"));
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "addObject:", v27);

        v28 = *(std::__shared_weak_count **)(v18 + 16);
        v37 = *(_QWORD *)(v18 + 8);
        v38 = v28;
        if (v28)
        {
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldxr(p_shared_owners);
          while (__stxr(v30 + 1, p_shared_owners));
        }
        objc_msgSend(v9, "arrayByAddingObject:", v23);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        ATXGamePlayKitCDecisionTree::encodeWithCoder(a1, &v37, v31, v19, v23);
        v32 = objc_claimAutoreleasedReturnValue();

        v33 = v38;
        if (v38)
        {
          v34 = (unint64_t *)&v38->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }

        v9 = (id)v32;
      }
      v18 += 24;
    }
    while (v18 != v17);
  }

  return v9;
}

void sub_1C9B1CCF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9B1CEAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9B1CF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)ATXGamePlayKitDecisionTree;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_1C9B1D3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a9);

  std::shared_ptr<ATXGamePlayKitCDecisionNode>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ATXGamePlayKitCDecisionTree::cartTreeGrowth(ATXGamePlayKitCDecisionTree *a1, void *a2, void *a3, _QWORD *a4, unint64_t a5, uint64_t a6, double a7)
{
  unint64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  void *v19;
  double v20;
  void *v21;
  void *v22;
  void *v23;
  char isKindOfClass;
  float v25;
  float v26;
  _QWORD *v27;
  uint64_t *v28;
  id **v29;
  id *v30;
  double v31;
  uint64_t v32;
  uint64_t *v33;
  double v34;
  uint64_t v35;
  uint64_t *v36;
  NSNumber *v37;
  id v38;
  BOOL v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  void *v44;
  id *v45;
  id *v46;
  BOOL v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  unint64_t v56;
  id *v57;
  id *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v64;
  NSArray *v65;
  id v66;
  uint64_t *v67;
  std::__shared_weak_count *v68;
  uint64_t v69[3];
  uint64_t v70[3];
  id **v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74[3];
  NSNumber *v75;
  id v76;
  id *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  _QWORD *v81[3];

  v65 = a2;
  v66 = a3;
  v11 = -[NSArray count](v65, "count");
  v12 = ATXGamePlayKitCDecisionTree::giniImpurity(a1, v65);
  v13 = (double)v11;
  v14 = (unint64_t)(double)v11;
  *(_QWORD *)(*a4 + 48) = v14;
  if (v12 >= 0.0)
  {
    if (v12 != 0.0)
    {
      v61 = a6;
      v81[0] = 0;
      v81[1] = 0;
      v80 = (uint64_t *)v81;
      ATXGamePlayKitCDecisionTree::getAttributeCounts((uint64_t)a1, v66, v65);
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 0;
      v19 = 0;
      v20 = 1.0;
      while (1)
      {
        if (objc_msgSend(v66, "count", v61) <= v18)
        {
          if (v20 > 0.0 && (unint64_t)objc_msgSend(v66, "count") < 2
            || (*(_QWORD *)(*a4 + 40) <= a5 ? (v39 = v13 < (double)(unint64_t)v61) : (v39 = 1), v39))
          {
            ATXGamePlayKitCDecisionTree::splitByAttribute(a1, v65, objc_msgSend(v66, "count"), (uint64_t)&v77);
            v40 = (uint64_t *)v77;
            if (v79 == 2)
            {
              if (v77 == (id *)&v78)
              {
                v42 = 0;
                v41 = 0;
              }
              else
              {
                v41 = 0;
                v42 = 0;
                do
                {
                  v43 = objc_msgSend((id)v40[4], "isEqualToNumber:", &unk_1E83CC148);
                  v44 = (void *)v40[5];
                  if (v43)
                    v41 = objc_msgSend(v44, "count");
                  else
                    v42 = objc_msgSend(v44, "count");
                  v45 = (id *)v40[1];
                  if (v45)
                  {
                    do
                    {
                      v46 = v45;
                      v45 = (id *)*v45;
                    }
                    while (v45);
                  }
                  else
                  {
                    do
                    {
                      v46 = (id *)v40[2];
                      v47 = *v46 == v40;
                      v40 = (uint64_t *)v46;
                    }
                    while (!v47);
                  }
                  v40 = (uint64_t *)v46;
                }
                while (v46 != (id *)&v78);
              }
              v59 = &unk_1E83CC148;
              v60 = *(void **)(*a4 + 56);
              if ((double)v42 / ((double)(v41 + v42) + 0.001) >= a7)
                v59 = &unk_1E83CC160;
              *(_QWORD *)(*a4 + 56) = v59;

            }
            else if (v77 != (id *)&v78)
            {
              v56 = 0;
              do
              {
                if (v56 < objc_msgSend((id)v40[5], "count"))
                {
                  objc_storeStrong((id *)(*a4 + 56), (id)v40[4]);
                  v56 = objc_msgSend((id)v40[5], "count");
                }
                v57 = (id *)v40[1];
                if (v57)
                {
                  do
                  {
                    v58 = v57;
                    v57 = (id *)*v57;
                  }
                  while (v57);
                }
                else
                {
                  do
                  {
                    v58 = (id *)v40[2];
                    v47 = *v58 == v40;
                    v40 = (uint64_t *)v58;
                  }
                  while (!v47);
                }
                v40 = (uint64_t *)v58;
              }
              while (v58 != (id *)&v78);
            }
            v54 = v78;
            v55 = (uint64_t *)&v77;
          }
          else
          {
            objc_storeStrong((id *)(*a4 + 56), v19);
            std::map<objc_object * {__strong},NSMutableArray * {__strong}>::map[abi:ne180100](v69, (uint64_t)&v80);
            v48 = (std::__shared_weak_count *)a4[1];
            v67 = (uint64_t *)*a4;
            v68 = v48;
            if (v48)
            {
              p_shared_owners = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldxr(p_shared_owners);
              while (__stxr(v50 + 1, p_shared_owners));
            }
            ATXGamePlayKitCDecisionTree::splitOnIndex((uint64_t)a1, a7, (uint64_t)v19, v66, v69, &v67, (uint64_t)v64, a5, v61);
            v51 = v68;
            if (v68)
            {
              v52 = (unint64_t *)&v68->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            v54 = (uint64_t *)v69[1];
            v55 = v69;
          }
          std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)v55, v54);

          std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v80, v81[0]);
          goto LABEL_77;
        }
        objc_msgSend(v64, "objectAtIndexedSubscript:", v18);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v21, "integerValue") <= 2)
        {

        }
        else
        {
          -[NSArray firstObject](v65, "firstObject");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "objectAtIndexedSubscript:", v18);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();

          if ((isKindOfClass & 1) != 0)
          {
            ATXGamePlayKitCDecisionTree::multiwaySplitByAttributeValue(a1, v65, v18, (uint64_t)&v77);
            std::map<objc_object * {__strong},NSMutableArray * {__strong}>::map[abi:ne180100](v74, (uint64_t)&v77);
            ATXGamePlayKitCDecisionTree::continuousGiniSplit(a1, (uint64_t)v74, (void **)&v75);
            std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)v74, (_QWORD *)v74[1]);
            objc_msgSend(v76, "floatValue");
            v26 = v25;
            ATXGamePlayKitCDecisionTree::splitOnValueOfAttribute(a1, v65, v75, v18, (uint64_t)&v71);
            std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v77, v78);
            v27 = v72;
            v77 = (id *)v71;
            v78 = v72;
            v79 = v73;
            if (v73)
            {
              v72[2] = &v78;
              v71 = (id **)&v72;
              v72 = 0;
              v73 = 0;
              v27 = 0;
            }
            else
            {
              v77 = (id *)&v78;
            }
            v34 = v26;
            std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v71, v27);
            if (v20 <= v34)
            {
              v34 = v20;
            }
            else
            {
              objc_msgSend(v66, "objectAtIndexedSubscript:", v18);
              v35 = objc_claimAutoreleasedReturnValue();

              v19 = (void *)v35;
              std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__tree_node<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,void *> *,long>>(&v80, v77, (id *)&v78);
            }
            v36 = (uint64_t *)v77;
            if (v77 != (id *)&v78)
            {
              do
                v36 = std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::erase((uint64_t **)&v77, (uint64_t)v36);
              while (&v78 != (uint64_t **)v36);
            }
            v37 = v75;
            v75 = 0;

            v38 = v76;
            v76 = 0;

            std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v77, v78);
            v20 = v34;
            goto LABEL_30;
          }
        }
        ATXGamePlayKitCDecisionTree::binarySplitByAttributeValue(a1, v65, v18, (uint64_t *)&v77);
        v29 = (id **)v77;
        v28 = v78;
        if (v77 == (id *)v78)
        {
          v33 = (uint64_t *)v77;
        }
        else
        {
          v30 = v77 + 1;
          do
          {
            std::map<objc_object * {__strong},NSMutableArray * {__strong}>::map[abi:ne180100](v70, (uint64_t)v29);
            v31 = ATXGamePlayKitCDecisionTree::giniSplit(a1, v70, v14);
            std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)v70, (_QWORD *)v70[1]);
            if (v31 < v20)
            {
              objc_msgSend(v66, "objectAtIndexedSubscript:", v18);
              v32 = objc_claimAutoreleasedReturnValue();

              v19 = (void *)v32;
              if (v29 != (id **)&v80)
                std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__tree_node<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,void *> *,long>>(&v80, *v29, v30);
              v20 = v31;
            }
            v29 += 3;
            v30 += 3;
          }
          while (v29 != (id **)v28);
          v33 = (uint64_t *)v77;
          v29 = (id **)v78;
        }
        std::vector<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::erase((uint64_t)&v77, (uint64_t)v33, v29);
        v71 = &v77;
        std::vector<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
LABEL_30:
        ++v18;
      }
    }
    -[NSArray firstObject](v65, "firstObject");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "lastObject");
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (v15)
    {
      objc_msgSend(v19, "lastObject");
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = *(void **)(*a4 + 56);
      *(_QWORD *)(*a4 + 56) = v16;

    }
LABEL_77:

  }
}

void sub_1C9B1DADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, char a16, uint64_t a17, char a18, _QWORD *a19)
{
  void *v19;
  uint64_t v20;

  std::shared_ptr<ATXGamePlayKitCDecisionNode>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&a18, a19);

  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(v20 - 144, *(_QWORD **)(v20 - 136));
  _Unwind_Resume(a1);
}

void sub_1C9B1DD6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9B1DE6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9B1DF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ATXGamePlayKitCDecisionNode>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1C9B1DFA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id ATXGamePlayKitCDecisionTree::findActionForAnswers(ATXGamePlayKitCDecisionTree *a1, void *a2)
{
  id v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSPredicate *v12;
  void *v13;
  _BOOL4 v14;
  id v15;
  uint64_t v16;
  BOOL v17;
  void *v18;
  int v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  id v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  uint8_t buf[4];
  NSPredicate *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v26 = *(uint64_t **)a1;
  v27 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = v26;
  if (v26[1] != *v26)
  {
LABEL_5:
    v8 = (void *)v7[9];
    if (v8)
    {
      v9 = objc_msgSend(v8, "nextInt");
LABEL_9:
      v10 = *v26;
      v11 = v26[1];
      while (1)
      {
        if (v10 == v11)
          goto LABEL_30;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v12 = (NSPredicate *)*(id *)v10;
          if ((ATXGamePlayKitCDecisionTree::isPredicateValid(a1, v12) & 1) == 0)
          {
            __atxlog_handle_anchor();
            v20 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 138543362;
              v29 = v12;
              _os_log_fault_impl(&dword_1C9A3B000, v20, OS_LOG_TYPE_FAULT, "Encountered invalid predicate %{public}@", buf, 0xCu);
            }

            goto LABEL_30;
          }
          -[NSPredicate allowEvaluation](v12, "allowEvaluation");
          objc_msgSend(v3, "objectForKeyedSubscript:", v26[7]);
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = -[NSPredicate evaluateWithObject:](v12, "evaluateWithObject:", v13);

          if (v14)
          {
            std::shared_ptr<ATXGamePlayKitCDecisionNode>::operator=[abi:ne180100](&v26, (uint64_t *)(v10 + 8));
            if (v26[1] == *v26)
            {
              v25 = (id)v26[7];

              goto LABEL_31;
            }

            goto LABEL_25;
          }

        }
        else
        {
          v15 = *(id *)v10;
          if (v26[9])
          {
            v16 = objc_msgSend(*(id *)v10, "integerValue");
            v17 = v9 <= v16;
            v9 -= v16;
            if (v17)
              goto LABEL_21;
          }
          else
          {
            objc_msgSend(v3, "objectForKeyedSubscript:", v26[7]);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            v19 = objc_msgSend(v15, "isEqual:", v18);

            if (v19)
            {
LABEL_21:
              std::shared_ptr<ATXGamePlayKitCDecisionNode>::operator=[abi:ne180100](&v26, (uint64_t *)(v10 + 8));
              if (v26[1] == *v26)
              {
                v25 = (id)v26[7];
                goto LABEL_31;
              }
LABEL_25:
              v25 = 0;
              v7 = v26;
              if (v26[1] != *v26)
                goto LABEL_5;
              goto LABEL_31;
            }
          }
        }
        v10 += 24;
      }
    }
    if (v3)
    {
      v9 = 0;
      if (objc_msgSend(v3, "count"))
        goto LABEL_9;
    }
  }
LABEL_30:
  v25 = 0;
LABEL_31:
  v21 = v27;
  if (v27)
  {
    v22 = (unint64_t *)&v27->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  return v25;
}

void sub_1C9B1E290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<ATXGamePlayKitCDecisionNode>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1C9B1E588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1C9B1E6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ATXGamePlayKitCDecisionNode>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__CFString *ATXGamePlayKitCDecisionTree::printTree(uint64_t a1, _QWORD **a2, void *a3, void *a4)
{
  id v7;
  __CFString *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *v15;
  void *v16;
  __CFString *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  void *v25;
  unint64_t *v26;
  __CFString *v27;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  v7 = a3;
  v8 = a4;
  if (*a2)
  {
    if (objc_msgSend(v7, "isEqualToString:", CFSTR("\t")))
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("\n%@(depth:%lu, ex:%lu)\n"), (*a2)[7], (*a2)[5], (*a2)[6]);
      v9 = objc_claimAutoreleasedReturnValue();

      v8 = (__CFString *)v9;
    }
    v11 = (_QWORD *)**a2;
    v10 = (_QWORD *)(*a2)[1];
    if (v11 != v10)
    {
      while (1)
      {
        if (v11[1])
        {
          v12 = (std::__shared_weak_count *)v11[2];
          v31 = v11[1];
          v32 = v12;
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldxr(p_shared_owners);
            while (__stxr(v14 + 1, p_shared_owners));
          }
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@\t"), v7);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@%@, %@(depth:%lu, ex:%lu)\n"), v8, v7, *v11, *(_QWORD *)(v11[1] + 56), *(_QWORD *)(v11[1] + 40), *(_QWORD *)(v11[1] + 48));
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          ATXGamePlayKitCDecisionTree::printTree(a1, &v31, v15, v16);
          v17 = (__CFString *)objc_claimAutoreleasedReturnValue();

          v18 = v32;
          if (!v32)
            goto LABEL_21;
          v19 = (unint64_t *)&v32->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
        }
        else
        {
          v21 = (std::__shared_weak_count *)v11[2];
          v29 = 0;
          v30 = v21;
          if (v21)
          {
            v22 = (unint64_t *)&v21->__shared_owners_;
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@\t"), v7);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@%@\n"), v8, v7, *v11);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          ATXGamePlayKitCDecisionTree::printTree(a1, &v29, v24, v25);
          v17 = (__CFString *)objc_claimAutoreleasedReturnValue();

          v18 = v30;
          if (!v30)
            goto LABEL_21;
          v26 = (unint64_t *)&v30->__shared_owners_;
          do
            v20 = __ldaxr(v26);
          while (__stlxr(v20 - 1, v26));
        }
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
LABEL_21:
        v11 += 3;
        v8 = v17;
        if (v11 == v10)
          goto LABEL_25;
      }
    }
    v17 = v8;
LABEL_25:
    v8 = v17;
    v27 = v8;
  }
  else
  {
    v27 = &stru_1E82FDC98;
  }

  return v27;
}

void sub_1C9B1E95C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9B1EAB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9B1EE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1C9B1EEC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9B1EF64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9B1F12C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C9B1F200(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9B1F26C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9B1F2CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9B1F32C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9B1F40C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_1C9B1F4F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9B1F6BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9B1F780(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9B1F8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (uint64_t *)operator new(0x38uLL);
    v14[1] = v7;
    v12[4] = **a4;
    v12[5] = 0;
    v12[6] = 0;
    v15 = 1;
    std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return v12;
  }
  return (uint64_t *)v9;
}

uint64_t *std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<ATXGamePlayKitCDecisionNode>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 40);
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::destroy(a1, a2[1]);
    std::shared_ptr<ATXGamePlayKitCDecisionNode>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

id ATXGamePlayKitCDecisionNode::nodeData(ATXGamePlayKitCDecisionNode *this, objc_object *a2)
{
  objc_object *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v4, "setObject:forKeyedSubscript:", *((_QWORD *)this + 7), CFSTR("attribute"));
  v5 = (void *)*((_QWORD *)this + 9);
  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v5, "lowestValue"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(*((id *)this + 9), "highestValue", v6));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *((_QWORD *)this + 10);
    v11[1] = v7;
    v11[2] = v8;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v9, CFSTR("randomDistribution"));

  }
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v3, CFSTR("branch"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", *((_QWORD *)this + 8), CFSTR("branchValue"));

  return v4;
}

void sub_1C9B201B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

double ATXGamePlayKitCDecisionTree::giniImpurity(ATXGamePlayKitCDecisionTree *this, NSArray *a2)
{
  NSArray *v3;
  void *v4;
  unint64_t v5;
  double v6;
  _QWORD **v7;
  double v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD **v11;
  BOOL v12;
  _QWORD **v14;
  _QWORD *v15[2];

  v3 = a2;
  -[NSArray firstObject](v3, "firstObject");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  ATXGamePlayKitCDecisionTree::splitByAttribute(this, v3, objc_msgSend(v4, "count") - 1, (uint64_t)&v14);

  v5 = -[NSArray count](v3, "count");
  v6 = 0.0;
  if (v5 && v15[1] != (_QWORD *)1)
  {
    v7 = v14;
    if (v14 == v15)
    {
      v6 = 1.0;
    }
    else
    {
      v8 = (double)v5;
      v6 = 1.0;
      do
      {
        v9 = objc_msgSend(v7[5], "count");
        v10 = v7[1];
        if (v10)
        {
          do
          {
            v11 = (_QWORD **)v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD **)v7[2];
            v12 = *v11 == v7;
            v7 = v11;
          }
          while (!v12);
        }
        v6 = v6 - (double)v9 / v8 * ((double)v9 / v8);
        v7 = v11;
      }
      while (v11 != v15);
    }
  }
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v14, v15[0]);

  return v6;
}

void sub_1C9B202FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  void *v11;

  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&a10, a11);

  _Unwind_Resume(a1);
}

id ATXGamePlayKitCDecisionTree::getAttributeCounts(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t i;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v4 = a2;
  v5 = a3;
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v4, "count"));
  v7 = 0;
  v8 = MEMORY[0x1E0C9AAB0];
  while (objc_msgSend(v4, "count") > v7)
  {
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v5, "count"));
    for (i = 0; objc_msgSend(v5, "count") > i; ++i)
    {
      objc_msgSend(v5, "objectAtIndexedSubscript:", i);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "objectAtIndexedSubscript:", v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v9, "objectForKeyedSubscript:", v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v13)
        objc_msgSend(v9, "setObject:forKeyedSubscript:", v8, v12);

    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v9, "count"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:atIndexedSubscript:", v14, v7);

    ++v7;
  }

  return v6;
}

void sub_1C9B204AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ATXGamePlayKitCDecisionTree::multiwaySplitByAttributeValue(ATXGamePlayKitCDecisionTree *this@<X0>, NSArray *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  NSArray *v6;
  void *v7;
  unint64_t i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  id *v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)a4 = a4 + 8;
  v7 = (void *)objc_opt_new();
  for (i = 0; -[NSArray count](v6, "count") > i; ++i)
  {
    -[NSArray objectAtIndexedSubscript:](v6, "objectAtIndexedSubscript:", i);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "objectAtIndexedSubscript:", a3);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v7, "objectForKey:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      objc_msgSend(v7, "objectForKey:", v10);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSArray objectAtIndexedSubscript:](v6, "objectAtIndexedSubscript:", i);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "addObject:", v13);
    }
    else
    {
      v14 = objc_alloc(MEMORY[0x1E0C99DE8]);
      -[NSArray objectAtIndexedSubscript:](v6, "objectAtIndexedSubscript:", i);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = (void *)objc_msgSend(v14, "initWithObjects:", v12, 0);
      objc_msgSend(v7, "setObject:forKey:", v13, v10);
    }

  }
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v15 = v7;
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
  if (v16)
  {
    v17 = *(_QWORD *)v23;
    do
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v23 != v17)
          objc_enumerationMutation(v15);
        v26 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * v18);
        objc_msgSend(v15, "objectForKey:");
        v19 = objc_claimAutoreleasedReturnValue();
        v27 = (id *)&v26;
        v20 = std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<objc_object * {__strong},std::piecewise_construct_t const&,std::tuple<objc_object * const {__strong}&>,std::tuple<>>((uint64_t **)a4, &v26, (uint64_t)&std::piecewise_construct, &v27);
        v21 = (void *)v20[5];
        v20[5] = v19;

        ++v18;
      }
      while (v16 != v18);
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
    }
    while (v16);
  }

}

void sub_1C9B20764(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;

  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(v2, *(_QWORD **)(v2 + 8));
  _Unwind_Resume(a1);
}

void ATXGamePlayKitCDecisionTree::continuousGiniSplit(ATXGamePlayKitCDecisionTree *a1@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  NSArray *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  void *v24;
  float v25;
  double v26;
  void *v27;
  id v28;
  _QWORD **v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  _QWORD **v43;
  BOOL v44;
  void *v45;
  void *v46;
  void *v47;
  float v48;
  float v49;
  float v50;
  float v51;
  void *v52;
  float v53;
  double v54;
  void *v55;
  id v56;
  _QWORD **v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  _QWORD *v64;
  _QWORD **v65;
  void *v66;
  void *v67;
  void *v68;
  float v69;
  float v70;
  float v71;
  float v72;
  void *v73;
  float v74;
  double v75;
  void *v76;
  id v77;
  _QWORD **v78;
  uint64_t v79;
  _QWORD *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  void *v89;
  void *v90;
  _QWORD *v91;
  _QWORD **v92;
  double v93;
  float v94;
  unint64_t v95;
  float v96;
  void *v97;
  float v98;
  unint64_t v99;
  void *v100;
  float v101;
  uint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  float v105;
  void *v106;
  float v107;
  unint64_t v108;
  void *v109;
  float v110;
  float v111;
  unint64_t v112;
  float v113;
  float v114;
  void *v115;
  float v116;
  float v117;
  void *v118;
  float v119;
  unint64_t v120;
  float v121;
  void *v122;
  float v123;
  float v124;
  void *v125;
  float v126;
  unint64_t v127;
  double v128;
  void *v129;
  uint64_t *v130;
  void *v131;
  float v132;
  float v133;
  float v134;
  id v135;
  id v136;
  void *v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t *v140;
  void **v141;
  void *v142;
  void *v143;
  unint64_t i;
  NSArray *v145;
  __CFString *v146;
  __CFString *v147;
  __CFString *v148;
  __CFString *v149;
  __CFString *v150;
  __CFString *v151;
  __CFString *v152;
  __CFString *v153;
  __CFString *v154;
  __CFString *v155;
  __CFString *v156;
  __CFString *v157;
  __CFString *v158;
  __CFString *v159;
  id v160;
  __CFString *v161;
  __CFString *v162;
  uint64_t *v163;
  _QWORD *v164[2];
  _QWORD **v165;
  _QWORD *v166;
  unint64_t v167;
  uint64_t *v168;
  _QWORD *v169[2];
  uint64_t v170[3];
  uint64_t *v171[2];

  std::map<objc_object * {__strong},NSMutableArray * {__strong}>::map[abi:ne180100](v170, a2);
  ATXGamePlayKitCDecisionTree::sortByAttributeWithAction((uint64_t)a1, v170);
  v5 = (NSArray *)objc_claimAutoreleasedReturnValue();
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)v170, (_QWORD *)v170[1]);
  v169[0] = 0;
  v169[1] = 0;
  v168 = (uint64_t *)v169;
  v145 = v5;
  -[NSArray firstObject](v5, "firstObject");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  ATXGamePlayKitCDecisionTree::splitByAttribute(a1, v5, objc_msgSend(v6, "count") - 1, (uint64_t)&v165);

  v7 = objc_alloc(MEMORY[0x1E0C99DE8]);
  v8 = (void *)objc_msgSend(v7, "initWithCapacity:", v167);
  v164[0] = 0;
  v164[1] = 0;
  v163 = (uint64_t *)v164;
  v9 = objc_alloc(MEMORY[0x1E0C99DE8]);
  v10 = objc_msgSend(v9, "initWithCapacity:", v167);
  v162 = CFSTR("<=");
  v171[0] = (uint64_t *)&v162;
  v11 = std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v162, (uint64_t)&std::piecewise_construct, v171);
  v12 = (void *)v11[5];
  v11[5] = v10;

  v13 = objc_alloc(MEMORY[0x1E0C99DE8]);
  v14 = objc_msgSend(v13, "initWithCapacity:", v167);
  v140 = (uint64_t *)v169;
  v141 = a3;
  v161 = CFSTR(">");
  v171[0] = (uint64_t *)&v161;
  v15 = std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v161, (uint64_t)&std::piecewise_construct, v171);
  v16 = (void *)v15[5];
  v15[5] = v14;

  for (i = 0; -[NSArray count](v5, "count", v140, v141) >= i; ++i)
  {
    v160 = 0;
    if (i)
    {
      if (-[NSArray count](v5, "count") == i)
      {
        -[NSArray objectAtIndexedSubscript:](v5, "objectAtIndexedSubscript:", i - 2);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "firstObject");
        v143 = (void *)objc_claimAutoreleasedReturnValue();

        -[NSArray objectAtIndexedSubscript:](v5, "objectAtIndexedSubscript:", i - 1);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "firstObject");
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        v142 = v19;
        objc_msgSend(v19, "floatValue");
        v21 = v20;
        objc_msgSend(v143, "floatValue");
        v23 = v22;
        v24 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v19, "floatValue");
        *(float *)&v26 = (float)((float)(v21 - v23) * 0.5) + v25;
        objc_msgSend(v24, "numberWithFloat:", v26);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = v160;
        v160 = v27;

        v29 = v165;
        if (v165 != &v166)
        {
          v30 = 0;
          do
          {
            v31 = v29[4];
            -[NSArray objectAtIndexedSubscript:](v5, "objectAtIndexedSubscript:", i - 1);
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v32, "lastObject");
            v33 = (void *)objc_claimAutoreleasedReturnValue();
            LODWORD(v31) = objc_msgSend(v31, "isEqual:", v33);

            if ((_DWORD)v31)
            {
              v34 = (void *)MEMORY[0x1E0CB37E8];
              objc_msgSend(v8, "objectAtIndexedSubscript:", v30);
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v34, "numberWithInteger:", objc_msgSend(v35, "integerValue") + 1);
              v36 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v8, "setObject:atIndexedSubscript:", v36, v30);

            }
            else
            {
              objc_msgSend(v8, "objectAtIndexedSubscript:", v30);
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v8, "setObject:atIndexedSubscript:", v35, v30);
            }

            objc_msgSend(v8, "objectAtIndexedSubscript:", v30);
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            v157 = CFSTR("<=");
            v171[0] = (uint64_t *)&v157;
            objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v157, (uint64_t)&std::piecewise_construct, v171)[5], "setObject:atIndexedSubscript:", v37, v30);

            v38 = (void *)MEMORY[0x1E0CB37E8];
            v39 = objc_msgSend(v29[5], "count");
            objc_msgSend(v8, "objectAtIndexedSubscript:", v30);
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v38, "numberWithUnsignedInteger:", v39 - objc_msgSend(v40, "integerValue"));
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            v156 = CFSTR(">");
            v171[0] = (uint64_t *)&v156;
            objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v156, (uint64_t)&std::piecewise_construct, v171)[5], "setObject:atIndexedSubscript:", v41, v30);

            v42 = v29[1];
            if (v42)
            {
              do
              {
                v43 = (_QWORD **)v42;
                v42 = (_QWORD *)*v42;
              }
              while (v42);
            }
            else
            {
              do
              {
                v43 = (_QWORD **)v29[2];
                v44 = *v43 == v29;
                v29 = v43;
              }
              while (!v44);
            }
            ++v30;
            v29 = v43;
          }
          while (v43 != &v166);
        }
      }
      else
      {
        -[NSArray objectAtIndexedSubscript:](v5, "objectAtIndexedSubscript:", i - 1);
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v66, "firstObject");
        v143 = (void *)objc_claimAutoreleasedReturnValue();

        -[NSArray objectAtIndexedSubscript:](v5, "objectAtIndexedSubscript:", i);
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v67, "firstObject");
        v68 = (void *)objc_claimAutoreleasedReturnValue();

        v142 = v68;
        objc_msgSend(v68, "floatValue");
        v70 = v69;
        objc_msgSend(v143, "floatValue");
        v72 = v71;
        v73 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v68, "floatValue");
        *(float *)&v75 = v74 + (float)((float)(v70 - v72) * -0.5);
        objc_msgSend(v73, "numberWithFloat:", v75);
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        v77 = v160;
        v160 = v76;

        v78 = v165;
        if (v165 != &v166)
        {
          v79 = 0;
          do
          {
            v80 = v78[4];
            -[NSArray objectAtIndexedSubscript:](v5, "objectAtIndexedSubscript:", i - 1);
            v81 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v81, "lastObject");
            v82 = (void *)objc_claimAutoreleasedReturnValue();
            LODWORD(v80) = objc_msgSend(v80, "isEqual:", v82);

            if ((_DWORD)v80)
            {
              v83 = (void *)MEMORY[0x1E0CB37E8];
              objc_msgSend(v8, "objectAtIndexedSubscript:", v79);
              v84 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v83, "numberWithInteger:", objc_msgSend(v84, "integerValue") + 1);
              v85 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v8, "setObject:atIndexedSubscript:", v85, v79);

            }
            else
            {
              objc_msgSend(v8, "objectAtIndexedSubscript:", v79);
              v84 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v8, "setObject:atIndexedSubscript:", v84, v79);
            }

            objc_msgSend(v8, "objectAtIndexedSubscript:", v79);
            v86 = (void *)objc_claimAutoreleasedReturnValue();
            v155 = CFSTR("<=");
            v171[0] = (uint64_t *)&v155;
            objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v155, (uint64_t)&std::piecewise_construct, v171)[5], "setObject:atIndexedSubscript:", v86, v79);

            v87 = (void *)MEMORY[0x1E0CB37E8];
            v88 = objc_msgSend(v78[5], "count");
            objc_msgSend(v8, "objectAtIndexedSubscript:", v79);
            v89 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v87, "numberWithUnsignedInteger:", v88 - objc_msgSend(v89, "integerValue"));
            v90 = (void *)objc_claimAutoreleasedReturnValue();
            v154 = CFSTR(">");
            v171[0] = (uint64_t *)&v154;
            objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v154, (uint64_t)&std::piecewise_construct, v171)[5], "setObject:atIndexedSubscript:", v90, v79);

            v91 = v78[1];
            if (v91)
            {
              do
              {
                v92 = (_QWORD **)v91;
                v91 = (_QWORD *)*v91;
              }
              while (v91);
            }
            else
            {
              do
              {
                v92 = (_QWORD **)v78[2];
                v44 = *v92 == v78;
                v78 = v92;
              }
              while (!v44);
            }
            ++v79;
            v78 = v92;
          }
          while (v92 != &v166);
        }
      }
    }
    else
    {
      -[NSArray objectAtIndexedSubscript:](v5, "objectAtIndexedSubscript:", 0);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v45, "firstObject");
      v143 = (void *)objc_claimAutoreleasedReturnValue();

      -[NSArray objectAtIndexedSubscript:](v5, "objectAtIndexedSubscript:", 1);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v46, "firstObject");
      v47 = (void *)objc_claimAutoreleasedReturnValue();

      v142 = v47;
      objc_msgSend(v47, "floatValue");
      v49 = v48;
      objc_msgSend(v143, "floatValue");
      v51 = v50;
      v52 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(v143, "floatValue");
      *(float *)&v54 = v53 + (float)((float)(v49 - v51) * -0.5);
      objc_msgSend(v52, "numberWithFloat:", v54);
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      v56 = v160;
      v160 = v55;

      v57 = v165;
      if (v165 != &v166)
      {
        v58 = 0;
        do
        {
          objc_msgSend(v8, "setObject:atIndexedSubscript:", &unk_1E83CC148, v58);
          objc_msgSend(v8, "objectAtIndexedSubscript:", v58);
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          v159 = CFSTR("<=");
          v171[0] = (uint64_t *)&v159;
          objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v159, (uint64_t)&std::piecewise_construct, v171)[5], "setObject:atIndexedSubscript:", v59, v58);

          v60 = (void *)MEMORY[0x1E0CB37E8];
          v61 = objc_msgSend(v57[5], "count");
          objc_msgSend(v8, "objectAtIndexedSubscript:", v58);
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v60, "numberWithUnsignedInteger:", v61 - objc_msgSend(v62, "integerValue"));
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          v158 = CFSTR(">");
          v171[0] = (uint64_t *)&v158;
          objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v158, (uint64_t)&std::piecewise_construct, v171)[5], "setObject:atIndexedSubscript:", v63, v58);

          v64 = v57[1];
          if (v64)
          {
            do
            {
              v65 = (_QWORD **)v64;
              v64 = (_QWORD *)*v64;
            }
            while (v64);
          }
          else
          {
            do
            {
              v65 = (_QWORD **)v57[2];
              v44 = *v65 == v57;
              v57 = v65;
            }
            while (!v44);
          }
          ++v58;
          v57 = v65;
        }
        while (v65 != &v166);
      }
    }

    if (!i)
    {
      v94 = 1.0;
      if (v167)
      {
        v104 = 0;
        v105 = 0.0;
        do
        {
          v153 = CFSTR(">");
          v171[0] = (uint64_t *)&v153;
          objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v153, (uint64_t)&std::piecewise_construct, v171)[5], "objectAtIndexedSubscript:", v104);
          v106 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v106, "floatValue");
          v105 = v105 + v107;

          ++v104;
        }
        while (v167 > v104);
        if (v167)
        {
          v108 = 0;
          v94 = 1.0;
          do
          {
            v152 = CFSTR(">");
            v171[0] = (uint64_t *)&v152;
            objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v152, (uint64_t)&std::piecewise_construct, v171)[5], "objectAtIndexedSubscript:", v108);
            v109 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v109, "floatValue");
            v94 = v94 - (float)((float)(v110 / v105) * (float)(v110 / v105));

            ++v108;
          }
          while (v167 > v108);
        }
      }
      goto LABEL_45;
    }
    if (-[NSArray count](v5, "count") == i)
    {
      v94 = 1.0;
      if (v167)
      {
        v95 = 0;
        v96 = 0.0;
        do
        {
          v151 = CFSTR("<=");
          v171[0] = (uint64_t *)&v151;
          objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v151, (uint64_t)&std::piecewise_construct, v171)[5], "objectAtIndexedSubscript:", v95);
          v97 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v97, "floatValue");
          v96 = v96 + v98;

          ++v95;
        }
        while (v167 > v95);
        if (v167)
        {
          v99 = 0;
          v94 = 1.0;
          do
          {
            v150 = CFSTR("<=");
            v171[0] = (uint64_t *)&v150;
            objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v150, (uint64_t)&std::piecewise_construct, v171)[5], "objectAtIndexedSubscript:", v99);
            v100 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v100, "floatValue");
            v94 = v94 - (float)((float)(v101 / v96) * (float)(v101 / v96));

            ++v99;
          }
          while (v167 > v99);
        }
      }
LABEL_45:
      *(float *)&v93 = v94;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v93);
      v102 = objc_claimAutoreleasedReturnValue();
      v171[0] = (uint64_t *)&v160;
      v103 = std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<objc_object * {__strong},std::piecewise_construct_t const&,std::tuple<objc_object * const {__strong}&>,std::tuple<>>(&v168, (unint64_t *)&v160, (uint64_t)&std::piecewise_construct, (id **)v171);
      goto LABEL_63;
    }
    v111 = 1.0;
    if (v167)
    {
      v112 = 0;
      v113 = 0.0;
      v114 = 0.0;
      do
      {
        v149 = CFSTR("<=");
        v171[0] = (uint64_t *)&v149;
        objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v149, (uint64_t)&std::piecewise_construct, v171)[5], "objectAtIndexedSubscript:", v112);
        v115 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v115, "floatValue");
        v117 = v116;

        v148 = CFSTR(">");
        v171[0] = (uint64_t *)&v148;
        objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v148, (uint64_t)&std::piecewise_construct, v171)[5], "objectAtIndexedSubscript:", v112);
        v118 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v118, "floatValue");
        v114 = v114 + v117;
        v113 = v113 + v119;

        ++v112;
      }
      while (v167 > v112);
      if (v167)
      {
        v120 = 0;
        v121 = 1.0;
        v111 = 1.0;
        do
        {
          v147 = CFSTR("<=");
          v171[0] = (uint64_t *)&v147;
          objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v147, (uint64_t)&std::piecewise_construct, v171)[5], "objectAtIndexedSubscript:", v120);
          v122 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v122, "floatValue");
          v124 = v123;

          v146 = CFSTR(">");
          v171[0] = (uint64_t *)&v146;
          objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v146, (uint64_t)&std::piecewise_construct, v171)[5], "objectAtIndexedSubscript:", v120);
          v125 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v125, "floatValue");
          v111 = v111 - (float)((float)(v124 / v114) * (float)(v124 / v114));
          v121 = v121 - (float)((float)(v126 / v113) * (float)(v126 / v113));

          ++v120;
        }
        while (v167 > v120);
        goto LABEL_62;
      }
    }
    else
    {
      v113 = 0.0;
      v114 = 0.0;
    }
    v121 = 1.0;
LABEL_62:
    v127 = -[NSArray count](v5, "count");
    *(float *)&v128 = (float)(v121 * (float)(v113 / (float)v127)) + (float)((float)(v114 / (float)v127) * v111);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v128);
    v102 = objc_claimAutoreleasedReturnValue();
    v171[0] = (uint64_t *)&v160;
    v103 = std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<objc_object * {__strong},std::piecewise_construct_t const&,std::tuple<objc_object * const {__strong}&>,std::tuple<>>(&v168, (unint64_t *)&v160, (uint64_t)&std::piecewise_construct, (id **)v171);
LABEL_63:
    v129 = (void *)v103[5];
    v103[5] = v102;

  }
  *v141 = &unk_1E83CC160;
  v141[1] = &unk_1E83CC160;
  v130 = v168;
  if (v168 != v140)
  {
    v131 = &unk_1E83CC160;
    do
    {
      objc_msgSend((id)v130[5], "floatValue");
      v133 = v132;
      objc_msgSend(v131, "floatValue");
      if (v133 < v134)
      {
        v135 = (id)v130[4];
        v136 = (id)v130[5];
        v137 = *v141;
        *v141 = v135;

        v141[1] = v136;
        v131 = v136;
      }
      v138 = (uint64_t *)v130[1];
      if (v138)
      {
        do
        {
          v139 = v138;
          v138 = (uint64_t *)*v138;
        }
        while (v138);
      }
      else
      {
        do
        {
          v139 = (uint64_t *)v130[2];
          v44 = *v139 == (_QWORD)v130;
          v130 = v139;
        }
        while (!v44);
      }
      v130 = v139;
    }
    while (v139 != v140);
  }
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v163, v164[0]);

  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v165, v166);
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v168, v169[0]);

}

void sub_1C9B2161C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,char a32,_QWORD *a33,uint64_t a34,char a35,_QWORD *a36)
{
  void *v36;
  uint64_t v37;

  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&a32, a33);
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&a35, a36);
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(v37 - 216, *(_QWORD **)(v37 - 208));

  _Unwind_Resume(a1);
}

void ATXGamePlayKitCDecisionTree::splitOnValueOfAttribute(ATXGamePlayKitCDecisionTree *this@<X0>, NSArray *a2@<X1>, NSNumber *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  NSArray *v8;
  NSNumber *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  id v13;
  void *v14;
  void *v15;
  float v16;
  float v17;
  void *v18;
  float v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t *v26;
  void *v27;
  void *v28;
  void *v29;
  NSNumber *v30;
  id v31;
  id v32;
  id v33;
  id *v34;
  _QWORD v35[2];
  _QWORD v36[2];
  _QWORD v37[2];
  _QWORD v38[4];

  v38[2] = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = a3;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)a5 = a5 + 8;
  v37[0] = CFSTR("predicate");
  v30 = v9;
  objc_msgSend(MEMORY[0x1E0CB3880], "predicateWithFormat:", CFSTR("SELF <= %@"), v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v37[1] = CFSTR("value");
  v38[0] = v10;
  v38[1] = v9;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v38, v37, 2);
  v28 = (void *)objc_claimAutoreleasedReturnValue();

  v35[0] = CFSTR("predicate");
  objc_msgSend(MEMORY[0x1E0CB3880], "predicateWithFormat:", CFSTR("SELF > %@"), v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v35[1] = CFSTR("value");
  v36[0] = v11;
  v36[1] = v9;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v36, v35, 2);
  v29 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = 0;
  v13 = 0;
  while (-[NSArray count](v8, "count") > v12)
  {
    -[NSArray objectAtIndexedSubscript:](v8, "objectAtIndexedSubscript:", v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "objectAtIndexedSubscript:", a4);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v15, "floatValue");
    v17 = v16;
    -[NSNumber floatValue](v30, "floatValue");
    v18 = v28;
    if (v17 > v19)
      v18 = v29;
    v20 = v18;

    v13 = v20;
    v33 = v13;
    v34 = &v33;
    LOBYTE(v20) = std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>((uint64_t **)a5, (unint64_t *)&v33, (uint64_t)&std::piecewise_construct, (uint64_t **)&v34)[5] == 0;

    if ((v20 & 1) != 0)
    {
      v24 = objc_alloc(MEMORY[0x1E0C99DE8]);
      -[NSArray objectAtIndexedSubscript:](v8, "objectAtIndexedSubscript:", v12);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_msgSend(v24, "initWithObjects:", v23, 0);
      v31 = v13;
      v34 = &v31;
      v26 = std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>((uint64_t **)a5, (unint64_t *)&v31, (uint64_t)&std::piecewise_construct, (uint64_t **)&v34);
      v27 = (void *)v26[5];
      v26[5] = v25;

    }
    else
    {
      v32 = v13;
      v34 = &v32;
      v21 = (void *)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>((uint64_t **)a5, (unint64_t *)&v32, (uint64_t)&std::piecewise_construct, (uint64_t **)&v34)[5];
      -[NSArray objectAtIndexedSubscript:](v8, "objectAtIndexedSubscript:", v12);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "addObject:", v22);

      v23 = v32;
    }

    ++v12;
  }

}

void sub_1C9B21BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  uint64_t v15;

  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(v15, *(_QWORD **)(v15 + 8));
  _Unwind_Resume(a1);
}

id *std::pair<NSNumber * {__strong},NSNumber * {__strong}>::~pair(id *a1)
{

  return a1;
}

void ATXGamePlayKitCDecisionTree::binarySplitByAttributeValue(ATXGamePlayKitCDecisionTree *this@<X0>, NSArray *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  NSArray *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t *v11;
  id v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD *v15;
  _QWORD **v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD **v23;
  NSArray *v24;
  id v25;
  uint64_t *v26;
  _QWORD *v27[2];
  _QWORD **v28;
  _QWORD *v29[2];
  id *v30;
  _QWORD v31[2];
  _QWORD v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  v7 = a2;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v24 = v7;
  ATXGamePlayKitCDecisionTree::multiwaySplitByAttributeValue(this, v7, a3, (uint64_t)&v28);
  v8 = v28;
  if (v28 != v29)
  {
    do
    {
      v9 = v8 + 4;
      v27[0] = 0;
      v27[1] = 0;
      v26 = (uint64_t *)v27;
      v10 = (void *)v8[5];
      v30 = (id *)(v8 + 4);
      v11 = std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<objc_object * {__strong},std::piecewise_construct_t const&,std::tuple<objc_object * const {__strong}&>,std::tuple<>>(&v26, v8 + 4, (uint64_t)&std::piecewise_construct, &v30);
      objc_storeStrong((id *)v11 + 5, v10);
      v12 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v13 = v28;
      if (v28 != v29)
      {
        do
        {
          v14 = v13[4] == v8[4] && v13[5] == v8[5];
          if (!v14)
            objc_msgSend(v12, "addObjectsFromArray:");
          v15 = (_QWORD *)v13[1];
          if (v15)
          {
            do
            {
              v16 = (_QWORD **)v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              v16 = (_QWORD **)v13[2];
              v14 = *v16 == v13;
              v13 = v16;
            }
            while (!v14);
          }
          v13 = v16;
        }
        while (v16 != v29);
      }
      objc_msgSend(MEMORY[0x1E0CB3880], "predicateWithFormat:", CFSTR("SELF != %@"), *v9, v24);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v31[0] = CFSTR("predicate");
      v31[1] = CFSTR("value");
      v18 = *v9;
      v32[0] = v17;
      v32[1] = v18;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v32, v31, 2);
      v25 = (id)objc_claimAutoreleasedReturnValue();
      v30 = &v25;
      v19 = std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v26, (unint64_t *)&v25, (uint64_t)&std::piecewise_construct, (uint64_t **)&v30);
      objc_storeStrong((id *)v19 + 5, v12);

      v20 = a4[1];
      if (v20 >= a4[2])
      {
        v21 = std::vector<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::__push_back_slow_path<std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>> const&>(a4, (uint64_t)&v26);
      }
      else
      {
        std::map<objc_object * {__strong},NSMutableArray * {__strong}>::map[abi:ne180100]((uint64_t *)a4[1], (uint64_t)&v26);
        v21 = v20 + 24;
        a4[1] = v20 + 24;
      }
      a4[1] = v21;

      std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v26, v27[0]);
      v22 = (_QWORD *)v8[1];
      if (v22)
      {
        do
        {
          v23 = (_QWORD **)v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD **)v8[2];
          v14 = *v23 == v8;
          v8 = v23;
        }
        while (!v14);
      }
      v8 = v23;
    }
    while (v23 != v29);
  }
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v28, v29[0]);

}

void sub_1C9B21F3C(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::vector<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

double ATXGamePlayKitCDecisionTree::giniSplit(ATXGamePlayKitCDecisionTree *a1, _QWORD *a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  double v6;
  double v7;
  unint64_t v8;
  double v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;

  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
    return 0.0;
  v6 = (double)a3;
  v7 = 0.0;
  do
  {
    v8 = objc_msgSend((id)v4[5], "count");
    v9 = ATXGamePlayKitCDecisionTree::giniImpurity(a1, (NSArray *)v4[5]);
    v10 = (_QWORD *)v4[1];
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = (_QWORD *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (_QWORD *)v4[2];
        v12 = *v11 == (_QWORD)v4;
        v4 = v11;
      }
      while (!v12);
    }
    v7 = v7 + (double)v8 / v6 * v9;
    v4 = v11;
  }
  while (v11 != v3);
  return v7;
}

uint64_t std::vector<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::erase(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((_QWORD *)a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::map<objc_object * {__strong},NSMutableArray * {__strong}> *,std::map<objc_object * {__strong},NSMutableArray * {__strong}>,std::map<objc_object * {__strong},NSMutableArray * {__strong}>,0>(a3, *(_QWORD **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v8 = v7 - 24;
        std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(v7 - 24, *(_QWORD **)(v7 - 16));
        v7 = v8;
      }
      while (v8 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

void ATXGamePlayKitCDecisionTree::splitByAttribute(ATXGamePlayKitCDecisionTree *this@<X0>, NSArray *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  NSArray *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14;
  id v15;
  id *v16;

  v6 = a2;
  v7 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = a4 + 8;
  while (-[NSArray count](v6, "count") > v7)
  {
    -[NSArray objectAtIndexedSubscript:](v6, "objectAtIndexedSubscript:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "objectAtIndexedSubscript:", a3);
    v15 = (id)objc_claimAutoreleasedReturnValue();

    v16 = &v15;
    if (std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<objc_object * {__strong},std::piecewise_construct_t const&,std::tuple<objc_object * const {__strong}&>,std::tuple<>>((uint64_t **)a4, (unint64_t *)&v15, (uint64_t)&std::piecewise_construct, &v16)[5])
    {
      v16 = &v15;
      v9 = (void *)std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<objc_object * {__strong},std::piecewise_construct_t const&,std::tuple<objc_object * const {__strong}&>,std::tuple<>>((uint64_t **)a4, (unint64_t *)&v15, (uint64_t)&std::piecewise_construct, &v16)[5];
      -[NSArray objectAtIndexedSubscript:](v6, "objectAtIndexedSubscript:", v7);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "addObject:", v10);
    }
    else
    {
      v11 = objc_alloc(MEMORY[0x1E0C99DE8]);
      -[NSArray objectAtIndexedSubscript:](v6, "objectAtIndexedSubscript:", v7);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "initWithObjects:", v10, 0);
      v16 = &v15;
      v13 = std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<objc_object * {__strong},std::piecewise_construct_t const&,std::tuple<objc_object * const {__strong}&>,std::tuple<>>((uint64_t **)a4, (unint64_t *)&v15, (uint64_t)&std::piecewise_construct, &v16);
      v14 = (void *)v13[5];
      v13[5] = v12;

    }
    ++v7;
  }

}

void sub_1C9B22270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  uint64_t v11;
  void *v12;

  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(v11, *(_QWORD **)(v11 + 8));
  _Unwind_Resume(a1);
}

void ATXGamePlayKitCDecisionTree::splitOnIndex(uint64_t a1, double a2, uint64_t a3, void *a4, _QWORD *a5, uint64_t **a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  id v16;
  char *v17;
  unint64_t *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t *v23;
  id v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  BOOL v46;
  id v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  _QWORD *v54;
  std::__shared_weak_count *v55;

  v49 = a4;
  v15 = (_QWORD *)*a5;
  v14 = a5 + 1;
  v13 = v15;
  if (v15 != v14)
  {
    do
    {
      v16 = (id)v13[4];
      v17 = (char *)operator new(0x78uLL);
      *((_QWORD *)v17 + 1) = 0;
      v18 = (unint64_t *)(v17 + 8);
      *((_QWORD *)v17 + 2) = 0;
      *(_QWORD *)v17 = &off_1E82DE580;
      *(_OWORD *)(v17 + 24) = 0u;
      *(_OWORD *)(v17 + 40) = 0u;
      *((_QWORD *)v17 + 7) = 0;
      *((_OWORD *)v17 + 5) = 0u;
      *((_OWORD *)v17 + 6) = 0u;
      *((_QWORD *)v17 + 14) = 0;
      *((_OWORD *)v17 + 4) = xmmword_1C9E7EE50;
      v54 = v17 + 24;
      v55 = (std::__shared_weak_count *)v17;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0
        && (objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("predicate")),
            v19 = (void *)objc_claimAutoreleasedReturnValue(),
            v19,
            v19))
      {
        objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("value"));
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = (void *)*((_QWORD *)v17 + 11);
        *((_QWORD *)v17 + 11) = v20;

        objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("predicate"));
        v22 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v22 = v16;
        v16 = (id)*((_QWORD *)v17 + 11);
        *((_QWORD *)v17 + 11) = v22;
      }

      v23 = *a6;
      v24 = v22;
      *(_QWORD *)&v52 = v24;
      *((_QWORD *)&v52 + 1) = v17 + 24;
      v53 = (std::__shared_weak_count *)v17;
      do
        v25 = __ldxr(v18);
      while (__stxr(v25 + 1, v18));
      std::vector<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::push_back[abi:ne180100](v23, &v52);
      v26 = v53;
      if (v53)
      {
        p_shared_owners = (unint64_t *)&v53->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }

      v29 = v54;
      v31 = *a6;
      v30 = a6[1];
      if (v30)
      {
        v32 = (unint64_t *)(v30 + 2);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      v34 = (std::__shared_weak_count *)v29[4];
      v29[3] = v31;
      v29[4] = v30;
      if (v34)
        std::__shared_weak_count::__release_weak(v34);
      v29[5] = (*a6)[5] + 1;
      v35 = v13[5];
      v50 = v29;
      v51 = v55;
      if (v55)
      {
        v36 = (unint64_t *)&v55->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      ATXGamePlayKitCDecisionTree::cartTreeGrowth(a1, v35, v49, &v50, a8, a9, a2);
      v38 = v51;
      if (v51)
      {
        v39 = (unint64_t *)&v51->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = v55;
      if (v55)
      {
        v42 = (unint64_t *)&v55->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }

      v44 = (_QWORD *)v13[1];
      if (v44)
      {
        do
        {
          v45 = v44;
          v44 = (_QWORD *)*v44;
        }
        while (v44);
      }
      else
      {
        do
        {
          v45 = (_QWORD *)v13[2];
          v46 = *v45 == (_QWORD)v13;
          v13 = v45;
        }
        while (!v46);
      }
      v13 = v45;
    }
    while (v45 != v14);
  }

}

void sub_1C9B225C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, ...)
{
  void *v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  std::shared_ptr<ATXGamePlayKitCDecisionNode>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ATXGamePlayKitCDecisionNode>::~shared_ptr[abi:ne180100]((uint64_t)va1);

  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<objc_object * {__strong},std::piecewise_construct_t const&,std::tuple<objc_object * const {__strong}&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, id **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = (uint64_t)**a4;
    v11[5] = 0;
    std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

id ATXGamePlayKitCDecisionTree::sortByAttributeWithAction(uint64_t a1, _QWORD *a2)
{
  id v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  void *v15;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v6 = (_QWORD *)*a2;
  v4 = a2 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    do
    {
      for (i = 0; objc_msgSend((id)v5[5], "count") > i; ++i)
      {
        v8 = (void *)v5[5];
        v17[0] = v5[4];
        objc_msgSend(v8, "objectAtIndexedSubscript:", i);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "lastObject");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v17[1] = v10;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v17, 2);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v3, "addObject:", v11);
      }
      v12 = (_QWORD *)v5[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v5[2];
          v14 = *v13 == (_QWORD)v5;
          v5 = v13;
        }
        while (!v14);
      }
      v5 = v13;
    }
    while (v13 != v4);
  }
  objc_msgSend(v3, "sortedArrayUsingComparator:", &__block_literal_global_243);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

void sub_1C9B2282C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN27ATXGamePlayKitCDecisionTree25sortByAttributeWithActionENSt3__13mapIU8__strongP11objc_objectU8__strongP14NSMutableArrayNS0_4lessIS4_EENS0_9allocatorINS0_4pairIU8__strongKS3_S7_EEEEEE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  float v7;
  float v8;
  void *v9;
  float v10;
  float v11;
  uint64_t v12;
  void *v13;
  float v14;
  float v15;
  void *v16;
  float v17;
  float v18;

  v4 = a2;
  v5 = a3;
  objc_msgSend(v4, "firstObject");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "floatValue");
  v8 = v7;
  objc_msgSend(v5, "firstObject");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "floatValue");
  v11 = v10;

  if (v8 <= v11)
  {
    objc_msgSend(v4, "firstObject");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "floatValue");
    v15 = v14;
    objc_msgSend(v5, "firstObject");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "floatValue");
    v18 = v17;

    if (v15 >= v18)
      v12 = 0;
    else
      v12 = -1;
  }
  else
  {
    v12 = 1;
  }

  return v12;
}

void sub_1C9B22940(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v12 = **a4;
    **a4 = 0;
    v11[4] = v12;
    v11[5] = 0;
    std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

uint64_t *std::map<objc_object * {__strong},NSMutableArray * {__strong}>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<objc_object * {__strong},NSMutableArray * {__strong}>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__tree_node<std::__value_type,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1C9B22AC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<objc_object * {__strong},NSMutableArray * {__strong}>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__tree_node<std::__value_type,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_hint_unique_key_args<objc_object * {__strong},std::pair<objc_object * const {__strong},NSMutableArray * {__strong}> const&>(v5, v6, v4 + 4, (id *)v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_hint_unique_key_args<objc_object * {__strong},std::pair<objc_object * const {__strong},NSMutableArray * {__strong}> const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, id *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__find_equal<objc_object * {__strong}>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__construct_node<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::__insert_node_at(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__find_equal<objc_object * {__strong}>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

id std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__construct_node<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}> const&>@<X0>(uint64_t a1@<X0>, id *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  id result;

  v5 = a1 + 8;
  v6 = operator new(0x30uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  v6[4] = *a2;
  result = a2[1];
  v6[5] = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__move_assign(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

uint64_t **std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__tree_node<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,void *> *,long>>(uint64_t **result, id *a2, id *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  id *v9;
  id *v10;
  BOOL v11;
  id *v12;
  id *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  id *v17[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v17[0] = (id *)(v8 + 4);
          v17[1] = (id *)(v8 + 5);
          std::pair<objc_object * {__strong}&,NSMutableArray * {__strong}&>::operator=[abi:ne180100]<objc_object * const {__strong},NSMutableArray * {__strong},(void *)0>(v17, v9 + 4);
          std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__node_insert_multi(v5, v16);
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (id *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (id *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (id *)v9[2];
              v11 = *a2 == v9;
              v9 = a2;
            }
            while (!v11);
          }
          v8 = v16;
          if (v16)
            v11 = a2 == a3;
          else
            v11 = 1;
          v9 = a2;
        }
        while (!v11);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_multi<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}> const&>((uint64_t)v5, a2 + 4);
      v12 = (id *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (id *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (id *)a2[2];
          v11 = *v13 == a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1C9B22FA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__node_insert_multi(uint64_t **a1, uint64_t *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (a2[4] >= (unint64_t)v4[4])
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::__insert_node_at(a1, (uint64_t)v3, v5, a2);
  return a2;
}

id **std::pair<objc_object * {__strong}&,NSMutableArray * {__strong}&>::operator=[abi:ne180100]<objc_object * const {__strong},NSMutableArray * {__strong},(void *)0>(id **a1, id *a2)
{
  objc_storeStrong(*a1, *a2);
  objc_storeStrong(a1[1], a2[1]);
  return a1;
}

_QWORD *std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_multi<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}> const&>(uint64_t a1, id *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v7;

  std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__construct_node<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}> const&>(a1, a2, (uint64_t)&v7);
  v3 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (v7[4] >= (unint64_t)v4[4])
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v3, v5, v7);
  return v7;
}

uint64_t *std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__remove_node_pointer(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

uint64_t *std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t std::vector<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::__push_back_slow_path<std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (uint64_t *)&v10[24 * v4];
  v16 = &v10[24 * v9];
  std::map<objc_object * {__strong},NSMutableArray * {__strong}>::map[abi:ne180100](v14, a2);
  v15 = v14 + 3;
  std::vector<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::~__split_buffer(&v13);
  return v11;
}

void sub_1C9B236B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>,std::reverse_iterator<std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>>*>,std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>>*,std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>>*>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>,std::reverse_iterator<std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>>*>,std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>>*,std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v8 = a3;
    do
    {
      v9 = *(_QWORD *)(v8 - 24);
      v8 -= 24;
      *(_QWORD *)(v7 - 24) = v9;
      v10 = (_QWORD *)(a3 - 16);
      v11 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 16) = v11;
      v12 = v7 - 16;
      v13 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 8) = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        *(_QWORD *)(a3 - 24) = v10;
        *v10 = 0;
        *(_QWORD *)(a3 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 24) = v12;
      }
      v7 = *((_QWORD *)&v19 + 1) - 24;
      *((_QWORD *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>,std::reverse_iterator<std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>,std::reverse_iterator<std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>,std::reverse_iterator<std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>,std::reverse_iterator<std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(v1, *(_QWORD **)(v1 + 8));
    v1 += 24;
  }
}

void **std::__split_buffer<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(i - 24, *(_QWORD **)(i - 16));
  }
}

_QWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::map<objc_object * {__strong},NSMutableArray * {__strong}> *,std::map<objc_object * {__strong},NSMutableArray * {__strong}>,std::map<objc_object * {__strong},NSMutableArray * {__strong}>,0>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__move_assign(a3, v4);
      v4 += 3;
      a3 += 24;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void std::vector<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t ATXGamePlayKitCDecisionTree::isPredicateValid(ATXGamePlayKitCDecisionTree *this, NSPredicate *a2)
{
  NSPredicate *v2;
  NSPredicate *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v3 = v2;
    if (-[NSPredicate options](v3, "options"))
      goto LABEL_9;
    -[NSPredicate leftExpression](v3, "leftExpression");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "expressionType");

    if (v5 != 1)
      goto LABEL_9;
    -[NSPredicate rightExpression](v3, "rightExpression");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "expressionType");

    if (!v7
      && (unint64_t)-[NSPredicate predicateOperatorType](v3, "predicateOperatorType") <= 5
      && (!-[NSPredicate customSelector](v3, "customSelector")
       || (char *)-[NSPredicate customSelector](v3, "customSelector") == sel_compare_
       || (char *)-[NSPredicate customSelector](v3, "customSelector") == sel_isEqual_))
    {
      v8 = 1;
    }
    else
    {
LABEL_9:
      v8 = 0;
    }

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_1C9B23AFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<ATXGamePlayKitCDecisionNode>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<ATXGamePlayKitCDecisionNode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82DE580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ATXGamePlayKitCDecisionNode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82DE580;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA485C0);
}

void std::__shared_ptr_emplace<ATXGamePlayKitCDecisionNode>::__on_zero_shared(uint64_t a1)
{
  ATXGamePlayKitCDecisionNode::~ATXGamePlayKitCDecisionNode((ATXGamePlayKitCDecisionNode *)(a1 + 24));
}

void ATXGamePlayKitCDecisionNode::~ATXGamePlayKitCDecisionNode(ATXGamePlayKitCDecisionNode *this)
{
  void *v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;
  ATXGamePlayKitCDecisionNode *v6;

  v2 = (void *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;

  v3 = (void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;

  v4 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;

  objc_storeWeak((id *)this + 11, 0);
  std::vector<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::erase((uint64_t)this, *(void ***)this, *((void ***)this + 1));
  objc_destroyWeak((id *)this + 11);

  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  v6 = this;
  std::vector<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
}

void **std::vector<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::erase(uint64_t a1, void **a2, void **a3)
{
  uint64_t v5;
  char v7;

  if (a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>> *,std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>> *,std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>> *>((uint64_t)&v7, a3, *(_QWORD **)(a1 + 8), a2);
    std::vector<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::__base_destruct_at_end[abi:ne180100](a1, v5);
  }
  return a2;
}

void std::vector<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 24)
  {
    std::shared_ptr<ATXGamePlayKitCDecisionNode>::~shared_ptr[abi:ne180100](i - 16);
    v5 = *(void **)(i - 24);

  }
  *(_QWORD *)(a1 + 8) = a2;
}

_QWORD *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>> *,std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>> *,std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>> *>(uint64_t a1, _QWORD *a2, _QWORD *a3, void **a4)
{
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  __int128 *v8;
  void *v9;
  uint64_t v10;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    v8 = (__int128 *)(v5 + 1);
    v7 = (void *)*v5;
    *v5 = 0;
    v5 += 3;
    v10 = (uint64_t)(a4 + 1);
    v9 = *a4;
    *a4 = v7;
    a4 += 3;

    std::shared_ptr<ATXGamePlayKitCDecisionNode>::operator=[abi:ne180100](v10, v8);
  }
  while (v5 != v6);
  return v6;
}

void std::vector<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>,std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>,std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>,std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>,std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>,std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>,std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7 - 24;
    do
    {
      v9 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *a3 = 0;
      *(_OWORD *)v8 = v9;
      *(_QWORD *)(v8 + 16) = a3[2];
      a3[1] = 0;
      a3[2] = 0;
      *((_QWORD *)&v15 + 1) = v8;
      v8 -= 24;
      v7 -= 24;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>,std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>,std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>,std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>,std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>,std::reverse_iterator<std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>>,std::reverse_iterator<std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>,std::reverse_iterator<std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>>,std::reverse_iterator<std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *i;

  for (i = *(id **)(a2 + 32); i != *(id **)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    std::shared_ptr<ATXGamePlayKitCDecisionNode>::~shared_ptr[abi:ne180100]((uint64_t)(i + 1));

    i = (id *)(*(_QWORD *)(a2 + 32) + 24);
  }
}

uint64_t std::__split_buffer<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::shared_ptr<ATXGamePlayKitCDecisionNode>::~shared_ptr[abi:ne180100](i - 16);

  }
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100I27ATXGamePlayKitCDecisionTreeNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  uint64_t result;

  v2 = (char *)operator new(0x38uLL);
  result = _ZNSt3__120__shared_ptr_emplaceI27ATXGamePlayKitCDecisionTreeNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1C9B240B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceI27ATXGamePlayKitCDecisionTreeNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E82DE5D0;
  ATXGamePlayKitCDecisionTree::ATXGamePlayKitCDecisionTree((ATXGamePlayKitCDecisionTree *)(a1 + 24));
  return a1;
}

void sub_1C9B240FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ATXGamePlayKitCDecisionTree>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82DE5D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ATXGamePlayKitCDecisionTree>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E82DE5D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA485C0);
}

uint64_t std::__shared_ptr_emplace<ATXGamePlayKitCDecisionTree>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  std::shared_ptr<ATXGamePlayKitCDecisionNode>::~shared_ptr[abi:ne180100](a1 + 40);
  return std::shared_ptr<ATXGamePlayKitCDecisionNode>::~shared_ptr[abi:ne180100](v1);
}

void ATXGamePlayKitCDecisionTree::ATXGamePlayKitCDecisionTree(ATXGamePlayKitCDecisionTree *this)
{
  _QWORD *v2;
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  *((_OWORD *)this + 1) = 0u;
  v2 = (_QWORD *)((char *)this + 16);
  *(_OWORD *)this = 0u;
  v3 = (char *)operator new(0x78uLL);
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = &off_1E82DE580;
  *(_OWORD *)(v3 + 40) = 0u;
  *((_QWORD *)v3 + 7) = 0;
  *(_OWORD *)(v3 + 24) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_QWORD *)v3 + 14) = 0;
  *((_OWORD *)v3 + 4) = xmmword_1C9E7EE50;
  *(_QWORD *)&v7 = v3 + 24;
  *((_QWORD *)&v7 + 1) = v3;
  std::shared_ptr<ATXGamePlayKitCDecisionNode>::operator=[abi:ne180100]((uint64_t)this, &v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  std::shared_ptr<ATXGamePlayKitCDecisionNode>::operator=[abi:ne180100](v2, (uint64_t *)this);
}

void sub_1C9B24250(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<ATXGamePlayKitCDecisionNode>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<ATXGamePlayKitCDecisionNode>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void linkChangedCallback(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  _QWORD *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFBoolean *Value;
  BOOL v13;
  void *v14;
  NSObject *v15;
  id v16;
  _QWORD block[4];
  id v18;
  _QWORD *v19;
  BOOL v20;

  v4 = a3;
  if (a2)
  {
    __atxlog_handle_default();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      linkChangedCallback_cold_1((uint64_t)a2, v5, v6, v7, v8, v9, v10, v11);

    Value = (const __CFBoolean *)CFDictionaryGetValue(a2, CFSTR("LINK_CHANGED_IS_LINKDOWN"));
    if (Value)
      v13 = CFBooleanGetValue(Value) != 0;
    else
      v13 = 0;
    if (CFDictionaryGetValue(a2, CFSTR("LINK_CHANGED_NETWORK")))
      v14 = (void *)objc_msgSend((id)WiFiNetworkGetSSID(), "copy");
    else
      v14 = 0;
    v15 = v4[3];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __linkChangedCallback_block_invoke;
    block[3] = &unk_1E82DCF98;
    v18 = v14;
    v19 = v4;
    v20 = v13;
    v16 = v14;
    dispatch_async(v15, block);

  }
}

void sub_1C9B24824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __linkChangedCallback_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _BYTE *v7;
  char v8;
  NSObject *v9;

  v3 = (uint64_t *)(a1 + 32);
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 32), v2);
    v4 = objc_opt_new();
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

  }
  v8 = *(_BYTE *)(a1 + 48);
  v7 = (_BYTE *)(a1 + 48);
  *(_BYTE *)(*((_QWORD *)v7 - 1) + 48) = v8 ^ 1;
  __atxlog_handle_default();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    __linkChangedCallback_block_invoke_cold_1(v3, v7, v9);

}

uint64_t __getAirplaneMode_block_invoke()
{
  void *v0;
  uint64_t result;
  _QWORD v2[2];

  v2[1] = *MEMORY[0x1E0C80C00];
  v2[0] = CFSTR("AirplaneMode");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v2, 1);
  dispatch_get_global_queue(9, 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  MGRegisterForUpdates();

  result = MGGetBoolAnswer();
  atomic_store(result, getAirplaneMode_inAirplaneMode);
  return result;
}

void __getAirplaneMode_block_invoke_2()
{
  NSObject *v0;

  atomic_store(MGGetBoolAnswer(), getAirplaneMode_inAirplaneMode);
  __atxlog_handle_default();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
    __getAirplaneMode_block_invoke_2_cold_1(v0);

}

void sub_1C9B2541C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v12 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1C9B26C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL ATXMPBCacheAgeAtEngagementTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 8;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9B27638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AWDProactiveAppPredictionSubscoresReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  uint64_t v16;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v6 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      while (1)
      {
        v10 = *v3;
        v11 = *(_QWORD *)(a2 + v10);
        if (v11 == -1 || v11 >= *(_QWORD *)(a2 + *v4))
          break;
        v12 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v11);
        *(_QWORD *)(a2 + v10) = v11 + 1;
        v9 |= (unint64_t)(v12 & 0x7F) << v7;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v7 += 7;
        if (v8++ >= 9)
        {
          v9 = 0;
          v14 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v14 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v9 = 0;
LABEL_14:
      if (v14 || (v9 & 7) == 4)
        break;
      v16 = (v9 >> 3) - 1;
      if (v16 <= 0x32E)
        __asm { BR              X9 }
      result = PBReaderSkipValueWithTag();
      if (!(_DWORD)result)
        return result;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id ATXAppBundleIdsForComplicationDescriptors(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_opt_new();
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v7), "extensionIdentity", (_QWORD)v11);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "containerBundleIdentifier");
        v9 = (void *)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v9, "length"))
          objc_msgSend(v2, "addObject:", v9);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  return v2;
}

void sub_1C9BB2D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BB2ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BB2FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BB30CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BB32F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BB3758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BB5B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void dispatch_sync_notxn_0(NSObject *a1, void *a2)
{
  id v3;
  id v4;
  _QWORD block[4];
  id v6;

  v3 = a2;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __dispatch_sync_notxn_block_invoke_0;
  block[3] = &unk_1E82DA9F8;
  v6 = v3;
  v4 = v3;
  dispatch_sync(a1, block);

}

void sub_1C9BB811C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 192), 8);
  _Block_object_dispose((const void *)(v35 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1C9BB86EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 240), 8);
  _Block_object_dispose((const void *)(v35 - 192), 8);
  _Block_object_dispose((const void *)(v35 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1C9BB8CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 240), 8);
  _Block_object_dispose((const void *)(v35 - 192), 8);
  _Block_object_dispose((const void *)(v35 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1C9BB9AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BBDC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BBE1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void __dispatch_sync_notxn_block_invoke_0(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x1CAA48B6C]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

void OUTLINED_FUNCTION_4_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_7_0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t OUTLINED_FUNCTION_9_1(uint64_t a1, uint64_t a2)
{
  return a2;
}

void OUTLINED_FUNCTION_10(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

uint64_t OUTLINED_FUNCTION_12(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

void OUTLINED_FUNCTION_14(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x20u);
}

void OUTLINED_FUNCTION_15(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

void sub_1C9BC107C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t AWDProactiveActionDataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  int *v60;
  int *v61;
  AWDProactiveAppPredictionSubscores *v62;
  uint64_t result;
  void *v64;
  BOOL v65;
  uint64_t v66;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = &OBJC_IVAR___AWDProactiveAppPredictionSubscores__slotFeedbackMinutesSinceLastExplicitRejectInLockscreen;
  v8 = &OBJC_IVAR___AWDProactiveAppPredictionSubscores__slotFeedbackMinutesSinceLastExplicitRejectInLockscreen;
  v9 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = *v3;
      v14 = *(_QWORD *)(a2 + v13);
      v15 = v14 + 1;
      if (v14 == -1 || v15 > *(_QWORD *)(a2 + *v4))
        break;
      v16 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v14);
      *(_QWORD *)(a2 + v13) = v15;
      v12 |= (unint64_t)(v16 & 0x7F) << v10;
      if ((v16 & 0x80) == 0)
        goto LABEL_12;
      v10 += 7;
      v17 = v11++ >= 9;
      if (v17)
      {
        v12 = 0;
        v18 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v18 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v12 = 0;
LABEL_14:
    if (v18 || (v12 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v12 >> 3))
    {
      case 1u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + v7[541]) |= 2u;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v4))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v24);
          *(_QWORD *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0)
            goto LABEL_68;
          v20 += 7;
          v17 = v21++ >= 9;
          if (v17)
          {
            v22 = 0;
            goto LABEL_70;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_68:
        if (*(_BYTE *)(a2 + *v5))
          v22 = 0;
LABEL_70:
        *(_QWORD *)(a1 + v8[542]) = v22;
        goto LABEL_90;
      case 2u:
        PBReaderReadString();
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = 24;
        goto LABEL_66;
      case 3u:
        v29 = 0;
        v30 = 0;
        v31 = 0;
        *(_BYTE *)(a1 + v7[541]) |= 4u;
        while (2)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          v34 = v33 + 1;
          if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v33);
            *(_QWORD *)(a2 + v32) = v34;
            v31 |= (unint64_t)(v35 & 0x7F) << v29;
            if (v35 < 0)
            {
              v29 += 7;
              v17 = v30++ >= 9;
              if (v17)
              {
                LODWORD(v31) = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v31) = 0;
LABEL_74:
        *(_DWORD *)(a1 + 32) = v31;
        goto LABEL_90;
      case 4u:
        v36 = 0;
        v37 = 0;
        v38 = 0;
        *(_BYTE *)(a1 + v7[541]) |= 8u;
        while (2)
        {
          v39 = *v3;
          v40 = *(_QWORD *)(a2 + v39);
          v41 = v40 + 1;
          if (v40 == -1 || v41 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v40);
            *(_QWORD *)(a2 + v39) = v41;
            v38 |= (unint64_t)(v42 & 0x7F) << v36;
            if (v42 < 0)
            {
              v36 += 7;
              v17 = v37++ >= 9;
              if (v17)
              {
                v38 = 0;
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v38 = 0;
LABEL_78:
        v65 = v38 != 0;
        v66 = 72;
        goto LABEL_87;
      case 5u:
        v43 = 0;
        v44 = 0;
        v45 = 0;
        *(_BYTE *)(a1 + v7[541]) |= 0x10u;
        while (2)
        {
          v46 = *v3;
          v47 = *(_QWORD *)(a2 + v46);
          v48 = v47 + 1;
          if (v47 == -1 || v48 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v47);
            *(_QWORD *)(a2 + v46) = v48;
            v45 |= (unint64_t)(v49 & 0x7F) << v43;
            if (v49 < 0)
            {
              v43 += 7;
              v17 = v44++ >= 9;
              if (v17)
              {
                v45 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v45 = 0;
LABEL_82:
        v65 = v45 != 0;
        v66 = 73;
        goto LABEL_87;
      case 6u:
        *(_BYTE *)(a1 + v7[541]) |= 1u;
        v50 = *v3;
        v51 = *(_QWORD *)(a2 + v50);
        if (v51 <= 0xFFFFFFFFFFFFFFF7 && v51 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v52 = *(_QWORD *)(*(_QWORD *)(a2 + *v9) + v51);
          *(_QWORD *)(a2 + v50) = v51 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v52 = 0;
        }
        *(_QWORD *)(a1 + 8) = v52;
        goto LABEL_90;
      case 7u:
        v53 = 0;
        v54 = 0;
        v55 = 0;
        *(_BYTE *)(a1 + v7[541]) |= 0x20u;
        while (2)
        {
          v56 = *v3;
          v57 = *(_QWORD *)(a2 + v56);
          v58 = v57 + 1;
          if (v57 == -1 || v58 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v57);
            *(_QWORD *)(a2 + v56) = v58;
            v55 |= (unint64_t)(v59 & 0x7F) << v53;
            if (v59 < 0)
            {
              v53 += 7;
              v17 = v54++ >= 9;
              if (v17)
              {
                v55 = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v55 = 0;
LABEL_86:
        v65 = v55 != 0;
        v66 = 74;
LABEL_87:
        *(_BYTE *)(a1 + v66) = v65;
        goto LABEL_90;
      case 8u:
        v60 = v7;
        v61 = v8;
        v62 = objc_alloc_init(AWDProactiveAppPredictionSubscores);
        objc_storeStrong((id *)(a1 + 64), v62);
        if (PBReaderPlaceMark()
          && (AWDProactiveAppPredictionSubscoresReadFrom((uint64_t)v62, a2) & 1) != 0)
        {
          PBReaderRecallMark();

          v8 = v61;
          v7 = v60;
LABEL_90:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 0xAu:
        PBReaderReadString();
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = 48;
        goto LABEL_66;
      case 0xBu:
        PBReaderReadString();
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = 40;
        goto LABEL_66;
      case 0xCu:
        PBReaderReadString();
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = 56;
LABEL_66:
        v64 = *(void **)(a1 + v28);
        *(_QWORD *)(a1 + v28) = v27;

        goto LABEL_90;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_90;
    }
  }
}

void sub_1C9BC67AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BC6BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BC7988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1C9BC7EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BC83F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1C9BC8798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BC8B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BC9274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BC948C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BC96E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BC9A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BC9C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BC9E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BCA054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BCA524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BCACE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 176), 8);
  _Block_object_dispose((const void *)(v10 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_1C9BCB278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BCB5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_5_2(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2112;
  *(_QWORD *)(a3 + 14) = a2;
  return result;
}

void OUTLINED_FUNCTION_6_3(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_fault_impl(a1, a4, OS_LOG_TYPE_FAULT, a2, a3, 0x16u);
}

uint64_t OUTLINED_FUNCTION_12_0()
{
  uint64_t v0;

  return v0;
}

void ATXUpdatePredictionsImmediately()
{
  ATXUpdatePredictions(22, 0.0);
}

void ATXUpdatePredictionsImmediatelyIfPossible(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3[16];

  if (+[ATXUtils shouldSkipExpensiveTask](ATXUtils, "shouldSkipExpensiveTask"))
  {
    __atxlog_handle_default();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_1C9A3B000, v2, OS_LOG_TYPE_DEFAULT, "ATXUpdatePredictions: Skipping prediction update since system is busy.", v3, 2u);
    }

  }
  else
  {
    ATXUpdatePredictions(a1, 0.0);
  }
}

void ATXUpdatePredictionsDefaultInterval(uint64_t a1)
{
  NSObject *v2;
  double v3;
  id v4;
  uint8_t buf[16];

  if (+[ATXUtils shouldSkipExpensiveTask](ATXUtils, "shouldSkipExpensiveTask"))
  {
    __atxlog_handle_default();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C9A3B000, v2, OS_LOG_TYPE_DEFAULT, "ATXUpdatePredictions: Skipping prediction update since system is busy.", buf, 2u);
    }

  }
  else
  {
    +[_ATXGlobals sharedInstance](_ATXGlobals, "sharedInstance");
    v4 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "defaultPredictionRefreshRate");
    ATXUpdatePredictions(a1, v3);

  }
}

uint64_t ATXUpdatePredictionsOverrideHandler(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = a1;
  pthread_mutex_lock(&lock_0);
  v2 = objc_msgSend(v1, "copy");

  v3 = (void *)overrideBlock;
  overrideBlock = v2;

  return pthread_mutex_unlock(&lock_0);
}

uint64_t ATXUpdatePredictionsClearOverrride()
{
  return ATXUpdatePredictionsOverrideHandler(0);
}

uint64_t __predictionUpdateDisabledByInternalSettings_block_invoke()
{
  uint64_t result;
  Boolean keyExistsAndHasValidFormat;

  result = objc_msgSend(MEMORY[0x1E0D81588], "isInternalBuild");
  if ((_DWORD)result)
  {
    keyExistsAndHasValidFormat = 0;
    result = CFPreferencesGetAppBooleanValue(CFSTR("ATXDisableCacheUpdates"), (CFStringRef)*MEMORY[0x1E0CF9510], &keyExistsAndHasValidFormat);
    predictionUpdateDisabledByInternalSettings_disableCacheUpdateSetting = (_DWORD)result != 0;
  }
  return result;
}

void sub_1C9BCE308(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1C9BCEB74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9BCEBF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9BCEC6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9BCED28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9BCF95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,void *a28,uint64_t a29,void *a30,void *a31,void *a32,void *a33,void *a34)
{
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;

  _Block_object_dispose(&STACK[0x2A8], 8);
  _Block_object_dispose(&STACK[0x2D8], 8);
  _Block_object_dispose(&STACK[0x2F8], 8);
  _Block_object_dispose(&STACK[0x318], 8);
  _Block_object_dispose(&STACK[0x338], 8);
  _Block_object_dispose(&STACK[0x358], 8);
  _Block_object_dispose(&STACK[0x378], 8);
  _Block_object_dispose(&STACK[0x398], 8);
  _Block_object_dispose(&STACK[0x3B8], 8);
  _Block_object_dispose(&STACK[0x3D8], 8);
  _Block_object_dispose(&STACK[0x3F8], 8);
  _Block_object_dispose(&STACK[0x418], 8);
  _Block_object_dispose(&STACK[0x438], 8);
  _Block_object_dispose(&STACK[0x458], 8);
  _Block_object_dispose(&STACK[0x478], 8);
  _Block_object_dispose(&STACK[0x498], 8);
  _Block_object_dispose(&STACK[0x4B8], 8);
  _Block_object_dispose(&STACK[0x4D8], 8);
  _Block_object_dispose(&STACK[0x4F8], 8);
  _Block_object_dispose(&STACK[0x518], 8);
  _Block_object_dispose(&STACK[0x538], 8);
  _Block_object_dispose(&STACK[0x558], 8);
  _Block_object_dispose(&STACK[0x578], 8);
  _Block_object_dispose(&STACK[0x598], 8);
  _Block_object_dispose(&STACK[0x5B8], 8);
  _Block_object_dispose(&STACK[0x5D8], 8);
  _Block_object_dispose(&STACK[0x5F8], 8);
  _Block_object_dispose(&STACK[0x618], 8);
  _Block_object_dispose(&STACK[0x638], 8);
  _Block_object_dispose(&STACK[0x658], 8);
  _Block_object_dispose(&STACK[0x678], 8);
  _Block_object_dispose(&STACK[0x698], 8);
  _Block_object_dispose(&STACK[0x6B8], 8);
  _Block_object_dispose(&STACK[0x6D8], 8);
  _Block_object_dispose(&STACK[0x6F8], 8);
  _Block_object_dispose(&STACK[0x718], 8);
  _Block_object_dispose(&STACK[0x738], 8);
  _Block_object_dispose(&STACK[0x758], 8);
  _Block_object_dispose(&STACK[0x778], 8);
  _Block_object_dispose(&STACK[0x798], 8);
  _Block_object_dispose(&STACK[0x7B8], 8);
  _Block_object_dispose(&STACK[0x7D8], 8);
  _Block_object_dispose(&STACK[0x7F8], 8);
  _Block_object_dispose(&STACK[0x818], 8);
  _Block_object_dispose(&STACK[0x838], 8);
  _Block_object_dispose(&STACK[0x858], 8);
  _Block_object_dispose(&STACK[0x878], 8);
  _Block_object_dispose(&STACK[0x898], 8);
  _Block_object_dispose(&STACK[0x8B8], 8);
  _Block_object_dispose((const void *)(v37 - 232), 8);
  _Block_object_dispose((const void *)(v37 - 200), 8);
  _Block_object_dispose((const void *)(v37 - 168), 8);
  _Block_object_dispose((const void *)(v37 - 136), 8);

  _Unwind_Resume(a1);
}

void sub_1C9BCFCA0()
{
  JUMPOUT(0x1C9BCFA00);
}

void sub_1C9BCFCA8()
{
  JUMPOUT(0x1C9BCFA0CLL);
}

void sub_1C9BCFCB0()
{
  JUMPOUT(0x1C9BCFA18);
}

void sub_1C9BCFCB8()
{
  JUMPOUT(0x1C9BCFA24);
}

void sub_1C9BCFCC0()
{
  JUMPOUT(0x1C9BCFA30);
}

void sub_1C9BCFCC8()
{
  JUMPOUT(0x1C9BCFA3CLL);
}

void sub_1C9BCFCD0()
{
  JUMPOUT(0x1C9BCFA48);
}

void sub_1C9BCFCD8()
{
  JUMPOUT(0x1C9BCFA54);
}

void sub_1C9BCFCE0()
{
  JUMPOUT(0x1C9BCFA60);
}

void sub_1C9BCFCE8()
{
  JUMPOUT(0x1C9BCFA6CLL);
}

void sub_1C9BCFCF0()
{
  void *v0;

  JUMPOUT(0x1C9BCFC54);
}

void sub_1C9BCFCFC()
{
  JUMPOUT(0x1C9BCFC58);
}

void sub_1C9BCFD04()
{
  JUMPOUT(0x1C9BCFC60);
}

void sub_1C9BCFD10()
{
  JUMPOUT(0x1C9BCFC68);
}

void sub_1C9BCFD30()
{
  JUMPOUT(0x1C9BCFC70);
}

void sub_1C9BCFD38()
{
  JUMPOUT(0x1C9BCFC54);
}

void sub_1C9BD242C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1C9BD2564()
{
  JUMPOUT(0x1C9BD255CLL);
}

void sub_1C9BD28C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  void *v44;
  void *v45;
  uint64_t v46;

  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose(&a44, 8);
  _Block_object_dispose((const void *)(v46 - 232), 8);
  _Block_object_dispose((const void *)(v46 - 200), 8);
  _Block_object_dispose((const void *)(v46 - 168), 8);
  _Block_object_dispose((const void *)(v46 - 136), 8);

  _Unwind_Resume(a1);
}

void sub_1C9BD29D0()
{
  JUMPOUT(0x1C9BD29A0);
}

void sub_1C9BD29D8()
{
  JUMPOUT(0x1C9BD29A4);
}

void sub_1C9BD29E0()
{
  JUMPOUT(0x1C9BD29ACLL);
}

void sub_1C9BD3C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,uint64_t a24,void *a25)
{
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1C9BD3DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1C9BD4044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1C9BD422C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1C9BD4458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1C9BD471C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1C9BD47F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9BD4AB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C9BD6778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1C9BD6968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C9BD6A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C9BD6CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1C9BD6DBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9BD6E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C9BD6F10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9BD70D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ATXAnchorModelPBModeMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  ATXAnchorModelPBLaunchHistoryMetadata *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v17;

        goto LABEL_47;
      case 2u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (v14)
              {
                v22 = 0;
                goto LABEL_42;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v22 = 0;
LABEL_42:
        *(_BYTE *)(a1 + 28) = v22 != 0;
        goto LABEL_47;
      case 3u:
        v26 = objc_alloc_init(ATXAnchorModelPBLaunchHistoryMetadata);
        objc_storeStrong((id *)(a1 + 8), v26);
        if (PBReaderPlaceMark() && ATXAnchorModelPBLaunchHistoryMetadataReadFrom((uint64_t)v26, a2))
        {
          PBReaderRecallMark();

LABEL_47:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 4u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_46;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v29) = 0;
LABEL_46:
        *(_DWORD *)(a1 + 24) = v29;
        goto LABEL_47;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_47;
    }
  }
}

BOOL ATXTimelineRelevancePBTimelineRelevanceSuggestionReadFrom(_QWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  ATXTimelineRelevancePBTimelineRelevanceAbuseControlOutcome *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        v19 = objc_alloc_init(ATXTimelineRelevancePBTimelineRelevanceAbuseControlOutcome);
        objc_msgSend(a1, "addAbuseControlOutcome:", v19);
        if (!PBReaderPlaceMark()
          || (ATXTimelineRelevancePBTimelineRelevanceAbuseControlOutcomeReadFrom((uint64_t)v19, a2) & 1) == 0)
        {
          goto LABEL_33;
        }
LABEL_27:
        PBReaderRecallMark();
        goto LABEL_28;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = (ATXTimelineRelevancePBTimelineRelevanceAbuseControlOutcome *)a1[2];
        a1[2] = v18;
LABEL_28:

        goto LABEL_30;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_30:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v19 = objc_alloc_init(ATXTimelineRelevancePBTimelineRelevanceScoreEntry);
    objc_msgSend(a1, "addTimelineRelevanceScoreEntry:", v19);
    if (!PBReaderPlaceMark()
      || (ATXTimelineRelevancePBTimelineRelevanceScoreEntryReadFrom((uint64_t)v19, a2) & 1) == 0)
    {
LABEL_33:

      return 0;
    }
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9BDADAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BE03D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t ATXPBUnifiedInferredActivityTransitionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 44) |= 4u;
          v18 = *v3;
          v19 = *(_QWORD *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
            *(_QWORD *)(a2 + v18) = v19 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v40 = 24;
          goto LABEL_54;
        case 2u:
          v22 = 0;
          v23 = 0;
          v24 = 0;
          *(_BYTE *)(a1 + 44) |= 8u;
          while (2)
          {
            v25 = *v3;
            v26 = *(_QWORD *)(a2 + v25);
            v27 = v26 + 1;
            if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
              *(_QWORD *)(a2 + v25) = v27;
              v24 |= (unint64_t)(v28 & 0x7F) << v22;
              if (v28 < 0)
              {
                v22 += 7;
                v15 = v23++ >= 9;
                if (v15)
                {
                  v24 = 0;
                  goto LABEL_45;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v24 = 0;
LABEL_45:
          *(_BYTE *)(a1 + 40) = v24 != 0;
          continue;
        case 3u:
          v29 = 0;
          v30 = 0;
          v31 = 0;
          *(_BYTE *)(a1 + 44) |= 2u;
          break;
        case 4u:
          PBReaderReadString();
          v36 = objc_claimAutoreleasedReturnValue();
          v37 = *(void **)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v36;

          continue;
        case 5u:
          *(_BYTE *)(a1 + 44) |= 1u;
          v38 = *v3;
          v39 = *(_QWORD *)(a2 + v38);
          if (v39 <= 0xFFFFFFFFFFFFFFF7 && v39 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v39);
            *(_QWORD *)(a2 + v38) = v39 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v40 = 8;
LABEL_54:
          *(_QWORD *)(a1 + v40) = v20;
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v32 = *v3;
        v33 = *(_QWORD *)(a2 + v32);
        v34 = v33 + 1;
        if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v4))
          break;
        v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
        *(_QWORD *)(a2 + v32) = v34;
        v31 |= (unint64_t)(v35 & 0x7F) << v29;
        if ((v35 & 0x80) == 0)
          goto LABEL_47;
        v29 += 7;
        v15 = v30++ >= 9;
        if (v15)
        {
          v31 = 0;
          goto LABEL_49;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_47:
      if (*(_BYTE *)(a2 + *v5))
        v31 = 0;
LABEL_49:
      *(_QWORD *)(a1 + 16) = v31;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9BE3234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9BE33D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  id *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1C9BE34E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C9BE35C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9BE36D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BE3744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C9BE3874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1C9BE392C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C9BE39F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1C9BE3A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C9BE3B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1C9BE3BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C9BE3DEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C9BE3E4C()
{
  JUMPOUT(0x1C9BE3E40);
}

void sub_1C9BE3E54()
{
  uint64_t v0;

  _Block_object_dispose((const void *)(v0 - 144), 8);

  JUMPOUT(0x1C9BE3E44);
}

void sub_1C9BE40D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C9BE4138()
{
  JUMPOUT(0x1C9BE412CLL);
}

void sub_1C9BE4140()
{
  uint64_t v0;

  _Block_object_dispose((const void *)(v0 - 144), 8);

  JUMPOUT(0x1C9BE4130);
}

void sub_1C9BE4374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BE4470(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9BE4860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1C9BE4910()
{
  uint64_t v0;

  _Block_object_dispose((const void *)(v0 - 168), 8);

  JUMPOUT(0x1C9BE4904);
}

void sub_1C9BE4A9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ATXMPBAnchorModelEngagementTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 64;
          goto LABEL_50;
        case 2u:
          *(_WORD *)(a1 + 116) |= 0x10u;
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v23 = 0;
          }
          v61 = 40;
          goto LABEL_102;
        case 3u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 72;
          goto LABEL_50;
        case 4u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_WORD *)(a1 + 116) |= 0x200u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            v29 = v28 + 1;
            if (v28 == -1 || v29 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v29;
              v26 |= (unint64_t)(v30 & 0x7F) << v24;
              if (v30 < 0)
              {
                v24 += 7;
                v15 = v25++ >= 9;
                if (v15)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_76;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_76:
          v60 = 112;
          goto LABEL_89;
        case 5u:
          v31 = 0;
          v32 = 0;
          v26 = 0;
          *(_WORD *)(a1 + 116) |= 0x80u;
          while (2)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            v35 = v34 + 1;
            if (v34 == -1 || v35 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
              *(_QWORD *)(a2 + v33) = v35;
              v26 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                v15 = v32++ >= 9;
                if (v15)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_80;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_80:
          v60 = 104;
          goto LABEL_89;
        case 6u:
          v37 = 0;
          v38 = 0;
          v26 = 0;
          *(_WORD *)(a1 + 116) |= 0x40u;
          while (2)
          {
            v39 = *v3;
            v40 = *(_QWORD *)(a2 + v39);
            v41 = v40 + 1;
            if (v40 == -1 || v41 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
              *(_QWORD *)(a2 + v39) = v41;
              v26 |= (unint64_t)(v42 & 0x7F) << v37;
              if (v42 < 0)
              {
                v37 += 7;
                v15 = v38++ >= 9;
                if (v15)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_84;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_84:
          v60 = 88;
          goto LABEL_89;
        case 7u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 80;
          goto LABEL_50;
        case 8u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 56;
          goto LABEL_50;
        case 9u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 96;
LABEL_50:
          v43 = *(void **)(a1 + v19);
          *(_QWORD *)(a1 + v19) = v18;

          continue;
        case 0xAu:
          *(_WORD *)(a1 + 116) |= 8u;
          v44 = *v3;
          v45 = *(_QWORD *)(a2 + v44);
          if (v45 <= 0xFFFFFFFFFFFFFFF7 && v45 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v45);
            *(_QWORD *)(a2 + v44) = v45 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v23 = 0;
          }
          v61 = 32;
          goto LABEL_102;
        case 0xBu:
          *(_WORD *)(a1 + 116) |= 2u;
          v46 = *v3;
          v47 = *(_QWORD *)(a2 + v46);
          if (v47 <= 0xFFFFFFFFFFFFFFF7 && v47 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v47);
            *(_QWORD *)(a2 + v46) = v47 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v23 = 0;
          }
          v61 = 16;
          goto LABEL_102;
        case 0xCu:
          *(_WORD *)(a1 + 116) |= 0x20u;
          v48 = *v3;
          v49 = *(_QWORD *)(a2 + v48);
          if (v49 <= 0xFFFFFFFFFFFFFFF7 && v49 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v49);
            *(_QWORD *)(a2 + v48) = v49 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v23 = 0;
          }
          v61 = 48;
          goto LABEL_102;
        case 0xDu:
          v50 = 0;
          v51 = 0;
          v26 = 0;
          *(_WORD *)(a1 + 116) |= 0x100u;
          break;
        case 0xEu:
          *(_WORD *)(a1 + 116) |= 1u;
          v56 = *v3;
          v57 = *(_QWORD *)(a2 + v56);
          if (v57 <= 0xFFFFFFFFFFFFFFF7 && v57 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v57);
            *(_QWORD *)(a2 + v56) = v57 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v23 = 0;
          }
          v61 = 8;
          goto LABEL_102;
        case 0xFu:
          *(_WORD *)(a1 + 116) |= 4u;
          v58 = *v3;
          v59 = *(_QWORD *)(a2 + v58);
          if (v59 <= 0xFFFFFFFFFFFFFFF7 && v59 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v59);
            *(_QWORD *)(a2 + v58) = v59 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v23 = 0;
          }
          v61 = 24;
LABEL_102:
          *(_QWORD *)(a1 + v61) = v23;
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v52 = *v3;
        v53 = *(_QWORD *)(a2 + v52);
        v54 = v53 + 1;
        if (v53 == -1 || v54 > *(_QWORD *)(a2 + *v4))
          break;
        v55 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v53);
        *(_QWORD *)(a2 + v52) = v54;
        v26 |= (unint64_t)(v55 & 0x7F) << v50;
        if ((v55 & 0x80) == 0)
          goto LABEL_86;
        v50 += 7;
        v15 = v51++ >= 9;
        if (v15)
        {
          LODWORD(v26) = 0;
          goto LABEL_88;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_86:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_88:
      v60 = 108;
LABEL_89:
      *(_DWORD *)(a1 + v60) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9BE6E30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9BE6F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  void *v21;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BE7064(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9BE7140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  id *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1C9BE71F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_40c23_ZTS17ATXPredictionItem(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 40) = *(id *)(a2 + 40);
  return memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0xCD2uLL);
}

void __destroy_helper_block_ea8_40c23_ZTS17ATXPredictionItem(uint64_t a1)
{

}

void sub_1C9BE7530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__deallocate_node(uint64_t a1, id *a2)
{
  id *v2;
  id *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__deallocate_node(a1, *(id **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t **std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::find<NSString * {__strong}>(_QWORD *a1, id *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **i;
  unint64_t v12;

  v4 = objc_msgSend(*a2, "hash");
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = (uint64_t **)*i)
  {
    v12 = (unint64_t)i[1];
    if (v12 == v6)
    {
      if ((objc_msgSend(i[2], "isEqualToString:", *a2) & 1) != 0)
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **i;
  unint64_t v12;

  v4 = objc_msgSend(*a2, "hash");
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = (uint64_t **)*i)
  {
    v12 = (unint64_t)i[1];
    if (v6 == v12)
    {
      if ((objc_msgSend(i[2], "isEqualToString:", *a2) & 1) != 0)
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

char *std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__emplace_unique_key_args<NSString * {__strong},std::pair<NSString * {__strong},ATXPredictionItem>>(uint64_t a1, id *a2, __int128 *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = objc_msgSend(*a2, "hash");
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if ((objc_msgSend(*((id *)v13 + 2), "isEqualToString:", *a2) & 1) != 0)
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0xCF8uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v16 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *((_OWORD *)v13 + 1) = v16;
  memcpy(v13 + 32, a3 + 1, 0xCD2uLL);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)v13 = *v24;
LABEL_38:
    *v24 = v13;
    goto LABEL_39;
  }
  *(_QWORD *)v13 = *v15;
  *v15 = v13;
  *(_QWORD *)(v23 + 8 * v3) = v15;
  if (*(_QWORD *)v13)
  {
    v25 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_1C9BE7A40(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,void *>>>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

BOOL ATXAnchorModelPBLaunchHistoryMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 0x10u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast2Hours;
              goto LABEL_77;
            }
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              break;
            v17 += 7;
            v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast2Hours;
              goto LABEL_80;
            }
          }
          v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast2Hours;
          goto LABEL_78;
        case 2u:
          v25 = 0;
          v26 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 0x40u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast7Days;
              goto LABEL_77;
            }
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
            *(_QWORD *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast7Days;
                goto LABEL_80;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast7Days;
          goto LABEL_78;
        case 3u:
          v30 = 0;
          v31 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 2u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast14Days;
              goto LABEL_77;
            }
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast14Days;
                goto LABEL_80;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast14Days;
          goto LABEL_78;
        case 4u:
          v35 = 0;
          v36 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 8u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast28Days;
              goto LABEL_77;
            }
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
            *(_QWORD *)(a2 + v37) = v38 + 1;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              v23 = v36++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast28Days;
                goto LABEL_80;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast28Days;
          goto LABEL_78;
        case 5u:
          v40 = 0;
          v41 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast12Hours;
              goto LABEL_77;
            }
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v43 + 1;
            v19 |= (unint64_t)(v44 & 0x7F) << v40;
            if (v44 < 0)
            {
              v40 += 7;
              v23 = v41++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast12Hours;
                goto LABEL_80;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast12Hours;
          goto LABEL_78;
        case 6u:
          v45 = 0;
          v46 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 4u;
          while (2)
          {
            v47 = *v3;
            v48 = *(_QWORD *)(a2 + v47);
            if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
            {
              v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast24Hours;
              goto LABEL_77;
            }
            v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
            *(_QWORD *)(a2 + v47) = v48 + 1;
            v19 |= (unint64_t)(v49 & 0x7F) << v45;
            if (v49 < 0)
            {
              v45 += 7;
              v23 = v46++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast24Hours;
                goto LABEL_80;
              }
              continue;
            }
            break;
          }
          v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast24Hours;
          goto LABEL_78;
        case 7u:
          v50 = 0;
          v51 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 36) |= 0x20u;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
          return 0;
      }
      while (1)
      {
        v52 = *v3;
        v53 = *(_QWORD *)(a2 + v52);
        if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v4))
          break;
        v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v53);
        *(_QWORD *)(a2 + v52) = v53 + 1;
        v19 |= (unint64_t)(v54 & 0x7F) << v50;
        if ((v54 & 0x80) == 0)
        {
          v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast48Hours;
          goto LABEL_78;
        }
        v50 += 7;
        v23 = v51++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast48Hours;
          goto LABEL_80;
        }
      }
      v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast48Hours;
LABEL_77:
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_78:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_80:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9BEBE70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t ATXMPBBlendingWidgetRotationEngagementTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  void *v36;
  uint64_t v37;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 56;
          goto LABEL_49;
        case 2u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 80) |= 1u;
          while (2)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_53;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_53:
          v37 = 32;
          goto LABEL_62;
        case 3u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
          goto LABEL_49;
        case 4u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 72;
          goto LABEL_49;
        case 5u:
          v26 = 0;
          v27 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 80) |= 2u;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v22 |= (unint64_t)(v30 & 0x7F) << v26;
              if (v30 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_57;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_57:
          v37 = 64;
          goto LABEL_62;
        case 6u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 48;
          goto LABEL_49;
        case 7u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 40;
          goto LABEL_49;
        case 8u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_49;
        case 9u:
          v31 = 0;
          v32 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 80) |= 4u;
          break;
        case 0xAu:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
LABEL_49:
          v36 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v33 = *v3;
        v34 = *(_QWORD *)(a2 + v33);
        if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
          break;
        v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
        *(_QWORD *)(a2 + v33) = v34 + 1;
        v22 |= (unint64_t)(v35 & 0x7F) << v31;
        if ((v35 & 0x80) == 0)
          goto LABEL_59;
        v31 += 7;
        v14 = v32++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_61;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_59:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v22) = 0;
LABEL_61:
      v37 = 68;
LABEL_62:
      *(_DWORD *)(a1 + v37) = v22;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *_ATXAnchorModelSha256Hash(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  unsigned __int8 md[32];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3 || v4)
  {
    if (v3)
    {
      objc_msgSend(v3, "dataUsingEncoding:", 4);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = (void *)objc_msgSend(v7, "mutableCopy");

      objc_msgSend(v8, "appendData:", v5);
      md[0] = 0;
      v9 = objc_retainAutorelease(v8);
      CC_SHA256((const void *)objc_msgSend(v9, "bytes"), objc_msgSend(v9, "length"), md);
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", md, 32);
      v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v11 = objc_msgSend(v10, "bytes");
      objc_msgSend(MEMORY[0x1E0CB37A0], "string");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v10, "length"))
      {
        v13 = 0;
        do
          objc_msgSend(v12, "appendFormat:", CFSTR("%hhx"), *(unsigned __int8 *)(v11 + v13++), *(_QWORD *)md);
        while (objc_msgSend(v10, "length") > v13);
      }
      v6 = (__CFString *)objc_msgSend(v12, "copy");

    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v6 = &stru_1E82FDC98;
  }

  return v6;
}

void sub_1C9BF0520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1C9BF05EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9BF06CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)ATXHeuristicActionProducer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1C9BF0790(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9BF0848(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C9BF08E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C9BF09F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9BF1020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1C9BF11FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9BF1430(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C9BF1584(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9BF16BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9BF1920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BF1A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C9BF1B34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ATXTimelineRelevancePBTimelineRelevanceAbuseControlOutcomeReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 20) |= 2u;
        while (1)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            break;
          v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0)
            goto LABEL_41;
          v23 += 7;
          v14 = v24++ >= 9;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_43:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_39:
        *(_QWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9BF69DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C9BF7834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id readWholeFile(int a1, char a2)
{
  NSObject *v4;
  void *v5;
  off_t st_size;
  void *v8;
  void *v9;
  ssize_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  id v14;
  stat v15;

  lseek(a1, 0, 0);
  memset(&v15, 0, sizeof(v15));
  if (fstat(a1, &v15))
  {
    __atxlog_handle_default();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      readWholeFile_cold_3();

    if ((a2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  st_size = v15.st_size;
  if (!v15.st_size)
  {
    v5 = (void *)objc_opt_new();
    return v5;
  }
  v8 = malloc_type_malloc(v15.st_size, 0xFDE44234uLL);
  if (!v8)
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("malloc failed"), 0);
    v14 = (id)objc_claimAutoreleasedReturnValue();
    objc_exception_throw(v14);
  }
  v9 = v8;
  v10 = read(a1, v8, st_size);
  if (v10 == -1)
  {
    __atxlog_handle_default();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      readWholeFile_cold_1();

  }
  else
  {
    v11 = v10;
    if (v10 >= st_size)
    {
      v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytesNoCopy:length:", v9, st_size);
      return v5;
    }
    __atxlog_handle_default();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      readWholeFile_cold_2(st_size, v11, v12);

  }
  free(v9);
  if ((a2 & 1) != 0)
LABEL_5:
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0CB2A70], CFSTR("readWholeFile errno=%i"), *__error());
LABEL_6:
  v5 = 0;
  return v5;
}

void OUTLINED_FUNCTION_0_10(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_1C9BF89B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9BF8F10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9BF90A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAnyLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeSpotlightLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeDayOfWeek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAirplaneModeLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeWifiAppLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeTrendingLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___APRHistogramTypeAppIntentExplicitConfirms_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___APRHistogramTypeAppIntentExplicitRejects_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___APRHistogramTypeAppIntentDonation_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___APRHistogramTypeAppIntentImplicitConfirms_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___APRHistogramTypeAppIntentImplicitRejects_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeUnlockTime(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___APRHistogramTypeAppIntentSiriKitDonation_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___APRHistogramTypeAppIntentNonSiriKitDonation_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppIntentLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeIntentForAllAppsLaunch_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppForAllIntentsLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppIntentDayOfWeek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeIntentForAllAppsDayOfWeek_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppForAllIntentsDayOfWeek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppIntentTrendingLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeIntentForAllAppsTrendingLaunch_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppForAllIntentsTrendingLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppIntentUnlockTime(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeIntentForAllAppsUnlockTime_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppForAllIntentsUnlockTime(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppIntentAirplaneModeLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeIntentForAllAppsAirplaneModeLaunch_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppForAllIntentsAirplaneModeLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppIntentWifiLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeIntentForAllAppsWifiLaunch_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppForAllIntentsWifiLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeNotifications(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeActionsConfirms(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeActionsRejects(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeActionsHeuristicConfirms(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeActionsHeuristicRejects(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeCoreMotionLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppIntentCoreMotionLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppForAllIntentsCoreMotionLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypePartOfWeek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAmbientLight(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeTimeOfDayAndDayOfWeek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppCoarseTimePOWLocationLaunches(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppSpecificTimeDOWLocationLaunches(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppCoarseTimePOWLocationConfirms(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppSpecificTimeDOWLocationConfirms(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppCoarseTimePOWLocationRejects(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppSpecificTimeDOWLocationRejects(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppClipsAndHeroApp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppSpecificLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppCoarseLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppLaunchesTwoHourTimeInterval(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppConfirmsTwoHourTimeInterval(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppRejectsTwoHourTimeInterval(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppConfirmsDayOfWeek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppRejectsDayOfWeek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppConfirmsCoarseGeoHash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppRejectsCoarseGeoHash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppConfirmsSpecificGeoHash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppRejectsSpecificGeoHash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppZoom7GeoHash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenWidgetInteractions(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppConfirmsCoarseTimePOWLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppConfirmsSpecificTimeDOWLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppConfirmsTwoHourTimeInterval(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppConfirmsDayOfWeek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppConfirmsCoarseGeohash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppConfirmsSpecificGeohash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppRejectsCoarseTimePOWLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppRejectsSpecificTimeDOWLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppRejectsTwoHourTimeInterval(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppRejectsDayOfWeek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppRejectsCoarseGeohash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppRejectsSpecificGeohash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryConfirmsCoarseTimePOWLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryConfirmsSpecificTimeDOWLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryConfirmsTwoHourTimeInterval(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryConfirmsDayOfWeek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryConfirmsCoarseGeohash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryConfirmsSpecificGeohash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryRejectsCoarseTimePOWLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryRejectsSpecificTimeDOWLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryRejectsTwoHourTimeInterval(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryRejectsDayOfWeek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryRejectsCoarseGeohash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryRejectsSpecificGeohash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppExplicitRejectsCoarseTimePOWLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppExplicitRejectsCoarseTimePOWLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryExplicitRejectsCoarseTimePOWLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeFallbackActionsConfirms(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeFallbackActionsRejects(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomescreenAppLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryAppLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppClipsAndHeroAppNoDecay(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypePOICategory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeActivitySuggestionsFeedback(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeNotificationDigestAppEngagement(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeNotificationDigestAlltimeMarqueeAppearances(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeMax(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

void sub_1C9BFBC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_3_9(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x16u);
}

void sub_1C9BFECD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9BFEF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9BFF4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0032C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void sub_1C9C0046C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0066C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C00898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _Unwind_Resume(exception_object);
}

BOOL _ATXCopySqliteDatabaseClassC(void *a1, void *a2, char a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  NSObject *v9;
  _BOOL8 v10;
  int v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  sqlite3 *v21;
  sqlite3 *ppDb;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (v5)
  {
    if (v6)
      goto LABEL_3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _ATXCopySqliteDatabaseClassC(NSString *__strong, NSString *__strong, BOOL)");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "handleFailureInFunction:file:lineNumber:description:", v17, CFSTR("_ATXInitialization.m"), 224, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("fromPath"));

    if (v7)
      goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL _ATXCopySqliteDatabaseClassC(NSString *__strong, NSString *__strong, BOOL)");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "handleFailureInFunction:file:lineNumber:description:", v19, CFSTR("_ATXInitialization.m"), 225, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("toPath"));

LABEL_3:
  v21 = 0;
  ppDb = 0;
  v8 = objc_retainAutorelease(v5);
  if (sqlite3_open_v2((const char *)objc_msgSend(v8, "UTF8String"), &ppDb, 1, 0))
  {
    __atxlog_handle_default();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      _ATXCopySqliteDatabaseClassC_cold_2();
LABEL_9:

    sqlite3_close_v2(ppDb);
    v10 = 0;
    goto LABEL_10;
  }
  if (sqlite3_open_v2((const char *)objc_msgSend(objc_retainAutorelease(v7), "UTF8String"), &v21, 3145734, 0))
  {
    __atxlog_handle_default();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      _ATXCopySqliteDatabaseClassC_cold_1();
    goto LABEL_9;
  }
  v12 = sqlite3_file_control(v21, 0, 102, ppDb);
  sqlite3_exec_with_logging(v21, "PRAGMA journal_mode=WAL");
  sqlite3_exec_with_logging(v21, "VACUUM");
  sqlite3_exec_with_logging(v21, "ANALYZE");
  sqlite3_close_v2(v21);
  v10 = v12 == 0;
  if (v12 || (a3 & 1) == 0)
  {
    sqlite3_close_v2(ppDb);
  }
  else
  {
    v20 = 128;
    sqlite3_file_control(ppDb, 0, 101, &v20);
    sqlite3_close_v2(ppDb);
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "removeItemAtPath:error:", v8, 0);
    objc_msgSend(v8, "stringByAppendingString:", CFSTR("-shm"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "removeItemAtPath:error:", v14, 0);

    objc_msgSend(v8, "stringByAppendingString:", CFSTR("-wal"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "removeItemAtPath:error:", v15, 0);

    v10 = 1;
  }
LABEL_10:

  return v10;
}

void sqlite3_exec_with_logging(sqlite3 *a1, const char *a2)
{
  int v3;
  int v4;
  NSObject *v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = sqlite3_exec(a1, a2, 0, 0, 0);
  if (v3)
  {
    v4 = v3;
    __atxlog_handle_default();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 136315394;
      v7 = a2;
      v8 = 1024;
      v9 = v4;
      _os_log_impl(&dword_1C9A3B000, v5, OS_LOG_TYPE_DEFAULT, "Error running '%s': rc=%i", (uint8_t *)&v6, 0x12u);
    }

  }
}

BOOL _ATXCopySqliteDatabaseDataClassC(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  char v23;
  _BOOL8 v24;
  NSObject *v25;
  NSObject *v26;
  void *v27;
  id v29;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  id v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  NSTemporaryDirectory();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "UUIDString");
  v7 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringByAppendingPathComponent:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = 0x1E0CB3000uLL;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = 0;
  LOBYTE(v7) = objc_msgSend(v10, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v8, 1, 0, &v35);
  v11 = v35;

  if ((v7 & 1) != 0)
  {
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v12 = v3;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
    if (v13)
    {
      v14 = v13;
      v29 = v11;
      v30 = v3;
      v15 = 0;
      v16 = *(_QWORD *)v32;
      while (2)
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v32 != v16)
            objc_enumerationMutation(v12);
          v18 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * i);
          objc_msgSend(v18, "lastPathComponent");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "stringByAppendingPathComponent:", v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();

          if (objc_msgSend(v20, "hasSuffix:", CFSTR(".db")))
          {
            v21 = v20;

            v15 = v21;
          }
          objc_msgSend(v12, "objectForKeyedSubscript:", v18);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = objc_msgSend(v22, "writeToFile:atomically:", v20, 0);

          if ((v23 & 1) == 0)
          {
            __atxlog_handle_default();
            v25 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
              _ATXCopySqliteDatabaseDataClassC_cold_2();

            v24 = 0;
            v3 = v30;
            v11 = v29;
            v9 = 0x1E0CB3000;
            goto LABEL_24;
          }

        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v31, v36, 16);
        if (v14)
          continue;
        break;
      }

      v3 = v30;
      v11 = v29;
      v9 = 0x1E0CB3000;
      if (v15)
      {
        v24 = _ATXCopySqliteDatabaseClassC(v15, v4, 0);
        goto LABEL_24;
      }
    }
    else
    {

    }
    __atxlog_handle_default();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      _ATXCopySqliteDatabaseDataClassC_cold_1(v12, v26);

    v15 = 0;
    v24 = 0;
LABEL_24:
    objc_msgSend(*(id *)(v9 + 1568), "defaultManager");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "removeItemAtPath:error:", v8, 0);

  }
  else
  {
    __atxlog_handle_default();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      _ATXCopySqliteDatabaseDataClassC_cold_3();
    v24 = 0;
  }

  return v24;
}

uint64_t _ATXExtractFilesFromDECBackupArchiveIfExists(void *a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  id v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  size_t *v10;
  const uint8_t *v11;
  size_t v12;
  size_t v13;
  uint8_t *v14;
  size_t v15;
  NSObject *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t j;
  uint64_t v44;
  void *v45;
  void *v46;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  NSObject *v55;
  void *v56;
  void *v57;
  char v58;
  id v59;
  NSObject *v60;
  _BOOL4 v61;
  void *v62;
  id v63;
  void *v64;
  int v65;
  id obj;
  id obja;
  id v68;
  id v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  id v86;
  id v87;
  uint8_t buf[4];
  void *v89;
  __int16 v90;
  id v91;
  _BYTE v92[128];
  _BYTE v93[128];
  _BYTE v94[128];
  _BYTE v95[128];
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v68 = a2;
  v4 = (void *)os_transaction_create();
  v87 = 0;
  v5 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithContentsOfFile:options:error:", v3, 2, &v87);
  v6 = v87;
  v7 = v6;
  if (v5)
  {
    if ((unint64_t)-[NSObject length](v5, "length") <= 7)
    {
      __atxlog_handle_default();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        _ATXExtractFilesFromDECBackupArchiveIfExists_cold_2();
LABEL_46:

LABEL_47:
      v9 = 0;
LABEL_48:

      goto LABEL_49;
    }
    v5 = objc_retainAutorelease(v5);
    v10 = (size_t *)-[NSObject bytes](v5, "bytes");
    v11 = (const uint8_t *)(v10 + 1);
    v12 = *v10;
    v13 = -[NSObject length](v5, "length") - 8;
    v14 = (uint8_t *)malloc_type_malloc(v12, 0xC20905BuLL);
    v15 = compression_decode_buffer(v14, v12, v11, v13, 0, COMPRESSION_LZFSE);
    if (!v15)
    {
      free(v14);
      __atxlog_handle_default();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        _ATXExtractFilesFromDECBackupArchiveIfExists_cold_3();
      goto LABEL_46;
    }
    v16 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytesNoCopy:length:freeWhenDone:", v14, v15, 1);

    v17 = (void *)MEMORY[0x1CAA48B6C]();
    v86 = 0;
    objc_msgSend(MEMORY[0x1E0CB38B0], "propertyListWithData:options:format:error:", v16, 1, 0, &v86);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = v86;

    if (!v18)
    {
      __atxlog_handle_default();
      v48 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        _ATXExtractFilesFromDECBackupArchiveIfExists_cold_4();

      objc_autoreleasePoolPop(v17);
      v9 = 0;
      v5 = v16;
      v7 = v19;
      goto LABEL_48;
    }
    v62 = v4;
    v63 = v3;
    v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v18, "count"));
    v82 = 0u;
    v83 = 0u;
    v84 = 0u;
    v85 = 0u;
    v21 = v18;
    v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v82, v95, 16);
    if (v22)
    {
      v23 = v22;
      v24 = *(_QWORD *)v83;
      do
      {
        for (i = 0; i != v23; ++i)
        {
          if (*(_QWORD *)v83 != v24)
            objc_enumerationMutation(v21);
          v26 = *(void **)(*((_QWORD *)&v82 + 1) + 8 * i);
          objc_msgSend(v21, "objectForKeyedSubscript:", v26);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "lastPathComponent");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "setObject:forKeyedSubscript:", v27, v28);

        }
        v23 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v82, v95, 16);
      }
      while (v23);
    }

    objc_autoreleasePoolPop(v17);
    v29 = (void *)objc_opt_new();
    obj = (id)objc_opt_new();
    v78 = 0u;
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    v5 = v20;
    v30 = -[NSObject countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v78, v94, 16);
    v64 = v29;
    if (!v30)
    {
LABEL_33:

      if (objc_msgSend(v29, "count"))
      {
        v38 = (void *)objc_opt_new();
        v74 = 0u;
        v75 = 0u;
        v76 = 0u;
        v77 = 0u;
        v39 = v29;
        v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v74, v93, 16);
        if (v40)
        {
          v41 = v40;
          v42 = *(_QWORD *)v75;
          do
          {
            for (j = 0; j != v41; ++j)
            {
              if (*(_QWORD *)v75 != v42)
                objc_enumerationMutation(v39);
              v44 = *(_QWORD *)(*((_QWORD *)&v74 + 1) + 8 * j);
              -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", v44);
              v45 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v38, "setObject:forKeyedSubscript:", v45, v44);

            }
            v41 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v74, v93, 16);
          }
          while (v41);
        }

        objc_msgSend(v68, "stringByAppendingPathComponent:", CFSTR("_ATXDataStore.db"));
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        v61 = _ATXCopySqliteDatabaseDataClassC(v38, v46);

      }
      else
      {
        v61 = 1;
      }
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      obja = obj;
      v49 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v70, v92, 16);
      if (v49)
      {
        v50 = v49;
        v51 = *(_QWORD *)v71;
        v65 = 1;
        do
        {
          v52 = 0;
          v53 = v19;
          do
          {
            if (*(_QWORD *)v71 != v51)
              objc_enumerationMutation(obja);
            v54 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * v52);
            v55 = v5;
            -[NSObject objectForKeyedSubscript:](v5, "objectForKeyedSubscript:", v54);
            v56 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v68, "stringByAppendingPathComponent:", v54);
            v57 = (void *)objc_claimAutoreleasedReturnValue();
            v69 = v53;
            v58 = objc_msgSend(v56, "writeToFile:options:error:", v57, 0x40000000, &v69);
            v59 = v69;

            v19 = v59;
            if ((v58 & 1) == 0)
            {
              __atxlog_handle_default();
              v60 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412546;
                v89 = v54;
                v90 = 2112;
                v91 = v59;
                _os_log_error_impl(&dword_1C9A3B000, v60, OS_LOG_TYPE_ERROR, "Could not write %@: %@", buf, 0x16u);
              }

              v65 = 0;
            }
            ++v52;
            v53 = v59;
            v5 = v55;
          }
          while (v50 != v52);
          v50 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v70, v92, 16);
        }
        while (v50);
      }
      else
      {
        v65 = 1;
      }

      v9 = v61 & v65;
      v7 = v19;
      v4 = v62;
      v3 = v63;
      goto LABEL_48;
    }
    v31 = v30;
    v32 = *(_QWORD *)v79;
LABEL_18:
    v33 = 0;
    while (1)
    {
      if (*(_QWORD *)v79 != v32)
        objc_enumerationMutation(v5);
      v34 = *(void **)(*((_QWORD *)&v78 + 1) + 8 * v33);
      if ((objc_msgSend(v34, "isEqualToString:", CFSTR("_ATXDataStore.db")) & 1) != 0
        || objc_msgSend(v34, "isEqualToString:", CFSTR("_ATXDataStore.db-wal")))
      {
        v35 = v29;
      }
      else
      {
        if (!objc_msgSend(&unk_1E83CF9B0, "containsObject:", v34))
        {
          __atxlog_handle_default();
          v36 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v89 = v34;
            _os_log_impl(&dword_1C9A3B000, v36, OS_LOG_TYPE_DEFAULT, "Unknown filename in backup file: %@", buf, 0xCu);
          }

          v29 = v64;
          goto LABEL_25;
        }
        v35 = obj;
      }
      objc_msgSend(v35, "addObject:", v34);
LABEL_25:
      if (v31 == ++v33)
      {
        v37 = -[NSObject countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v78, v94, 16);
        v31 = v37;
        if (!v37)
          goto LABEL_33;
        goto LABEL_18;
      }
    }
  }
  if (objc_msgSend(v6, "code") != 260)
  {
    __atxlog_handle_default();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      _ATXExtractFilesFromDECBackupArchiveIfExists_cold_1();
    goto LABEL_47;
  }
  v9 = 1;
LABEL_49:

  return v9;
}

uint64_t _ATXDECBackupNeedsRestoring(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  int v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;

  v1 = a1;
  objc_msgSend(v1, "stringByAppendingPathComponent:", CFSTR("Backups/AppPredictionExpert"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "fileExistsAtPath:", v2);

  if ((_DWORD)v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "stringByAppendingPathComponent:", CFSTR("restore_done"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v5, "fileExistsAtPath:", v6);

    if (v7)
    {
      v8 = objc_alloc(MEMORY[0x1E0C99D50]);
      objc_msgSend(v1, "stringByAppendingPathComponent:", CFSTR("backup_version"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = (void *)objc_msgSend(v8, "initWithContentsOfFile:", v9);

      v11 = objc_alloc(MEMORY[0x1E0C99D50]);
      objc_msgSend(v1, "stringByAppendingPathComponent:", CFSTR("Backups/backup_version"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = (void *)objc_msgSend(v11, "initWithContentsOfFile:", v12);

      v4 = 1;
      if (v13 && v10)
        v4 = objc_msgSend(v13, "isEqualToData:", v10) ^ 1;

    }
    else
    {
      v4 = 1;
    }
  }

  return v4;
}

void ATXTriggerActionHistogramPrefillJob()
{
  xpc_object_t xdict;

  xdict = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(xdict, (const char *)*MEMORY[0x1E0C80760], 1);
  xpc_dictionary_set_int64(xdict, (const char *)*MEMORY[0x1E0C80790], 86400);
  xpc_dictionary_set_BOOL(xdict, (const char *)*MEMORY[0x1E0C808B8], 1);
  xpc_dictionary_set_BOOL(xdict, (const char *)*MEMORY[0x1E0C80738], 0);
  xpc_activity_register("com.apple.duetexpertd.prefill-action-histograms", xdict, &__block_literal_global_82);

}

void ATXEnableMobileAssetDataVault()
{
  NSObject *v0;
  os_signpost_id_t v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  id v10;
  NSObject *v11;
  const char *v12;
  uint8_t buf[16];

  __atxlog_handle_xpc();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = os_signpost_id_generate(v0);

  __atxlog_handle_xpc();
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C9A3B000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "ATXEnableMobileAssetDataVault", " enableTelemetry=YES ", buf, 2u);
  }

  __atxlog_handle_default();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C9A3B000, v4, OS_LOG_TYPE_DEFAULT, "Attempt DuetExpertCenterAsset datavault assurance", buf, 2u);
  }

  ASEnsureDataVault();
  v5 = 0;
  __atxlog_handle_xpc();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1C9A3B000, v7, OS_SIGNPOST_INTERVAL_END, v1, "ATXEnableMobileAssetDataVault", " enableTelemetry=YES ", buf, 2u);
  }

  __atxlog_handle_default();
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (!v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v12 = "Successfully ensured datavault";
      goto LABEL_17;
    }
LABEL_18:

    return;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    ATXEnableMobileAssetDataVault_cold_2();

  ASEnsureDataVault();
  v10 = 0;
  __atxlog_handle_default();
  v11 = objc_claimAutoreleasedReturnValue();
  v9 = v11;
  if (!v10)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v12 = "Successfully ensured datavault after a retry";
LABEL_17:
      _os_log_impl(&dword_1C9A3B000, v9, OS_LOG_TYPE_DEFAULT, v12, buf, 2u);
      goto LABEL_18;
    }
    goto LABEL_18;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    ATXEnableMobileAssetDataVault_cold_1();

  _os_crash();
  __break(1u);
}

id ATXSharedDefaultHomeScreenItemUpdater()
{
  void *v1;
  void *v2;

  if (objc_msgSend(MEMORY[0x1E0D81590], "isClassCLocked"))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "ATXDefaultHomeScreenItemUpdater *ATXSharedDefaultHomeScreenItemUpdater(void)");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("_ATXInitialization.m"), 107, CFSTR("We are class C locked while accessing a histogram"));

  }
  if (ATXSharedDefaultHomeScreenItemUpdater_onceToken != -1)
    dispatch_once(&ATXSharedDefaultHomeScreenItemUpdater_onceToken, &__block_literal_global_512);
  return (id)ATXSharedDefaultHomeScreenItemUpdater_updater;
}

id restoreStateFinishedPath()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CF94D8], "appPredictionDirectory");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("restore_state_finished"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void performPostRestoreTasks()
{
  void *v0;
  id v1;

  v0 = (void *)objc_opt_new();
  objc_msgSend(v0, "evictCachedSuggestedPages");

  +[ATXAppDirectoryOrderingProvider sharedInstance](ATXAppDirectoryOrderingProvider, "sharedInstance");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "updateCacheWithActivity:completionHandler:", 0, 0);

}

void __restoreStateQueue_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("restoreState", v2);
  v1 = (void *)restoreStateQueue_instance;
  restoreStateQueue_instance = (uint64_t)v0;

}

void __registerForRestoreStateNotifications_block_invoke()
{
  void **v0;
  void *v1;
  const char *v2;
  NSObject *v3;
  int v4;
  NSObject *v5;
  int out_token;

  v0 = (void **)dlsym((void *)registerForRestoreStateNotifications_mobileBackup, "kMBManagerRestoreStateChangedNotification");
  if (v0)
  {
    v1 = *v0;
    out_token = 0;
    v2 = (const char *)objc_msgSend(objc_retainAutorelease(v1), "UTF8String");
    restoreStateQueue();
    v3 = objc_claimAutoreleasedReturnValue();
    notify_register_dispatch(v2, &out_token, v3, &__block_literal_global_331);

    __registerForRestoreStateNotifications_block_invoke_329(v4, out_token);
  }
  else
  {
    __atxlog_handle_backup();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      __registerForRestoreStateNotifications_block_invoke_cold_1(v5);

  }
}

void __registerForRestoreStateNotifications_block_invoke_329(int a1, int token)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t state64;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  state64 = 0;
  notify_get_state(token, &state64);
  __atxlog_handle_backup();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v9 = state64;
    _os_log_impl(&dword_1C9A3B000, v2, OS_LOG_TYPE_DEFAULT, "Restore state changed: %ld", buf, 0xCu);
  }

  if (state64 == 2)
  {
    __atxlog_handle_backup();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Restore detected. Pausing prediction updates.", buf, 2u);
    }

    restoreInProgress = 1;
  }
  else if (restoreInProgress == 1)
  {
    __atxlog_handle_backup();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C9A3B000, v4, OS_LOG_TYPE_DEFAULT, "Restore finished. Restarting process.", buf, 2u);
    }

    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    restoreStateFinishedPath();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "createFileAtPath:contents:attributes:", v6, 0, 0);

    exit(0);
  }
}

void __registerForAppPredictionUpdateCTSJob_block_invoke()
{
  ATXUpdatePredictionsDefaultInterval(4);
}

void __registerForUserRequestedBackupJob_block_invoke()
{
  NSObject *v0;
  void *v1;
  uint8_t v2[16];

  __atxlog_handle_backup();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1C9A3B000, v0, OS_LOG_TYPE_DEFAULT, "Backup Now: Running app predictions backup...", v2, 2u);
  }

  +[ATXBackupService backupService](ATXBackupService, "backupService");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "backupWithCompletionHandler:", &__block_literal_global_338);

}

void __registerForUserRequestedBackupJob_block_invoke_337(uint64_t a1, int a2)
{
  NSObject *v3;
  const __CFString *v4;
  int v5;
  const __CFString *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  __atxlog_handle_backup();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = CFSTR("NO");
    if (a2)
      v4 = CFSTR("YES");
    v5 = 138412290;
    v6 = v4;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Backup Now succeeded: %@", (uint8_t *)&v5, 0xCu);
  }

}

void __registerForBackupCTSJob_block_invoke()
{
  NSObject *v0;
  void *v1;
  uint8_t v2[16];

  __atxlog_handle_backup();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1C9A3B000, v0, OS_LOG_TYPE_DEFAULT, "Running app predictions backup...", v2, 2u);
  }

  +[ATXBackupService backupService](ATXBackupService, "backupService");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "backupWithCompletionHandler:", &__block_literal_global_346);

}

void __registerForBackupCTSJob_block_invoke_345(uint64_t a1, int a2)
{
  NSObject *v3;
  const __CFString *v4;
  int v5;
  const __CFString *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  __atxlog_handle_backup();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = CFSTR("NO");
    if (a2)
      v4 = CFSTR("YES");
    v5 = 138412290;
    v6 = v4;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Backup succeeded: %@", (uint8_t *)&v5, 0xCu);
  }

}

void __registerForTrainingCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  uint8_t v6[16];
  uint8_t buf[16];

  v2 = a2;
  __atxlog_handle_default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Running app predictions training...", buf, 2u);
  }

  +[_ATXAppPredictor sharedInstance](_ATXAppPredictor, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "trainWithActivity:", v2);

  __atxlog_handle_default();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1C9A3B000, v5, OS_LOG_TYPE_DEFAULT, "Finished running atxtrain CTS job.", v6, 2u);
  }

}

void __registerForActionTimeEstimateCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = a2;
  __atxlog_handle_default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Running Action Time Estimate logging...", v5, 2u);
  }

  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "logActionTimeEstimatesWithActivity:", v2);

}

void __registerForEverydayShortcutsTriggersCTSJobs_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = a2;
  __atxlog_handle_dailyroutines();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Running Daily Routines scheduled job...", v5, 2u);
  }

  +[ATXDailyRoutinesTriggerManager sharedInstance](ATXDailyRoutinesTriggerManager, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "updateWithActivity:", v2);

}

void __registerForEverydayShortcutsTriggersCTSJobs_block_invoke_353(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = a2;
  __atxlog_handle_dailyroutines();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Running Daily Routines one shot job...", v5, 2u);
  }

  +[ATXDailyRoutinesTriggerManager sharedInstance](ATXDailyRoutinesTriggerManager, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "updateWithActivity:", v2);

}

void __registerForDailyRoutinesCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = a2;
  __atxlog_handle_dailyroutines();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Running Daily Routines scheduled job...", v5, 2u);
  }

  +[ATXDailyRoutinesTriggerManager sharedInstance](ATXDailyRoutinesTriggerManager, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "updateWithActivity:", v2);

}

void __registerForDailyRoutinesCTSJob_block_invoke_356(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = a2;
  __atxlog_handle_dailyroutines();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Running Daily Routines one shot job...", v5, 2u);
  }

  +[ATXDailyRoutinesTriggerManager sharedInstance](ATXDailyRoutinesTriggerManager, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "updateWithActivity:", v2);

}

uint64_t __registerForMobileAssetMetadataUpdateCTSJob_block_invoke()
{
  return objc_msgSend(MEMORY[0x1E0CF8CF0], "updateMobileAssetMetadata");
}

void __registerForMagicalMomentsCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = a2;
  __atxlog_handle_default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Running Magical Moments model training...", v5, 2u);
  }

  +[ATXMagicalMomentsAppPredictor sharedInstance](ATXMagicalMomentsAppPredictor, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "trainWithXPCActivity:", v2);

}

void __registerForAnchorModelDataHarvestingCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  ATXAnchorModelTrainingDatasetBuilder *v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  _BOOL4 v10;
  void *v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  __atxlog_handle_default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v13) = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Running Anchor Model on-device training data collection...", (uint8_t *)&v13, 2u);
  }

  v4 = (void *)MEMORY[0x1CAA48B6C]();
  v5 = -[ATXAnchorModelTrainingDatasetBuilder initWithActivity:]([ATXAnchorModelTrainingDatasetBuilder alloc], "initWithActivity:", v2);
  -[ATXAnchorModelTrainingDatasetBuilder cleanupDatasetForPrivacyPreservation](v5, "cleanupDatasetForPrivacyPreservation");
  v6 = -[ATXAnchorModelTrainingDatasetBuilder addNewTrainingSamplesToDatabase](v5, "addNewTrainingSamplesToDatabase");
  __atxlog_handle_default();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v13 = 134217984;
    v14 = v6;
    _os_log_impl(&dword_1C9A3B000, v7, OS_LOG_TYPE_DEFAULT, "Added %ld new samples after running Anchor Model Training Dataset Builder.", (uint8_t *)&v13, 0xCu);
  }

  objc_autoreleasePoolPop(v4);
  v8 = objc_msgSend(v2, "didDefer");
  __atxlog_handle_default();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v10)
    {
      LOWORD(v13) = 0;
      _os_log_impl(&dword_1C9A3B000, v9, OS_LOG_TYPE_DEFAULT, "Deferring Anchor Model Data Harvesting CTS job right before we started harvesting data for offline data collection.", (uint8_t *)&v13, 2u);
    }

  }
  else
  {
    if (v10)
    {
      LOWORD(v13) = 0;
      _os_log_impl(&dword_1C9A3B000, v9, OS_LOG_TYPE_DEFAULT, "Running Anchor Model offline data collection...", (uint8_t *)&v13, 2u);
    }

    v11 = (void *)MEMORY[0x1CAA48B6C]();
    v12 = (void *)objc_opt_new();
    objc_msgSend(v12, "harvestData");

    objc_autoreleasePoolPop(v11);
  }

}

void __registerForAnchorModelTrainingCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  ATXAnchorModelTrainer *v4;
  NSObject *v5;
  uint8_t v6[16];
  uint8_t buf[16];

  v2 = a2;
  __atxlog_handle_anchor();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Running Anchor Model on-device training...", buf, 2u);
  }

  v4 = -[ATXAnchorModelTrainer initWithXPCActivity:]([ATXAnchorModelTrainer alloc], "initWithXPCActivity:", v2);
  -[ATXAnchorModelTrainer train](v4, "train");
  __atxlog_handle_anchor();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1C9A3B000, v5, OS_LOG_TYPE_DEFAULT, "Done running Anchor Model on-device training.", v6, 2u);
  }

}

void __registerForBiomeProactiveSuggestionUIFeedbackResultStreamWritingCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  uint8_t v6[16];
  uint8_t buf[16];

  v2 = a2;
  __atxlog_handle_blending_ecosystem();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Writing proactive suggestion ui feedback results for client models to biome stream...", buf, 2u);
  }

  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "writeEventsToStreamWithXPCActivity:", v2);

  __atxlog_handle_blending_ecosystem();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1C9A3B000, v5, OS_LOG_TYPE_DEFAULT, "Done writing proactive suggestion ui feedback results for client models to biome stream.", v6, 2u);
  }

}

void __registerForModeEntityModelTrainingCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  uint8_t v6[16];
  uint8_t buf[16];

  v2 = a2;
  __atxlog_handle_default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Running Mode Entity Model training...", buf, 2u);
  }

  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "trainWithXPCActivity:", v2);

  __atxlog_handle_default();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1C9A3B000, v5, OS_LOG_TYPE_DEFAULT, "Done running Mode Entity Model training.", v6, 2u);
  }

}

void __registerForModeSetupPredictionTrainingCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  uint8_t v6[16];
  uint8_t buf[16];

  v2 = a2;
  __atxlog_handle_default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Running Mode Setup Prediction Model training...", buf, 2u);
  }

  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "trainWithXPCActivity:", v2);

  __atxlog_handle_default();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1C9A3B000, v5, OS_LOG_TYPE_DEFAULT, "Done running Mode Setup Prediction Model training.", v6, 2u);
  }

}

void __registerForUrgencyTuningGlobalMetricsLogging_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  uint8_t v6[16];
  uint8_t buf[16];

  v2 = a2;
  __atxlog_handle_default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Logging global metrics for urgency tuning...", buf, 2u);
  }

  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "logUrgencyTuningGlobalMetricsWithXPCActivity:", v2);

  __atxlog_handle_default();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1C9A3B000, v5, OS_LOG_TYPE_DEFAULT, "Done logging global metrics for urgency tuning.", v6, 2u);
  }

}

void __registerForPeriodicLogUploadCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  uint8_t v13[16];
  uint8_t v14[16];
  uint8_t v15[16];
  uint8_t v16[16];
  uint8_t buf[16];

  v2 = a2;
  __atxlog_handle_default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Running periodic logging...", buf, 2u);
  }

  v4 = (void *)MEMORY[0x1CAA48B6C]();
  __atxlog_handle_default();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1C9A3B000, v5, OS_LOG_TYPE_DEFAULT, "Running periodic logging: counted prediction updates", v16, 2u);
  }

  v6 = (void *)objc_opt_new();
  objc_msgSend(v6, "flushCountedPredictionUpdatesToLogger");

  objc_autoreleasePoolPop(v4);
  v7 = (void *)MEMORY[0x1CAA48B6C]();
  __atxlog_handle_default();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1C9A3B000, v8, OS_LOG_TYPE_DEFAULT, "Running periodic logging: Core Duet action log donation metrics", v15, 2u);
  }

  v9 = (void *)objc_opt_new();
  objc_msgSend(v9, "logCoreDuetActionLogDonationMetrics");

  objc_autoreleasePoolPop(v7);
  v10 = (void *)MEMORY[0x1CAA48B6C]();
  __atxlog_handle_default();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1C9A3B000, v11, OS_LOG_TYPE_DEFAULT, "Running periodic logging: counted app launches", v14, 2u);
  }

  objc_msgSend(MEMORY[0x1E0CF8CC8], "logCountedAppLaunchesToEventTracker");
  objc_autoreleasePoolPop(v10);
  __atxlog_handle_default();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1C9A3B000, v12, OS_LOG_TYPE_DEFAULT, "Finished periodic logging", v13, 2u);
  }

}

void __registerForInformationStorePeriodicCleanupCTSJob_block_invoke()
{
  NSObject *v0;
  void *v1;
  uint8_t v2[16];

  __atxlog_handle_default();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1C9A3B000, v0, OS_LOG_TYPE_DEFAULT, "Running periodic information store cleanup", v2, 2u);
  }

  objc_msgSend(MEMORY[0x1E0CF8EC8], "sharedInstance");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "clearOutdatedWidgetEngagements");
  objc_msgSend(v1, "clearOutdatedWidgetReloadEntries");
  objc_msgSend(v1, "clearOutdatedSuggestedWidgetEntries");

}

void __registerForAppDirectoryCategoriesUpdateCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = a2;
  __atxlog_handle_app_library();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Updating ATXAppDirectory categories", v5, 2u);
  }

  +[ATXAppDirectoryOrderingProvider sharedInstance](ATXAppDirectoryOrderingProvider, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "updateCacheWithActivity:completionHandler:", v2, 0);

}

void __registerForAppDirectoryLogUploadCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = a2;
  __atxlog_handle_default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Uploading ATXAppDirectory logs", v5, 2u);
  }

  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "uploadSummariesToCoreAnalyticsWithActivity:", v2);

}

void __registerForUserWakeupCDContextChange_block_invoke()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_alloc(MEMORY[0x1E0C99EA0]);
  v2 = (id)objc_msgSend(v0, "initWithSuiteName:", *MEMORY[0x1E0CF9510]);
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKey:", v1, *MEMORY[0x1E0CF9590]);

}

void __registerForTimelineRelevanceMetricsCollectionCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = a2;
  __atxlog_handle_default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Running Timeline Relevance Metric collection.", v5, 2u);
  }

  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "harvestWithActivity:", v2);

}

void __registerForTimelineRelevancePredictionCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = a2;
  __atxlog_handle_default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Running Timeline Relevance prediction CTS job.", v5, 2u);
  }

  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "persistQuotasWithActivity:", v2);
  if (_os_feature_enabled_impl())
    objc_msgSend(v4, "trainWidgetPredictionModelWithActivity:", v2);

}

uint64_t __registerForCardSuggestionClientCacheCleanupCTSJob_block_invoke()
{
  NSObject *v0;
  uint8_t v2[16];

  __atxlog_handle_default();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1C9A3B000, v0, OS_LOG_TYPE_DEFAULT, "Running Card Suggestion Client Cache Cleanup CTS Job", v2, 2u);
  }

  return +[ATXClientModelSuggestionReceiver clearPreviouslyPersistedCachesForCardSuggestionClientsIfNecessary](ATXClientModelSuggestionReceiver, "clearPreviouslyPersistedCachesForCardSuggestionClientsIfNecessary");
}

void __registerForDefaultWidgetSuggesterUpdateCTSJobIfNecessary_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = a2;
  __atxlog_handle_home_screen();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Updating ATXDefaultWidgetSuggester", v5, 2u);
  }

  +[ATXDefaultWidgetSuggesterServer sharedInstance](ATXDefaultWidgetSuggesterServer, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "updateCachedValuesWithActivity:", v2);

}

void __registerForWidgetOnboardingCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  uint8_t v13[16];
  uint8_t v14[16];
  uint8_t buf[16];

  v2 = a2;
  __atxlog_handle_default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Updating onboarding widget and stack suggestions and refreshing installed cache", buf, 2u);
  }

  objc_msgSend(MEMORY[0x1E0CF9210], "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "fetchHomeScreenWidgetDescriptorMetadataWithError:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    ATXSharedDefaultHomeScreenItemUpdater();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "homeScreenDescriptors");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "updateDefaultsIfNeededWithSystemDescriptors:installDatesCache:reason:", v7, v5, CFSTR("Onboarding CTS job"));

  }
  __atxlog_handle_home_screen();
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1C9A3B000, v8, OS_LOG_TYPE_DEFAULT, "Updating ATXOnboardingStackWidgetCache", v14, 2u);
  }

  v9 = (void *)objc_opt_new();
  objc_msgSend(v9, "updateCacheWithActivity:", v2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  __atxlog_handle_home_screen();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v10)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1C9A3B000, v12, OS_LOG_TYPE_DEFAULT, "Updating ATXOnboardingStackResultCache", v13, 2u);
    }

    v12 = objc_opt_new();
    -[NSObject updateCacheWithActivity:widgetCache:](v12, "updateCacheWithActivity:widgetCache:", v2, v10);
  }
  else if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    __registerForWidgetOnboardingCTSJob_block_invoke_cold_1();
  }

}

void __registerForBiomePublicStreamPruning_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_opt_new();
  objc_msgSend(v3, "pruneAllStreamsWithActivity:", v2);

}

void __registerForFocusMetricsLogUploadCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  NSObject *v4;
  os_signpost_id_t v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  uint8_t v12[16];
  uint8_t v13[16];
  uint8_t buf[16];

  v2 = a2;
  __atxlog_handle_metrics();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Processing and uploading Focus metrics events to CoreAnalytics", buf, 2u);
  }

  __atxlog_handle_metrics();
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_signpost_id_generate(v4);

  __atxlog_handle_metrics();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)v13 = 0;
    _os_signpost_emit_with_name_impl(&dword_1C9A3B000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v5, "FocusMetricsLogging.Total", " enableTelemetry=YES ", v13, 2u);
  }

  v8 = (void *)objc_opt_new();
  v9 = (void *)objc_opt_new();
  objc_msgSend(v8, "uploadFocusLogsToCoreAnalyticsWithActivity:contactStore:", v2, v9);

  __atxlog_handle_metrics();
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    *(_WORD *)v12 = 0;
    _os_signpost_emit_with_name_impl(&dword_1C9A3B000, v11, OS_SIGNPOST_INTERVAL_END, v5, "FocusMetricsLogging.Total", " enableTelemetry=YES ", v12, 2u);
  }

}

void __registerForHomeScreenLogUploadCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = a2;
  __atxlog_handle_default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Processing and uploading homescreen events to CoreAnalytics", v5, 2u);
  }

  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "uploadHomeScreenSummaryLogsToCoreAnalyticsWithActivity:customStartDate:dryRunCompletionHandler:", v2, 0, 0);

}

void __registerForNPlusOneStudyCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = a2;
  __atxlog_handle_default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Preparing and uploading N+1 study data to CoreAnalytics", v5, 2u);
  }

  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "uploadStudyDataToCoreAnalyticsWithActivity:", v2);

}

void __registerForBlendingBiomeStreamLoggingCTSJob_block_invoke()
{
  NSObject *v0;
  void *v1;
  uint8_t v2[16];

  __atxlog_handle_metrics();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1C9A3B000, v0, OS_LOG_TYPE_DEFAULT, "Running Blending Biome Stream logging...", v2, 2u);
  }

  +[ATXBlendingBiomeStreamLogger defaultBiomeStreamLogger](ATXBlendingBiomeStreamLogger, "defaultBiomeStreamLogger");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "logBlendingMetricsFromBiomeStream");

}

void __registerForFeedbackMetricsLoggingCTSJob_block_invoke()
{
  NSObject *v0;
  id v1;
  void *v2;
  void *v3;
  uint8_t v4[16];

  __atxlog_handle_metrics();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1C9A3B000, v0, OS_LOG_TYPE_DEFAULT, "Running Blending Feedback Metrics logging...", v4, 2u);
  }

  v1 = objc_alloc(MEMORY[0x1E0D811B0]);
  objc_msgSend(MEMORY[0x1E0D80CD0], "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v1, "initWithHyperParameters:", v2);

  objc_msgSend(v3, "logMetricsForiOSUIFeedbackQueries");
}

void __registerForFaceSuggestionsCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  __atxlog_handle_lock_screen();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v14 = 136315138;
    v15 = "void registerForFaceSuggestionsCTSJob(void)_block_invoke";
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "%s: Refreshing Face and Complication suggestions...", (uint8_t *)&v14, 0xCu);
  }

  v4 = objc_msgSend(v2, "setContinue");
  __atxlog_handle_lock_screen();
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 136315138;
      v15 = "void registerForFaceSuggestionsCTSJob(void)_block_invoke";
      _os_log_impl(&dword_1C9A3B000, v6, OS_LOG_TYPE_DEFAULT, "%s: activity set to CONTINUE", (uint8_t *)&v14, 0xCu);
    }

    +[ATXFaceSuggestionServer sharedInstance](ATXFaceSuggestionServer, "sharedInstance");
    v6 = objc_claimAutoreleasedReturnValue();
    -[NSObject reloadLockScreenSuggestionsWithActivity:completion:](v6, "reloadLockScreenSuggestionsWithActivity:completion:", v2, &__block_literal_global_449);
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    __registerForFaceSuggestionsCTSJob_block_invoke_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }

}

void __registerForFaceSuggestionsCTSJob_block_invoke_447(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  uint64_t v4;

  v2 = a2;
  __atxlog_handle_lock_screen();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    __registerForFaceSuggestionsCTSJob_block_invoke_447_cold_1((uint64_t)v2, v3, v4);

}

void __registerForLockscreenMetricsCTSJob_block_invoke()
{
  NSObject *v0;
  void *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  __atxlog_handle_lock_screen();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    v2 = 136315138;
    v3 = "void registerForLockscreenMetricsCTSJob(void)_block_invoke";
    _os_log_impl(&dword_1C9A3B000, v0, OS_LOG_TYPE_DEFAULT, "%s: Collecting lockscreen metrics...", (uint8_t *)&v2, 0xCu);
  }

  v1 = (void *)objc_opt_new();
  objc_msgSend(v1, "postDailyMetrics");

}

void __registerForZkwMetricsCTSJob_block_invoke()
{
  NSObject *v0;
  void *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  __atxlog_handle_lock_screen();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    v2 = 136315138;
    v3 = "void registerForZkwMetricsCTSJob(void)_block_invoke";
    _os_log_impl(&dword_1C9A3B000, v0, OS_LOG_TYPE_DEFAULT, "%s: Collecting zkw metrics...", (uint8_t *)&v2, 0xCu);
  }

  v1 = (void *)objc_opt_new();
  objc_msgSend(v1, "postZkwMetrics");

}

void __registerForVerticalModelsTrainingCTSJob_block_invoke()
{
  NSObject *v0;
  void *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  __atxlog_handle_lock_screen();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    v2 = 136315138;
    v3 = "void registerForVerticalModelsTrainingCTSJob(void)_block_invoke";
    _os_log_impl(&dword_1C9A3B000, v0, OS_LOG_TYPE_DEFAULT, "%s: Training vertical models...", (uint8_t *)&v2, 0xCu);
  }

  v1 = (void *)objc_opt_new();
  objc_msgSend(v1, "refreshWebsitePredictions");

}

void __registerForModelScoreHarvestingCTSJob_block_invoke()
{
  NSObject *v0;
  id v1;
  uint8_t v2[16];

  __atxlog_handle_metrics();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1C9A3B000, v0, OS_LOG_TYPE_DEFAULT, "Running model score harvesting...", v2, 2u);
  }

  v1 = objc_alloc_init(MEMORY[0x1E0D811D8]);
  objc_msgSend(v1, "modelScoreHarvesting");

}

void __registerForUpdateInferredModeBiomeStream_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  uint8_t v6[16];
  uint8_t buf[16];

  v2 = a2;
  __atxlog_handle_default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Updating inferred mode Biome stream", buf, 2u);
  }

  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "inferModesForLastDayWithXPCActivity:", v2);

  __atxlog_handle_default();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1C9A3B000, v5, OS_LOG_TYPE_DEFAULT, "Finished", v6, 2u);
  }

}

void __registerForUpdateSuggestedPagesCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  uint8_t v6[16];
  uint8_t buf[16];

  v2 = a2;
  __atxlog_handle_modes();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Updating suggested pages from CTS job", buf, 2u);
  }

  +[ATXSuggestedPagesServer sharedInstance](ATXSuggestedPagesServer, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "prewarmCachedSuggestedPagesWithActivity:", v2);

  __atxlog_handle_modes();
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1C9A3B000, v5, OS_LOG_TYPE_DEFAULT, "Finished updating suggested pages from CTS job", v6, 2u);
  }

}

void __registerForBlendingShadowLoggingCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = a2;
  __atxlog_handle_default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Beginning blending shadow logging XPC activity", v5, 2u);
  }

  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "shadowLogWithXPCActivity:", v2);

}

void __registerForModeActivityLoggingJob_block_invoke()
{
  NSObject *v0;
  uint8_t v1[16];

  __atxlog_handle_default();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1C9A3B000, v0, OS_LOG_TYPE_DEFAULT, "Skipping deprecated mode activity metrics logging...", v1, 2u);
  }

}

void __registerForDigestLoggingJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = a2;
  __atxlog_handle_default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Running notification digest metrics logging...", v5, 2u);
  }

  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "logMetricsWithXPCActivity:", v2);

}

void __registerForDigestGlobalNotificationFeedbackJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = a2;
  __atxlog_handle_default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Updating digest global notification feedback...", v5, 2u);
  }

  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "logGlobalNotificationStatisticsToDigestFeedbackWithXPCActivity:", v2);

}

void __registerForNotificationAndSuggestionDatastorePruning_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = a2;
  __atxlog_handle_default();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Pruning notification and suggestion datastore...", v5, 2u);
  }

  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "pruneDatabaseWithXPCActivity:", v2);

}

void __registerForNotificationAndSuggestionDatastorePruning_block_invoke_484(uint64_t a1, void *a2)
{
  id v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_opt_new();
  objc_msgSend(v3, "pruneNotificationsBasedOnHardLimitsWithXPCActivity:", v2);

}

void __registerForNotificationAndSuggestionDatastorePruning_block_invoke_2(uint64_t a1, void *a2)
{
  id v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_opt_new();
  objc_msgSend(v3, "pruneSuggestionsBasedOnHardLimitsWithXPCActivity:", v2);

}

void __registerForNotificationAndSuggestionDatastorePruning_block_invoke_3()
{
  id v0;

  v0 = (id)objc_opt_new();
  objc_msgSend(v0, "analyze");

}

void __registerForNotificationAndSuggestionDatastorePerfMetricsLogging_block_invoke()
{
  id v0;

  v0 = (id)objc_opt_new();
  objc_msgSend(v0, "notificationAndSuggestionDatastorePerfMetricsLogging");

}

void __registerForATXDataStoreMaintainenceJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  id v3;

  v2 = a2;
  +[_ATXDataStore sharedInstance](_ATXDataStore, "sharedInstance");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "vacuumDatabaseWithActivity:", v2);

}

void __registerForActivitySuggestionFeedbackProcessingCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v2 = a2;
  __atxlog_handle_modes();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C9A3B000, v3, OS_LOG_TYPE_DEFAULT, "Beginning Activity Suggestion Feedback Processing XPC activity", v5, 2u);
  }

  v4 = (void *)objc_opt_new();
  objc_msgSend(v4, "processFeedbackWithXPCActivity:", v2);

}

void __registerForATXSuggestedPagesHomeScreenModificationsMetricsCTSJob_block_invoke()
{
  NSObject *v0;
  void *v1;
  NSObject *v2;
  uint8_t v3[16];
  uint8_t buf[16];

  __atxlog_handle_default();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C9A3B000, v0, OS_LOG_TYPE_DEFAULT, "Started running com.apple.duetexpertd.homeScreenModificationMetricsLogger", buf, 2u);
  }

  v1 = (void *)objc_opt_new();
  objc_msgSend(v1, "logMetrics");

  __atxlog_handle_default();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1C9A3B000, v2, OS_LOG_TYPE_DEFAULT, "Finished running com.apple.duetexpertd.homeScreenModificationMetricsLogger", v3, 2u);
  }

}

void __registerForAmbientMetricsCTSJob_block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1E0D14510];
  v3 = a2;
  objc_msgSend(v2, "log");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 136315138;
    v7 = "void registerForAmbientMetricsCTSJob(void)_block_invoke";
    _os_log_impl(&dword_1C9A3B000, v4, OS_LOG_TYPE_DEFAULT, "%s: starting Ambient metrics collection", (uint8_t *)&v6, 0xCu);
  }

  v5 = (void *)objc_opt_new();
  objc_msgSend(v5, "collectWithActivity:", v3);

}

void __registerForTimelineRelevanceTablePruningCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_opt_new();
  objc_msgSend(v3, "pruneTimelineRelevanceTableWithXPCActivity:", v2);

}

void languagePrefChanged()
{
  NSObject *v0;
  id v1;
  void *v2;
  uint8_t v3[16];

  __atxlog_handle_default();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1C9A3B000, v0, OS_LOG_TYPE_DEFAULT, "Language change detected - restarting duetexpertd.", v3, 2u);
  }

  v1 = objc_alloc(MEMORY[0x1E0C99EA0]);
  v2 = (void *)objc_msgSend(v1, "initWithSuiteName:", *MEMORY[0x1E0CF9510]);
  objc_msgSend(v2, "setBool:forKey:", 1, CFSTR("ATXInitializationLanguageChangeDirty"));
  xpc_transaction_exit_clean();

}

uint64_t __updatePredictionsIfLanguageChanged_block_invoke(uint64_t a1)
{
  ATXUpdatePredictionsImmediatelyWithReason(20);
  return objc_msgSend(*(id *)(a1 + 32), "setBool:forKey:", 0, CFSTR("ATXInitializationLanguageChangeDirty"));
}

__CFString *ATXAppLaunchFromToString(uint64_t a1)
{
  __CFString *v2;
  __CFString *result;

  v2 = CFSTR("AppLaunchSpotlight");
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("AppLaunchPage%lu"), a1);
      v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
      goto LABEL_3;
    case 12:
      result = CFSTR("AppLaunchSpotlightSearch");
      break;
    case 13:
      result = CFSTR("AppLaunchSpotlightAppPred");
      break;
    case 14:
      result = CFSTR("AppLaunchWidget");
      break;
    case 15:
      result = CFSTR("AppLaunchWidgetAppPred");
      break;
    case 16:
      result = CFSTR("AppLaunchDock");
      break;
    case 17:
      result = CFSTR("AppLaunchNotification");
      break;
    case 18:
      result = CFSTR("AppLaunchBanner");
      break;
    case 19:
      result = CFSTR("AppLaunchSiri");
      break;
    case 20:
      result = CFSTR("AppLaunchAppSwitcher");
      break;
    case 21:
      result = CFSTR("AppLaunchBreadCrumb");
      break;
    case 22:
    case 23:
      result = CFSTR("unknown");
      break;
    default:
LABEL_3:
      result = v2;
      break;
  }
  return result;
}

void sub_1C9C0A9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0ABD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0ADDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0AFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0B220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0B45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0C114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9C0E074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0E1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0E46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0E678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0E878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0EA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0EB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0ECB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0EDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0EF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0F1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0F3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0F61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0FBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0FCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0FDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0FED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C0FFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C102A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

const char *OUTLINED_FUNCTION_9_2(SEL sel)
{
  return sel_getName(sel);
}

void sub_1C9C10974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C10FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a42, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C12940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C12B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C15188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C1595C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C15B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C15D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C15F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C177F8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1C9C18178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C1A0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C1A768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C1AAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9C1AC5C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1C9C1B02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9C1B24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C1B4FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C1D46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C1D5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C1D6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C1D780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C1D8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t offsetFromAppendingData(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  while ((objc_msgSend(v3, "length") & 0x1F) != 0)
    objc_msgSend(v3, "appendBytes:length:", "", 1);
  v5 = objc_msgSend(v3, "length");
  objc_msgSend(v3, "appendData:", v4);

  return v5;
}

void sub_1C9C24838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C24A6C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

id ATXAppsThatCannotShowContentInSearch()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;

  v0 = (void *)CFPreferencesCopyValue(CFSTR("SBSearchDisabledBundles"), CFSTR("com.apple.spotlightui"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  v1 = v0;
  if (v0)
  {
    v2 = v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D20], "array");
    v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  v3 = v2;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithArray:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeObject:", CFSTR("com.apple.CloudDocs.MobileDocumentsFileProvider"));
  objc_msgSend(v4, "removeObject:", CFSTR("com.apple.CloudDocs.iCloudDriveFileProvider"));
  objc_msgSend(v4, "removeObject:", CFSTR("com.apple.CloudDocs.iCloudDriveFileProviderManaged"));
  if (objc_msgSend(v3, "containsObject:", CFSTR("com.apple.DocumentsApp")))
  {
    objc_msgSend(v4, "addObject:", CFSTR("com.apple.CloudDocs.MobileDocumentsFileProvider"));
    objc_msgSend(v4, "addObject:", CFSTR("com.apple.CloudDocs.iCloudDriveFileProvider"));
    objc_msgSend(v4, "addObject:", CFSTR("com.apple.CloudDocs.iCloudDriveFileProviderManaged"));
    objc_msgSend(v4, "addObject:", CFSTR("com.apple.FileProvider.LocalStorage"));
  }
  objc_msgSend(MEMORY[0x1E0C99E20], "setWithArray:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_1C9C25DC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C28EF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C9C28F90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9C29138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C9C295B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1C9C29730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C9C29890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1C9C29A90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9C29C8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9C29DB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9C29FF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9C2A050(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_1C9C2A134(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9C2A1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;

  _Unwind_Resume(a1);
}

void sub_1C9C2A2E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<ATXPredictionItem>::resize(uint64_t a1, unint64_t a2)
{
  id *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = *(id **)(a1 + 8);
  v4 = 0xDAB7EC1DD3431B57 * (((uint64_t)v3 - *(_QWORD *)a1) >> 5);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<ATXPredictionItem>::__append((char **)a1, v6);
  }
  else if (!v5)
  {
    v7 = *(_QWORD *)a1 + 3296 * a2;
    while (v3 != (id *)v7)
    {
      v3 -= 412;

    }
    *(_QWORD *)(a1 + 8) = v7;
  }
}

void sub_1C9C2A588(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9C2A6E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::__deallocate_node(uint64_t a1, id *a2)
{
  id *v2;
  id *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::__deallocate_node(a1, *(id **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t **std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::find<ATXAction * {__strong}>(_QWORD *a1, id *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **i;
  unint64_t v12;

  v4 = objc_msgSend(*a2, "hash");
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = (uint64_t **)*i)
  {
    v12 = (unint64_t)i[1];
    if (v12 == v6)
    {
      if ((objc_msgSend(i[2], "isEqual:", *a2) & 1) != 0)
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

void std::vector<ATXPredictionItem>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E82D98F0, MEMORY[0x1E0DE42E0]);
}

void sub_1C9C2AAB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

char *std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__emplace_unique_key_args<NSString * {__strong},NSString * {__strong}&,ATXPredictionItem>(uint64_t a1, id *a2, id *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v9 = objc_msgSend(*a2, "hash");
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (char *)*v14;
      if (*v14)
      {
        do
        {
          v16 = *((_QWORD *)v15 + 1);
          if (v16 == v10)
          {
            if ((objc_msgSend(*((id *)v15 + 2), "isEqualToString:", *a2) & 1) != 0)
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = *(char **)v15;
        }
        while (v15);
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v15 = (char *)operator new(0xCF8uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v10;
  v18 = *a3;
  v19 = *a4;
  *a4 = 0;
  *((_QWORD *)v15 + 2) = v18;
  *((_QWORD *)v15 + 3) = v19;
  memcpy(v15 + 32, a4 + 1, 0xCD2uLL);
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)v15 = *v27;
LABEL_38:
    *v27 = v15;
    goto LABEL_39;
  }
  *(_QWORD *)v15 = *v17;
  *v17 = v15;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)v15)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_1C9C2AD50(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ATXPredictionItem>::__append(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  char *v16;
  char *v17;
  float *v18;
  float v19;
  float *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  int64x2_t v27;
  char *v28;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0xDAB7EC1DD3431B57 * ((uint64_t)&v6[-v7] >> 5) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 3296 * a2;
      v14 = -31337.0;
      do
      {
        *(_QWORD *)v7 = 0;
        *(float *)(v7 + 3284) = v14;
        v15 = 16;
        *(_WORD *)(v7 + 3288) = 0;
        do
        {
          *(float *)(v7 + v15) = v14;
          v15 += 4;
        }
        while (v15 != 3284);
        v7 += 3296;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = (char *)v7;
  }
  else
  {
    v8 = 0xDAB7EC1DD3431B57 * ((v7 - (uint64_t)*a1) >> 5);
    v9 = v8 + a2;
    if (v8 + a2 > 0x13E22CBCE4A902)
      std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]();
    v10 = 0xDAB7EC1DD3431B57 * ((v5 - *a1) >> 5);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x9F1165E725481)
      v11 = 0x13E22CBCE4A902;
    else
      v11 = v9;
    v32 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ATXPredictionItem>>(result, v11);
    else
      v12 = 0;
    v16 = &v12[3296 * v8];
    v17 = &v12[3296 * v11];
    v18 = (float *)&v16[3296 * a2];
    v19 = -31337.0;
    v20 = (float *)v16;
    do
    {
      *(_QWORD *)v20 = 0;
      v20[821] = v19;
      v21 = 4;
      *((_WORD *)v20 + 1644) = 0;
      do
        v20[v21++] = v19;
      while (v21 != 821);
      v20 += 824;
    }
    while (v20 != v18);
    v23 = *a1;
    v22 = (unint64_t)a1[1];
    if ((char *)v22 == *a1)
    {
      v27 = vdupq_n_s64(v22);
    }
    else
    {
      do
      {
        v24 = v22 - 3296;
        v25 = *(_QWORD *)(v22 - 3296);
        v26 = v16 - 3288;
        v16 -= 3296;
        *(_QWORD *)(v22 - 3296) = 0;
        *(_QWORD *)v16 = v25;
        memcpy(v26, (const void *)(v22 - 3288), 0xCD2uLL);
        v22 = v24;
      }
      while ((char *)v24 != v23);
      v27 = *(int64x2_t *)a1;
    }
    *a1 = v16;
    a1[1] = (char *)v18;
    v30 = v27;
    v28 = a1[2];
    a1[2] = v17;
    v31 = v28;
    v29 = v27.i64[0];
    return std::__split_buffer<ATXPredictionItem>::~__split_buffer((uint64_t)&v29);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::__emplace_unique_key_args<ATXAction * {__strong},ATXAction * {__strong},long &>(uint64_t a1, id *a2, uint64_t *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v9 = objc_msgSend(*a2, "hash");
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((objc_msgSend(*((id *)i + 2), "isEqual:", *a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a3;
  *a3 = 0;
  *((_QWORD *)i + 2) = v18;
  *((_DWORD *)i + 6) = *a4;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)i = *v26;
LABEL_38:
    *v26 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v25 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v27 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11)
        v27 %= v11;
    }
    else
    {
      v27 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1C9C2B1A4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ATXAction * {__strong},int>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ATXAction * {__strong},int>,void *>>>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void sub_1C9C2B3E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9C2BDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11)
{
  id *v11;
  uint64_t v12;

  objc_destroyWeak(v11);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak((id *)(v12 - 176));
  _Unwind_Resume(a1);
}

void sub_1C9C2C2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9C2C620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9C2EA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXShouldRevokeOldLockScreenPrediction(ATXAction *a1, ATXAction *a2)
{
  ATXAction *v3;
  ATXAction *v4;
  uint64_t v5;

  v3 = a1;
  v4 = a2;
  if (v3)
    v5 = -[ATXAction isEqual:](v3, "isEqual:", v4) ^ 1;
  else
    v5 = 0;

  return v5;
}

void sub_1C9C31D08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ATXShouldPostNewLockScreenPrediction(ATXAction *a1, ATXAction *a2)
{
  ATXAction *v3;
  ATXAction *v4;
  ATXAction *v5;
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v4)
    v6 = -[ATXAction isEqual:](v4, "isEqual:", v3) ^ 1;
  else
    v6 = 0;

  return v6;
}

void sub_1C9C31D78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unint64_t ATXArrayDiff(void *a1, void *a2)
{
  id v3;
  id v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v3 = a1;
  v4 = a2;
  v5 = objc_msgSend(v3, "count");
  v6 = objc_msgSend(v4, "count");
  if (v5 >= v6)
    v7 = v6;
  else
    v7 = v5;
  if (v7 < 1)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    for (i = 0; i != v7; ++i)
    {
      objc_msgSend(v3, "objectAtIndexedSubscript:", i);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "objectAtIndexedSubscript:", i);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "isEqualToString:", v11);

      v8 += v12 ^ 1u;
    }
  }
  v13 = objc_msgSend(v3, "count");
  v14 = objc_msgSend(v4, "count");
  if (v13 <= v14)
    v15 = v14;
  else
    v15 = v13;
  v16 = v8 - v7 + v15;

  return v16;
}

void sub_1C9C31E88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unint64_t ATXCacheUpdateDiff(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unint64_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _BYTE v29[128];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)objc_opt_new();
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v6 = v3;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v25;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v25 != v8)
          objc_enumerationMutation(v6);
        objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * v9), "actionKey");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObject:", v10);

        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
    }
    while (v7);
  }

  v11 = (void *)objc_opt_new();
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v12 = v4;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
  if (v13)
  {
    v14 = *(_QWORD *)v21;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v21 != v14)
          objc_enumerationMutation(v12);
        objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * v15), "predictedItem");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "actionKey");
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        if (v17)
          objc_msgSend(v11, "addObject:", v17);

        ++v15;
      }
      while (v13 != v15);
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
    }
    while (v13);
  }

  v18 = ATXArrayDiff(v5, v11);
  return v18;
}

void sub_1C9C320DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

unint64_t ATXCacheUpdateSetDiff(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)objc_opt_new();
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v6 = v3;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v26;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v26 != v8)
          objc_enumerationMutation(v6);
        objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * v9), "actionKey");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "addObject:", v10);

        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
    }
    while (v7);
  }

  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v11 = v4;
  v12 = 0;
  v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
  if (v13)
  {
    v14 = *(_QWORD *)v22;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v22 != v14)
          objc_enumerationMutation(v11);
        objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * v15), "predictedItem");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "actionKey");
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        if ((objc_msgSend(v5, "containsObject:", v17) & 1) != 0)
          objc_msgSend(v5, "removeObject:", v17);
        else
          ++v12;

        ++v15;
      }
      while (v13 != v15);
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
    }
    while (v13);
  }

  v18 = objc_msgSend(v5, "count");
  if (v12 <= v18)
    v19 = v18;
  else
    v19 = v12;

  return v19;
}

void sub_1C9C32384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t ATXWriteActionPredictionChunks(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  int v10;
  int *v11;
  char *v12;
  uint8_t buf[4];
  id v14;
  __int16 v15;
  int v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = objc_retainAutorelease(v3);
  v6 = open_dprotected_np((const char *)objc_msgSend(v5, "UTF8String"), 1537, 3, 0, 420);
  if (v6 < 0)
  {
    __atxlog_handle_default();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v10 = *__error();
      v11 = __error();
      v12 = strerror(*v11);
      *(_DWORD *)buf = 138412802;
      v14 = v5;
      v15 = 1024;
      v16 = v10;
      v17 = 2080;
      v18 = v12;
      _os_log_error_impl(&dword_1C9A3B000, v8, OS_LOG_TYPE_ERROR, "Error opening %@: [%i] %s", buf, 0x1Cu);
    }

    v7 = 0;
  }
  else
  {
    v7 = ATXCacheFileWriteChunks();
    close(v6);
  }

  return v7;
}

void sub_1C9C32544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ATXActionExperienceForActions(double a1, double a2, double a3, int a4, double a5, int a6)
{
  double v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;

  v6 = (double)a4;
  if (a1 > a3)
  {
    v8 = v6 == a2;
    v7 = v6 >= a2;
  }
  else
  {
    v7 = 1;
    v8 = 0;
  }
  if (v8 || !v7)
    return 1;
  if ((double)a6 <= a2)
  {
    v9 = a1 == a5;
    v10 = a1 < a5;
  }
  else
  {
    v9 = 1;
    v10 = 0;
  }
  if (v10 || v9)
    return 3;
  else
    return 2;
}

id ATXSortedActionResults(void *a1)
{
  void *v1;

  v1 = (void *)objc_msgSend(a1, "mutableCopy");
  objc_msgSend(v1, "sortWithOptions:usingComparator:", 16, &__block_literal_global_100);
  return v1;
}

void sub_1C9C325D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___Z22ATXSortedActionResultsP7NSArrayIP15ATXActionResultE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  void *v7;
  float v8;
  float v9;
  void *v10;
  void *v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a2;
  v5 = a3;
  objc_msgSend(v4, "scoredAction");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    objc_msgSend(v4, "scoredAction");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "score");
    v9 = v8;

  }
  else
  {
    v9 = -INFINITY;
  }

  objc_msgSend(v5, "scoredAction");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    objc_msgSend(v5, "scoredAction");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "score");
    v13 = v12;

  }
  else
  {
    v13 = -INFINITY;
  }

  if (v9 <= v13)
    v14 = 0;
  else
    v14 = -1;
  if (v9 < v13)
    v15 = 1;
  else
    v15 = v14;

  return v15;
}

void sub_1C9C326BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C9C327BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

BOOL ATXPBAppModeEntityScoreMetricsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_25;
        case 2u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_25;
        case 3u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
          goto LABEL_25;
        case 4u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
LABEL_25:
          v19 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          goto LABEL_26;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_26:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9C34FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C3603C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C362E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C38938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a70;
  uint64_t v70;

  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a70, 8);
  _Block_object_dispose((const void *)(v70 - 248), 8);
  _Block_object_dispose((const void *)(v70 - 216), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C3ACF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C3BDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C3C148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C3E300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C3E638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void nukeDbFiles(void *a1)
{
  id v1;
  id v2;
  void *v3;
  id v4;

  v1 = objc_retainAutorelease(a1);
  unlink((const char *)objc_msgSend(v1, "UTF8String"));
  objc_msgSend(v1, "stringByAppendingString:", CFSTR("-wal"));
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  unlink((const char *)objc_msgSend(v2, "UTF8String"));

  objc_msgSend(v1, "stringByAppendingString:", CFSTR("-shm"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = objc_retainAutorelease(v3);
  unlink((const char *)objc_msgSend(v4, "UTF8String"));

}

void sub_1C9C3EAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C3F158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C3F7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C414A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 144), 8);
  _Block_object_dispose((const void *)(v30 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C41F5C()
{
  objc_end_catch();
  JUMPOUT(0x1C9C41F64);
}

void sub_1C9C448C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C44D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C45BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void removeActionDataByBundleIdId(void *a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD v6[5];
  _QWORD v7[5];
  _QWORD v8[5];
  _QWORD v9[5];
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  __atxlog_handle_deletions();
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v11 = a2;
    _os_log_impl(&dword_1C9A3B000, v4, OS_LOG_TYPE_DEFAULT, "Deleting actions with bundleIdId: %lld", buf, 0xCu);
  }

  v5 = MEMORY[0x1E0C809B0];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __removeActionDataByBundleIdId_block_invoke;
  v9[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  v9[4] = a2;
  objc_msgSend(v3, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM alogBundleId WHERE id=?"), v9, 0, 0);
  v8[0] = v5;
  v8[1] = 3221225472;
  v8[2] = __removeActionDataByBundleIdId_block_invoke_2;
  v8[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  v8[4] = a2;
  objc_msgSend(v3, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM slotSetKey WHERE alogId IN (SELECT id FROM alog WHERE bundleID=?)"), v8, 0, 0);
  v7[0] = v5;
  v7[1] = 3221225472;
  v7[2] = __removeActionDataByBundleIdId_block_invoke_3;
  v7[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  v7[4] = a2;
  objc_msgSend(v3, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM alog WHERE bundleId=?"), v7, 0, 0);
  v6[0] = v5;
  v6[1] = 3221225472;
  v6[2] = __removeActionDataByBundleIdId_block_invoke_4;
  v6[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  v6[4] = a2;
  objc_msgSend(v3, "prepAndRunQuery:onPrep:onRow:onError:", CFSTR("DELETE FROM afeedback WHERE bundleId=?"), v6, 0, 0);

}

void sub_1C9C45ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C465C0(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x210], 8);
  _Unwind_Resume(a1);
}

void sub_1C9C473A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a67;
  char a71;

  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x210], 8);
  _Block_object_dispose(&STACK[0x230], 8);
  _Unwind_Resume(a1);
}

void sub_1C9C484F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C48DBC()
{
  objc_end_catch();
  JUMPOUT(0x1C9C48DC4);
}

void sub_1C9C49404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C499C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C4A268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void sub_1C9C4A514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C4A750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C4AC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C4C50C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C4D1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a38, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C4D670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a54, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C4DF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C4E1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C4E47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C507CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C510E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C51B58(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t __removeActionDataByBundleIdId_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindParam:toInt64:", 1, *(_QWORD *)(a1 + 32));
}

uint64_t __removeActionDataByBundleIdId_block_invoke_2(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindParam:toInt64:", 1, *(_QWORD *)(a1 + 32));
}

uint64_t __removeActionDataByBundleIdId_block_invoke_3(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindParam:toInt64:", 1, *(_QWORD *)(a1 + 32));
}

uint64_t __removeActionDataByBundleIdId_block_invoke_4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "bindParam:toInt64:", 1, *(_QWORD *)(a1 + 32));
}

void OUTLINED_FUNCTION_2_9(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_10_0(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_0_12(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_error_impl(a1, v4, OS_LOG_TYPE_ERROR, a4, v5, 0xCu);
}

void sub_1C9C58F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXMagicalMomentsPBMMShownTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v15)
          v16 = 1;
        else
          v16 = (v10 & 7) == 4;
        if (!v16)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v17 = 0;
              v18 = 0;
              v19 = 0;
              *(_BYTE *)(a1 + 40) |= 1u;
              break;
            case 2u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 24;
              goto LABEL_31;
            case 3u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 8;
              goto LABEL_31;
            case 4u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 32;
LABEL_31:
              v26 = *(void **)(a1 + v25);
              *(_QWORD *)(a1 + v25) = v24;

              goto LABEL_36;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_36:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_33;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_35;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_35:
          *(_DWORD *)(a1 + 16) = v19;
          goto LABEL_36;
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9C5AB34(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C5C710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 168), 8);
  _Block_object_dispose((const void *)(v28 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C5D178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9C5D538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9C5DFD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C5E4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL ATXPBBlendingSessionClientModelUpdateReadFrom(char *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  ATXPBBlendingSessionClientModelSuggestion *v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 16;
LABEL_26:
        v20 = *(ATXPBBlendingSessionClientModelSuggestion **)&a1[v19];
        *(_QWORD *)&a1[v19] = v18;
LABEL_27:

        goto LABEL_29;
      }
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 8;
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_29:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v20 = objc_alloc_init(ATXPBBlendingSessionClientModelSuggestion);
    objc_msgSend(a1, "addSuggestion:", v20);
    if (!PBReaderPlaceMark()
      || (ATXPBBlendingSessionClientModelSuggestionReadFrom((uint64_t)v20, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_27;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t ATXTimelineRelevancePBTimelineRelevanceContainerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  ATXTimelineRelevancePBTimelineRelevanceScoreEntry *v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  void *v44;
  uint64_t v45;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 80;
        goto LABEL_65;
      case 2u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 96;
        goto LABEL_65;
      case 3u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 32;
        goto LABEL_65;
      case 4u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_72;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_72:
        *(_DWORD *)(a1 + 88) = v22;
        goto LABEL_86;
      case 5u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 108) |= 1u;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                v28 = 0;
                goto LABEL_76;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v28 = 0;
LABEL_76:
        v45 = 8;
        goto LABEL_85;
      case 6u:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        *(_BYTE *)(a1 + 108) |= 4u;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              v14 = v33++ >= 9;
              if (v14)
              {
                v34 = 0;
                goto LABEL_80;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v34 = 0;
LABEL_80:
        *(_BYTE *)(a1 + 104) = v34 != 0;
        goto LABEL_86;
      case 7u:
        v38 = objc_alloc_init(ATXTimelineRelevancePBTimelineRelevanceScoreEntry);
        objc_msgSend((id)a1, "addTimelineRelevanceScore:", v38);
        if (!PBReaderPlaceMark()
          || (ATXTimelineRelevancePBTimelineRelevanceScoreEntryReadFrom((uint64_t)v38, a2) & 1) == 0)
        {
          goto LABEL_88;
        }
        goto LABEL_68;
      case 8u:
        v38 = objc_alloc_init(ATXTimelineRelevancePBTimelineRelevanceSuggestion);
        objc_msgSend((id)a1, "addTimelineRelevanceSuggestion:", v38);
        if (!PBReaderPlaceMark() || !ATXTimelineRelevancePBTimelineRelevanceSuggestionReadFrom(v38, a2))
          goto LABEL_88;
        goto LABEL_68;
      case 9u:
        v38 = objc_alloc_init(ATXTimelineRelevancePBTimelineRelevanceRotation);
        objc_msgSend((id)a1, "addRotation:", v38);
        if (!PBReaderPlaceMark()
          || (ATXTimelineRelevancePBTimelineRelevanceRotationReadFrom((uint64_t)v38, a2) & 1) == 0)
        {
          goto LABEL_88;
        }
        goto LABEL_68;
      case 0xAu:
        v39 = 0;
        v40 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 108) |= 2u;
        while (2)
        {
          v41 = *v3;
          v42 = *(_QWORD *)(a2 + v41);
          if (v42 == -1 || v42 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v42);
            *(_QWORD *)(a2 + v41) = v42 + 1;
            v28 |= (unint64_t)(v43 & 0x7F) << v39;
            if (v43 < 0)
            {
              v39 += 7;
              v14 = v40++ >= 9;
              if (v14)
              {
                v28 = 0;
                goto LABEL_84;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v28 = 0;
LABEL_84:
        v45 = 16;
LABEL_85:
        *(_QWORD *)(a1 + v45) = v28;
        goto LABEL_86;
      case 0xBu:
        v38 = objc_alloc_init(ATXTimelineRelevancePBTimelineRelevanceStackConfigSummary);
        objc_msgSend((id)a1, "addStackConfigSummary:", v38);
        if (!PBReaderPlaceMark()
          || (ATXTimelineRelevancePBTimelineRelevanceStackConfigSummaryReadFrom((uint64_t)v38, a2) & 1) == 0)
        {
          goto LABEL_88;
        }
        goto LABEL_68;
      case 0xCu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 24;
LABEL_65:
        v44 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_86;
      case 0xDu:
        v38 = objc_alloc_init(ATXTimelineRelevancePBFeatureVector);
        objc_storeStrong((id *)(a1 + 40), v38);
        if (PBReaderPlaceMark() && ATXTimelineRelevancePBFeatureVectorReadFrom((uint64_t)v38, a2))
        {
LABEL_68:
          PBReaderRecallMark();

LABEL_86:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_88:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_86;
    }
  }
}

void sub_1C9C671D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9C676AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17)
{

  _Unwind_Resume(a1);
}

void sub_1C9C687A0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 120));
  _Unwind_Resume(a1);
}

void sub_1C9C69C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C69DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C69F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C6AF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9C6B098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id personalityStringFromComplication(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = (objc_class *)MEMORY[0x1E0CB3940];
  v2 = a1;
  v3 = [v1 alloc];
  objc_msgSend(v2, "extensionBundleIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "kind");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = (void *)objc_msgSend(v3, "initWithFormat:", CFSTR("%@-%@"), v4, v5);
  return v6;
}

void sub_1C9C6DAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9C6DBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C6DCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C6DE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C6E1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C6E3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C6E564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C6E808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C6EBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C6F0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_3_11(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x1Cu);
}

void sub_1C9C722B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C77818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C77F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a59, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C786B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C791CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9C7DE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getPRSServiceClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getPRSServiceClass_softClass;
  v7 = getPRSServiceClass_softClass;
  if (!getPRSServiceClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getPRSServiceClass_block_invoke;
    v3[3] = &unk_1E82DA7D8;
    v3[4] = &v4;
    __getPRSServiceClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1C9C7DF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPRSServiceClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!PosterBoardServicesLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E82E4888;
    v5 = 0;
    PosterBoardServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!PosterBoardServicesLibraryCore_frameworkLibrary)
    __getPRSServiceClass_block_invoke_cold_1(&v3);
  result = objc_getClass("PRSService");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getPRSServiceClass_block_invoke_cold_2();
  getPRSServiceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1C9C7FA10(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C809A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C80CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C81B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9C82804(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C82B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location,char a30)
{
  id *v30;
  uint64_t v31;

  objc_destroyWeak(v30);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v31 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C83A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 144), 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C87070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1C9C87C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSGSuggestionsServiceClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!CoreSuggestionsLibraryCore_frameworkLibrary)
  {
    v4 = xmmword_1E82E4BB0;
    v5 = 0;
    CoreSuggestionsLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CoreSuggestionsLibraryCore_frameworkLibrary)
    __getSGSuggestionsServiceClass_block_invoke_cold_1(&v3);
  result = objc_getClass("SGSuggestionsService");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getSGSuggestionsServiceClass_block_invoke_cold_2();
  getSGSuggestionsServiceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t ATXMPBInstalledAppClipSessionEngagementTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  void *v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_39;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_41;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_41:
          v32 = 24;
          goto LABEL_46;
        case 2u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 16;
          goto LABEL_37;
        case 3u:
          v26 = 0;
          v27 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 2u;
          break;
        case 4u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 8;
LABEL_37:
          v31 = *(void **)(a1 + v25);
          *(_QWORD *)(a1 + v25) = v24;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v28 = *v3;
        v29 = *(_QWORD *)(a2 + v28);
        if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          break;
        v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
        *(_QWORD *)(a2 + v28) = v29 + 1;
        v19 |= (unint64_t)(v30 & 0x7F) << v26;
        if ((v30 & 0x80) == 0)
          goto LABEL_43;
        v26 += 7;
        v14 = v27++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_45;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_45:
      v32 = 28;
LABEL_46:
      *(_DWORD *)(a1 + v32) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9C894CC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1CAA485C0](v2, 0x1060C40D5FD4D19);

  _Unwind_Resume(a1);
}

void sub_1C9C89558(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1C9C89680(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1C9C899CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9C89A50(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

float entropy(uint64_t ***a1, uint64_t a2, int a3)
{
  float v3;
  int v6;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  size_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t *v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  double v29;
  float v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  float v36;
  float v37;
  int v39;
  id v40;
  id v41;
  uint64_t v42;
  void *memptr;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v3 = 0.0;
  if ((_DWORD)a2 != 0xFFFF && a3 != 0xFFFF)
    return v3;
  v6 = a2;
  v8 = (**a1)[1] - ***a1;
  v9 = v8 | 0xF;
  memptr = 0;
  v44 = 0;
  if ((v8 | 0xF) > 0x800)
  {
    v10 = malloc_type_posix_memalign(&memptr, 0x10uLL, v8, 0xB95B6151uLL);
    LOBYTE(v44) = 0;
    if ((_DWORD)v10)
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("malloc failed"), 0);
      v40 = (id)objc_claimAutoreleasedReturnValue();
      objc_exception_throw(v40);
    }
    v12 = (float *)memptr;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1, a2);
    bzero((char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v8 | 0xF);
    v12 = (float *)(((unint64_t)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0) + 15) & 0xFFFFFFFFFFFFFFF0);
  }
  v13 = v8 | 3;
  memptr = 0;
  v44 = 0;
  if ((v8 | 3) > 0x800)
  {
    v39 = malloc_type_posix_memalign(&memptr, 8uLL, v8, 0x263F45D7uLL);
    LOBYTE(v44) = 0;
    if (v39)
    {
      objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99850], CFSTR("malloc failed"), 0);
      v41 = (id)objc_claimAutoreleasedReturnValue();
      objc_exception_throw(v41);
    }
    v14 = (char *)memptr;
  }
  else
  {
    MEMORY[0x1E0C80A78](v10, v11);
    v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v14, v13);
  }
  if ((a3 & v6) == 0xFFFF)
  {
    v15 = **a1;
    v16 = *v15;
    if (v15[1] != *v15)
    {
      v17 = 0;
      v18 = 0uLL;
      v19 = 0uLL;
      do
      {
        v20 = (float32x4_t *)(v16 + 32 * v17);
        v21 = *v20;
        v22 = v20[1];
        v19 = vaddq_f32(v19, v22);
        v18 = vaddq_f32(v18, *v20);
        v23 = (float32x4_t *)&v12[8 * v17];
        *v23 = v21;
        v23[1] = v22;
        ++v17;
        v15 = **a1;
        v16 = *v15;
      }
      while (v17 < (v15[1] - *v15) >> 5);
    }
    v27 = *((_DWORD *)v15 + 6);
LABEL_29:
    if (v27 < 1)
    {
      v3 = 0.0;
    }
    else
    {
      cblas_sscal_NEWLAPACK();
      LODWORD(memptr) = (v27 + 7) & 0xFFFFFFF8;
      vvlog2f((float *)v14, v12, (const int *)&memptr);
      cblas_sdot_NEWLAPACK();
      v3 = -v37;
    }
    goto LABEL_32;
  }
  if (v6 == 0xFFFF)
  {
    v24 = **a1;
    v25 = v24[3];
    if (v25)
    {
      v26 = 0;
      v27 = 0;
      v28 = v24[4];
      v29 = 0.0;
      do
      {
        if (*(unsigned __int16 *)(v28 + 4 * v26) == a3)
        {
          v30 = *(float *)(*v24 + 4 * v26);
          v29 = v29 + v30;
          v12[v27++] = v30;
        }
        ++v26;
      }
      while (v25 > v26);
      goto LABEL_29;
    }
  }
  else
  {
    v31 = **a1;
    v32 = v31[3];
    if (v32)
    {
      v33 = 0;
      v27 = 0;
      v34 = v31[4];
      v35 = 0.0;
      do
      {
        if (*(unsigned __int16 *)(v34 + 4 * v33 + 2) == v6)
        {
          v36 = *(float *)(*v31 + 4 * v33);
          v35 = v35 + v36;
          v12[v27++] = v36;
        }
        ++v33;
      }
      while (v32 > v33);
      goto LABEL_29;
    }
  }
LABEL_32:
  if (v13 >= 0x801)
    free(v14);
  if (v9 >= 0x801)
    free(v12);
  if (fabsf(v3) == INFINITY)
    return 0.0;
  return v3;
}

void sub_1C9C89EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C9C8A054(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C8A1B4(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void _ZN12_GLOBAL__N_110SimdVectorIDv8_ffE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  void *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  void *v34[2];

  v4 = *(_QWORD *)(a1 + 24);
  v5 = (a2 + 7) >> 3;
  v6 = *(char **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (v7 - *(_QWORD *)a1) >> 5;
  if (v5 <= v8)
  {
    if (v5 >= v8)
      goto LABEL_21;
    v21 = &v6[32 * v5];
    goto LABEL_15;
  }
  v9 = v5 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (v5 - v8 <= (v10 - v7) >> 5)
  {
    bzero(*(void **)(a1 + 8), 32 * v9);
    v21 = (char *)(v7 + 32 * v9);
LABEL_15:
    *(_QWORD *)(a1 + 8) = v21;
    goto LABEL_21;
  }
  if ((a2 + 7) >> 62)
    std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]();
  v11 = v10 - (_QWORD)v6;
  if (v11 >> 4 > v5)
    v5 = v11 >> 4;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
    v12 = 0x7FFFFFFFFFFFFFFLL;
  else
    v12 = v5;
  _ZNSt3__114__split_bufferIDv8_fRN12_GLOBAL__N_120SimdAlignedAllocatorIS1_EEEC1EmmS5_(&v32, v12, v8, a1 + 16);
  v13 = (char *)v34[0];
  bzero(v34[0], 32 * v9);
  v14 = &v13[32 * v9];
  v34[0] = v14;
  v16 = *(char **)a1;
  v15 = *(char **)(a1 + 8);
  v17 = v33;
  if (v15 == *(char **)a1)
  {
    v20 = *(char **)(a1 + 8);
  }
  else
  {
    do
    {
      v18 = *((_OWORD *)v15 - 2);
      v19 = *((_OWORD *)v15 - 1);
      v15 -= 32;
      *((_OWORD *)v17 - 2) = v18;
      *((_OWORD *)v17 - 1) = v19;
      v17 -= 32;
    }
    while (v15 != v16);
    v20 = *(char **)a1;
    v15 = *(char **)(a1 + 8);
    v14 = (char *)v34[0];
  }
  *(_QWORD *)a1 = v17;
  *(_QWORD *)(a1 + 8) = v14;
  v22 = *(void **)(a1 + 16);
  *(void **)(a1 + 16) = v34[1];
  v34[0] = v15;
  v34[1] = v22;
  v32 = v20;
  v33 = v20;
  if (v15 != v20)
    v34[0] = &v15[(v20 - v15 + 31) & 0xFFFFFFFFFFFFFFE0];
  if (v20)
    free(v20);
LABEL_21:
  *(_QWORD *)(a1 + 24) = a2;
  if (v4 > a2)
  {
    v23 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5;
    if (v23 < (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
    {
      _ZNSt3__114__split_bufferIDv8_fRN12_GLOBAL__N_120SimdAlignedAllocatorIS1_EEEC1EmmS5_(&v32, v23, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5, a1 + 16);
      v25 = *(char **)a1;
      v24 = *(char **)(a1 + 8);
      v26 = v33;
      if (v24 == *(char **)a1)
      {
        v29 = *(char **)(a1 + 8);
      }
      else
      {
        do
        {
          v27 = *((_OWORD *)v24 - 2);
          v28 = *((_OWORD *)v24 - 1);
          v24 -= 32;
          *((_OWORD *)v26 - 2) = v27;
          *((_OWORD *)v26 - 1) = v28;
          v26 -= 32;
        }
        while (v24 != v25);
        v29 = *(char **)a1;
        v24 = *(char **)(a1 + 8);
      }
      *(_QWORD *)a1 = v26;
      v30 = *(void **)(a1 + 16);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v34;
      v34[0] = v24;
      v34[1] = v30;
      v32 = v29;
      v33 = v29;
      if (v24 != v29)
        v34[0] = &v24[(v29 - v24 + 31) & 0xFFFFFFFFFFFFFFE0];
      if (v29)
        free(v29);
    }
    v31 = *(_QWORD *)(a1 + 24);
    if (v31)
      bzero((void *)(*(_QWORD *)a1 + 4 * v31), *(_QWORD *)(a1 + 8) - (*(_QWORD *)a1 + 4 * v31));
  }
}

void sub_1C9C8A3D4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1C9C8A3A0);
}

void _ZN12_GLOBAL__N_110SimdVectorIDv8_ijE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  void *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  void *v34[2];

  v4 = *(_QWORD *)(a1 + 24);
  v5 = (a2 + 7) >> 3;
  v6 = *(char **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (v7 - *(_QWORD *)a1) >> 5;
  if (v5 <= v8)
  {
    if (v5 >= v8)
      goto LABEL_21;
    v21 = &v6[32 * v5];
    goto LABEL_15;
  }
  v9 = v5 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (v5 - v8 <= (v10 - v7) >> 5)
  {
    bzero(*(void **)(a1 + 8), 32 * v9);
    v21 = (char *)(v7 + 32 * v9);
LABEL_15:
    *(_QWORD *)(a1 + 8) = v21;
    goto LABEL_21;
  }
  if ((a2 + 7) >> 62)
    std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]();
  v11 = v10 - (_QWORD)v6;
  if (v11 >> 4 > v5)
    v5 = v11 >> 4;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
    v12 = 0x7FFFFFFFFFFFFFFLL;
  else
    v12 = v5;
  _ZNSt3__114__split_bufferIDv8_fRN12_GLOBAL__N_120SimdAlignedAllocatorIS1_EEEC1EmmS5_(&v32, v12, v8, a1 + 16);
  v13 = (char *)v34[0];
  bzero(v34[0], 32 * v9);
  v14 = &v13[32 * v9];
  v34[0] = v14;
  v16 = *(char **)a1;
  v15 = *(char **)(a1 + 8);
  v17 = v33;
  if (v15 == *(char **)a1)
  {
    v20 = *(char **)(a1 + 8);
  }
  else
  {
    do
    {
      v18 = *((_OWORD *)v15 - 2);
      v19 = *((_OWORD *)v15 - 1);
      v15 -= 32;
      *((_OWORD *)v17 - 2) = v18;
      *((_OWORD *)v17 - 1) = v19;
      v17 -= 32;
    }
    while (v15 != v16);
    v20 = *(char **)a1;
    v15 = *(char **)(a1 + 8);
    v14 = (char *)v34[0];
  }
  *(_QWORD *)a1 = v17;
  *(_QWORD *)(a1 + 8) = v14;
  v22 = *(void **)(a1 + 16);
  *(void **)(a1 + 16) = v34[1];
  v34[0] = v15;
  v34[1] = v22;
  v32 = v20;
  v33 = v20;
  if (v15 != v20)
    v34[0] = &v15[(v20 - v15 + 31) & 0xFFFFFFFFFFFFFFE0];
  if (v20)
    free(v20);
LABEL_21:
  *(_QWORD *)(a1 + 24) = a2;
  if (v4 > a2)
  {
    v23 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5;
    if (v23 < (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
    {
      _ZNSt3__114__split_bufferIDv8_fRN12_GLOBAL__N_120SimdAlignedAllocatorIS1_EEEC1EmmS5_(&v32, v23, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5, a1 + 16);
      v25 = *(char **)a1;
      v24 = *(char **)(a1 + 8);
      v26 = v33;
      if (v24 == *(char **)a1)
      {
        v29 = *(char **)(a1 + 8);
      }
      else
      {
        do
        {
          v27 = *((_OWORD *)v24 - 2);
          v28 = *((_OWORD *)v24 - 1);
          v24 -= 32;
          *((_OWORD *)v26 - 2) = v27;
          *((_OWORD *)v26 - 1) = v28;
          v26 -= 32;
        }
        while (v24 != v25);
        v29 = *(char **)a1;
        v24 = *(char **)(a1 + 8);
      }
      *(_QWORD *)a1 = v26;
      v30 = *(void **)(a1 + 16);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v34;
      v34[0] = v24;
      v34[1] = v30;
      v32 = v29;
      v33 = v29;
      if (v24 != v29)
        v34[0] = &v24[(v29 - v24 + 31) & 0xFFFFFFFFFFFFFFE0];
      if (v29)
        free(v29);
    }
    v31 = *(_QWORD *)(a1 + 24);
    if (v31)
      bzero((void *)(*(_QWORD *)a1 + 4 * v31), *(_QWORD *)(a1 + 8) - (*(_QWORD *)a1 + 4 * v31));
  }
}

void sub_1C9C8A5EC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1C9C8A5B8);
}

void sub_1C9C8A760(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9C8A824(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9C8AAC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  pthread_mutex_t *v3;
  void *v4;

  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

void sub_1C9C8AC0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9C8AD3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9C8AF34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9C8B0A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9C8B180(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9C8B54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  pthread_mutex_t *v22;
  void *v23;

  objc_destroyWeak(&location);
  pthread_mutex_unlock(v22);

  _Unwind_Resume(a1);
}

void sub_1C9C8B6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C9C8B880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  pthread_mutex_t *v8;
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a7);

  pthread_mutex_unlock(v8);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1C9C8B9D0(_Unwind_Exception *a1)
{
  void *v1;
  pthread_mutex_t *v2;
  void *v3;

  pthread_mutex_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1C9C8BBB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9C8BC68(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1C9C8BD74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9C8BE20(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1C9C8BF40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1C9C8C024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  pthread_mutex_t *v10;
  void *v11;
  void *v12;

  v12 = v11;

  pthread_mutex_unlock(v10);
  _Unwind_Resume(a1);
}

void sub_1C9C8C110(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9C8C174(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1C9C8C298(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9C8C320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C9C8C48C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  _Block_object_dispose((const void *)(v3 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C8C508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C9C8C5CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9C8C6D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

pthread_mutex_t *proactive::pas::detail::RecursiveMutex::RecursiveMutex(pthread_mutex_t *this)
{
  pthread_mutexattr_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  pthread_mutexattr_init(&v3);
  pthread_mutexattr_settype(&v3, 2);
  pthread_mutex_init(this, &v3);
  pthread_mutexattr_destroy(&v3);
  return this;
}

uint64_t *std::unique_ptr<proactive::pas::SynchronizedObject<`anonymous namespace'::HDGuardedData,proactive::pas::detail::RecursiveMutex>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    pthread_mutex_destroy((pthread_mutex_t *)(v2 + 8));
    JUMPOUT(0x1CAA485C0);
  }
  return result;
}

_QWORD *_ZNSt3__114__split_bufferIDv8_fRN12_GLOBAL__N_120SimdAlignedAllocatorIS1_EEEC1EmmS5_(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  char *v8;
  std::bad_alloc *exception;
  std::bad_alloc *v11;
  void *memptr;

  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    memptr = 0;
    if (malloc_type_posix_memalign(&memptr, 0x40uLL, 32 * a2, 0x1000040E0EAB150uLL))
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v11 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v11, MEMORY[0x1E0DE4EA8], MEMORY[0x1E0DE4DC0]);
    }
    v7 = (char *)memptr;
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[32 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[32 * a2];
  return a1;
}

uint64_t *std::unique_ptr<proactive::pas::SynchronizedObject<`anonymous namespace'::HTGuardedData,proactive::pas::detail::RecursiveMutex>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    pthread_mutex_destroy((pthread_mutex_t *)(v2 + 8));
    JUMPOUT(0x1CAA485C0);
  }
  return result;
}

void sub_1C9C8D338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id ATXSortAndLimitPredictionsWhileKeepingPredictionItems(void *a1, void *a2, int64x2_t *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  unint64_t v23;
  _QWORD *v24;
  id v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  int64x2_t v41;
  uint64_t v42;
  uint64_t v43;
  id v45;
  char *v46;
  uint64_t v47;
  id obj;
  id v49;
  id v50;
  _BYTE v51[3282];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  int64x2_t v57;
  uint64_t v58;
  int64x2_t *v59;
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v45 = a1;
  v5 = a2;
  v49 = (id)objc_opt_new();
  v6 = (void *)objc_opt_new();
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  +[ATXActionPredictionsHelpers sortedPredictions:](ATXActionPredictionsHelpers, "sortedPredictions:", v45);
  obj = (id)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v52, v60, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v53;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v53 != v8)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v52 + 1) + 8 * v9);
        if (!v5)
          goto LABEL_14;
        objc_msgSend(*(id *)(*((_QWORD *)&v52 + 1) + 8 * v9), "actionKey");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "objectForKeyedSubscript:", v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "unsignedIntegerValue");
        if (v13 < objc_msgSend(v5, "unsignedIntegerValue"))
        {

LABEL_14:
          objc_msgSend(v49, "addObject:", v10);
          v18 = (void *)MEMORY[0x1E0CB37E8];
          objc_msgSend(v10, "actionKey");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "objectForKeyedSubscript:", v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "numberWithInt:", objc_msgSend(v20, "intValue") + 1);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "actionKey");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "setObject:forKeyedSubscript:", v21, v22);

          goto LABEL_15;
        }
        v14 = +[ATXActionPredictions isActionPredictionContainerEligibleForLimit:](ATXActionPredictions, "isActionPredictionContainerEligibleForLimit:", v10);

        if (!v14)
          goto LABEL_14;
        if (a3)
        {
          v16 = a3->i64[0];
          v15 = a3->i64[1];
          +[_ATXGlobals sharedInstance](_ATXGlobals, "sharedInstance");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(v15) = 0xDAB7EC1DD3431B57 * ((v15 - v16) >> 5) < (int)objc_msgSend(v17, "numberOfActionsToKeepForLogging");

          if ((_DWORD)v15)
          {
            if (v10)
              objc_msgSend(v10, "predictionItem");
            else
              bzero(&v50, 0xCE0uLL);
            v24 = (_QWORD *)a3->i64[1];
            v23 = a3[1].u64[0];
            if ((unint64_t)v24 >= v23)
            {
              v27 = 0xDAB7EC1DD3431B57 * (((uint64_t)v24 - a3->i64[0]) >> 5);
              v28 = v27 + 1;
              if (v27 + 1 > 0x13E22CBCE4A902)
                std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]();
              v29 = 0xDAB7EC1DD3431B57 * ((uint64_t)(v23 - a3->i64[0]) >> 5);
              if (2 * v29 > v28)
                v28 = 2 * v29;
              if (v29 >= 0x9F1165E725481)
                v30 = 0x13E22CBCE4A902;
              else
                v30 = v28;
              v59 = a3 + 1;
              if (v30)
              {
                v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ATXPredictionItem>>((uint64_t)a3[1].i64, v30);
                v47 = v32;
              }
              else
              {
                v31 = 0;
                v47 = 0;
              }
              v33 = &v31[3296 * v27];
              v34 = v50;
              v50 = 0;
              *(_QWORD *)v33 = v34;
              memcpy(v33 + 8, v51, 0xCD2uLL);
              v36 = a3->i64[0];
              v35 = a3->u64[1];
              if (v35 == a3->i64[0])
              {
                v41 = vdupq_n_s64(v35);
                v37 = &v31[3296 * v27];
              }
              else
              {
                v46 = v31;
                v37 = &v31[3296 * v27];
                do
                {
                  v38 = v35 - 3296;
                  v39 = *(_QWORD *)(v35 - 3296);
                  v40 = v37 - 3288;
                  v37 -= 3296;
                  *(_QWORD *)(v35 - 3296) = 0;
                  *(_QWORD *)v37 = v39;
                  memcpy(v40, (const void *)(v35 - 3288), 0xCD2uLL);
                  v35 = v38;
                }
                while (v38 != v36);
                v41 = *a3;
                v31 = v46;
              }
              v26 = v33 + 3296;
              a3->i64[0] = (uint64_t)v37;
              a3->i64[1] = (uint64_t)v26;
              v57 = v41;
              v42 = a3[1].i64[0];
              a3[1].i64[0] = (uint64_t)&v31[3296 * v47];
              v58 = v42;
              v56 = v41.i64[0];
              std::__split_buffer<ATXPredictionItem>::~__split_buffer((uint64_t)&v56);
            }
            else
            {
              v25 = v50;
              v50 = 0;
              *v24 = v25;
              memcpy(v24 + 1, v51, 0xCD2uLL);
              v26 = v24 + 412;
            }
            a3->i64[1] = (uint64_t)v26;

          }
        }
LABEL_15:
        ++v9;
      }
      while (v9 != v7);
      v43 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v52, v60, 16);
      v7 = v43;
    }
    while (v43);
  }

  return v49;
}

void sub_1C9C8ED44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1C9C8EE64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9C8EF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  a14 = (void **)&a11;
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&a14);

  _Unwind_Resume(a1);
}

void sub_1C9C8F144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C9C8F328(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1C9C8F4A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1C9C8FE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  void *v51;
  void *v52;
  void *v53;
  void *v54;

  std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::~__hash_table((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_1C9C90870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  void *v32;
  void *v33;

  _Unwind_Resume(a1);
}

void sub_1C9C90B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1C9C90E68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9C90FE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9C91248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1C9C914F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C91618(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9C91694(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9C91928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1C9C91AE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9C91CDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C9C91EB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9C9213C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C9C9226C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9C946B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C948EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C94B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C956A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C9C950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9C9D09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C9D614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C9D940(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C9E1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9C9ED14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C9EE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C9F0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C9C9FBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C9FCAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9C9FF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9CA1560(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C9CA2C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXTimelineRelevancePBTimelineRelevanceRotationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 40) |= 2u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_64;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_66;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_64:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_66:
          v51 = 16;
          goto LABEL_83;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 0x10u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_70:
          v52 = 32;
          goto LABEL_88;
        case 3u:
          v30 = 0;
          v31 = 0;
          v32 = 0;
          *(_BYTE *)(a1 + 40) |= 0x20u;
          while (2)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
              *(_QWORD *)(a2 + v33) = v34 + 1;
              v32 |= (unint64_t)(v35 & 0x7F) << v30;
              if (v35 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  v32 = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v32 = 0;
LABEL_74:
          *(_BYTE *)(a1 + 36) = v32 != 0;
          continue;
        case 4u:
          v36 = 0;
          v37 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 4u;
          while (2)
          {
            v38 = *v3;
            v39 = *(_QWORD *)(a2 + v38);
            if (v39 == -1 || v39 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v39);
              *(_QWORD *)(a2 + v38) = v39 + 1;
              v26 |= (unint64_t)(v40 & 0x7F) << v36;
              if (v40 < 0)
              {
                v36 += 7;
                v14 = v37++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_78:
          v52 = 24;
          goto LABEL_88;
        case 5u:
          v41 = 0;
          v42 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 40) |= 1u;
          while (2)
          {
            v43 = *v3;
            v44 = *(_QWORD *)(a2 + v43);
            if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
              *(_QWORD *)(a2 + v43) = v44 + 1;
              v19 |= (unint64_t)(v45 & 0x7F) << v41;
              if (v45 < 0)
              {
                v41 += 7;
                v14 = v42++ >= 9;
                if (v14)
                {
                  v19 = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_82:
          v51 = 8;
LABEL_83:
          *(_QWORD *)(a1 + v51) = v19;
          continue;
        case 6u:
          v46 = 0;
          v47 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 40) |= 8u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v48 = *v3;
        v49 = *(_QWORD *)(a2 + v48);
        if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
          break;
        v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v49);
        *(_QWORD *)(a2 + v48) = v49 + 1;
        v26 |= (unint64_t)(v50 & 0x7F) << v46;
        if ((v50 & 0x80) == 0)
          goto LABEL_85;
        v46 += 7;
        v14 = v47++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_87;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_85:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_87:
      v52 = 28;
LABEL_88:
      *(_DWORD *)(a1 + v52) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9CA516C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void sub_1C9CA5474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9CA6B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

ATXEvent *microLocationEventFromDK(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  ATXEvent *v10;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "metadata");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D15A88], "probabilityVector");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "objectForKeyedSubscript:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      objc_msgSend(v2, "startDate");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "dateByAddingTimeInterval:", -300.0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v2, "startDate");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "dateByAddingTimeInterval:", 300.0);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      v10 = -[ATXEvent initWithEvent:startDate:endDate:]([ATXEvent alloc], "initWithEvent:startDate:endDate:", v5, v7, v9);
    }
    else
    {
      v10 = 0;
    }

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_1C9CA718C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9CA779C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9CA7E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9CA9A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9CAA140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9CAACF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9CAAEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9CAB024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXCandidateRelevanceModelPBModelMetricsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  void *v100;
  char v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 24;
          goto LABEL_116;
        case 2u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 8;
          goto LABEL_116;
        case 3u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 32;
          goto LABEL_116;
        case 4u:
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_WORD *)(a1 + 116) |= 0x8000u;
          while (2)
          {
            v24 = *v3;
            v25 = *(_QWORD *)(a2 + v24);
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
              *(_QWORD *)(a2 + v24) = v26;
              v23 |= (unint64_t)(v27 & 0x7F) << v21;
              if (v27 < 0)
              {
                v21 += 7;
                v15 = v22++ >= 9;
                if (v15)
                {
                  v23 = 0;
                  goto LABEL_127;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v23 = 0;
LABEL_127:
          v107 = v23 != 0;
          v108 = 114;
          goto LABEL_136;
        case 5u:
          v28 = 0;
          v29 = 0;
          v30 = 0;
          *(_WORD *)(a1 + 116) |= 0x4000u;
          while (2)
          {
            v31 = *v3;
            v32 = *(_QWORD *)(a2 + v31);
            v33 = v32 + 1;
            if (v32 == -1 || v33 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
              *(_QWORD *)(a2 + v31) = v33;
              v30 |= (unint64_t)(v34 & 0x7F) << v28;
              if (v34 < 0)
              {
                v28 += 7;
                v15 = v29++ >= 9;
                if (v15)
                {
                  v30 = 0;
                  goto LABEL_131;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v30 = 0;
LABEL_131:
          v107 = v30 != 0;
          v108 = 113;
          goto LABEL_136;
        case 6u:
          v35 = 0;
          v36 = 0;
          v37 = 0;
          *(_WORD *)(a1 + 116) |= 0x2000u;
          while (2)
          {
            v38 = *v3;
            v39 = *(_QWORD *)(a2 + v38);
            v40 = v39 + 1;
            if (v39 == -1 || v40 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v39);
              *(_QWORD *)(a2 + v38) = v40;
              v37 |= (unint64_t)(v41 & 0x7F) << v35;
              if (v41 < 0)
              {
                v35 += 7;
                v15 = v36++ >= 9;
                if (v15)
                {
                  v37 = 0;
                  goto LABEL_135;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v37 = 0;
LABEL_135:
          v107 = v37 != 0;
          v108 = 112;
LABEL_136:
          *(_BYTE *)(a1 + v108) = v107;
          continue;
        case 7u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 80;
          goto LABEL_116;
        case 8u:
          v42 = 0;
          v43 = 0;
          v44 = 0;
          *(_WORD *)(a1 + 116) |= 1u;
          while (2)
          {
            v45 = *v3;
            v46 = *(_QWORD *)(a2 + v45);
            v47 = v46 + 1;
            if (v46 == -1 || v47 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
              *(_QWORD *)(a2 + v45) = v47;
              v44 |= (unint64_t)(v48 & 0x7F) << v42;
              if (v48 < 0)
              {
                v42 += 7;
                v15 = v43++ >= 9;
                if (v15)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_140;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v44) = 0;
LABEL_140:
          v109 = 16;
          goto LABEL_173;
        case 9u:
          v49 = 0;
          v50 = 0;
          v44 = 0;
          *(_WORD *)(a1 + 116) |= 2u;
          while (2)
          {
            v51 = *v3;
            v52 = *(_QWORD *)(a2 + v51);
            v53 = v52 + 1;
            if (v52 == -1 || v53 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v52);
              *(_QWORD *)(a2 + v51) = v53;
              v44 |= (unint64_t)(v54 & 0x7F) << v49;
              if (v54 < 0)
              {
                v49 += 7;
                v15 = v50++ >= 9;
                if (v15)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_144;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v44) = 0;
LABEL_144:
          v109 = 20;
          goto LABEL_173;
        case 0xAu:
          v55 = 0;
          v56 = 0;
          v44 = 0;
          *(_WORD *)(a1 + 116) |= 0x80u;
          while (2)
          {
            v57 = *v3;
            v58 = *(_QWORD *)(a2 + v57);
            v59 = v58 + 1;
            if (v58 == -1 || v59 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v60 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v58);
              *(_QWORD *)(a2 + v57) = v59;
              v44 |= (unint64_t)(v60 & 0x7F) << v55;
              if (v60 < 0)
              {
                v55 += 7;
                v15 = v56++ >= 9;
                if (v15)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_148;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v44) = 0;
LABEL_148:
          v109 = 88;
          goto LABEL_173;
        case 0xBu:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 64;
          goto LABEL_116;
        case 0xCu:
          *(_WORD *)(a1 + 116) |= 0x10u;
          v61 = *v3;
          v62 = *(_QWORD *)(a2 + v61);
          if (v62 <= 0xFFFFFFFFFFFFFFFBLL && v62 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v63 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v62);
            *(_QWORD *)(a2 + v61) = v62 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v63 = 0;
          }
          v110 = 56;
          goto LABEL_182;
        case 0xDu:
          *(_WORD *)(a1 + 116) |= 8u;
          v64 = *v3;
          v65 = *(_QWORD *)(a2 + v64);
          if (v65 <= 0xFFFFFFFFFFFFFFFBLL && v65 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v63 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v65);
            *(_QWORD *)(a2 + v64) = v65 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v63 = 0;
          }
          v110 = 52;
          goto LABEL_182;
        case 0xEu:
          *(_WORD *)(a1 + 116) |= 4u;
          v66 = *v3;
          v67 = *(_QWORD *)(a2 + v66);
          if (v67 <= 0xFFFFFFFFFFFFFFFBLL && v67 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v63 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v67);
            *(_QWORD *)(a2 + v66) = v67 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v63 = 0;
          }
          v110 = 48;
          goto LABEL_182;
        case 0xFu:
          v68 = 0;
          v69 = 0;
          v44 = 0;
          *(_WORD *)(a1 + 116) |= 0x20u;
          while (2)
          {
            v70 = *v3;
            v71 = *(_QWORD *)(a2 + v70);
            v72 = v71 + 1;
            if (v71 == -1 || v72 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v73 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v71);
              *(_QWORD *)(a2 + v70) = v72;
              v44 |= (unint64_t)(v73 & 0x7F) << v68;
              if (v73 < 0)
              {
                v68 += 7;
                v15 = v69++ >= 9;
                if (v15)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_152;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v44) = 0;
LABEL_152:
          v109 = 72;
          goto LABEL_173;
        case 0x10u:
          *(_WORD *)(a1 + 116) |= 0x100u;
          v74 = *v3;
          v75 = *(_QWORD *)(a2 + v74);
          if (v75 <= 0xFFFFFFFFFFFFFFFBLL && v75 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v63 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v75);
            *(_QWORD *)(a2 + v74) = v75 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v63 = 0;
          }
          v110 = 92;
LABEL_182:
          *(_DWORD *)(a1 + v110) = v63;
          continue;
        case 0x11u:
          v76 = 0;
          v77 = 0;
          v44 = 0;
          *(_WORD *)(a1 + 116) |= 0x800u;
          while (2)
          {
            v78 = *v3;
            v79 = *(_QWORD *)(a2 + v78);
            v80 = v79 + 1;
            if (v79 == -1 || v80 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v81 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v79);
              *(_QWORD *)(a2 + v78) = v80;
              v44 |= (unint64_t)(v81 & 0x7F) << v76;
              if (v81 < 0)
              {
                v76 += 7;
                v15 = v77++ >= 9;
                if (v15)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_156;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v44) = 0;
LABEL_156:
          v109 = 104;
          goto LABEL_173;
        case 0x12u:
          v82 = 0;
          v83 = 0;
          v44 = 0;
          *(_WORD *)(a1 + 116) |= 0x1000u;
          while (2)
          {
            v84 = *v3;
            v85 = *(_QWORD *)(a2 + v84);
            v86 = v85 + 1;
            if (v85 == -1 || v86 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v87 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v85);
              *(_QWORD *)(a2 + v84) = v86;
              v44 |= (unint64_t)(v87 & 0x7F) << v82;
              if (v87 < 0)
              {
                v82 += 7;
                v15 = v83++ >= 9;
                if (v15)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_160;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v44) = 0;
LABEL_160:
          v109 = 108;
          goto LABEL_173;
        case 0x13u:
          v88 = 0;
          v89 = 0;
          v44 = 0;
          *(_WORD *)(a1 + 116) |= 0x400u;
          while (2)
          {
            v90 = *v3;
            v91 = *(_QWORD *)(a2 + v90);
            v92 = v91 + 1;
            if (v91 == -1 || v92 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v93 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v91);
              *(_QWORD *)(a2 + v90) = v92;
              v44 |= (unint64_t)(v93 & 0x7F) << v88;
              if (v93 < 0)
              {
                v88 += 7;
                v15 = v89++ >= 9;
                if (v15)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_164;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v44) = 0;
LABEL_164:
          v109 = 100;
          goto LABEL_173;
        case 0x14u:
          v94 = 0;
          v95 = 0;
          v44 = 0;
          *(_WORD *)(a1 + 116) |= 0x200u;
          while (2)
          {
            v96 = *v3;
            v97 = *(_QWORD *)(a2 + v96);
            v98 = v97 + 1;
            if (v97 == -1 || v98 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v99 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v97);
              *(_QWORD *)(a2 + v96) = v98;
              v44 |= (unint64_t)(v99 & 0x7F) << v94;
              if (v99 < 0)
              {
                v94 += 7;
                v15 = v95++ >= 9;
                if (v15)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_168;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v44) = 0;
LABEL_168:
          v109 = 96;
          goto LABEL_173;
        case 0x15u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 40;
LABEL_116:
          v100 = *(void **)(a1 + v19);
          *(_QWORD *)(a1 + v19) = v18;

          continue;
        case 0x16u:
          v101 = 0;
          v102 = 0;
          v44 = 0;
          *(_WORD *)(a1 + 116) |= 0x40u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v103 = *v3;
        v104 = *(_QWORD *)(a2 + v103);
        v105 = v104 + 1;
        if (v104 == -1 || v105 > *(_QWORD *)(a2 + *v4))
          break;
        v106 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v104);
        *(_QWORD *)(a2 + v103) = v105;
        v44 |= (unint64_t)(v106 & 0x7F) << v101;
        if ((v106 & 0x80) == 0)
          goto LABEL_170;
        v101 += 7;
        v15 = v102++ >= 9;
        if (v15)
        {
          LODWORD(v44) = 0;
          goto LABEL_172;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_170:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v44) = 0;
LABEL_172:
      v109 = 76;
LABEL_173:
      *(_DWORD *)(a1 + v109) = v44;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t ATXMPBAppClipCaptureRateTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 24;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_34;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_36;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v20) = 0;
LABEL_36:
            *(_DWORD *)(a1 + 16) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 8;
      }
      v26 = *(void **)(a1 + v25);
      *(_QWORD *)(a1 + v25) = v24;

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9CB17A8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 120));
  _Unwind_Resume(a1);
}

void sub_1C9CB1B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9CB1E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9CB27F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,char a23)
{
  id *v23;
  id *v24;

  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1C9CB4814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 128), 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_8_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x52u);
}

uint64_t ATXAnchorModelPBAnchorMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  void *v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 56) |= 2u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_74;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_76;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_74:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_76:
          v57 = 20;
          goto LABEL_101;
        case 2u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 8;
          goto LABEL_65;
        case 3u:
          v26 = 0;
          v27 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 56) |= 1u;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v19 |= (unint64_t)(v30 & 0x7F) << v26;
              if (v30 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_80;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_80:
          v57 = 16;
          goto LABEL_101;
        case 4u:
          v31 = 0;
          v32 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 56) |= 0x40u;
          while (2)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
              *(_QWORD *)(a2 + v33) = v34 + 1;
              v19 |= (unint64_t)(v35 & 0x7F) << v31;
              if (v35 < 0)
              {
                v31 += 7;
                v14 = v32++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_84;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_84:
          v57 = 52;
          goto LABEL_101;
        case 5u:
          v36 = 0;
          v37 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 56) |= 4u;
          while (2)
          {
            v38 = *v3;
            v39 = *(_QWORD *)(a2 + v38);
            if (v39 == -1 || v39 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v39);
              *(_QWORD *)(a2 + v38) = v39 + 1;
              v19 |= (unint64_t)(v40 & 0x7F) << v36;
              if (v40 < 0)
              {
                v36 += 7;
                v14 = v37++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_88;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_88:
          v57 = 24;
          goto LABEL_101;
        case 6u:
          v41 = 0;
          v42 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 56) |= 0x10u;
          while (2)
          {
            v43 = *v3;
            v44 = *(_QWORD *)(a2 + v43);
            if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
              *(_QWORD *)(a2 + v43) = v44 + 1;
              v19 |= (unint64_t)(v45 & 0x7F) << v41;
              if (v45 < 0)
              {
                v41 += 7;
                v14 = v42++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_92;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_92:
          v57 = 32;
          goto LABEL_101;
        case 7u:
          v46 = 0;
          v47 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 56) |= 8u;
          while (2)
          {
            v48 = *v3;
            v49 = *(_QWORD *)(a2 + v48);
            if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v49);
              *(_QWORD *)(a2 + v48) = v49 + 1;
              v19 |= (unint64_t)(v50 & 0x7F) << v46;
              if (v50 < 0)
              {
                v46 += 7;
                v14 = v47++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_96;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_96:
          v57 = 28;
          goto LABEL_101;
        case 8u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 40;
LABEL_65:
          v51 = *(void **)(a1 + v25);
          *(_QWORD *)(a1 + v25) = v24;

          continue;
        case 9u:
          v52 = 0;
          v53 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 56) |= 0x20u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v54 = *v3;
        v55 = *(_QWORD *)(a2 + v54);
        if (v55 == -1 || v55 >= *(_QWORD *)(a2 + *v4))
          break;
        v56 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v55);
        *(_QWORD *)(a2 + v54) = v55 + 1;
        v19 |= (unint64_t)(v56 & 0x7F) << v52;
        if ((v56 & 0x80) == 0)
          goto LABEL_98;
        v52 += 7;
        v14 = v53++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_100;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_98:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_100:
      v57 = 48;
LABEL_101:
      *(_DWORD *)(a1 + v57) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9CBDA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9CBEC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9CC15D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9CC285C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getTrialAssets()
{
  if (getTrialAssets_onceToken != -1)
    dispatch_once(&getTrialAssets_onceToken, &__block_literal_global_61);
  return (id)getTrialAssets_assets;
}

void sub_1C9CC5C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1C9CC67F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getTrialAssets_block_invoke()
{
  uint64_t v0;
  void *v1;

  v0 = objc_opt_new();
  v1 = (void *)getTrialAssets_assets;
  getTrialAssets_assets = v0;

}

void sub_1C9CC7B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1C9CC802C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1C9CC8608(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1C9CC8AFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1C9CC9328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9CCBE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AWDProactiveAppPredictionAppActionSequenceReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  void *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        if (v23)
          objc_msgSend((id)a1, "addActionString:", v23);

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_35:
        *(_QWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id descriptorKey(void *a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;

  v3 = (objc_class *)MEMORY[0x1E0CB3940];
  v4 = a2;
  v5 = a1;
  v6 = (void *)objc_msgSend([v3 alloc], "initWithFormat:", CFSTR("%@:%@"), v5, v4);

  return v6;
}

uint64_t ATXMagicalMomentsPBMMEngagedTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v15)
          v16 = 1;
        else
          v16 = (v10 & 7) == 4;
        if (!v16)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v17 = 0;
              v18 = 0;
              v19 = 0;
              *(_BYTE *)(a1 + 40) |= 1u;
              break;
            case 2u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 24;
              goto LABEL_31;
            case 3u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 8;
              goto LABEL_31;
            case 4u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 32;
LABEL_31:
              v26 = *(void **)(a1 + v25);
              *(_QWORD *)(a1 + v25) = v24;

              goto LABEL_36;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_36:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_33;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_35;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_35:
          *(_DWORD *)(a1 + 16) = v19;
          goto LABEL_36;
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t AWDProactiveAppPredictionActionTimeEstimateReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  AWDProactiveAppPredictionActionTimeEstimateContainer *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v23 = objc_alloc_init(AWDProactiveAppPredictionActionTimeEstimateContainer);
        objc_msgSend((id)a1, "addAction:", v23);
        if (!PBReaderPlaceMark()
          || (AWDProactiveAppPredictionActionTimeEstimateContainerReadFrom(v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_35:
        *(_QWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9CD2500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Block_object_dispose((const void *)(v29 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1C9CD2990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1C9CD4C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXAnchorModelPBActionUUIDMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  ATXAnchorModelPBLaunchHistoryMetadata *v35;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 36) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_46;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_48;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_48:
        v36 = 8;
        goto LABEL_53;
      case 2u:
        v24 = 0;
        v25 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 36) |= 2u;
        while (2)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 1;
            v19 |= (unint64_t)(v28 & 0x7F) << v24;
            if (v28 < 0)
            {
              v24 += 7;
              v14 = v25++ >= 9;
              if (v14)
              {
                v19 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_52:
        v36 = 16;
LABEL_53:
        *(_QWORD *)(a1 + v36) = v19;
        goto LABEL_58;
      case 3u:
        v29 = 0;
        v30 = 0;
        v31 = 0;
        *(_BYTE *)(a1 + 36) |= 4u;
        while (2)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v33 + 1;
            v31 |= (unint64_t)(v34 & 0x7F) << v29;
            if (v34 < 0)
            {
              v29 += 7;
              v14 = v30++ >= 9;
              if (v14)
              {
                LODWORD(v31) = 0;
                goto LABEL_57;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v31) = 0;
LABEL_57:
        *(_DWORD *)(a1 + 32) = v31;
        goto LABEL_58;
      case 4u:
        v35 = objc_alloc_init(ATXAnchorModelPBLaunchHistoryMetadata);
        objc_storeStrong((id *)(a1 + 24), v35);
        if (PBReaderPlaceMark() && ATXAnchorModelPBLaunchHistoryMetadataReadFrom((uint64_t)v35, a2))
        {
          PBReaderRecallMark();

LABEL_58:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_58;
    }
  }
}

void sub_1C9CD7948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9CDAC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1C9CDB668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1C9CDC3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1C9CDDA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_1C9CDEDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9CDF2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1C9CDFFA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9CE0024(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9CE0094(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9CE00F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)ATXActionPredictionServer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1C9CE02DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9CE04E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

id __atx_xpc_private_queue_get(void)
{
  if (__atx_xpc_private_queue_get(void)::onceToken != -1)
    dispatch_once(&__atx_xpc_private_queue_get(void)::onceToken, &__block_literal_global_135_1);
  return (id)__atx_xpc_private_queue_get(void)::queue;
}

void sub_1C9CE0714(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9CE0870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1C9CE0B1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9CE0C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1C9CE0E1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9CE1018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1C9CE1258(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9CE13E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1C9CE16C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9CE1850(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9CE19CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C9CE1B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9CE1DF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void ___ZL27__atx_xpc_private_queue_getv_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("atx-xpc-bg", v2);
  v1 = (void *)__atx_xpc_private_queue_get(void)::queue;
  __atx_xpc_private_queue_get(void)::queue = (uint64_t)v0;

}

BOOL ATXAnchorModelPBAnchorModelLogEntryReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  ATXAnchorModelPBAnchorMetadata *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(ATXAnchorModelPBAnchorMetadata **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v17;
        goto LABEL_35;
      case 2u:
        v18 = objc_alloc_init(ATXAnchorModelPBAnchorMetadata);
        objc_storeStrong((id *)(a1 + 8), v18);
        if (!PBReaderPlaceMark() || (ATXAnchorModelPBAnchorMetadataReadFrom((uint64_t)v18, a2) & 1) == 0)
          goto LABEL_39;
        goto LABEL_34;
      case 3u:
        v18 = objc_alloc_init(ATXAnchorModelPBAppLaunchMetadata);
        objc_msgSend((id)a1, "addPositiveAppLaunches:", v18);
        goto LABEL_28;
      case 4u:
        v18 = objc_alloc_init(ATXAnchorModelPBActionMetadata);
        objc_msgSend((id)a1, "addPositiveActions:", v18);
        goto LABEL_32;
      case 5u:
        v18 = objc_alloc_init(ATXAnchorModelPBAppLaunchMetadata);
        objc_msgSend((id)a1, "addNegativeAppLaunches:", v18);
LABEL_28:
        if (!PBReaderPlaceMark()
          || (ATXAnchorModelPBAppLaunchMetadataReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
          goto LABEL_39;
        }
        goto LABEL_34;
      case 6u:
        v18 = objc_alloc_init(ATXAnchorModelPBActionMetadata);
        objc_msgSend((id)a1, "addNegativeActions:", v18);
LABEL_32:
        if (PBReaderPlaceMark() && (ATXAnchorModelPBActionMetadataReadFrom((uint64_t)v18, a2) & 1) != 0)
        {
LABEL_34:
          PBReaderRecallMark();
LABEL_35:

LABEL_36:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_39:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_36;
    }
  }
}

void sub_1C9CE6598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9CE6D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;

  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose((const void *)(v40 - 200), 8);
  _Block_object_dispose((const void *)(v40 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1C9CEB4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9CEC2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9CF0DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1C9CF0F80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9CF1090(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9CF1278(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1C9CF1B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_1C9CF20AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9CF2404(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9CF25F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1C9CF285C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1C9CF2AC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1C9CF2C90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9CF367C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1C9CF4044(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

BOOL ATXPBBlendingSessionBlendingUpdateReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  ATXPBBlendingSessionDeviceContext *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 2;
        goto LABEL_24;
      case 2u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 1;
        goto LABEL_24;
      case 3u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 4;
LABEL_24:
        v19 = (ATXPBBlendingSessionDeviceContext *)a1[v18];
        a1[v18] = (id)v17;
        goto LABEL_34;
      case 4u:
        v19 = objc_alloc_init(ATXPBBlendingSessionDeviceContext);
        objc_storeStrong(a1 + 5, v19);
        if (!PBReaderPlaceMark()
          || (ATXPBBlendingSessionDeviceContextReadFrom((uint64_t)v19, a2) & 1) == 0)
        {
          goto LABEL_38;
        }
        goto LABEL_33;
      case 5u:
        v19 = objc_alloc_init(ATXPBBlendingSessionClientModelUpdate);
        objc_msgSend(a1, "addClientModelUpdate:", v19);
        if (!PBReaderPlaceMark() || !ATXPBBlendingSessionClientModelUpdateReadFrom((char *)v19, a2))
          goto LABEL_38;
        goto LABEL_33;
      case 6u:
        v19 = objc_alloc_init(ATXPBBlendingSessionUICache);
        objc_storeStrong(a1 + 6, v19);
        if (PBReaderPlaceMark() && ATXPBBlendingSessionUICacheReadFrom(v19, a2))
        {
LABEL_33:
          PBReaderRecallMark();
LABEL_34:

LABEL_35:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_38:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_35;
    }
  }
}

void sub_1C9CF5380(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9CF540C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9CF5520(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C9CF55E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9CF5644(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9CF572C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9CF581C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9CF67F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1C9CF6D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_14(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

uint64_t ATXMPBAppClipSessionEngagementTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v15)
          v16 = 1;
        else
          v16 = (v10 & 7) == 4;
        if (!v16)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v17 = 0;
              v18 = 0;
              v19 = 0;
              *(_BYTE *)(a1 + 40) |= 1u;
              break;
            case 2u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 16;
              goto LABEL_31;
            case 3u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 8;
              goto LABEL_31;
            case 4u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 32;
LABEL_31:
              v26 = *(void **)(a1 + v25);
              *(_QWORD *)(a1 + v25) = v24;

              goto LABEL_36;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_36:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_33;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_35;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_35:
          *(_DWORD *)(a1 + 24) = v19;
          goto LABEL_36;
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *ATXUserEducationSuggestionStateToString(unint64_t a1)
{
  __CFString *v2;
  NSObject *v3;

  if (a1 >= 3)
  {
    __atxlog_handle_context_user_education_suggestions();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      ATXUserEducationSuggestionStateToString_cold_1(a1, v3);

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(error: unknown state: %ld)"), a1);
    v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = off_1E82E7530[a1];
  }
  return v2;
}

uint64_t ATXPBBlendingSessionERMEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  void *v26;
  void *v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
          goto LABEL_30;
        case 2u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 40) |= 1u;
          break;
        case 3u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
LABEL_30:
          v26 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          continue;
        case 4u:
          PBReaderReadString();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          if (v27)
            objc_msgSend((id)a1, "addBlendingUpdateUUID:", v27);

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v23 = *v3;
        v24 = *(_QWORD *)(a2 + v23);
        if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          break;
        v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
        *(_QWORD *)(a2 + v23) = v24 + 1;
        v22 |= (unint64_t)(v25 & 0x7F) << v20;
        if ((v25 & 0x80) == 0)
          goto LABEL_35;
        v20 += 7;
        v14 = v21++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_37;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v22) = 0;
LABEL_37:
      *(_DWORD *)(a1 + 24) = v22;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9CFD7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id contactIdentifiersFromINPersons(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        objc_msgSend(v8, "contactIdentifier", (_QWORD)v12);
        v9 = (void *)objc_claimAutoreleasedReturnValue();

        if (v9)
        {
          objc_msgSend(v8, "contactIdentifier");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v2, "addObject:", v10);

        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v5);
  }

  return v2;
}

void sub_1C9CFE1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t atx_CMFBlockListIsItemBlocked(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v2 = getCMFBlockListIsItemBlockedSymbolLoc_ptr;
  v8 = getCMFBlockListIsItemBlockedSymbolLoc_ptr;
  if (!getCMFBlockListIsItemBlockedSymbolLoc_ptr)
  {
    v3 = (void *)CommunicationsFilterLibrary();
    v2 = dlsym(v3, "CMFBlockListIsItemBlocked");
    v6[3] = (uint64_t)v2;
    getCMFBlockListIsItemBlockedSymbolLoc_ptr = v2;
  }
  _Block_object_dispose(&v5, 8);
  if (!v2)
    atx_CMFBlockListIsItemBlocked_cold_1();
  return ((uint64_t (*)(uint64_t))v2)(a1);
}

void sub_1C9CFE258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void sub_1C9CFE488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9CFF1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t CommunicationsFilterLibrary()
{
  void *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = 0;
  if (!CommunicationsFilterLibraryCore_frameworkLibrary)
  {
    v2 = xmmword_1E82E7648;
    v3 = 0;
    CommunicationsFilterLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CommunicationsFilterLibraryCore_frameworkLibrary)
    CommunicationsFilterLibrary_cold_1(&v1);
  return CommunicationsFilterLibraryCore_frameworkLibrary;
}

char *OUTLINED_FUNCTION_4_8()
{
  return dlerror();
}

uint64_t ATXMPBDonationRatioTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v26 = objc_claimAutoreleasedReturnValue();
        v27 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v26;

      }
      else if ((_DWORD)v18 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 1u;
        v28 = *v3;
        v29 = *(_QWORD *)(a2 + v28);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v30 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v29 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v30 = 0;
        }
        *(_QWORD *)(a1 + 8) = v30;
      }
      else if ((_DWORD)v18 == 1)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          v24 = v23 + 1;
          if (v23 == -1 || v24 > *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v24;
          v21 |= (unint64_t)(v25 & 0x7F) << v19;
          if ((v25 & 0x80) == 0)
            goto LABEL_35;
          v19 += 7;
          v15 = v20++ >= 9;
          if (v15)
          {
            LODWORD(v21) = 0;
            goto LABEL_37;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_37:
        *(_DWORD *)(a1 + 24) = v21;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9D00FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXSuggestedPageTypeFromSuggestedFaceType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xA)
    return 1;
  else
    return qword_1C9E80708[a1 - 1];
}

uint64_t OUTLINED_FUNCTION_8_3(void *a1, const char *a2)
{
  return objc_msgSend(a1, "count");
}

uint64_t ATXPBNotificationTimeSensitiveStatusReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t result;
  BOOL v33;
  uint64_t v34;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0)
            goto LABEL_39;
          v20 += 7;
          v14 = v21++ >= 9;
          if (v14)
          {
            v22 = 0;
            goto LABEL_41;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          v22 = 0;
LABEL_41:
        v33 = v22 != 0;
        v34 = 16;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            PBReaderReadString();
            v18 = objc_claimAutoreleasedReturnValue();
            v19 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v18;

          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v26 = 0;
        v27 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 20) |= 2u;
        while (1)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            break;
          v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
          *(_QWORD *)(a2 + v29) = v30 + 1;
          v28 |= (unint64_t)(v31 & 0x7F) << v26;
          if ((v31 & 0x80) == 0)
            goto LABEL_43;
          v26 += 7;
          v14 = v27++ >= 9;
          if (v14)
          {
            v28 = 0;
            goto LABEL_45;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + *v5))
          v28 = 0;
LABEL_45:
        v33 = v28 != 0;
        v34 = 17;
      }
      *(_BYTE *)(a1 + v34) = v33;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9D07064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D08B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D0F028(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D0FBAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_9(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

void sub_1C9D0FD98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9D0FEB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9D0FF2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9D0FFB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9D100B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9D1018C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1C9D10224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1C9D10294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C9D103BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  va_list va;

  va_start(va, a3);
  v5 = v4;

  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1C9D1050C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  *(_QWORD *)(v9 - 40) = v8;
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 40));

  _Unwind_Resume(a1);
}

void sub_1C9D10774(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<ATXPredictionItem>::__vdeallocate(id **a1)
{
  id *v1;
  id *v3;
  id *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 412;

      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void OUTLINED_FUNCTION_0_15(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, a5, 0xCu);
}

void sub_1C9D10D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXMPBAppClipSuppressionTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 24;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_34;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_36;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v20) = 0;
LABEL_36:
            *(_DWORD *)(a1 + 16) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 8;
      }
      v26 = *(void **)(a1 + v25);
      *(_QWORD *)(a1 + v25) = v24;

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9D13648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void ____atx_xpc_private_queue_get_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("atx-xpc-bg", v2);
  v1 = (void *)__atx_xpc_private_queue_get_queue;
  __atx_xpc_private_queue_get_queue = (uint64_t)v0;

}

void sub_1C9D15994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL ATXCandidateRelevanceModelPBMetricsReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  ATXCandidateRelevanceModelPBModelMetrics *v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(ATXCandidateRelevanceModelPBModelMetrics);
        objc_storeStrong(a1 + 7, v17);
        if (PBReaderPlaceMark()
          && (ATXCandidateRelevanceModelPBModelMetricsReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
          goto LABEL_31;
        }
        goto LABEL_36;
      case 2u:
        v17 = objc_alloc_init(ATXCandidateRelevanceModelPBEvaluationMetrics);
        v18 = 4;
        goto LABEL_29;
      case 3u:
        v17 = objc_alloc_init(ATXCandidateRelevanceModelPBEvaluationMetrics);
        v18 = 6;
        goto LABEL_29;
      case 4u:
        v17 = objc_alloc_init(ATXCandidateRelevanceModelPBEvaluationMetrics);
        v18 = 5;
        goto LABEL_29;
      case 5u:
        v17 = objc_alloc_init(ATXCandidateRelevanceModelPBEvaluationMetrics);
        v18 = 2;
        goto LABEL_29;
      case 6u:
        v17 = objc_alloc_init(ATXCandidateRelevanceModelPBEvaluationMetrics);
        v18 = 3;
LABEL_29:
        objc_storeStrong(&a1[v18], v17);
        if (PBReaderPlaceMark()
          && (ATXCandidateRelevanceModelPBEvaluationMetricsReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
          goto LABEL_31;
        }
        goto LABEL_36;
      case 7u:
        v17 = objc_alloc_init(ATXCandidateRelevanceModelPBCandidateMetrics);
        objc_msgSend(a1, "addCandidateMetrics:", v17);
        if (PBReaderPlaceMark()
          && (ATXCandidateRelevanceModelPBCandidateMetricsReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_31:
          PBReaderRecallMark();

LABEL_32:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_36:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_32;
    }
  }
}

id createInfoSuggestion(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  objc_class *v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;

  v5 = a1;
  v6 = a3;
  v7 = (objc_class *)MEMORY[0x1E0D81150];
  v8 = a2;
  v9 = [v7 alloc];
  objc_msgSend(v6, "launchId");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (!v10)
  {
    objc_msgSend(v5, "bundleId");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(v8, "extensionBundleIdentifier");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "kind");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v8, "atx_layoutOptions");

  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%lu"), objc_msgSend(v5, "hash"));
  v16 = (void *)objc_msgSend(v9, "initWithAppBundleIdentifier:widgetBundleIdentifier:widgetKind:criterion:applicableLayouts:suggestionIdentifier:startDate:endDate:intent:metadata:relevanceScore:", v11, v12, v13, &stru_1E82FDC98, v14, v15, 0, 0, v6, 0, 0);

  if (!v10)
  return v16;
}

uint64_t ATXTimelineRelevancePBTimelineRelevanceScoreEntryReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  void *v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 44) |= 2u;
          v18 = *v3;
          v19 = *(_QWORD *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
            *(_QWORD *)(a2 + v18) = v19 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          *(_QWORD *)(a1 + 16) = v20;
          continue;
        case 2u:
          v22 = 0;
          v23 = 0;
          v24 = 0;
          *(_BYTE *)(a1 + 44) |= 1u;
          while (2)
          {
            v25 = *v3;
            v26 = *(_QWORD *)(a2 + v25);
            v27 = v26 + 1;
            if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
              *(_QWORD *)(a2 + v25) = v27;
              v24 |= (unint64_t)(v28 & 0x7F) << v22;
              if (v28 < 0)
              {
                v22 += 7;
                v15 = v23++ >= 9;
                if (v15)
                {
                  v24 = 0;
                  goto LABEL_49;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v24 = 0;
LABEL_49:
          v44 = 8;
          goto LABEL_54;
        case 3u:
          v29 = 0;
          v30 = 0;
          v24 = 0;
          *(_BYTE *)(a1 + 44) |= 4u;
          while (2)
          {
            v31 = *v3;
            v32 = *(_QWORD *)(a2 + v31);
            v33 = v32 + 1;
            if (v32 == -1 || v33 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
              *(_QWORD *)(a2 + v31) = v33;
              v24 |= (unint64_t)(v34 & 0x7F) << v29;
              if (v34 < 0)
              {
                v29 += 7;
                v15 = v30++ >= 9;
                if (v15)
                {
                  v24 = 0;
                  goto LABEL_53;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v24 = 0;
LABEL_53:
          v44 = 24;
LABEL_54:
          *(_QWORD *)(a1 + v44) = v24;
          continue;
        case 4u:
          PBReaderReadString();
          v35 = objc_claimAutoreleasedReturnValue();
          v36 = *(void **)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v35;

          continue;
        case 5u:
          v37 = 0;
          v38 = 0;
          v39 = 0;
          *(_BYTE *)(a1 + 44) |= 8u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v40 = *v3;
        v41 = *(_QWORD *)(a2 + v40);
        v42 = v41 + 1;
        if (v41 == -1 || v42 > *(_QWORD *)(a2 + *v4))
          break;
        v43 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
        *(_QWORD *)(a2 + v40) = v42;
        v39 |= (unint64_t)(v43 & 0x7F) << v37;
        if ((v43 & 0x80) == 0)
          goto LABEL_56;
        v37 += 7;
        v15 = v38++ >= 9;
        if (v15)
        {
          LODWORD(v39) = 0;
          goto LABEL_58;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_56:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v39) = 0;
LABEL_58:
      *(_DWORD *)(a1 + 40) = v39;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9D1CBBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

id OUTLINED_FUNCTION_2_10(id a1)
{
  return a1;
}

double ATXDayZeroScore(void *a1, void *a2, unint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  int v9;
  double v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;

  v5 = a1;
  v6 = a2;
  objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("dayZero"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("minDistinctLaunchedApps"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "intValue");

  v10 = 0.0;
  if (v9 > a3)
  {
    objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("dayZero"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "objectForKeyedSubscript:", CFSTR("dayZeroBumps"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "objectForKeyedSubscript:", v5);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v13, "doubleValue");
    v10 = v14;

  }
  return v10;
}

void sub_1C9D1E394(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

float ATXSetInput(uint64_t a1, unint64_t a2, double a3)
{
  float result;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  if (a2 >= 0x331)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void ATXSetInput(ATXPredictionItem * _Nonnull, _ATXScoreInput, double)");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, CFSTR("_ATXAppPredictor.mm"), 104, CFSTR("Input type must be less than _ATXScoreInputMax: %lu >= %lu"), a2, 817);

  }
  if (fabs(a3) == INFINITY)
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void ATXSetInput(ATXPredictionItem * _Nonnull, _ATXScoreInput, double)");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    +[_ATXScoreTypes stringForScoreInput:](_ATXScoreTypes, "stringForScoreInput:", a2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("_ATXAppPredictor.mm"), 106, CFSTR("Value must be finite (input %lu, \"%@\")"), a2, v11);

  }
  result = a3;
  *(float *)(a1 + 4 * a2 + 16) = result;
  return result;
}

void sub_1C9D1E5AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ATXSetInputAge(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  double v9;
  double v10;
  NSObject *v11;
  void *v12;
  uint8_t v13[24];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  if (v7)
  {
    objc_msgSend(v7, "timeIntervalSinceDate:", v8);
    v10 = -v9;
    if (v9 <= 0.0)
    {
      ATXSetInput(a1, a2, -v9);
    }
    else
    {
      __atxlog_handle_app_prediction();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        +[_ATXScoreTypes stringForScoreInput:](_ATXScoreTypes, "stringForScoreInput:", a2);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        ATXSetInputAge_cold_1(v12, v13, v11, v10);
      }

    }
  }

}

void sub_1C9D1E6D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9D1E770(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9D1E8C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C9D1E99C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9D1EAC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C9D1F348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,void *a25,void *a26,uint64_t a27,void *a28,void *a29,void *a30,void *a31,id a32,void *a33,void *a34,void *a35,uint64_t a36)
{
  void *v36;
  void *v37;
  void *v38;

  a36 = a24;
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);

  _Unwind_Resume(a1);
}

void sub_1C9D20294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,void *a37,void *a38,id a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,void *a45,void *a46,void *a47,uint64_t a48,void *a49,void *a50,uint64_t a51,uint64_t a52)
{
  void *v52;
  void *v53;
  void *v54;

  a52 = a26;
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100]((void ***)&a52);

  _Unwind_Resume(a1);
}

void sub_1C9D2073C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D20B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void **a20)
{
  uint64_t v20;

  std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::~__hash_table((uint64_t)&a20);
  a20 = (void **)(v20 - 112);
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&a20);

  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

void sub_1C9D21070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  void *v34;
  void *v35;

  _Block_object_dispose(&a33, 8);
  a29 = a13;
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&a29);

  _Unwind_Resume(a1);
}

void sub_1C9D212D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1C9D2146C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1C9D2154C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1C9D215C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C9D21648(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9D216DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C9D218E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1C9D21A28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9D21B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1C9D21BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C9D21CA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9D21D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1C9D21E9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9D21FEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9D22328(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9D22658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  void *v24;
  void *v25;
  uint64_t v26;

  _Unwind_Resume(a1);
}

void sub_1C9D226B8()
{
  JUMPOUT(0x1C9D226A0);
}

void sub_1C9D226C0()
{
  JUMPOUT(0x1C9D226A8);
}

void sub_1C9D22744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)_ATXAppPredictor;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1C9D227FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9D22878(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9D22A80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C9D22C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, char a15, uint64_t a16, uint64_t a17, void **a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  a18 = (void **)&a15;
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&a18);

  _Unwind_Resume(a1);
}

void sub_1C9D22DD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9D2308C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C9D231D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1C9D232F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1C9D23424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1C9D23858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31)
{
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;

  _Block_object_dispose((const void *)(v34 - 160), 8);
  *(_QWORD *)(v34 - 160) = v34 - 216;
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 160));

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__118(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__119(uint64_t a1)
{

}

void sub_1C9D24148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t ATXShouldPredictBundle(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if ((objc_msgSend(v7, "bundleHasBeenLaunched:", v6) & 1) != 0)
  {
    v8 = 1;
  }
  else
  {
    objc_msgSend(v5, "appInfoForBundleId:", v6);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v9, "isEnterpriseApp") ^ 1;

  }
  return v8;
}

void sub_1C9D24370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void ATXKeepRandomPredictionItemsBelowLimit(uint64_t a1, unint64_t a2, char **a3, unint64_t a4)
{
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  void **v11;
  uint64_t v12;
  uint32_t v13;
  unsigned int v14;
  id *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id *v19;
  id v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  int64x2_t v38;
  char *v39;
  unint64_t v40;
  void **__dst[411];
  id *v42;
  uint64_t v43;
  uint64_t v44;
  int64x2_t v45;
  char *v46;
  uint64_t v47;

  if (a3)
  {
    v6 = 0xDAB7EC1DD3431B57 * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5);
    v7 = v6 >= a2;
    v8 = v6 - a2;
    if (v8 != 0 && v7)
    {
      std::vector<ATXPredictionItem>::vector(&v42, v8);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ATXPredictionItem const*,ATXPredictionItem const*,ATXPredictionItem*>((int)&v44, (id *)(*(_QWORD *)a1 + 3296 * a2), *(id **)(a1 + 8), v42);
      v11 = v42;
      v12 = v43;
      v13 = arc4random_uniform(0xFFFFFFFF);
      v14 = v13 + ((v13 / 0x7FFFFFFF) | ((v13 / 0x7FFFFFFF) << 31));
      if (v14 <= 1)
        v14 = 1;
      LODWORD(__dst[0]) = v14;
      std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<ATXPredictionItem *>,std::__wrap_iter<ATXPredictionItem *>,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(v11, v12, (uint64_t)__dst);
      v15 = v42;
      v16 = 0xDAB7EC1DD3431B57 * ((v43 - (uint64_t)v42) >> 5);
      if (v16 >= a4)
        v16 = a4;
      if (v16)
      {
        v17 = 0;
        v18 = (uint64_t)(a3 + 2);
        do
        {
          v19 = &v15[412 * v17];
          v20 = *v19;
          memcpy(__dst, v19 + 1, 0xCD2uLL);
          v22 = a3[1];
          v21 = (unint64_t)a3[2];
          if ((unint64_t)v22 >= v21)
          {
            v24 = 0xDAB7EC1DD3431B57 * ((v22 - *a3) >> 5);
            v25 = v24 + 1;
            if (v24 + 1 > 0x13E22CBCE4A902)
              std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]();
            v26 = 0xDAB7EC1DD3431B57 * ((uint64_t)(v21 - (_QWORD)*a3) >> 5);
            if (2 * v26 > v25)
              v25 = 2 * v26;
            if (v26 >= 0x9F1165E725481)
              v27 = 0x13E22CBCE4A902;
            else
              v27 = v25;
            v47 = v18;
            if (v27)
            {
              v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ATXPredictionItem>>(v18, v27);
              v30 = v29;
            }
            else
            {
              v28 = 0;
              v30 = 0;
            }
            v31 = &v28[3296 * v24];
            *(_QWORD *)v31 = v20;
            memcpy(v31 + 8, __dst, 0xCD2uLL);
            v33 = *a3;
            v32 = (unint64_t)a3[1];
            if ((char *)v32 == *a3)
            {
              v38 = vdupq_n_s64(v32);
              v34 = &v28[3296 * v24];
            }
            else
            {
              v34 = &v28[3296 * v24];
              do
              {
                v35 = v32 - 3296;
                v36 = *(_QWORD *)(v32 - 3296);
                v37 = v34 - 3288;
                v34 -= 3296;
                *(_QWORD *)(v32 - 3296) = 0;
                *(_QWORD *)v34 = v36;
                memcpy(v37, (const void *)(v32 - 3288), 0xCD2uLL);
                v32 = v35;
              }
              while ((char *)v35 != v33);
              v38 = *(int64x2_t *)a3;
            }
            v23 = v31 + 3296;
            *a3 = v34;
            a3[1] = v31 + 3296;
            v45 = v38;
            v39 = a3[2];
            a3[2] = &v28[3296 * v30];
            v46 = v39;
            v44 = v38.i64[0];
            std::__split_buffer<ATXPredictionItem>::~__split_buffer((uint64_t)&v44);
            v18 = (uint64_t)(a3 + 2);
          }
          else
          {
            *(_QWORD *)v22 = v20;
            memcpy(v22 + 8, __dst, 0xCD2uLL);
            v23 = v22 + 3296;
          }
          a3[1] = v23;

          ++v17;
          v15 = v42;
          v40 = 0xDAB7EC1DD3431B57 * ((v43 - (uint64_t)v42) >> 5);
          if (v40 >= a4)
            v40 = a4;
        }
        while (v40 > v17);
      }
      __dst[0] = (void **)&v42;
      std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](__dst);
    }
  }
}

void sub_1C9D24690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t v11;

  a11 = (void **)(v11 - 152);
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void sub_1C9D24924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1C9D24A30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C9D24B10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9D24BBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C9D24E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;

  _Block_object_dispose((const void *)(v29 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1C9D2500C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9D25138(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9D2630C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<ATXPredictionItem>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<ATXPredictionItem>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 3296 * a2;
    v6 = -31337.0;
    do
    {
      *(_QWORD *)v4 = 0;
      *(float *)(v4 + 3284) = v6;
      v7 = 16;
      *(_WORD *)(v4 + 3288) = 0;
      do
      {
        *(float *)(v4 + v7) = v6;
        v7 += 4;
      }
      while (v7 != 3284);
      v4 += 3296;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_1C9D26970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem const*>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem const*>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem const*>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem const*>>>::__emplace_unique_key_args<NSString * {__strong},std::pair<NSString * {__strong},ATXPredictionItem const*>>(uint64_t a1, id *a2, __int128 *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  void *i;
  unint64_t v14;
  _QWORD *v15;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = objc_msgSend(*a2, "hash");
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(void **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if ((objc_msgSend(*((id *)i + 2), "isEqualToString:", *a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v8;
  v16 = *a3;
  *(_QWORD *)a3 = 0;
  *((_OWORD *)i + 1) = v16;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v15;
  *v15 = i;
  *(_QWORD *)(v23 + 8 * v3) = v15;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1C9D26BC8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ATXAction * {__strong},int>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void *std::get_temporary_buffer[abi:ne180100]<ATXPredictionItem>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x9F1165E725481)
    v1 = 0x9F1165E725481;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(3296 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

void sub_1C9D26F0C(_Unwind_Exception *exception_object)
{
  id *v1;
  uint64_t v2;

  if (v1)
  {
    do
    {

      v1 += 412;
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<ATXPredictionItem *> &,std::__wrap_iter<ATXPredictionItem *> &>(void ***a1, void ***a2)
{
  void **v2;
  void **v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _BYTE __dst[3282];

  v2 = *a1;
  v3 = *a2;
  v4 = **a1;
  *v2 = 0;
  memcpy(__dst, v2 + 1, sizeof(__dst));
  v5 = *v3;
  *v3 = 0;
  v6 = *v2;
  *v2 = v5;

  memcpy(v2 + 1, v3 + 1, 0xCD2uLL);
  v7 = *v3;
  *v3 = v4;

  return memcpy(v3 + 1, __dst, 0xCD2uLL);
}

char *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,-[_ATXAppPredictor _getPredictionForItems:clipBundleIdsToRank:consumerSubType:intent:scoreLogger:context:featureCache:]::$_0 &,std::__wrap_iter<ATXPredictionItem *>>(char *result, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  float *v10;
  _QWORD *v11;
  uint64_t v12;
  float v13;
  __int16 v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  _BYTE v21[3276];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (result != a2)
  {
    v22 = v5;
    v23 = v4;
    v24 = v2;
    v25 = v3;
    v7 = result;
    v8 = result + 3296;
    if (result + 3296 != a2)
    {
      v9 = 0;
      v10 = (float *)result;
      do
      {
        v11 = v8;
        if (v10[821] < v10[1645])
        {
          v12 = *v8;
          *v8 = 0;
          memcpy(v21, v10 + 826, sizeof(v21));
          v13 = v10[1645];
          v14 = *((_WORD *)v10 + 3292);
          v15 = v9;
          while (1)
          {
            v16 = (float *)&v7[v15];
            v17 = *(_QWORD *)&v7[v15];
            *(_QWORD *)v16 = 0;
            v18 = *(void **)&v7[v15 + 3296];
            *((_QWORD *)v16 + 412) = v17;

            memcpy(v16 + 826, v16 + 2, 0xCD2uLL);
            if (!v15)
              break;
            v15 -= 3296;
            if (*(v16 - 3) >= v13)
            {
              v19 = (uint64_t)&v7[v15 + 3296];
              goto LABEL_10;
            }
          }
          v19 = (uint64_t)v7;
LABEL_10:
          v20 = *(void **)v19;
          *(_QWORD *)v19 = v12;

          result = (char *)memcpy(v16 + 2, v21, 0xCCCuLL);
          *(float *)(v19 + 3284) = v13;
          *(_WORD *)(v19 + 3288) = v14;
        }
        v8 = v11 + 412;
        v9 += 3296;
        v10 = (float *)v11;
      }
      while (v11 + 412 != (_QWORD *)a2);
    }
  }
  return result;
}

void sub_1C9D27960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  id *v9;
  uint64_t v11;

  if (v9)
  {
    v11 = a9 + 1;
    do
    {

      v9 += 412;
      --v11;
    }
    while (v11);
  }
  _Unwind_Resume(exception_object);
}

void **std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,ATXPredictionItem *,ATXPredictionItem *,std::__wrap_iter<ATXPredictionItem *>,0>(void **a1, void **a2, void **a3)
{
  void **v3;
  void **v4;
  void **v6;
  void *v7;
  void *v8;

  v3 = a3;
  v4 = a1;
  if (a1 != a2)
  {
    v6 = a3;
    do
    {
      v7 = *v4;
      *v4 = 0;
      v8 = *v6;
      *v6 = v7;

      memcpy(v6 + 1, v4 + 1, 0xCD2uLL);
      v3 += 412;
      v4 += 412;
      v6 += 412;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void **std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<ATXPredictionItem *>>(void **a1, void **a2, void **a3)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v10;
  void **v11;

  v4 = a2;
  v10 = a2;
  v11 = a1;
  while (1)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<ATXPredictionItem *> &,std::__wrap_iter<ATXPredictionItem *> &>(&v11, &v10);
    v5 = v11 + 412;
    v6 = v10 + 412;
    v10 = v6;
    v11 += 412;
    if (v6 == a3)
      break;
    if (v5 == v4)
      v4 = v6;
  }
  if (v5 != v4)
  {
    do
    {
      v10 = v4;
      while (1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<ATXPredictionItem *> &,std::__wrap_iter<ATXPredictionItem *> &>(&v11, &v10);
        v7 = v11 + 412;
        v8 = v10 + 412;
        v10 = v8;
        v11 += 412;
        if (v8 == a3)
          break;
        if (v7 == v4)
          v4 = v8;
      }
    }
    while (v7 != v4);
  }
  return v5;
}

id *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ATXPredictionItem const*,ATXPredictionItem const*,ATXPredictionItem*>(int a1, id *a2, id *a3, id *location)
{
  id *v5;
  id *v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    objc_storeStrong(location, *v5);
    memcpy(location + 1, v5 + 1, 0xCD2uLL);
    location += 412;
    v5 += 412;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<ATXPredictionItem *>,std::__wrap_iter<ATXPredictionItem *>,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(void **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  void **v6;
  uint64_t v7;
  void **v9[2];
  __int128 v10;
  void **v11;

  v11 = a1;
  if (a2 - (uint64_t)a1 >= 3297)
  {
    v10 = xmmword_1C9E80800;
    v4 = a2 - 3296;
    if (a2 - 3296 > (unint64_t)a1)
    {
      v6 = (void **)((a2 - (uint64_t)a1) / 0xCE0uLL - 1);
      do
      {
        v9[0] = 0;
        v9[1] = v6;
        v7 = std::uniform_int_distribution<long>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>((uint64_t)&v10, a3, v9);
        if (v7)
        {
          v9[0] = &v11[412 * v7];
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<ATXPredictionItem *> &,std::__wrap_iter<ATXPredictionItem *> &>(&v11, v9);
        }
        v11 += 412;
        v6 = (void **)((char *)v6 - 1);
      }
      while ((unint64_t)v11 < v4);
    }
  }
  return a2;
}

uint64_t std::uniform_int_distribution<long>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v10[64];

  result = a3[1];
  v4 = result - *a3;
  if (result != *a3)
  {
    v5 = v4 + 1;
    if (v4 == -1)
    {
      std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, 0x40uLL);
      return std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval((uint64_t)v10);
    }
    else
    {
      v7 = __clz(v5);
      v8 = 63;
      if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v8 = 64;
      std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, v8 - v7);
      do
        v9 = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval((uint64_t)v10);
      while (v9 >= v5);
      return *a3 + v9;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (a3 % 0x1E)
    v3 = a3 / 0x1E + 1;
  else
    v3 = a3 / 0x1E;
  v4 = a3 / v3;
  *(_QWORD *)(result + 16) = a3 / v3;
  *(_QWORD *)(result + 24) = v3;
  v5 = (-1 << (a3 / v3)) & 0x7FFFFFFE;
  if (a3 / v3 >= 0x40)
    v5 = 0;
  *(_QWORD *)(result + 40) = v5;
  if ((v5 ^ 0x7FFFFFFE) > v5 / v3)
  {
    ++v3;
    v4 = a3 / v3;
    *(_QWORD *)(result + 16) = a3 / v3;
    *(_QWORD *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      v6 = 0;
      *(_QWORD *)(result + 32) = v3 + v4 * v3 - a3;
      *(_QWORD *)(result + 40) = 0;
      goto LABEL_13;
    }
    *(_QWORD *)(result + 40) = (-1 << v4) & 0x7FFFFFFE;
  }
  *(_QWORD *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 > 0x3E)
    v6 = 0;
  else
    v6 = 0x3FFFFFFFuLL >> v4 << (v4 + 1);
LABEL_13:
  *(_QWORD *)(result + 48) = v6;
  v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4)
    v7 = 0;
  if (v4 >= 0x1F)
    v8 = -1;
  else
    v8 = 0xFFFFFFFF >> ~(_BYTE)v4;
  *(_DWORD *)(result + 56) = v7;
  *(_DWORD *)(result + 60) = v8;
  return result;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval(uint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    result = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 16);
    v6 = **(_DWORD **)a1;
    do
    {
      do
      {
        v7 = v6 / 0xADC8;
        v8 = 48271 * (v6 % 0xADC8);
        v7 *= 3399;
        v9 = v8 >= v7;
        v10 = v8 - v7;
        if (v9)
          v11 = 0;
        else
          v11 = 0x7FFFFFFF;
        v6 = v11 + v10;
        v12 = v6 - 1;
      }
      while (*(_QWORD *)(a1 + 40) <= v12);
      v13 = result << v5;
      if (v5 >= 0x40)
        v13 = 0;
      result = v13 + (*(_DWORD *)(a1 + 56) & v12);
      ++v4;
    }
    while (v4 != v2);
    **(_DWORD **)a1 = v6;
  }
  else
  {
    result = 0;
  }
  v14 = *(_QWORD *)(a1 + 24);
  if (v2 < v14)
  {
    v15 = *(unsigned int **)a1;
    v16 = *(_QWORD *)(a1 + 48);
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_DWORD *)(a1 + 60);
    v19 = *v15;
    while (1)
    {
      v20 = v19 / 0xADC8;
      v21 = 48271 * (v19 % 0xADC8);
      v20 *= 3399;
      v9 = v21 >= v20;
      v22 = v21 - v20;
      if (v9)
        v23 = 0;
      else
        v23 = 0x7FFFFFFF;
      v19 = v23 + v22;
      v24 = v19 - 1;
      if (v16 > v24)
      {
        v25 = result << (v17 + 1);
        if (v17 >= 0x3F)
          v25 = 0;
        result = v25 + (v18 & v24);
        if (++v2 == v14)
          break;
      }
    }
    *v15 = v19;
  }
  return result;
}

void sub_1C9D28198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9D286C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Block_object_dispose((const void *)(v29 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1C9D28990(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D28A0C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D28A78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D29518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D2B224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_4_9()
{
  id *v0;

  return objc_msgSend(*v0, "count");
}

id NSErrorForInvalidInfoSourceIdentifier(void *a1)
{
  objc_class *v1;
  id v2;
  void *v3;
  objc_class *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v1 = (objc_class *)MEMORY[0x1E0CB3940];
  v2 = a1;
  v3 = (void *)objc_msgSend([v1 alloc], "initWithFormat:", CFSTR("source ID \"%@\" is invalid"), v2);

  v4 = (objc_class *)MEMORY[0x1E0CB35C8];
  v5 = v3;
  v6 = [v4 alloc];
  v10 = *MEMORY[0x1E0CB2D50];
  v11[0] = v5;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v11, &v10, 1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = (void *)objc_msgSend(v6, "initWithDomain:code:userInfo:", CFSTR("ATXInfoSuggestionServerErrorDomain"), -1, v7);
  return v8;
}

void toDictionaryApplier(void *a1, uint64_t a2, void *a3)
{
  double v5;
  void *v6;
  id v7;
  id v8;
  id v9;

  if (*(double *)&a2 == 0.0 && a2 < 0)
    v5 = 0.0;
  else
    v5 = *(double *)&a2;
  v6 = (void *)MEMORY[0x1E0CB37E8];
  v7 = a1;
  v8 = a3;
  objc_msgSend(v6, "numberWithDouble:", v5);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v9, v7);

}

CFStringRef copyDescriptionOfValueSlot(uint64_t a1)
{
  double v1;

  v1 = *(double *)&a1;
  if (*(double *)&a1 == 0.0 && a1 < 0)
    v1 = 0.0;
  return CFStringCreateWithFormat(0, 0, CFSTR("%f"), *(_QWORD *)&v1);
}

BOOL valueSlotsEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t ATXMPBAnchorModelPredictionsGeneratedTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  void *v37;
  uint64_t v38;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 24;
          goto LABEL_42;
        case 2u:
          *(_BYTE *)(a1 + 56) |= 1u;
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v23 = 0;
          }
          *(_QWORD *)(a1 + 8) = v23;
          continue;
        case 3u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 32;
          goto LABEL_42;
        case 4u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 56) |= 4u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            v29 = v28 + 1;
            if (v28 == -1 || v29 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v29;
              v26 |= (unint64_t)(v30 & 0x7F) << v24;
              if (v30 < 0)
              {
                v24 += 7;
                v15 = v25++ >= 9;
                if (v15)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_46;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_46:
          v38 = 52;
          goto LABEL_51;
        case 5u:
          v31 = 0;
          v32 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 56) |= 2u;
          break;
        case 6u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 16;
          goto LABEL_42;
        case 7u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 40;
LABEL_42:
          v37 = *(void **)(a1 + v19);
          *(_QWORD *)(a1 + v19) = v18;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v33 = *v3;
        v34 = *(_QWORD *)(a2 + v33);
        v35 = v34 + 1;
        if (v34 == -1 || v35 > *(_QWORD *)(a2 + *v4))
          break;
        v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
        *(_QWORD *)(a2 + v33) = v35;
        v26 |= (unint64_t)(v36 & 0x7F) << v31;
        if ((v36 & 0x80) == 0)
          goto LABEL_48;
        v31 += 7;
        v15 = v32++ >= 9;
        if (v15)
        {
          LODWORD(v26) = 0;
          goto LABEL_50;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_48:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_50:
      v38 = 48;
LABEL_51:
      *(_DWORD *)(a1 + v38) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9D33B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D349D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v34;

  v34 = v22;
  v32 = *(void **)(v31 - 144);

  _Unwind_Resume(a1);
}

void sub_1C9D34D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  _Unwind_Resume(a1);
}

void sub_1C9D393E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  void *v67;

  STACK[0x1F40] = (unint64_t)&STACK[0x1EF0];
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1F40]);

  _Unwind_Resume(a1);
}

void sub_1C9D3A048()
{
  void *v0;
  void *v1;

  JUMPOUT(0x1C9D3A158);
}

void sub_1C9D3A054()
{
  void *v0;
  void *v1;
  void *v2;

  JUMPOUT(0x1C9D3A158);
}

void sub_1C9D3A060()
{
  JUMPOUT(0x1C9D3A0A8);
}

void sub_1C9D3A068()
{
  void *v0;
  void *v1;

  JUMPOUT(0x1C9D3A158);
}

void sub_1C9D3A074()
{
  void *v0;

  JUMPOUT(0x1C9D3A158);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void sub_1C9D3A39C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1C9D3A6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1C9D3A91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1C9D3AA84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9D3AC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1C9D3ADE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9D3AE94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1C9D3AFEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1C9D3B210(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t ATXMagicalMomentsPBMMTriggeredTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v23;

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_33:
        *(_DWORD *)(a1 + 16) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9D40C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D44C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C9D457CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D45E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D4619C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D46534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D46898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D46C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D47094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D480E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D48358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D48540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D487FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D48918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D48CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D49230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D4966C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D49BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D49E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D4A2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D4AFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AWDProactiveAppPredictionAppLaunchSequenceReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  void *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        if (v23)
          objc_msgSend((id)a1, "addBundleid:", v23);

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_35:
        *(_QWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9D50108(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D526AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id dateFromDict(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  if (a1)
  {
    v1 = (objc_class *)MEMORY[0x1E0C99D48];
    v2 = a1;
    v3 = [v1 alloc];
    v4 = (void *)objc_msgSend(v3, "initWithCalendarIdentifier:", *MEMORY[0x1E0C996C8]);
    objc_msgSend(MEMORY[0x1E0C99D78], "atx_componentsFromDictionary:", v2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v5, "year") == 0x7FFFFFFFFFFFFFFFLL)
    {
      objc_msgSend(MEMORY[0x1E0C99D68], "now");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v4, "component:fromDate:", 4, v6);

      objc_msgSend(v5, "setYear:", v7);
    }
    objc_msgSend(v4, "dateFromComponents:", v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v8 = 0;
  }
  return v8;
}

void OUTLINED_FUNCTION_1_10(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

uint64_t ATXPredictionUpdateCountPBPredictionUpdateCountTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t result;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v24;

      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          v26 = 0;
          v27 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 24) |= 1u;
          while (1)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
              break;
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v20 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0)
              goto LABEL_43;
            v26 += 7;
            v14 = v27++ >= 9;
            if (v14)
            {
              LODWORD(v20) = 0;
              goto LABEL_45;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v20) = 0;
LABEL_45:
          v32 = 16;
        }
        else
        {
          if ((_DWORD)v17 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 24) |= 2u;
          while (1)
          {
            v21 = *v3;
            v22 = *(_QWORD *)(a2 + v21);
            if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
              break;
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0)
              goto LABEL_39;
            v18 += 7;
            v14 = v19++ >= 9;
            if (v14)
            {
              LODWORD(v20) = 0;
              goto LABEL_41;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v20) = 0;
LABEL_41:
          v32 = 20;
        }
        *(_DWORD *)(a1 + v32) = v20;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL ATXMPBBlendingLayoutSelectionTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 56;
          goto LABEL_28;
        case 2u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
          goto LABEL_28;
        case 3u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 48;
          goto LABEL_28;
        case 4u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_28;
        case 5u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
          goto LABEL_28;
        case 6u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_28;
        case 7u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 40;
LABEL_28:
          v19 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          goto LABEL_29;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_29:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9D57E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 176), 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_11(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x20u);
}

uint64_t ATXPBMinimalActionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 32) |= 1u;
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && (v24 = v23 + 8, v23 + 8 <= *(_QWORD *)(a2 + *v4)))
        {
          v25 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v24;
        }
        else
        {
          v25 = 0;
          *(_BYTE *)(a2 + *v5) = 1;
        }
        *(_QWORD *)(a1 + 8) = v25;
      }
      else
      {
        if ((_DWORD)v18 == 2)
        {
          PBReaderReadString();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 16;
        }
        else
        {
          if ((_DWORD)v18 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          PBReaderReadString();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 24;
        }
        v21 = *(void **)(a1 + v20);
        *(_QWORD *)(a1 + v20) = v19;

      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9D5A160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t hash32(void *a1)
{
  id v1;
  id v2;
  const void *v3;
  id v4;
  const char *v5;
  CC_LONG v6;
  CC_SHA256_CTX v8;
  unsigned __int8 md[4];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  memset(&v8, 0, sizeof(v8));
  v1 = a1;
  CC_SHA256_Init(&v8);
  v2 = objc_retainAutorelease(v1);
  v3 = (const void *)objc_msgSend(v2, "UTF8String", *(_OWORD *)v8.count, *(_OWORD *)&v8.hash[2], *(_OWORD *)&v8.hash[6], *(_OWORD *)&v8.wbuf[2], *(_OWORD *)&v8.wbuf[6], *(_OWORD *)&v8.wbuf[10], *(_QWORD *)&v8.wbuf[14]);
  v4 = objc_retainAutorelease(v2);
  v5 = (const char *)objc_msgSend(v4, "UTF8String");

  v6 = strlen(v5);
  CC_SHA256_Update(&v8, v3, v6);
  CC_SHA256_Final(md, &v8);
  return *(unsigned int *)md;
}

uint64_t compareEntries(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a1 > *a2;
}

void sub_1C9D5C2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9D5D254(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5D3D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5D6E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5D7BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5D91C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5DA58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5DECC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5E044(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5E1A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5E27C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5E358(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5E45C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5E560(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5E6BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5E720(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5E7FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5E8D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5E93C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5EA50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5EC54(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5ED44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5EDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1C9D5EE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1C9D5EEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1C9D5EF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1C9D5F438(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5F48C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5F510(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5F594(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D5F8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t ATXCandidateRelevanceModelPBEvaluationMetricsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  char v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  char v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  char v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char v126;
  char v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 136) |= 0x10000000u;
          v18 = *v3;
          v19 = *(_QWORD *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFFBLL && v19 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v19);
            *(_QWORD *)(a2 + v18) = v19 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v134 = 120;
          goto LABEL_254;
        case 2u:
          *(_DWORD *)(a1 + 136) |= 0x20000000u;
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v134 = 124;
          goto LABEL_254;
        case 3u:
          *(_DWORD *)(a1 + 136) |= 0x40000000u;
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 <= 0xFFFFFFFFFFFFFFFBLL && v25 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v134 = 128;
          goto LABEL_254;
        case 4u:
          *(_DWORD *)(a1 + 136) |= 0x80000000;
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v134 = 132;
          goto LABEL_254;
        case 5u:
          *(_DWORD *)(a1 + 136) |= 0x1000000u;
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 <= 0xFFFFFFFFFFFFFFFBLL && v29 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v134 = 104;
          goto LABEL_254;
        case 6u:
          v30 = 0;
          v31 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + 136) |= 0x8000000u;
          while (2)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            v35 = v34 + 1;
            if (v34 == -1 || v35 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
              *(_QWORD *)(a2 + v33) = v35;
              v32 |= (unint64_t)(v36 & 0x7F) << v30;
              if (v36 < 0)
              {
                v30 += 7;
                v15 = v31++ >= 9;
                if (v15)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_168;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_168:
          v133 = 116;
          goto LABEL_213;
        case 7u:
          v37 = 0;
          v38 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + 136) |= 0x4000000u;
          while (2)
          {
            v39 = *v3;
            v40 = *(_QWORD *)(a2 + v39);
            v41 = v40 + 1;
            if (v40 == -1 || v41 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
              *(_QWORD *)(a2 + v39) = v41;
              v32 |= (unint64_t)(v42 & 0x7F) << v37;
              if (v42 < 0)
              {
                v37 += 7;
                v15 = v38++ >= 9;
                if (v15)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_172;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_172:
          v133 = 112;
          goto LABEL_213;
        case 8u:
          v43 = 0;
          v44 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + 136) |= 0x2000000u;
          while (2)
          {
            v45 = *v3;
            v46 = *(_QWORD *)(a2 + v45);
            v47 = v46 + 1;
            if (v46 == -1 || v47 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
              *(_QWORD *)(a2 + v45) = v47;
              v32 |= (unint64_t)(v48 & 0x7F) << v43;
              if (v48 < 0)
              {
                v43 += 7;
                v15 = v44++ >= 9;
                if (v15)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_176;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_176:
          v133 = 108;
          goto LABEL_213;
        case 9u:
          *(_DWORD *)(a1 + 136) |= 0x100000u;
          v49 = *v3;
          v50 = *(_QWORD *)(a2 + v49);
          if (v50 <= 0xFFFFFFFFFFFFFFFBLL && v50 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v50);
            *(_QWORD *)(a2 + v49) = v50 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v134 = 88;
          goto LABEL_254;
        case 0xAu:
          *(_DWORD *)(a1 + 136) |= 0x200000u;
          v51 = *v3;
          v52 = *(_QWORD *)(a2 + v51);
          if (v52 <= 0xFFFFFFFFFFFFFFFBLL && v52 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v52);
            *(_QWORD *)(a2 + v51) = v52 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v134 = 92;
          goto LABEL_254;
        case 0xBu:
          *(_DWORD *)(a1 + 136) |= 0x400000u;
          v53 = *v3;
          v54 = *(_QWORD *)(a2 + v53);
          if (v54 <= 0xFFFFFFFFFFFFFFFBLL && v54 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v54);
            *(_QWORD *)(a2 + v53) = v54 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v134 = 96;
          goto LABEL_254;
        case 0xCu:
          *(_DWORD *)(a1 + 136) |= 0x800000u;
          v55 = *v3;
          v56 = *(_QWORD *)(a2 + v55);
          if (v56 <= 0xFFFFFFFFFFFFFFFBLL && v56 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v56);
            *(_QWORD *)(a2 + v55) = v56 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v134 = 100;
          goto LABEL_254;
        case 0xDu:
          *(_DWORD *)(a1 + 136) |= 0x10000u;
          v57 = *v3;
          v58 = *(_QWORD *)(a2 + v57);
          if (v58 <= 0xFFFFFFFFFFFFFFFBLL && v58 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v58);
            *(_QWORD *)(a2 + v57) = v58 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v134 = 72;
          goto LABEL_254;
        case 0xEu:
          v59 = 0;
          v60 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + 136) |= 0x80000u;
          while (2)
          {
            v61 = *v3;
            v62 = *(_QWORD *)(a2 + v61);
            v63 = v62 + 1;
            if (v62 == -1 || v63 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v62);
              *(_QWORD *)(a2 + v61) = v63;
              v32 |= (unint64_t)(v64 & 0x7F) << v59;
              if (v64 < 0)
              {
                v59 += 7;
                v15 = v60++ >= 9;
                if (v15)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_180;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_180:
          v133 = 84;
          goto LABEL_213;
        case 0xFu:
          v65 = 0;
          v66 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + 136) |= 0x40000u;
          while (2)
          {
            v67 = *v3;
            v68 = *(_QWORD *)(a2 + v67);
            v69 = v68 + 1;
            if (v68 == -1 || v69 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v70 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v68);
              *(_QWORD *)(a2 + v67) = v69;
              v32 |= (unint64_t)(v70 & 0x7F) << v65;
              if (v70 < 0)
              {
                v65 += 7;
                v15 = v66++ >= 9;
                if (v15)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_184;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_184:
          v133 = 80;
          goto LABEL_213;
        case 0x10u:
          v71 = 0;
          v72 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + 136) |= 0x20000u;
          while (2)
          {
            v73 = *v3;
            v74 = *(_QWORD *)(a2 + v73);
            v75 = v74 + 1;
            if (v74 == -1 || v75 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v76 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v74);
              *(_QWORD *)(a2 + v73) = v75;
              v32 |= (unint64_t)(v76 & 0x7F) << v71;
              if (v76 < 0)
              {
                v71 += 7;
                v15 = v72++ >= 9;
                if (v15)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_188;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_188:
          v133 = 76;
          goto LABEL_213;
        case 0x11u:
          *(_DWORD *)(a1 + 136) |= 0x1000u;
          v77 = *v3;
          v78 = *(_QWORD *)(a2 + v77);
          if (v78 <= 0xFFFFFFFFFFFFFFFBLL && v78 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v78);
            *(_QWORD *)(a2 + v77) = v78 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v134 = 56;
          goto LABEL_254;
        case 0x12u:
          *(_DWORD *)(a1 + 136) |= 0x2000u;
          v79 = *v3;
          v80 = *(_QWORD *)(a2 + v79);
          if (v80 <= 0xFFFFFFFFFFFFFFFBLL && v80 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v80);
            *(_QWORD *)(a2 + v79) = v80 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v134 = 60;
          goto LABEL_254;
        case 0x13u:
          *(_DWORD *)(a1 + 136) |= 0x4000u;
          v81 = *v3;
          v82 = *(_QWORD *)(a2 + v81);
          if (v82 <= 0xFFFFFFFFFFFFFFFBLL && v82 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v82);
            *(_QWORD *)(a2 + v81) = v82 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v134 = 64;
          goto LABEL_254;
        case 0x14u:
          *(_DWORD *)(a1 + 136) |= 0x8000u;
          v83 = *v3;
          v84 = *(_QWORD *)(a2 + v83);
          if (v84 <= 0xFFFFFFFFFFFFFFFBLL && v84 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v84);
            *(_QWORD *)(a2 + v83) = v84 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v134 = 68;
          goto LABEL_254;
        case 0x15u:
          *(_DWORD *)(a1 + 136) |= 0x100u;
          v85 = *v3;
          v86 = *(_QWORD *)(a2 + v85);
          if (v86 <= 0xFFFFFFFFFFFFFFFBLL && v86 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v86);
            *(_QWORD *)(a2 + v85) = v86 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v134 = 40;
          goto LABEL_254;
        case 0x16u:
          v87 = 0;
          v88 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + 136) |= 0x800u;
          while (2)
          {
            v89 = *v3;
            v90 = *(_QWORD *)(a2 + v89);
            v91 = v90 + 1;
            if (v90 == -1 || v91 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v92 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v90);
              *(_QWORD *)(a2 + v89) = v91;
              v32 |= (unint64_t)(v92 & 0x7F) << v87;
              if (v92 < 0)
              {
                v87 += 7;
                v15 = v88++ >= 9;
                if (v15)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_192;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_192:
          v133 = 52;
          goto LABEL_213;
        case 0x17u:
          v93 = 0;
          v94 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + 136) |= 0x400u;
          while (2)
          {
            v95 = *v3;
            v96 = *(_QWORD *)(a2 + v95);
            v97 = v96 + 1;
            if (v96 == -1 || v97 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v98 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v96);
              *(_QWORD *)(a2 + v95) = v97;
              v32 |= (unint64_t)(v98 & 0x7F) << v93;
              if (v98 < 0)
              {
                v93 += 7;
                v15 = v94++ >= 9;
                if (v15)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_196;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_196:
          v133 = 48;
          goto LABEL_213;
        case 0x18u:
          v99 = 0;
          v100 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + 136) |= 0x200u;
          while (2)
          {
            v101 = *v3;
            v102 = *(_QWORD *)(a2 + v101);
            v103 = v102 + 1;
            if (v102 == -1 || v103 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v104 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v102);
              *(_QWORD *)(a2 + v101) = v103;
              v32 |= (unint64_t)(v104 & 0x7F) << v99;
              if (v104 < 0)
              {
                v99 += 7;
                v15 = v100++ >= 9;
                if (v15)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_200;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_200:
          v133 = 44;
          goto LABEL_213;
        case 0x19u:
          *(_DWORD *)(a1 + 136) |= 0x10u;
          v105 = *v3;
          v106 = *(_QWORD *)(a2 + v105);
          if (v106 <= 0xFFFFFFFFFFFFFFFBLL && v106 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v106);
            *(_QWORD *)(a2 + v105) = v106 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v134 = 24;
          goto LABEL_254;
        case 0x1Au:
          *(_DWORD *)(a1 + 136) |= 0x20u;
          v107 = *v3;
          v108 = *(_QWORD *)(a2 + v107);
          if (v108 <= 0xFFFFFFFFFFFFFFFBLL && v108 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v108);
            *(_QWORD *)(a2 + v107) = v108 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v134 = 28;
          goto LABEL_254;
        case 0x1Bu:
          *(_DWORD *)(a1 + 136) |= 0x40u;
          v109 = *v3;
          v110 = *(_QWORD *)(a2 + v109);
          if (v110 <= 0xFFFFFFFFFFFFFFFBLL && v110 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v110);
            *(_QWORD *)(a2 + v109) = v110 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v134 = 32;
          goto LABEL_254;
        case 0x1Cu:
          *(_DWORD *)(a1 + 136) |= 0x80u;
          v111 = *v3;
          v112 = *(_QWORD *)(a2 + v111);
          if (v112 <= 0xFFFFFFFFFFFFFFFBLL && v112 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v112);
            *(_QWORD *)(a2 + v111) = v112 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v134 = 36;
          goto LABEL_254;
        case 0x1Du:
          *(_DWORD *)(a1 + 136) |= 1u;
          v113 = *v3;
          v114 = *(_QWORD *)(a2 + v113);
          if (v114 <= 0xFFFFFFFFFFFFFFFBLL && v114 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v114);
            *(_QWORD *)(a2 + v113) = v114 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v134 = 8;
LABEL_254:
          *(_DWORD *)(a1 + v134) = v20;
          continue;
        case 0x1Eu:
          v115 = 0;
          v116 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + 136) |= 8u;
          while (2)
          {
            v117 = *v3;
            v118 = *(_QWORD *)(a2 + v117);
            v119 = v118 + 1;
            if (v118 == -1 || v119 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v120 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v118);
              *(_QWORD *)(a2 + v117) = v119;
              v32 |= (unint64_t)(v120 & 0x7F) << v115;
              if (v120 < 0)
              {
                v115 += 7;
                v15 = v116++ >= 9;
                if (v15)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_204;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_204:
          v133 = 20;
          goto LABEL_213;
        case 0x1Fu:
          v121 = 0;
          v122 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + 136) |= 4u;
          while (2)
          {
            v123 = *v3;
            v124 = *(_QWORD *)(a2 + v123);
            v125 = v124 + 1;
            if (v124 == -1 || v125 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v126 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v124);
              *(_QWORD *)(a2 + v123) = v125;
              v32 |= (unint64_t)(v126 & 0x7F) << v121;
              if (v126 < 0)
              {
                v121 += 7;
                v15 = v122++ >= 9;
                if (v15)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_208;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_208:
          v133 = 16;
          goto LABEL_213;
        case 0x20u:
          v127 = 0;
          v128 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + 136) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v129 = *v3;
        v130 = *(_QWORD *)(a2 + v129);
        v131 = v130 + 1;
        if (v130 == -1 || v131 > *(_QWORD *)(a2 + *v4))
          break;
        v132 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v130);
        *(_QWORD *)(a2 + v129) = v131;
        v32 |= (unint64_t)(v132 & 0x7F) << v127;
        if ((v132 & 0x80) == 0)
          goto LABEL_210;
        v127 += 7;
        v15 = v128++ >= 9;
        if (v15)
        {
          LODWORD(v32) = 0;
          goto LABEL_212;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_210:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v32) = 0;
LABEL_212:
      v133 = 12;
LABEL_213:
      *(_DWORD *)(a1 + v133) = v32;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9D67498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D67868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9D68908(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id compiledExpressionInstructions(void *a1, void *a2)
{
  id v3;
  void (**v4)(id, id, void *);
  void *v5;
  void *v6;

  v3 = a2;
  v4 = a1;
  v5 = (void *)objc_opt_new();
  v4[2](v4, v3, v5);

  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void pop_0(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;

  v1 = a1;
  v2 = v1[1];
  if (v2)
  {
    v1[1] = v2 - 1;

  }
  else
  {
    __atxlog_handle_default();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      shouldReturnUndefined_cold_1();

    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "double pop(_ATXDeprecatedScoreInterpreterCtx *__strong)");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "handleFailureInFunction:file:lineNumber:description:", v5, CFSTR("_ATXDeprecatedScoreInterpreter.m"), 189, CFSTR("App prediction interpreter stack underflow"));

    __break(1u);
  }
}

double runInstructionsAndPopResult(void *a1, void *a2)
{
  id v3;
  _QWORD *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  double v10;
  _QWORD *v11;
  unint64_t v12;
  double v13;
  double v14;
  NSObject *v16;
  void *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v20 != v8)
          objc_enumerationMutation(v5);
        v10 = (*(double (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * i) + 16))(*(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * i));
        v11 = v4;
        v12 = v4[1];
        if (v12 >= 0x1F4)
        {
          __atxlog_handle_default();
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            runInstructionsAndPopResult_cold_1();

          objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler", (_QWORD)v19);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void push(_ATXDeprecatedScoreInterpreterCtx *__strong, double)");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "handleFailureInFunction:file:lineNumber:description:", v18, CFSTR("_ATXDeprecatedScoreInterpreter.m"), 179, CFSTR("App prediction interpreter stack overflow"));

          __break(1u);
        }
        v4[1] = v12 + 1;
        *(double *)&v4[v12 + 2] = v10;

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v7);
  }

  pop_0(v4);
  v14 = v13;

  return v14;
}

void shouldReturnUndefined_0(void *a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  NSObject *v9;
  void *v10;
  void *v11;

  v3 = a1;
  v4 = v3[1];
  v5 = v4 - a2;
  if (v4 < a2)
  {
    __atxlog_handle_default();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      shouldReturnUndefined_cold_1();

    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "BOOL shouldReturnUndefined(_ATXDeprecatedScoreInterpreterCtx *__strong, NSUInteger)");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "handleFailureInFunction:file:lineNumber:description:", v11, CFSTR("_ATXDeprecatedScoreInterpreter.m"), 209, CFSTR("App prediction interpreter stack underflow"));

    __break(1u);
  }
  else
  {
    if (v5 < v4 && *(double *)&v3[v5 + 2] != -31337.0)
    {
      v6 = -(uint64_t)a2;
      do
      {
        v7 = v6;
        v8 = __CFADD__(v6++, 1);
      }
      while (!v8 && *(double *)&v3[v4 + 3 + v7] != -31337.0);
    }

  }
}

void drop_0(void *a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  NSObject *v7;
  void *v9;
  void *v10;

  v3 = a1;
  v4 = v3[1];
  v5 = v4 >= a2;
  v6 = v4 - a2;
  if (v5)
  {
    v3[1] = v6;

  }
  else
  {
    __atxlog_handle_default();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      shouldReturnUndefined_cold_1();

    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void drop(_ATXDeprecatedScoreInterpreterCtx *__strong, NSUInteger)");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "handleFailureInFunction:file:lineNumber:description:", v10, CFSTR("_ATXDeprecatedScoreInterpreter.m"), 199, CFSTR("App prediction interpreter stack underflow"));

    __break(1u);
  }
}

void sub_1C9D6C7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,id a45,char a46)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a45);
  _Block_object_dispose(&a46, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXPBContactModeEntityMetricsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  void *v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_37;
        case 2u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 32) |= 2u;
          while (2)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_41;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_41:
          v32 = 28;
          goto LABEL_46;
        case 3u:
          v26 = 0;
          v27 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          break;
        case 4u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
LABEL_37:
          v31 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v28 = *v3;
        v29 = *(_QWORD *)(a2 + v28);
        if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          break;
        v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
        *(_QWORD *)(a2 + v28) = v29 + 1;
        v22 |= (unint64_t)(v30 & 0x7F) << v26;
        if ((v30 & 0x80) == 0)
          goto LABEL_43;
        v26 += 7;
        v14 = v27++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_45;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v22) = 0;
LABEL_45:
      v32 = 24;
LABEL_46:
      *(_DWORD *)(a1 + v32) = v22;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t ATXTimelineRelevancePBTimelineRelevanceStackConfigSummaryReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_57;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_59;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_57:
          if (*(_BYTE *)(a2 + *v5))
            v19 = 0;
LABEL_59:
          *(_QWORD *)(a1 + 8) = v19;
          continue;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 32) |= 4u;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_63:
          v45 = 20;
          goto LABEL_76;
        case 3u:
          v30 = 0;
          v31 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 32) |= 2u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_67;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_67:
          v45 = 16;
          goto LABEL_76;
        case 4u:
          v35 = 0;
          v36 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 32) |= 8u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_71;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_71:
          v45 = 24;
          goto LABEL_76;
        case 5u:
          v40 = 0;
          v41 = 0;
          v26 = 0;
          *(_BYTE *)(a1 + 32) |= 0x10u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
        *(_QWORD *)(a2 + v42) = v43 + 1;
        v26 |= (unint64_t)(v44 & 0x7F) << v40;
        if ((v44 & 0x80) == 0)
          goto LABEL_73;
        v40 += 7;
        v14 = v41++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_75;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_73:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v26) = 0;
LABEL_75:
      v45 = 28;
LABEL_76:
      *(_DWORD *)(a1 + v45) = v26;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9D71068(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t ATXPBTaskAgnosticBehaviorSampleReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  ATXPBTaskAgnosticBehaviorFeatureVector *v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 32) |= 1u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        *(_QWORD *)(a1 + 8) = v20;
        goto LABEL_51;
      case 2u:
        v22 = 0;
        v23 = 0;
        v24 = 0;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (2)
        {
          v25 = *v3;
          v26 = *(_QWORD *)(a2 + v25);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
            *(_QWORD *)(a2 + v25) = v27;
            v24 |= (unint64_t)(v28 & 0x7F) << v22;
            if (v28 < 0)
            {
              v22 += 7;
              v15 = v23++ >= 9;
              if (v15)
              {
                LODWORD(v24) = 0;
                goto LABEL_44;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v24) = 0;
LABEL_44:
        *(_DWORD *)(a1 + 24) = v24;
        goto LABEL_51;
      case 3u:
        v29 = 0;
        v30 = 0;
        v31 = 0;
        *(_BYTE *)(a1 + 32) |= 4u;
        while (2)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          v34 = v33 + 1;
          if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
            *(_QWORD *)(a2 + v32) = v34;
            v31 |= (unint64_t)(v35 & 0x7F) << v29;
            if (v35 < 0)
            {
              v29 += 7;
              v15 = v30++ >= 9;
              if (v15)
              {
                v31 = 0;
                goto LABEL_48;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v31 = 0;
LABEL_48:
        *(_BYTE *)(a1 + 28) = v31 != 0;
        goto LABEL_51;
      case 4u:
        v36 = objc_alloc_init(ATXPBTaskAgnosticBehaviorFeatureVector);
        objc_storeStrong((id *)(a1 + 16), v36);
        if (PBReaderPlaceMark() && ATXPBTaskAgnosticBehaviorFeatureVectorReadFrom((uint64_t)v36, a2))
        {
          PBReaderRecallMark();

LABEL_51:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_51;
    }
  }
}

void sub_1C9D75288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D75C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  id *v29;

  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class __getNHSSRelevantWidgetDefaultsClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!NanoHomeScreenServicesLibraryCore_frameworkLibrary)
    NanoHomeScreenServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("NHSSRelevantWidgetDefaults");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getNHSSRelevantWidgetDefaultsClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getNHSSRelevantWidgetClass_block_invoke(uint64_t a1)
{
  Class result;

  if (!NanoHomeScreenServicesLibraryCore_frameworkLibrary)
    NanoHomeScreenServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  result = objc_getClass("NHSSRelevantWidget");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getNHSSRelevantWidgetClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t ATXMPBBlendingHomeScreenWidgetTopOfStackSelectionTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  void *v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 48;
          goto LABEL_41;
        case 2u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 64) |= 1u;
          while (2)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_45;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v22) = 0;
LABEL_45:
          v32 = 56;
          goto LABEL_50;
        case 3u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
          goto LABEL_41;
        case 4u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 40;
          goto LABEL_41;
        case 5u:
          v26 = 0;
          v27 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 64) |= 2u;
          break;
        case 6u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
          goto LABEL_41;
        case 7u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_41;
        case 8u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
LABEL_41:
          v31 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v28 = *v3;
        v29 = *(_QWORD *)(a2 + v28);
        if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          break;
        v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
        *(_QWORD *)(a2 + v28) = v29 + 1;
        v22 |= (unint64_t)(v30 & 0x7F) << v26;
        if ((v30 & 0x80) == 0)
          goto LABEL_47;
        v26 += 7;
        v14 = v27++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_49;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_47:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v22) = 0;
LABEL_49:
      v32 = 60;
LABEL_50:
      *(_DWORD *)(a1 + v32) = v22;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9D791E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void atxRegisterCTSJobHandler(const char *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  const char *v9;

  v5 = a3;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __atxRegisterCTSJobHandler_block_invoke;
  v7[3] = &unk_1E82E96E0;
  v8 = v5;
  v9 = a1;
  v6 = v5;
  xpc_activity_register(a1, a2, v7);

}

void __atxRegisterCTSJobHandler_block_invoke(uint64_t a1, void *a2)
{
  _xpc_activity_s *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  os_signpost_id_t v11;
  NSObject *v12;
  NSObject *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint8_t buf[4];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (!*(_QWORD *)(a1 + 32))
  {
    objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void atxRegisterCTSJobHandler(const char * _Nonnull, __strong xpc_object_t _Nonnull, __strong ATXCTSJobHandler _Nonnull)_block_invoke");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "handleFailureInFunction:file:lineNumber:description:", v25, CFSTR("ATXCTSJobHelper.m"), 21, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("handleCTSJob"));

  }
  if (xpc_activity_get_state(v3) == 2)
  {
    v4 = objc_alloc(MEMORY[0x1E0CF9230]);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *(_QWORD *)(a1 + 40));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)objc_msgSend(v4, "initWithActivity:name:", v3, v5);

    LODWORD(v5) = objc_msgSend(v6, "didDefer");
    __atxlog_handle_default();
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if ((_DWORD)v5)
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315138;
        v27 = v9;
        v10 = "atxRegisterCTSJobHandler deferred activity before starting: %s";
LABEL_19:
        _os_log_impl(&dword_1C9A3B000, v8, OS_LOG_TYPE_DEFAULT, v10, buf, 0xCu);
      }
    }
    else
    {
      v11 = os_signpost_id_generate(v7);

      __atxlog_handle_default();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = v12;
      v14 = v11 - 1;
      if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
      {
        v15 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136446210;
        v27 = v15;
        _os_signpost_emit_with_name_impl(&dword_1C9A3B000, v13, OS_SIGNPOST_INTERVAL_BEGIN, v11, "CTS", "Job=%{public,signpost.telemetry:string1}s enableTelemetry=YES ", buf, 0xCu);
      }

      v16 = (void *)MEMORY[0x1CAA48B6C]();
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      objc_autoreleasePoolPop(v16);
      __atxlog_handle_default();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = v17;
      if (v14 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
      {
        v19 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136446210;
        v27 = v19;
        _os_signpost_emit_with_name_impl(&dword_1C9A3B000, v18, OS_SIGNPOST_INTERVAL_END, v11, "CTS", "Job=%{public,signpost.telemetry:string1}s enableTelemetry=YES ", buf, 0xCu);
      }

      if (!objc_msgSend(v6, "didDefer"))
        goto LABEL_21;
      __atxlog_handle_default();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = v20;
      if (v14 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v20))
      {
        v22 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136446210;
        v27 = v22;
        _os_signpost_emit_with_name_impl(&dword_1C9A3B000, v21, OS_SIGNPOST_EVENT, v11, "CTSDeferred", "Job=%{public,signpost.telemetry:string1}s enableTelemetry=YES ", buf, 0xCu);
      }

      __atxlog_handle_default();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v23 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315138;
        v27 = v23;
        v10 = "atxRegisterCTSJobHandler deferred activity after partially running: %s";
        goto LABEL_19;
      }
    }

LABEL_21:
  }

}

void atxRegisterCTSJobHandlerForNonClassCLocked(const char *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  const char *v9;

  v5 = a3;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __atxRegisterCTSJobHandlerForNonClassCLocked_block_invoke;
  v7[3] = &unk_1E82E9708;
  v8 = v5;
  v9 = a1;
  v6 = v5;
  atxRegisterCTSJobHandler(a1, a2, v7);

}

void __atxRegisterCTSJobHandlerForNonClassCLocked_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;

  v3 = a2;
  if (objc_msgSend(MEMORY[0x1E0D81590], "isClassCLocked"))
  {
    __atxlog_handle_default();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      __atxRegisterCTSJobHandlerForNonClassCLocked_block_invoke_cold_1(a1, v4);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void onPostTestNotifReceive()
{
  id v0;

  +[ATXActionNotificationServer sharedInstance](ATXActionNotificationServer, "sharedInstance");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "_postTestNotification");

}

void onPostTestNotifReceiveNoPrediction()
{
  id v0;

  +[ATXActionNotificationServer sharedInstance](ATXActionNotificationServer, "sharedInstance");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "_postTestNotificationWithPredictionCount:", 0);

}

void onPostTestNotifReceiveManyPredictions()
{
  id v0;

  +[ATXActionNotificationServer sharedInstance](ATXActionNotificationServer, "sharedInstance");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "_postTestNotificationWithPredictionCount:", 8);

}

void onPostTestNotifRemoveAll()
{
  id v0;

  +[ATXActionNotificationServer sharedInstance](ATXActionNotificationServer, "sharedInstance");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "removeAllActionPredictionNotificationsAndTrackEvent:recordFeedback:", 1, 0);

}

void sub_1C9D7AB58(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1C9D7AEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D7BA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9D7BE3C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1C9D7C294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9D7E788(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D7E980(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9D7EA90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_17(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

char *OUTLINED_FUNCTION_4_10(int *a1)
{
  return strerror(*a1);
}

int *OUTLINED_FUNCTION_5_7()
{
  return __error();
}

int *OUTLINED_FUNCTION_6_5()
{
  return __error();
}

void sub_1C9D82238(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C9D822FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9D82370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9D8241C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9D826A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

uint64_t ATXMPBDonationCountTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t result;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v24;

      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          v26 = 0;
          v27 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 24) |= 2u;
          while (1)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
              break;
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v20 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0)
              goto LABEL_43;
            v26 += 7;
            v14 = v27++ >= 9;
            if (v14)
            {
              LODWORD(v20) = 0;
              goto LABEL_45;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_43:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v20) = 0;
LABEL_45:
          v32 = 20;
        }
        else
        {
          if ((_DWORD)v17 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 24) |= 1u;
          while (1)
          {
            v21 = *v3;
            v22 = *(_QWORD *)(a2 + v21);
            if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
              break;
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0)
              goto LABEL_39;
            v18 += 7;
            v14 = v19++ >= 9;
            if (v14)
            {
              LODWORD(v20) = 0;
              goto LABEL_41;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v20) = 0;
LABEL_41:
          v32 = 16;
        }
        *(_DWORD *)(a1 + v32) = v20;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9D84EB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_18(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, a5, 2u);
}

void OUTLINED_FUNCTION_6_6(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x1Cu);
}

uint64_t OUTLINED_FUNCTION_8_4()
{
  void *v0;

  return objc_msgSend(v0, "anchor");
}

void sub_1C9D88988(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1C9D8B9F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL ATXAnchorModelPBActionKeyMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  ATXAnchorModelPBLaunchHistoryMetadata *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(ATXAnchorModelPBLaunchHistoryMetadata **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(ATXAnchorModelPBLaunchHistoryMetadata);
    objc_storeStrong((id *)(a1 + 8), v18);
    if (!PBReaderPlaceMark() || !ATXAnchorModelPBLaunchHistoryMetadataReadFrom((uint64_t)v18, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9D8CE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9D8D270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9D8EC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D8EF14(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

Class __getPRSServiceClass_block_invoke_0(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!PosterBoardServicesLibraryCore_frameworkLibrary_0)
  {
    v4 = xmmword_1E82E9EA8;
    v5 = 0;
    PosterBoardServicesLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!PosterBoardServicesLibraryCore_frameworkLibrary_0)
    __getPRSServiceClass_block_invoke_cold_1_0(&v3);
  result = objc_getClass("PRSService");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getPRSServiceClass_block_invoke_cold_2_0();
  getPRSServiceClass_softClass_0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

double _ATXFeedbackComputeBetaMean(double a1, double a2)
{
  double result;

  result = 1.0;
  if (a1 != 0.0)
    return a1 / (a1 + a2);
  return result;
}

uint64_t bucketedInt(uint64_t result)
{
  if (result >= 0x65)
    return 10 * (result / 0xA);
  return result;
}

float roundToTwoSigFigs(float a1)
{
  return roundf(a1 * 100.0) / 100.0;
}

void sub_1C9D91EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  uint64_t v52;

  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose(&a44, 8);
  _Block_object_dispose(&a48, 8);
  _Block_object_dispose(&a52, 8);
  _Block_object_dispose((const void *)(v52 - 232), 8);
  _Block_object_dispose((const void *)(v52 - 200), 8);
  _Block_object_dispose((const void *)(v52 - 168), 8);
  _Block_object_dispose((const void *)(v52 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_3_14()
{
  return objc_opt_class();
}

void sub_1C9D94E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL ATXPBBlendingSessionLogReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  ATXPBBlendingSessionERMEvent *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(ATXPBBlendingSessionERMEvent);
        objc_msgSend(a1, "addErmEvent:", v17);
        if (!PBReaderPlaceMark() || (ATXPBBlendingSessionERMEventReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(ATXPBBlendingSessionBlendingUpdate);
    objc_msgSend(a1, "addBlendingUpdate:", v17);
    if (!PBReaderPlaceMark()
      || !ATXPBBlendingSessionBlendingUpdateReadFrom((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9D9A2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9D9BE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXPBNotificationDeliveryEventReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  void *v23;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        if (v23)
          objc_msgSend((id)a1, "addSuggestionUUID:", v23);

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_33;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_35;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_35:
        *(_DWORD *)(a1 + 8) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9D9F9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t isPhotosPosterExtensionBundleId(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.mobileslideshow.PhotosPosterProvider")) & 1) != 0)
    v2 = 1;
  else
    v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.PhotosUIPrivate.PhotosPosterProvider"));

  return v2;
}

uint64_t isPhotosDescriptor(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "extensionBundleIdentifier");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = isPhotosPosterExtensionBundleId(v1);

  return v2;
}

uint64_t isPhotoShuffleDescriptor(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (isPhotosDescriptor(v1))
  {
    objc_msgSend(v1, "identifier");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "hasPrefix:", CFSTR("SmartAlbum"));

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void ____atxlog_handle_default_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "general");
  v1 = (void *)__atxlog_handle_default_log;
  __atxlog_handle_default_log = (uint64_t)v0;

}

id __atxlog_handle_xpc()
{
  if (__atxlog_handle_xpc_onceToken != -1)
    dispatch_once(&__atxlog_handle_xpc_onceToken, &__block_literal_global_3);
  return (id)__atxlog_handle_xpc_log;
}

void ____atxlog_handle_xpc_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "xpc");
  v1 = (void *)__atxlog_handle_xpc_log;
  __atxlog_handle_xpc_log = (uint64_t)v0;

}

void ____atxlog_handle_heuristic_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "heuristic");
  v1 = (void *)__atxlog_handle_heuristic_log;
  __atxlog_handle_heuristic_log = (uint64_t)v0;

}

id __atxlog_handle_notifications()
{
  if (__atxlog_handle_notifications_onceToken != -1)
    dispatch_once(&__atxlog_handle_notifications_onceToken, &__block_literal_global_7_1);
  return (id)__atxlog_handle_notifications_log;
}

void ____atxlog_handle_notifications_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "notifications");
  v1 = (void *)__atxlog_handle_notifications_log;
  __atxlog_handle_notifications_log = (uint64_t)v0;

}

id __atxlog_handle_pmm()
{
  if (__atxlog_handle_pmm_onceToken != -1)
    dispatch_once(&__atxlog_handle_pmm_onceToken, &__block_literal_global_9_5);
  return (id)__atxlog_handle_pmm_log;
}

void ____atxlog_handle_pmm_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.mm", "GENERAL");
  v1 = (void *)__atxlog_handle_pmm_log;
  __atxlog_handle_pmm_log = (uint64_t)v0;

}

id __atxlog_handle_dailyroutines()
{
  if (__atxlog_handle_dailyroutines_onceToken != -1)
    dispatch_once(&__atxlog_handle_dailyroutines_onceToken, &__block_literal_global_12_7);
  return (id)__atxlog_handle_dailyroutines_log;
}

void ____atxlog_handle_dailyroutines_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "dailyroutines");
  v1 = (void *)__atxlog_handle_dailyroutines_log;
  __atxlog_handle_dailyroutines_log = (uint64_t)v0;

}

id __atxlog_handle_feedback()
{
  if (__atxlog_handle_feedback_onceToken != -1)
    dispatch_once(&__atxlog_handle_feedback_onceToken, &__block_literal_global_14_5);
  return (id)__atxlog_handle_feedback_log;
}

void ____atxlog_handle_feedback_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "feedback");
  v1 = (void *)__atxlog_handle_feedback_log;
  __atxlog_handle_feedback_log = (uint64_t)v0;

}

id __atxlog_handle_modes()
{
  if (__atxlog_handle_modes_onceToken != -1)
    dispatch_once(&__atxlog_handle_modes_onceToken, &__block_literal_global_16_1);
  return (id)__atxlog_handle_modes_log;
}

void ____atxlog_handle_modes_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "modes");
  v1 = (void *)__atxlog_handle_modes_log;
  __atxlog_handle_modes_log = (uint64_t)v0;

}

id __atxlog_handle_hero()
{
  if (__atxlog_handle_hero_onceToken != -1)
    dispatch_once(&__atxlog_handle_hero_onceToken, &__block_literal_global_18_5);
  return (id)__atxlog_handle_hero_log;
}

void ____atxlog_handle_hero_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "hero");
  v1 = (void *)__atxlog_handle_hero_log;
  __atxlog_handle_hero_log = (uint64_t)v0;

}

id __atxlog_handle_deletions()
{
  if (__atxlog_handle_deletions_onceToken != -1)
    dispatch_once(&__atxlog_handle_deletions_onceToken, &__block_literal_global_20_4);
  return (id)__atxlog_handle_deletions_log;
}

void ____atxlog_handle_deletions_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "deletions");
  v1 = (void *)__atxlog_handle_deletions_log;
  __atxlog_handle_deletions_log = (uint64_t)v0;

}

id __atxlog_handle_gi()
{
  if (__atxlog_handle_gi_onceToken != -1)
    dispatch_once(&__atxlog_handle_gi_onceToken, &__block_literal_global_22_4);
  return (id)__atxlog_handle_gi_log;
}

void ____atxlog_handle_gi_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "information");
  v1 = (void *)__atxlog_handle_gi_log;
  __atxlog_handle_gi_log = (uint64_t)v0;

}

id __atxlog_handle_timeline()
{
  if (__atxlog_handle_timeline_onceToken != -1)
    dispatch_once(&__atxlog_handle_timeline_onceToken, &__block_literal_global_24_3);
  return (id)__atxlog_handle_timeline_log;
}

void ____atxlog_handle_timeline_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "timeline");
  v1 = (void *)__atxlog_handle_timeline_log;
  __atxlog_handle_timeline_log = (uint64_t)v0;

}

id __atxlog_handle_relevant_shortcut()
{
  if (__atxlog_handle_relevant_shortcut_onceToken != -1)
    dispatch_once(&__atxlog_handle_relevant_shortcut_onceToken, &__block_literal_global_26_2);
  return (id)__atxlog_handle_relevant_shortcut_log;
}

void ____atxlog_handle_relevant_shortcut_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "relevant_shortcut");
  v1 = (void *)__atxlog_handle_relevant_shortcut_log;
  __atxlog_handle_relevant_shortcut_log = (uint64_t)v0;

}

id __atxlog_handle_relevance_model()
{
  if (__atxlog_handle_relevance_model_onceToken != -1)
    dispatch_once(&__atxlog_handle_relevance_model_onceToken, &__block_literal_global_28_1);
  return (id)__atxlog_handle_relevance_model_log;
}

void ____atxlog_handle_relevance_model_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "relevance_model");
  v1 = (void *)__atxlog_handle_relevance_model_log;
  __atxlog_handle_relevance_model_log = (uint64_t)v0;

}

id __atxlog_handle_watch()
{
  if (__atxlog_handle_watch_onceToken != -1)
    dispatch_once(&__atxlog_handle_watch_onceToken, &__block_literal_global_30_3);
  return (id)__atxlog_handle_watch_log;
}

void ____atxlog_handle_watch_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "watch");
  v1 = (void *)__atxlog_handle_watch_log;
  __atxlog_handle_watch_log = (uint64_t)v0;

}

id __atxlog_handle_ui()
{
  if (__atxlog_handle_ui_onceToken != -1)
    dispatch_once(&__atxlog_handle_ui_onceToken, &__block_literal_global_32_0);
  return (id)__atxlog_handle_ui_log;
}

void ____atxlog_handle_ui_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "UI");
  v1 = (void *)__atxlog_handle_ui_log;
  __atxlog_handle_ui_log = (uint64_t)v0;

}

void ____atxlog_handle_blending_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "blending");
  v1 = (void *)__atxlog_handle_blending_log;
  __atxlog_handle_blending_log = (uint64_t)v0;

}

id __atxlog_handle_blending_internal_cache()
{
  if (__atxlog_handle_blending_internal_cache_onceToken != -1)
    dispatch_once(&__atxlog_handle_blending_internal_cache_onceToken, &__block_literal_global_36_3);
  return (id)__atxlog_handle_blending_internal_cache_log;
}

void ____atxlog_handle_blending_internal_cache_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "blending_internal_cache");
  v1 = (void *)__atxlog_handle_blending_internal_cache_log;
  __atxlog_handle_blending_internal_cache_log = (uint64_t)v0;

}

void ____atxlog_handle_blending_ecosystem_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "blending_ecosystem");
  v1 = (void *)__atxlog_handle_blending_ecosystem_log;
  __atxlog_handle_blending_ecosystem_log = (uint64_t)v0;

}

id __atxlog_handle_home_screen()
{
  if (__atxlog_handle_home_screen_onceToken != -1)
    dispatch_once(&__atxlog_handle_home_screen_onceToken, &__block_literal_global_40_0);
  return (id)__atxlog_handle_home_screen_log;
}

void ____atxlog_handle_home_screen_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "homescreen");
  v1 = (void *)__atxlog_handle_home_screen_log;
  __atxlog_handle_home_screen_log = (uint64_t)v0;

}

id __atxlog_handle_sleep_schedule()
{
  if (__atxlog_handle_sleep_schedule_onceToken != -1)
    dispatch_once(&__atxlog_handle_sleep_schedule_onceToken, &__block_literal_global_42_1);
  return (id)__atxlog_handle_sleep_schedule_log;
}

void ____atxlog_handle_sleep_schedule_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "sleepschedule");
  v1 = (void *)__atxlog_handle_sleep_schedule_log;
  __atxlog_handle_sleep_schedule_log = (uint64_t)v0;

}

id __atxlog_handle_lock_screen()
{
  if (__atxlog_handle_lock_screen_onceToken != -1)
    dispatch_once(&__atxlog_handle_lock_screen_onceToken, &__block_literal_global_44_1);
  return (id)__atxlog_handle_lock_screen_log;
}

void ____atxlog_handle_lock_screen_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "lockscreen");
  v1 = (void *)__atxlog_handle_lock_screen_log;
  __atxlog_handle_lock_screen_log = (uint64_t)v0;

}

id __atxlog_handle_anchor()
{
  if (__atxlog_handle_anchor_onceToken != -1)
    dispatch_once(&__atxlog_handle_anchor_onceToken, &__block_literal_global_46_2);
  return (id)__atxlog_handle_anchor_log;
}

void ____atxlog_handle_anchor_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "anchor");
  v1 = (void *)__atxlog_handle_anchor_log;
  __atxlog_handle_anchor_log = (uint64_t)v0;

}

id __atxlog_handle_app_prediction()
{
  if (__atxlog_handle_app_prediction_onceToken != -1)
    dispatch_once(&__atxlog_handle_app_prediction_onceToken, &__block_literal_global_48_2);
  return (id)__atxlog_handle_app_prediction_log;
}

void ____atxlog_handle_app_prediction_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "app_prediction");
  v1 = (void *)__atxlog_handle_app_prediction_log;
  __atxlog_handle_app_prediction_log = (uint64_t)v0;

}

id __atxlog_handle_action_prediction()
{
  if (__atxlog_handle_action_prediction_onceToken != -1)
    dispatch_once(&__atxlog_handle_action_prediction_onceToken, &__block_literal_global_50_1);
  return (id)__atxlog_handle_action_prediction_log;
}

void ____atxlog_handle_action_prediction_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "action_prediction");
  v1 = (void *)__atxlog_handle_action_prediction_log;
  __atxlog_handle_action_prediction_log = (uint64_t)v0;

}

void ____atxlog_handle_app_library_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "app_library");
  v1 = (void *)__atxlog_handle_app_library_log;
  __atxlog_handle_app_library_log = (uint64_t)v0;

}

void ____atxlog_handle_app_install_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "app_install");
  v1 = (void *)__atxlog_handle_app_install_log;
  __atxlog_handle_app_install_log = (uint64_t)v0;

}

void ____atxlog_handle_backup_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "backup");
  v1 = (void *)__atxlog_handle_backup_log;
  __atxlog_handle_backup_log = (uint64_t)v0;

}

id __atxlog_handle_metrics()
{
  if (__atxlog_handle_metrics_onceToken != -1)
    dispatch_once(&__atxlog_handle_metrics_onceToken, &__block_literal_global_58);
  return (id)__atxlog_handle_metrics_log;
}

void ____atxlog_handle_metrics_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "metrics");
  v1 = (void *)__atxlog_handle_metrics_log;
  __atxlog_handle_metrics_log = (uint64_t)v0;

}

id __atxlog_handle_trial_assets()
{
  if (__atxlog_handle_trial_assets_onceToken != -1)
    dispatch_once(&__atxlog_handle_trial_assets_onceToken, &__block_literal_global_60_2);
  return (id)__atxlog_handle_trial_assets_log;
}

void ____atxlog_handle_trial_assets_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "trial_assets");
  v1 = (void *)__atxlog_handle_trial_assets_log;
  __atxlog_handle_trial_assets_log = (uint64_t)v0;

}

id __atxlog_handle_notification_management()
{
  if (__atxlog_handle_notification_management_onceToken != -1)
    dispatch_once(&__atxlog_handle_notification_management_onceToken, &__block_literal_global_62_4);
  return (id)__atxlog_handle_notification_management_log;
}

void ____atxlog_handle_notification_management_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "notification_management");
  v1 = (void *)__atxlog_handle_notification_management_log;
  __atxlog_handle_notification_management_log = (uint64_t)v0;

}

id __atxlog_handle_contextual_actions()
{
  if (__atxlog_handle_contextual_actions_onceToken != -1)
    dispatch_once(&__atxlog_handle_contextual_actions_onceToken, &__block_literal_global_64_3);
  return (id)__atxlog_handle_contextual_actions_log;
}

void ____atxlog_handle_contextual_actions_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "contextual_actions");
  v1 = (void *)__atxlog_handle_contextual_actions_log;
  __atxlog_handle_contextual_actions_log = (uint64_t)v0;

}

id __atxlog_handle_intents_helper()
{
  if (__atxlog_handle_intents_helper_onceToken != -1)
    dispatch_once(&__atxlog_handle_intents_helper_onceToken, &__block_literal_global_66_0);
  return (id)__atxlog_handle_intents_helper_log;
}

void ____atxlog_handle_intents_helper_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "intents_helper");
  v1 = (void *)__atxlog_handle_intents_helper_log;
  __atxlog_handle_intents_helper_log = (uint64_t)v0;

}

id __atxlog_handle_context_heuristic()
{
  if (__atxlog_handle_context_heuristic_onceToken != -1)
    dispatch_once(&__atxlog_handle_context_heuristic_onceToken, &__block_literal_global_68_2);
  return (id)__atxlog_handle_context_heuristic_log;
}

void ____atxlog_handle_context_heuristic_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "context_heuristic");
  v1 = (void *)__atxlog_handle_context_heuristic_log;
  __atxlog_handle_context_heuristic_log = (uint64_t)v0;

}

id __atxlog_handle_zkw_hide()
{
  if (__atxlog_handle_zkw_hide_onceToken != -1)
    dispatch_once(&__atxlog_handle_zkw_hide_onceToken, &__block_literal_global_70_1);
  return (id)__atxlog_handle_zkw_hide_log;
}

void ____atxlog_handle_zkw_hide_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "zkw_hide");
  v1 = (void *)__atxlog_handle_zkw_hide_log;
  __atxlog_handle_zkw_hide_log = (uint64_t)v0;

}

id __atxlog_handle_context_user_education_suggestions()
{
  if (__atxlog_handle_context_user_education_suggestions_onceToken != -1)
    dispatch_once(&__atxlog_handle_context_user_education_suggestions_onceToken, &__block_literal_global_72_3);
  return (id)__atxlog_handle_context_user_education_suggestions_log;
}

void ____atxlog_handle_context_user_education_suggestions_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "user_education_suggestions");
  v1 = (void *)__atxlog_handle_context_user_education_suggestions_log;
  __atxlog_handle_context_user_education_suggestions_log = (uint64_t)v0;

}

id __atxlog_handle_time_intelligence()
{
  if (__atxlog_handle_time_intelligence_onceToken != -1)
    dispatch_once(&__atxlog_handle_time_intelligence_onceToken, &__block_literal_global_74_1);
  return (id)__atxlog_handle_time_intelligence_log;
}

void ____atxlog_handle_time_intelligence_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "time");
  v1 = (void *)__atxlog_handle_time_intelligence_log;
  __atxlog_handle_time_intelligence_log = (uint64_t)v0;

}

id __atxlog_handle_contextual_engine()
{
  if (__atxlog_handle_contextual_engine_onceToken != -1)
    dispatch_once(&__atxlog_handle_contextual_engine_onceToken, &__block_literal_global_76);
  return (id)__atxlog_handle_contextual_engine_log;
}

void ____atxlog_handle_contextual_engine_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "contextualengine");
  v1 = (void *)__atxlog_handle_contextual_engine_log;
  __atxlog_handle_contextual_engine_log = (uint64_t)v0;

}

id __atxlog_handle_usage_insights()
{
  if (__atxlog_handle_usage_insights_onceToken != -1)
    dispatch_once(&__atxlog_handle_usage_insights_onceToken, &__block_literal_global_78_0);
  return (id)__atxlog_handle_usage_insights_log;
}

void ____atxlog_handle_usage_insights_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "usage_insights");
  v1 = (void *)__atxlog_handle_usage_insights_log;
  __atxlog_handle_usage_insights_log = (uint64_t)v0;

}

id __atxlog_handle_notification_categorization()
{
  if (__atxlog_handle_notification_categorization_onceToken != -1)
    dispatch_once(&__atxlog_handle_notification_categorization_onceToken, &__block_literal_global_80);
  return (id)__atxlog_handle_notification_categorization_log;
}

void ____atxlog_handle_notification_categorization_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "notification_categorization");
  v1 = (void *)__atxlog_handle_notification_categorization_log;
  __atxlog_handle_notification_categorization_log = (uint64_t)v0;

}

id __atxlog_handle_settings_actions()
{
  if (__atxlog_handle_settings_actions_onceToken != -1)
    dispatch_once(&__atxlog_handle_settings_actions_onceToken, &__block_literal_global_82_0);
  return (id)__atxlog_handle_settings_actions_log;
}

void ____atxlog_handle_settings_actions_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.duetexpertd.atx", "settings_actions");
  v1 = (void *)__atxlog_handle_settings_actions_log;
  __atxlog_handle_settings_actions_log = (uint64_t)v0;

}

id createHeuristicWidget(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, double a6)
{
  objc_class *v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v11 = (objc_class *)MEMORY[0x1E0CF8EB0];
  v12 = a4;
  v13 = a3;
  v14 = a2;
  v15 = objc_alloc_init(v11);
  objc_msgSend(v15, "setSize:", a1);
  objc_msgSend(v15, "setWidgetKind:", v14);

  objc_msgSend(v15, "setExtensionBundleId:", v13);
  objc_msgSend(v15, "setAppBundleId:", v12);

  objc_msgSend(v15, "setScore:", a6);
  objc_msgSend(v15, "setPredictionSource:", CFSTR("Heuristic"));
  objc_msgSend(v15, "setRequiresAppLaunch:", a5);
  return v15;
}

void sub_1C9DA7C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9DA7E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXMPBScreenLogUnlockSessionTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  int *v36;
  int *v37;
  int *v38;
  int *v39;
  int *v40;
  uint64_t v41;
  uint64_t result;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  char v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  char v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char v121;
  char v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char v133;
  char v134;
  unsigned int v135;
  uint64_t v136;
  unint64_t v137;
  char v138;
  char v139;
  unsigned int v140;
  uint64_t v141;
  unint64_t v142;
  char v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char v149;
  char v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char v155;
  uint64_t v156;
  BOOL v157;
  uint64_t v158;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = &OBJC_IVAR___ATXPBBlendingSessionBlendingUpdate__blendingUpdateUUID;
    v8 = &OBJC_IVAR___ATXPBBlendingSessionBlendingUpdate__blendingUpdateUUID;
    v9 = (int *)MEMORY[0x1E0D82BB8];
    v10 = &OBJC_IVAR___ATXPBBlendingSessionBlendingUpdate__blendingUpdateUUID;
    v11 = &OBJC_IVAR___ATXPBBlendingSessionBlendingUpdate__blendingUpdateUUID;
    v12 = &OBJC_IVAR___ATXPBBlendingSessionBlendingUpdate__blendingUpdateUUID;
    v13 = &OBJC_IVAR___ATXPBBlendingSessionBlendingUpdate__blendingUpdateUUID;
    v14 = &OBJC_IVAR___ATXPBBlendingSessionBlendingUpdate__blendingUpdateUUID;
    v15 = &OBJC_IVAR___ATXPBBlendingSessionBlendingUpdate__blendingUpdateUUID;
    v16 = &OBJC_IVAR___ATXPBBlendingSessionBlendingUpdate__blendingUpdateUUID;
    v17 = &OBJC_IVAR___ATXPBBlendingSessionBlendingUpdate__blendingUpdateUUID;
    v18 = &OBJC_IVAR___ATXPBBlendingSessionBlendingUpdate__blendingUpdateUUID;
    v19 = &OBJC_IVAR___ATXPBBlendingSessionBlendingUpdate__blendingUpdateUUID;
    v20 = &OBJC_IVAR___ATXPBBlendingSessionBlendingUpdate__blendingUpdateUUID;
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      while (1)
      {
        v24 = *v3;
        v25 = *(_QWORD *)(a2 + v24);
        if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          break;
        v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v25);
        *(_QWORD *)(a2 + v24) = v25 + 1;
        v23 |= (unint64_t)(v26 & 0x7F) << v21;
        if ((v26 & 0x80) == 0)
          goto LABEL_12;
        v21 += 7;
        v27 = v22++ >= 9;
        if (v27)
        {
          v23 = 0;
          v28 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v28 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v23 = 0;
LABEL_14:
      if (v28 || (v23 & 7) == 4)
        break;
      switch((v23 >> 3))
      {
        case 1u:
          v30 = 0;
          v31 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + v7[825]) |= 0x80u;
          while (1)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
              break;
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if ((v35 & 0x80) == 0)
              goto LABEL_169;
            v30 += 7;
            v27 = v31++ >= 9;
            if (v27)
            {
              LODWORD(v32) = 0;
              goto LABEL_171;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_169:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_171:
          v156 = v8[826];
          goto LABEL_244;
        case 2u:
          v43 = 0;
          v44 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + v7[825]) |= 0x10u;
          while (2)
          {
            v45 = *v3;
            v46 = *(_QWORD *)(a2 + v45);
            if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v46);
              *(_QWORD *)(a2 + v45) = v46 + 1;
              v32 |= (unint64_t)(v47 & 0x7F) << v43;
              if (v47 < 0)
              {
                v43 += 7;
                v27 = v44++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_175;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_175:
          v156 = v10[827];
          goto LABEL_244;
        case 3u:
          v48 = 0;
          v49 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + v7[825]) |= 8u;
          while (2)
          {
            v50 = *v3;
            v51 = *(_QWORD *)(a2 + v50);
            if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v51);
              *(_QWORD *)(a2 + v50) = v51 + 1;
              v32 |= (unint64_t)(v52 & 0x7F) << v48;
              if (v52 < 0)
              {
                v48 += 7;
                v27 = v49++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_179;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_179:
          v156 = v11[828];
          goto LABEL_244;
        case 4u:
          v53 = 0;
          v54 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + v7[825]) |= 0x20u;
          while (2)
          {
            v55 = *v3;
            v56 = *(_QWORD *)(a2 + v55);
            if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v56);
              *(_QWORD *)(a2 + v55) = v56 + 1;
              v32 |= (unint64_t)(v57 & 0x7F) << v53;
              if (v57 < 0)
              {
                v53 += 7;
                v27 = v54++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_183;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_183:
          v156 = v12[829];
          goto LABEL_244;
        case 5u:
          v58 = 0;
          v59 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + v7[825]) |= 2u;
          while (2)
          {
            v60 = *v3;
            v61 = *(_QWORD *)(a2 + v60);
            if (v61 == -1 || v61 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v62 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v61);
              *(_QWORD *)(a2 + v60) = v61 + 1;
              v32 |= (unint64_t)(v62 & 0x7F) << v58;
              if (v62 < 0)
              {
                v58 += 7;
                v27 = v59++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_187;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_187:
          v156 = v13[830];
          goto LABEL_244;
        case 6u:
          v63 = 0;
          v64 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + v7[825]) |= 1u;
          while (2)
          {
            v65 = *v3;
            v66 = *(_QWORD *)(a2 + v65);
            if (v66 == -1 || v66 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v67 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v66);
              *(_QWORD *)(a2 + v65) = v66 + 1;
              v32 |= (unint64_t)(v67 & 0x7F) << v63;
              if (v67 < 0)
              {
                v63 += 7;
                v27 = v64++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_191;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_191:
          v156 = v14[831];
          goto LABEL_244;
        case 7u:
          v68 = 0;
          v69 = 0;
          v70 = 0;
          *(_DWORD *)(a1 + v7[825]) |= 0x10000u;
          while (2)
          {
            v71 = *v3;
            v72 = *(_QWORD *)(a2 + v71);
            if (v72 == -1 || v72 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v73 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v72);
              *(_QWORD *)(a2 + v71) = v72 + 1;
              v70 |= (unint64_t)(v73 & 0x7F) << v68;
              if (v73 < 0)
              {
                v68 += 7;
                v27 = v69++ >= 9;
                if (v27)
                {
                  v70 = 0;
                  goto LABEL_195;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v70 = 0;
LABEL_195:
          v157 = v70 != 0;
          v158 = v15[832];
          goto LABEL_253;
        case 8u:
          v74 = 0;
          v75 = 0;
          v76 = 0;
          *(_DWORD *)(a1 + v7[825]) |= 0x20000u;
          while (2)
          {
            v77 = *v3;
            v78 = *(_QWORD *)(a2 + v77);
            if (v78 == -1 || v78 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v79 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v78);
              *(_QWORD *)(a2 + v77) = v78 + 1;
              v76 |= (unint64_t)(v79 & 0x7F) << v74;
              if (v79 < 0)
              {
                v74 += 7;
                v27 = v75++ >= 9;
                if (v27)
                {
                  v76 = 0;
                  goto LABEL_199;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v76 = 0;
LABEL_199:
          v157 = v76 != 0;
          v158 = v16[833];
          goto LABEL_253;
        case 9u:
          v80 = 0;
          v81 = 0;
          v82 = 0;
          *(_DWORD *)(a1 + v7[825]) |= 0x400u;
          while (2)
          {
            v83 = *v3;
            v84 = *(_QWORD *)(a2 + v83);
            if (v84 == -1 || v84 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v85 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v84);
              *(_QWORD *)(a2 + v83) = v84 + 1;
              v82 |= (unint64_t)(v85 & 0x7F) << v80;
              if (v85 < 0)
              {
                v80 += 7;
                v27 = v81++ >= 9;
                if (v27)
                {
                  v82 = 0;
                  goto LABEL_203;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v82 = 0;
LABEL_203:
          v157 = v82 != 0;
          v158 = v17[834];
          goto LABEL_253;
        case 0xAu:
          v86 = 0;
          v87 = 0;
          v88 = 0;
          *(_DWORD *)(a1 + v7[825]) |= 0x100u;
          while (2)
          {
            v89 = *v3;
            v90 = *(_QWORD *)(a2 + v89);
            if (v90 == -1 || v90 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v91 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v90);
              *(_QWORD *)(a2 + v89) = v90 + 1;
              v88 |= (unint64_t)(v91 & 0x7F) << v86;
              if (v91 < 0)
              {
                v86 += 7;
                v27 = v87++ >= 9;
                if (v27)
                {
                  v88 = 0;
                  goto LABEL_207;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v88 = 0;
LABEL_207:
          v157 = v88 != 0;
          v158 = v18[835];
          goto LABEL_253;
        case 0xBu:
          v92 = 0;
          v93 = 0;
          v94 = 0;
          *(_DWORD *)(a1 + v7[825]) |= 0x8000u;
          while (2)
          {
            v95 = *v3;
            v96 = *(_QWORD *)(a2 + v95);
            if (v96 == -1 || v96 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v97 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v96);
              *(_QWORD *)(a2 + v95) = v96 + 1;
              v94 |= (unint64_t)(v97 & 0x7F) << v92;
              if (v97 < 0)
              {
                v92 += 7;
                v27 = v93++ >= 9;
                if (v27)
                {
                  v94 = 0;
                  goto LABEL_211;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v94 = 0;
LABEL_211:
          v157 = v94 != 0;
          v158 = v19[836];
          goto LABEL_253;
        case 0xCu:
          v98 = 0;
          v99 = 0;
          v100 = 0;
          *(_DWORD *)(a1 + v7[825]) |= 0x4000u;
          while (2)
          {
            v101 = *v3;
            v102 = *(_QWORD *)(a2 + v101);
            if (v102 == -1 || v102 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v103 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v102);
              *(_QWORD *)(a2 + v101) = v102 + 1;
              v100 |= (unint64_t)(v103 & 0x7F) << v98;
              if (v103 < 0)
              {
                v98 += 7;
                v27 = v99++ >= 9;
                if (v27)
                {
                  v100 = 0;
                  goto LABEL_215;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v100 = 0;
LABEL_215:
          v157 = v100 != 0;
          v158 = v20[837];
          goto LABEL_253;
        case 0xDu:
          v104 = 0;
          v105 = 0;
          v106 = 0;
          *(_DWORD *)(a1 + v7[825]) |= 0x100000u;
          while (2)
          {
            v107 = *v3;
            v108 = *(_QWORD *)(a2 + v107);
            if (v108 == -1 || v108 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v109 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v108);
              *(_QWORD *)(a2 + v107) = v108 + 1;
              v106 |= (unint64_t)(v109 & 0x7F) << v104;
              if (v109 < 0)
              {
                v104 += 7;
                v27 = v105++ >= 9;
                if (v27)
                {
                  v106 = 0;
                  goto LABEL_219;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v106 = 0;
LABEL_219:
          v157 = v106 != 0;
          v158 = 52;
          goto LABEL_253;
        case 0xEu:
          v110 = 0;
          v111 = 0;
          v112 = 0;
          *(_DWORD *)(a1 + v7[825]) |= 0x2000u;
          while (2)
          {
            v113 = *v3;
            v114 = *(_QWORD *)(a2 + v113);
            if (v114 == -1 || v114 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v115 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v114);
              *(_QWORD *)(a2 + v113) = v114 + 1;
              v112 |= (unint64_t)(v115 & 0x7F) << v110;
              if (v115 < 0)
              {
                v110 += 7;
                v27 = v111++ >= 9;
                if (v27)
                {
                  v112 = 0;
                  goto LABEL_223;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v112 = 0;
LABEL_223:
          v157 = v112 != 0;
          v158 = 45;
          goto LABEL_253;
        case 0xFu:
          v116 = 0;
          v117 = 0;
          v118 = 0;
          *(_DWORD *)(a1 + v7[825]) |= 0x200u;
          while (2)
          {
            v119 = *v3;
            v120 = *(_QWORD *)(a2 + v119);
            if (v120 == -1 || v120 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v121 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v120);
              *(_QWORD *)(a2 + v119) = v120 + 1;
              v118 |= (unint64_t)(v121 & 0x7F) << v116;
              if (v121 < 0)
              {
                v116 += 7;
                v27 = v117++ >= 9;
                if (v27)
                {
                  v118 = 0;
                  goto LABEL_227;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v118 = 0;
LABEL_227:
          v157 = v118 != 0;
          v158 = 41;
          goto LABEL_253;
        case 0x10u:
          v122 = 0;
          v123 = 0;
          v124 = 0;
          *(_DWORD *)(a1 + v7[825]) |= 0x80000u;
          while (2)
          {
            v125 = *v3;
            v126 = *(_QWORD *)(a2 + v125);
            if (v126 == -1 || v126 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v127 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v126);
              *(_QWORD *)(a2 + v125) = v126 + 1;
              v124 |= (unint64_t)(v127 & 0x7F) << v122;
              if (v127 < 0)
              {
                v122 += 7;
                v27 = v123++ >= 9;
                if (v27)
                {
                  v124 = 0;
                  goto LABEL_231;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v124 = 0;
LABEL_231:
          v157 = v124 != 0;
          v158 = 51;
          goto LABEL_253;
        case 0x11u:
          v128 = 0;
          v129 = 0;
          v130 = 0;
          *(_DWORD *)(a1 + v7[825]) |= 0x1000u;
          while (2)
          {
            v131 = *v3;
            v132 = *(_QWORD *)(a2 + v131);
            if (v132 == -1 || v132 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v133 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v132);
              *(_QWORD *)(a2 + v131) = v132 + 1;
              v130 |= (unint64_t)(v133 & 0x7F) << v128;
              if (v133 < 0)
              {
                v128 += 7;
                v27 = v129++ >= 9;
                if (v27)
                {
                  v130 = 0;
                  goto LABEL_235;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v130 = 0;
LABEL_235:
          v157 = v130 != 0;
          v158 = 44;
          goto LABEL_253;
        case 0x12u:
          v134 = 0;
          v135 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + v7[825]) |= 0x40u;
          while (2)
          {
            v136 = *v3;
            v137 = *(_QWORD *)(a2 + v136);
            if (v137 == -1 || v137 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v138 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v137);
              *(_QWORD *)(a2 + v136) = v137 + 1;
              v32 |= (unint64_t)(v138 & 0x7F) << v134;
              if (v138 < 0)
              {
                v134 += 7;
                v27 = v135++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_239;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_239:
          v156 = 32;
          goto LABEL_244;
        case 0x13u:
          v139 = 0;
          v140 = 0;
          v32 = 0;
          *(_DWORD *)(a1 + v7[825]) |= 4u;
          while (2)
          {
            v141 = *v3;
            v142 = *(_QWORD *)(a2 + v141);
            if (v142 == -1 || v142 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v143 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v142);
              *(_QWORD *)(a2 + v141) = v142 + 1;
              v32 |= (unint64_t)(v143 & 0x7F) << v139;
              if (v143 < 0)
              {
                v139 += 7;
                v27 = v140++ >= 9;
                if (v27)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_243;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v32) = 0;
LABEL_243:
          v156 = 16;
LABEL_244:
          *(_DWORD *)(a1 + v156) = v32;
          continue;
        case 0x14u:
          v144 = 0;
          v145 = 0;
          v146 = 0;
          *(_DWORD *)(a1 + v7[825]) |= 0x40000u;
          while (2)
          {
            v147 = *v3;
            v148 = *(_QWORD *)(a2 + v147);
            if (v148 == -1 || v148 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v149 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v148);
              *(_QWORD *)(a2 + v147) = v148 + 1;
              v146 |= (unint64_t)(v149 & 0x7F) << v144;
              if (v149 < 0)
              {
                v144 += 7;
                v27 = v145++ >= 9;
                if (v27)
                {
                  v146 = 0;
                  goto LABEL_248;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v146 = 0;
LABEL_248:
          v157 = v146 != 0;
          v158 = 50;
          goto LABEL_253;
        case 0x15u:
          v150 = 0;
          v151 = 0;
          v152 = 0;
          *(_DWORD *)(a1 + v7[825]) |= 0x800u;
          break;
        default:
          v36 = v8;
          v37 = v10;
          v38 = v7;
          v39 = v11;
          v40 = v12;
          v41 = a1;
          result = PBReaderSkipValueWithTag();
          v20 = &OBJC_IVAR___ATXPBBlendingSessionBlendingUpdate__blendingUpdateUUID;
          v13 = &OBJC_IVAR___ATXPBBlendingSessionBlendingUpdate__blendingUpdateUUID;
          a1 = v41;
          v14 = &OBJC_IVAR___ATXPBBlendingSessionBlendingUpdate__blendingUpdateUUID;
          v5 = (int *)MEMORY[0x1E0D82BC8];
          v12 = v40;
          v15 = &OBJC_IVAR___ATXPBBlendingSessionBlendingUpdate__blendingUpdateUUID;
          v11 = v39;
          v16 = &OBJC_IVAR___ATXPBBlendingSessionBlendingUpdate__blendingUpdateUUID;
          v7 = v38;
          v18 = &OBJC_IVAR___ATXPBBlendingSessionBlendingUpdate__blendingUpdateUUID;
          v10 = v37;
          v17 = &OBJC_IVAR___ATXPBBlendingSessionBlendingUpdate__blendingUpdateUUID;
          v8 = v36;
          v19 = &OBJC_IVAR___ATXPBBlendingSessionBlendingUpdate__blendingUpdateUUID;
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v153 = *v3;
        v154 = *(_QWORD *)(a2 + v153);
        if (v154 == -1 || v154 >= *(_QWORD *)(a2 + *v4))
          break;
        v155 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v154);
        *(_QWORD *)(a2 + v153) = v154 + 1;
        v152 |= (unint64_t)(v155 & 0x7F) << v150;
        if ((v155 & 0x80) == 0)
          goto LABEL_250;
        v150 += 7;
        v27 = v151++ >= 9;
        if (v27)
        {
          v152 = 0;
          goto LABEL_252;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_250:
      if (*(_BYTE *)(a2 + *v5))
        v152 = 0;
LABEL_252:
      v157 = v152 != 0;
      v158 = 43;
LABEL_253:
      *(_BYTE *)(a1 + v158) = v157;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9DAC52C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9DAD3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9DAE63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v20);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9DAE8A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9DAE940(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9DAEB48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9DAEBB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1C9DAEC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1C9DAFEDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL ATXTimelineRelevancePBFeatureVectorReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
          {
            v24 = &OBJC_IVAR___ATXTimelineRelevancePBFeatureVector__appLaunchPopularity;
            goto LABEL_38;
          }
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            break;
          v17 += 7;
          v23 = v18++ > 8;
          if (v23)
          {
            v19 = 0;
            v24 = &OBJC_IVAR___ATXTimelineRelevancePBFeatureVector__appLaunchPopularity;
            goto LABEL_41;
          }
        }
        v24 = &OBJC_IVAR___ATXTimelineRelevancePBFeatureVector__appLaunchPopularity;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_41:
        *(_QWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_42:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v25 = 0;
    v26 = 0;
    v19 = 0;
    *(_BYTE *)(a1 + 24) |= 1u;
    while (1)
    {
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
      *(_QWORD *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        v24 = &OBJC_IVAR___ATXTimelineRelevancePBFeatureVector__appLaunchCount;
        goto LABEL_39;
      }
      v25 += 7;
      v23 = v26++ > 8;
      if (v23)
      {
        v19 = 0;
        v24 = &OBJC_IVAR___ATXTimelineRelevancePBFeatureVector__appLaunchCount;
        goto LABEL_41;
      }
    }
    v24 = &OBJC_IVAR___ATXTimelineRelevancePBFeatureVector__appLaunchCount;
LABEL_38:
    *(_BYTE *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t DNDModeSemanticTypeToSuggestedFaceType(uint64_t a1)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((unint64_t)(a1 + 1) < 0xB)
    return qword_1C9E80E68[a1 + 1];
  __atxlog_handle_modes();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    DNDModeSemanticTypeToSuggestedFaceType_cold_1(a1, v3, v4, v5, v6, v7, v8, v9);

  return 0;
}

void sub_1C9DB3B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_1C9DB59C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9DB5B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9DB6868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C9DB6F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9DB702C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id calendarWithTimeZone(void *a1)
{
  void *v1;
  id v2;
  void *v3;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setTimeZone:", v2);

  return v3;
}

void sub_1C9DBBB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9DBBCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXMPBHeroAppEngagementTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 16;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 28) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_34;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_36;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v20) = 0;
LABEL_36:
            *(_DWORD *)(a1 + 24) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 8;
      }
      v26 = *(void **)(a1 + v25);
      *(_QWORD *)(a1 + v25) = v24;

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9DBE48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, id *a12, id *a13, id *location, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  char a68;
  char a72;

  objc_destroyWeak(location);
  _Block_object_dispose(&a52, 8);
  _Block_object_dispose(&a58, 8);
  _Block_object_dispose(&a62, 8);
  _Block_object_dispose(&a68, 8);
  _Block_object_dispose(&a72, 8);
  _Block_object_dispose(&STACK[0x228], 8);
  objc_destroyWeak(a13);
  objc_destroyWeak(a12);
  objc_destroyWeak((id *)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

void sub_1C9DC0C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1C9DC0D24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C9DC0F84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1C9DC10E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1C9DC136C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1C9DC14B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1C9DC1680(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1C9DC179C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C9DC1930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{

  _Unwind_Resume(a1);
}

void sub_1C9DC1B7C(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1C9DC1D88(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9DC1F08(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_13(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x16u);
}

void loadArray(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int16x8_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  int v19;
  uint64_t v21;
  int16x8_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  void *v29;
  unsigned int v30;
  unsigned int v31;
  NSObject *v32;
  NSObject *v33;
  void *v34;
  NSObject *v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint8_t buf[4];
  unint64_t v49;
  __int16 v50;
  void *v51;
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = 0;
  v5 = 0x1E0CF8000uLL;
  v6 = *MEMORY[0x1E0C99768];
  v41 = a1;
  v7 = a1;
  v38 = v3;
  do
  {
    objc_msgSend(*(id *)(v5 + 3136), "actionFeedbackStageToString:", v4);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "objectForKeyedSubscript:");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(v8, "floatValue");
        v9 = 0;
        __asm { FCVT            H0, S0 }
        v15 = vdupq_lane_s16(_D0, 0);
        do
        {
          *(int16x8_t *)(v7 + v9) = v15;
          v9 += 16;
        }
        while (v9 != 96);
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v16 = v4;
          v39 = v8;
          v17 = v8;
          objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("Default"));
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "floatValue");
          _S8 = v19;

          v21 = 0;
          __asm { FCVT            H0, S8 }
          v23 = vdupq_lane_s16(_D0, 0);
          do
          {
            *(int16x8_t *)(v7 + v21) = v23;
            v21 += 16;
          }
          while (v21 != 96);
          v40 = v7;
          v46 = 0u;
          v47 = 0u;
          v44 = 0u;
          v45 = 0u;
          objc_msgSend(v17, "allKeys");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v44, v52, 16);
          if (v25)
          {
            v26 = v25;
            v27 = *(_QWORD *)v45;
            do
            {
              for (i = 0; i != v26; ++i)
              {
                if (*(_QWORD *)v45 != v27)
                  objc_enumerationMutation(v24);
                v29 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * i);
                if ((objc_msgSend(v29, "isEqualToString:", CFSTR("Default")) & 1) == 0)
                {
                  v43 = 0;
                  v30 = objc_msgSend(MEMORY[0x1E0CF9508], "consumerSubtypeForString:found:", v29, &v43);
                  if (v43)
                  {
                    v31 = v30;
                    if (v30 < 0x30)
                    {
                      objc_msgSend(v17, "objectForKeyedSubscript:", v29);
                      v34 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v34, "floatValue");
                      __asm { FCVT            H0, S0 }
                      *(_WORD *)(v41 + 96 * v16 + 2 * v31) = _S0;

                    }
                    else
                    {
                      __atxlog_handle_default();
                      v32 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 134218242;
                        v49 = v31;
                        v50 = 2112;
                        v51 = v42;
                        _os_log_error_impl(&dword_1C9A3B000, v32, OS_LOG_TYPE_ERROR, "Invalid consumerSubType value of %lu for string '%@' -- out of array bounds", buf, 0x16u);
                      }

                      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v6, CFSTR("Invalid consumerSubType value of %lu for string '%@' -- out of array bounds"), v31, v42);
                    }
                  }
                  else
                  {
                    __atxlog_handle_default();
                    v33 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138412290;
                      v49 = (unint64_t)v29;
                      _os_log_error_impl(&dword_1C9A3B000, v33, OS_LOG_TYPE_ERROR, "Invalid consumerSubType string of '%@' in ATXActionFeedbackWeights asset", buf, 0xCu);
                    }

                    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v6, CFSTR("Invalid consumerSubType string of '%@' in ATXActionFeedbackWeights asset"), v29, v37);
                  }
                }
              }
              v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v44, v52, 16);
            }
            while (v26);
          }

          v3 = v38;
          v8 = v39;
          v4 = v16;
          v5 = 0x1E0CF8000;
          v7 = v40;
        }
        else
        {
          __atxlog_handle_default();
          v36 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v49 = (unint64_t)v3;
            _os_log_error_impl(&dword_1C9A3B000, v36, OS_LOG_TYPE_ERROR, "Invalid format of weights assetData: %@", buf, 0xCu);
          }

          objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v6, CFSTR("Invalid format of weights assetData: %@"), v3);
        }
      }
    }

    ++v4;
    v7 += 96;
  }
  while (v4 != 8);

}

void sub_1C9DC761C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9DC7B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void sub_1C9DC7F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1C9DC8100(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1C9DC828C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C9DC83D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v16 = v14;

  _Unwind_Resume(a1);
}

void sub_1C9DC8760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1C9DC8924(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C9DC8B44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1C9DC8DE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1C9DC8F0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t AWDProactiveAppPredictionLaunchesAtLocationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  void *v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_WORD *)(a1 + 60) |= 1u;
          while (1)
          {
            v21 = *v3;
            v22 = *(_QWORD *)(a2 + v21);
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_80;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              v20 = 0;
              goto LABEL_82;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_80:
          if (*(_BYTE *)(a2 + *v5))
            v20 = 0;
LABEL_82:
          *(_QWORD *)(a1 + 8) = v20;
          continue;
        case 2u:
          *(_WORD *)(a1 + 60) |= 2u;
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v28 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v27);
            *(_QWORD *)(a2 + v26) = v27 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v28 = 0;
          }
          v77 = 24;
          goto LABEL_113;
        case 3u:
          *(_WORD *)(a1 + 60) |= 0x10u;
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v28 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v28 = 0;
          }
          v77 = 36;
LABEL_113:
          *(_DWORD *)(a1 + v77) = v28;
          continue;
        case 4u:
          v31 = 0;
          v32 = 0;
          v33 = 0;
          *(_WORD *)(a1 + 60) |= 0x20u;
          while (2)
          {
            v34 = *v3;
            v35 = *(_QWORD *)(a2 + v34);
            v36 = v35 + 1;
            if (v35 == -1 || v36 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v37 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
              *(_QWORD *)(a2 + v34) = v36;
              v33 |= (unint64_t)(v37 & 0x7F) << v31;
              if (v37 < 0)
              {
                v31 += 7;
                v15 = v32++ >= 9;
                if (v15)
                {
                  LODWORD(v33) = 0;
                  goto LABEL_86;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v33) = 0;
LABEL_86:
          v74 = 40;
          goto LABEL_103;
        case 5u:
          PBReaderReadString();
          v38 = objc_claimAutoreleasedReturnValue();
          v39 = 16;
          goto LABEL_57;
        case 6u:
          v40 = 0;
          v41 = 0;
          v42 = 0;
          *(_WORD *)(a1 + 60) |= 0x100u;
          while (2)
          {
            v43 = *v3;
            v44 = *(_QWORD *)(a2 + v43);
            v45 = v44 + 1;
            if (v44 == -1 || v45 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v46 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
              *(_QWORD *)(a2 + v43) = v45;
              v42 |= (unint64_t)(v46 & 0x7F) << v40;
              if (v46 < 0)
              {
                v40 += 7;
                v15 = v41++ >= 9;
                if (v15)
                {
                  v42 = 0;
                  goto LABEL_90;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v42 = 0;
LABEL_90:
          v75 = v42 != 0;
          v76 = 58;
          goto LABEL_108;
        case 7u:
          v47 = 0;
          v48 = 0;
          v49 = 0;
          *(_WORD *)(a1 + 60) |= 0x40u;
          while (2)
          {
            v50 = *v3;
            v51 = *(_QWORD *)(a2 + v50);
            v52 = v51 + 1;
            if (v51 == -1 || v52 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
              *(_QWORD *)(a2 + v50) = v52;
              v49 |= (unint64_t)(v53 & 0x7F) << v47;
              if (v53 < 0)
              {
                v47 += 7;
                v15 = v48++ >= 9;
                if (v15)
                {
                  v49 = 0;
                  goto LABEL_94;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v49 = 0;
LABEL_94:
          v75 = v49 != 0;
          v76 = 56;
          goto LABEL_108;
        case 8u:
          PBReaderReadString();
          v38 = objc_claimAutoreleasedReturnValue();
          v39 = 48;
LABEL_57:
          v54 = *(void **)(a1 + v39);
          *(_QWORD *)(a1 + v39) = v38;

          continue;
        case 9u:
          v55 = 0;
          v56 = 0;
          v33 = 0;
          *(_WORD *)(a1 + 60) |= 8u;
          while (2)
          {
            v57 = *v3;
            v58 = *(_QWORD *)(a2 + v57);
            v59 = v58 + 1;
            if (v58 == -1 || v59 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v60 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v58);
              *(_QWORD *)(a2 + v57) = v59;
              v33 |= (unint64_t)(v60 & 0x7F) << v55;
              if (v60 < 0)
              {
                v55 += 7;
                v15 = v56++ >= 9;
                if (v15)
                {
                  LODWORD(v33) = 0;
                  goto LABEL_98;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v33) = 0;
LABEL_98:
          v74 = 32;
          goto LABEL_103;
        case 0xAu:
          v61 = 0;
          v62 = 0;
          v33 = 0;
          *(_WORD *)(a1 + 60) |= 4u;
          while (2)
          {
            v63 = *v3;
            v64 = *(_QWORD *)(a2 + v63);
            v65 = v64 + 1;
            if (v64 == -1 || v65 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v66 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v64);
              *(_QWORD *)(a2 + v63) = v65;
              v33 |= (unint64_t)(v66 & 0x7F) << v61;
              if (v66 < 0)
              {
                v61 += 7;
                v15 = v62++ >= 9;
                if (v15)
                {
                  LODWORD(v33) = 0;
                  goto LABEL_102;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v33) = 0;
LABEL_102:
          v74 = 28;
LABEL_103:
          *(_DWORD *)(a1 + v74) = v33;
          continue;
        case 0xBu:
          v67 = 0;
          v68 = 0;
          v69 = 0;
          *(_WORD *)(a1 + 60) |= 0x80u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v70 = *v3;
        v71 = *(_QWORD *)(a2 + v70);
        v72 = v71 + 1;
        if (v71 == -1 || v72 > *(_QWORD *)(a2 + *v4))
          break;
        v73 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v71);
        *(_QWORD *)(a2 + v70) = v72;
        v69 |= (unint64_t)(v73 & 0x7F) << v67;
        if ((v73 & 0x80) == 0)
          goto LABEL_105;
        v67 += 7;
        v15 = v68++ >= 9;
        if (v15)
        {
          v69 = 0;
          goto LABEL_107;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_105:
      if (*(_BYTE *)(a2 + *v5))
        v69 = 0;
LABEL_107:
      v75 = v69 != 0;
      v76 = 57;
LABEL_108:
      *(_BYTE *)(a1 + v76) = v75;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1C9DCB358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1C9DCD848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9DCDA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9DCDC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9DCDE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9DCEB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C9DD2B98(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1C9DD3784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL ATXPBBlendingSessionUICacheReadFrom(_QWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  ATXPBBlendingSessionClientModelSuggestion *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = (ATXPBBlendingSessionClientModelSuggestion *)a1[1];
        a1[1] = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(ATXPBBlendingSessionClientModelSuggestion);
    objc_msgSend(a1, "addSuggestion:", v18);
    if (!PBReaderPlaceMark()
      || (ATXPBBlendingSessionClientModelSuggestionReadFrom((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void OUTLINED_FUNCTION_5_8(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x12u);
}

uint64_t ATXMagicalMomentsPBMMPredictedScoreTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 8;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 1u;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_34;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_36;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v20) = 0;
LABEL_36:
            *(_DWORD *)(a1 + 16) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 24;
      }
      v26 = *(void **)(a1 + v25);
      *(_QWORD *)(a1 + v25) = v24;

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void flushHistogram(void *a1)
{
  id v1;
  NSObject *v2;

  v1 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v1, "flush");
  }
  else
  {
    __atxlog_handle_default();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      flushHistogram_cold_1(v2);

    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("Flush called on histogram which isn't backed by persistent store"));
  }

}

uint64_t ATXAnchorModelPBActionMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  ATXAnchorModelPBAppLaunchMetadata *v24;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_38;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_40;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_40:
        *(_DWORD *)(a1 + 16) = v19;
        goto LABEL_41;
      case 2u:
        v24 = objc_alloc_init(ATXAnchorModelPBAppLaunchMetadata);
        objc_storeStrong((id *)(a1 + 32), v24);
        if (!PBReaderPlaceMark()
          || (ATXAnchorModelPBAppLaunchMetadataReadFrom((uint64_t)v24, a2) & 1) == 0)
        {
          goto LABEL_43;
        }
        goto LABEL_36;
      case 3u:
        v24 = objc_alloc_init(ATXAnchorModelPBActionKeyMetadata);
        objc_storeStrong((id *)(a1 + 8), v24);
        if (!PBReaderPlaceMark() || !ATXAnchorModelPBActionKeyMetadataReadFrom((uint64_t)v24, a2))
          goto LABEL_43;
        goto LABEL_36;
      case 4u:
        v24 = objc_alloc_init(ATXAnchorModelPBActionUUIDMetadata);
        objc_msgSend((id)a1, "addActionUUIDMetadata:", v24);
        if (PBReaderPlaceMark()
          && (ATXAnchorModelPBActionUUIDMetadataReadFrom((uint64_t)v24, a2) & 1) != 0)
        {
LABEL_36:
          PBReaderRecallMark();

LABEL_41:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_43:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_41;
    }
  }
}

void sub_1C9DDFB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id OUTLINED_FUNCTION_5_9(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 32));
}

void sub_1C9DE02D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9DE1910(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1C9DE19B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C9DE1C4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1C9DE1E18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t AWDProactiveAppPredictionIntentPredictionSessionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  AWDProactiveActionData *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t result;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  char v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  char v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  char v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  char v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  unsigned int v123;
  uint64_t v124;
  unint64_t v125;
  char v126;
  char v127;
  unsigned int v128;
  uint64_t v129;
  unint64_t v130;
  char v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  char v137;
  unsigned int v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  char v142;
  unsigned int v143;
  uint64_t v144;
  unint64_t v145;
  char v146;
  char v147;
  unsigned int v148;
  uint64_t v149;
  unint64_t v150;
  char v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  void *v157;
  uint64_t v158;
  BOOL v159;
  uint64_t v160;
  char v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char v166;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    v16 = v10 & 7;
    if (v15 || v16 == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(_DWORD *)(a1 + 184) |= 1u;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_222;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            v20 = 0;
            goto LABEL_224;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_222:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_224:
        *(_QWORD *)(a1 + 32) = v20;
        goto LABEL_323;
      case 2u:
        v24 = objc_alloc_init(AWDProactiveActionData);
        objc_msgSend((id)a1, "addActionData:", v24);
        if (!PBReaderPlaceMark() || (AWDProactiveActionDataReadFrom((uint64_t)v24, a2) & 1) == 0)
          goto LABEL_337;
        goto LABEL_218;
      case 3u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 184) |= 2u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_228;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_228:
        v158 = 56;
        goto LABEL_322;
      case 4u:
        v24 = objc_alloc_init(AWDProactiveAppPredictionAppLaunchSequence);
        objc_storeStrong((id *)(a1 + 80), v24);
        if (!PBReaderPlaceMark()
          || (AWDProactiveAppPredictionAppLaunchSequenceReadFrom((uint64_t)v24, a2) & 1) == 0)
        {
          goto LABEL_337;
        }
        goto LABEL_218;
      case 5u:
        v31 = 0;
        v32 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 184) |= 8u;
        while (2)
        {
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v27 |= (unint64_t)(v35 & 0x7F) << v31;
            if (v35 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_232;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_232:
        v158 = 88;
        goto LABEL_322;
      case 6u:
        v36 = 0;
        v37 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x10u;
        while (2)
        {
          v38 = *v3;
          v39 = *(_QWORD *)(a2 + v38);
          if (v39 == -1 || v39 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v39);
            *(_QWORD *)(a2 + v38) = v39 + 1;
            v27 |= (unint64_t)(v40 & 0x7F) << v36;
            if (v40 < 0)
            {
              v36 += 7;
              v14 = v37++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_236;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_236:
        v158 = 92;
        goto LABEL_322;
      case 7u:
        v41 = 0;
        v42 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x20u;
        while (2)
        {
          v43 = *v3;
          v44 = *(_QWORD *)(a2 + v43);
          if (v44 == -1 || v44 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v44);
            *(_QWORD *)(a2 + v43) = v44 + 1;
            v27 |= (unint64_t)(v45 & 0x7F) << v41;
            if (v45 < 0)
            {
              v41 += 7;
              v14 = v42++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_240;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_240:
        v158 = 96;
        goto LABEL_322;
      case 8u:
        if (v16 == 2)
        {
          result = PBReaderPlaceMark();
          if (!(_DWORD)result)
            return result;
          while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4) && !*(_BYTE *)(a2 + *v5))
          {
            v47 = 0;
            v48 = 0;
            v49 = 0;
            while (1)
            {
              v50 = *v3;
              v51 = *(_QWORD *)(a2 + v50);
              if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
                break;
              v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
              *(_QWORD *)(a2 + v50) = v51 + 1;
              v49 |= (unint64_t)(v52 & 0x7F) << v47;
              if (v52 < 0)
              {
                v47 += 7;
                v14 = v48++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_74;
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_74:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v161 = 0;
          v162 = 0;
          v163 = 0;
          while (1)
          {
            v164 = *v3;
            v165 = *(_QWORD *)(a2 + v164);
            if (v165 == -1 || v165 >= *(_QWORD *)(a2 + *v4))
              break;
            v166 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v165);
            *(_QWORD *)(a2 + v164) = v165 + 1;
            v163 |= (unint64_t)(v166 & 0x7F) << v161;
            if (v166 < 0)
            {
              v161 += 7;
              v14 = v162++ >= 9;
              if (!v14)
                continue;
            }
            goto LABEL_334;
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_334:
          PBRepeatedInt32Add();
        }
        goto LABEL_323;
      case 9u:
        v53 = 0;
        v54 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x40u;
        while (2)
        {
          v55 = *v3;
          v56 = *(_QWORD *)(a2 + v55);
          if (v56 == -1 || v56 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
            *(_QWORD *)(a2 + v55) = v56 + 1;
            v27 |= (unint64_t)(v57 & 0x7F) << v53;
            if (v57 < 0)
            {
              v53 += 7;
              v14 = v54++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_244;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_244:
        v158 = 100;
        goto LABEL_322;
      case 0xAu:
        v58 = 0;
        v59 = 0;
        v60 = 0;
        *(_DWORD *)(a1 + 184) |= 0x800000u;
        while (2)
        {
          v61 = *v3;
          v62 = *(_QWORD *)(a2 + v61);
          if (v62 == -1 || v62 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v63 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v62);
            *(_QWORD *)(a2 + v61) = v62 + 1;
            v60 |= (unint64_t)(v63 & 0x7F) << v58;
            if (v63 < 0)
            {
              v58 += 7;
              v14 = v59++ >= 9;
              if (v14)
              {
                v60 = 0;
                goto LABEL_248;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v60 = 0;
LABEL_248:
        v159 = v60 != 0;
        v160 = 180;
        goto LABEL_257;
      case 0xBu:
        v64 = 0;
        v65 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x80u;
        while (2)
        {
          v66 = *v3;
          v67 = *(_QWORD *)(a2 + v66);
          if (v67 == -1 || v67 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v68 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v67);
            *(_QWORD *)(a2 + v66) = v67 + 1;
            v27 |= (unint64_t)(v68 & 0x7F) << v64;
            if (v68 < 0)
            {
              v64 += 7;
              v14 = v65++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_252;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_252:
        v158 = 104;
        goto LABEL_322;
      case 0xCu:
        v69 = 0;
        v70 = 0;
        v71 = 0;
        *(_DWORD *)(a1 + 184) |= 0x1000000u;
        while (2)
        {
          v72 = *v3;
          v73 = *(_QWORD *)(a2 + v72);
          if (v73 == -1 || v73 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v74 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v73);
            *(_QWORD *)(a2 + v72) = v73 + 1;
            v71 |= (unint64_t)(v74 & 0x7F) << v69;
            if (v74 < 0)
            {
              v69 += 7;
              v14 = v70++ >= 9;
              if (v14)
              {
                v71 = 0;
                goto LABEL_256;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v71 = 0;
LABEL_256:
        v159 = v71 != 0;
        v160 = 181;
LABEL_257:
        *(_BYTE *)(a1 + v160) = v159;
        goto LABEL_323;
      case 0xDu:
        v75 = 0;
        v76 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x400u;
        while (2)
        {
          v77 = *v3;
          v78 = *(_QWORD *)(a2 + v77);
          if (v78 == -1 || v78 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v79 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v78);
            *(_QWORD *)(a2 + v77) = v78 + 1;
            v27 |= (unint64_t)(v79 & 0x7F) << v75;
            if (v79 < 0)
            {
              v75 += 7;
              v14 = v76++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_261;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_261:
        v158 = 116;
        goto LABEL_322;
      case 0xEu:
        v80 = 0;
        v81 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x800u;
        while (2)
        {
          v82 = *v3;
          v83 = *(_QWORD *)(a2 + v82);
          if (v83 == -1 || v83 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v84 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v83);
            *(_QWORD *)(a2 + v82) = v83 + 1;
            v27 |= (unint64_t)(v84 & 0x7F) << v80;
            if (v84 < 0)
            {
              v80 += 7;
              v14 = v81++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_265;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_265:
        v158 = 120;
        goto LABEL_322;
      case 0xFu:
        v85 = 0;
        v86 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x2000u;
        while (2)
        {
          v87 = *v3;
          v88 = *(_QWORD *)(a2 + v87);
          if (v88 == -1 || v88 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v89 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v88);
            *(_QWORD *)(a2 + v87) = v88 + 1;
            v27 |= (unint64_t)(v89 & 0x7F) << v85;
            if (v89 < 0)
            {
              v85 += 7;
              v14 = v86++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_269;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_269:
        v158 = 140;
        goto LABEL_322;
      case 0x10u:
        v90 = 0;
        v91 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x4000u;
        while (2)
        {
          v92 = *v3;
          v93 = *(_QWORD *)(a2 + v92);
          if (v93 == -1 || v93 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v94 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v93);
            *(_QWORD *)(a2 + v92) = v93 + 1;
            v27 |= (unint64_t)(v94 & 0x7F) << v90;
            if (v94 < 0)
            {
              v90 += 7;
              v14 = v91++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_273;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_273:
        v158 = 144;
        goto LABEL_322;
      case 0x11u:
        v95 = 0;
        v96 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x10000u;
        while (2)
        {
          v97 = *v3;
          v98 = *(_QWORD *)(a2 + v97);
          if (v98 == -1 || v98 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v99 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v98);
            *(_QWORD *)(a2 + v97) = v98 + 1;
            v27 |= (unint64_t)(v99 & 0x7F) << v95;
            if (v99 < 0)
            {
              v95 += 7;
              v14 = v96++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_277;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_277:
        v158 = 152;
        goto LABEL_322;
      case 0x12u:
        v100 = 0;
        v101 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x80000u;
        while (2)
        {
          v102 = *v3;
          v103 = *(_QWORD *)(a2 + v102);
          if (v103 == -1 || v103 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v104 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v103);
            *(_QWORD *)(a2 + v102) = v103 + 1;
            v27 |= (unint64_t)(v104 & 0x7F) << v100;
            if (v104 < 0)
            {
              v100 += 7;
              v14 = v101++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_281;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_281:
        v158 = 164;
        goto LABEL_322;
      case 0x13u:
        v105 = 0;
        v106 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x200000u;
        while (2)
        {
          v107 = *v3;
          v108 = *(_QWORD *)(a2 + v107);
          if (v108 == -1 || v108 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v109 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v108);
            *(_QWORD *)(a2 + v107) = v108 + 1;
            v27 |= (unint64_t)(v109 & 0x7F) << v105;
            if (v109 < 0)
            {
              v105 += 7;
              v14 = v106++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_285;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_285:
        v158 = 172;
        goto LABEL_322;
      case 0x14u:
        v110 = 0;
        v111 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x400000u;
        while (2)
        {
          v112 = *v3;
          v113 = *(_QWORD *)(a2 + v112);
          if (v113 == -1 || v113 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v114 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v113);
            *(_QWORD *)(a2 + v112) = v113 + 1;
            v27 |= (unint64_t)(v114 & 0x7F) << v110;
            if (v114 < 0)
            {
              v110 += 7;
              v14 = v111++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_289;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_289:
        v158 = 176;
        goto LABEL_322;
      case 0x15u:
        v115 = 0;
        v116 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x1000u;
        while (2)
        {
          v117 = *v3;
          v118 = *(_QWORD *)(a2 + v117);
          if (v118 == -1 || v118 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v119 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v118);
            *(_QWORD *)(a2 + v117) = v118 + 1;
            v27 |= (unint64_t)(v119 & 0x7F) << v115;
            if (v119 < 0)
            {
              v115 += 7;
              v14 = v116++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_293;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_293:
        v158 = 136;
        goto LABEL_322;
      case 0x16u:
        PBReaderReadString();
        v120 = objc_claimAutoreleasedReturnValue();
        v121 = 40;
        goto LABEL_220;
      case 0x17u:
        v122 = 0;
        v123 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 184) |= 4u;
        while (2)
        {
          v124 = *v3;
          v125 = *(_QWORD *)(a2 + v124);
          if (v125 == -1 || v125 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v126 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v125);
            *(_QWORD *)(a2 + v124) = v125 + 1;
            v27 |= (unint64_t)(v126 & 0x7F) << v122;
            if (v126 < 0)
            {
              v122 += 7;
              v14 = v123++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_297;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_297:
        v158 = 72;
        goto LABEL_322;
      case 0x18u:
        v127 = 0;
        v128 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x100u;
        while (2)
        {
          v129 = *v3;
          v130 = *(_QWORD *)(a2 + v129);
          if (v130 == -1 || v130 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v131 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v130);
            *(_QWORD *)(a2 + v129) = v130 + 1;
            v27 |= (unint64_t)(v131 & 0x7F) << v127;
            if (v131 < 0)
            {
              v127 += 7;
              v14 = v128++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_301;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_301:
        v158 = 108;
        goto LABEL_322;
      case 0x19u:
        v132 = 0;
        v133 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x200u;
        while (2)
        {
          v134 = *v3;
          v135 = *(_QWORD *)(a2 + v134);
          if (v135 == -1 || v135 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v136 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v135);
            *(_QWORD *)(a2 + v134) = v135 + 1;
            v27 |= (unint64_t)(v136 & 0x7F) << v132;
            if (v136 < 0)
            {
              v132 += 7;
              v14 = v133++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_305;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_305:
        v158 = 112;
        goto LABEL_322;
      case 0x1Au:
        v137 = 0;
        v138 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x20000u;
        while (2)
        {
          v139 = *v3;
          v140 = *(_QWORD *)(a2 + v139);
          if (v140 == -1 || v140 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v141 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v140);
            *(_QWORD *)(a2 + v139) = v140 + 1;
            v27 |= (unint64_t)(v141 & 0x7F) << v137;
            if (v141 < 0)
            {
              v137 += 7;
              v14 = v138++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_309;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_309:
        v158 = 156;
        goto LABEL_322;
      case 0x1Bu:
        v142 = 0;
        v143 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x40000u;
        while (2)
        {
          v144 = *v3;
          v145 = *(_QWORD *)(a2 + v144);
          if (v145 == -1 || v145 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v146 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v145);
            *(_QWORD *)(a2 + v144) = v145 + 1;
            v27 |= (unint64_t)(v146 & 0x7F) << v142;
            if (v146 < 0)
            {
              v142 += 7;
              v14 = v143++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_313;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_313:
        v158 = 160;
        goto LABEL_322;
      case 0x1Cu:
        v147 = 0;
        v148 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x8000u;
        while (2)
        {
          v149 = *v3;
          v150 = *(_QWORD *)(a2 + v149);
          if (v150 == -1 || v150 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v151 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v150);
            *(_QWORD *)(a2 + v149) = v150 + 1;
            v27 |= (unint64_t)(v151 & 0x7F) << v147;
            if (v151 < 0)
            {
              v147 += 7;
              v14 = v148++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_317;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_317:
        v158 = 148;
        goto LABEL_322;
      case 0x1Du:
        v152 = 0;
        v153 = 0;
        v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x100000u;
        while (2)
        {
          v154 = *v3;
          v155 = *(_QWORD *)(a2 + v154);
          if (v155 == -1 || v155 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v156 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v155);
            *(_QWORD *)(a2 + v154) = v155 + 1;
            v27 |= (unint64_t)(v156 & 0x7F) << v152;
            if (v156 < 0)
            {
              v152 += 7;
              v14 = v153++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_321;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_321:
        v158 = 168;
LABEL_322:
        *(_DWORD *)(a1 + v158) = v27;
        goto LABEL_323;
      case 0x1Eu:
        v24 = objc_alloc_init(AWDProactiveAppPredictionAppActionSequence);
        objc_storeStrong((id *)(a1 + 64), v24);
        if (PBReaderPlaceMark()
          && (AWDProactiveAppPredictionAppActionSequenceReadFrom((uint64_t)v24, a2) & 1) != 0)
        {
LABEL_218:
          PBReaderRecallMark();

LABEL_323:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_337:

        return 0;
      case 0x1Fu:
        PBReaderReadString();
        v120 = objc_claimAutoreleasedReturnValue();
        v121 = 128;
LABEL_220:
        v157 = *(void **)(a1 + v121);
        *(_QWORD *)(a1 + v121) = v120;

        goto LABEL_323;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_323;
    }
  }
}

uint64_t sub_1C9DE73F4()
{
  sub_1C9E461B0();
  swift_bridgeObjectRetain();
  sub_1C9E45D3C();
  swift_bridgeObjectRelease();
  sub_1C9E461E0();
  sub_1C9E46138();
  sub_1C9E45D48();
  swift_bridgeObjectRelease();
  return 0x3A7374726F7053;
}

uint64_t sub_1C9DE749C()
{
  sub_1C9E461B0();
  swift_bridgeObjectRetain();
  sub_1C9E45D3C();
  swift_bridgeObjectRelease();
  return sub_1C9E461E0();
}

uint64_t sub_1C9DE74F8()
{
  return 0x7374726F7053;
}

uint64_t sub_1C9DE750C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1C9DE753C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*sub_1C9DE7570())()
{
  return nullsub_1;
}

uint64_t sub_1C9DE7584()
{
  swift_bridgeObjectRetain();
  sub_1C9E45D3C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C9DE75CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return sub_1C9E46144();
}

uint64_t sub_1C9DE75EC()
{
  return sub_1C9DE73F4();
}

uint64_t sub_1C9DE75F4()
{
  sub_1C9E461B0();
  swift_bridgeObjectRetain();
  sub_1C9E45D3C();
  swift_bridgeObjectRelease();
  return sub_1C9E461E0();
}

uint64_t sub_1C9DE764C()
{
  swift_bridgeObjectRetain();
  sub_1C9E45D3C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C9DE7690()
{
  sub_1C9E461B0();
  swift_bridgeObjectRetain();
  sub_1C9E45D3C();
  swift_bridgeObjectRelease();
  return sub_1C9E461E0();
}

uint64_t sub_1C9DE76E4(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_1C9E46144();
}

id sub_1C9DE7714()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;

  v0 = objc_allocWithZone(MEMORY[0x1E0D8C730]);
  swift_bridgeObjectRetain();
  v1 = (void *)sub_1C9E45CE8();
  v2 = (void *)sub_1C9E45CE8();
  v3 = (void *)sub_1C9E45CE8();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v0, sel_initWithQuery_requestedEntityType_identifier_, v1, v2, v3);

  return v4;
}

unint64_t sub_1C9DE77D8()
{
  unint64_t result;

  result = qword_1EF930CE8;
  if (!qword_1EF930CE8)
  {
    result = MEMORY[0x1CAA492F8](&unk_1C9E81010, &type metadata for SportsSuggestion);
    atomic_store(result, (unint64_t *)&qword_1EF930CE8);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SportsSuggestion(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for SportsSuggestion()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for SportsSuggestion(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for SportsSuggestion(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsSuggestion(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsSuggestion(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsSuggestion()
{
  return &type metadata for SportsSuggestion;
}

uint64_t sub_1C9DE7964()
{
  uint64_t v0;

  v0 = sub_1C9E45BF8();
  __swift_allocate_value_buffer(v0, qword_1ED84FF48);
  __swift_project_value_buffer(v0, (uint64_t)qword_1ED84FF48);
  return sub_1C9E45BE0();
}

uint64_t sub_1C9DE79D4()
{
  uint64_t v0;

  if (qword_1ED84F920 != -1)
    swift_once();
  v0 = sub_1C9E45BF8();
  return __swift_project_value_buffer(v0, (uint64_t)qword_1ED84FF48);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_1C9DE7A34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1ED84F920 != -1)
    swift_once();
  v2 = sub_1C9E45BF8();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED84FF48);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void *sub_1C9DE7AE4(void *a1)
{
  id v2;

  v2 = a1;
  return a1;
}

uint64_t sub_1C9DE7B08()
{
  type metadata accessor for MotionContext();
  sub_1C9DE8428(qword_1EF930CF0, (uint64_t)&unk_1C9E81090);
  return sub_1C9DEB01C();
}

uint64_t type metadata accessor for MotionContext()
{
  return objc_opt_self();
}

uint64_t sub_1C9DE7B64()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t sub_1C9DE7B88()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  if (!v1)
    return 0;
  v2 = objc_msgSend(v1, sel_confidence);
  if (!v2)
    return 0x29776F4C28;
  if (v2 != (id)2)
  {
    if (v2 == (id)1)
      return 0x296D756964654D28;
    return 0;
  }
  return 0x296867694828;
}

uint64_t sub_1C9DE7C14()
{
  return 0;
}

void *sub_1C9DE7C1C()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

uint64_t sub_1C9DE7C40(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t sub_1C9DE7C70(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t sub_1C9DE7C7C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1C9DE7C98()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t sub_1C9DE7CBC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_1C9DE7CC8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

uint64_t sub_1C9DE7CF0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))() & 1;
}

id sub_1C9DE7D1C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(*(_QWORD *)v1 + 16);
  *a1 = v2;
  return v2;
}

uint64_t sub_1C9DE7D2C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 120))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1C9DE7D58@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for MotionContext();
  sub_1C9DE8428(qword_1EF930CF0, (uint64_t)&unk_1C9E81090);
  result = sub_1C9DEB048();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1C9DE7DA8()
{
  uint64_t v0;
  uint64_t result;

  sub_1C9DE82A8();
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C9E81080;
  *(_QWORD *)(v0 + 32) = type metadata accessor for MotionContextStore.WalkingContext();
  *(_QWORD *)(v0 + 40) = type metadata accessor for MotionContextStore.RunningContext();
  *(_QWORD *)(v0 + 48) = type metadata accessor for MotionContextStore.CyclingContext();
  result = type metadata accessor for MotionContextStore.AutomotiveContext();
  *(_QWORD *)(v0 + 56) = result;
  qword_1EF9350F0 = v0;
  return result;
}

uint64_t *sub_1C9DE7E18()
{
  if (qword_1EF933830 != -1)
    swift_once();
  return &qword_1EF9350F0;
}

uint64_t sub_1C9DE7E58()
{
  if (qword_1EF933830 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C9DE7E98()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C9DE7ECC(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1C9DE7F10())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

void *sub_1C9DE7F50()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

uint64_t sub_1C9DE7F74(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 24) = a1;
  v3 = qword_1EF933830;
  v4 = a1;
  if (v3 != -1)
    swift_once();
  v5 = v4;
  v6 = swift_bridgeObjectRetain();
  v7 = sub_1C9DE82F4(v6, (uint64_t)a1);
  swift_bridgeObjectRelease();

  *(_QWORD *)(v2 + 16) = v7;
  return v2;
}

uint64_t sub_1C9DE8038(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v1 + 24) = a1;
  v3 = qword_1EF933830;
  v4 = a1;
  if (v3 != -1)
    swift_once();
  v5 = v4;
  v6 = swift_bridgeObjectRetain();
  v7 = sub_1C9DE82F4(v6, (uint64_t)a1);
  swift_bridgeObjectRelease();

  *(_QWORD *)(v1 + 16) = v7;
  return v1;
}

uint64_t sub_1C9DE80E4()
{
  return 0x676E696B6C6157;
}

uint64_t sub_1C9DE80FC()
{
  uint64_t result;

  result = 0x20676E696B6C6157;
  sub_1C9DE81D4();
  return result;
}

id sub_1C9DE8114()
{
  return sub_1C9DE8228((SEL *)&selRef_walking);
}

uint64_t sub_1C9DE8120()
{
  return 0x676E696E6E7552;
}

uint64_t sub_1C9DE8138()
{
  uint64_t result;

  result = 0x20676E696E6E7552;
  sub_1C9DE81D4();
  return result;
}

id sub_1C9DE8150()
{
  return sub_1C9DE8228((SEL *)&selRef_running);
}

uint64_t sub_1C9DE815C()
{
  return 0x676E696C637943;
}

uint64_t sub_1C9DE8174()
{
  uint64_t result;

  result = 0x20676E696C637943;
  sub_1C9DE81D4();
  return result;
}

id sub_1C9DE818C()
{
  return sub_1C9DE8228((SEL *)&selRef_cycling);
}

uint64_t sub_1C9DE8198()
{
  return 0x69746F6D6F747541;
}

uint64_t sub_1C9DE81B4()
{
  uint64_t result;

  result = 0x69746F6D6F747541;
  sub_1C9DE81D4();
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1C9DE81D4()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 104))();
  sub_1C9E45D48();
  swift_bridgeObjectRelease();
}

id sub_1C9DE821C()
{
  return sub_1C9DE8228((SEL *)&selRef_automotive);
}

id sub_1C9DE8228(SEL *a1)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 16))
    return objc_msgSend(*(id *)(v1 + 16), *a1);
  else
    return 0;
}

uint64_t sub_1C9DE8258()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_1C9DE827C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1C9DE82A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9311F0);
  if (swift_isClassType())
    v1 = v0;
  else
    v1 = 0;
  if (v1)
    v2 = (uint64_t *)&unk_1EF931200;
  else
    v2 = (uint64_t *)&unk_1EF9311F8;
  return __swift_instantiateConcreteTypeFromMangledName(v2);
}

uint64_t sub_1C9DE82F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    sub_1C9E46048();
    v6 = (uint64_t *)(a1 + 32);
    v7 = type metadata accessor for MotionContext();
    v8 = sub_1C9DE8428(qword_1EF930CF0, (uint64_t)&unk_1C9E81090);
    do
    {
      v9 = *v6++;
      v10 = a2;
      sub_1C9DEB11C(v9, (uint64_t)&v10, v7, v7, v8, v8);
      sub_1C9E46030();
      sub_1C9E46054();
      sub_1C9E46060();
      sub_1C9E4603C();
      --v3;
    }
    while (v3);
    return v11;
  }
  return result;
}

uint64_t sub_1C9DE83F4(uint64_t a1)
{
  uint64_t result;

  result = sub_1C9DE8428(qword_1EF930D40, (uint64_t)&unk_1C9E810AC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C9DE8428(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for MotionContext();
    result = MEMORY[0x1CAA492F8](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C9DE8464()
{
  return MEMORY[0x1E0DEA978];
}

uint64_t sub_1C9DE8470()
{
  return sub_1C9DE8428(qword_1EF930CF0, (uint64_t)&unk_1C9E81090);
}

void **initializeBufferWithCopyOfBuffer for MotionContextDependencies(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void destroy for MotionContextDependencies(id *a1)
{

}

void **assignWithCopy for MotionContextDependencies(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  v5 = v4;

  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void **assignWithTake for MotionContextDependencies(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for MotionContextDependencies(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MotionContextDependencies(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MotionContextDependencies()
{
  return &type metadata for MotionContextDependencies;
}

uint64_t type metadata accessor for MotionContextStore()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MotionContextStore.WalkingContext()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MotionContextStore.RunningContext()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MotionContextStore.CyclingContext()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MotionContextStore.AutomotiveContext()
{
  return objc_opt_self();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1CAA492E0]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1C9DE86E8()
{
  return 1;
}

uint64_t sub_1C9DE86F0()
{
  return sub_1C9E461BC();
}

uint64_t sub_1C9DE8714()
{
  sub_1C9E461B0();
  sub_1C9E461BC();
  return sub_1C9E461E0();
}

uint64_t sub_1C9DE8754()
{
  sub_1C9E461B0();
  sub_1C9E461BC();
  return sub_1C9E461E0();
}

char *sub_1C9DE87B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  unint64_t v27;
  id v28;
  void *v29;
  id v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  char *v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  id v51;
  uint64_t v52;
  id v53;
  void *v54;
  _QWORD v56[2];
  char *v57;
  char *v58;
  id v59[2];

  v59[1] = *(id *)MEMORY[0x1E0C80C00];
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF931208);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v56 - v9;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (unint64_t)v56 - v13;
  v15 = sub_1C9E45748();
  v58 = *(char **)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v57 = (char *)v56 - v21;
  v22 = a1 + OBJC_IVAR____TtC21AppPredictionInternal14MeetingContext_dependencies;
  v23 = *(void **)(v22 + *(int *)(type metadata accessor for MeetingContext.Dependencies(0) + 20));
  v24 = objc_msgSend(v23, sel_virtualConference);
  if (!v24)
    goto LABEL_11;
  v25 = v24;
  v56[1] = v1;
  v26 = objc_msgSend(v24, sel_joinMethods);

  sub_1C9DE8EB0(0, &qword_1EF931210);
  v27 = sub_1C9E45D84();

  if (!(v27 >> 62))
  {
    if (*(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  v35 = sub_1C9E460A8();
  swift_bridgeObjectRelease();
  if (!v35)
  {
LABEL_10:
    swift_bridgeObjectRelease();
LABEL_11:
    v18 = v58;
    v33 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((_QWORD *)v58 + 7);
    v33(v10, 1, 1, v15);
    goto LABEL_12;
  }
LABEL_4:
  if ((v27 & 0xC000000000000001) != 0)
  {
    v28 = (id)MEMORY[0x1CAA47960](0, v27);
  }
  else
  {
    if (!*(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_30;
    }
    v28 = *(id *)(v27 + 32);
  }
  v29 = v28;
  swift_bridgeObjectRelease();
  v30 = objc_msgSend(v29, sel_URL);

  sub_1C9E4573C();
  v31 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v58 + 4);
  v32 = v18;
  v18 = v58;
  v31(v10, v32, v15);
  v33 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((_QWORD *)v18 + 7);
  v33(v10, 0, 1, v15);
  v34 = (unsigned int (*)(char *, uint64_t, uint64_t))*((_QWORD *)v18 + 6);
  if (v34(v10, 1, v15) != 1)
  {
    v31((char *)v14, v10, v15);
    v33((char *)v14, 0, 1, v15);
    v23 = v57;
    goto LABEL_16;
  }
LABEL_12:
  v36 = objc_msgSend(v23, sel_conferenceURLForDisplay);
  if (v36)
  {
    v37 = v36;
    sub_1C9E4573C();

    v38 = 0;
  }
  else
  {
    v38 = 1;
  }
  v23 = v57;
  v33(v6, v38, 1, v15);
  sub_1C9DE8DE4((uint64_t)v6, v14);
  sub_1C9DE8E2C((uint64_t)v10);
  v34 = (unsigned int (*)(char *, uint64_t, uint64_t))*((_QWORD *)v18 + 6);
LABEL_16:
  if (v34((char *)v14, 1, v15) != 1)
  {
    (*((void (**)(void *, unint64_t, uint64_t))v18 + 4))(v23, v14, v15);
    v39 = (void *)objc_opt_self();
    v40 = (void *)sub_1C9E45730();
    v59[0] = 0;
    v41 = objc_msgSend(v39, sel_appLinksWithURL_limit_error_, v40, 1, v59);

    v6 = (char *)v59[0];
    if (!v41)
    {
      v51 = v59[0];
      sub_1C9E45700();

      swift_willThrow();
      (*((void (**)(void *, uint64_t))v18 + 1))(v23, v15);
      return v6;
    }
    sub_1C9DE8EB0(0, &qword_1EF931220);
    v14 = sub_1C9E45D84();
    v42 = v6;

    if (!(v14 >> 62))
    {
      if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_21;
      goto LABEL_31;
    }
LABEL_30:
    swift_bridgeObjectRetain();
    v52 = sub_1C9E460A8();
    swift_bridgeObjectRelease();
    if (v52)
    {
LABEL_21:
      if ((v14 & 0xC000000000000001) != 0)
      {
        v43 = (id)MEMORY[0x1CAA47960](0, v14);
      }
      else
      {
        if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
          __break(1u);
        v43 = *(id *)(v14 + 32);
      }
      v44 = v43;
      swift_bridgeObjectRelease();
      v45 = objc_msgSend(v44, sel_targetApplicationRecord);

      v46 = objc_msgSend(v45, sel_bundleIdentifier);
      if (v46)
      {
        sub_1C9E45CF4();
        v48 = v47;

        v49 = (void *)sub_1C9E45730();
        if (v48)
        {
          v50 = (void *)sub_1C9E45CE8();
          swift_bridgeObjectRelease();
LABEL_34:
          v53 = objc_allocWithZone(MEMORY[0x1E0DC7C10]);
          v54 = (void *)sub_1C9E45CE8();
          v6 = (char *)objc_msgSend(v53, sel_initWithURL_bundleIdentifier_actionTitle_, v49, v50, v54);

          (*((void (**)(void *, uint64_t))v18 + 1))(v23, v15);
          return v6;
        }
LABEL_33:
        v50 = 0;
        goto LABEL_34;
      }
LABEL_32:
      v49 = (void *)sub_1C9E45730();
      goto LABEL_33;
    }
LABEL_31:
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  sub_1C9DE8E2C(v14);
  sub_1C9DE8E6C();
  swift_allocError();
  swift_willThrow();
  return v6;
}

uint64_t sub_1C9DE8DE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF931208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C9DE8E2C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF931208);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1C9DE8E6C()
{
  unint64_t result;

  result = qword_1EF931218;
  if (!qword_1EF931218)
  {
    result = MEMORY[0x1CAA492F8](&unk_1C9E8128C, &type metadata for JoinMeetingActionProducer.Error);
    atomic_store(result, (unint64_t *)&qword_1EF931218);
  }
  return result;
}

uint64_t sub_1C9DE8EB0(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1C9DE8EE8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_retain();
}

char *sub_1C9DE8EF4()
{
  uint64_t *v0;

  return sub_1C9DE87B4(*v0);
}

uint64_t sub_1C9DE8F0C(uint64_t a1, uint64_t a2)
{
  return sub_1C9E07FC8(a1, a2);
}

id sub_1C9DE8F20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void (*v26)(char *, char *, uint64_t);
  id v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  id result;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v2 = sub_1C9E4567C();
  v51 = *(_QWORD *)(v2 - 8);
  v52 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v50 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1C9E45808();
  MEMORY[0x1E0C80A78](v5, v6);
  v7 = sub_1C9E4570C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (uint64_t *)((char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_1C9E45CDC();
  MEMORY[0x1E0C80A78](v12, v13);
  v14 = sub_1C9E45718();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v48 - v21;
  v23 = a1 + OBJC_IVAR____TtC21AppPredictionInternal14MeetingContext_dependencies;
  v24 = *(void **)(v23 + *(int *)(type metadata accessor for MeetingContext.Dependencies(0) + 20));
  sub_1C9E45CD0();
  *v11 = type metadata accessor for ContextualEngine();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v8 + 104))(v11, *MEMORY[0x1E0CAF9C8], v7);
  sub_1C9E457FC();
  sub_1C9E45724();
  v25 = (void *)*MEMORY[0x1E0DC83C0];
  v53 = v15;
  v54 = v14;
  v26 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v49 = v22;
  v26(v18, v22, v14);
  v27 = v25;
  sub_1C9E45D00();
  v28 = objc_allocWithZone(MEMORY[0x1E0DC7DE0]);
  v29 = (void *)sub_1C9E45CE8();
  swift_bridgeObjectRelease();
  v30 = (void *)sub_1C9E45CE8();
  v31 = (void *)sub_1C9E45CE8();
  v32 = objc_msgSend(v28, sel_initWithIdentifier_name_symbolName_colorName_, v27, v29, v30, v31);

  result = objc_msgSend(v24, sel_UUID);
  if (result)
  {
    v34 = result;
    sub_1C9E45CF4();

    v35 = objc_msgSend(v24, sel_calendarItemIdentifier);
    sub_1C9E45CF4();

    result = objc_msgSend(v24, sel_title);
    if (result)
    {
      v36 = result;
      v37 = (void *)objc_opt_self();
      v38 = sub_1C9E45CF4();
      v40 = v39;

      v55 = v38;
      v56 = v40;
      v41 = v50;
      sub_1C9E45670();
      sub_1C9DE93C8();
      sub_1C9E45F34();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v41, v52);
      swift_bridgeObjectRelease();
      v42 = objc_allocWithZone(MEMORY[0x1E0DC7A50]);
      v43 = (void *)sub_1C9E45CE8();
      swift_bridgeObjectRelease();
      v44 = (void *)sub_1C9E45CE8();
      swift_bridgeObjectRelease();
      v45 = (void *)sub_1C9E45CE8();
      swift_bridgeObjectRelease();
      v46 = objc_msgSend(v42, sel_initWithEventIdentifier_uniqueIdentifier_title_, v43, v44, v45);

      v47 = objc_msgSend(v37, sel_turnOn_untilEventEnds_, v32, v46);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v49, v54);
      return v47;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1C9DE93C8()
{
  unint64_t result;

  result = qword_1EF931228;
  if (!qword_1EF931228)
  {
    result = MEMORY[0x1CAA492F8](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EF931228);
  }
  return result;
}

unint64_t sub_1C9DE9410()
{
  unint64_t result;

  result = qword_1EF931230;
  if (!qword_1EF931230)
  {
    result = MEMORY[0x1CAA492F8](&unk_1C9E811DC, &type metadata for JoinMeetingActionProducer.Error);
    atomic_store(result, (unint64_t *)&qword_1EF931230);
  }
  return result;
}

unint64_t sub_1C9DE945C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF931238;
  if (!qword_1EF931238)
  {
    v1 = type metadata accessor for MeetingContext(255);
    result = MEMORY[0x1CAA492F8](&unk_1C9E82060, v1);
    atomic_store(result, (unint64_t *)&qword_1EF931238);
  }
  return result;
}

id sub_1C9DE94A4()
{
  uint64_t *v0;

  return sub_1C9DE8F20(*v0);
}

ValueMetadata *type metadata accessor for JoinMeetingActionProducer()
{
  return &type metadata for JoinMeetingActionProducer;
}

uint64_t getEnumTagSinglePayload for JoinMeetingActionProducer.Error(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for JoinMeetingActionProducer.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1C9DE9574 + 4 * asc_1C9E811D0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1C9DE9594 + 4 * byte_1C9E811D5[v4]))();
}

_BYTE *sub_1C9DE9574(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1C9DE9594(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C9DE959C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C9DE95A4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C9DE95AC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C9DE95B4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for JoinMeetingActionProducer.Error()
{
  return &type metadata for JoinMeetingActionProducer.Error;
}

ValueMetadata *type metadata accessor for DoNotDisturbActionProducer()
{
  return &type metadata for DoNotDisturbActionProducer;
}

void sub_1C9DE95E8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  id v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  id v25[2];

  v25[1] = *(id *)MEMORY[0x1E0C80C00];
  v4 = sub_1C9E45BF8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  v9 = (void *)sub_1C9E45CE8();
  swift_bridgeObjectRelease();
  v10 = (void *)objc_opt_self();
  v25[0] = 0;
  v11 = objc_msgSend(v10, sel_extensionWithIdentifier_error_, v9, v25);

  if (v11)
  {
    v12 = v25[0];
    v13 = objc_msgSend(v11, sel__plugIn);
    if ((a3 & 1) != 0)
    {
      if (v13)
      {
        objc_msgSend(v13, sel_setUserElection_, 0);
LABEL_9:
        swift_unknownObjectRelease();

        return;
      }
      __break(1u);
    }
    else if (v13)
    {
      objc_msgSend(v13, sel_setUserElection_, 2);
      goto LABEL_9;
    }
    __break(1u);
  }
  else
  {
    v14 = v25[0];
    v15 = (void *)sub_1C9E45700();

    swift_willThrow();
    sub_1C9E45BEC();
    v16 = v15;
    v17 = v15;
    v18 = sub_1C9E45BD4();
    v19 = sub_1C9E45E2C();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v24 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v20 = 138412290;
      v21 = v15;
      v22 = (void *)_swift_stdlib_bridgeErrorToNSError();
      v25[0] = v22;
      sub_1C9E45F1C();
      v23 = v24;
      *v24 = v22;

      _os_log_impl(&dword_1C9A3B000, v18, v19, "Could not find extension: %@", v20, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84EED0);
      swift_arrayDestroy();
      MEMORY[0x1CAA493AC](v23, -1, -1);
      MEMORY[0x1CAA493AC](v20, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

uint64_t sub_1C9DE98D8(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

id ATXPlugInManager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id ATXPlugInManager.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id ATXPlugInManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t _s21AppPredictionInternal16ATXPlugInManagerC07setPlugE04name9isEnabledySS_SbtFZ_0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  _BYTE v22[12];
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[6];

  v23 = a3;
  v5 = sub_1C9E45C28();
  v26 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_1C9E45C4C();
  v24 = *(_QWORD *)(v9 - 8);
  v25 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = &v22[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_1C9E45C34();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = &v22[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1C9DE9C64();
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v14 + 104))(v17, *MEMORY[0x1E0DEF520], v13);
  v18 = (void *)sub_1C9E45E8C();
  (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v17, v13);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = a2;
  *(_BYTE *)(v19 + 32) = v23;
  aBlock[4] = sub_1C9DE9CC4;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1C9DE98D8;
  aBlock[3] = &block_descriptor;
  v20 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  sub_1C9E45C40();
  v27 = MEMORY[0x1E0DEE9D8];
  sub_1C9DE9CE8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F040);
  sub_1C9DE9D30();
  sub_1C9E45F4C();
  MEMORY[0x1CAA477D4](0, v12, v8, v20);
  _Block_release(v20);

  (*(void (**)(_BYTE *, uint64_t))(v26 + 8))(v8, v5);
  (*(void (**)(_BYTE *, uint64_t))(v24 + 8))(v12, v25);
  return swift_release();
}

uint64_t type metadata accessor for ATXPlugInManager()
{
  return objc_opt_self();
}

unint64_t sub_1C9DE9C64()
{
  unint64_t result;

  result = qword_1ED84EFD0;
  if (!qword_1ED84EFD0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED84EFD0);
  }
  return result;
}

uint64_t sub_1C9DE9CA0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1C9DE9CC4()
{
  uint64_t v0;

  sub_1C9DE95E8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

unint64_t sub_1C9DE9CE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED84F030;
  if (!qword_1ED84F030)
  {
    v1 = sub_1C9E45C28();
    result = MEMORY[0x1CAA492F8](MEMORY[0x1E0DEF510], v1);
    atomic_store(result, (unint64_t *)&qword_1ED84F030);
  }
  return result;
}

unint64_t sub_1C9DE9D30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED84F048;
  if (!qword_1ED84F048)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1ED84F040);
    result = MEMORY[0x1CAA492F8](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ED84F048);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1CAA492EC](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void *sub_1C9DE9DC0()
{
  return &unk_1C9E813E0;
}

double sub_1C9DE9DCC()
{
  return 55.0;
}

uint64_t sub_1C9DE9DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  _QWORD v7[5];

  sub_1C9DE9E88(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9312A0);
  if (!swift_dynamicCast())
    return 0;
  v5 = (void *)MEMORY[0x1CAA4868C]();
  sub_1C9DE9ECC(a2, a3, (uint64_t)v7);
  objc_autoreleasePoolPop(v5);
  swift_bridgeObjectRelease();
  return v7[0];
}

uint64_t sub_1C9DE9E88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_1C9DE9ECC(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  _QWORD v43[2];

  v43[0] = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F028);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v43 - v11;
  v13 = sub_1C9DE7714();
  sub_1C9DEA354(a1, (uint64_t)v12);
  sub_1C9DEA354(a2, (uint64_t)v8);
  v14 = objc_allocWithZone(MEMORY[0x1E0CF8C28]);
  v15 = sub_1C9DEA39C((uint64_t)v12, (uint64_t)v8, 0, 0);
  v16 = objc_msgSend(v13, sel_query);
  sub_1C9E45CF4();

  v17 = objc_msgSend(v13, sel_identifier);
  sub_1C9E45CF4();

  v18 = objc_allocWithZone(MEMORY[0x1E0CF9108]);
  v19 = v15;
  v20 = (void *)sub_1C9E45CE8();
  swift_bridgeObjectRelease();
  v21 = (void *)sub_1C9E45CE8();
  swift_bridgeObjectRelease();
  v22 = objc_msgSend(v18, sel_initWithSportsTeamName_qid_criteria_, v20, v21, v19);

  v23 = objc_msgSend((id)objc_opt_self(), sel_clientModelIdFromClientModelType_, 44);
  sub_1C9E45CF4();

  v24 = objc_allocWithZone(MEMORY[0x1E0D811A0]);
  v25 = (void *)sub_1C9E45CE8();
  swift_bridgeObjectRelease();
  v26 = (void *)sub_1C9E45CE8();
  v27 = objc_msgSend(v24, sel_initWithClientModelId_clientModelVersion_, v25, v26);

  v28 = objc_msgSend(v22, sel_actionDescription);
  sub_1C9E45CF4();

  v29 = objc_msgSend(v22, sel_actionIdentifier);
  sub_1C9E45CF4();

  v30 = objc_allocWithZone(MEMORY[0x1E0D811A8]);
  v31 = v22;
  v32 = (void *)sub_1C9E45CE8();
  swift_bridgeObjectRelease();
  v33 = (void *)sub_1C9E45CE8();
  swift_bridgeObjectRelease();
  v34 = objc_msgSend(v30, sel_initWithExecutableObject_executableDescription_executableIdentifier_suggestionExecutableType_, v31, v32, v33, 8);

  v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D811C0]), sel_initWithRawScore_suggestedConfidenceCategory_, 4, 55.0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF931200);
  v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_1C9E813D0;
  *(_QWORD *)(v36 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D811B8]), sel_initWithApplicableSuggestionLayout_, 5);
  v43[1] = v36;
  sub_1C9E45D90();
  v37 = objc_allocWithZone(MEMORY[0x1E0D811D0]);
  sub_1C9DEA4A0();
  v38 = (void *)sub_1C9E45D78();
  swift_bridgeObjectRelease();
  LOWORD(v42) = 1;
  v39 = objc_msgSend(v37, sel_initWithTitle_subtitle_predictionReason_preferredLayoutConfigs_allowedOnLockscreen_allowedOnHomeScreen_allowedOnSpotlight_shouldClearOnEngagement_predictionReasons_, 0, 0, 0, v38, 0, 0, v42, 0x40000000000);

  if (v34)
  {
    v40 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D81190]), sel_initWithClientModelSpecification_executableSpecification_uiSpecification_scoreSpecification_, v27, v34, v39, v35);
    if (v40)
    {
      v41 = v40;

      *(_QWORD *)v43[0] = v41;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1C9DEA354(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F028);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_1C9DEA39C(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  void *v4;
  void *v5;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  void *v13;
  void *v14;
  id v15;

  v5 = v4;
  v10 = sub_1C9E457CC();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v13 = 0;
  if (v12(a1, 1, v10) != 1)
  {
    v13 = (void *)sub_1C9E45784();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  }
  if (v12(a2, 1, v10) == 1)
  {
    v14 = 0;
  }
  else
  {
    v14 = (void *)sub_1C9E45784();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a2, v10);
  }
  v15 = objc_msgSend(v5, sel_initWithStartDate_endDate_lockScreenEligible_predicate_, v13, v14, a3 & 1, a4);

  return v15;
}

unint64_t sub_1C9DEA4A0()
{
  unint64_t result;

  result = qword_1EF9312A8;
  if (!qword_1EF9312A8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF9312A8);
  }
  return result;
}

uint64_t (*sub_1C9DEA4DC())()
{
  return nullsub_1;
}

uint64_t sub_1C9DEA4E8()
{
  return swift_allocObject();
}

uint64_t sub_1C9DEA4F8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1C9DEA500()
{
  type metadata accessor for BlendingContext();
  sub_1C9DEA670((unint64_t *)&unk_1EF931BA0, (uint64_t)&unk_1C9E813F0);
  return sub_1C9DEB01C();
}

uint64_t type metadata accessor for BlendingContext()
{
  return objc_opt_self();
}

uint64_t sub_1C9DEA55C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t sub_1C9DEA580()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1C9DEA590()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_1C9DEA598()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))();
}

uint64_t sub_1C9DEA5C0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 136))() & 1;
}

uint64_t sub_1C9DEA5EC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

uint64_t sub_1C9DEA614@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 112))();
  *a1 = result;
  return result;
}

uint64_t sub_1C9DEA63C(uint64_t a1)
{
  uint64_t result;

  result = sub_1C9DEA670(&qword_1EF9312F8, (uint64_t)&unk_1C9E8140C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C9DEA670(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for BlendingContext();
    result = MEMORY[0x1CAA492F8](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C9DEA6AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for BlendingContext();
  sub_1C9DEA670((unint64_t *)&unk_1EF931BA0, (uint64_t)&unk_1C9E813F0);
  result = sub_1C9DEB048();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1C9DEA6FC()
{
  type metadata accessor for LocationOfInterestContext();
  sub_1C9DEAEE8(qword_1EF9313D8, (uint64_t)&unk_1C9E81490);
  return sub_1C9DEB01C();
}

uint64_t type metadata accessor for LocationOfInterestContext()
{
  return objc_opt_self();
}

void *sub_1C9DEA758()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

void sub_1C9DEA798(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;

}

uint64_t sub_1C9DEA7DC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 136))();
}

uint64_t sub_1C9DEA804()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))() & 1;
}

uint64_t sub_1C9DEA830@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 96))();
  *a1 = result;
  return result;
}

uint64_t sub_1C9DEA860@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for LocationOfInterestContext();
  sub_1C9DEAEE8(qword_1EF9313D8, (uint64_t)&unk_1C9E81490);
  result = sub_1C9DEB048();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1C9DEA8B0()
{
  uint64_t v0;
  uint64_t result;

  sub_1C9DEAD68();
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C9E81480;
  *(_QWORD *)(v0 + 32) = type metadata accessor for LocationOfInterestContextStore.HomeContext();
  *(_QWORD *)(v0 + 40) = type metadata accessor for LocationOfInterestContextStore.WorkContext();
  *(_QWORD *)(v0 + 48) = type metadata accessor for LocationOfInterestContextStore.GymContext();
  *(_QWORD *)(v0 + 56) = type metadata accessor for LocationOfInterestContextStore.SchoolContext();
  result = type metadata accessor for LocationOfInterestContextStore.AwayContext();
  *(_QWORD *)(v0 + 64) = result;
  qword_1EF9350F8 = v0;
  return result;
}

uint64_t *sub_1C9DEA928()
{
  if (qword_1EF933DC0 != -1)
    swift_once();
  return &qword_1EF9350F8;
}

uint64_t sub_1C9DEA968()
{
  if (qword_1EF933DC0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t (*sub_1C9DEA9A8())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1C9DEA9E4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 24) = a1;
  v3 = qword_1EF933DC0;
  v4 = a1;
  if (v3 != -1)
    swift_once();
  v5 = v4;
  v6 = swift_bridgeObjectRetain();
  v7 = sub_1C9DEADB4(v6, (uint64_t)a1);
  swift_bridgeObjectRelease();

  *(_QWORD *)(v2 + 16) = v7;
  return v2;
}

uint64_t sub_1C9DEAAA8(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v1 + 24) = a1;
  v3 = qword_1EF933DC0;
  v4 = a1;
  if (v3 != -1)
    swift_once();
  v5 = v4;
  v6 = swift_bridgeObjectRetain();
  v7 = sub_1C9DEADB4(v6, (uint64_t)a1);
  swift_bridgeObjectRelease();

  *(_QWORD *)(v1 + 16) = v7;
  return v1;
}

uint64_t sub_1C9DEAB54()
{
  return 0x656D6F68207441;
}

void *sub_1C9DEAB6C()
{
  uint64_t v0;
  void *result;
  void *v2;
  id v3;

  result = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(result, sel_type);

    return (void *)(v3 == 0);
  }
  return result;
}

uint64_t sub_1C9DEABB4()
{
  return 0x6B726F77207441;
}

void *sub_1C9DEABCC()
{
  uint64_t v0;
  void *result;
  void *v2;
  id v3;

  result = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(result, sel_type);

    return (void *)(v3 == (id)1);
  }
  return result;
}

uint64_t sub_1C9DEAC14()
{
  return 0x6720656874207441;
}

void *sub_1C9DEAC30()
{
  uint64_t v0;
  void *result;
  void *v2;
  id v3;

  result = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(result, sel_type);

    return (void *)(v3 == (id)3);
  }
  return result;
}

uint64_t sub_1C9DEAC78()
{
  return 0x6F6F686373207441;
}

void *sub_1C9DEAC94()
{
  uint64_t v0;
  void *result;
  void *v2;
  id v3;

  result = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(result, sel_type);

    return (void *)(v3 == (id)2);
  }
  return result;
}

uint64_t sub_1C9DEACDC()
{
  return 0x6F72662079617741;
}

uint64_t sub_1C9DEAD00()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  void *v2;
  uint64_t result;
  void *v4;
  id v5;

  v1 = *(uint64_t (**)(void))(*(_QWORD *)v0 + 96);
  v2 = (void *)v1();

  if (!v2)
    return 1;
  result = v1();
  if (result)
  {
    v4 = (void *)result;
    v5 = objc_msgSend((id)result, sel_type);

    return v5 == (id)-1;
  }
  return result;
}

uint64_t sub_1C9DEAD68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9319F8);
  if (swift_isClassType())
    v1 = v0;
  else
    v1 = 0;
  if (v1)
    v2 = (uint64_t *)&unk_1EF931200;
  else
    v2 = (uint64_t *)&unk_1EF931A00;
  return __swift_instantiateConcreteTypeFromMangledName(v2);
}

uint64_t sub_1C9DEADB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    sub_1C9E46048();
    v6 = (uint64_t *)(a1 + 32);
    v7 = type metadata accessor for LocationOfInterestContext();
    v8 = sub_1C9DEAEE8(qword_1EF9313D8, (uint64_t)&unk_1C9E81490);
    do
    {
      v9 = *v6++;
      v10 = a2;
      sub_1C9DEB11C(v9, (uint64_t)&v10, v7, v7, v8, v8);
      sub_1C9E46030();
      sub_1C9E46054();
      sub_1C9E46060();
      sub_1C9E4603C();
      --v3;
    }
    while (v3);
    return v11;
  }
  return result;
}

uint64_t sub_1C9DEAEB4(uint64_t a1)
{
  uint64_t result;

  result = sub_1C9DEAEE8(qword_1EF931428, (uint64_t)&unk_1C9E814AC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C9DEAEE8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for LocationOfInterestContext();
    result = MEMORY[0x1CAA492F8](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C9DEAF24()
{
  return sub_1C9DEAEE8(qword_1EF9313D8, (uint64_t)&unk_1C9E81490);
}

ValueMetadata *type metadata accessor for LocationOfInterestContextDependencies()
{
  return &type metadata for LocationOfInterestContextDependencies;
}

uint64_t type metadata accessor for LocationOfInterestContextStore()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for LocationOfInterestContextStore.HomeContext()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for LocationOfInterestContextStore.WorkContext()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for LocationOfInterestContextStore.GymContext()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for LocationOfInterestContextStore.SchoolContext()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for LocationOfInterestContextStore.AwayContext()
{
  return objc_opt_self();
}

uint64_t sub_1C9DEB01C()
{
  swift_getMetatypeMetadata();
  return sub_1C9E45D0C();
}

uint64_t sub_1C9DEB048()
{
  swift_getDynamicType();
  swift_getMetatypeMetadata();
  return sub_1C9E45D0C();
}

uint64_t sub_1C9DEB094(uint64_t a1, uint64_t a2)
{
  id v4;

  sub_1C9E45FF4();
  (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  v4 = objc_allocWithZone((Class)sub_1C9E45B14());
  return sub_1C9E45AFC();
}

uint64_t sub_1C9DEB11C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v13 = (char *)&v16 - v12;
  (*(void (**)(char *, uint64_t, double))(v14 + 16))((char *)&v16 - v12, a2, v11);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a6 + 64))(v13, a4, a6);
}

uint64_t sub_1C9DEB1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(void))(a2 + 24))();
  swift_getAssociatedTypeWitness();
  v2 = sub_1C9E45DC0();
  MEMORY[0x1CAA492F8](MEMORY[0x1E0DEAF60], v2);
  sub_1C9E46024();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF931BB0);
  v3 = sub_1C9E4606C();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1C9DEB2A0()
{
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v1 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
  v2 = swift_checkMetadataState();
  return v1(v2, AssociatedConformanceWitness) & 1;
}

uint64_t sub_1C9DEB340(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_1C9DEB348(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_1C9DEB350(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_1C9DEB358(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t sub_1C9DEB360(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t sub_1C9DEB368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

id sub_1C9DEB370(void *a1)
{
  void *v1;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  id result;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  id v13;
  uint64_t v14;

  ObjectType = swift_getObjectType();
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84F090);
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(a1, sel_setContinue, v6);
  if ((_DWORD)result)
  {
    v10 = sub_1C9E45DE4();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 1, 1, v10);
    v11 = (_QWORD *)swift_allocObject();
    v11[2] = 0;
    v11[3] = 0;
    v11[4] = a1;
    v11[5] = v1;
    v11[6] = ObjectType;
    v12 = a1;
    v13 = v1;
    sub_1C9DEBF40((uint64_t)v8, (uint64_t)&unk_1EF931A10, (uint64_t)v11);
    return (id)swift_release();
  }
  return result;
}

uint64_t sub_1C9DEB460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[8] = a5;
  v6[9] = a6;
  v6[7] = a4;
  v7 = sub_1C9E45AF0();
  v6[10] = v7;
  v6[11] = *(_QWORD *)(v7 - 8);
  v6[12] = swift_task_alloc();
  v8 = sub_1C9E45B44();
  v6[13] = v8;
  v6[14] = *(_QWORD *)(v8 - 8);
  v6[15] = swift_task_alloc();
  v9 = sub_1C9E45B2C();
  v6[16] = v9;
  v6[17] = *(_QWORD *)(v9 - 8);
  v6[18] = swift_task_alloc();
  v10 = sub_1C9E45BF8();
  v6[19] = v10;
  v6[20] = *(_QWORD *)(v10 - 8);
  v6[21] = swift_task_alloc();
  v6[22] = swift_task_alloc();
  v6[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1C9DEB558()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  sub_1C9E45B68();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D144C0];
  *(_QWORD *)(v0 + 192) = sub_1C9E45B5C();
  sub_1C9DF09DC((unint64_t *)&unk_1ED84ED18, v1, MEMORY[0x1E0D144C8]);
  sub_1C9E45DCC();
  return swift_task_switch();
}

uint64_t sub_1C9DEB5E4()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 200) = sub_1C9E45B50();
  *(_QWORD *)(v0 + 208) = 0;
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1C9DEB648()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  char **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, unint64_t, uint64_t);
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, unint64_t, uint64_t);
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v1 = *(_QWORD *)(v0 + 200);
  if (!v1)
  {
    sub_1C9E45BC8();
    v10 = sub_1C9E45BD4();
    v11 = sub_1C9E45E2C();
    v12 = os_log_type_enabled(v10, v11);
    v13 = *(_QWORD *)(v0 + 184);
    v15 = *(_QWORD *)(v0 + 152);
    v14 = *(_QWORD *)(v0 + 160);
    if (v12)
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v53 = v17;
      *(_DWORD *)v16 = 136315138;
      v18 = sub_1C9E46228();
      *(_QWORD *)(v0 + 32) = sub_1C9DEDEE0(v18, v19, &v53);
      sub_1C9E45F1C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C9A3B000, v10, v11, "%s: not collecting ambient metrics, no stack config cache", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CAA493AC](v17, -1, -1);
      MEMORY[0x1CAA493AC](v16, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    }
    goto LABEL_24;
  }
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = sub_1C9E460A8();
    swift_bridgeObjectRelease();
    if (v2 == 2)
      goto LABEL_4;
    goto LABEL_21;
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v2 != 2)
  {
LABEL_21:
    sub_1C9E45BC8();
    swift_bridgeObjectRetain();
    v40 = sub_1C9E45BD4();
    v41 = sub_1C9E45E2C();
    v42 = os_log_type_enabled(v40, v41);
    v43 = *(_QWORD *)(v0 + 176);
    v44 = *(_QWORD *)(v0 + 152);
    v45 = *(_QWORD *)(v0 + 160);
    if (v42)
    {
      v51 = v0 + 48;
      v52 = *(_QWORD *)(v0 + 160);
      v46 = swift_slowAlloc();
      v47 = swift_slowAlloc();
      v53 = v47;
      *(_DWORD *)v46 = 136315394;
      v48 = sub_1C9E46228();
      *(_QWORD *)(v0 + 40) = sub_1C9DEDEE0(v48, v49, &v53);
      sub_1C9E45F1C();
      swift_bridgeObjectRelease();
      *(_WORD *)(v46 + 12) = 2048;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 48) = v2;
      sub_1C9E45F1C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C9A3B000, v40, v41, "%s: not collecting ambient metrics, number of stacks: %ld, should be 2", (uint8_t *)v46, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1CAA493AC](v47, -1, -1);
      MEMORY[0x1CAA493AC](v46, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v43, v44);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
    }
LABEL_24:
    v9 = *(void **)(v0 + 56);
    goto LABEL_25;
  }
LABEL_4:
  v3 = &selRef_setSuggestionType_;
  if (!objc_msgSend(*(id *)(v0 + 56), sel_shouldDefer))
  {
    v5 = *(_QWORD *)(v0 + 136);
    v4 = *(_QWORD *)(v0 + 144);
    v6 = *(_QWORD *)(v0 + 128);
    v7 = *(void **)(v0 + 56);
    v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    (*(void (**)(unint64_t))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 64)) + 0x58))(v1);
    sub_1C9DF09DC(&qword_1ED84EF98, (uint64_t (*)(uint64_t))MEMORY[0x1E0D14488], MEMORY[0x1E0D14480]);
    sub_1C9E45AD8();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    if (!objc_msgSend(v7, sel_shouldDefer))
    {
      v20 = (*(uint64_t (**)(unint64_t))((*v8 & **(_QWORD **)(v0 + 64)) + 0x60))(v1);
      swift_bridgeObjectRelease();
      v21 = *(_QWORD *)(v20 + 16);
      if (v21)
      {
        v22 = *(_QWORD *)(v0 + 112);
        v23 = v20 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
        v24 = *(_QWORD *)(v22 + 72);
        v25 = *(void (**)(uint64_t, unint64_t, uint64_t))(v22 + 16);
        v26 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D144A0];
        v27 = MEMORY[0x1E0D14498];
        do
        {
          v28 = *(_QWORD *)(v0 + 120);
          v29 = *(_QWORD *)(v0 + 104);
          v25(v28, v23, v29);
          sub_1C9DF09DC(&qword_1ED84EFA0, v26, v27);
          sub_1C9E45AD8();
          (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v28, v29);
          v23 += v24;
          --v21;
        }
        while (v21);
        swift_bridgeObjectRelease();
        v3 = &selRef_setSuggestionType_;
        v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      if (!objc_msgSend(*(id *)(v0 + 56), v3[232]))
      {
        v30 = (*(uint64_t (**)(void))((*v8 & **(_QWORD **)(v0 + 64)) + 0x70))();
        v31 = *(_QWORD *)(v30 + 16);
        if (v31)
        {
          v32 = *(_QWORD *)(v0 + 88);
          v33 = v30 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80));
          v34 = *(_QWORD *)(v32 + 72);
          v35 = *(void (**)(uint64_t, unint64_t, uint64_t))(v32 + 16);
          v36 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D14448];
          v37 = MEMORY[0x1E0D14440];
          do
          {
            v38 = *(_QWORD *)(v0 + 96);
            v39 = *(_QWORD *)(v0 + 80);
            v35(v38, v33, v39);
            sub_1C9DF09DC(&qword_1EF931A58, v36, v37);
            sub_1C9E45AD8();
            (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v38, v39);
            v33 += v34;
            --v31;
          }
          while (v31);
        }
        swift_bridgeObjectRelease();
      }
      goto LABEL_24;
    }
  }
  v9 = *(void **)(v0 + 56);
  swift_bridgeObjectRelease();
LABEL_25:
  objc_msgSend(v9, sel_setDone, v51);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1C9DEBC28()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = v0;
  v2 = (void *)v0[26];
  swift_release();
  sub_1C9E45BC8();
  v3 = v2;
  v4 = v2;
  v5 = sub_1C9E45BD4();
  v6 = sub_1C9E45E2C();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (void *)v0[26];
    v20 = v0[20];
    v21 = v0[19];
    v22 = v0[21];
    v8 = swift_slowAlloc();
    v9 = (_QWORD *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v23 = v19;
    *(_DWORD *)v8 = 136315394;
    v10 = sub_1C9E46228();
    v0[2] = sub_1C9DEDEE0(v10, v11, &v23);
    sub_1C9E45F1C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2112;
    v12 = v7;
    v13 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v13;
    sub_1C9E45F1C();
    *v9 = v13;

    _os_log_impl(&dword_1C9A3B000, v5, v6, "%s: could not read ambient stacks: %@", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84EED0);
    swift_arrayDestroy();
    MEMORY[0x1CAA493AC](v9, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1CAA493AC](v19, -1, -1);
    MEMORY[0x1CAA493AC](v8, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v21);
  }
  else
  {
    v14 = (void *)v0[26];
    v16 = v1[20];
    v15 = v1[21];
    v17 = v1[19];

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }
  objc_msgSend((id)v1[7], sel_setDone);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(void))v1[1])();
}

uint64_t sub_1C9DEBEE0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[6];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1C9DF0A2C;
  return sub_1C9DEB460((uint64_t)v5, v6, v7, v2, v3, v4);
}

uint64_t sub_1C9DEBF40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1C9E45DE4();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1C9E45DD8();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1C9DF090C(a1, (uint64_t *)&unk_1ED84F090);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1C9E45DCC();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

void sub_1C9DEC1C4(unint64_t a1)
{
  char **v1;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  unint64_t v10;
  id v11;
  unint64_t v12;
  id v13;
  id v14;
  id v15;
  unint64_t v16;
  id v17;

  sub_1C9E45B8C();
  v3 = (void *)sub_1C9E45CE8();
  swift_bridgeObjectRelease();
  _ATXDomainGetBool(v3);

  if (!(a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_34:
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  swift_bridgeObjectRetain();
  v4 = sub_1C9E460A8();
  if (!v4)
    goto LABEL_34;
LABEL_3:
  v5 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v6 = (id)MEMORY[0x1CAA47960](0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_38:
      swift_bridgeObjectRetain();
      sub_1C9E460A8();
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    v6 = *(id *)(a1 + 32);
  }
  v7 = v6;
  swift_bridgeObjectRelease();
  v1 = &selRef_addNotificationsSignalsForIdentifier_toContactSpecificFeatures_;
  objc_msgSend(v7, sel_allowsSmartRotate);

  if (v5)
  {
    swift_bridgeObjectRetain();
    v8 = (id)MEMORY[0x1CAA47960](0, a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_42;
    }
    v8 = *(id *)(a1 + 32);
  }
  v9 = objc_msgSend(v8, sel_widgets);

  sub_1C9DE8EB0(0, &qword_1ED84EFB0);
  v10 = sub_1C9E45D84();

  if (v10 >> 62)
    goto LABEL_38;
LABEL_11:
  swift_bridgeObjectRelease();
  if (v5)
  {
    swift_bridgeObjectRetain();
    v11 = (id)MEMORY[0x1CAA47960](0, a1);
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v11 = *(id *)(a1 + 32);
LABEL_15:
  objc_msgSend(v11, sel_allowsNewWidget);

  v12 = v4 - 1;
  if (!__OFSUB__(v4, 1))
  {
    if (v5)
    {
      swift_bridgeObjectRetain();
      v13 = (id)MEMORY[0x1CAA47960](v4 - 1, a1);
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    if ((v12 & 0x8000000000000000) == 0)
    {
      if (v12 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v13 = *(id *)(a1 + 8 * v12 + 32);
LABEL_21:
        objc_msgSend(v13, v1[105]);

        if (v5)
        {
          swift_bridgeObjectRetain();
          v14 = (id)MEMORY[0x1CAA47960](v12, a1);
          swift_bridgeObjectRelease();
          goto LABEL_26;
        }
        if ((v12 & 0x8000000000000000) == 0)
        {
          if (v12 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v14 = *(id *)(a1 + 8 * v12 + 32);
LABEL_26:
            v15 = objc_msgSend(v14, sel_widgets);

            v16 = sub_1C9E45D84();
            if (!(v16 >> 62))
              goto LABEL_27;
            goto LABEL_40;
          }
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  __break(1u);
LABEL_40:
  swift_bridgeObjectRetain();
  sub_1C9E460A8();
  swift_bridgeObjectRelease();
LABEL_27:
  swift_bridgeObjectRelease();
  if (v5)
  {
    swift_bridgeObjectRetain();
    v17 = (id)MEMORY[0x1CAA47960](v12, a1);
    swift_bridgeObjectRelease();
LABEL_32:
    objc_msgSend(v17, sel_allowsNewWidget);

LABEL_35:
    sub_1C9E45B20();
    return;
  }
  if ((v12 & 0x8000000000000000) != 0)
    goto LABEL_47;
  if (v12 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v17 = *(id *)(a1 + 8 * v12 + 32);
    goto LABEL_32;
  }
LABEL_48:
  __break(1u);
}

BOOL _ATXDomainGetBool(void *a1)
{
  __CFString *v1;
  _BOOL8 v2;
  Boolean keyExistsAndHasValidFormat;

  v1 = a1;
  keyExistsAndHasValidFormat = 0;
  v2 = CFPreferencesGetAppBooleanValue(v1, (CFStringRef)*MEMORY[0x1E0CF9510], &keyExistsAndHasValidFormat) != 0;

  return v2;
}

unint64_t sub_1C9DEC658(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  BOOL v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  id v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;

  v2 = sub_1C9E45B44();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (unint64_t)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v49 = (char *)&v35 - v9;
  if (a1 >> 62)
    goto LABEL_31;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v10; v10 = sub_1C9E460A8())
  {
    v11 = 0;
    v40 = a1 & 0xC000000000000001;
    v37 = a1 & 0xFFFFFFFFFFFFFF8;
    v38 = a1;
    v36 = (char *)(a1 + 32);
    v12 = MEMORY[0x1E0DEE9D8];
    v43 = v6;
    v39 = v10;
    while (1)
    {
      if (v40)
      {
        v13 = (id)MEMORY[0x1CAA47960](v11, v38);
      }
      else
      {
        if (v11 >= *(_QWORD *)(v37 + 16))
          goto LABEL_30;
        v13 = *(id *)&v36[8 * v11];
      }
      a1 = (unint64_t)v13;
      v14 = __OFADD__(v11, 1);
      v15 = v11 + 1;
      if (v14)
        break;
      v16 = objc_msgSend(v13, sel_widgets);
      sub_1C9DE8EB0(0, &qword_1ED84EFB0);
      v6 = sub_1C9E45D84();

      if (v6 >> 62)
      {
        swift_bridgeObjectRetain();
        v17 = sub_1C9E460A8();
        swift_bridgeObjectRelease();
        v41 = (id)a1;
        v42 = v15;
        if (!v17)
          goto LABEL_4;
      }
      else
      {
        v17 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
        v41 = (id)a1;
        v42 = v15;
        if (!v17)
          goto LABEL_4;
      }
      if (v17 < 1)
        goto LABEL_29;
      v18 = 0;
      v44 = v6 & 0xC000000000000001;
      v45 = v17;
      v46 = v6;
      do
      {
        v48 = v12;
        if (v44)
          v19 = (id)MEMORY[0x1CAA47960](v18, v6);
        else
          v19 = *(id *)(v6 + 8 * v18 + 32);
        v20 = v19;
        v21 = objc_msgSend(v19, sel_chsWidget);
        v22 = objc_msgSend(v21, sel_extensionIdentity);

        swift_beginAccess();
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84EF90);
        v47 = sub_1C9E458E0();
        swift_endAccess();

        v23 = objc_msgSend(v20, sel_chsWidget);
        v24 = objc_msgSend(v23, sel_kind);

        sub_1C9E45CF4();
        v25 = objc_msgSend(v20, sel_chsWidget);
        v26 = objc_msgSend(v25, sel_intentReference);

        if (v26)
        {
          v27 = objc_msgSend(v26, sel_intent);

          v28 = v3;
          v29 = v2;
          v30 = objc_msgSend(v27, sel__className);

          sub_1C9E45CF4();
          v2 = v29;
          v3 = v28;
        }
        v31 = v49;
        sub_1C9E45B38();
        v32 = v43;
        (*(void (**)(unint64_t, char *, uint64_t))(v3 + 16))(v43, v31, v2);
        v12 = v48;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v12 = sub_1C9DEDCD8(0, *(_QWORD *)(v12 + 16) + 1, 1, v12);
        a1 = *(_QWORD *)(v12 + 16);
        v33 = *(_QWORD *)(v12 + 24);
        if (a1 >= v33 >> 1)
          v12 = sub_1C9DEDCD8(v33 > 1, a1 + 1, 1, v12);
        ++v18;
        *(_QWORD *)(v12 + 16) = a1 + 1;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v3 + 32))(v12+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * a1, v32, v2);

        (*(void (**)(char *, uint64_t))(v3 + 8))(v49, v2);
        v6 = v46;
      }
      while (v45 != v18);
LABEL_4:

      swift_bridgeObjectRelease();
      v11 = v42;
      if (v42 == v39)
      {
        swift_bridgeObjectRelease();
        return v12;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1C9DECB24(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1C9DECB2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  return a3;
}

uint64_t sub_1C9DECB5C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6;

  v6 = a2;
  sub_1C9E45EF8();

  sub_1C9E461BC();
  if (!a5)
    return sub_1C9E461C8();
  sub_1C9E461C8();
  swift_bridgeObjectRetain();
  sub_1C9E45D3C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C9DECC04(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;

  sub_1C9E461B0();
  v6 = a1;
  sub_1C9E45EF8();

  sub_1C9E461BC();
  sub_1C9E461C8();
  if (a4)
  {
    swift_bridgeObjectRetain();
    sub_1C9E45D3C();
    swift_bridgeObjectRelease();
  }
  return sub_1C9E461E0();
}

uint64_t sub_1C9DECCAC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 24);
  sub_1C9E461B0();
  v3 = v1;
  sub_1C9E45EF8();

  sub_1C9E461BC();
  sub_1C9E461C8();
  if (v2)
  {
    swift_bridgeObjectRetain();
    sub_1C9E45D3C();
    swift_bridgeObjectRelease();
  }
  return sub_1C9E461E0();
}

uint64_t sub_1C9DECD54()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(id *)v0;
  sub_1C9E45EF8();

  sub_1C9E461BC();
  if (!v1)
    return sub_1C9E461C8();
  sub_1C9E461C8();
  swift_bridgeObjectRetain();
  sub_1C9E45D3C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C9DECDF4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 24);
  sub_1C9E461B0();
  v3 = v1;
  sub_1C9E45EF8();

  sub_1C9E461BC();
  sub_1C9E461C8();
  if (v2)
  {
    swift_bridgeObjectRetain();
    sub_1C9E45D3C();
    swift_bridgeObjectRelease();
  }
  return sub_1C9E461E0();
}

uint64_t sub_1C9DECE98(uint64_t *a1, uint64_t *a2)
{
  return sub_1C9DEFA7C(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_1C9DECEB4()
{
  return 0;
}

uint64_t sub_1C9DECEBC(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t sub_1C9DECEC4(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*sub_1C9DECECC())()
{
  return nullsub_1;
}

uint64_t sub_1C9DECEDC()
{
  return 0;
}

unint64_t ATXWidgetStackChangeReason.name.getter(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;

  v1 = a1 - 1;
  result = 0xD000000000000010;
  switch(v1)
  {
    case 0:
      result = 0x6F72635372657375;
      break;
    case 1:
      result = 0x75536D6574737973;
      break;
    case 2:
      result = 0x61466D6574737973;
      break;
    case 3:
      result = 0x70556D6574737973;
      break;
    case 4:
      result = 0x6572436B63617473;
      break;
    case 5:
      result = 0x7365446B63617473;
      break;
    case 6:
      result = 0x4173746567646977;
      break;
    case 7:
      return result;
    case 8:
      result = 0x6775626564;
      break;
    case 9:
      result = 0xD00000000000001ALL;
      break;
    default:
      result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

uint64_t sub_1C9DED054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  void (*v34)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  void *v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t aBlock;
  uint64_t v58;
  uint64_t (*v59)();
  void *v60;
  void *v61;
  uint64_t v62;

  v0 = sub_1C9E4582C();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_1C9E45844();
  v5 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55, v6);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F028);
  MEMORY[0x1E0C80A78](v9, v10);
  v51 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v50 = (char *)&v49 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v49 - v17;
  v19 = sub_1C9E457CC();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v53 = (char *)&v49 - v26;
  v27 = swift_allocObject();
  v28 = sub_1C9DED554(MEMORY[0x1E0DEE9D8]);
  v56 = v27;
  *(_QWORD *)(v27 + 16) = v28;
  v52 = v27 + 16;
  sub_1C9E45820();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, *MEMORY[0x1E0CB1130], v0);
  sub_1C9E457C0();
  sub_1C9E45814();
  v29 = *(void (**)(char *, uint64_t))(v20 + 8);
  v29(v23, v19);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v55);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    sub_1C9DF090C((uint64_t)v18, &qword_1ED84F028);
    swift_release();
    return MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v31 = v53;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v53, v18, v19);
    sub_1C9DE8EB0(0, &qword_1ED84EFA8);
    v32 = (uint64_t)v50;
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v50, v31, v19);
    v33 = v29;
    v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    v34(v32, 0, 1, v19);
    v35 = (uint64_t)v51;
    v34((uint64_t)v51, 1, 1, v19);
    v36 = sub_1C9DED688(v32, v35, 0, 0, 0);
    v37 = objc_msgSend((id)BiomeLibrary(), sel_SpringBoard);
    swift_unknownObjectRelease();
    v38 = objc_msgSend(v37, sel_Domino);
    swift_unknownObjectRelease();
    v39 = objc_msgSend(v38, sel_StackRotation);
    swift_unknownObjectRelease();
    v40 = objc_msgSend(v39, sel_publisherWithOptions_, v36);

    v61 = sub_1C9DED798;
    v62 = 0;
    v41 = MEMORY[0x1E0C809B0];
    aBlock = MEMORY[0x1E0C809B0];
    v58 = 1107296256;
    v59 = sub_1C9DED968;
    v60 = &block_descriptor_0;
    v42 = _Block_copy(&aBlock);
    v61 = sub_1C9DEFB8C;
    v62 = v56;
    aBlock = v41;
    v58 = 1107296256;
    v59 = sub_1C9DED968;
    v60 = &block_descriptor_7;
    v43 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    v44 = objc_msgSend(v40, sel_sinkWithCompletion_receiveInput_, v42, v43);
    _Block_release(v43);
    _Block_release(v42);

    v45 = swift_beginAccess();
    MEMORY[0x1E0C80A78](v45, v46);
    *(&v49 - 2) = v54;
    v47 = swift_bridgeObjectRetain();
    v30 = sub_1C9DEF7B8(v47, (void (*)(void))sub_1C9DEFFAC, (uint64_t)(&v49 - 4));
    swift_bridgeObjectRelease();

    v33(v31, v19);
    swift_release();
  }
  return v30;
}

unint64_t sub_1C9DED554(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t result;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF931A40);
  v2 = (_QWORD *)sub_1C9E460CC();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_OWORD *)(a1 + 64);
  while (1)
  {
    v6 = (void *)*((_QWORD *)v4 - 4);
    v5 = *((_QWORD *)v4 - 3);
    v7 = *((_QWORD *)v4 - 2);
    v8 = *((_QWORD *)v4 - 1);
    v16 = *v4;
    swift_bridgeObjectRetain();
    v9 = v6;
    result = sub_1C9DEE520(v9, v5, v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (_QWORD *)(v2[6] + 32 * result);
    *v12 = v9;
    v12[1] = v5;
    v12[2] = v7;
    v12[3] = v8;
    *(_OWORD *)(v2[7] + 16 * result) = v16;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v2[2] = v15;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id sub_1C9DED688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  void *v13;
  void *v14;
  id v15;

  v10 = sub_1C9E457CC();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  v13 = 0;
  if (v12(a1, 1, v10) != 1)
  {
    v13 = (void *)sub_1C9E45784();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  }
  if (v12(a2, 1, v10) == 1)
  {
    v14 = 0;
  }
  else
  {
    v14 = (void *)sub_1C9E45784();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a2, v10);
  }
  v15 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithStartDate_endDate_maxEvents_lastN_reversed_, v13, v14, a3, a4, a5 & 1);

  return v15;
}

id sub_1C9DED798(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  id result;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint8_t *v17;
  _QWORD v18[2];

  v2 = sub_1C9E45BF8();
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(a1, sel_error, v5);
  if (result)
  {
    v9 = result;
    sub_1C9E45BC8();
    v10 = v9;
    v11 = sub_1C9E45BD4();
    v12 = sub_1C9E45E2C();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc();
      v18[0] = v2;
      v14 = (uint8_t *)v13;
      v15 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v14 = 138412290;
      v10 = v10;
      v16 = _swift_stdlib_bridgeErrorToNSError();
      v18[1] = v16;
      sub_1C9E45F1C();
      *v15 = v16;

      _os_log_impl(&dword_1C9A3B000, v11, v12, "Could not sink stack rotation stream: %@", v14, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84EED0);
      swift_arrayDestroy();
      MEMORY[0x1CAA493AC](v15, -1, -1);
      v17 = v14;
      v2 = v18[0];
      MEMORY[0x1CAA493AC](v17, -1, -1);
    }
    else
    {

      v11 = v10;
    }

    return (id)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  }
  return result;
}

void (*sub_1C9DED970(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5))(_QWORD *a1)
{
  _QWORD *v10;

  v10 = malloc(0x38uLL);
  *a1 = v10;
  v10[4] = a2;
  v10[5] = a5;
  swift_bridgeObjectRetain();
  v10[6] = sub_1C9DEE750(v10, a2, a3, a4, a5);
  return sub_1C9DED9F8;
}

void sub_1C9DED9F8(_QWORD *a1)
{
  void *v1;
  void *v2;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);

  swift_bridgeObjectRelease();
  free(v1);
}

void sub_1C9DEDA40(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

id AmbientMetricsLogger.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id AmbientMetricsLogger.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AmbientMetricsLogger();
  return objc_msgSendSuper2(&v2, sel_init);
}

id AmbientMetricsLogger.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AmbientMetricsLogger();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1C9DEDB4C()
{
  sub_1C9E461B0();
  sub_1C9E461BC();
  return sub_1C9E461E0();
}

uint64_t sub_1C9DEDB90()
{
  return sub_1C9E461BC();
}

uint64_t sub_1C9DEDBB8()
{
  sub_1C9E461B0();
  sub_1C9E461BC();
  return sub_1C9E461E0();
}

_QWORD *sub_1C9DEDBF8@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1C9DEDC08(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL sub_1C9DEDC14(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1C9DEDC28(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1C9DEDC8C;
  return v6(a1);
}

uint64_t sub_1C9DEDC8C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1C9DEDCD8(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84EFB8);
  v10 = *(_QWORD *)(sub_1C9E45B44() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = sub_1C9E46084();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(sub_1C9E45B44() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1C9DEF6A0(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_1C9DEDEE0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_1C9DEDFB0(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1C9DF08CC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1C9DF08CC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_1C9DEDFB0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1C9E45F28();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1C9DEE168(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_1C9E46018();
  if (!v8)
  {
    sub_1C9E46084();
    __break(1u);
LABEL_17:
    result = sub_1C9E460D8();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_1C9DEE168(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1C9DEE1FC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1C9DEE3D4(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1C9DEE3D4(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1C9DEE1FC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_1C9DEE370(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_1C9E45FE8();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_1C9E46084();
      __break(1u);
LABEL_10:
      v2 = sub_1C9E45D54();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_1C9E460D8();
    __break(1u);
LABEL_14:
    result = sub_1C9E46084();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *sub_1C9DEE370(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF931F30);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1C9DEE3D4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF931F30);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1C9E460D8();
  __break(1u);
  return result;
}

unint64_t sub_1C9DEE520(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8;
  uint64_t v9;

  sub_1C9E461B0();
  v8 = a1;
  sub_1C9E45EF8();

  sub_1C9E461BC();
  sub_1C9E461C8();
  if (a4)
  {
    swift_bridgeObjectRetain();
    sub_1C9E45D3C();
    swift_bridgeObjectRelease();
  }
  v9 = sub_1C9E461E0();
  return sub_1C9DEE5EC((uint64_t)v8, a2, a3, a4, v9);
}

unint64_t sub_1C9DEE5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char v16;

  v6 = -1 << *(_BYTE *)(v5 + 32);
  v7 = a5 & ~v6;
  if (((*(_QWORD *)(v5 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return v7;
  v8 = ~v6;
  sub_1C9DE8EB0(0, &qword_1EF931A48);
  while (1)
  {
    v9 = *(_QWORD *)(v5 + 48) + 32 * v7;
    v11 = *(void **)v9;
    v10 = *(_QWORD *)(v9 + 8);
    v13 = *(_QWORD *)(v9 + 16);
    v12 = *(_QWORD *)(v9 + 24);
    swift_bridgeObjectRetain();
    v14 = v11;
    if ((sub_1C9E45EEC() & 1) != 0 && v10 == a2)
    {
      if (!v12)
      {
        if (!a4)
          goto LABEL_21;
        goto LABEL_14;
      }
      if (a4)
        break;
    }
    swift_bridgeObjectRelease();
LABEL_14:

LABEL_15:
    v7 = (v7 + 1) & v8;
    if (((*(_QWORD *)(v5 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
      return v7;
  }
  if (v13 != a3 || v12 != a4)
  {
    v16 = sub_1C9E46144();
    swift_bridgeObjectRelease();

    if ((v16 & 1) != 0)
      return v7;
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
LABEL_21:

  return v7;
}

void (*sub_1C9DEE750(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1)
{
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  id v12;

  v10 = malloc(0x60uLL);
  *a1 = v10;
  v10[8] = a2;
  v10[9] = a5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v12 = a2;
  v10[10] = sub_1C9DEE9EC(v10);
  v10[11] = sub_1C9DEE854(v10 + 4, v12, a3, a4, a5, isUniquelyReferenced_nonNull_native);
  return sub_1C9DEE800;
}

void sub_1C9DEE800(uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);
  void *v3;

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 80);
  v3 = *(void **)(*(_QWORD *)a1 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 88))(*(_QWORD *)a1 + 32, 0);

  swift_bridgeObjectRelease();
  v2(v1, 0);
  free(v1);
}

void (*sub_1C9DEE854(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6))(__int128 **a1)
{
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  __int128 v25;
  void (*result)(__int128 **);
  char v27;

  v7 = v6;
  v14 = malloc(0x48uLL);
  *a1 = v14;
  v14[6] = a5;
  v14[7] = v7;
  v14[4] = a3;
  v14[5] = a4;
  v14[3] = a2;
  v15 = *v7;
  v17 = sub_1C9DEE520(a2, a3, a4, a5);
  *((_BYTE *)v14 + 17) = v16 & 1;
  v18 = *(_QWORD *)(v15 + 16);
  v19 = v16 ^ 1;
  v20 = v18 + ((v16 ^ 1) & 1);
  if (__OFADD__(v18, (v16 ^ 1) & 1))
  {
    __break(1u);
    goto LABEL_14;
  }
  v21 = v16;
  v22 = *(_QWORD *)(v15 + 24);
  if (v22 < v20 || (a6 & 1) == 0)
  {
    v27 = v16 ^ 1;
    if (v22 >= v20 && (a6 & 1) == 0)
    {
      sub_1C9DEEE48();
LABEL_9:
      v19 = v27;
      goto LABEL_10;
    }
    sub_1C9DEEA18(v20, a6 & 1);
    v23 = sub_1C9DEE520(a2, a3, a4, a5);
    if ((v21 & 1) == (v24 & 1))
    {
      v17 = v23;
      goto LABEL_9;
    }
LABEL_14:
    result = (void (*)(__int128 **))sub_1C9E46168();
    __break(1u);
    return result;
  }
LABEL_10:
  v14[8] = v17;
  v25 = 0uLL;
  if ((v21 & 1) != 0)
    v25 = *(_OWORD *)(*(_QWORD *)(*v7 + 56) + 16 * v17);
  *(_OWORD *)v14 = v25;
  *((_BYTE *)v14 + 16) = v19 & 1;
  return sub_1C9DEE9B4;
}

void sub_1C9DEE9B4(__int128 **a1)
{
  __int128 *v1;

  v1 = *a1;
  sub_1C9DEED70(*a1, *((_BYTE *)*a1 + 17), *((uint64_t **)*a1 + 7), *((_QWORD *)*a1 + 8), *((void **)*a1 + 3), *((_QWORD *)*a1 + 4), *((_QWORD *)*a1 + 5), *((_QWORD *)*a1 + 6));
  free(v1);
}

uint64_t (*sub_1C9DEE9EC(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return sub_1C9DEEA0C;
}

uint64_t sub_1C9DEEA0C(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t sub_1C9DEEA18(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  char v39;
  __int128 v40;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF931A40);
  v39 = a2;
  v6 = sub_1C9E460C0();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v2;
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v37)
          goto LABEL_35;
        v19 = v38[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v37)
            goto LABEL_35;
          v19 = v38[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v37)
            {
LABEL_35:
              swift_release();
              v3 = v36;
              if ((v39 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v38[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_42;
                if (v13 >= v37)
                  goto LABEL_35;
                v19 = v38[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = *(_QWORD *)(v5 + 48) + 32 * v17;
      v22 = *(void **)v21;
      v23 = *(_QWORD *)(v21 + 8);
      v25 = *(_QWORD *)(v21 + 16);
      v24 = *(_QWORD *)(v21 + 24);
      v40 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v17);
      if ((v39 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        v26 = v22;
      }
      sub_1C9E461B0();
      v27 = v22;
      sub_1C9E45EF8();

      sub_1C9E461BC();
      sub_1C9E461C8();
      if (v24)
      {
        swift_bridgeObjectRetain();
        sub_1C9E45D3C();
        swift_bridgeObjectRelease();
      }
      result = sub_1C9E461E0();
      v28 = -1 << *(_BYTE *)(v7 + 32);
      v29 = result & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v11 + 8 * (v29 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v11 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v11 + 8 * v30);
        }
        while (v34 == -1);
        v14 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 32 * v14);
      *v15 = v27;
      v15[1] = v23;
      v15[2] = v25;
      v15[3] = v24;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v14) = v40;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

void sub_1C9DEED70(__int128 *a1, char a2, uint64_t *a3, unint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v11;
  _QWORD *v12;
  id v13;

  if ((a1[1] & 1) != 0)
  {
    if ((a2 & 1) != 0)
    {
      swift_arrayDestroy();
      sub_1C9DEF008(a4, *a3);
    }
  }
  else
  {
    v11 = *a1;
    v12 = (_QWORD *)*a3;
    if ((a2 & 1) != 0)
    {
      *(_OWORD *)(v12[7] + 16 * a4) = v11;
    }
    else
    {
      sub_1C9DEF260(a4, (uint64_t)a5, a6, a7, a8, v11, *((uint64_t *)&v11 + 1), v12);
      swift_bridgeObjectRetain();
      v13 = a5;
    }
  }
}

id sub_1C9DEEE48()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF931A40);
  v2 = *v0;
  v3 = sub_1C9E460B4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 32 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 32 * v15;
    v18 = *(void **)v17;
    v19 = *(_QWORD *)(v17 + 24);
    v20 = 16 * v15;
    v21 = *(_QWORD *)(v4 + 48) + v16;
    v22 = *(_OWORD *)(v17 + 8);
    v23 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v20);
    *(_QWORD *)v21 = *(_QWORD *)v17;
    *(_OWORD *)(v21 + 8) = v22;
    *(_QWORD *)(v21 + 24) = v19;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v20) = v23;
    swift_bridgeObjectRetain();
    result = v18;
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1C9DEF008(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;

  v2 = a2;
  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = sub_1C9E45F58();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      v30 = v4;
      do
      {
        v10 = v2;
        v11 = *(_QWORD *)(v2 + 48) + 32 * v6;
        v12 = *(void **)v11;
        v13 = *(_QWORD *)(v11 + 24);
        sub_1C9E461B0();
        swift_bridgeObjectRetain();
        v14 = v12;
        sub_1C9E45EF8();
        sub_1C9E461BC();
        sub_1C9E461C8();
        if (v13)
        {
          swift_bridgeObjectRetain();
          sub_1C9E45D3C();
          swift_bridgeObjectRelease();
        }
        v15 = sub_1C9E461E0();
        swift_bridgeObjectRelease();

        v16 = v15 & v7;
        if (v3 >= (uint64_t)v9)
        {
          v4 = v30;
          v2 = v10;
          if (v16 < v9)
            goto LABEL_5;
        }
        else
        {
          v4 = v30;
          v2 = v10;
          if (v16 >= v9)
            goto LABEL_13;
        }
        if (v3 >= (uint64_t)v16)
        {
LABEL_13:
          v17 = *(_QWORD *)(v2 + 48);
          v18 = (_OWORD *)(v17 + 32 * v3);
          v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || v18 >= v19 + 2)
          {
            v20 = v19[1];
            *v18 = *v19;
            v18[1] = v20;
          }
          v21 = *(_QWORD *)(v2 + 56);
          v22 = (_OWORD *)(v21 + 16 * v3);
          v23 = (_OWORD *)(v21 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v22 >= v23 + 1))
          {
            *v22 = *v23;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v25 = *v24;
    v26 = (-1 << v3) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v26 = *v24;
    v25 = (-1 << a1) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(v2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + 16) = v29;
    ++*(_DWORD *)(v2 + 36);
  }
}

unint64_t sub_1C9DEF260(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a8[(result >> 6) + 8] |= 1 << result;
  v8 = (_QWORD *)(a8[6] + 32 * result);
  *v8 = a2;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a5;
  v9 = (_QWORD *)(a8[7] + 16 * result);
  *v9 = a6;
  v9[1] = a7;
  v10 = a8[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a8[2] = v12;
  return result;
}

id sub_1C9DEF2B0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  _QWORD *v7;
  _QWORD **v8;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  id result;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  char v25;

  v8 = (_QWORD **)v7;
  v15 = (_QWORD *)*v7;
  v17 = sub_1C9DEE520(a3, a4, a5, a6);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  result = (id)(v18 + v19);
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }
  else
  {
    v21 = v16;
    v22 = v15[3];
    if (v22 >= (uint64_t)result && (a7 & 1) != 0)
    {
LABEL_7:
      v23 = *v8;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        v24 = (uint64_t *)(v23[7] + 16 * v17);
        *v24 = a1;
        v24[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v22 >= (uint64_t)result && (a7 & 1) == 0)
    {
      result = sub_1C9DEEE48();
      goto LABEL_7;
    }
    sub_1C9DEEA18((uint64_t)result, a7 & 1);
    result = (id)sub_1C9DEE520(a3, a4, a5, a6);
    if ((v21 & 1) == (v25 & 1))
    {
      v17 = (unint64_t)result;
      v23 = *v8;
      if ((v21 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1C9DEF260(v17, (uint64_t)a3, a4, a5, a6, a1, a2, v23);
      swift_bridgeObjectRetain();
      return a3;
    }
  }
  result = (id)sub_1C9E46168();
  __break(1u);
  return result;
}

uint64_t sub_1C9DEF41C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1C9DEF438(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1C9DEF438(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF931A38);
  v10 = *(_QWORD *)(sub_1C9E45AF0() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(sub_1C9E45AF0() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = sub_1C9E460D8();
  __break(1u);
  return result;
}

uint64_t sub_1C9DEF618(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1C9DEF6A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(sub_1C9E45B44() - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = sub_1C9E460D8();
  __break(1u);
  return result;
}

uint64_t sub_1C9DEF7B8(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  void **v19;
  void *v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(void);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v38 = a2;
  v39 = a3;
  v5 = sub_1C9E45AF0();
  v36 = *(_QWORD *)(v5 - 8);
  v37 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = MEMORY[0x1E0DEE9D8];
  if (!v9)
    return v10;
  v29 = v3;
  v43 = MEMORY[0x1E0DEE9D8];
  sub_1C9DEF41C(0, v9, 0);
  v10 = v43;
  result = sub_1C9DEF618(a1);
  v13 = result;
  v14 = 0;
  v15 = a1 + 64;
  v30 = a1 + 80;
  v31 = v9;
  v32 = v12;
  v33 = a1 + 64;
  v34 = v8;
  v35 = a1;
  while ((v13 & 0x8000000000000000) == 0 && v13 < 1 << *(_BYTE *)(a1 + 32))
  {
    v18 = (unint64_t)v13 >> 6;
    if ((*(_QWORD *)(v15 + 8 * ((unint64_t)v13 >> 6)) & (1 << v13)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v12)
      goto LABEL_24;
    v40 = v14;
    v41 = 1 << v13;
    v19 = (void **)(*(_QWORD *)(a1 + 48) + 32 * v13);
    v42 = v10;
    v20 = *v19;
    swift_bridgeObjectRetain();
    v21 = v20;
    v38();
    v10 = v42;
    swift_bridgeObjectRelease();

    v43 = v10;
    v23 = *(_QWORD *)(v10 + 16);
    v22 = *(_QWORD *)(v10 + 24);
    if (v23 >= v22 >> 1)
    {
      sub_1C9DEF41C(v22 > 1, v23 + 1, 1);
      v10 = v43;
    }
    *(_QWORD *)(v10 + 16) = v23 + 1;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v36 + 32))(v10+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(_QWORD *)(v36 + 72) * v23, v34, v37);
    a1 = v35;
    v16 = 1 << *(_BYTE *)(v35 + 32);
    if (v13 >= v16)
      goto LABEL_25;
    v15 = v33;
    v24 = *(_QWORD *)(v33 + 8 * v18);
    if ((v24 & v41) == 0)
      goto LABEL_26;
    LODWORD(v12) = v32;
    if (*(_DWORD *)(v35 + 36) != (_DWORD)v32)
      goto LABEL_27;
    v25 = v24 & (-2 << (v13 & 0x3F));
    if (v25)
    {
      v16 = __clz(__rbit64(v25)) | v13 & 0xFFFFFFFFFFFFFFC0;
      v17 = v31;
    }
    else
    {
      v26 = v18 + 1;
      v27 = (unint64_t)(v16 + 63) >> 6;
      v17 = v31;
      if (v18 + 1 < v27)
      {
        v28 = *(_QWORD *)(v33 + 8 * v26);
        if (v28)
        {
LABEL_20:
          v16 = __clz(__rbit64(v28)) + (v26 << 6);
        }
        else
        {
          while (v27 - 2 != v18)
          {
            v28 = *(_QWORD *)(v30 + 8 * v18++);
            if (v28)
            {
              v26 = v18 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v14 = v40 + 1;
    v13 = v16;
    if (v40 + 1 == v17)
      return v10;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1C9DEFA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v14;
  uint64_t result;

  sub_1C9DE8EB0(0, &qword_1EF931A48);
  v14 = sub_1C9E45EEC();
  result = 0;
  if ((v14 & 1) != 0 && a2 == a6)
  {
    if (a4)
    {
      if (a8 && (a3 == a7 && a4 == a8 || (sub_1C9E46144() & 1) != 0))
        return 1;
    }
    else if (!a8)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C9DEFB50()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

void sub_1C9DEFB8C(void *a1)
{
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  char v24;
  id v25;
  char isUniquelyReferenced_nonNull_native;
  id v27;
  uint64_t v28;
  void (*v29)(_QWORD *);
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  _QWORD v35[4];
  uint64_t v36;

  v2 = objc_msgSend(a1, sel_eventBody);
  if (v2)
  {
    v34 = v2;
    v3 = objc_msgSend(v2, sel_widget);
    if (v3)
    {
      v4 = v3;
      v5 = objc_msgSend(v3, sel_extensionBundleId);

      if (v5)
      {
        sub_1C9E45CF4();

        v6 = objc_msgSend(v34, sel_widget);
        if (v6)
        {
          v7 = v6;
          v8 = objc_msgSend(v6, sel_kind);

          if (v8)
          {
            v9 = (uint64_t *)(v1 + 16);
            sub_1C9E45CF4();

            v10 = objc_allocWithZone(MEMORY[0x1E0CF9220]);
            v11 = (void *)sub_1C9E45CE8();
            swift_bridgeObjectRelease();
            v12 = (void *)sub_1C9E45CE8();
            swift_bridgeObjectRelease();
            v13 = objc_msgSend(v10, sel_initWithExtensionBundleId_kind_, v11, v12);

            v14 = _sSo26ATXWidgetStackChangeReasonV21AppPredictionInternalE017springBoardDominob8RotationD0ABSo08BMSpringijbkD0V_tcfC_0(objc_msgSend(v34, sel_reason));
            v15 = objc_msgSend(v34, sel_source);
            if (v15)
            {
              v16 = v15;
              v17 = sub_1C9E45CF4();
              v19 = v18;

            }
            else
            {
              v17 = 0;
              v19 = 0;
            }
            swift_beginAccess();
            v20 = *(_QWORD *)(*v9 + 16);
            swift_bridgeObjectRetain();
            v21 = v13;
            v22 = v21;
            if (v20)
            {
              v23 = v21;
              sub_1C9DEE520(v23, v14, v17, v19);
              if ((v24 & 1) != 0)
              {
                swift_endAccess();
                swift_bridgeObjectRelease();

                goto LABEL_16;
              }

            }
            swift_endAccess();
            swift_bridgeObjectRelease();
            swift_beginAccess();
            v25 = v22;
            swift_bridgeObjectRetain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v36 = *v9;
            *v9 = 0x8000000000000000;
            sub_1C9DEF2B0(0, 0, v25, v14, v17, v19, isUniquelyReferenced_nonNull_native);
            *v9 = v36;
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_endAccess();
LABEL_16:
            if (objc_msgSend(v34, sel_newWidgetSuggestion))
            {
              swift_beginAccess();
              swift_bridgeObjectRetain();
              v27 = v22;
              v29 = sub_1C9DED970(v35, v27, v14, v17, v19);
              if (*(_BYTE *)(v28 + 16) != 1)
              {
                v30 = *(_QWORD *)(v28 + 8);
                v31 = __OFADD__(v30, 1);
                v32 = v30 + 1;
                if (!v31)
                {
                  *(_QWORD *)(v28 + 8) = v32;
LABEL_24:
                  ((void (*)(_QWORD *, _QWORD))v29)(v35, 0);
                  swift_endAccess();
                  swift_bridgeObjectRelease_n();

                  return;
                }
                __break(1u);
                goto LABEL_27;
              }
            }
            else
            {
              swift_beginAccess();
              swift_bridgeObjectRetain();
              v27 = v22;
              v29 = sub_1C9DED970(v35, v27, v14, v17, v19);
              if (*(_BYTE *)(v33 + 16) != 1)
              {
                if (!__OFADD__(*(_QWORD *)v33, 1))
                {
                  ++*(_QWORD *)v33;
                  goto LABEL_24;
                }
LABEL_27:
                __break(1u);
                return;
              }
            }
            ((void (*)(_QWORD *, _QWORD))v29)(v35, 0);
            swift_endAccess();

            swift_bridgeObjectRelease_n();
            return;
          }
        }
        swift_bridgeObjectRelease();
      }
    }

  }
}

uint64_t sub_1C9DEFFAC(void *a1, uint64_t a2)
{
  id v4;
  id v5;

  v4 = objc_msgSend(a1, sel_extensionBundleId);
  sub_1C9E45CF4();

  v5 = objc_msgSend(a1, sel_kind);
  sub_1C9E45CF4();

  switch(a2)
  {
    case 2:
      sub_1C9E45D48();
      swift_bridgeObjectRetain();
      sub_1C9E45D48();
      swift_bridgeObjectRelease();
      break;
    default:
      return sub_1C9E45AE4();
  }
  return sub_1C9E45AE4();
}

uint64_t _sSo26ATXWidgetStackChangeReasonV21AppPredictionInternalE017springBoardDominob8RotationD0ABSo08BMSpringijbkD0V_tcfC_0(unsigned int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = sub_1C9E45BF8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 0xB)
    return a1;
  sub_1C9E45BC8();
  v8 = sub_1C9E45BD4();
  v9 = sub_1C9E45E38();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v15 = v11;
    *(_DWORD *)v10 = 136315138;
    LODWORD(v14) = a1;
    type metadata accessor for BMSpringBoardDominoStackRotationReason(0);
    v12 = sub_1C9E45D0C();
    v14 = sub_1C9DEDEE0(v12, v13, &v15);
    sub_1C9E45F1C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9A3B000, v8, v9, "Unhandled BMSpringBoardDominoStackRotationReason reason: %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CAA493AC](v11, -1, -1);
    MEMORY[0x1CAA493AC](v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return 0;
}

uint64_t type metadata accessor for AmbientMetricsLogger()
{
  return objc_opt_self();
}

unint64_t sub_1C9DF0428()
{
  unint64_t result;

  result = qword_1EF931A18;
  if (!qword_1EF931A18)
  {
    result = MEMORY[0x1CAA492F8](&unk_1C9E8166C, &type metadata for AmbientMetricsLogger.WidgetRotationKey);
    atomic_store(result, (unint64_t *)&qword_1EF931A18);
  }
  return result;
}

uint64_t method lookup function for AmbientMetricsLogger()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AmbientMetricsLogger.collect(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x50))();
}

uint64_t dispatch thunk of AmbientMetricsLogger.createSystemConfigurationEvent(stacks:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of AmbientMetricsLogger.createWidgetConfigurationEvents(stacks:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of AmbientMetricsLogger.createWidgetRotationEvents()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t initializeBufferWithCopyOfBuffer for AmbientMetricsLogger.WidgetRotationKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for AmbientMetricsLogger.WidgetRotationKey(id *a1)
{

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AmbientMetricsLogger.WidgetRotationKey(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AmbientMetricsLogger.WidgetRotationKey(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for AmbientMetricsLogger.WidgetRotationKey(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AmbientMetricsLogger.WidgetRotationKey(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AmbientMetricsLogger.WidgetRotationKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AmbientMetricsLogger.WidgetRotationKey()
{
  return &type metadata for AmbientMetricsLogger.WidgetRotationKey;
}

uint64_t getEnumTagSinglePayload for AmbientMetricsLogger.WidgetRotationData(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AmbientMetricsLogger.WidgetRotationData(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AmbientMetricsLogger.WidgetRotationData()
{
  return &type metadata for AmbientMetricsLogger.WidgetRotationData;
}

void type metadata accessor for ATXWidgetStackChangeReason(uint64_t a1)
{
  sub_1C9DF0868(a1, &qword_1EF931A20);
}

uint64_t sub_1C9DF0748()
{
  return sub_1C9DF09DC(&qword_1EF931A28, (uint64_t (*)(uint64_t))type metadata accessor for ATXWidgetStackChangeReason, (uint64_t)&unk_1C9E817B0);
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1C9DF07AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v0[4];
  v3 = v0[5];
  v4 = v0[6];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1C9DF080C;
  return sub_1C9DEB460((uint64_t)v5, v6, v7, v2, v3, v4);
}

uint64_t sub_1C9DF080C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void type metadata accessor for BMSpringBoardDominoStackRotationReason(uint64_t a1)
{
  sub_1C9DF0868(a1, &qword_1EF931A60);
}

void sub_1C9DF0868(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1C9DF08CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1C9DF090C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C9DF0948()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C9DF096C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1C9DF080C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EF931F20 + dword_1EF931F20))(a1, v4);
}

uint64_t sub_1C9DF09DC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1CAA492F8](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1C9DF0A1C()
{
  swift_deletedMethodError();
  __break(1u);
}

id sub_1C9DF0A38()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ContextualEngine()), sel_init);
  qword_1ED84F950 = (uint64_t)result;
  return result;
}

uint64_t *sub_1C9DF0A64()
{
  if (qword_1ED84F958 != -1)
    swift_once();
  return &qword_1ED84F950;
}

id static ContextualEngine.shared.getter()
{
  if (qword_1ED84F958 != -1)
    swift_once();
  return (id)qword_1ED84F950;
}

uint64_t sub_1C9DF0B24()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_1C9DF0B6C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___ATXContextualEngine_contextStore);
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t (*sub_1C9DF0BBC())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

id sub_1C9DF0C00()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR___ATXContextualEngine_suggestionStore);
  swift_beginAccess();
  return *v1;
}

void sub_1C9DF0C44(void *a1)
{
  sub_1C9DF0D78(a1, &OBJC_IVAR___ATXContextualEngine_suggestionStore);
}

uint64_t (*sub_1C9DF0C50())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_1C9DF0C94()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR___ATXContextualEngine_suggestionServer);
  swift_beginAccess();
  return *v1;
}

void sub_1C9DF0CD8(void *a1)
{
  sub_1C9DF0D78(a1, &OBJC_IVAR___ATXContextualEngine_suggestionServer);
}

uint64_t (*sub_1C9DF0CE4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_1C9DF0D28()
{
  uint64_t v0;
  id *v1;

  v1 = (id *)(v0 + OBJC_IVAR___ATXContextualEngine_internalServer);
  swift_beginAccess();
  return *v1;
}

void sub_1C9DF0D6C(void *a1)
{
  sub_1C9DF0D78(a1, &OBJC_IVAR___ATXContextualEngine_internalServer);
}

void sub_1C9DF0D78(void *a1, _QWORD *a2)
{
  uint64_t v2;
  void **v4;
  void *v5;

  v4 = (void **)(v2 + *a2);
  swift_beginAccess();
  v5 = *v4;
  *v4 = a1;

}

uint64_t (*sub_1C9DF0DC4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

char *sub_1C9DF0E08()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  os_log_type_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  id *v32;
  uint64_t v33;
  objc_class *v34;
  char *v35;
  char *v36;
  _QWORD *v37;
  void (*v38)(char *, _UNKNOWN **);
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  objc_super v49;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84F090);
  MEMORY[0x1E0C80A78](v1, v2);
  v48 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1C9E45BF8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v46 = (char *)&v45 - v11;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v45 - v14;
  v16 = (uint64_t *)&v0[OBJC_IVAR___ATXContextualEngine_contextStore];
  *(_QWORD *)&v0[OBJC_IVAR___ATXContextualEngine_contextStore] = 0;
  v47 = v0;
  v17 = sub_1C9DFF740();
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v18(v15, v17, v4);
  v19 = sub_1C9E45BD4();
  v20 = sub_1C9E45E44();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_1C9A3B000, v19, v20, "ContextualEngine init", v21, 2u);
    MEMORY[0x1CAA493AC](v21, -1, -1);
  }

  v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v22(v15, v4);
  if (objc_msgSend((id)objc_opt_self(), sel_isContextualEngineEnabled))
  {
    type metadata accessor for ContextualEngineContextStore();
    v23 = sub_1C9E0A9DC();
    swift_beginAccess();
    *v16 = v23;
    swift_release();
    v24 = v46;
    v18(v46, v17, v4);
    v25 = sub_1C9E45BD4();
    v26 = sub_1C9E45E44();
    if (!os_log_type_enabled(v25, v26))
    {
      v8 = v24;
      goto LABEL_10;
    }
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_1C9A3B000, v25, v26, "ContextualEngine: feature flag enabled, initializing context store", v27, 2u);
    v8 = v24;
    goto LABEL_8;
  }
  v18(v8, v17, v4);
  v25 = sub_1C9E45BD4();
  v28 = sub_1C9E45E44();
  if (os_log_type_enabled(v25, v28))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_1C9A3B000, v25, v28, "ContextualEngine: feature flag disabled, not initializing context store", v27, 2u);
LABEL_8:
    MEMORY[0x1CAA493AC](v27, -1, -1);
  }
LABEL_10:

  v22(v8, v4);
  type metadata accessor for ContextualEngineSuggestionStore();
  swift_beginAccess();
  v29 = swift_retain();
  v30 = sub_1C9DF1E48(v29);
  v31 = v47;
  v32 = (id *)&v47[OBJC_IVAR___ATXContextualEngine_suggestionStore];
  *(_QWORD *)&v47[OBJC_IVAR___ATXContextualEngine_suggestionStore] = v30;
  type metadata accessor for ContextualSuggestionServer();
  v33 = *v16;
  swift_retain();
  *(_QWORD *)&v31[OBJC_IVAR___ATXContextualEngine_suggestionServer] = sub_1C9E01DE4(v33, v30);
  type metadata accessor for ContextualEngineInternalServer();
  swift_beginAccess();
  *(_QWORD *)&v31[OBJC_IVAR___ATXContextualEngine_internalServer] = sub_1C9DF836C(*v32);

  v34 = (objc_class *)type metadata accessor for ContextualEngine();
  v49.receiver = v31;
  v49.super_class = v34;
  v35 = (char *)objc_msgSendSuper2(&v49, sel_init);
  v36 = &v35[OBJC_IVAR___ATXContextualEngine_internalServer];
  swift_beginAccess();
  v37 = *(_QWORD **)v36;
  v38 = *(void (**)(char *, _UNKNOWN **))((*MEMORY[0x1E0DEEDD8] & *v37) + 0x88);
  v39 = v35;
  v40 = v37;
  v38(v35, &off_1E82EC800);

  v41 = sub_1C9E45DE4();
  v42 = (uint64_t)v48;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v48, 1, 1, v41);
  v43 = (_QWORD *)swift_allocObject();
  v43[2] = 0;
  v43[3] = 0;
  v43[4] = v39;
  sub_1C9DF168C(v42, (uint64_t)&unk_1EF931AA0, (uint64_t)v43);
  swift_release();
  return v39;
}

uint64_t sub_1C9DF1298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t sub_1C9DF12B0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)(void);
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v8)(void);

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 16)) + 0x70))();
  *(_QWORD *)(v0 + 24) = v2;
  if (v2)
  {
    v8 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v2 + 352) + *(_QWORD *)(*(_QWORD *)v2 + 352));
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 32) = v3;
    *v3 = v0;
    v3[1] = sub_1C9DF13A4;
    v4 = v8;
  }
  else
  {
    v5 = (_QWORD *)(*(uint64_t (**)(void))((*v1 & **(_QWORD **)(v0 + 16)) + 0xA0))();
    (*(void (**)(void))((*v1 & *v5) + 0x90))();

    sub_1C9E45B80();
    v6 = sub_1C9E45D18();
    swift_bridgeObjectRelease();
    notify_post((const char *)(v6 + 32));
    swift_release();
    v4 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v4();
}

uint64_t sub_1C9DF13A4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

uint64_t sub_1C9DF1410()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 16)) + 0xA0))();
  (*(void (**)(void))((*v1 & *v2) + 0x90))();

  sub_1C9E45B80();
  v3 = sub_1C9E45D18();
  swift_bridgeObjectRelease();
  notify_post((const char *)(v3 + 32));
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1C9DF14A0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_1C9DF14B8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)(void);
  _QWORD *v5;
  uint64_t (*v7)(void);

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 16)) + 0x70))();
  *(_QWORD *)(v0 + 24) = v2;
  if (v2)
  {
    v7 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v2 + 352) + *(_QWORD *)(*(_QWORD *)v2 + 352));
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 32) = v3;
    *v3 = v0;
    v3[1] = sub_1C9DF1584;
    v4 = v7;
  }
  else
  {
    v5 = (_QWORD *)(*(uint64_t (**)(void))((*v1 & **(_QWORD **)(v0 + 16)) + 0xA0))();
    (*(void (**)(void))((*v1 & *v5) + 0x90))();

    v4 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v4();
}

uint64_t sub_1C9DF1584()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

uint64_t sub_1C9DF15F0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 16)) + 0xA0))();
  (*(void (**)(void))((*v1 & *v2) + 0x90))();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1C9DF1658()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1C9DF168C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_1C9E45DE4();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_1C9E45DD8();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_1C9DF1AF0(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1C9E45DCC();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

void sub_1C9DF17D8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = v1;
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x88))();
  (*(void (**)(uint64_t))((*v4 & *v5) + 0xA8))(a1);

  v6 = (_QWORD *)(*(uint64_t (**)(void))((*v4 & *v2) + 0xA0))();
  (*(void (**)(void))((*v4 & *v6) + 0x90))();

}

id ContextualEngine.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ContextualEngine();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ContextualEngine()
{
  return objc_opt_self();
}

uint64_t method lookup function for ContextualEngine()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ContextualEngine.donate(rerankedBlendingSuggestions:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

unint64_t sub_1C9DF1A28()
{
  unint64_t result;

  result = qword_1ED84EEA0;
  if (!qword_1ED84EEA0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED84EEA0);
  }
  return result;
}

uint64_t sub_1C9DF1A64()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1C9DF1A90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1C9DF080C;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t sub_1C9DF1AF0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84F090);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_1C9DF1B34()
{
  return &unk_1E82EC840;
}

unint64_t ContextualEngineSnapshotOverrideEnabledKey.getter()
{
  return 0xD000000000000027;
}

uint64_t static String.allCases.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84EEF0);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C9E818B0;
  *(_QWORD *)(v0 + 32) = sub_1C9E45D30();
  *(_QWORD *)(v0 + 40) = v1;
  *(_QWORD *)(v0 + 48) = sub_1C9E45D24();
  *(_QWORD *)(v0 + 56) = v2;
  return v0;
}

uint64_t sub_1C9DF1BB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84EEF0);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1C9E818B0;
  *(_QWORD *)(v2 + 32) = sub_1C9E45D30();
  *(_QWORD *)(v2 + 40) = v3;
  result = sub_1C9E45D24();
  *(_QWORD *)(v2 + 48) = result;
  *(_QWORD *)(v2 + 56) = v5;
  *a1 = v2;
  return result;
}

uint64_t sub_1C9DF1C08()
{
  return swift_retain();
}

uint64_t sub_1C9DF1C18()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_delegate;
  swift_beginAccess();
  return MEMORY[0x1CAA4943C](v1);
}

uint64_t sub_1C9DF1C64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*sub_1C9DF1CCC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1CAA4943C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return sub_1C9DF1D40;
}

void sub_1C9DF1D40(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48) + 8) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

id sub_1C9DF1DB4()
{
  return objc_msgSend(objc_allocWithZone((Class)ATXActionToWidgetConverter), sel_initWithAllowsSendMessageIntentConversion_, 0);
}

uint64_t sub_1C9DF1DDC()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F0C8);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1C9DF1E0C()
{
  return swift_retain();
}

uint64_t sub_1C9DF1E20(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

char *sub_1C9DF1E48(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return sub_1C9DF1E78(a1);
}

char *sub_1C9DF1E78(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  id v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  char *v42;
  void *v43;
  char *v44;
  id v45;
  objc_super v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  *(_QWORD *)&v1[OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v2 = OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_actionToWidgetConverter;
  v3 = objc_allocWithZone((Class)ATXActionToWidgetConverter);
  v4 = v1;
  *(_QWORD *)&v1[v2] = objc_msgSend(v3, sel_initWithAllowsSendMessageIntentConversion_, 0);
  v5 = OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_lock;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F0C8);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)&v4[v5] = v6;
  v50 = sub_1C9E45CF4();
  v51 = v7;
  v52 = sub_1C9E45CF4();
  v53 = v8;
  v54 = sub_1C9E45CF4();
  v55 = v9;
  v49 = MEMORY[0x1E0DEE9D8];
  sub_1C9DF66B4(0, 3, 0);
  v10 = v49;
  v11 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  v12 = (void *)sub_1C9E45CE8();
  v13 = objc_msgSend(v11, sel_sourceIdentifierForHeuristicWithName_, v12);

  v14 = sub_1C9E45CF4();
  v16 = v15;
  swift_bridgeObjectRelease();

  v18 = *(_QWORD *)(v49 + 16);
  v17 = *(_QWORD *)(v49 + 24);
  if (v18 >= v17 >> 1)
  {
    sub_1C9DF66B4(v17 > 1, v18 + 1, 1);
    v10 = v49;
  }
  *(_QWORD *)(v10 + 16) = v18 + 1;
  v19 = v10 + 16 * v18;
  *(_QWORD *)(v19 + 32) = v14;
  *(_QWORD *)(v19 + 40) = v16;
  swift_bridgeObjectRetain();
  v20 = (void *)sub_1C9E45CE8();
  v21 = objc_msgSend(v11, sel_sourceIdentifierForHeuristicWithName_, v20);

  v22 = sub_1C9E45CF4();
  v24 = v23;
  swift_bridgeObjectRelease();

  v26 = *(_QWORD *)(v10 + 16);
  v25 = *(_QWORD *)(v10 + 24);
  if (v26 >= v25 >> 1)
  {
    sub_1C9DF66B4(v25 > 1, v26 + 1, 1);
    v10 = v49;
  }
  *(_QWORD *)(v10 + 16) = v26 + 1;
  v27 = v10 + 16 * v26;
  *(_QWORD *)(v27 + 32) = v22;
  *(_QWORD *)(v27 + 40) = v24;
  swift_bridgeObjectRetain();
  v28 = (void *)sub_1C9E45CE8();
  v29 = objc_msgSend(v11, sel_sourceIdentifierForHeuristicWithName_, v28);

  v30 = sub_1C9E45CF4();
  v32 = v31;
  swift_bridgeObjectRelease();

  v34 = *(_QWORD *)(v10 + 16);
  v33 = *(_QWORD *)(v10 + 24);
  if (v34 >= v33 >> 1)
    sub_1C9DF66B4(v33 > 1, v34 + 1, 1);
  v35 = OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_disabledHeuristicSourceIdentifiers;
  v36 = v49;
  *(_QWORD *)(v49 + 16) = v34 + 1;
  v37 = v36 + 16 * v34;
  *(_QWORD *)(v37 + 32) = v30;
  *(_QWORD *)(v37 + 40) = v32;
  swift_arrayDestroy();
  v38 = sub_1C9DF6B9C(v36);
  swift_release();
  *(_QWORD *)&v4[v35] = v38;
  v39 = OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_allowedAmbientClientModelTypes;
  *(_QWORD *)&v4[v39] = sub_1C9DF6C30((uint64_t)&unk_1E82EC850);
  *(_QWORD *)&v4[OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_contextStore] = a1;
  v40 = (void *)objc_opt_self();
  swift_retain();
  v41 = objc_msgSend(v40, sel_sharedInstance);
  *(_QWORD *)&v4[OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_modeFilter] = v41;

  v48.receiver = v4;
  v48.super_class = (Class)type metadata accessor for ContextualEngineSuggestionStore();
  v42 = (char *)objc_msgSendSuper2(&v48, sel_init);
  v43 = *(void **)&v42[OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_modeFilter];
  v44 = v42;
  v45 = v43;
  objc_msgSend(v45, sel_registerObserver_, v44);

  swift_release();
  return v44;
}

uint64_t sub_1C9DF2270()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  sub_1C9E45CF4();
  sub_1C9E45CF4();
  sub_1C9E45CF4();
  v28 = MEMORY[0x1E0DEE9D8];
  sub_1C9DF66B4(0, 3, 0);
  v0 = v28;
  v1 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  v2 = (void *)sub_1C9E45CE8();
  v3 = objc_msgSend(v1, sel_sourceIdentifierForHeuristicWithName_, v2);

  v4 = sub_1C9E45CF4();
  v6 = v5;
  swift_bridgeObjectRelease();

  v8 = *(_QWORD *)(v28 + 16);
  v7 = *(_QWORD *)(v28 + 24);
  if (v8 >= v7 >> 1)
  {
    sub_1C9DF66B4(v7 > 1, v8 + 1, 1);
    v0 = v28;
  }
  *(_QWORD *)(v0 + 16) = v8 + 1;
  v9 = v0 + 16 * v8;
  *(_QWORD *)(v9 + 32) = v4;
  *(_QWORD *)(v9 + 40) = v6;
  swift_bridgeObjectRetain();
  v10 = (void *)sub_1C9E45CE8();
  v11 = objc_msgSend(v1, sel_sourceIdentifierForHeuristicWithName_, v10);

  v12 = sub_1C9E45CF4();
  v14 = v13;
  swift_bridgeObjectRelease();

  v16 = *(_QWORD *)(v0 + 16);
  v15 = *(_QWORD *)(v0 + 24);
  if (v16 >= v15 >> 1)
  {
    sub_1C9DF66B4(v15 > 1, v16 + 1, 1);
    v0 = v28;
  }
  *(_QWORD *)(v0 + 16) = v16 + 1;
  v17 = v0 + 16 * v16;
  *(_QWORD *)(v17 + 32) = v12;
  *(_QWORD *)(v17 + 40) = v14;
  swift_bridgeObjectRetain();
  v18 = (void *)sub_1C9E45CE8();
  v19 = objc_msgSend(v1, sel_sourceIdentifierForHeuristicWithName_, v18);

  v20 = sub_1C9E45CF4();
  v22 = v21;
  swift_bridgeObjectRelease();

  v24 = *(_QWORD *)(v0 + 16);
  v23 = *(_QWORD *)(v0 + 24);
  if (v24 >= v23 >> 1)
    sub_1C9DF66B4(v23 > 1, v24 + 1, 1);
  *(_QWORD *)(v28 + 16) = v24 + 1;
  v25 = v28 + 16 * v24;
  *(_QWORD *)(v25 + 32) = v20;
  *(_QWORD *)(v25 + 40) = v22;
  swift_arrayDestroy();
  v26 = sub_1C9DF6B9C(v28);
  swift_release();
  return v26;
}

uint64_t sub_1C9DF251C()
{
  return sub_1C9DF6C30((uint64_t)&unk_1E82EC8A8);
}

uint64_t sub_1C9DF2528()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;

  v1 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_lock);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  v2 = sub_1C9DF30CC();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = v2;
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
  if (result)
  {
    v5 = v4;
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1C9DF25D0()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = v0;
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_contextStore];
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
    v4 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 216))();
  else
    v4 = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84EEF0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C9E818B0;
  *(_QWORD *)(inited + 32) = sub_1C9E45D30();
  *(_QWORD *)(inited + 40) = v6;
  *(_QWORD *)(inited + 48) = sub_1C9E45D24();
  *(_QWORD *)(inited + 56) = v7;
  if (qword_1EF9341E0 != -1)
    swift_once();
  v8 = (void *)qword_1EF9341E8;
  v9 = (void *)sub_1C9E45CE8();
  LODWORD(v8) = objc_msgSend(v8, sel_BOOLForKey_, v9);

  if ((_DWORD)v8)
  {
    v10 = (uint64_t)sub_1C9DF70CC();
    if (!v10)
      v10 = sub_1C9DF41BC();
    v11 = (void *)v10;
    v12 = *(_QWORD *)(v4 + 16);
    if (v12)
    {
      v40 = (void *)v10;
      v41 = inited;
      v47 = v3;
      sub_1C9DF66EC(0, v12, 0);
      v13 = v4 + 32;
      do
      {
        sub_1C9DE9E88(v13, (uint64_t)v42);
        __swift_project_boxed_opaque_existential_1(v42, v43);
        sub_1C9E45FF4();
        v14 = v43;
        v15 = v44;
        __swift_project_boxed_opaque_existential_1(v42, v43);
        v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 40))(v14, v15);
        v18 = v17;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v42);
        v19 = v45;
        v20 = v46;
        v21 = v47;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1C9DF66EC(0, *(_QWORD *)(v21 + 16) + 1, 1);
          v21 = v47;
        }
        v23 = *(_QWORD *)(v21 + 16);
        v22 = *(_QWORD *)(v21 + 24);
        if (v23 >= v22 >> 1)
        {
          sub_1C9DF66EC(v22 > 1, v23 + 1, 1);
          v21 = v47;
        }
        *(_QWORD *)(v21 + 16) = v23 + 1;
        v24 = (_QWORD *)(v21 + 32 * v23);
        v24[4] = v19;
        v24[5] = v20;
        v24[6] = v16;
        v24[7] = v18;
        v13 += 40;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
      inited = v41;
      v11 = v40;
      if (*(_QWORD *)(v21 + 16))
        goto LABEL_20;
    }
    else
    {
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
      {
LABEL_20:
        __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84EBB0);
        v29 = sub_1C9E460CC();
LABEL_23:
        v42[0] = v29;
        v30 = (_QWORD *)swift_bridgeObjectRetain();
        sub_1C9DF583C(v30, 1, v42);
        swift_bridgeObjectRelease();
        v31 = v42[0];
        v32 = sub_1C9E45AC0();
        swift_retain();
        sub_1C9DF71E0(v32, v31);
        swift_bridgeObjectRelease();
        swift_release_n();
        v33 = objc_allocWithZone((Class)sub_1C9E45ACC());
        v34 = (id)sub_1C9E45AB4();
        v35 = sub_1C9DF7434(inited, v34);

        swift_setDeallocating();
        swift_arrayDestroy();
        if (*(_QWORD *)(v35 + 16))
        {
          __swift_instantiateConcreteTypeFromMangledName(qword_1EF931AE8);
          v36 = sub_1C9E460CC();
        }
        else
        {
          v36 = MEMORY[0x1E0DEE9E0];
        }
        v42[0] = v36;
        v38 = (_QWORD *)swift_bridgeObjectRetain();
        sub_1C9DF54B0(v38, 1, v42);

        goto LABEL_29;
      }
    }
    v29 = MEMORY[0x1E0DEE9E0];
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  v25 = v1;
  sub_1C9DF76BC(inited, v4, v25);
  v27 = v26;
  swift_bridgeObjectRelease_n();

  swift_setDeallocating();
  swift_arrayDestroy();
  if (*(_QWORD *)(v27 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1EF931AE8);
    v28 = sub_1C9E460CC();
  }
  else
  {
    v28 = MEMORY[0x1E0DEE9E0];
  }
  v42[0] = v28;
  v37 = (_QWORD *)swift_bridgeObjectRetain();
  sub_1C9DF54B0(v37, 1, v42);
LABEL_29:
  swift_bridgeObjectRelease();
  return v42[0];
}

uint64_t sub_1C9DF2A4C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  uint8_t *v23;
  uint8_t *v24;
  void *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t result;
  uint8_t *v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[5];
  unint64_t v42;

  v40 = sub_1C9E45BF8();
  v5 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v6);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v35 - v9;
  v42 = MEMORY[0x1E0DEE9D8];
  sub_1C9DE9E88((uint64_t)a1, (uint64_t)v41);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF931BB0);
  type metadata accessor for MeetingContext(0);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v39 = swift_retain();
    v41[0] = nullsub_1(v39);
    v11 = sub_1C9DF7C58();
    v12 = sub_1C9E07FC8((uint64_t)&type metadata for JoinMeetingActionProducer, v11);
    if (v2)
    {
      swift_release();
      v13 = sub_1C9DFF740();
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v13, v40);
      v14 = v2;
      v15 = v2;
      v16 = sub_1C9E45BD4();
      v17 = sub_1C9E45E2C();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = swift_slowAlloc();
        v38 = a2;
        v19 = (uint8_t *)v18;
        v20 = (_QWORD *)swift_slowAlloc();
        v36 = v19;
        v37 = v5;
        *(_DWORD *)v19 = 138412290;
        v35 = v19 + 4;
        v21 = v2;
        v22 = _swift_stdlib_bridgeErrorToNSError();
        v41[0] = v22;
        v5 = v37;
        sub_1C9E45F1C();
        *v20 = v22;

        v23 = v36;
        _os_log_impl(&dword_1C9A3B000, v16, v17, "Error producing join meeting suggestion: %@", v36, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84EED0);
        swift_arrayDestroy();
        MEMORY[0x1CAA493AC](v20, -1, -1);
        v24 = v23;
        a2 = v38;
        MEMORY[0x1CAA493AC](v24, -1, -1);

      }
      else
      {

      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v40);
    }
    else
    {
      v25 = (void *)v12;
      swift_release();
      v26 = v25;
      MEMORY[0x1CAA476CC]();
      if (*(_QWORD *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1C9E45D9C();
      sub_1C9E45DB4();
      sub_1C9E45D90();

    }
    v27 = swift_retain();
    v41[0] = nullsub_1(v27);
    v28 = sub_1C9DF7C9C();
    v29 = (void *)sub_1C9E07FC8((uint64_t)&type metadata for DoNotDisturbActionProducer, v28);
    swift_release();
    v30 = v29;
    MEMORY[0x1CAA476CC]();
    if (*(_QWORD *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1C9E45D9C();
    sub_1C9E45DB4();
    sub_1C9E45D90();

    swift_release();
  }
  v31 = a1[3];
  v32 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v31);
  (*(void (**)(uint64_t, uint64_t))(v32 + 32))(v31, v32);
  if (v42 >> 62)
  {
    sub_1C9E45A78();
    swift_bridgeObjectRetain();
    sub_1C9E4609C();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1C9E46150();
    sub_1C9E45A78();
  }
  swift_bridgeObjectRelease();
  v33 = objc_allocWithZone((Class)sub_1C9E45AA8());
  result = sub_1C9E45A90();
  *a2 = result;
  return result;
}

uint64_t sub_1C9DF3078(void (*a1)(void))
{
  _QWORD *v1;

  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0xB0))();
  a1();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C9DF30CC()
{
  void *v0;
  uint64_t ObjectType;
  char *v2;
  unint64_t v3;
  void *v4;
  void *v5;
  id v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;

  ObjectType = swift_getObjectType();
  v2 = v0;
  v3 = swift_bridgeObjectRetain();
  sub_1C9DF6D90(v3, (uint64_t)v2, ObjectType);

  v4 = *(void **)&v2[OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_actionToWidgetConverter];
  sub_1C9DE8EB0(0, (unint64_t *)&qword_1ED84EEA0);
  v5 = (void *)sub_1C9E45D78();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_convertSuggestions_, v5);

  v7 = sub_1C9E45D84();
  v8 = v2;
  v9 = sub_1C9DF6F38(v7, (uint64_t)v8);
  swift_bridgeObjectRelease();

  return v9;
}

uint64_t sub_1C9DF31D4(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v63 = a3;
  v5 = sub_1C9E45BF8();
  v64 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v59 - v11;
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v59 - v16;
  v18 = *a1;
  v19 = objc_msgSend(v18, sel_clientModelSpecification, v15);
  v20 = objc_msgSend(v19, sel_clientModelId);

  if (!v20)
  {
    sub_1C9E45CF4();
    v20 = (id)sub_1C9E45CE8();
    swift_bridgeObjectRelease();
  }
  v21 = objc_msgSend((id)objc_opt_self(), sel_clientModelTypeFromClientModelId_, v20);

  if (v21)
  {
    if (!sub_1C9DF394C((uint64_t)v21, *(_QWORD *)(a2+ OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_allowedAmbientClientModelTypes)))
    {
      sub_1C9E45BC8();
      v22 = v18;
      v23 = sub_1C9E45BD4();
      v24 = sub_1C9E45E44();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = swift_slowAlloc();
        v26 = (_QWORD *)swift_slowAlloc();
        v61 = swift_slowAlloc();
        v66 = v61;
        *(_DWORD *)v25 = 136315394;
        v27 = sub_1C9E46228();
        v65 = sub_1C9DEDEE0(v27, v28, &v66);
        v62 = v5;
        sub_1C9E45F1C();
        swift_bridgeObjectRelease();
        *(_WORD *)(v25 + 12) = 2112;
        v65 = (uint64_t)v22;
        v29 = v22;
        sub_1C9E45F1C();
        *v26 = v22;

        _os_log_impl(&dword_1C9A3B000, v23, v24, "%s: filtering out suggestion with unsupported client model type: %@", (uint8_t *)v25, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84EED0);
        swift_arrayDestroy();
        MEMORY[0x1CAA493AC](v26, -1, -1);
        v30 = v61;
        swift_arrayDestroy();
        MEMORY[0x1CAA493AC](v30, -1, -1);
        MEMORY[0x1CAA493AC](v25, -1, -1);

        (*(void (**)(char *, uint64_t))(v64 + 8))(v17, v62);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v64 + 8))(v17, v5);
      }
      return 0;
    }
  }
  else
  {
    v61 = (uint64_t)v12;
    v31 = v8;
    v32 = v5;
    if (qword_1EF9341D0 != -1)
      swift_once();
    v33 = (_QWORD *)qword_1EF9341D8;
    swift_bridgeObjectRetain();
    v34 = objc_msgSend(v18, sel_clientModelSpecification);
    v35 = objc_msgSend(v34, sel_clientModelId);

    v36 = sub_1C9E45CF4();
    v38 = v37;

    LOBYTE(v36) = sub_1C9DF3B6C(v36, v38, v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = v32;
    v8 = v31;
    if ((v36 & 1) == 0)
    {
      v49 = v61;
      sub_1C9E45BC8();
      v50 = v18;
      v51 = sub_1C9E45BD4();
      v52 = sub_1C9E45E44();
      if (os_log_type_enabled(v51, v52))
      {
        v53 = swift_slowAlloc();
        v54 = (_QWORD *)swift_slowAlloc();
        v60 = swift_slowAlloc();
        v66 = v60;
        *(_DWORD *)v53 = 136315394;
        v62 = v5;
        v55 = sub_1C9E46228();
        v65 = sub_1C9DEDEE0(v55, v56, &v66);
        sub_1C9E45F1C();
        swift_bridgeObjectRelease();
        *(_WORD *)(v53 + 12) = 2112;
        v65 = (uint64_t)v50;
        v57 = v50;
        sub_1C9E45F1C();
        *v54 = v50;

        _os_log_impl(&dword_1C9A3B000, v51, v52, "%s: filtering out suggestion with unsupported client model id: %@", (uint8_t *)v53, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84EED0);
        swift_arrayDestroy();
        MEMORY[0x1CAA493AC](v54, -1, -1);
        v58 = v60;
        swift_arrayDestroy();
        MEMORY[0x1CAA493AC](v58, -1, -1);
        MEMORY[0x1CAA493AC](v53, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v49, v62);
      }
      else
      {

        (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v49, v5);
      }
      return 0;
    }
  }
  if ((objc_msgSend(*(id *)(a2 + OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_modeFilter), sel_currentModeConfigurationAllowsSuggestion_, v18) & 1) != 0)return 1;
  sub_1C9E45BC8();
  v40 = v18;
  v41 = sub_1C9E45BD4();
  v42 = sub_1C9E45E44();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = swift_slowAlloc();
    v44 = (_QWORD *)swift_slowAlloc();
    v61 = swift_slowAlloc();
    v66 = v61;
    *(_DWORD *)v43 = 136315394;
    v62 = v5;
    v45 = sub_1C9E46228();
    v65 = sub_1C9DEDEE0(v45, v46, &v66);
    sub_1C9E45F1C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 12) = 2112;
    v65 = (uint64_t)v40;
    v47 = v40;
    sub_1C9E45F1C();
    *v44 = v40;

    _os_log_impl(&dword_1C9A3B000, v41, v42, "%s: filtering out suggestion due to mode configuration: %@", (uint8_t *)v43, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84EED0);
    swift_arrayDestroy();
    MEMORY[0x1CAA493AC](v44, -1, -1);
    v48 = v61;
    swift_arrayDestroy();
    MEMORY[0x1CAA493AC](v48, -1, -1);
    MEMORY[0x1CAA493AC](v43, -1, -1);

    (*(void (**)(char *, uint64_t))(v64 + 8))(v8, v62);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v64 + 8))(v8, v5);
  }
  return 0;
}

BOOL sub_1C9DF394C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  sub_1C9E461B0();
  sub_1C9E461BC();
  v4 = sub_1C9E461E0();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v8 + 8 * v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_QWORD *)(v8 + 8 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_1C9DF3A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_1C9E461B0();
    sub_1C9E45D3C();
    v6 = sub_1C9E461E0();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_1C9E46144() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_1C9E46144() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1C9DF3B6C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = sub_1C9E46144();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (sub_1C9E46144() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

void sub_1C9DF3C30(id *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  id v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  NSObject *v32;
  _QWORD *v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  _QWORD *v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  NSObject *v47;

  v6 = sub_1C9E457F0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1C9E45BF8();
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a1;
  v18 = objc_msgSend(*a1, sel_atxInfoSuggestionExecutableObject, v14);
  if (!v18)
  {
LABEL_8:
    v41 = 0;
    goto LABEL_9;
  }
  v19 = v18;
  v44 = v12;
  v45 = v11;
  v46 = a3;
  v20 = *(_QWORD *)(a2
                  + OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_disabledHeuristicSourceIdentifiers);
  v21 = -[NSObject sourceIdentifier](v18, sel_sourceIdentifier);
  v22 = sub_1C9E45CF4();
  v24 = v23;

  LOBYTE(v20) = sub_1C9DF3A38(v22, v24, v20);
  swift_bridgeObjectRelease();
  if ((v20 & 1) != 0)
  {
    v25 = sub_1C9DFF740();
    v27 = v44;
    v26 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v16, v25, v45);
    v28 = v17;
    v29 = sub_1C9E45BD4();
    v30 = sub_1C9E45E44();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v42 = (_QWORD *)swift_slowAlloc();
      v43 = v31;
      *(_DWORD *)v31 = 138412290;
      v47 = v28;
      v32 = v28;
      v27 = v44;
      v26 = v45;
      sub_1C9E45F1C();
      v33 = v42;
      *v42 = v28;

      v34 = v43;
      _os_log_impl(&dword_1C9A3B000, v29, v30, "ContextualEngineSuggestionStore: skipping disabled heuristic: %@", v43, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84EED0);
      swift_arrayDestroy();
      MEMORY[0x1CAA493AC](v33, -1, -1);
      MEMORY[0x1CAA493AC](v34, -1, -1);
    }
    else
    {

      v29 = v28;
      v19 = v28;
    }
    a3 = v46;

    (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v26);
    goto LABEL_8;
  }
  sub_1C9E457E4();
  v35 = sub_1C9E457D8();
  v44 = v36;
  v45 = v35;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v37 = -[NSObject widgetBundleIdentifier](v19, sel_widgetBundleIdentifier);
  sub_1C9E45CF4();

  v38 = -[NSObject appBundleIdentifier](v19, sel_appBundleIdentifier);
  sub_1C9E45CF4();

  v39 = -[NSObject widgetKind](v19, sel_widgetKind);
  sub_1C9E45CF4();

  -[NSObject intent](v19, sel_intent);
  objc_msgSend(v17, sel_scoreSpecification);
  objc_msgSend(v17, sel_clientModelSpecification);
  v40 = objc_allocWithZone((Class)sub_1C9E45A60());
  v41 = sub_1C9E45A54();

  a3 = v46;
LABEL_9:
  *a3 = v41;
}

void sub_1C9DF4018()
{
  qword_1EF9341D8 = (uint64_t)&unk_1E82EC900;
}

uint64_t sub_1C9DF402C()
{
  _QWORD *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
  if (result)
  {
    v3 = v2;
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_1C9DF4130()
{
  id v0;
  void *v1;
  id v2;

  sub_1C9E45CF4();
  v0 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v1 = (void *)sub_1C9E45CE8();
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (v2)
    qword_1EF9341E8 = (uint64_t)v2;
  else
    __break(1u);
}

uint64_t sub_1C9DF41BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_contextStore);
  if (v1)
  {
    v2 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 208))();
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      sub_1C9E46048();
      v4 = (uint64_t *)(v2 + 40);
      do
      {
        v5 = *(v4 - 1);
        v6 = *v4;
        sub_1C9DEB01C();
        (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v5, v6);
        v7 = objc_allocWithZone((Class)sub_1C9E45B14());
        sub_1C9E45AFC();
        v8 = objc_allocWithZone((Class)sub_1C9E45AA8());
        sub_1C9E45A90();
        sub_1C9E46030();
        sub_1C9E46054();
        sub_1C9E46060();
        sub_1C9E4603C();
        v4 += 2;
        --v3;
      }
      while (v3);
    }
    swift_bridgeObjectRelease();
  }
  v9 = objc_allocWithZone((Class)sub_1C9E45ACC());
  return sub_1C9E45AB4();
}

uint64_t sub_1C9DF431C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_1C9DF4334()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_1C9DF70CC();
  if (v1)
  {
    v2 = v1;
    sub_1C9DF4580();
    v4 = v3;

  }
  else
  {
    v4 = sub_1C9DF41BC();
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_1C9DF4388(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch();
}

uint64_t sub_1C9DF43A0()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v19;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  if (v1)
  {
    v3 = v2;
    v4 = (void *)objc_opt_self();
    v19 = 0;
    v5 = v3;
    v6 = objc_msgSend(v4, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v5, 1, &v19);
    v7 = v19;
    if (v6)
    {
      v8 = sub_1C9E45760();
      v10 = v9;

      if (qword_1EF9341E0 != -1)
        swift_once();
      v11 = (void *)qword_1EF9341E8;
      v12 = (void *)sub_1C9E45754();
      v13 = (void *)sub_1C9E45CE8();
      objc_msgSend(v11, sel_setObject_forKey_, v12, v13);

      sub_1C9DF7C14(v8, v10);
    }
    else
    {
      v16 = v7;
      v17 = (void *)sub_1C9E45700();

      swift_willThrow();
    }
  }
  else
  {
    if (qword_1EF9341E0 != -1)
      swift_once();
    v14 = (void *)qword_1EF9341E8;
    v15 = (void *)sub_1C9E45CE8();
    objc_msgSend(v14, sel_removeObjectForKey_, v15);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1C9DF4580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = MEMORY[0x1E0DEE9D8];
  v28 = MEMORY[0x1E0DEE9D8];
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_contextStore);
  if (v2)
    v1 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 208))();
  v26 = *(_QWORD *)(v1 + 16);
  if (!v26)
  {
LABEL_28:
    swift_bridgeObjectRelease();
    v23 = objc_allocWithZone((Class)sub_1C9E45ACC());
    sub_1C9E45AB4();
    return;
  }
  v3 = 0;
  v24 = v1;
  v25 = v1 + 32;
  while (v3 < *(_QWORD *)(v1 + 16))
  {
    v8 = (uint64_t *)(v25 + 16 * v3);
    v9 = *v8;
    v27 = v8[1];
    v10 = sub_1C9E45AC0();
    v11 = v10;
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      v12 = sub_1C9E460A8();
      if (v12)
      {
LABEL_12:
        v13 = 4;
        while (1)
        {
          if ((v11 & 0xC000000000000001) != 0)
            v14 = (id)MEMORY[0x1CAA47960](v13 - 4, v11);
          else
            v14 = *(id *)(v11 + 8 * v13);
          v15 = v14;
          v16 = v13 - 3;
          if (__OFADD__(v13 - 4, 1))
          {
            __break(1u);
            goto LABEL_30;
          }
          v17 = (void *)sub_1C9E45A9C();
          v18 = sub_1C9E45B08();
          v20 = v19;

          if (v18 == sub_1C9DEB01C() && v20 == v21)
            break;
          v22 = sub_1C9E46144();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v22 & 1) != 0)
            goto LABEL_23;

          ++v13;
          if (v16 == v12)
            goto LABEL_5;
        }
        swift_bridgeObjectRelease_n();
LABEL_23:
        v1 = v24;
        swift_bridgeObjectRelease_n();
        v6 = v15;
        MEMORY[0x1CAA476CC]();
        if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1C9E45D9C();
        sub_1C9E45DB4();
        sub_1C9E45D90();
        goto LABEL_8;
      }
    }
    else
    {
      v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v12)
        goto LABEL_12;
    }
LABEL_5:
    swift_bridgeObjectRelease_n();
    sub_1C9DEB01C();
    (*(void (**)(uint64_t, uint64_t))(v27 + 24))(v9, v27);
    v4 = objc_allocWithZone((Class)sub_1C9E45B14());
    v5 = (void *)sub_1C9E45AFC();
    objc_allocWithZone((Class)sub_1C9E45AA8());
    v6 = v5;
    v7 = (id)sub_1C9E45A90();
    MEMORY[0x1CAA476CC]();
    if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1C9E45D9C();
    sub_1C9E45DB4();
    sub_1C9E45D90();

    v1 = v24;
LABEL_8:
    ++v3;

    if (v3 == v26)
      goto LABEL_28;
  }
LABEL_30:
  __break(1u);
}

id sub_1C9DF4904()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void sub_1C9DF4924()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id sub_1C9DF497C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ContextualEngineSuggestionStore();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1C9DF4A34(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_1C9E461B0();
  swift_bridgeObjectRetain();
  sub_1C9E45D3C();
  v8 = sub_1C9E461E0();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1C9E46144() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1C9E46144() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1C9DF4EBC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1C9DF4BE0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF931BD0);
  v3 = sub_1C9E45FB8();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_1C9E461B0();
      sub_1C9E45D3C();
      result = sub_1C9E461E0();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1C9DF4EBC(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_1C9DF4BE0();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_1C9DF5054();
      goto LABEL_22;
    }
    sub_1C9DF5204();
  }
  v11 = *v4;
  sub_1C9E461B0();
  sub_1C9E45D3C();
  result = sub_1C9E461E0();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_1C9E46144(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_1C9E4615C();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_1C9E46144();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

void *sub_1C9DF5054()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF931BD0);
  v2 = *v0;
  v3 = sub_1C9E45FAC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1C9DF5204()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF931BD0);
  v3 = sub_1C9E45FB8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_1C9E461B0();
    swift_bridgeObjectRetain();
    sub_1C9E45D3C();
    result = sub_1C9E461E0();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

void sub_1C9DF54B0(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  id v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  void *v19;
  id v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (!a1[2])
  {
    swift_bridgeObjectRelease();
    return;
  }
  v43 = a1[2];
  v7 = a1[4];
  v6 = a1[5];
  v8 = (void *)a1[6];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  swift_bridgeObjectRetain();
  v10 = v8;
  v12 = sub_1C9DF5BD8(v7, v6);
  v13 = v9[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
    goto LABEL_23;
  v16 = v11;
  if (v9[3] >= v15)
  {
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1C9DF5C3C();
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    v22 = (uint64_t *)(v21[6] + 16 * v12);
    *v22 = v7;
    v22[1] = v6;
    *(_QWORD *)(v21[7] + 8 * v12) = v10;
    v23 = v21[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v25;
    v26 = v43 - 1;
    if (v43 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v27 = (void **)(a1 + 9);
    while (1)
    {
      v29 = (uint64_t)*(v27 - 2);
      v28 = (uint64_t)*(v27 - 1);
      v30 = *v27;
      v31 = (_QWORD *)*a3;
      swift_bridgeObjectRetain();
      v10 = v30;
      v32 = sub_1C9DF5BD8(v29, v28);
      v34 = v31[2];
      v35 = (v33 & 1) == 0;
      v24 = __OFADD__(v34, v35);
      v36 = v34 + v35;
      if (v24)
        break;
      v37 = v33;
      if (v31[3] < v36)
      {
        sub_1C9DF5FA4(v36, 1);
        v32 = sub_1C9DF5BD8(v29, v28);
        if ((v37 & 1) != (v38 & 1))
          goto LABEL_25;
      }
      if ((v37 & 1) != 0)
        goto LABEL_10;
      v39 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      v40 = (uint64_t *)(v39[6] + 16 * v32);
      *v40 = v29;
      v40[1] = v28;
      *(_QWORD *)(v39[7] + 8 * v32) = v10;
      v41 = v39[2];
      v24 = __OFADD__(v41, 1);
      v42 = v41 + 1;
      if (v24)
        goto LABEL_24;
      v39[2] = v42;
      v27 += 3;
      if (!--v26)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1C9DF5FA4(v15, a2 & 1);
  v17 = sub_1C9DF5BD8(v7, v6);
  if ((v16 & 1) == (v18 & 1))
  {
    v12 = v17;
    if ((v16 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = (void *)swift_allocError();
    swift_willThrow();
    v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84EF60);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n();
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_1C9E46168();
  __break(1u);
LABEL_26:
  sub_1C9E45FDC();
  sub_1C9E45D48();
  sub_1C9E46078();
  sub_1C9E45D48();
  sub_1C9E46090();
  __break(1u);
}

void sub_1C9DF583C(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  void *v18;
  id v19;
  _QWORD *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  char v39;
  _QWORD *v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v3 = a1[2];
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v7 = a1[4];
  v6 = a1[5];
  v8 = a1[7];
  v45 = a1[6];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = sub_1C9DF5BD8(v7, v6);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1C9DF5DEC();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v20 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v21 = (uint64_t *)(v20[6] + 16 * v11);
    *v21 = v7;
    v21[1] = v6;
    v22 = (_QWORD *)(v20[7] + 16 * v11);
    *v22 = v45;
    v22[1] = v8;
    v23 = v20[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v25;
    v26 = v3 - 1;
    if (v3 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v27 = a1 + 11;
    while (1)
    {
      v29 = *(v27 - 3);
      v28 = *(v27 - 2);
      v30 = *(v27 - 1);
      v31 = *v27;
      v32 = (_QWORD *)*a3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v33 = sub_1C9DF5BD8(v29, v28);
      v35 = v32[2];
      v36 = (v34 & 1) == 0;
      v24 = __OFADD__(v35, v36);
      v37 = v35 + v36;
      if (v24)
        break;
      v38 = v34;
      if (v32[3] < v37)
      {
        sub_1C9DF62B0(v37, 1);
        v33 = sub_1C9DF5BD8(v29, v28);
        if ((v38 & 1) != (v39 & 1))
          goto LABEL_25;
      }
      if ((v38 & 1) != 0)
        goto LABEL_10;
      v40 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v33 >> 6) + 64) |= 1 << v33;
      v41 = (uint64_t *)(v40[6] + 16 * v33);
      *v41 = v29;
      v41[1] = v28;
      v42 = (_QWORD *)(v40[7] + 16 * v33);
      *v42 = v30;
      v42[1] = v31;
      v43 = v40[2];
      v24 = __OFADD__(v43, 1);
      v44 = v43 + 1;
      if (v24)
        goto LABEL_24;
      v27 += 4;
      v40[2] = v44;
      if (!--v26)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1C9DF62B0(v14, a2 & 1);
  v16 = sub_1C9DF5BD8(v7, v6);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v18 = (void *)swift_allocError();
    swift_willThrow();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84EF60);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_1C9E46168();
  __break(1u);
LABEL_26:
  sub_1C9E45FDC();
  sub_1C9E45D48();
  sub_1C9E46078();
  sub_1C9E45D48();
  sub_1C9E46090();
  __break(1u);
}

unint64_t sub_1C9DF5BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1C9E461B0();
  sub_1C9E45D3C();
  v4 = sub_1C9E461E0();
  return sub_1C9DF65D4(a1, a2, v4);
}

id sub_1C9DF5C3C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(qword_1EF931AE8);
  v2 = *v0;
  v3 = sub_1C9E460B4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1C9DF5DEC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84EBB0);
  v2 = *v0;
  v3 = sub_1C9E460B4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1C9DF5FA4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(qword_1EF931AE8);
  v38 = a2;
  v6 = sub_1C9E460C0();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    sub_1C9E461B0();
    sub_1C9E45D3C();
    result = sub_1C9E461E0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1C9DF62B0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84EBB0);
  v42 = a2;
  v6 = sub_1C9E460C0();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1C9E461B0();
    sub_1C9E45D3C();
    result = sub_1C9E461E0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

unint64_t sub_1C9DF65D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1C9E46144() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1C9E46144() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1C9DF66B4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1C9DF6708(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1C9DF66D0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1C9DF6870(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1C9DF66EC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1C9DF6A14(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1C9DF6708(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84EEF0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1C9E460D8();
  __break(1u);
  return result;
}

uint64_t sub_1C9DF6870(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF931B80);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF931B88);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1C9E460D8();
  __break(1u);
  return result;
}

uint64_t sub_1C9DF6A14(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84EFC8);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8)
      memmove(v10 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF931B90);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1C9E460D8();
  __break(1u);
  return result;
}

uint64_t sub_1C9DF6B9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_1C9E45DFC();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1C9DF4A34(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1C9DF6C30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84EBA8);
    v3 = sub_1C9E45FD0();
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(_QWORD *)(v6 + 8 * v4);
      sub_1C9E461B0();
      sub_1C9E461BC();
      result = sub_1C9E461E0();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(_QWORD *)(v14 + 8 * v10) == v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(_QWORD *)(v14 + 8 * v10) == v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_QWORD *)(v14 + 8 * v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

uint64_t type metadata accessor for ContextualEngineSuggestionStore()
{
  return objc_opt_self();
}

uint64_t sub_1C9DF6D90(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  unint64_t v12;
  char v13;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  v17 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_18;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      v8 = 0;
      v9 = a1 & 0xC000000000000001;
      v15 = a2;
      while (v9)
      {
        v10 = (id)MEMORY[0x1CAA47960](v8, a1);
LABEL_9:
        v11 = v10;
        v12 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_17;
        v16 = v10;
        v13 = sub_1C9DF31D4(&v16, a2, a3);
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_release();
          return a2;
        }
        if ((v13 & 1) != 0)
        {
          sub_1C9E46030();
          sub_1C9E46054();
          v9 = a1 & 0xC000000000000001;
          sub_1C9E46060();
          sub_1C9E4603C();
          a2 = v15;
        }
        else
        {

        }
        ++v8;
        if (v12 == v7)
        {
          a2 = v17;
          goto LABEL_20;
        }
      }
      if (v8 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      v7 = sub_1C9E460A8();
      if (!v7)
        goto LABEL_19;
    }
    v10 = *(id *)(a1 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_19:
  a2 = MEMORY[0x1E0DEE9D8];
LABEL_20:
  swift_bridgeObjectRelease();
  return a2;
}

uint64_t sub_1C9DF6F38(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;

  v13 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_17;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; v4 = sub_1C9E460A8())
  {
    for (i = 4; ; ++i)
    {
      v6 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1CAA47960](i - 4, a1) : *(id *)(a1 + 8 * i);
      v7 = v6;
      v8 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v12 = v6;
      sub_1C9DF3C30(&v12, a2, &v11);
      if (v10)
      {
        swift_bridgeObjectRelease();

        return swift_bridgeObjectRelease();
      }

      if (v11)
      {
        MEMORY[0x1CAA476CC]();
        if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1C9E45D9C();
        sub_1C9E45DB4();
        sub_1C9E45D90();
      }
      if (v8 == v4)
      {
        swift_bridgeObjectRelease();
        return v13;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

id sub_1C9DF70CC()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (qword_1EF9341E0 != -1)
    swift_once();
  v0 = (void *)qword_1EF9341E8;
  v1 = (void *)sub_1C9E45CE8();
  v2 = objc_msgSend(v0, sel_dataForKey_, v1);

  if (v2)
  {
    v3 = sub_1C9E45760();
    v5 = v4;

    sub_1C9DE8EB0(0, &qword_1EF931B98);
    sub_1C9E45ACC();
    v2 = (id)sub_1C9E45E50();
    sub_1C9DF7C14(v3, v5);
  }
  return v2;
}

uint64_t sub_1C9DF71E0(unint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void *v15;
  id v16;
  id v17;
  unint64_t v19;
  uint64_t i;
  unint64_t v21;
  uint64_t v22;

  v3 = a1;
  v22 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_17;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (i = v4; i; i = sub_1C9E460A8())
  {
    v19 = v3;
    v21 = v3 & 0xC000000000000001;
    v5 = 4;
    v6 = i;
    while (1)
    {
      v7 = v21 ? (id)MEMORY[0x1CAA47960](v5 - 4, v3) : *(id *)(v3 + 8 * v5);
      v8 = v7;
      v9 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      v10 = (void *)sub_1C9E45A9C();
      v11 = sub_1C9E45B08();
      v13 = v12;

      if (*(_QWORD *)(a2 + 16) && (sub_1C9DF5BD8(v11, v13), (v14 & 1) != 0))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v15 = (void *)sub_1C9E45A9C();
        sub_1C9E45B08();

        v16 = objc_allocWithZone((Class)sub_1C9E45B14());
        sub_1C9E45AFC();
        sub_1C9E45A84();
        v17 = objc_allocWithZone((Class)sub_1C9E45AA8());
        sub_1C9E45A90();

        MEMORY[0x1CAA476CC]();
        if (*(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1C9E45D9C();
        sub_1C9E45DB4();
        sub_1C9E45D90();
        v3 = v19;
        v6 = i;
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      ++v5;
      if (v9 == v6)
      {
        swift_bridgeObjectRelease();
        return v22;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1C9DF7434(uint64_t a1, void *a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  _QWORD *v11;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v14 = MEMORY[0x1E0DEE9D8];
    sub_1C9DF66D0(0, v2, 0);
    v3 = v14;
    v5 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *(v5 - 1);
      v7 = *v5;
      v9 = *(_QWORD *)(v14 + 16);
      v8 = *(_QWORD *)(v14 + 24);
      swift_bridgeObjectRetain();
      v10 = a2;
      if (v9 >= v8 >> 1)
        sub_1C9DF66D0(v8 > 1, v9 + 1, 1);
      v5 += 2;
      *(_QWORD *)(v14 + 16) = v9 + 1;
      v11 = (_QWORD *)(v14 + 24 * v9);
      v11[4] = v6;
      v11[5] = v7;
      v11[6] = v10;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_1C9DF7524(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v16;

  v16 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_17;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      v4 = 0;
      v14 = OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_modeFilter;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v5 = (id)MEMORY[0x1CAA47960](v4, a1);
LABEL_9:
        v6 = v5;
        v7 = v4 + 1;
        if (__OFADD__(v4, 1))
          goto LABEL_16;
        sub_1C9E45A6C();
        if (!v8
          || (v9 = *(void **)(a2 + v14),
              v10 = v3,
              v11 = (void *)sub_1C9E45CE8(),
              swift_bridgeObjectRelease(),
              v12 = objc_msgSend(v9, sel_currentModeConfigurationAllowsBundleId_, v11),
              v11,
              v3 = v10,
              v12))
        {
          sub_1C9E46030();
          sub_1C9E46054();
          sub_1C9E46060();
          sub_1C9E4603C();
        }
        else
        {

        }
        ++v4;
        if (v7 == v3)
          return v16;
      }
      if (v4 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      v3 = sub_1C9E460A8();
      if (!v3)
        return MEMORY[0x1E0DEE9D8];
    }
    v5 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x1E0DEE9D8];
}

void sub_1C9DF76BC(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return;
  v40 = MEMORY[0x1E0DEE9D8];
  sub_1C9DF66D0(0, v5, 0);
  v8 = 0;
  v38 = a1 + 32;
  v35 = (_QWORD *)(a2 + 32);
  v36 = a2;
  v37 = v5;
  while (1)
  {
    v9 = (uint64_t *)(v38 + 16 * v8);
    v10 = *v9;
    v11 = v9[1];
    swift_bridgeObjectRetain();
    v13 = sub_1C9E45D30() == v10 && v12 == v11;
    v39 = v10;
    if (v13)
      break;
    v14 = sub_1C9E46144();
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
      goto LABEL_15;
    if (sub_1C9E45D24() == v39 && v15 == v11)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = sub_1C9E46144();
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0)
        goto LABEL_27;
    }
    v19 = (os_unfair_lock_s *)(*(_QWORD *)&a3[OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_lock]
                             + 24);
    os_unfair_lock_lock(v19);
    v21 = swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_35;
    if (v21)
      v22 = v21;
    else
      v22 = MEMORY[0x1E0DEE9D8];
    os_unfair_lock_unlock(v19);
    v23 = a3;
    sub_1C9DF7524(v22, (uint64_t)v23);

    swift_bridgeObjectRelease();
    v24 = type metadata accessor for BlendingContext();
    v42 = sub_1C9DEA4E8();
    v25 = sub_1C9DF09DC((unint64_t *)&unk_1EF931BA0, (uint64_t (*)(uint64_t))type metadata accessor for BlendingContext, (uint64_t)&unk_1C9E813F0);
    sub_1C9DEB094(v24, v25);
    swift_release();
    v26 = objc_allocWithZone((Class)sub_1C9E45AA8());
    v27 = sub_1C9E45A90();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF931200);
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_1C9E813D0;
    *(_QWORD *)(v28 + 32) = v27;
    v42 = v28;
    sub_1C9E45D90();
LABEL_27:
    v29 = objc_allocWithZone((Class)sub_1C9E45ACC());
    v30 = sub_1C9E45AB4();
    swift_bridgeObjectRetain();
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    v32 = *(_QWORD *)(v40 + 16);
    v31 = *(_QWORD *)(v40 + 24);
    if (v32 >= v31 >> 1)
      sub_1C9DF66D0(v31 > 1, v32 + 1, 1);
    ++v8;
    *(_QWORD *)(v40 + 16) = v32 + 1;
    v33 = (_QWORD *)(v40 + 24 * v32);
    v33[4] = v39;
    v33[5] = v11;
    v33[6] = v30;
    if (v8 == v37)
      return;
  }
  swift_bridgeObjectRelease();
LABEL_15:
  v18 = *(_QWORD *)(a2 + 16);
  if (!v18)
    goto LABEL_27;
  v42 = MEMORY[0x1E0DEE9D8];
  v19 = (os_unfair_lock_s *)&v42;
  sub_1C9E46048();
  v20 = v35;
  while (1)
  {
    sub_1C9DF2A4C(v20, &v41);
    if (v4)
      break;
    v4 = 0;
    v19 = (os_unfair_lock_s *)&v42;
    sub_1C9E46030();
    sub_1C9E46054();
    sub_1C9E46060();
    sub_1C9E4603C();
    v20 += 5;
    if (!--v18)
    {
      a2 = v36;
      goto LABEL_27;
    }
  }
  swift_release();
  __break(1u);
LABEL_35:
  os_unfair_lock_unlock(v19);
  __break(1u);
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_1C9DF7A98(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

unint64_t sub_1C9DF7AC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF931B08;
  if (!qword_1EF931B08)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EF931B10);
    result = MEMORY[0x1CAA492F8](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF931B08);
  }
  return result;
}

uint64_t sub_1C9DF7B0C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

_QWORD *initializeBufferWithCopyOfBuffer for ContextualEngineSuggestionStore.GuardedData(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ContextualEngineSuggestionStore.GuardedData()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for ContextualEngineSuggestionStore.GuardedData(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for ContextualEngineSuggestionStore.GuardedData(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ContextualEngineSuggestionStore.GuardedData()
{
  return &type metadata for ContextualEngineSuggestionStore.GuardedData;
}

void type metadata accessor for ATXProactiveSuggestionClientModelType(uint64_t a1)
{
  sub_1C9DF0868(a1, (unint64_t *)&unk_1ED84EEC0);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1C9DF0868(a1, (unint64_t *)&unk_1ED84F0A0);
}

uint64_t sub_1C9DF7BE8()
{
  return sub_1C9DF09DC((unint64_t *)&unk_1ED84EEB0, (uint64_t (*)(uint64_t))type metadata accessor for ATXProactiveSuggestionClientModelType, (uint64_t)&unk_1C9E81A04);
}

uint64_t sub_1C9DF7C14(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

unint64_t sub_1C9DF7C58()
{
  unint64_t result;

  result = qword_1EF931BB8;
  if (!qword_1EF931BB8)
  {
    result = MEMORY[0x1CAA492F8](&unk_1C9E812CC, &type metadata for JoinMeetingActionProducer);
    atomic_store(result, (unint64_t *)&qword_1EF931BB8);
  }
  return result;
}

unint64_t sub_1C9DF7C9C()
{
  unint64_t result;

  result = qword_1EF931BC0;
  if (!qword_1EF931BC0)
  {
    result = MEMORY[0x1CAA492F8](&unk_1C9E812E8, &type metadata for DoNotDisturbActionProducer);
    atomic_store(result, (unint64_t *)&qword_1EF931BC0);
  }
  return result;
}

id RelevantShortcutCandidate.widgetDescriptor.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___ATXRelevantShortcutCandidate_widgetDescriptor);
}

uint64_t RelevantShortcutCandidate.donationBundleIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___ATXRelevantShortcutCandidate_donationBundleIdentifier);
  swift_bridgeObjectRetain();
  return v1;
}

void *RelevantShortcutCandidate.intent.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR___ATXRelevantShortcutCandidate_intent);
  v2 = v1;
  return v1;
}

uint64_t RelevantShortcutCandidate.relevantContexts.getter()
{
  return swift_bridgeObjectRetain();
}

id RelevantShortcutCandidate.__allocating_init(widgetDescriptor:donationBundleIdentifier:intent:relevantContexts:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  char *v11;
  char *v12;
  objc_super v14;

  v11 = (char *)objc_allocWithZone(v5);
  *(_QWORD *)&v11[OBJC_IVAR___ATXRelevantShortcutCandidate_widgetDescriptor] = a1;
  v12 = &v11[OBJC_IVAR___ATXRelevantShortcutCandidate_donationBundleIdentifier];
  *(_QWORD *)v12 = a2;
  *((_QWORD *)v12 + 1) = a3;
  *(_QWORD *)&v11[OBJC_IVAR___ATXRelevantShortcutCandidate_intent] = a4;
  *(_QWORD *)&v11[OBJC_IVAR___ATXRelevantShortcutCandidate_relevantContexts] = a5;
  v14.receiver = v11;
  v14.super_class = v5;
  return objc_msgSendSuper2(&v14, sel_init);
}

id RelevantShortcutCandidate.init(widgetDescriptor:donationBundleIdentifier:intent:relevantContexts:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v6;
  objc_super v8;

  *(_QWORD *)&v5[OBJC_IVAR___ATXRelevantShortcutCandidate_widgetDescriptor] = a1;
  v6 = &v5[OBJC_IVAR___ATXRelevantShortcutCandidate_donationBundleIdentifier];
  *(_QWORD *)v6 = a2;
  *((_QWORD *)v6 + 1) = a3;
  *(_QWORD *)&v5[OBJC_IVAR___ATXRelevantShortcutCandidate_intent] = a4;
  *(_QWORD *)&v5[OBJC_IVAR___ATXRelevantShortcutCandidate_relevantContexts] = a5;
  v8.receiver = v5;
  v8.super_class = (Class)type metadata accessor for RelevantShortcutCandidate();
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t type metadata accessor for RelevantShortcutCandidate()
{
  return objc_opt_self();
}

id sub_1C9DF8000@<X0>(_QWORD *a1@<X8>)
{
  id v3;

  a1[3] = type metadata accessor for RelevantShortcutCandidate();
  *a1 = v3;
  return v3;
}

id RelevantShortcutCandidate.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void RelevantShortcutCandidate.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id RelevantShortcutCandidate.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RelevantShortcutCandidate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for RelevantShortcutCandidate()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RelevantShortcutCandidate.__allocating_init(widgetDescriptor:donationBundleIdentifier:intent:relevantContexts:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of RelevantShortcutCandidate.copy(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

id sub_1C9DF8170()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v1 = OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer____lazy_storage___xpcListener;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer____lazy_storage___xpcListener);
  if (v2)
  {
    v3 = *(id *)(v0
               + OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer____lazy_storage___xpcListener);
  }
  else
  {
    sub_1C9E45B98();
    v4 = objc_allocWithZone(MEMORY[0x1E0CB3B58]);
    v5 = (void *)sub_1C9E45CE8();
    swift_bridgeObjectRelease();
    v6 = objc_msgSend(v4, sel_initWithMachServiceName_, v5);

    objc_msgSend(v6, sel_setDelegate_, v0);
    v7 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v6;
    v3 = v6;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

uint64_t sub_1C9DF8234()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer_delegate;
  swift_beginAccess();
  return MEMORY[0x1CAA4943C](v1);
}

uint64_t sub_1C9DF8280(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer_delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*sub_1C9DF82E8(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1CAA4943C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return sub_1C9DF1D40;
}

id sub_1C9DF835C()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer_suggestionStore);
}

id sub_1C9DF836C(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return sub_1C9DF839C(a1);
}

id sub_1C9DF839C(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  objc_class *v8;
  id v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  objc_super v17;

  v3 = sub_1C9E45BF8();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer____lazy_storage___xpcListener] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v1[OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer_suggestionStore] = a1;
  v8 = (objc_class *)type metadata accessor for ContextualEngineInternalServer();
  v17.receiver = v1;
  v17.super_class = v8;
  v9 = a1;
  v10 = objc_msgSendSuper2(&v17, sel_init);
  v11 = sub_1C9DFF740();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v11, v3);
  v12 = sub_1C9E45BD4();
  v13 = sub_1C9E45E44();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1C9A3B000, v12, v13, "ContextualEngineInternalServer init", v14, 2u);
    MEMORY[0x1CAA493AC](v14, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v15 = sub_1C9DF8170();
  objc_msgSend(v15, sel_resume);

  return v10;
}

uint64_t type metadata accessor for ContextualEngineInternalServer()
{
  return objc_opt_self();
}

uint64_t sub_1C9DF854C(uint64_t a1, void *a2)
{
  return sub_1C9DF98AC(a2);
}

uint64_t sub_1C9DF8554()
{
  return sub_1C9DF857C(MEMORY[0x1E0DF2280], "ContextualEngineInternalServer: connection interrupted");
}

uint64_t sub_1C9DF8568()
{
  return sub_1C9DF857C(MEMORY[0x1E0DF2290], "ContextualEngineInternalServer: connection invalidated");
}

uint64_t sub_1C9DF857C(uint64_t (*a1)(void), const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v14;

  v4 = sub_1C9E45BF8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1C9DFF740();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v9, v4);
  v10 = sub_1C9E45BD4();
  v11 = a1();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_1C9A3B000, v10, v11, a2, v12, 2u);
    MEMORY[0x1CAA493AC](v12, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1C9DF86DC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_1C9DF86F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(*(_QWORD *)(v0 + 16)
                                                                  + OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer_suggestionStore))
                            + 0xB0))();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_1C9DF8868(const void *a1, void *a2)
{
  uint64_t v2;
  id v4;

  *(_QWORD *)(v2 + 16) = a2;
  *(_QWORD *)(v2 + 24) = _Block_copy(a1);
  v4 = a2;
  return swift_task_switch();
}

uint64_t sub_1C9DF88B0()
{
  uint64_t v0;
  void (**v1)(_QWORD, _QWORD, _QWORD);
  char *v2;
  void *v3;

  v2 = *(char **)(v0 + 16);
  v1 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 24);
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)&v2[OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer_suggestionStore])
                    + 0xB0))();

  sub_1C9E45ACC();
  v3 = (void *)sub_1C9E45C70();
  swift_bridgeObjectRelease();
  ((void (**)(_QWORD, void *, _QWORD))v1)[2](v1, v3, 0);

  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1C9DF8964()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_1C9DF897C()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v1 = *(int **)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(*(_QWORD *)(v0 + 16)
                                                     + OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer_suggestionStore))
               + 0xF0);
  v4 = (uint64_t (*)(void))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v2;
  *v2 = v0;
  v2[1] = sub_1C9DF89F4;
  return v4();
}

uint64_t sub_1C9DF89F4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_1C9DF8B64(const void *a1, void *a2)
{
  uint64_t v2;
  id v4;

  *(_QWORD *)(v2 + 16) = a2;
  *(_QWORD *)(v2 + 24) = _Block_copy(a1);
  v4 = a2;
  return swift_task_switch();
}

uint64_t sub_1C9DF8BAC()
{
  uint64_t v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v1 = *(int **)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(*(_QWORD *)(v0 + 16)
                                                     + OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer_suggestionStore))
               + 0xF0);
  v4 = (uint64_t (*)(void))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v2;
  *v2 = v0;
  v2[1] = sub_1C9DF8C24;
  return v4();
}

uint64_t sub_1C9DF8C24(void *a1)
{
  uint64_t *v1;
  void (**v3)(_QWORD, _QWORD, _QWORD);
  void *v4;
  uint64_t v6;

  v3 = *(void (***)(_QWORD, _QWORD, _QWORD))(*v1 + 24);
  v4 = *(void **)(*v1 + 16);
  v6 = *v1;
  swift_task_dealloc();

  ((void (**)(_QWORD, void *, _QWORD))v3)[2](v3, a1, 0);
  _Block_release(v3);

  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1C9DF8CA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_1C9DF8CB8()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD);

  v1 = *(int **)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0[3]
                                                     + OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer_suggestionStore))
               + 0xF8);
  v4 = (uint64_t (*)(_QWORD))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  v0[4] = v2;
  *v2 = v0;
  v2[1] = sub_1C9DF8D38;
  return v4(v0[2]);
}

uint64_t sub_1C9DF8D38()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1C9DF8D8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 24)) + 0x80))();
  *(_QWORD *)(v0 + 40) = v2;
  if (!v2)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = v1;
  ObjectType = swift_getObjectType();
  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v3 + 8) + *(_QWORD *)(v3 + 8));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v5;
  *v5 = v0;
  v5[1] = sub_1C9DF8E44;
  return v7(ObjectType, v3);
}

uint64_t sub_1C9DF8E44()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1C9DF8EB8()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1C9DF901C(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  id v7;
  _QWORD *v8;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = a1;
  v7 = a3;
  v8 = (_QWORD *)swift_task_alloc();
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_1C9DF90AC;
  v8[2] = v6;
  v8[3] = v7;
  return swift_task_switch();
}

uint64_t sub_1C9DF90AC()
{
  void *v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = *(void **)(*v1 + 16);
  v2 = *(void **)(*v1 + 24);
  v4 = *v1;
  swift_task_dealloc();

  v5 = *(_QWORD *)(v4 + 32);
  if (v0)
  {
    v6 = (void *)sub_1C9E456F4();

    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v5 + 16))(*(_QWORD *)(v4 + 32), 0);
  }
  _Block_release(*(const void **)(v4 + 32));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1C9DF9150()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  v2 = sub_1C9E45BF8();
  v1[3] = v2;
  v1[4] = *(_QWORD *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1C9DF91B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t);

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = sub_1C9DFF740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v5 = sub_1C9E45BD4();
  v6 = sub_1C9E45E44();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1C9A3B000, v5, v6, "ContextualEngineInternalServer: update()", v7, 2u);
    MEMORY[0x1CAA493AC](v7, -1, -1);
  }
  v9 = *(_QWORD *)(v0 + 32);
  v8 = *(_QWORD *)(v0 + 40);
  v10 = *(_QWORD **)(v0 + 16);
  v11 = *(_QWORD *)(v0 + 24);

  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v11);
  v14 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v10) + 0x80))(v12);
  *(_QWORD *)(v0 + 48) = v14;
  if (v14)
  {
    v15 = v13;
    ObjectType = swift_getObjectType();
    v19 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v15 + 8) + *(_QWORD *)(v15 + 8));
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v17;
    *v17 = v0;
    v17[1] = sub_1C9DF931C;
    return v19(ObjectType, v15);
  }
  else
  {
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1C9DF931C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1C9DF9398()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1C9DF94F0(const void *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v4;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  v4 = (_QWORD *)swift_task_alloc();
  v2[4] = v4;
  *v4 = v2;
  v4[1] = sub_1C9DF9550;
  return sub_1C9DF9150();
}

uint64_t sub_1C9DF9550()
{
  void *v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(void **)(*v1 + 16);
  v3 = *v1;
  swift_task_dealloc();

  v4 = *(_QWORD *)(v3 + 24);
  if (v0)
  {
    v5 = (void *)sub_1C9E456F4();

    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v4 + 16))(*(_QWORD *)(v3 + 24), 0);
  }
  _Block_release(*(const void **)(v3 + 24));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

void sub_1C9DF95F0()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id sub_1C9DF9648()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ContextualEngineInternalServer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1C9DF96C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_1C9DF0A2C;
  return v6();
}

uint64_t sub_1C9DF9714(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_1C9DF0A2C;
  return v7();
}

uint64_t sub_1C9DF9768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1C9E45DE4();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1C9E45DD8();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1C9DF1AF0(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1C9E45DCC();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1C9DF98AC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t aBlock;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  void *v21;
  uint64_t (*v22)();
  uint64_t v23;

  v2 = v1;
  v4 = sub_1C9E45BF8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1C9DFF740();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v9, v4);
  v10 = sub_1C9E45BD4();
  v11 = sub_1C9E45E44();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_1C9A3B000, v10, v11, "ContextualEngineInternalServer: incoming connection", v12, 2u);
    MEMORY[0x1CAA493AC](v12, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v13 = (void *)sub_1C9E45B74();
  objc_msgSend(a1, sel_setExportedInterface_, v13);

  objc_msgSend(a1, sel_setExportedObject_, v2);
  v22 = sub_1C9DF8554;
  v23 = 0;
  v14 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v19 = 1107296256;
  v20 = sub_1C9DE98D8;
  v21 = &block_descriptor_1;
  v15 = _Block_copy(&aBlock);
  objc_msgSend(a1, sel_setInterruptionHandler_, v15);
  _Block_release(v15);
  v22 = sub_1C9DF8568;
  v23 = 0;
  aBlock = v14;
  v19 = 1107296256;
  v20 = sub_1C9DE98D8;
  v21 = &block_descriptor_72;
  v16 = _Block_copy(&aBlock);
  objc_msgSend(a1, sel_setInvalidationHandler_, v16);
  _Block_release(v16);
  objc_msgSend(a1, sel_resume);
  return 1;
}

uint64_t sub_1C9DF9AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 8) + *(_QWORD *)(a2 + 8));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1C9DF080C;
  return v7(a1, a2);
}

uint64_t sub_1C9DF9B20()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1C9DF0A2C;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1EF931D10 + dword_1EF931D10))(v2, v3);
}

uint64_t sub_1C9DF9B88()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1C9DF0A2C;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1EF931D20 + dword_1EF931D20))(v2, v3, v4);
}

uint64_t sub_1C9DF9C04(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1C9DF0A2C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1EF931D30 + dword_1EF931D30))(a1, v4, v5, v6);
}

uint64_t sub_1C9DF9C88()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C9DF9CAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1C9DF0A2C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EF931D40 + dword_1EF931D40))(a1, v4);
}

uint64_t sub_1C9DF9D1C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_1C9DF9D50()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1C9DF0A2C;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_1EF931D50 + dword_1EF931D50))(v2, v3, v4);
}

uint64_t sub_1C9DF9DC8()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1C9DF0A2C;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1EF931D70 + dword_1EF931D70))(v2, v3);
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_1C9DF9E64()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1C9DF080C;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1EF931D90 + dword_1EF931D90))(v2, v3);
}

uint64_t objectdestroy_11Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

id ATXCompanionBundleIdMapper.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id ATXCompanionBundleIdMapper.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ATXCompanionBundleIdMapper();
  return objc_msgSendSuper2(&v2, sel_init);
}

id ATXCompanionBundleIdMapper.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ATXCompanionBundleIdMapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_1C9DFA04C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1C9E45F58();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1C9E461B0();
        swift_bridgeObjectRetain();
        sub_1C9E45D3C();
        v9 = sub_1C9E461E0();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t _s21AppPredictionInternal26ATXCompanionBundleIdMapperC15generateMapping3forSDyS2SGSaySSG_tFZ_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  char v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t result;
  id v31;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9E0];
  v31 = (id)objc_opt_self();
  swift_bridgeObjectRetain();
  v3 = (uint64_t *)(a1 + 40);
  v4 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  while (1)
  {
    v7 = *(v3 - 1);
    v6 = *v3;
    swift_bridgeObjectRetain();
    v8 = (void *)sub_1C9E45CE8();
    v9 = objc_msgSend(v31, sel_companionBundleIdForBundleId_, v8);

    if (!v9)
    {
      swift_bridgeObjectRetain();
      v22 = sub_1C9DF5BD8(v7, v6);
      v24 = v23;
      swift_bridgeObjectRelease();
      if ((v24 & 1) == 0)
        goto LABEL_5;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_1C9DF5DEC();
      swift_bridgeObjectRelease();
      sub_1C9DFA04C(v22, (uint64_t)v4);
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
    v10 = sub_1C9E45CF4();
    v12 = v11;

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = sub_1C9DF5BD8(v7, v6);
    v16 = v4[2];
    v17 = (v14 & 1) == 0;
    v18 = v16 + v17;
    if (__OFADD__(v16, v17))
      break;
    v19 = v14;
    if (v4[3] >= v18)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v14 & 1) == 0)
          goto LABEL_18;
      }
      else
      {
        sub_1C9DF5DEC();
        if ((v19 & 1) == 0)
          goto LABEL_18;
      }
    }
    else
    {
      sub_1C9DF62B0(v18, isUniquelyReferenced_nonNull_native);
      v20 = sub_1C9DF5BD8(v7, v6);
      if ((v19 & 1) != (v21 & 1))
        goto LABEL_28;
      v15 = v20;
      if ((v19 & 1) == 0)
      {
LABEL_18:
        v4[(v15 >> 6) + 8] |= 1 << v15;
        v25 = (uint64_t *)(v4[6] + 16 * v15);
        *v25 = v7;
        v25[1] = v6;
        v26 = (uint64_t *)(v4[7] + 16 * v15);
        *v26 = v10;
        v26[1] = v12;
        v27 = v4[2];
        v28 = __OFADD__(v27, 1);
        v29 = v27 + 1;
        if (v28)
          goto LABEL_27;
        v4[2] = v29;
        swift_bridgeObjectRetain();
        goto LABEL_4;
      }
    }
    v5 = (uint64_t *)(v4[7] + 16 * v15);
    swift_bridgeObjectRelease();
    *v5 = v10;
    v5[1] = v12;
LABEL_4:
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    v3 += 2;
    if (!--v1)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v4;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  result = sub_1C9E46168();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ATXCompanionBundleIdMapper()
{
  return objc_opt_self();
}

uint64_t sub_1C9DFA4EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_identifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1C9DFA524()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_maxCredits);
}

uint64_t sub_1C9DFA534()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_secondsToReplenishOneCredit);
}

uint64_t sub_1C9DFA544()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_loggingSubsystem);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1C9DFA57C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_loggingCategory);
  swift_bridgeObjectRetain();
  return v1;
}

id PowerThrottlingCreditPool.Config.__allocating_init(identifier:maxCredits:secondsToReplenishOneCredit:loggingSubsystem:loggingCategory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  objc_class *v8;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  objc_super v22;

  v17 = (char *)objc_allocWithZone(v8);
  v18 = &v17[OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_identifier];
  *(_QWORD *)v18 = a1;
  *((_QWORD *)v18 + 1) = a2;
  *(_QWORD *)&v17[OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_maxCredits] = a3;
  *(_QWORD *)&v17[OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_secondsToReplenishOneCredit] = a4;
  v19 = &v17[OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_loggingSubsystem];
  *(_QWORD *)v19 = a5;
  *((_QWORD *)v19 + 1) = a6;
  v20 = &v17[OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_loggingCategory];
  *(_QWORD *)v20 = a7;
  *((_QWORD *)v20 + 1) = a8;
  v22.receiver = v17;
  v22.super_class = v8;
  return objc_msgSendSuper2(&v22, sel_init);
}

id PowerThrottlingCreditPool.Config.init(identifier:maxCredits:secondsToReplenishOneCredit:loggingSubsystem:loggingCategory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  objc_super v13;

  v9 = &v8[OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_identifier];
  *(_QWORD *)v9 = a1;
  *((_QWORD *)v9 + 1) = a2;
  *(_QWORD *)&v8[OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_maxCredits] = a3;
  *(_QWORD *)&v8[OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_secondsToReplenishOneCredit] = a4;
  v10 = &v8[OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_loggingSubsystem];
  *(_QWORD *)v10 = a5;
  *((_QWORD *)v10 + 1) = a6;
  v11 = &v8[OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_loggingCategory];
  *(_QWORD *)v11 = a7;
  *((_QWORD *)v11 + 1) = a8;
  v13.receiver = v8;
  v13.super_class = (Class)type metadata accessor for PowerThrottlingCreditPool.Config();
  return objc_msgSendSuper2(&v13, sel_init);
}

uint64_t type metadata accessor for PowerThrottlingCreditPool.Config()
{
  return objc_opt_self();
}

id PowerThrottlingCreditPool.Config.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void PowerThrottlingCreditPool.Config.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id PowerThrottlingCreditPool.Config.__deallocating_deinit(uint64_t a1)
{
  return sub_1C9DFBBB0(a1, type metadata accessor for PowerThrottlingCreditPool.Config);
}

id sub_1C9DFA8BC()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

id sub_1C9DFA8C4()
{
  uint64_t v0;

  return *(id *)(v0 + 24);
}

uint64_t sub_1C9DFA8CC(void *a1)
{
  swift_allocObject();
  return sub_1C9DFA904(a1);
}

uint64_t sub_1C9DFA904(void *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  void *v5;
  id v6;

  *(_QWORD *)(v1 + 24) = a1;
  sub_1C9E45CF4();
  v3 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v4 = a1;
  v5 = (void *)sub_1C9E45CE8();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v3, sel_initWithSuiteName_, v5);

  if (v6)
  {
    *(_QWORD *)(v1 + 16) = v6;
  }
  else
  {

    type metadata accessor for PowerThrottlingCreditPool.State();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v1;
}

uint64_t type metadata accessor for PowerThrottlingCreditPool.State()
{
  return objc_opt_self();
}

unint64_t sub_1C9DFA9F0()
{
  sub_1C9E45FDC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1C9E45D48();
  swift_bridgeObjectRelease();
  sub_1C9E45D48();
  sub_1C9E45D48();
  return 0xD000000000000020;
}

id sub_1C9DFAABC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;

  v1 = *(void **)(v0 + 16);
  sub_1C9DFA9F0();
  v2 = (void *)sub_1C9E45CE8();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, sel_integerForKey_, v2);

  return v3;
}

void sub_1C9DFAB2C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;

  v1 = *(void **)(v0 + 16);
  v2 = (void *)sub_1C9E45E14();
  sub_1C9DFA9F0();
  v3 = (id)sub_1C9E45CE8();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setValue_forKey_, v2, v3);

}

void (*sub_1C9DFABAC(id *a1))()
{
  void *v1;

  a1[1] = v1;
  *a1 = sub_1C9DFAABC();
  return sub_1C9DFABE0;
}

void sub_1C9DFABE0()
{
  sub_1C9DFAB2C();
}

double sub_1C9DFAC00()
{
  uint64_t v0;
  void *v1;
  void *v2;
  double v3;
  double v4;

  v1 = *(void **)(v0 + 16);
  sub_1C9DFA9F0();
  v2 = (void *)sub_1C9E45CE8();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_doubleForKey_, v2);
  v4 = v3;

  return v4;
}

void sub_1C9DFAC7C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;

  v1 = *(void **)(v0 + 16);
  v2 = (void *)sub_1C9E45DF0();
  sub_1C9DFA9F0();
  v3 = (id)sub_1C9E45CE8();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setValue_forKey_, v2, v3);

}

void (*sub_1C9DFAD00(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(void **)(v1 + 16);
  a1[1] = v1;
  a1[2] = v3;
  sub_1C9DFA9F0();
  v4 = (void *)sub_1C9E45CE8();
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_doubleForKey_, v4);
  v6 = v5;

  *a1 = v6;
  return sub_1C9DFAD90;
}

void sub_1C9DFAD90(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;

  v1 = *(void **)(a1 + 16);
  v3 = (id)sub_1C9E45DF0();
  sub_1C9DFA9F0();
  v2 = (void *)sub_1C9E45CE8();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setValue_forKey_, v3, v2);

}

uint64_t sub_1C9DFAE18()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v1 = *(void **)(v0 + 16);
  sub_1C9DFA9F0();
  v2 = (void *)sub_1C9E45CE8();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, sel_objectForKey_, v2);

  if (v3)
  {
    sub_1C9E45F40();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_1C9DFAF18((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    if (swift_dynamicCast())
      return v5;
  }
  else
  {
    sub_1C9DFAF60((uint64_t)v7);
  }
  return *(_QWORD *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_secondsToReplenishOneCredit);
}

uint64_t sub_1C9DFAF18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84EEF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C9DFAF60(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84EEF8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C9DFAFA0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1C9DFAFC4()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t sub_1C9DFAFF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v0 = sub_1C9E45E5C();
  MEMORY[0x1E0C80A78](v0, v1);
  v2 = sub_1C9E45C4C();
  MEMORY[0x1E0C80A78](v2, v3);
  v4 = sub_1C9E45E68();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C9DE9C64();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E0DEF8D8], v4);
  sub_1C9E45C40();
  v10[1] = MEMORY[0x1E0DEE9D8];
  sub_1C9DFB170();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84F050);
  sub_1C9DFB1B8();
  sub_1C9E45F4C();
  return sub_1C9E45E80();
}

unint64_t sub_1C9DFB170()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED84F0B0;
  if (!qword_1ED84F0B0)
  {
    v1 = sub_1C9E45E5C();
    result = MEMORY[0x1CAA492F8](MEMORY[0x1E0DEF828], v1);
    atomic_store(result, (unint64_t *)&qword_1ED84F0B0);
  }
  return result;
}

unint64_t sub_1C9DFB1B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED84F060[0];
  if (!qword_1ED84F060[0])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1ED84F050);
    result = MEMORY[0x1CAA492F8](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, qword_1ED84F060);
  }
  return result;
}

id PowerThrottlingCreditPool.__allocating_init(config:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = sub_1C9DFBC50(a1);

  return v4;
}

id PowerThrottlingCreditPool.init(config:)(void *a1)
{
  id v2;

  v2 = sub_1C9DFBC50(a1);

  return v2;
}

uint64_t sub_1C9DFB2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v14[6];

  v7 = *(NSObject **)&v3[OBJC_IVAR___ATXPowerThrottlingCreditPool_queue];
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v3;
  v8[3] = a1;
  v8[4] = a2;
  v8[5] = a3;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = sub_1C9DFBF1C;
  *(_QWORD *)(v9 + 24) = v8;
  v14[4] = sub_1C9DFBF38;
  v14[5] = v9;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1107296256;
  v14[2] = sub_1C9DFBAC0;
  v14[3] = &block_descriptor_2;
  v10 = _Block_copy(v14);
  v11 = v3;
  swift_retain();
  swift_release();
  dispatch_sync(v7, v10);
  _Block_release(v10);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

void sub_1C9DFB3D8(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  os_log_type_t v16;
  BOOL v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint8_t *v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t (*v45)(_QWORD *, _QWORD);
  _QWORD *v46;
  uint64_t v47;
  void (*v48)(_QWORD *, _QWORD);
  _QWORD *v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(void);
  uint64_t v61;
  NSObject *v62;
  _QWORD v63[4];

  v8 = sub_1C9E457CC();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + OBJC_IVAR___ATXPowerThrottlingCreditPool_state);
  if (!v13)
  {
    v62 = sub_1C9E45BD4();
    v22 = sub_1C9E45E44();
    if (os_log_type_enabled(v62, (os_log_type_t)v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_1C9A3B000, v62, (os_log_type_t)v22, "PowerThrottlingCreditPool: Failed to initialize state. Dropping request.", v23, 2u);
      MEMORY[0x1CAA493AC](v23, -1, -1);
    }

    return;
  }
  v59 = a4;
  v60 = a3;
  v14 = (a1 + OBJC_IVAR___ATXPowerThrottlingCreditPool_logger);
  swift_retain_n();
  v62 = v14;
  v15 = sub_1C9E45BD4();
  v16 = sub_1C9E45E44();
  v17 = os_log_type_enabled(v15, v16);
  v61 = a2;
  if (v17)
  {
    v18 = (_DWORD *)swift_slowAlloc();
    v58 = v8;
    v19 = v18;
    *v18 = 134218240;
    v63[0] = a2;
    v20 = sub_1C9E45F1C();
    *((_WORD *)v19 + 6) = 2048;
    v63[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 112))(v20);
    sub_1C9E45F1C();
    swift_release();
    _os_log_impl(&dword_1C9A3B000, v15, v16, "PowerThrottlingCreditPool: Request to consume %ld credits. Currently at %ld before replenishing", (uint8_t *)v19, 0x16u);
    v21 = v19;
    v8 = v58;
    MEMORY[0x1CAA493AC](v21, -1, -1);
  }
  else
  {
    swift_release();
  }

  sub_1C9E457B4();
  sub_1C9E4576C();
  v25 = v24;
  v26 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v27 = v25 - (*(double (**)(uint64_t))(*(_QWORD *)v13 + 136))(v26);
  if ((~*(_QWORD *)&v27 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v27 <= -9.22337204e18)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v27 >= 9.22337204e18)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v28 = *(_QWORD *)(*(_QWORD *)(a1 + OBJC_IVAR___ATXPowerThrottlingCreditPool_config)
                  + OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_maxCredits);
  v29 = *(uint64_t (**)(void))(*(_QWORD *)v13 + 112);
  v30 = v29();
  v31 = __OFSUB__(v28, v30);
  v32 = v28 - v30;
  if (v31)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v33 = (*(uint64_t (**)(void))(*(_QWORD *)v13 + 160))();
  if (!v33)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v34 = (uint64_t)v27;
  if ((uint64_t)v27 == 0x8000000000000000 && v33 == -1)
    goto LABEL_44;
  if ((v32 & ~(v32 >> 63)) >= v34 / v33)
    v36 = v34 / v33;
  else
    v36 = v32 & ~(v32 >> 63);
  v37 = v36 & ~(v36 >> 63);
  v38 = sub_1C9E45BD4();
  v39 = sub_1C9E45E44();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = swift_slowAlloc();
    *(_DWORD *)v40 = 134218240;
    v63[0] = (uint64_t)v27;
    sub_1C9E45F1C();
    *(_WORD *)(v40 + 12) = 2048;
    v63[0] = v36 & ~(v36 >> 63);
    sub_1C9E45F1C();
    _os_log_impl(&dword_1C9A3B000, v38, v39, "PowerThrottlingCreditPool: secondsSinceLastReplenish: %ld creditsToReplenish: %ld", (uint8_t *)v40, 0x16u);
    MEMORY[0x1CAA493AC](v40, -1, -1);
  }

  if (v36 < 1)
    goto LABEL_27;
  v42 = sub_1C9E45BD4();
  v43 = sub_1C9E45E44();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v44 = 134217984;
    v63[0] = v36 & ~(v36 >> 63);
    sub_1C9E45F1C();
    _os_log_impl(&dword_1C9A3B000, v42, v43, "PowerThrottlingCreditPool: Replenishing %ld credits and setting timestampLastReplenished", v44, 0xCu);
    MEMORY[0x1CAA493AC](v44, -1, -1);
  }

  v45 = (uint64_t (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v13 + 128))(v63);
  if (__OFADD__(*v46, v37))
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    return;
  }
  *v46 += v37;
  v47 = v45(v63, 0);
  v41 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v13 + 144))(v47, v25);
LABEL_27:
  if (((uint64_t (*)(uint64_t))v29)(v41) > 0)
  {
    v48 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(*(_QWORD *)v13 + 128))(v63);
    if (!__OFSUB__(*v49, v61))
    {
      *v49 -= v61;
      v48(v63, 0);
      swift_retain();
      v50 = sub_1C9E45BD4();
      v51 = sub_1C9E45E44();
      if (os_log_type_enabled(v50, v51))
      {
        v52 = swift_slowAlloc();
        *(_DWORD *)v52 = 134218240;
        v63[0] = v61;
        v53 = sub_1C9E45F1C();
        *(_WORD *)(v52 + 12) = 2048;
        v63[0] = ((uint64_t (*)(uint64_t))v29)(v53);
        sub_1C9E45F1C();
        swift_release();
        _os_log_impl(&dword_1C9A3B000, v50, v51, "PowerThrottlingCreditPool: Running block and consuming %ld credits, remaining credits: %ld", (uint8_t *)v52, 0x16u);
        MEMORY[0x1CAA493AC](v52, -1, -1);
      }
      else
      {
        swift_release();
      }

      v60();
      goto LABEL_35;
    }
    goto LABEL_43;
  }
  swift_retain();
  v54 = sub_1C9E45BD4();
  v55 = sub_1C9E45E44();
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v56 = 134217984;
    v63[0] = v29();
    sub_1C9E45F1C();
    swift_release();
    _os_log_impl(&dword_1C9A3B000, v54, v55, "PowerThrottlingCreditPool: Not enought credits to run block. Dropping request. credits: %ld", v56, 0xCu);
    MEMORY[0x1CAA493AC](v56, -1, -1);

LABEL_35:
    swift_release();
    return;
  }

  swift_release_n();
}

uint64_t sub_1C9DFBAC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void PowerThrottlingCreditPool.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id PowerThrottlingCreditPool.__deallocating_deinit()
{
  return sub_1C9DFBBB0(0, type metadata accessor for PowerThrottlingCreditPool);
}

id sub_1C9DFBBB0(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

id sub_1C9DFBC50(void *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  id v17;
  char *v18;
  objc_class *v19;
  uint64_t v21;
  id v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  objc_super v26;
  uint64_t v27;

  v22 = a1;
  v2 = sub_1C9E45BF8();
  v24 = *(_QWORD *)(v2 - 8);
  v25 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v23 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1C9E45E5C();
  MEMORY[0x1E0C80A78](v5, v6);
  v7 = sub_1C9E45C4C();
  MEMORY[0x1E0C80A78](v7, v8);
  v9 = sub_1C9E45E68();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = OBJC_IVAR___ATXPowerThrottlingCreditPool_queue;
  sub_1C9DE9C64();
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v13, *MEMORY[0x1E0DEF8D8], v9);
  v15 = v1;
  sub_1C9E45C40();
  v27 = MEMORY[0x1E0DEE9D8];
  sub_1C9DFB170();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84F050);
  sub_1C9DFB1B8();
  sub_1C9E45F4C();
  *(_QWORD *)&v1[v14] = sub_1C9E45E80();
  type metadata accessor for PowerThrottlingCreditPool.State();
  swift_allocObject();
  v16 = v22;
  *(_QWORD *)&v15[OBJC_IVAR___ATXPowerThrottlingCreditPool_state] = sub_1C9DFA904(v16);
  *(_QWORD *)&v15[OBJC_IVAR___ATXPowerThrottlingCreditPool_config] = v16;
  v17 = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = v23;
  sub_1C9E45BE0();
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v15[OBJC_IVAR___ATXPowerThrottlingCreditPool_logger], v18, v25);

  v19 = (objc_class *)type metadata accessor for PowerThrottlingCreditPool();
  v26.receiver = v15;
  v26.super_class = v19;
  return objc_msgSendSuper2(&v26, sel_init);
}

uint64_t sub_1C9DFBEF8()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1C9DFBF1C()
{
  uint64_t v0;

  sub_1C9DFB3D8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(void))(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1C9DFBF28()
{
  return swift_deallocObject();
}

uint64_t sub_1C9DFBF38()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t type metadata accessor for PowerThrottlingCreditPool()
{
  uint64_t result;

  result = qword_1ED84F500;
  if (!qword_1ED84F500)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1C9DFBFAC()
{
  return type metadata accessor for PowerThrottlingCreditPool();
}

uint64_t sub_1C9DFBFB4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C9E45BF8();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for PowerThrottlingCreditPool()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PowerThrottlingCreditPool.__allocating_init(config:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of PowerThrottlingCreditPool.consume(credits:toRun:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t method lookup function for PowerThrottlingCreditPool.Config()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PowerThrottlingCreditPool.Config.__allocating_init(identifier:maxCredits:secondsToReplenishOneCredit:loggingSubsystem:loggingCategory:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_1C9DFC07C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1C9DFC08C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = a2;
  v3 = sub_1C9E457CC();
  v2[7] = v3;
  v2[8] = *(_QWORD *)(v3 - 8);
  v2[9] = swift_task_alloc();
  v4 = sub_1C9E45BF8();
  v2[10] = v4;
  v2[11] = *(_QWORD *)(v4 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1C9DFC13C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  _QWORD *v13;

  v1 = v0[15];
  v2 = v0[10];
  v3 = v0[11];
  v4 = sub_1C9DE79D4();
  v0[16] = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[17] = (uint64_t)v5;
  v5(v1, v4, v2);
  v6 = sub_1C9E45BD4();
  v7 = sub_1C9E45E44();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1C9A3B000, v6, v7, "createSuggestions", v8, 2u);
    MEMORY[0x1CAA493AC](v8, -1, -1);
  }
  v9 = v0[15];
  v10 = v0[10];
  v11 = v0[11];

  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v0[18] = (uint64_t)v12;
  v12(v9, v10);
  sub_1C9E45778();
  type metadata accessor for SportsContextProducer();
  v0[19] = sub_1C9DEA4E8();
  v13 = (_QWORD *)swift_task_alloc();
  v0[20] = (uint64_t)v13;
  *v13 = v0;
  v13[1] = sub_1C9DFC288;
  return sub_1C9E0E6B0(v0[5], v0[9]);
}

uint64_t sub_1C9DFC288(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 168) = a1;
  *(_QWORD *)(v3 + 176) = v1;
  swift_task_dealloc();
  if (!v1)
    swift_release();
  return swift_task_switch();
}

uint64_t sub_1C9DFC2FC()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27[2];

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 136))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 80));
  swift_bridgeObjectRetain();
  v1 = sub_1C9E45BD4();
  v2 = sub_1C9E45E44();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = *(_QWORD *)(v0 + 168);
    v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v4 = 134217984;
    *(_QWORD *)(v0 + 32) = *(_QWORD *)(v3 + 16);
    sub_1C9E45F1C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9A3B000, v1, v2, "Contexts created %ld", v4, 0xCu);
    MEMORY[0x1CAA493AC](v4, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  v5 = *(_QWORD *)(v0 + 168);
  (*(void (**)(_QWORD, _QWORD))(v0 + 144))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 80));
  type metadata accessor for SportsSuggestionProducer();
  sub_1C9DEA4E8();
  v6 = MEMORY[0x1E0DEE9D8];
  v25 = MEMORY[0x1E0DEE9D8];
  v7 = *(_QWORD *)(v5 + 16);
  if (v7)
  {
    v9 = *(_QWORD *)(v0 + 168);
    v8 = *(_QWORD *)(v0 + 176);
    v10 = *(_QWORD *)(v9 + 32);
    swift_bridgeObjectRetain();
    v26 = v10;
    swift_bridgeObjectRetain();
    sub_1C9DFC8A8(&v26, v27);
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    sub_1C9DFD29C(v27[0]);
    v12 = v7 - 1;
    if (v12)
    {
      v13 = (uint64_t *)(v9 + 40);
      do
      {
        v26 = *v13;
        swift_bridgeObjectRetain();
        sub_1C9DFC8A8(&v26, v27);
        swift_bridgeObjectRelease();
        sub_1C9DFD29C(v27[0]);
        ++v13;
        --v12;
      }
      while (v12);
    }
    swift_bridgeObjectRelease();
    v6 = v25;
  }
  v14 = *(_QWORD *)(v0 + 128);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 136);
  v16 = *(_QWORD *)(v0 + 104);
  v17 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRelease();
  v15(v16, v14, v17);
  swift_bridgeObjectRetain_n();
  v18 = sub_1C9E45BD4();
  v19 = sub_1C9E45E44();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v20 = 134217984;
    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      v21 = sub_1C9E460A8();
      swift_bridgeObjectRelease();
    }
    else
    {
      v21 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 24) = v21;
    sub_1C9E45F1C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9A3B000, v18, v19, "Created total suggestions %ld", v20, 0xCu);
    MEMORY[0x1CAA493AC](v20, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  swift_release();

  v22 = *(_QWORD *)(v0 + 72);
  v23 = *(_QWORD *)(v0 + 56);
  v24 = *(_QWORD *)(v0 + 64);
  (*(void (**)(_QWORD, _QWORD))(v0 + 144))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v6);
}

uint64_t sub_1C9DFC6AC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  uint8_t *v11;
  _QWORD *v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(void **)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 136);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 80);
  swift_release();
  v3(v4, v2, v5);
  v6 = v1;
  v7 = v1;
  v8 = sub_1C9E45BD4();
  v9 = sub_1C9E45E2C();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = *(void **)(v0 + 176);
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v11 = 138412290;
    v13 = v10;
    v14 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 16) = v14;
    sub_1C9E45F1C();
    *v12 = v14;

    _os_log_impl(&dword_1C9A3B000, v8, v9, "Context producer error: %@", v11, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84EED0);
    swift_arrayDestroy();
    MEMORY[0x1CAA493AC](v12, -1, -1);
    MEMORY[0x1CAA493AC](v11, -1, -1);
  }
  else
  {
    v15 = *(void **)(v0 + 176);

  }
  v16 = *(void **)(v0 + 176);
  v17 = *(_QWORD *)(v0 + 72);
  v18 = *(_QWORD *)(v0 + 56);
  v19 = *(_QWORD *)(v0 + 64);
  (*(void (**)(_QWORD, _QWORD))(v0 + 144))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));

  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x1E0DEE9D8]);
}

uint64_t sub_1C9DFC8A8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *boxed_opaque_existential_0;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[4];
  uint64_t v54;

  v50 = a2;
  v49 = sub_1C9E45BF8();
  v47 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49, v3);
  v48 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SportsContextEntry(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v46 - v12;
  v51 = *a1;
  v14 = *(_QWORD *)(v51 + 16);
  v15 = MEMORY[0x1E0DEE9D8];
  if (v14)
  {
    if (v14 == 2)
    {
      v16 = v51 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      sub_1C9DFD85C(v16, (uint64_t)&v46 - v12, type metadata accessor for SportsContextEntry);
      sub_1C9DFD85C(v16 + *(_QWORD *)(v6 + 72), (uint64_t)v9, type metadata accessor for SportsContextEntry);
      v17 = sub_1C9E00CF4();
      v19 = v18;
      v20 = (uint64_t)&v13[*(int *)(v5 + 24)];
      v53[3] = type metadata accessor for SportsDependencies(0);
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v53);
      sub_1C9DFD85C(v20, (uint64_t)boxed_opaque_existential_0, type metadata accessor for SportsDependencies);
      v22 = sub_1C9E08250(v17, v19, (uint64_t)v53);
      swift_bridgeObjectRelease();
      v23 = __swift_destroy_boxed_opaque_existential_0((uint64_t)v53);
      MEMORY[0x1E0C80A78](v23, v24);
      *(&v46 - 2) = (uint64_t)v13;
      *(&v46 - 1) = (uint64_t)v9;
      v25 = sub_1C9DFD184((_QWORD *(*)(uint64_t *__return_ptr, uint64_t))sub_1C9DFD8A0, (uint64_t)(&v46 - 4), (uint64_t)v22);
      sub_1C9DFD7A4((uint64_t)v9);
      sub_1C9DFD7A4((uint64_t)v13);
      result = swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    v53[0] = MEMORY[0x1E0DEE9D8];
    v38 = v14;
    sub_1C9DF66B4(0, v14, 0);
    v39 = v51 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v52 = *(_QWORD *)(v6 + 72);
    v46 = v38;
    do
    {
      sub_1C9DFD85C(v39, (uint64_t)v9, type metadata accessor for SportsContextEntry);
      sub_1C9E457CC();
      sub_1C9DFD75C();
      v40 = sub_1C9E46138();
      v42 = v41;
      sub_1C9DFD7A4((uint64_t)v9);
      v15 = v53[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1C9DF66B4(0, *(_QWORD *)(v15 + 16) + 1, 1);
        v15 = v53[0];
      }
      v44 = *(_QWORD *)(v15 + 16);
      v43 = *(_QWORD *)(v15 + 24);
      if (v44 >= v43 >> 1)
      {
        sub_1C9DF66B4(v43 > 1, v44 + 1, 1);
        v15 = v53[0];
      }
      *(_QWORD *)(v15 + 16) = v44 + 1;
      v45 = v15 + 16 * v44;
      *(_QWORD *)(v45 + 32) = v40;
      *(_QWORD *)(v45 + 40) = v42;
      v39 += v52;
      --v38;
    }
    while (v38);
  }
  else
  {
    v46 = 0;
  }
  v53[0] = v15;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF931B10);
  sub_1C9DFD7E0((unint64_t *)&qword_1EF931E00, (uint64_t *)&unk_1EF931B10, MEMORY[0x1E0DEAF20]);
  v27 = sub_1C9E45CA0();
  v29 = v28;
  swift_bridgeObjectRelease();
  v30 = sub_1C9DE79D4();
  v32 = v47;
  v31 = v48;
  v33 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v48, v30, v49);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v34 = sub_1C9E45BD4();
  v35 = sub_1C9E45E2C();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = swift_slowAlloc();
    v37 = swift_slowAlloc();
    v53[0] = v37;
    *(_DWORD *)v36 = 134218242;
    swift_bridgeObjectRelease();
    v54 = v46;
    sub_1C9E45F1C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 12) = 2080;
    swift_bridgeObjectRetain();
    v54 = sub_1C9DEDEE0(v27, v29, v53);
    sub_1C9E45F1C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C9A3B000, v34, v35, "Context pair error %ld: %s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CAA493AC](v37, -1, -1);
    MEMORY[0x1CAA493AC](v36, -1, -1);

    result = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v48, v49);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    result = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v31, v33);
  }
  v25 = MEMORY[0x1E0DEE9D8];
LABEL_16:
  *v50 = v25;
  return result;
}

uint64_t sub_1C9DFCDC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  void (*v32)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  void (*v42)(char *, uint64_t);
  uint8_t *v43;
  uint64_t v44;
  uint64_t result;
  uint8_t *v46;
  uint8_t *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;

  v53 = a4;
  v7 = sub_1C9E45BF8();
  v51 = *(_QWORD *)(v7 - 8);
  v52 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v50 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F028);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v46 - v16;
  v18 = sub_1C9E457CC();
  v19 = *(_QWORD **)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v49 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v46 - v24;
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v46 - v28;
  v30 = *(_QWORD *)(a1 + 16);
  sub_1C9DFFDD8(v30, a2, a3, (uint64_t)&v46 - v28);
  sub_1C9E00158(v30, a2, a3, (uint64_t)v25);
  v31 = (void (*)(char *, char *, uint64_t))v19[2];
  v31(v17, v29, v18);
  v32 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v19[7];
  v32(v17, 0, 1, v18);
  v31(v13, v25, v18);
  v32(v13, 0, 1, v18);
  v33 = sub_1C9DE9DDC(a1 + 24, (uint64_t)v17, (uint64_t)v13);
  sub_1C9DFD8C8((uint64_t)v13);
  sub_1C9DFD8C8((uint64_t)v17);
  if (v33)
  {
    v34 = (void (*)(char *, uint64_t))v19[1];
    v34(v25, v18);
LABEL_6:
    result = ((uint64_t (*)(char *, uint64_t))v34)(v29, v18);
    goto LABEL_7;
  }
  v35 = sub_1C9DE79D4();
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v50, v35, v52);
  v31(v49, v29, v18);
  v36 = sub_1C9E45BD4();
  v37 = sub_1C9E45E2C();
  if (!os_log_type_enabled(v36, v37))
  {

    v34 = (void (*)(char *, uint64_t))v19[1];
    v34(v49, v18);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
    v34(v25, v18);
    goto LABEL_6;
  }
  v38 = (uint8_t *)swift_slowAlloc();
  v48 = swift_slowAlloc();
  v55 = v48;
  *(_DWORD *)v38 = 136315138;
  v46 = v38 + 4;
  v47 = v38;
  sub_1C9DFD75C();
  v39 = v49;
  v40 = sub_1C9E46138();
  v54 = sub_1C9DEDEE0(v40, v41, &v55);
  sub_1C9E45F1C();
  swift_bridgeObjectRelease();
  v42 = (void (*)(char *, uint64_t))v19[1];
  v42(v39, v18);
  v43 = v47;
  _os_log_impl(&dword_1C9A3B000, v36, v37, "Unable to create suggestion %s", v47, 0xCu);
  v44 = v48;
  swift_arrayDestroy();
  MEMORY[0x1CAA493AC](v44, -1, -1);
  MEMORY[0x1CAA493AC](v43, -1, -1);

  (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
  v42(v25, v18);
  result = ((uint64_t (*)(char *, uint64_t))v42)(v29, v18);
LABEL_7:
  *v53 = v33;
  return result;
}

uint64_t sub_1C9DFD184(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  result = MEMORY[0x1E0DEE9D8];
  v10 = MEMORY[0x1E0DEE9D8];
  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
  {
    v7 = a3 + 32;
    swift_bridgeObjectRetain();
    do
    {
      v8 = a1(&v9, v7);
      if (v3)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if (v9)
      {
        MEMORY[0x1CAA476CC](v8);
        if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1C9E45D9C();
        sub_1C9E45DB4();
        sub_1C9E45D90();
      }
      v7 += 64;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    return v10;
  }
  return result;
}

uint64_t sub_1C9DFD29C(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_1C9E460A8();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1C9E460A8();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x1CAA4796C](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_1C9DFD464(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = sub_1C9E460A8();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_1C9E45D90();
  }
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for SportsSuggestionGenerator()
{
  return &type metadata for SportsSuggestionGenerator;
}

uint64_t sub_1C9DFD464(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  void (*v12)(_QWORD *);
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1C9E460A8();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1C9E460A8();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1C9DFD7E0(&qword_1EF931DF8, &qword_1EF931DF0, MEMORY[0x1E0DEAF50]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EF931DF0);
          v12 = sub_1C9DFD670(v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1C9DF1A28();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_1C9E460D8();
  __break(1u);
  return result;
}

void (*sub_1C9DFD670(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1C9DFD6F0(v6, a2, a3);
  return sub_1C9DFD6C4;
}

void sub_1C9DFD6C4(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_1C9DFD6F0(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1CAA47960](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return destroy for MotionContextDependencies;
  }
  __break(1u);
  return result;
}

unint64_t sub_1C9DFD75C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED84F020;
  if (!qword_1ED84F020)
  {
    v1 = sub_1C9E457CC();
    result = MEMORY[0x1CAA492F8](MEMORY[0x1E0CB08F0], v1);
    atomic_store(result, (unint64_t *)&qword_1ED84F020);
  }
  return result;
}

uint64_t sub_1C9DFD7A4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SportsContextEntry(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C9DFD7E0(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1CAA492F8](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1C9DFD85C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C9DFD8A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1C9DFCDC4(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1C9DFD8C8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F028);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1C9DFD908()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  _QWORD v18[2];

  v1 = v0;
  v2 = sub_1C9E45E5C();
  MEMORY[0x1E0C80A78](v2, v3);
  v4 = sub_1C9E45C4C();
  MEMORY[0x1E0C80A78](v4, v5);
  v6 = sub_1C9E45E68();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = OBJC_IVAR___ATXContextHeuristicsScheduler____lazy_storage___queue;
  v12 = *(void **)(v0 + OBJC_IVAR___ATXContextHeuristicsScheduler____lazy_storage___queue);
  if (v12)
  {
    v13 = *(id *)(v0 + OBJC_IVAR___ATXContextHeuristicsScheduler____lazy_storage___queue);
  }
  else
  {
    sub_1C9DE8EB0(0, (unint64_t *)&qword_1ED84EFD0);
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, *MEMORY[0x1E0DEF8D8], v6);
    sub_1C9E45C40();
    v18[1] = MEMORY[0x1E0DEE9D8];
    sub_1C9DF09DC((unint64_t *)&qword_1ED84F0B0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84F050);
    sub_1C9DFF628(qword_1ED84F060, (uint64_t *)&unk_1ED84F050);
    sub_1C9E45F4C();
    v14 = (void *)sub_1C9E45E80();
    v15 = *(void **)(v0 + v11);
    *(_QWORD *)(v1 + v11) = v14;
    v13 = v14;

    v12 = 0;
  }
  v16 = v12;
  return v13;
}

uint64_t sub_1C9DFDB04()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___ATXContextHeuristicsScheduler_repeatInterval;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t sub_1C9DFDB48(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___ATXContextHeuristicsScheduler_repeatInterval);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

id ContextHeuristicsScheduler.__allocating_init(contextHeuristics:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_DWORD *)&v3[OBJC_IVAR___ATXContextHeuristicsScheduler_debugRerunSportsNotificationToken] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___ATXContextHeuristicsScheduler_favoritesChangedToken] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___ATXContextHeuristicsScheduler_syncSportsChangedToken] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___ATXContextHeuristicsScheduler____lazy_storage___queue] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___ATXContextHeuristicsScheduler_timer] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___ATXContextHeuristicsScheduler_contextHeuristics] = a1;
  *(_QWORD *)&v3[OBJC_IVAR___ATXContextHeuristicsScheduler_repeatInterval] = 7200;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id ContextHeuristicsScheduler.init(contextHeuristics:)(uint64_t a1)
{
  char *v1;
  objc_class *ObjectType;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_DWORD *)&v1[OBJC_IVAR___ATXContextHeuristicsScheduler_debugRerunSportsNotificationToken] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ATXContextHeuristicsScheduler_favoritesChangedToken] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ATXContextHeuristicsScheduler_syncSportsChangedToken] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ATXContextHeuristicsScheduler____lazy_storage___queue] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ATXContextHeuristicsScheduler_timer] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ATXContextHeuristicsScheduler_contextHeuristics] = a1;
  *(_QWORD *)&v1[OBJC_IVAR___ATXContextHeuristicsScheduler_repeatInterval] = 7200;
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

Swift::Void __swiftcall ContextHeuristicsScheduler.start()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  int *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  char *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(_QWORD *, uint64_t, uint64_t);
  uint64_t v46;
  _QWORD *v47;
  void (*v48)(_QWORD *, uint64_t);
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  void *v55;
  int *v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  id v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t ObjectType;
  uint64_t aBlock;
  uint64_t v86;
  void *v87;
  void *v88;
  void (*v89)();
  uint64_t v90;

  v1 = v0;
  v78 = sub_1C9E45C34();
  v77 = *(_QWORD *)(v78 - 8);
  MEMORY[0x1E0C80A78](v78, v2);
  v76 = (char *)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_1C9E45C1C();
  v73 = *(_QWORD *)(v74 - 8);
  MEMORY[0x1E0C80A78](v74, v4);
  v72 = (char **)((char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v6, v7);
  v71 = (char **)((char *)&v68 - v8);
  v70 = sub_1C9E45C64();
  v69 = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70, v9);
  v68 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1C9E45C28();
  v83 = *(_QWORD *)(v11 - 8);
  ObjectType = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v82 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1C9E45C4C();
  v80 = *(_QWORD *)(v14 - 8);
  v81 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v79 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1C9E45E98();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1C9E45BF8();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (char *)&v68 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1C9E1A8FC();
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, v27, v22);
  v28 = sub_1C9E45BD4();
  v29 = sub_1C9E45E44();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v30 = 0;
    _os_log_impl(&dword_1C9A3B000, v28, v29, "Starting ContextHeuristicsScheduler", v30, 2u);
    MEMORY[0x1CAA493AC](v30, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
  v31 = OBJC_IVAR___ATXContextHeuristicsScheduler_timer;
  if (*(_QWORD *)(v1 + OBJC_IVAR___ATXContextHeuristicsScheduler_timer))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1C9E45EBC();
    swift_unknownObjectRelease();
  }
  *(_QWORD *)(v1 + v31) = 0;
  swift_unknownObjectRelease();
  v32 = (int *)(v1 + OBJC_IVAR___ATXContextHeuristicsScheduler_debugRerunSportsNotificationToken);
  swift_beginAccess();
  if (*v32)
  {
    notify_cancel(*v32);
    *v32 = 0;
  }
  v75 = v32;
  sub_1C9DE8EB0(0, &qword_1ED84F0B8);
  v33 = sub_1C9DFD908();
  aBlock = MEMORY[0x1E0DEE9D8];
  sub_1C9DF09DC(&qword_1ED84EFE0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF938], MEMORY[0x1E0DEF948]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F078);
  sub_1C9DFF628((unint64_t *)&unk_1ED84F080, &qword_1ED84F078);
  sub_1C9E45F4C();
  v34 = sub_1C9E45EA4();

  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  *(_QWORD *)(v1 + v31) = v34;
  swift_unknownObjectRelease();
  v35 = MEMORY[0x1E0C809B0];
  if (*(_QWORD *)(v1 + v31))
  {
    swift_getObjectType();
    v36 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v89 = sub_1C9DFE768;
    v90 = v36;
    aBlock = v35;
    v86 = 1107296256;
    v87 = sub_1C9DE98D8;
    v88 = &block_descriptor_3;
    v37 = _Block_copy(&aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    v38 = v79;
    sub_1C9E45C40();
    v39 = v82;
    sub_1C9DFE984();
    sub_1C9E45EB0();
    _Block_release(v37);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v83 + 8))(v39, ObjectType);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v38, v81);
    swift_release();
    swift_release();
    if (*(_QWORD *)(v1 + v31))
    {
      ObjectType = swift_getObjectType();
      swift_unknownObjectRetain();
      v40 = v68;
      sub_1C9E45C58();
      v41 = (_QWORD *)(v1 + OBJC_IVAR___ATXContextHeuristicsScheduler_repeatInterval);
      swift_beginAccess();
      v42 = v71;
      *v71 = *v41;
      v43 = *MEMORY[0x1E0DEF4A0];
      v44 = v73;
      v45 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v73 + 104);
      v46 = v74;
      v45(v42, v43, v74);
      v47 = v72;
      *v72 = 10;
      v45(v47, v43, v46);
      MEMORY[0x1CAA47834](v40, v42, v47, ObjectType);
      swift_unknownObjectRelease();
      v48 = *(void (**)(_QWORD *, uint64_t))(v44 + 8);
      v48(v47, v46);
      v49 = v42;
      v35 = MEMORY[0x1E0C809B0];
      v48(v49, v46);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v40, v70);
      if (*(_QWORD *)(v1 + v31))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        sub_1C9E45EC8();
        swift_unknownObjectRelease();
      }
    }
  }
  if (objc_msgSend((id)objc_opt_self(), sel_isInternalBuild))
  {
    sub_1C9DE8EB0(0, (unint64_t *)&qword_1ED84EFD0);
    v50 = v77;
    v51 = v76;
    v52 = v78;
    (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v76, *MEMORY[0x1E0DEF530], v78);
    v53 = sub_1C9E45E8C();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v52);
    v54 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v89 = sub_1C9DFEDC0;
    v90 = v54;
    aBlock = v35;
    v86 = 1107296256;
    v87 = sub_1C9DFEB68;
    v88 = &block_descriptor_12;
    v55 = _Block_copy(&aBlock);
    swift_release();
    v56 = v75;
    swift_beginAccess();
    notify_register_dispatch("com.apple.duetexpertd.contextheuristics.donateSports", v56, v53, v55);
    swift_endAccess();
    _Block_release(v55);

  }
  v57 = (void *)objc_opt_self();
  v58 = objc_msgSend(v57, sel_defaultCenter);
  v59 = *MEMORY[0x1E0DC89E8];
  v60 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v89 = sub_1C9DFEBA4;
  v90 = v60;
  aBlock = v35;
  v86 = 1107296256;
  v87 = sub_1C9DFEBC4;
  v88 = &block_descriptor_4;
  v61 = _Block_copy(&aBlock);
  swift_release();
  v62 = objc_msgSend(v58, sel_addObserverForName_object_queue_usingBlock_, v59, 0, 0, v61);
  _Block_release(v61);

  *(_QWORD *)(v1 + OBJC_IVAR___ATXContextHeuristicsScheduler_favoritesChangedToken) = v62;
  swift_unknownObjectRelease();
  v63 = objc_msgSend(v57, sel_defaultCenter);
  v64 = *MEMORY[0x1E0DC89F0];
  v65 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v89 = sub_1C9DFEDA0;
  v90 = v65;
  aBlock = v35;
  v86 = 1107296256;
  v87 = sub_1C9DFEBC4;
  v88 = &block_descriptor_8;
  v66 = _Block_copy(&aBlock);
  swift_release();
  v67 = objc_msgSend(v63, sel_addObserverForName_object_queue_usingBlock_, v64, 0, 0, v66);
  _Block_release(v66);

  *(_QWORD *)(v1 + OBJC_IVAR___ATXContextHeuristicsScheduler_syncSportsChangedToken) = v67;
  swift_unknownObjectRelease();
}

uint64_t sub_1C9DFE60C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1C9DFE630(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v2 = sub_1C9E45BF8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1 + 16;
  v8 = sub_1C9DE79D4();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v8, v2);
  v9 = sub_1C9E45BD4();
  v10 = sub_1C9E45E44();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1C9A3B000, v9, v10, "Received context heuristics timer rerun", v11, 2u);
    MEMORY[0x1CAA493AC](v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  swift_beginAccess();
  v12 = MEMORY[0x1CAA4943C](v7);
  if (v12)
  {
    v13 = (void *)v12;
    sub_1C9DFE770();

  }
}

void sub_1C9DFE768()
{
  uint64_t v0;

  sub_1C9DFE630(v0);
}

uint64_t sub_1C9DFE770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  void *v15;
  uint64_t *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  uint64_t v24;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84F090);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1C9E45BF8();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1C9E1A8FC();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v11, v6);
  v12 = sub_1C9E45BD4();
  v13 = sub_1C9E45E44();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1C9A3B000, v12, v13, "Running ContextHeuristicsScheduler", v14, 2u);
    MEMORY[0x1CAA493AC](v14, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v15 = *(void **)(v1 + OBJC_IVAR___ATXContextHeuristicsScheduler_contextHeuristics);
  v16 = (uint64_t *)(v1 + OBJC_IVAR___ATXContextHeuristicsScheduler_repeatInterval);
  swift_beginAccess();
  v17 = *v16;
  v18 = v15;
  v19 = os_transaction_create();
  v20 = sub_1C9E45DE4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v5, 1, 1, v20);
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = 0;
  v21[3] = 0;
  v21[4] = v17;
  v21[5] = v18;
  v21[6] = v19;
  v22 = v18;
  sub_1C9DEBF40((uint64_t)v5, (uint64_t)&unk_1EF931F18, (uint64_t)v21);

  return swift_release();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t sub_1C9DFE984()
{
  sub_1C9E45C28();
  sub_1C9DF09DC((unint64_t *)&qword_1ED84F030, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F040);
  sub_1C9DFF628((unint64_t *)&qword_1ED84F048, &qword_1ED84F040);
  return sub_1C9E45F4C();
}

void sub_1C9DFEA30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v2 = sub_1C9E45BF8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1 + 16;
  v8 = sub_1C9DE79D4();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v8, v2);
  v9 = sub_1C9E45BD4();
  v10 = sub_1C9E45E44();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1C9A3B000, v9, v10, "Received notification debug rerun sports", v11, 2u);
    MEMORY[0x1CAA493AC](v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  swift_beginAccess();
  v12 = MEMORY[0x1CAA4943C](v7);
  if (v12)
  {
    v13 = (void *)v12;
    sub_1C9DFE770();

  }
}

uint64_t sub_1C9DFEB68(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

void sub_1C9DFEBA4()
{
  uint64_t v0;

  sub_1C9DFEC68(v0, "Received notification favorites updated");
}

uint64_t sub_1C9DFEBC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void (*v7)(char *);
  uint64_t v9;

  v2 = sub_1C9E456B8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void (**)(char *))(a1 + 32);
  sub_1C9E456AC();
  swift_retain();
  v7(v6);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

void sub_1C9DFEC68(uint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  v4 = sub_1C9E45BF8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1 + 16;
  v10 = sub_1C9DE79D4();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v10, v4);
  v11 = sub_1C9E45BD4();
  v12 = sub_1C9E45E44();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1C9A3B000, v11, v12, a2, v13, 2u);
    MEMORY[0x1CAA493AC](v13, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  swift_beginAccess();
  v14 = MEMORY[0x1CAA4943C](v9);
  if (v14)
  {
    v15 = (void *)v14;
    sub_1C9DFE770();

  }
}

void sub_1C9DFEDA0()
{
  uint64_t v0;

  sub_1C9DFEC68(v0, "Received notification sync my sports setting changed");
}

void sub_1C9DFEDC0()
{
  uint64_t v0;

  sub_1C9DFEA30(v0);
}

id ContextHeuristicsScheduler.__deallocating_deinit()
{
  char *v0;
  void *v1;
  objc_class *ObjectType;
  uint64_t v3;
  int *v4;
  objc_super v6;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  v3 = OBJC_IVAR___ATXContextHeuristicsScheduler_timer;
  if (*(_QWORD *)&v0[OBJC_IVAR___ATXContextHeuristicsScheduler_timer])
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1C9E45EBC();
    swift_unknownObjectRelease();
  }
  *(_QWORD *)&v0[v3] = 0;
  swift_unknownObjectRelease();
  v4 = (int *)&v0[OBJC_IVAR___ATXContextHeuristicsScheduler_debugRerunSportsNotificationToken];
  swift_beginAccess();
  if (*v4)
  {
    notify_cancel(*v4);
    *v4 = 0;
  }
  v6.receiver = v1;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, sel_dealloc);
}

uint64_t sub_1C9DFEF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[5] = a4;
  v5[6] = a5;
  v6 = sub_1C9E45BF8();
  v5[7] = v6;
  v5[8] = *(_QWORD *)(v6 - 8);
  v5[9] = swift_task_alloc();
  v5[10] = swift_task_alloc();
  v7 = sub_1C9E457CC();
  v5[11] = v7;
  v5[12] = *(_QWORD *)(v7 - 8);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1C9DFEFFC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0[13];
  v2 = v0[14];
  v3 = v0[11];
  v4 = v0[12];
  v5 = v0[10];
  v6 = v0[7];
  v7 = v0[8];
  sub_1C9E457B4();
  v8 = sub_1C9DE79D4();
  v0[15] = v8;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v0[16] = v9;
  v9(v5, v8, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  v10 = sub_1C9E45BD4();
  v11 = sub_1C9E45E44();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = v0[12];
    v24 = v0[11];
    v25 = v0[13];
    v28 = v0[7];
    v29 = v0[10];
    v26 = v0[5];
    v27 = v0[8];
    v13 = swift_slowAlloc();
    v14 = swift_slowAlloc();
    v30 = v14;
    *(_DWORD *)v13 = 136315394;
    sub_1C9DF09DC((unint64_t *)&qword_1ED84F020, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
    v15 = sub_1C9E46138();
    v0[3] = sub_1C9DEDEE0(v15, v16, &v30);
    sub_1C9E45F1C();
    swift_bridgeObjectRelease();
    v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v17(v25, v24);
    *(_WORD *)(v13 + 12) = 2048;
    v0[4] = v26;
    sub_1C9E45F1C();
    _os_log_impl(&dword_1C9A3B000, v10, v11, "Generating sports suggestions: %s, %ld", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CAA493AC](v14, -1, -1);
    MEMORY[0x1CAA493AC](v13, -1, -1);

    v18 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v18(v29, v28);
  }
  else
  {
    v19 = v0[10];
    v20 = v0[7];
    v21 = v0[8];
    v17 = *(void (**)(uint64_t, uint64_t))(v0[12] + 8);
    v17(v0[13], v0[11]);

    v18 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v18(v19, v20);
  }
  v0[17] = v17;
  v0[18] = v18;
  v22 = (_QWORD *)swift_task_alloc();
  v0[19] = v22;
  *v22 = v0;
  v22[1] = sub_1C9DFF25C;
  return sub_1C9DFC08C(v0[14], v0[5]);
}

uint64_t sub_1C9DFF25C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1C9DFF2B8()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  _BOOL4 v3;
  unint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 128))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 56));
  swift_bridgeObjectRetain_n();
  v1 = sub_1C9E45BD4();
  v2 = sub_1C9E45E44();
  v3 = os_log_type_enabled(v1, v2);
  v4 = *(_QWORD *)(v0 + 160);
  if (v3)
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v5 = 134217984;
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      v6 = sub_1C9E460A8();
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 16) = v6;
    sub_1C9E45F1C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9A3B000, v1, v2, "Donating sports suggestions: %ld", v5, 0xCu);
    MEMORY[0x1CAA493AC](v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v7 = *(void (**)(uint64_t, uint64_t))(v0 + 136);
  v8 = *(_QWORD *)(v0 + 112);
  v9 = *(_QWORD *)(v0 + 88);
  v10 = *(void **)(v0 + 48);
  (*(void (**)(_QWORD, _QWORD))(v0 + 144))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  sub_1C9DE8EB0(0, (unint64_t *)&qword_1ED84EEA0);
  v11 = (void *)sub_1C9E45D78();
  swift_bridgeObjectRelease();
  v12 = (void *)sub_1C9E45CE8();
  objc_msgSend(v10, sel_donateSuggestions_forHeuristic_, v11, v12);

  v7(v8, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id ContextHeuristicsScheduler.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ContextHeuristicsScheduler.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata accessor for ContextHeuristicsScheduler()
{
  return objc_opt_self();
}

uint64_t method lookup function for ContextHeuristicsScheduler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ContextHeuristicsScheduler.__allocating_init(contextHeuristics:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t sub_1C9DFF580()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1C9DFF5B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1C9DF080C;
  return sub_1C9DFEF54((uint64_t)v4, v5, v6, v2, v3);
}

uint64_t sub_1C9DFF604()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C9DFF628(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1CAA492F8](MEMORY[0x1E0DEAF38], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C9DFF680()
{
  uint64_t v0;
  id v1;

  v0 = sub_1C9E45BF8();
  __swift_allocate_value_buffer(v0, qword_1ED84FF30);
  __swift_project_value_buffer(v0, (uint64_t)qword_1ED84FF30);
  if (qword_1ED84F968 != -1)
    swift_once();
  v1 = (id)qword_1ED84FF60;
  return sub_1C9E45C04();
}

uint64_t *sub_1C9DFF700()
{
  if (qword_1ED84F968 != -1)
    swift_once();
  return &qword_1ED84FF60;
}

uint64_t sub_1C9DFF740()
{
  uint64_t v0;

  if (qword_1ED84F960 != -1)
    swift_once();
  v0 = sub_1C9E45BF8();
  return __swift_project_value_buffer(v0, (uint64_t)qword_1ED84FF30);
}

uint64_t sub_1C9DFF788@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1ED84F960 != -1)
    swift_once();
  v2 = sub_1C9E45BF8();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED84FF30);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_1C9DFF7F8()
{
  uint64_t result;

  sub_1C9DFF8A0();
  result = sub_1C9E45F04();
  qword_1ED84FF60 = result;
  return result;
}

id sub_1C9DFF860()
{
  if (qword_1ED84F968 != -1)
    swift_once();
  return (id)qword_1ED84FF60;
}

unint64_t sub_1C9DFF8A0()
{
  unint64_t result;

  result = qword_1ED84F0C0;
  if (!qword_1ED84F0C0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED84F0C0);
  }
  return result;
}

uint64_t sub_1C9DFF8DC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1C9DFF908()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C9DFF910(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*sub_1C9DFF938())()
{
  return nullsub_1;
}

uint64_t sub_1C9DFF948@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1C9DE9E88(v1 + 24, a1);
}

uint64_t sub_1C9DFF954(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 24;
  __swift_destroy_boxed_opaque_existential_0(v3);
  return sub_1C9DFF984(a1, v3);
}

uint64_t sub_1C9DFF984(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t (*sub_1C9DFF99C())()
{
  return nullsub_1;
}

uint64_t sub_1C9DFF9AC(uint64_t result, char a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    if (a2 == 1)
      v4 = result;
    else
      v4 = 0;
  }
  else
  {
    v4 = -result;
    if (__OFSUB__(0, result))
    {
      __break(1u);
      goto LABEL_13;
    }
  }
  if (a4)
  {
    if (a4 == 1)
      v5 = a3;
    else
      v5 = 0;
    return v4 < v5;
  }
  v5 = -a3;
  if (!__OFSUB__(0, a3))
    return v4 < v5;
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1C9DFF9F8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u)
    sub_1C9E461BC();
  return sub_1C9E461BC();
}

uint64_t sub_1C9DFFA48(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (a2)
  {
    if (a2 == 1)
    {
      if (a4 != 1)
        return 0;
      return a1 == a3;
    }
    if (a4 == 2 && !a3)
      return 1;
  }
  else if (!a4)
  {
    return a1 == a3;
  }
  return 0;
}

uint64_t sub_1C9DFFA9C(uint64_t a1, unsigned __int8 a2)
{
  sub_1C9E461B0();
  if (a2 <= 1u)
    sub_1C9E461BC();
  sub_1C9E461BC();
  return sub_1C9E461E0();
}

uint64_t sub_1C9DFFB10()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + 8);
  sub_1C9E461B0();
  if (v1 <= 1)
    sub_1C9E461BC();
  sub_1C9E461BC();
  return sub_1C9E461E0();
}

uint64_t sub_1C9DFFB84()
{
  uint64_t v0;

  if (!*(_BYTE *)(v0 + 8) || *(_BYTE *)(v0 + 8) == 1)
    sub_1C9E461BC();
  return sub_1C9E461BC();
}

uint64_t sub_1C9DFFBD0()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + 8);
  sub_1C9E461B0();
  if (v1 <= 1)
    sub_1C9E461BC();
  sub_1C9E461BC();
  return sub_1C9E461E0();
}

uint64_t *sub_1C9DFFC40(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *result;
  v3 = *a2;
  if (*((_BYTE *)result + 8))
  {
    if (*((_BYTE *)result + 8) != 1)
      v2 = 0;
  }
  else
  {
    v4 = __OFSUB__(0, v2);
    v2 = -v2;
    if (v4)
    {
      __break(1u);
      goto LABEL_13;
    }
  }
  if (*((_BYTE *)a2 + 8))
  {
    if (*((_BYTE *)a2 + 8) != 1)
      v3 = 0;
    return (uint64_t *)(v2 < v3);
  }
  v4 = __OFSUB__(0, v3);
  v3 = -v3;
  if (!v4)
    return (uint64_t *)(v2 < v3);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t *sub_1C9DFFC94(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *result;
  v3 = *a2;
  if (*((_BYTE *)a2 + 8))
  {
    if (*((_BYTE *)a2 + 8) != 1)
      v3 = 0;
  }
  else
  {
    v4 = __OFSUB__(0, v3);
    v3 = -v3;
    if (v4)
    {
      __break(1u);
      goto LABEL_13;
    }
  }
  if (*((_BYTE *)result + 8))
  {
    if (*((_BYTE *)result + 8) != 1)
      v2 = 0;
    return (uint64_t *)(v3 >= v2);
  }
  v4 = __OFSUB__(0, v2);
  v2 = -v2;
  if (!v4)
    return (uint64_t *)(v3 >= v2);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t *sub_1C9DFFCE8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *result;
  v3 = *a2;
  if (*((_BYTE *)result + 8))
  {
    if (*((_BYTE *)result + 8) != 1)
      v2 = 0;
  }
  else
  {
    v4 = __OFSUB__(0, v2);
    v2 = -v2;
    if (v4)
    {
      __break(1u);
      goto LABEL_13;
    }
  }
  if (*((_BYTE *)a2 + 8))
  {
    if (*((_BYTE *)a2 + 8) != 1)
      v3 = 0;
    return (uint64_t *)(v2 >= v3);
  }
  v4 = __OFSUB__(0, v3);
  v3 = -v3;
  if (!v4)
    return (uint64_t *)(v2 >= v3);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t *sub_1C9DFFD3C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *result;
  v3 = *a2;
  if (*((_BYTE *)a2 + 8))
  {
    if (*((_BYTE *)a2 + 8) != 1)
      v3 = 0;
  }
  else
  {
    v4 = __OFSUB__(0, v3);
    v3 = -v3;
    if (v4)
    {
      __break(1u);
      goto LABEL_13;
    }
  }
  if (*((_BYTE *)result + 8))
  {
    if (*((_BYTE *)result + 8) != 1)
      v2 = 0;
    return (uint64_t *)(v3 < v2);
  }
  v4 = __OFSUB__(0, v2);
  v2 = -v2;
  if (!v4)
    return (uint64_t *)(v3 < v2);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1C9DFFD90(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  _BOOL4 v8;
  _BOOL4 v10;

  v2 = *a1;
  v3 = *a2;
  v4 = *((unsigned __int8 *)a2 + 8);
  if (*((_BYTE *)a2 + 8))
    v5 = 0;
  else
    v5 = v2 == v3;
  v6 = v5;
  v8 = v4 == 1 && v2 == v3;
  v10 = v4 == 2 && v3 == 0;
  if (*((_BYTE *)a1 + 8) != 1)
    v8 = v10;
  if (*((_BYTE *)a1 + 8))
    return v8;
  else
    return v6;
}

uint64_t sub_1C9DFFDD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned __int8 v14;
  BOOL v15;
  uint64_t result;
  uint64_t v17;

  v8 = sub_1C9E457CC();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1C9DFFF04(a1);
  if (v14 > 1u)
  {
    if (v14 == 2)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v12, v8);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a4, a2, v8);
  }
  else
  {
    if (v14)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a3, v8);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v12, v8);
    }
    if ((v13 & 0x8000000000000000) == 0 || (v15 = __OFSUB__(0, v13), result = -v13, !v15))
    {
      sub_1C9E45778();
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v12, v8);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1C9DFFF04(uint64_t result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = result + 56;
  v2 = *(_BYTE *)(result + 32);
  v3 = 1 << v2;
  v4 = -1;
  if (1 << v2 < 64)
    v4 = ~(-1 << (1 << v2));
  v5 = v4 & *(_QWORD *)(result + 56);
  if (v5)
  {
    v6 = 0;
    v7 = __clz(__rbit64(v5));
    v8 = (v5 - 1) & v5;
    v9 = (unint64_t)(v3 + 63) >> 6;
  }
  else
  {
    LODWORD(v6) = v2 & 0x3F;
    if (v6 <= 6)
      return 0;
    v9 = (unint64_t)(v3 + 63) >> 6;
    v25 = *(_QWORD *)(result + 64);
    if (v25)
    {
      v6 = 1;
    }
    else
    {
      if (v6 < 8)
        return 0;
      v25 = *(_QWORD *)(result + 72);
      if (v25)
      {
        v6 = 2;
      }
      else
      {
        v25 = *(_QWORD *)(result + 80);
        if (v25)
        {
          v6 = 3;
        }
        else
        {
LABEL_50:
          if (v6 < 9)
            return 0;
          v25 = *(_QWORD *)(result + 88);
          if (v25)
          {
            v6 = 4;
          }
          else
          {
            v25 = *(_QWORD *)(result + 96);
            if (!v25)
              goto LABEL_56;
            v6 = 5;
          }
        }
      }
    }
LABEL_41:
    v8 = (v25 - 1) & v25;
    v7 = __clz(__rbit64(v25)) + (v6 << 6);
  }
  v10 = *(_QWORD *)(result + 48);
  v11 = (uint64_t *)(v10 + 16 * v7);
  v12 = *v11;
  LOBYTE(v13) = *((_BYTE *)v11 + 8);
LABEL_6:
  v14 = v13;
  result = v12;
  v15 = -v12;
  v16 = __OFSUB__(0, v12);
  while (v8)
  {
    v18 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v19 = v18 | (v6 << 6);
LABEL_29:
    v23 = (uint64_t *)(v10 + 16 * v19);
    v12 = *v23;
    v13 = *((unsigned __int8 *)v23 + 8);
    if (v13)
    {
      if (v13 == 1)
        v24 = v12;
      else
        v24 = 0;
    }
    else
    {
      v24 = -v12;
      if (__OFSUB__(0, v12))
        goto LABEL_49;
    }
    if (v14)
    {
      v17 = result;
      if (v14 == 1)
        goto LABEL_10;
      if (v24 < 0)
        goto LABEL_6;
    }
    else
    {
      v17 = v15;
      if (v16)
        goto LABEL_48;
LABEL_10:
      if (v24 < v17)
        goto LABEL_6;
    }
  }
  v20 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (v20 >= v9)
    return result;
  v21 = *(_QWORD *)(v1 + 8 * v20);
  ++v6;
  if (v21)
    goto LABEL_28;
  v6 = v20 + 1;
  if (v20 + 1 >= v9)
    return result;
  v21 = *(_QWORD *)(v1 + 8 * v6);
  if (v21)
    goto LABEL_28;
  v6 = v20 + 2;
  if (v20 + 2 >= v9)
    return result;
  v21 = *(_QWORD *)(v1 + 8 * v6);
  if (v21)
    goto LABEL_28;
  v6 = v20 + 3;
  if (v20 + 3 >= v9)
    return result;
  v21 = *(_QWORD *)(v1 + 8 * v6);
  if (v21)
  {
LABEL_28:
    v8 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v6 << 6);
    goto LABEL_29;
  }
  v22 = v20 + 4;
  if (v22 >= v9)
    return result;
  v21 = *(_QWORD *)(v1 + 8 * v22);
  if (v21)
  {
    v6 = v22;
    goto LABEL_28;
  }
  while (1)
  {
    v6 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v6 >= v9)
      return result;
    v21 = *(_QWORD *)(v1 + 8 * v6);
    ++v22;
    if (v21)
      goto LABEL_28;
  }
  __break(1u);
LABEL_56:
  v26 = 0;
  v27 = 6;
  if (v9 > 6)
    v27 = v9;
  v28 = v27 - 6;
  while (v28 != v26)
  {
    v25 = *(_QWORD *)(result + 104 + 8 * v26++);
    if (v25)
    {
      v6 = v26 + 5;
      goto LABEL_41;
    }
  }
  return 0;
}

uint64_t sub_1C9E00158@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unsigned __int8 v13;
  uint64_t v15;

  v8 = sub_1C9E457CC();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C9E00274(a1);
  if (v13 <= 1u)
  {
    if (v13)
      sub_1C9E45778();
    else
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v12, v8);
  }
  if (v13 == 2)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a3, v8);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v12, v8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a4, a3, v8);
}

uint64_t sub_1C9E00274(uint64_t result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = result + 56;
  v2 = *(_BYTE *)(result + 32);
  v3 = 1 << v2;
  v4 = -1;
  if (1 << v2 < 64)
    v4 = ~(-1 << (1 << v2));
  v5 = v4 & *(_QWORD *)(result + 56);
  if (v5)
  {
    v6 = 0;
    v7 = __clz(__rbit64(v5));
    v8 = (v5 - 1) & v5;
    v9 = (unint64_t)(v3 + 63) >> 6;
  }
  else
  {
    LODWORD(v6) = v2 & 0x3F;
    if (v6 <= 6)
      return 0;
    v9 = (unint64_t)(v3 + 63) >> 6;
    v25 = *(_QWORD *)(result + 64);
    if (v25)
    {
      v6 = 1;
    }
    else
    {
      if (v6 < 8)
        return 0;
      v25 = *(_QWORD *)(result + 72);
      if (v25)
      {
        v6 = 2;
      }
      else
      {
        v25 = *(_QWORD *)(result + 80);
        if (v25)
        {
          v6 = 3;
        }
        else
        {
LABEL_50:
          if (v6 < 9)
            return 0;
          v25 = *(_QWORD *)(result + 88);
          if (v25)
          {
            v6 = 4;
          }
          else
          {
            v25 = *(_QWORD *)(result + 96);
            if (!v25)
              goto LABEL_56;
            v6 = 5;
          }
        }
      }
    }
LABEL_41:
    v8 = (v25 - 1) & v25;
    v7 = __clz(__rbit64(v25)) + (v6 << 6);
  }
  v10 = *(_QWORD *)(result + 48);
  v11 = (uint64_t *)(v10 + 16 * v7);
  v12 = *v11;
  LOBYTE(v13) = *((_BYTE *)v11 + 8);
LABEL_6:
  v14 = v13;
  result = v12;
  v15 = -v12;
  v16 = __OFSUB__(0, v12);
  while (v8)
  {
    v18 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v19 = v18 | (v6 << 6);
LABEL_29:
    v23 = (uint64_t *)(v10 + 16 * v19);
    v12 = *v23;
    v13 = *((unsigned __int8 *)v23 + 8);
    if (v14)
    {
      if (v14 == 1)
        v24 = result;
      else
        v24 = 0;
    }
    else
    {
      v24 = v15;
      if (v16)
        goto LABEL_49;
    }
    if (v13)
    {
      v17 = v12;
      if (v13 == 1)
        goto LABEL_10;
      if (v24 < 0)
        goto LABEL_6;
    }
    else
    {
      v17 = -v12;
      if (__OFSUB__(0, v12))
        goto LABEL_48;
LABEL_10:
      if (v24 < v17)
        goto LABEL_6;
    }
  }
  v20 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (v20 >= v9)
    return result;
  v21 = *(_QWORD *)(v1 + 8 * v20);
  ++v6;
  if (v21)
    goto LABEL_28;
  v6 = v20 + 1;
  if (v20 + 1 >= v9)
    return result;
  v21 = *(_QWORD *)(v1 + 8 * v6);
  if (v21)
    goto LABEL_28;
  v6 = v20 + 2;
  if (v20 + 2 >= v9)
    return result;
  v21 = *(_QWORD *)(v1 + 8 * v6);
  if (v21)
    goto LABEL_28;
  v6 = v20 + 3;
  if (v20 + 3 >= v9)
    return result;
  v21 = *(_QWORD *)(v1 + 8 * v6);
  if (v21)
  {
LABEL_28:
    v8 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v6 << 6);
    goto LABEL_29;
  }
  v22 = v20 + 4;
  if (v22 >= v9)
    return result;
  v21 = *(_QWORD *)(v1 + 8 * v22);
  if (v21)
  {
    v6 = v22;
    goto LABEL_28;
  }
  while (1)
  {
    v6 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v6 >= v9)
      return result;
    v21 = *(_QWORD *)(v1 + 8 * v6);
    ++v22;
    if (v21)
      goto LABEL_28;
  }
  __break(1u);
LABEL_56:
  v26 = 0;
  v27 = 6;
  if (v9 > 6)
    v27 = v9;
  v28 = v27 - 6;
  while (v28 != v26)
  {
    v25 = *(_QWORD *)(result + 104 + 8 * v26++);
    if (v25)
    {
      v6 = v26 + 5;
      goto LABEL_41;
    }
  }
  return 0;
}

uint64_t sub_1C9E004C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  return sub_1C9DFF984(a4, (uint64_t)(a5 + 3));
}

uint64_t sub_1C9E004DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SportsDependencies(0) + 20);
  v4 = sub_1C9E457CC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for SportsDependencies(uint64_t a1)
{
  return sub_1C9E00AAC(a1, (uint64_t *)&unk_1EF934570);
}

uint64_t sub_1C9E00538(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SportsDependencies(0) + 20);
  v4 = sub_1C9E457CC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*sub_1C9E00580())(_QWORD)
{
  type metadata accessor for SportsDependencies(0);
  return nullsub_1;
}

uint64_t sub_1C9E005A8()
{
  swift_bridgeObjectRetain();
  sub_1C9E45D3C();
  swift_bridgeObjectRelease();
  type metadata accessor for SportsDependencies(0);
  sub_1C9E457CC();
  sub_1C9DF09DC(&qword_1EF931FA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
  return sub_1C9E45C88();
}

uint64_t sub_1C9E00638(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;

  v2 = *a1 == *a2 && a1[1] == a2[1];
  if (!v2 && (sub_1C9E46144() & 1) == 0)
    return 0;
  type metadata accessor for SportsDependencies(0);
  return sub_1C9E4579C();
}

uint64_t sub_1C9E006A0()
{
  sub_1C9E461B0();
  swift_bridgeObjectRetain();
  sub_1C9E45D3C();
  swift_bridgeObjectRelease();
  type metadata accessor for SportsDependencies(0);
  sub_1C9E457CC();
  sub_1C9DF09DC(&qword_1EF931FA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
  sub_1C9E45C88();
  return sub_1C9E461E0();
}

uint64_t sub_1C9E00748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char *v5;
  uint64_t v6;

  *a4 = a1;
  a4[1] = a2;
  v5 = (char *)a4 + *(int *)(type metadata accessor for SportsDependencies(0) + 20);
  v6 = sub_1C9E457CC();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a3, v6);
}

uint64_t sub_1C9E00798()
{
  sub_1C9E461B0();
  swift_bridgeObjectRetain();
  sub_1C9E45D3C();
  swift_bridgeObjectRelease();
  sub_1C9E457CC();
  sub_1C9DF09DC(&qword_1EF931FA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
  sub_1C9E45C88();
  return sub_1C9E461E0();
}

uint64_t sub_1C9E0083C()
{
  swift_bridgeObjectRetain();
  sub_1C9E45D3C();
  swift_bridgeObjectRelease();
  sub_1C9E457CC();
  sub_1C9DF09DC(&qword_1EF931FA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
  return sub_1C9E45C88();
}

uint64_t sub_1C9E008D0()
{
  sub_1C9E461B0();
  swift_bridgeObjectRetain();
  sub_1C9E45D3C();
  swift_bridgeObjectRelease();
  sub_1C9E457CC();
  sub_1C9DF09DC(&qword_1EF931FA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
  sub_1C9E45C88();
  return sub_1C9E461E0();
}

uint64_t sub_1C9E00970(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;

  v2 = *a1 == *a2 && a1[1] == a2[1];
  if (v2 || (sub_1C9E46144() & 1) != 0)
    return sub_1C9E4579C();
  else
    return 0;
}

void *sub_1C9E009E0()
{
  return &unk_1E82ECED8;
}

unint64_t sub_1C9E009EC()
{
  return 0xD000000000000024;
}

uint64_t sub_1C9E00A08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1C9E457CC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_1C9E00A40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1C9E457CC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t sub_1C9E00A78()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SportsContextEntry(0) + 20));
}

uint64_t type metadata accessor for SportsContextEntry(uint64_t a1)
{
  return sub_1C9E00AAC(a1, qword_1EF934580);
}

uint64_t sub_1C9E00AAC(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1C9E00AE0(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for SportsContextEntry(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1C9E00B0C())(_QWORD)
{
  type metadata accessor for SportsContextEntry(0);
  return nullsub_1;
}

uint64_t sub_1C9E00B34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for SportsContextEntry(0) + 24);
  return sub_1C9E00B64(v3, a1);
}

uint64_t sub_1C9E00B64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SportsDependencies(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C9E00BA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for SportsContextEntry(0) + 24);
  return sub_1C9E00BD8(a1, v3);
}

uint64_t sub_1C9E00BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SportsDependencies(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_1C9E00C1C())(_QWORD)
{
  type metadata accessor for SportsContextEntry(0);
  return nullsub_1;
}

uint64_t sub_1C9E00C44@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  v8 = sub_1C9E457CC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a4, a1, v8);
  v9 = type metadata accessor for SportsContextEntry(0);
  *(_BYTE *)(a4 + *(int *)(v9 + 20)) = a2;
  return sub_1C9E00CB0(a3, a4 + *(int *)(v9 + 24));
}

uint64_t sub_1C9E00CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SportsDependencies(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C9E00CF4()
{
  sub_1C9E461EC();
  sub_1C9E45D3C();
  type metadata accessor for SportsContextEntry(0);
  swift_bridgeObjectRetain();
  sub_1C9E45D3C();
  swift_bridgeObjectRelease();
  type metadata accessor for SportsDependencies(0);
  sub_1C9E457CC();
  sub_1C9DF09DC(&qword_1EF931FA0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
  sub_1C9E45C88();
  sub_1C9E461D4();
  return sub_1C9E46138();
}

unint64_t sub_1C9E00E08()
{
  unint64_t result;

  result = qword_1EF931FA8;
  if (!qword_1EF931FA8)
  {
    result = MEMORY[0x1CAA492F8](&unk_1C9E81D78, &type metadata for SpotlightContextSuggestionEntry.ValidTimeframe);
    atomic_store(result, (unint64_t *)&qword_1EF931FA8);
  }
  return result;
}

uint64_t sub_1C9E00E4C()
{
  return sub_1C9DF09DC(qword_1EF931FB0, type metadata accessor for SportsDependencies, (uint64_t)&unk_1C9E81DE0);
}

uint64_t destroy for SpotlightContextSuggestionEntry(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_0(a1 + 24);
}

uint64_t initializeWithCopy for SpotlightContextSuggestionEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = a2 + 24;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7(a1 + 24, v4, v6);
  return a1;
}

_QWORD *assignWithCopy for SpotlightContextSuggestionEntry(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 3, a2 + 3);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SpotlightContextSuggestionEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpotlightContextSuggestionEntry(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SpotlightContextSuggestionEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpotlightContextSuggestionEntry()
{
  return &type metadata for SpotlightContextSuggestionEntry;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SpotlightContextSuggestionEntry.ValidTimeframe(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SpotlightContextSuggestionEntry.ValidTimeframe(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1C9E012B8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1C9E012D0(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SpotlightContextSuggestionEntry.ValidTimeframe()
{
  return &type metadata for SpotlightContextSuggestionEntry.ValidTimeframe;
}

uint64_t sub_1C9E012F8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t *sub_1C9E01300(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_1C9E457CC();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_1C9E0139C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1C9E457CC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_1C9E013E4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_1C9E457CC();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *sub_1C9E01454(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1C9E457CC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *sub_1C9E014D0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_1C9E457CC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_1C9E0152C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1C9E457CC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1C9E01598()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C9E015A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1C9E457CC();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1C9E01620()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C9E0162C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1C9E457CC();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1C9E016A0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C9E457CC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *sub_1C9E01714(char *a1, char *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1C9E457CC();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 24);
    a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = *(_QWORD *)&a2[v9];
    v13 = *(_QWORD *)&a2[v9 + 8];
    *(_QWORD *)v10 = v12;
    *((_QWORD *)v10 + 1) = v13;
    v14 = *(int *)(type metadata accessor for SportsDependencies(0) + 20);
    v15 = &v10[v14];
    v16 = &v11[v14];
    swift_bridgeObjectRetain();
    v8(v15, v16, v7);
  }
  return a1;
}

uint64_t sub_1C9E017E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v8)(uint64_t, uint64_t);

  v4 = sub_1C9E457CC();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v8(a1, v4);
  v5 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  v6 = v5 + *(int *)(type metadata accessor for SportsDependencies(0) + 20);
  return ((uint64_t (*)(uint64_t, uint64_t))v8)(v6, v4);
}

uint64_t sub_1C9E01864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  v6 = sub_1C9E457CC();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v9 = (_QWORD *)(a1 + v8);
  v10 = a2 + v8;
  v11 = *(_QWORD *)(a2 + v8 + 8);
  *v9 = *(_QWORD *)(a2 + v8);
  v9[1] = v11;
  v12 = *(int *)(type metadata accessor for SportsDependencies(0) + 20);
  v13 = (char *)v9 + v12;
  v14 = v10 + v12;
  swift_bridgeObjectRetain();
  v7((uint64_t)v13, v14, v6);
  return a1;
}

char *sub_1C9E01910(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = sub_1C9E457CC();
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  v8 = *(int *)(a3 + 24);
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = type metadata accessor for SportsDependencies(0);
  v7(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v6);
  return a1;
}

uint64_t sub_1C9E019C0(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, char *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v6 = sub_1C9E457CC();
  v7 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = a2[*(int *)(a3 + 20)];
  v9 = a1 + v8;
  v10 = &a2[v8];
  *(_OWORD *)(a1 + v8) = *(_OWORD *)v10;
  v11 = type metadata accessor for SportsDependencies(0);
  v7(v9 + *(int *)(v11 + 20), &v10[*(int *)(v11 + 20)], v6);
  return a1;
}

char *sub_1C9E01A54(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_1C9E457CC();
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *((_QWORD *)v10 + 1);
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *((_QWORD *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  v12 = type metadata accessor for SportsDependencies(0);
  v7(&v9[*(int *)(v12 + 20)], &v10[*(int *)(v12 + 20)], v6);
  return a1;
}

uint64_t sub_1C9E01AF0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C9E01AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unsigned int v11;

  v6 = sub_1C9E457CC();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 254)
  {
    v8 = type metadata accessor for SportsDependencies(0);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 2)
    return ((v11 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_1C9E01BB0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C9E01BBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_1C9E457CC();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
      return result;
    }
    v10 = type metadata accessor for SportsDependencies(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_1C9E01C5C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_1C9E457CC();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for SportsDependencies(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

id sub_1C9E01CE8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v1 = OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer____lazy_storage___xpcListener;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer____lazy_storage___xpcListener);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer____lazy_storage___xpcListener);
  }
  else
  {
    sub_1C9E45A30();
    v4 = objc_allocWithZone(MEMORY[0x1E0CB3B58]);
    v5 = (void *)sub_1C9E45CE8();
    swift_bridgeObjectRelease();
    v6 = objc_msgSend(v4, sel_initWithMachServiceName_, v5);

    objc_msgSend(v6, sel_setDelegate_, v0);
    v7 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v6;
    v3 = v6;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

uint64_t sub_1C9E01DAC()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84EEE0);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E8];
  return result;
}

id sub_1C9E01DE4(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return sub_1C9E01E24(a1, a2);
}

id sub_1C9E01E24(uint64_t a1, void *a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  id v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void (*v20)(id, _UNKNOWN **);
  id v21;
  id v22;
  objc_super v24;

  v5 = sub_1C9E45BF8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v2[OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer____lazy_storage___xpcListener] = 0;
  v10 = OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer_lock;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84EEE0);
  v11 = swift_allocObject();
  v12 = MEMORY[0x1E0DEE9E8];
  *(_DWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 16) = v12;
  *(_QWORD *)&v2[v10] = v11;
  *(_QWORD *)&v2[OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer_contextStore] = a1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer_suggestionStore] = a2;
  v13 = (objc_class *)type metadata accessor for ContextualSuggestionServer();
  v24.receiver = v2;
  v24.super_class = v13;
  swift_retain();
  v14 = a2;
  v15 = objc_msgSendSuper2(&v24, sel_init);
  v16 = sub_1C9DFF740();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v16, v5);
  v17 = sub_1C9E45BD4();
  v18 = sub_1C9E45E44();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1C9A3B000, v17, v18, "ContextualSuggestionServer init", v19, 2u);
    MEMORY[0x1CAA493AC](v19, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  if (a1)
  {
    v20 = *(void (**)(id, _UNKNOWN **))(*(_QWORD *)a1 + 184);
    swift_retain();
    v21 = v15;
    v20(v15, &off_1E82ED068);
    swift_release();
  }
  v22 = sub_1C9E01CE8();
  objc_msgSend(v22, sel_resume);

  swift_release();
  return v15;
}

uint64_t type metadata accessor for ContextualSuggestionServer()
{
  return objc_opt_self();
}

void sub_1C9E0204C()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t *v2;
  os_unfair_lock_s *v3;

  v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer_lock);
  v2 = (uint64_t *)&v1[4];
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1C9E020A4(v2, v0);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_1C9E020A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  id v23;
  unint64_t v24;
  int64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  void *v44;
  int64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t result;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  id v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD aBlock[12];

  v3 = v2;
  v61 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84F090);
  MEMORY[0x1E0C80A78](v5, v6);
  v60 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_1C9E45BF8();
  v52 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53, v8);
  v51 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  if ((*a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1C9E45F70();
    sub_1C9E05138();
    sub_1C9E05174();
    sub_1C9E45E08();
    v10 = aBlock[6];
    v58 = aBlock[7];
    v11 = aBlock[8];
    v12 = aBlock[9];
    v13 = aBlock[10];
  }
  else
  {
    v14 = -1 << *(_BYTE *)(v10 + 32);
    v15 = *(_QWORD *)(v10 + 56);
    v58 = v10 + 56;
    v16 = ~v14;
    v17 = -v14;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v13 = v18 & v15;
    swift_bridgeObjectRetain();
    v11 = v16;
    v12 = 0;
  }
  v56 = v10 & 0x7FFFFFFFFFFFFFFFLL;
  v54 = v11;
  v57 = (unint64_t)(v11 + 64) >> 6;
  v62 = MEMORY[0x1E0DEE9B8] + 8;
  v59 = MEMORY[0x1E0DEE9C0] + 8;
  v55 = MEMORY[0x1E0DEE9B0] + 8;
  while (v10 < 0)
  {
    v22 = sub_1C9E45F94();
    if (!v22)
      return sub_1C9E051BC();
    v70 = v22;
    sub_1C9E05138();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v23 = (id)aBlock[0];
    swift_unknownObjectRelease();
    v21 = v12;
    v19 = v13;
    if (!v23)
      return sub_1C9E051BC();
LABEL_26:
    aBlock[4] = sub_1C9E027D4;
    aBlock[5] = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1C9DEDA40;
    aBlock[3] = &block_descriptor_14;
    v26 = _Block_copy(aBlock);
    v27 = objc_msgSend(v23, sel_remoteObjectProxyWithErrorHandler_, v26);
    _Block_release(v26);
    sub_1C9E45F40();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9321E0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      v46 = sub_1C9DFF740();
      (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, v46, v53);
      v47 = sub_1C9E45BD4();
      v48 = sub_1C9E45E2C();
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v49 = 0;
        _os_log_impl(&dword_1C9A3B000, v47, v48, "ContextualSuggestionServer: error casting remote object to interface", v49, 2u);
        MEMORY[0x1CAA493AC](v49, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v52 + 8))(v51, v53);
      return sub_1C9E051BC();
    }
    v63 = v19;
    v65 = v21;
    v28 = v70;
    v29 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v61
                                                                     + OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer_suggestionStore))
                               + 0xB0))();
    v30 = *(_QWORD *)(sub_1C9E02BE0(v29) + 16);
    v64 = v23;
    if (v30)
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_1EF931AE8);
      v31 = sub_1C9E460CC();
    }
    else
    {
      v31 = MEMORY[0x1E0DEE9E0];
    }
    v32 = v10;
    aBlock[0] = v31;
    v33 = (_QWORD *)swift_bridgeObjectRetain();
    sub_1C9DF54B0(v33, 1, aBlock);
    if (v3)
      goto LABEL_50;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = aBlock[0];
    v35 = sub_1C9E45DE4();
    v36 = *(_QWORD *)(v35 - 8);
    v37 = (uint64_t)v60;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v60, 1, 1, v35);
    v38 = (_QWORD *)swift_allocObject();
    v38[2] = 0;
    v38[3] = 0;
    v38[4] = v28;
    v38[5] = v34;
    v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v37, 1, v35);
    swift_unknownObjectRetain();
    if (v39 == 1)
    {
      sub_1C9DF1AF0(v37);
    }
    else
    {
      sub_1C9E45DD8();
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v35);
    }
    v3 = 0;
    if (v38[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v40 = sub_1C9E45DCC();
      v42 = v41;
      swift_unknownObjectRelease();
    }
    else
    {
      v40 = 0;
      v42 = 0;
    }
    v44 = v64;
    v43 = v65;
    if (v42 | v40)
    {
      v66 = 0;
      v67 = 0;
      v68 = v40;
      v69 = v42;
    }
    swift_task_create();

    swift_unknownObjectRelease();
    swift_release();
    v12 = v43;
    v13 = v63;
    v10 = v32;
  }
  if (v13)
  {
    v19 = (v13 - 1) & v13;
    v20 = __clz(__rbit64(v13)) | (v12 << 6);
    v21 = v12;
LABEL_25:
    v23 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v20);
    if (!v23)
      return sub_1C9E051BC();
    goto LABEL_26;
  }
  v21 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v21 >= v57)
      return sub_1C9E051BC();
    v24 = *(_QWORD *)(v58 + 8 * v21);
    if (!v24)
    {
      v25 = v12 + 2;
      if (v12 + 2 >= v57)
        return sub_1C9E051BC();
      v24 = *(_QWORD *)(v58 + 8 * v25);
      if (v24)
        goto LABEL_23;
      v25 = v12 + 3;
      if (v12 + 3 >= v57)
        return sub_1C9E051BC();
      v24 = *(_QWORD *)(v58 + 8 * v25);
      if (v24)
      {
LABEL_23:
        v21 = v25;
      }
      else
      {
        v21 = v12 + 4;
        if (v12 + 4 >= v57)
          return sub_1C9E051BC();
        v24 = *(_QWORD *)(v58 + 8 * v21);
        if (!v24)
        {
          v45 = v12 + 5;
          while (v57 != v45)
          {
            v24 = *(_QWORD *)(v58 + 8 * v45++);
            if (v24)
            {
              v21 = v45 - 1;
              goto LABEL_24;
            }
          }
          return sub_1C9E051BC();
        }
      }
    }
LABEL_24:
    v19 = (v24 - 1) & v24;
    v20 = __clz(__rbit64(v24)) + (v21 << 6);
    goto LABEL_25;
  }
  __break(1u);
LABEL_50:
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1C9E027D4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v17[3];
  uint64_t v18;

  v2 = sub_1C9E45BF8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1C9DFF740();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
  v8 = a1;
  v9 = a1;
  v10 = sub_1C9E45BD4();
  v11 = sub_1C9E45E2C();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v18 = v13;
    *(_DWORD *)v12 = 136315138;
    v17[1] = v12 + 4;
    swift_getErrorValue();
    v14 = sub_1C9E46174();
    v17[2] = sub_1C9DEDEE0(v14, v15, &v18);
    sub_1C9E45F1C();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C9A3B000, v10, v11, "ContextualSuggestionServer: error grabbing remote object proxy: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CAA493AC](v13, -1, -1);
    MEMORY[0x1CAA493AC](v12, -1, -1);
  }
  else
  {

  }
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t sub_1C9E029BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 120) = a4;
  *(_QWORD *)(v5 + 128) = a5;
  return swift_task_switch();
}

uint64_t sub_1C9E029D4()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (void *)v0[15];
  sub_1C9E45ACC();
  v2 = sub_1C9E45C70();
  v0[17] = v2;
  v0[2] = v0;
  v0[3] = sub_1C9E02A98;
  v3 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_1C9E02B6C;
  v4[3] = &block_descriptor_19;
  v4[4] = v3;
  objc_msgSend(v1, sel_updateWith_completionHandler_, v2, v4);
  return swift_continuation_await();
}

uint64_t sub_1C9E02A98()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 144) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_1C9E02AF8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1C9E02B2C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 136);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1C9E02B6C(uint64_t a1, void *a2)
{
  _QWORD *v3;
  id v4;

  if (!a2)
    return swift_continuation_throwingResume();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84EF60);
  swift_allocError();
  *v3 = a2;
  v4 = a2;
  return swift_continuation_throwingResumeWithError();
}

uint64_t sub_1C9E02BE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int64_t v22;

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v22 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v6 = 0;
  v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!v4)
    goto LABEL_5;
LABEL_4:
  v8 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (i = v8 | (v6 << 6); ; i = __clz(__rbit64(v11)) + (v6 << 6))
  {
    v13 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    v14 = v13;
    v15 = sub_1C9E45D60();
    v17 = v16;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1C9E03664(0, v7[2] + 1, 1, v7);
      v7 = (_QWORD *)result;
    }
    v19 = v7[2];
    v18 = v7[3];
    if (v19 >= v18 >> 1)
    {
      result = (uint64_t)sub_1C9E03664((_QWORD *)(v18 > 1), v19 + 1, 1, v7);
      v7 = (_QWORD *)result;
    }
    v7[2] = v19 + 1;
    v20 = &v7[3 * v19];
    v20[4] = v15;
    v20[5] = v17;
    v20[6] = v14;
    if (v4)
      goto LABEL_4;
LABEL_5:
    v10 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v10 >= v22)
      goto LABEL_27;
    v11 = *(_QWORD *)(v21 + 8 * v10);
    ++v6;
    if (!v11)
    {
      v6 = v10 + 1;
      if (v10 + 1 >= v22)
        goto LABEL_27;
      v11 = *(_QWORD *)(v21 + 8 * v6);
      if (!v11)
      {
        v6 = v10 + 2;
        if (v10 + 2 >= v22)
          goto LABEL_27;
        v11 = *(_QWORD *)(v21 + 8 * v6);
        if (!v11)
        {
          v6 = v10 + 3;
          if (v10 + 3 >= v22)
            goto LABEL_27;
          v11 = *(_QWORD *)(v21 + 8 * v6);
          if (!v11)
            break;
        }
      }
    }
LABEL_20:
    v4 = (v11 - 1) & v11;
  }
  v12 = v10 + 4;
  if (v12 >= v22)
  {
LABEL_27:
    swift_release();
    return (uint64_t)v7;
  }
  v11 = *(_QWORD *)(v21 + 8 * v12);
  if (v11)
  {
    v6 = v12;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v6 >= v22)
      goto LABEL_27;
    v11 = *(_QWORD *)(v21 + 8 * v6);
    ++v12;
    if (v11)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1C9E02E34(uint64_t a1, void *a2)
{
  return sub_1C9E04A90(a2);
}

uint64_t sub_1C9E02E3C(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t result;
  void *v15;
  os_unfair_lock_s *v16;
  uint64_t v17;

  v4 = sub_1C9E45BF8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2 + 16;
  v10 = sub_1C9DFF740();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v10, v4);
  v11 = sub_1C9E45BD4();
  v12 = sub_1C9E45E2C();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1C9A3B000, v11, v12, "ContextualSuggestionServer: connection interrupted", v13, 2u);
    MEMORY[0x1CAA493AC](v13, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  objc_msgSend(a1, sel_invalidate);
  swift_beginAccess();
  result = MEMORY[0x1CAA4943C](v9);
  if (result)
  {
    v15 = (void *)result;
    v16 = *(os_unfair_lock_s **)(result + OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer_lock);
    swift_retain();

    os_unfair_lock_lock(v16 + 6);
    os_unfair_lock_unlock(v16 + 6);
    return swift_release();
  }
  return result;
}

uint64_t sub_1C9E02FCC(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t result;
  void *v15;
  os_unfair_lock_s *v16;
  uint64_t v17;

  v4 = sub_1C9E45BF8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1 + 16;
  v10 = sub_1C9DFF740();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v10, v4);
  v11 = sub_1C9E45BD4();
  v12 = sub_1C9E45E44();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1C9A3B000, v11, v12, "ContextualSuggestionServer: connection invalidated", v13, 2u);
    MEMORY[0x1CAA493AC](v13, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  swift_beginAccess();
  result = MEMORY[0x1CAA4943C](v9);
  if (result)
  {
    v15 = (void *)result;
    v16 = *(os_unfair_lock_s **)(result + OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer_lock);
    swift_retain();

    os_unfair_lock_lock(v16 + 6);
    os_unfair_lock_unlock(v16 + 6);
    return swift_release();
  }
  return result;
}

uint64_t sub_1C9E031A8(uint64_t a1, void (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[2];

  v3 = v2;
  v5 = sub_1C9E45BF8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1C9DFF740();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v10, v5);
  v11 = sub_1C9E45BD4();
  v12 = sub_1C9E45E44();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1C9A3B000, v11, v12, "ContextualSuggestionServer: requestSnapshots(forEndpoints:completion:)", v13, 2u);
    MEMORY[0x1CAA493AC](v13, -1, -1);
  }

  v14 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v15 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v3
                                                                                 + OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer_suggestionStore))
                                           + 0xB0))(v14);
  if (*(_QWORD *)(sub_1C9E02BE0(v15) + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1EF931AE8);
    v16 = sub_1C9E460CC();
  }
  else
  {
    v16 = MEMORY[0x1E0DEE9E0];
  }
  v19[0] = v16;
  v17 = (_QWORD *)swift_bridgeObjectRetain();
  sub_1C9DF54B0(v17, 1, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a2(v19[0], 0);
  return swift_release();
}

uint64_t sub_1C9E033E8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD v16[2];

  v3 = v2;
  v5 = sub_1C9E45BF8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1C9DFF740();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v10, v5);
  swift_bridgeObjectRetain();
  v11 = sub_1C9E45BD4();
  v12 = sub_1C9E45E44();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v13 = 134217984;
    v16[1] = *(_QWORD *)(a2 + 16);
    sub_1C9E45F1C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9A3B000, v11, v12, "contextualEngine didUpdateActiveContexts: %ld", v13, 0xCu);
    MEMORY[0x1CAA493AC](v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  v14 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x90))(v14);
}

void sub_1C9E03568()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id sub_1C9E035C0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ContextualSuggestionServer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1C9E03648()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

_QWORD *sub_1C9E03664(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF931B80);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1C9E04984(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C9E03788(_QWORD *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char isUniquelyReferenced_nonNull_native;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = sub_1C9E45F88();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_1C9E05138();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v26;
      swift_unknownObjectRelease();
      return 0;
    }
    result = sub_1C9E45F7C();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v21 = sub_1C9E03A04(v7, result + 1);
    v27 = v21;
    if (*(_QWORD *)(v21 + 24) <= *(_QWORD *)(v21 + 16))
    {
      v25 = v8;
      sub_1C9E03BE8();
      v22 = v27;
    }
    else
    {
      v22 = v21;
      v23 = v8;
    }
    sub_1C9E03E84((uint64_t)v8, v22);
    *v3 = v22;
  }
  else
  {
    swift_bridgeObjectRetain();
    v11 = sub_1C9E45EE0();
    v12 = -1 << *(_BYTE *)(v6 + 32);
    v13 = v11 & ~v12;
    if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
    {
      sub_1C9E05138();
      v14 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v13);
      v15 = sub_1C9E45EEC();

      if ((v15 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v19 = *(void **)(*(_QWORD *)(*v2 + 48) + 8 * v13);
        *a1 = v19;
        v20 = v19;
        return 0;
      }
      v16 = ~v12;
      while (1)
      {
        v13 = (v13 + 1) & v16;
        if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          break;
        v17 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v13);
        v18 = sub_1C9E45EEC();

        if ((v18 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v28 = *v2;
    *v2 = 0x8000000000000000;
    v8 = a2;
    sub_1C9E03F04((uint64_t)v8, v13, isUniquelyReferenced_nonNull_native);
    *v2 = v28;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_1C9E03A04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF9321C8);
    v2 = sub_1C9E45FC4();
    v14 = v2;
    sub_1C9E45F70();
    if (sub_1C9E45F94())
    {
      sub_1C9E05138();
      do
      {
        swift_dynamicCast();
        v2 = v14;
        if (*(_QWORD *)(v14 + 24) <= *(_QWORD *)(v14 + 16))
        {
          sub_1C9E03BE8();
          v2 = v14;
        }
        result = sub_1C9E45EE0();
        v4 = v2 + 56;
        v5 = -1 << *(_BYTE *)(v2 + 32);
        v6 = result & ~v5;
        v7 = v6 >> 6;
        if (((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v9 = 0;
          v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v11 = v7 == v10;
            if (v7 == v10)
              v7 = 0;
            v9 |= v11;
            v12 = *(_QWORD *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v13;
        ++*(_QWORD *)(v2 + 16);
      }
      while (sub_1C9E45F94());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v2;
}

uint64_t sub_1C9E03BE8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF9321C8);
  v3 = sub_1C9E45FB8();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v28 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v28;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
      result = sub_1C9E45EE0();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

unint64_t sub_1C9E03E84(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  sub_1C9E45EE0();
  result = sub_1C9E45F64();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

void sub_1C9E03F04(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_1C9E03BE8();
  }
  else
  {
    if (v7 > v6)
    {
      sub_1C9E04078();
      goto LABEL_14;
    }
    sub_1C9E04220();
  }
  v8 = *v3;
  v9 = sub_1C9E45EE0();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    sub_1C9E05138();
    v11 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
    v12 = sub_1C9E45EEC();

    if ((v12 & 1) != 0)
    {
LABEL_13:
      sub_1C9E4615C();
      __break(1u);
    }
    else
    {
      v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v14 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
        v15 = sub_1C9E45EEC();

        if ((v15 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = a1;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
}

id sub_1C9E04078()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF9321C8);
  v2 = *v0;
  v3 = sub_1C9E45FAC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1C9E04220()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF9321C8);
  v3 = sub_1C9E45FB8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v27 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = sub_1C9E45EE0();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v27;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1C9E04498(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  id v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  id v13;
  char v14;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v18;

  v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v4 = a1;
    v5 = sub_1C9E45FA0();

    if ((v5 & 1) != 0)
    {
      v6 = sub_1C9E0465C();
      swift_bridgeObjectRelease();
      return v6;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v7 = sub_1C9E45EE0();
  v8 = -1 << *(_BYTE *)(v3 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
    goto LABEL_12;
  sub_1C9E05138();
  v10 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v9);
  v11 = sub_1C9E45EEC();

  if ((v11 & 1) == 0)
  {
    v12 = ~v8;
    do
    {
      v9 = (v9 + 1) & v12;
      if (((*(_QWORD *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_12;
      v13 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v9);
      v14 = sub_1C9E45EEC();

    }
    while ((v14 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = *v1;
  v18 = *v1;
  *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1C9E04078();
    v16 = v18;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * v9);
  sub_1C9E047E4(v9);
  *v1 = v18;
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1C9E0465C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  char v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v1 = v0;
  swift_bridgeObjectRelease();
  v2 = sub_1C9E45F7C();
  v3 = swift_unknownObjectRetain();
  v4 = sub_1C9E03A04(v3, v2);
  v15 = v4;
  swift_retain();
  v5 = sub_1C9E45EE0();
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    sub_1C9E05138();
    v8 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v7);
    v9 = sub_1C9E45EEC();

    if ((v9 & 1) != 0)
    {
LABEL_6:
      swift_release();
      v13 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v7);
      sub_1C9E047E4(v7);
      if ((sub_1C9E45EEC() & 1) != 0)
      {
        *v1 = v15;
        return v13;
      }
      __break(1u);
    }
    else
    {
      v10 = ~v6;
      while (1)
      {
        v7 = (v7 + 1) & v10;
        if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
          break;
        v11 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v7);
        v12 = sub_1C9E45EEC();

        if ((v12 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release();
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_1C9E047E4(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_1C9E45F58();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v11 = sub_1C9E45EE0();

        v12 = v11 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= (uint64_t)v12)
          {
LABEL_16:
            v15 = *(_QWORD *)(v3 + 48);
            v16 = (_QWORD *)(v15 + 8 * v2);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1C9E04984(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF931B88);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1C9E460D8();
  __break(1u);
  return result;
}

uint64_t sub_1C9E04A90(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  os_unfair_lock_s *v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  id aBlock;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  void *v30;
  uint64_t (*v31)();
  uint64_t v32;

  v2 = v1;
  v4 = sub_1C9E45BF8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1C9DFF740();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v9, v4);
  v10 = sub_1C9E45BD4();
  v11 = sub_1C9E45E44();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_1C9A3B000, v10, v11, "ContextualSuggestionServer: incoming connection", v12, 2u);
    MEMORY[0x1CAA493AC](v12, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v13 = (os_unfair_lock_s *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer_lock)
                           + 24);
  os_unfair_lock_lock(v13);
  v14 = a1;
  sub_1C9E03788(&aBlock, v14);

  os_unfair_lock_unlock(v13);
  v15 = (void *)sub_1C9E45A24();
  objc_msgSend(v14, sel_setRemoteObjectInterface_, v15);

  v16 = (void *)sub_1C9E45A18();
  objc_msgSend(v14, sel_setExportedInterface_, v16);

  objc_msgSend(v14, sel_setExportedObject_, v2);
  v17 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v14;
  *(_QWORD *)(v18 + 24) = v17;
  v31 = sub_1C9E050E4;
  v32 = v18;
  v19 = (void *)MEMORY[0x1E0C809B0];
  aBlock = (id)MEMORY[0x1E0C809B0];
  v28 = 1107296256;
  v29 = sub_1C9DE98D8;
  v30 = &block_descriptor_4;
  v20 = _Block_copy(&aBlock);
  v21 = v14;
  swift_release();
  objc_msgSend(v21, sel_setInterruptionHandler_, v20);
  _Block_release(v20);
  v22 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v22;
  *(_QWORD *)(v23 + 24) = v21;
  v31 = sub_1C9E05130;
  v32 = v23;
  aBlock = v19;
  v28 = 1107296256;
  v29 = sub_1C9DE98D8;
  v30 = &block_descriptor_11;
  v24 = _Block_copy(&aBlock);
  v25 = v21;
  swift_release();
  objc_msgSend(v25, sel_setInvalidationHandler_, v24);
  _Block_release(v24);
  objc_msgSend(v25, sel_resume);
  return 1;
}

unint64_t sub_1C9E04DA0()
{
  unint64_t result;

  result = qword_1EF9320F0;
  if (!qword_1EF9320F0)
  {
    result = MEMORY[0x1CAA492F8](&unk_1C9E81EFC, &type metadata for ContextualSuggestionServerError);
    atomic_store(result, (unint64_t *)&qword_1EF9320F0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ContextualSuggestionServerError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1C9E04E24 + 4 * byte_1C9E81EF0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1C9E04E44 + 4 * byte_1C9E81EF5[v4]))();
}

_BYTE *sub_1C9E04E24(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1C9E04E44(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C9E04E4C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C9E04E54(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C9E04E5C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C9E04E64(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ContextualSuggestionServerError()
{
  return &type metadata for ContextualSuggestionServerError;
}

void sub_1C9E04E80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  _QWORD v18[2];

  v4 = sub_1C9E45BF8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1C9DFF740();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v9, v4);
  v10 = sub_1C9E45BD4();
  v11 = sub_1C9E45E44();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_1C9A3B000, v10, v11, "ContextualSuggestionServer: requestSnapshots(forEndpoints:completion:)", v12, 2u);
    MEMORY[0x1CAA493AC](v12, -1, -1);
  }

  v13 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v14 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(a1
                                                                                 + OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer_suggestionStore))
                                           + 0xB0))(v13);
  if (*(_QWORD *)(sub_1C9E02BE0(v14) + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1EF931AE8);
    v15 = sub_1C9E460CC();
  }
  else
  {
    v15 = MEMORY[0x1E0DEE9E0];
  }
  v18[0] = v15;
  v16 = (_QWORD *)swift_bridgeObjectRetain();
  sub_1C9DF54B0(v16, 1, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1C9E45ACC();
  v17 = (void *)sub_1C9E45C70();
  (*(void (**)(uint64_t, void *, _QWORD))(a2 + 16))(a2, v17, 0);
  swift_release();

}

uint64_t sub_1C9E05094()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C9E050B8()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C9E050E4()
{
  uint64_t v0;

  return sub_1C9E02E3C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t sub_1C9E05104()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1C9E05130()
{
  uint64_t v0;

  return sub_1C9E02FCC(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

unint64_t sub_1C9E05138()
{
  unint64_t result;

  result = qword_1EF9321C0;
  if (!qword_1EF9321C0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF9321C0);
  }
  return result;
}

unint64_t sub_1C9E05174()
{
  unint64_t result;
  unint64_t v1;

  result = qword_1EF9321D8;
  if (!qword_1EF9321D8)
  {
    v1 = sub_1C9E05138();
    result = MEMORY[0x1CAA492F8](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&qword_1EF9321D8);
  }
  return result;
}

uint64_t sub_1C9E051BC()
{
  return swift_release();
}

uint64_t sub_1C9E051C4()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1C9E051F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_1C9DF080C;
  *(_OWORD *)(v2 + 120) = v3;
  return swift_task_switch();
}

uint64_t sub_1C9E0526C()
{
  type metadata accessor for MeetingContextDependencies(0);
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for MeetingContextDependencies(uint64_t a1)
{
  return sub_1C9E00AAC(a1, (uint64_t *)&unk_1EF9349A0);
}

uint64_t sub_1C9E052A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C9E05318(a1, a2, type metadata accessor for MeetingContextDependencies, a3);
}

uint64_t sub_1C9E052AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1C9DFD85C(v1 + OBJC_IVAR____TtC21AppPredictionInternal14MeetingContext_dependencies, a1, type metadata accessor for MeetingContext.Dependencies);
}

uint64_t type metadata accessor for MeetingContext.Dependencies(uint64_t a1)
{
  return sub_1C9E00AAC(a1, (uint64_t *)&unk_1EF9349C0);
}

id sub_1C9E052EC()
{
  uint64_t v0;

  return *(id *)(v0 + *(int *)(type metadata accessor for MeetingContext.Dependencies(0) + 20));
}

uint64_t sub_1C9E0530C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C9E05318(a1, a2, type metadata accessor for MeetingContext.Dependencies, a3);
}

uint64_t sub_1C9E05318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = sub_1C9E457CC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a4, a1, v8);
  result = a3(0);
  *(_QWORD *)(a4 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t sub_1C9E05378(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_1C9E07F70(a1, v2 + OBJC_IVAR____TtC21AppPredictionInternal14MeetingContext_dependencies, type metadata accessor for MeetingContext.Dependencies);
  return v2;
}

uint64_t sub_1C9E053C8(uint64_t a1)
{
  uint64_t v1;

  sub_1C9E07F70(a1, v1 + OBJC_IVAR____TtC21AppPredictionInternal14MeetingContext_dependencies, type metadata accessor for MeetingContext.Dependencies);
  return v1;
}

uint64_t sub_1C9E053F4()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9321F8);
  return sub_1C9E45D0C();
}

uint64_t sub_1C9E05428()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t sub_1C9E0544C()
{
  uint64_t v0;

  sub_1C9E05BFC(v0 + OBJC_IVAR____TtC21AppPredictionInternal14MeetingContext_dependencies, type metadata accessor for MeetingContext.Dependencies);
  return v0;
}

uint64_t sub_1C9E05478()
{
  uint64_t v0;

  sub_1C9E05BFC(v0 + OBJC_IVAR____TtC21AppPredictionInternal14MeetingContext_dependencies, type metadata accessor for MeetingContext.Dependencies);
  return swift_deallocClassInstance();
}

uint64_t sub_1C9E054B0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_1C9E054B8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

uint64_t sub_1C9E054E0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))() & 1;
}

uint64_t sub_1C9E0550C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1C9DFD85C(*v1 + OBJC_IVAR____TtC21AppPredictionInternal14MeetingContext_dependencies, a1, type metadata accessor for MeetingContext.Dependencies);
}

uint64_t sub_1C9E0553C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 96))();
  *a1 = result;
  return result;
}

uint64_t sub_1C9E05564@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for MeetingContext(0);
  sub_1C9DF09DC((unint64_t *)&qword_1EF931238, type metadata accessor for MeetingContext, (uint64_t)&unk_1C9E82060);
  result = sub_1C9DEB048();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1C9E055C0()
{
  uint64_t v0;
  uint64_t result;

  sub_1C9E069FC();
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C9E82040;
  result = type metadata accessor for MeetingContextStore.GenericMeetingContext(0);
  *(_QWORD *)(v0 + 32) = result;
  qword_1EF935100 = v0;
  return result;
}

uint64_t *sub_1C9E0561C()
{
  if (qword_1EF934710 != -1)
    swift_once();
  return &qword_1EF935100;
}

uint64_t sub_1C9E0565C()
{
  if (qword_1EF934710 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C9E0569C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC21AppPredictionInternal19MeetingContextStore_dependencies;
  swift_beginAccess();
  return sub_1C9DFD85C(v3, a1, type metadata accessor for MeetingContextDependencies);
}

uint64_t sub_1C9E056F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC21AppPredictionInternal19MeetingContextStore_dependencies;
  swift_beginAccess();
  sub_1C9E0574C(a1, v3);
  return swift_endAccess();
}

uint64_t sub_1C9E0574C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MeetingContextDependencies(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_1C9E05790())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1C9E057D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v6[4];

  v2 = swift_allocObject();
  sub_1C9DFD85C(a1, v2 + OBJC_IVAR____TtC21AppPredictionInternal19MeetingContextStore_dependencies, type metadata accessor for MeetingContextDependencies);
  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for MeetingContextDependencies(0) + 20));
  v6[2] = a1;
  swift_bridgeObjectRetain();
  v4 = sub_1C9E05A94((void (*)(uint64_t *__return_ptr, id *))sub_1C9E05A20, (uint64_t)v6, v3);
  swift_bridgeObjectRelease();
  sub_1C9E05BFC(a1, type metadata accessor for MeetingContextDependencies);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC21AppPredictionInternal19MeetingContextStore_contexts) = v4;
  return v2;
}

uint64_t sub_1C9E0589C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  _QWORD v6[4];

  sub_1C9DFD85C(a1, v1 + OBJC_IVAR____TtC21AppPredictionInternal19MeetingContextStore_dependencies, type metadata accessor for MeetingContextDependencies);
  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for MeetingContextDependencies(0) + 20));
  v6[2] = a1;
  swift_bridgeObjectRetain();
  v4 = sub_1C9E05A94((void (*)(uint64_t *__return_ptr, id *))sub_1C9E07FB4, (uint64_t)v6, v3);
  swift_bridgeObjectRelease();
  sub_1C9E05BFC(a1, type metadata accessor for MeetingContextDependencies);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC21AppPredictionInternal19MeetingContextStore_contexts) = v4;
  return v1;
}

uint64_t sub_1C9E0594C@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  void (*v12)(_QWORD, _QWORD, _QWORD, _QWORD);
  id v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v6 = type metadata accessor for MeetingContext.Dependencies(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = sub_1C9E457CC();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, a2, v11);
  *(_QWORD *)&v9[*(int *)(v6 + 20)] = v10;
  type metadata accessor for MeetingContextStore.GenericMeetingContext(0);
  v12 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))swift_allocObject();
  v13 = v10;
  v14 = sub_1C9E06A48((uint64_t)v9, v12);
  result = swift_release();
  *a3 = v14;
  return result;
}

uint64_t sub_1C9E05A20@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1C9E0594C(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1C9E05A48(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v3;

  v2 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))swift_allocObject();
  v3 = sub_1C9E06A48(a1, v2);
  swift_release();
  return v3;
}

uint64_t sub_1C9E05A94(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 >> 62)
    goto LABEL_16;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = MEMORY[0x1E0DEE9D8];
    if (!v6)
      break;
    v13 = MEMORY[0x1E0DEE9D8];
    result = sub_1C9E46048();
    if (v6 < 0)
    {
      __break(1u);
      return result;
    }
    v8 = 0;
    while (v6 != v8)
    {
      if ((a3 & 0xC000000000000001) != 0)
        v9 = (id)MEMORY[0x1CAA47960](v8, a3);
      else
        v9 = *(id *)(a3 + 8 * v8 + 32);
      v10 = v9;
      v11 = v9;
      a1(&v12, &v11);

      if (v3)
        return swift_release();
      ++v8;
      sub_1C9E46030();
      sub_1C9E46054();
      sub_1C9E46060();
      sub_1C9E4603C();
      if (v6 == v8)
        return v13;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    v6 = sub_1C9E460A8();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1C9E05BFC(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C9E05C38()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C9E05C80(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21AppPredictionInternal19MeetingContextStore_contexts);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1C9E05CD0())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1C9E05D14(uint64_t a1)
{
  void (*v1)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v2;

  v2 = sub_1C9E06A48(a1, v1);
  swift_release();
  return v2;
}

uint64_t sub_1C9E05D44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v14)(char *, uint64_t, uint64_t);

  *a7 = a1;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  v10 = type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata(0);
  v11 = (char *)a7 + *(int *)(v10 + 24);
  v12 = sub_1C9E457CC();
  v14 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
  v14(v11, a5, v12);
  return ((uint64_t (*)(char *, uint64_t, uint64_t))v14)((char *)a7 + *(int *)(v10 + 28), a6, v12);
}

uint64_t sub_1C9E05DDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1C9DFD85C(v1 + OBJC_IVAR____TtCC21AppPredictionInternal19MeetingContextStore21GenericMeetingContext_metadata, a1, type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata);
}

uint64_t sub_1C9E05E08()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1C9E05E34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata(0) + 24);
  v4 = sub_1C9E457CC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1C9E05E7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata(0) + 28);
  v4 = sub_1C9E457CC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

BOOL sub_1C9E05EC4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1C9E05ED8()
{
  sub_1C9E461B0();
  sub_1C9E461BC();
  return sub_1C9E461E0();
}

uint64_t sub_1C9E05F1C()
{
  return sub_1C9E461BC();
}

uint64_t sub_1C9E05F44()
{
  sub_1C9E461B0();
  sub_1C9E461BC();
  return sub_1C9E461E0();
}

uint64_t sub_1C9E05F84()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C9E05FB0 + 4 * byte_1C9E82050[*v0]))(0x656C746974, 0xE500000000000000);
}

uint64_t sub_1C9E05FB0()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1C9E05FC8()
{
  return 0x7461447472617473;
}

uint64_t sub_1C9E05FE4()
{
  return 0x65746144646E65;
}

uint64_t sub_1C9E05FFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1C9E07DB4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1C9E06020()
{
  return 0;
}

void sub_1C9E0602C(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1C9E06038()
{
  sub_1C9E06D7C();
  return sub_1C9E46210();
}

uint64_t sub_1C9E06060()
{
  sub_1C9E06D7C();
  return sub_1C9E4621C();
}

uint64_t sub_1C9E06088(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF932200);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C9E06D7C();
  sub_1C9E46204();
  v13 = 0;
  sub_1C9E46114();
  if (!v1)
  {
    v12 = 1;
    sub_1C9E46108();
    type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata(0);
    v11 = 2;
    sub_1C9E457CC();
    sub_1C9DF09DC(&qword_1EF932208, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
    sub_1C9E46120();
    v10 = 3;
    sub_1C9E46120();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1C9E06244@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(_QWORD, _QWORD, _QWORD);
  char *v26;
  _QWORD v28[3];
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(_QWORD, _QWORD, _QWORD);
  char v36;
  char v37;
  char v38;
  char v39;

  v29 = a2;
  v3 = sub_1C9E457CC();
  v31 = *(_QWORD *)(v3 - 8);
  v32 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v30 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v28 - v8;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF932210);
  v10 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34, v11);
  v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata(0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (_QWORD *)((char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C9E06D7C();
  v33 = v13;
  v18 = v35;
  sub_1C9E461F8();
  if (v18)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v35 = (void (*)(_QWORD, _QWORD, _QWORD))v9;
  v19 = (uint64_t)a1;
  v21 = v31;
  v20 = v32;
  v39 = 0;
  *v17 = sub_1C9E460F0();
  v17[1] = v22;
  v38 = 1;
  v17[2] = sub_1C9E460E4();
  v17[3] = v23;
  v37 = 2;
  v28[1] = sub_1C9DF09DC(qword_1EF932218, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08C0]);
  v28[2] = 0;
  sub_1C9E460FC();
  v24 = (char *)v17 + *(int *)(v14 + 24);
  v25 = v35;
  v35 = *(void (**)(_QWORD, _QWORD, _QWORD))(v21 + 32);
  v35(v24, v25, v20);
  v36 = 3;
  v26 = v30;
  sub_1C9E460FC();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v33, v34);
  v35((char *)v17 + *(int *)(v14 + 28), v26, v20);
  sub_1C9DFD85C((uint64_t)v17, v29, type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata);
  __swift_destroy_boxed_opaque_existential_0(v19);
  return sub_1C9E05BFC((uint64_t)v17, type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata);
}

uint64_t sub_1C9E0659C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C9E06244(a1, a2);
}

uint64_t sub_1C9E065B0(_QWORD *a1)
{
  return sub_1C9E06088(a1);
}

uint64_t sub_1C9E065C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v19;

  v1 = sub_1C9E457CC();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v19 - v8;
  v10 = sub_1C9E456A0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v0 + OBJC_IVAR____TtCC21AppPredictionInternal19MeetingContextStore21GenericMeetingContext_metadata;
  v16 = type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata(0);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v17(v9, v15 + *(int *)(v16 + 24), v1);
  v17(v5, v15 + *(int *)(v16 + 28), v1);
  sub_1C9E45688();
  LOBYTE(v1) = sub_1C9E45694();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return v1 & 1;
}

uint64_t sub_1C9E0670C()
{
  return 0x7261646E656C6143;
}

uint64_t sub_1C9E06730()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
  objc_msgSend(v0, sel_setDateStyle_, 0);
  objc_msgSend(v0, sel_setTimeStyle_, 1);
  sub_1C9E45FDC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1C9E45D48();
  swift_bridgeObjectRelease();
  sub_1C9E45D48();
  type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata(0);
  v1 = (void *)sub_1C9E45784();
  v2 = objc_msgSend(v0, sel_stringFromDate_, v1);

  sub_1C9E45CF4();
  sub_1C9E45D48();

  swift_bridgeObjectRelease();
  return 34;
}

uint64_t sub_1C9E06894()
{
  uint64_t v0;

  return sub_1C9E05BFC(v0 + OBJC_IVAR____TtCC21AppPredictionInternal19MeetingContextStore21GenericMeetingContext_metadata, type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata);
}

uint64_t sub_1C9E068BC()
{
  uint64_t v0;

  sub_1C9E05BFC(v0 + OBJC_IVAR____TtC21AppPredictionInternal14MeetingContext_dependencies, type metadata accessor for MeetingContext.Dependencies);
  sub_1C9E05BFC(v0 + OBJC_IVAR____TtCC21AppPredictionInternal19MeetingContextStore21GenericMeetingContext_metadata, type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata);
  return v0;
}

uint64_t sub_1C9E06900()
{
  uint64_t v0;

  sub_1C9E05BFC(v0 + OBJC_IVAR____TtC21AppPredictionInternal14MeetingContext_dependencies, type metadata accessor for MeetingContext.Dependencies);
  sub_1C9E05BFC(v0 + OBJC_IVAR____TtCC21AppPredictionInternal19MeetingContextStore21GenericMeetingContext_metadata, type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata);
  return swift_deallocClassInstance();
}

uint64_t sub_1C9E06950()
{
  uint64_t v0;

  sub_1C9E05BFC(v0 + OBJC_IVAR____TtC21AppPredictionInternal19MeetingContextStore_dependencies, type metadata accessor for MeetingContextDependencies);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1C9E0698C()
{
  uint64_t v0;

  sub_1C9E05BFC(v0 + OBJC_IVAR____TtC21AppPredictionInternal19MeetingContextStore_dependencies, type metadata accessor for MeetingContextDependencies);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1C9E069D4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
}

uint64_t sub_1C9E069FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9321F8);
  if (swift_isClassType())
    v1 = v0;
  else
    v1 = 0;
  if (v1)
    v2 = &qword_1EF931200;
  else
    v2 = (uint64_t *)&unk_1EF932670;
  return __swift_instantiateConcreteTypeFromMangledName(v2);
}

uint64_t sub_1C9E06A48(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  void (*v33)(char *, char *, uint64_t);
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  id v35;
  void *v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v46;

  v4 = sub_1C9E457CC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F028);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v41 - v15;
  v17 = type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata(0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (uint64_t *)((char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = *(int *)(type metadata accessor for MeetingContext.Dependencies(0) + 20);
  v46 = a1;
  v22 = *(void **)(a1 + v21);
  swift_retain();
  v23 = objc_msgSend(v22, sel_title);
  if (!v23)
  {
    __break(1u);
LABEL_11:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v16, 1, 1, v4);
    goto LABEL_12;
  }
  v24 = v23;
  v25 = sub_1C9E45CF4();
  v43 = v26;
  v44 = v25;

  v27 = objc_msgSend(v22, sel_location);
  if (v27)
  {
    v28 = v27;
    v29 = sub_1C9E45CF4();
    v41 = v30;
    v42 = v29;

  }
  else
  {
    v41 = 0;
    v42 = 0;
  }
  v45 = a2;
  v31 = objc_msgSend(v22, sel_startDate, v41, v42);
  if (!v31)
    goto LABEL_11;
  v32 = v31;
  sub_1C9E457A8();

  v33 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v33(v16, v8, v4);
  a2 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v5 + 56);
  a2(v16, 0, 1, v4);
  v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v34(v16, 1, v4) == 1)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v35 = objc_msgSend(v22, sel_endDate);
  if (!v35)
  {
LABEL_13:
    result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))a2)(v12, 1, 1, v4);
    goto LABEL_14;
  }
  v36 = v35;
  sub_1C9E457A8();

  v33(v12, v8, v4);
  a2(v12, 0, 1, v4);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v34)(v12, 1, v4);
  if ((_DWORD)result != 1)
  {
    v38 = v43;
    *v20 = v44;
    v20[1] = v38;
    v39 = v41;
    v20[2] = v42;
    v20[3] = v39;
    v33((char *)v20 + *(int *)(v17 + 24), v16, v4);
    v33((char *)v20 + *(int *)(v17 + 28), v12, v4);
    v40 = v45;
    sub_1C9E07F70((uint64_t)v20, (uint64_t)v45 + OBJC_IVAR____TtCC21AppPredictionInternal19MeetingContextStore21GenericMeetingContext_metadata, type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata);
    sub_1C9E07F70(v46, (uint64_t)v40 + OBJC_IVAR____TtC21AppPredictionInternal14MeetingContext_dependencies, type metadata accessor for MeetingContext.Dependencies);
    return (uint64_t)v40;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata(uint64_t a1)
{
  return sub_1C9E00AAC(a1, qword_1EF9349F0);
}

unint64_t sub_1C9E06D7C()
{
  unint64_t result;

  result = qword_1EF934718[0];
  if (!qword_1EF934718[0])
  {
    result = MEMORY[0x1CAA492F8](&unk_1C9E822B4, &type metadata for MeetingContextStore.GenericMeetingContext.Metadata.CodingKeys);
    atomic_store(result, qword_1EF934718);
  }
  return result;
}

uint64_t sub_1C9E06DC0(uint64_t a1)
{
  uint64_t result;

  result = sub_1C9DF09DC(qword_1EF932268, type metadata accessor for MeetingContext, (uint64_t)&unk_1C9E8207C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for MeetingContext(uint64_t a1)
{
  return sub_1C9E00AAC(a1, (uint64_t *)&unk_1EF9349B0);
}

uint64_t sub_1C9E06E10()
{
  return sub_1C9DF09DC((unint64_t *)&qword_1EF931238, type metadata accessor for MeetingContext, (uint64_t)&unk_1C9E82060);
}

uint64_t *sub_1C9E06E3C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1C9E457CC();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1C9E06EC8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1C9E457CC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C9E06F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1C9E457CC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1C9E06F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1C9E457CC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1C9E06FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1C9E457CC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1C9E07040()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C9E07050()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C9E07060()
{
  return sub_1C9E07460();
}

uint64_t sub_1C9E07070()
{
  return type metadata accessor for MeetingContext(0);
}

uint64_t sub_1C9E07078()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MeetingContext.Dependencies(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t *sub_1C9E070E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1C9E457CC();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    v10 = v9;
  }
  return a1;
}

void sub_1C9E07170(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1C9E457CC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

}

uint64_t sub_1C9E071B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v6 = sub_1C9E457CC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v9 = v8;
  return a1;
}

uint64_t sub_1C9E07214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  v6 = sub_1C9E457CC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  return a1;
}

uint64_t sub_1C9E0727C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1C9E457CC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1C9E072D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = sub_1C9E457CC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  return a1;
}

uint64_t sub_1C9E0733C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1C9E457CC();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1C9E073C8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1C9E457CC();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1C9E07450()
{
  return sub_1C9E07460();
}

uint64_t sub_1C9E07460()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C9E457CC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C9E074CC()
{
  return type metadata accessor for MeetingContextStore(0);
}

uint64_t type metadata accessor for MeetingContextStore(uint64_t a1)
{
  return sub_1C9E00AAC(a1, (uint64_t *)&unk_1EF9349D0);
}

uint64_t sub_1C9E074E8()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MeetingContextDependencies(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1C9E07560()
{
  return type metadata accessor for MeetingContextStore.GenericMeetingContext(0);
}

uint64_t type metadata accessor for MeetingContextStore.GenericMeetingContext(uint64_t a1)
{
  return sub_1C9E00AAC(a1, (uint64_t *)&unk_1EF9349E0);
}

uint64_t sub_1C9E0757C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

char *sub_1C9E075E8(char *a1, char *a2, uint64_t a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (char *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *((_QWORD *)a2 + 1);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *((_QWORD *)a1 + 1) = v7;
    v8 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a1 + 3) = v8;
    v9 = *(int *)(a3 + 24);
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = sub_1C9E457CC();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v13(&v4[*(int *)(a3 + 28)], &a2[*(int *)(a3 + 28)], v12);
  }
  return v4;
}

uint64_t sub_1C9E076C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1C9E457CC();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v7(v4, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + *(int *)(a2 + 28), v5);
}

char *sub_1C9E07740(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  v7 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a1 + 3) = v7;
  v8 = *(int *)(a3 + 24);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_1C9E457CC();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  v12(&a1[*(int *)(a3 + 28)], &a2[*(int *)(a3 + 28)], v11);
  return a1;
}

char *sub_1C9E077EC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_1C9E457CC();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 28)], &a2[*(int *)(a3 + 28)], v9);
  return a1;
}

char *sub_1C9E078B0(char *a1, char *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v6 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v6;
  v7 = *(int *)(a3 + 24);
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = sub_1C9E457CC();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v11(&a1[*(int *)(a3 + 28)], &a2[*(int *)(a3 + 28)], v10);
  return a1;
}

char *sub_1C9E0793C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  v7 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a1 + 3) = v7;
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_1C9E457CC();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12(&a1[*(int *)(a3 + 28)], &a2[*(int *)(a3 + 28)], v11);
  return a1;
}

uint64_t sub_1C9E079E0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C9E079EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1C9E457CC();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1C9E07A68()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C9E07A74(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1C9E457CC();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1C9E07AE8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C9E457CC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MeetingContextStore.GenericMeetingContext.Metadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MeetingContextStore.GenericMeetingContext.Metadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1C9E07C4C + 4 * byte_1C9E82059[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1C9E07C80 + 4 * byte_1C9E82054[v4]))();
}

uint64_t sub_1C9E07C80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C9E07C88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C9E07C90);
  return result;
}

uint64_t sub_1C9E07C9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C9E07CA4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1C9E07CA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C9E07CB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C9E07CBC(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1C9E07CC4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata.CodingKeys()
{
  return &type metadata for MeetingContextStore.GenericMeetingContext.Metadata.CodingKeys;
}

unint64_t sub_1C9E07CE0()
{
  unint64_t result;

  result = qword_1EF934B00[0];
  if (!qword_1EF934B00[0])
  {
    result = MEMORY[0x1CAA492F8](&unk_1C9E8228C, &type metadata for MeetingContextStore.GenericMeetingContext.Metadata.CodingKeys);
    atomic_store(result, qword_1EF934B00);
  }
  return result;
}

unint64_t sub_1C9E07D28()
{
  unint64_t result;

  result = qword_1EF934C10;
  if (!qword_1EF934C10)
  {
    result = MEMORY[0x1CAA492F8](&unk_1C9E821FC, &type metadata for MeetingContextStore.GenericMeetingContext.Metadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF934C10);
  }
  return result;
}

unint64_t sub_1C9E07D70()
{
  unint64_t result;

  result = qword_1EF934C18[0];
  if (!qword_1EF934C18[0])
  {
    result = MEMORY[0x1CAA492F8](&unk_1C9E82224, &type metadata for MeetingContextStore.GenericMeetingContext.Metadata.CodingKeys);
    atomic_store(result, qword_1EF934C18);
  }
  return result;
}

uint64_t sub_1C9E07DB4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
  if (v2 || (sub_1C9E46144() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000 || (sub_1C9E46144() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7461447472617473 && a2 == 0xE900000000000065 || (sub_1C9E46144() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65746144646E65 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1C9E46144();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1C9E07F70(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C9E07FB4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1C9E05A20(a1, a2);
}

uint64_t sub_1C9E07FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v11;
  uint64_t v12;

  v5 = sub_1C9E457F0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C9E457E4();
  sub_1C9E457D8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  if (v2)
    return swift_bridgeObjectRelease();
  v11 = objc_allocWithZone((Class)sub_1C9E45A48());
  return sub_1C9E45A3C();
}

uint64_t sub_1C9E080C8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_1C9E080E0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

char *sub_1C9E080F8()
{
  return aSports;
}

uint64_t sub_1C9E08104()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = *(_QWORD *)aSports;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1C9E08154(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(_QWORD *)aSports = a1;
  qword_1EF932680 = a2;
  return swift_bridgeObjectRelease();
}

void *sub_1C9E081AC()
{
  return &unk_1C9E82340;
}

uint64_t sub_1C9E081B8()
{
  return 180;
}

uint64_t sub_1C9E081C0()
{
  uint64_t inited;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84EEF0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C9E82040;
  v1 = (uint64_t *)sub_1C9E009E0();
  v3 = *v1;
  v2 = v1[1];
  *(_QWORD *)(inited + 32) = v3;
  *(_QWORD *)(inited + 40) = v2;
  swift_bridgeObjectRetain();
  v4 = sub_1C9E08428(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v4;
}

_OWORD *sub_1C9E08250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v28;
  __int128 v29;
  ValueMetadata *v30;
  _UNKNOWN **v31;
  _OWORD v32[4];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF932688);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SportsDependencies(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (uint64_t *)((char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1C9DF08CC(a3, (uint64_t)v32);
  v15 = swift_dynamicCast();
  v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (v15)
  {
    v16(v9, 0, 1, v10);
    sub_1C9E00CB0((uint64_t)v9, (uint64_t)v14);
    v17 = *v14;
    swift_bridgeObjectRetain();
    v18 = nullsub_1(v17);
    v20 = v19;
    swift_bridgeObjectRetain();
    v21 = sub_1C9E08608((uint64_t)&unk_1E82ED418);
    v30 = &type metadata for SportsSuggestion;
    v31 = &off_1E82EC050;
    *(_QWORD *)&v29 = v18;
    *((_QWORD *)&v29 + 1) = v20;
    sub_1C9E004C8(a1, a2, v21, &v29, v32);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF932690);
    v22 = (_OWORD *)swift_allocObject();
    v23 = v32[0];
    v24 = v32[1];
    v22[1] = xmmword_1C9E82040;
    v22[2] = v23;
    v25 = v32[2];
    v26 = v32[3];
    v22[3] = v24;
    v22[4] = v25;
    v22[5] = v26;
    sub_1C9E08798((uint64_t)v14);
  }
  else
  {
    v16(v9, 1, 1, v10);
    sub_1C9E085C8((uint64_t)v9);
    return (_OWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v22;
}

uint64_t sub_1C9E08428(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF931BD0);
    v3 = sub_1C9E45FD0();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      sub_1C9E461B0();
      swift_bridgeObjectRetain();
      sub_1C9E45D3C();
      result = sub_1C9E461E0();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = sub_1C9E46144(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = sub_1C9E46144();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1C9E085C8(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF932688);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C9E08608(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF932698);
    v3 = sub_1C9E45FD0();
    v4 = v3 + 56;
    v22 = a1 + 32;
    sub_1C9E087F4();
    v5 = 0;
    v21 = v1;
    while (1)
    {
      v6 = (uint64_t *)(v22 + 16 * v5);
      v7 = *v6;
      v8 = *((_BYTE *)v6 + 8);
      result = sub_1C9E45C7C();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v4 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v20 = v7;
        v15 = ~v10;
        sub_1C9E00E08();
        while (1)
        {
          result = sub_1C9E45CC4();
          if ((result & 1) != 0)
            break;
          v11 = (v11 + 1) & v15;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v4 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
          {
            v7 = v20;
            goto LABEL_9;
          }
        }
      }
      else
      {
LABEL_9:
        *(_QWORD *)(v4 + 8 * v12) = v14 | v13;
        v16 = *(_QWORD *)(v3 + 48) + 16 * v11;
        *(_QWORD *)v16 = v7;
        *(_BYTE *)(v16 + 8) = v8;
        v17 = *(_QWORD *)(v3 + 16);
        v18 = __OFADD__(v17, 1);
        v19 = v17 + 1;
        if (v18)
        {
          __break(1u);
          return result;
        }
        *(_QWORD *)(v3 + 16) = v19;
      }
      if (++v5 == v21)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1C9E08798(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SportsDependencies(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for SportsSuggestionProducer()
{
  return objc_opt_self();
}

unint64_t sub_1C9E087F4()
{
  unint64_t result;

  result = qword_1EF9326A0;
  if (!qword_1EF9326A0)
  {
    result = MEMORY[0x1CAA492F8](&unk_1C9E81CF0, &type metadata for SpotlightContextSuggestionEntry.ValidTimeframe);
    atomic_store(result, (unint64_t *)&qword_1EF9326A0);
  }
  return result;
}

uint64_t sub_1C9E08838()
{
  sub_1C9E45BBC();
  swift_allocObject();
  return sub_1C9E45BB0();
}

uint64_t BundleIdRedactor.redact(bundleIds:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t sub_1C9E08884()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1C9E088E4;
  return sub_1C9E45BA4();
}

uint64_t sub_1C9E088E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 40) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_1C9E08958()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
  if (v1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    sub_1C9DF66B4(0, v1, 0);
    v2 = v9;
    v3 = *(_QWORD *)(v9 + 16);
    v4 = 16 * v3;
    do
    {
      v5 = *(_QWORD *)(v9 + 24);
      v6 = v3 + 1;
      if (v3 >= v5 >> 1)
        sub_1C9DF66B4(v5 > 1, v3 + 1, 1);
      *(_QWORD *)(v9 + 16) = v6;
      v7 = v9 + v4;
      *(_QWORD *)(v7 + 32) = 0xD000000000000013;
      *(_QWORD *)(v7 + 40) = 0x80000001C9ED9100;
      v4 += 16;
      v3 = v6;
      --v1;
    }
    while (v1);

  }
  else
  {

    v2 = MEMORY[0x1E0DEE9D8];
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_1C9E08B8C(int a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v5;
  id v6;
  _QWORD *v7;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v5 = sub_1C9E45D84();
  v3[4] = v5;
  v6 = a3;
  v7 = (_QWORD *)swift_task_alloc();
  v3[5] = v7;
  *v7 = v3;
  v7[1] = sub_1C9E08C2C;
  v7[2] = v5;
  v7[3] = v6;
  return swift_task_switch();
}

uint64_t sub_1C9E08C2C()
{
  uint64_t *v0;
  void (**v1)(_QWORD, _QWORD);
  void *v2;
  void *v3;
  uint64_t v5;

  v2 = *(void **)(*v0 + 16);
  v1 = *(void (***)(_QWORD, _QWORD))(*v0 + 24);
  v5 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  v3 = (void *)sub_1C9E45D78();
  swift_bridgeObjectRelease();
  ((void (**)(_QWORD, void *))v1)[2](v1, v3);

  _Block_release(v1);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

id BundleIdRedactor.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id BundleIdRedactor.init()()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  char *v3;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = OBJC_IVAR___ATXBundleIdRedactor_summarizationPipelineClient;
  sub_1C9E45BBC();
  swift_allocObject();
  v3 = v0;
  *(_QWORD *)&v0[v2] = sub_1C9E45BB0();

  v5.receiver = v3;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

id BundleIdRedactor.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for BundleIdRedactor()
{
  return objc_opt_self();
}

uint64_t sub_1C9E08E58()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_1C9E08E8C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1C9DF080C;
  return ((uint64_t (*)(int, void *, void *))((char *)&dword_1EF9326B8 + dword_1EF9326B8))(v2, v3, v4);
}

uint64_t sub_1C9E08F00()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C9E08F24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1C9DF080C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EF931D40 + dword_1EF931D40))(a1, v4);
}

uint64_t sub_1C9E08F94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC21AppPredictionInternal19LiveActivityContext_dependencies;
  swift_beginAccess();
  return sub_1C9E08FE4(v3, a1);
}

uint64_t sub_1C9E08FE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LiveActivityContext.Dependencies(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for LiveActivityContext.Dependencies(uint64_t a1)
{
  return sub_1C9E00AAC(a1, qword_1EF934E40);
}

uint64_t sub_1C9E0903C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC21AppPredictionInternal19LiveActivityContext_dependencies;
  swift_beginAccess();
  sub_1C9E09094(a1, v3);
  return swift_endAccess();
}

uint64_t sub_1C9E09094(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LiveActivityContext.Dependencies(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_1C9E090D8())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1C9E0911C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1C9E4585C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_1C9E09154@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_1C9E4585C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t sub_1C9E09190(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_1C9E091FC(a1, v2 + OBJC_IVAR____TtC21AppPredictionInternal19LiveActivityContext_dependencies);
  return v2;
}

uint64_t sub_1C9E091D8(uint64_t a1)
{
  uint64_t v1;

  sub_1C9E091FC(a1, v1 + OBJC_IVAR____TtC21AppPredictionInternal19LiveActivityContext_dependencies);
  return v1;
}

uint64_t sub_1C9E091FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LiveActivityContext.Dependencies(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C9E09240()
{
  return 0x746341206576694CLL;
}

unint64_t sub_1C9E09264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;
  unint64_t v24;

  v1 = sub_1C9E458D4();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1C9E458BC();
  v7 = MEMORY[0x1E0C8FFB8];
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LiveActivityContext.Dependencies(0);
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(double))(*(_QWORD *)v0 + 88))(v13);
  sub_1C9E45850();
  v16 = sub_1C9E4585C();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  sub_1C9E458B0();
  sub_1C9E05BFC((uint64_t)v10, (uint64_t (*)(_QWORD))v7);
  sub_1C9E458C8();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  v17 = (void *)objc_opt_self();
  v18 = (void *)sub_1C9E45CE8();
  v19 = objc_msgSend(v17, sel_localizedNameForBundle_, v18);

  if (v19)
  {
    sub_1C9E45CF4();
    v21 = v20;

  }
  else
  {
    v21 = 0;
  }
  v23 = 0;
  v24 = 0xE000000000000000;
  sub_1C9E45FDC();
  swift_bridgeObjectRelease();
  v23 = 0xD000000000000013;
  v24 = 0x80000001C9ED9190;
  if (v21)
    swift_bridgeObjectRelease();
  sub_1C9E45D48();
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_1C9E09484()
{
  uint64_t v0;

  sub_1C9E05BFC(v0 + OBJC_IVAR____TtC21AppPredictionInternal19LiveActivityContext_dependencies, type metadata accessor for LiveActivityContext.Dependencies);
  return v0;
}

uint64_t sub_1C9E094B0()
{
  uint64_t v0;

  sub_1C9E05BFC(v0 + OBJC_IVAR____TtC21AppPredictionInternal19LiveActivityContext_dependencies, type metadata accessor for LiveActivityContext.Dependencies);
  return swift_deallocClassInstance();
}

uint64_t sub_1C9E094E8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

uint64_t sub_1C9E09510@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for LiveActivityContext(0);
  sub_1C9E09980(qword_1EF932730, (uint64_t)&unk_1C9E823E0);
  result = sub_1C9DEB048();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1C9E09564()
{
  uint64_t v0;
  uint64_t result;

  sub_1C9E09710();
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C9E82040;
  result = type metadata accessor for LiveActivityContext(0);
  *(_QWORD *)(v0 + 32) = result;
  qword_1EF935128 = v0;
  return result;
}

uint64_t *sub_1C9E095C0()
{
  if (qword_1EF934CA0 != -1)
    swift_once();
  return &qword_1EF935128;
}

uint64_t sub_1C9E09600()
{
  if (qword_1EF934CA0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C9E09640()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C9E09648(uint64_t a1)
{
  uint64_t v2;

  swift_allocObject();
  v2 = sub_1C9E0975C(a1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1C9E09690(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_1C9E0975C(a1);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1C9E096C0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1C9E096E4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1C9E09710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF932970);
  if (swift_isClassType())
    v1 = v0;
  else
    v1 = 0;
  if (v1)
    v2 = &qword_1EF931200;
  else
    v2 = (uint64_t *)&unk_1EF932978;
  return __swift_instantiateConcreteTypeFromMangledName(v2);
}

uint64_t sub_1C9E0975C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = type metadata accessor for LiveActivityContext.Dependencies(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1C9E4585C();
  v20 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 24) = a1;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v19 = v1;
    v21 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1C9E46048();
    v12 = a1 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    v13 = *(_QWORD *)(v20 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
    do
    {
      v14(v10, v12, v7);
      v14(v6, (uint64_t)v10, v7);
      type metadata accessor for LiveActivityContext(0);
      v15 = swift_allocObject();
      sub_1C9E091FC((uint64_t)v6, v15 + OBJC_IVAR____TtC21AppPredictionInternal19LiveActivityContext_dependencies);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v7);
      sub_1C9E46030();
      sub_1C9E46054();
      sub_1C9E46060();
      sub_1C9E4603C();
      v12 += v13;
      --v11;
    }
    while (v11);
    v16 = v21;
    v1 = v19;
  }
  else
  {
    swift_bridgeObjectRetain();
    v16 = MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)(v1 + 16) = v16;
  return v1;
}

uint64_t sub_1C9E09914(uint64_t a1)
{
  uint64_t result;

  result = sub_1C9E09980(&qword_1EF932728, (uint64_t)&unk_1C9E823FC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for LiveActivityContext(uint64_t a1)
{
  return sub_1C9E00AAC(a1, (uint64_t *)&unk_1EF934E30);
}

uint64_t sub_1C9E0995C()
{
  return sub_1C9E09980(qword_1EF932730, (uint64_t)&unk_1C9E823E0);
}

uint64_t sub_1C9E09980(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for LiveActivityContext(255);
    result = MEMORY[0x1CAA492F8](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveActivityContextDependencies()
{
  return &type metadata for LiveActivityContextDependencies;
}

uint64_t sub_1C9E099D0()
{
  return type metadata accessor for LiveActivityContext(0);
}

uint64_t sub_1C9E099D8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C9E4585C();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1C9E09A44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1C9E4585C();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1C9E09A80(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1C9E4585C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1C9E09AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1C9E4585C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1C9E09AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1C9E4585C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1C9E09B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1C9E4585C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1C9E09B80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1C9E4585C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1C9E09BC4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C9E09BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1C9E4585C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1C9E09C0C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C9E09C18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1C9E4585C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1C9E09C58()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C9E4585C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for LiveActivityContextStore()
{
  return objc_opt_self();
}

uint64_t sub_1C9E09CE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v0 = sub_1C9E45E68();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1C9E45E5C();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v5, v7);
  v8 = sub_1C9E45C4C();
  MEMORY[0x1E0C80A78](v8, v9);
  sub_1C9DE8EB0(0, (unint64_t *)&qword_1ED84EFD0);
  sub_1C9E45C40();
  v11[1] = MEMORY[0x1E0DEE9D8];
  sub_1C9DF09DC((unint64_t *)&qword_1ED84F0B0, v6, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84F050);
  sub_1C9DFD7E0(qword_1ED84F060, (uint64_t *)&unk_1ED84F050, MEMORY[0x1E0DEAF38]);
  sub_1C9E45F4C();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, *MEMORY[0x1E0DEF8D0], v0);
  return sub_1C9E45E80();
}

id sub_1C9E09EAC()
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CA5660]), sel_init);
}

uint64_t sub_1C9E09ED0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1C9DF7A98(v0 + 24);
  return swift_deallocClassInstance();
}

uint64_t sub_1C9E09EFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v1 = v0;
  v2 = type metadata accessor for MeetingContextDependencies(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1C9E457CC();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TimeOfDayContextDependencies(0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9329B0);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1C9E81480;
  v15 = type metadata accessor for TimeOfDayContextStore();
  sub_1C9E457C0();
  sub_1C9E0F41C((uint64_t)v9, (uint64_t)v13);
  v16 = sub_1C9E0FAF8((uint64_t)v13);
  *(_QWORD *)(v14 + 56) = v15;
  *(_QWORD *)(v14 + 64) = sub_1C9DF09DC(&qword_1EF9329B8, (uint64_t (*)(uint64_t))type metadata accessor for TimeOfDayContextStore, (uint64_t)&unk_1C9E826E4);
  *(_QWORD *)(v14 + 32) = v16;
  v17 = type metadata accessor for MeetingContextStore(0);
  sub_1C9E457C0();
  v18 = MEMORY[0x1E0DEE9D8];
  sub_1C9E052A0((uint64_t)v9, MEMORY[0x1E0DEE9D8], (uint64_t)v5);
  v19 = sub_1C9E057D4((uint64_t)v5);
  *(_QWORD *)(v14 + 96) = v17;
  *(_QWORD *)(v14 + 104) = sub_1C9DF09DC(&qword_1EF9329C0, type metadata accessor for MeetingContextStore, (uint64_t)&unk_1C9E82104);
  *(_QWORD *)(v14 + 72) = v19;
  v20 = type metadata accessor for LocationOfInterestContextStore();
  v21 = (void *)nullsub_1(0);
  v22 = sub_1C9DEA9E4(v21);
  *(_QWORD *)(v14 + 136) = v20;
  *(_QWORD *)(v14 + 144) = sub_1C9DF09DC(&qword_1EF9329C8, (uint64_t (*)(uint64_t))type metadata accessor for LocationOfInterestContextStore, (uint64_t)&unk_1C9E814E4);
  *(_QWORD *)(v14 + 112) = v22;
  v23 = type metadata accessor for MotionContextStore();
  v24 = (void *)nullsub_1(0);
  v25 = sub_1C9DE7F74(v24);
  *(_QWORD *)(v14 + 176) = v23;
  *(_QWORD *)(v14 + 184) = sub_1C9DF09DC(&qword_1EF9329D0, (uint64_t (*)(uint64_t))type metadata accessor for MotionContextStore, (uint64_t)&unk_1C9E810E4);
  *(_QWORD *)(v14 + 152) = v25;
  v26 = type metadata accessor for LiveActivityContextStore();
  v27 = nullsub_1(v18);
  v28 = sub_1C9E09648(v27);
  *(_QWORD *)(v14 + 216) = v26;
  *(_QWORD *)(v14 + 224) = sub_1C9DF09DC(&qword_1EF9329D8, (uint64_t (*)(uint64_t))type metadata accessor for LiveActivityContextStore, (uint64_t)&unk_1C9E82434);
  *(_QWORD *)(v14 + 192) = v28;
  *(_QWORD *)(v1 + 16) = v14;
  *(_QWORD *)(v1 + 32) = 0;
  swift_unknownObjectWeakInit();
  return v1;
}

uint64_t sub_1C9E0A1A8()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for ContextualEngineContextStore.GuardedData();
  v0 = swift_allocObject();
  sub_1C9E09EFC();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF932980);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = v0;
  return result;
}

uint64_t type metadata accessor for ContextualEngineContextStore.GuardedData()
{
  return objc_opt_self();
}

uint64_t sub_1C9E0A218()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;

  v1 = *(os_unfair_lock_s **)(v0 + 136);
  swift_getKeyPath();
  v2 = v1 + 6;
  swift_retain();
  os_unfair_lock_lock(v1 + 6);
  v3 = sub_1C9E0A31C();
  os_unfair_lock_unlock(v2);
  swift_release_n();
  return v3;
}

uint64_t sub_1C9E0A288@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1;
  result = MEMORY[0x1CAA4943C](*a1 + 24);
  v5 = *(_QWORD *)(v3 + 32);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_1C9E0A2B8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 32) = *(_QWORD *)(a1 + 8);
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1C9E0A2D0()
{
  uint64_t v1;

  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  return v1;
}

uint64_t sub_1C9E0A31C()
{
  return sub_1C9E0A2D0();
}

uint64_t sub_1C9E0A324(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 + 136);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
  *(_QWORD *)(*(_QWORD *)(v4 + 16) + 32) = a2;
  swift_unknownObjectWeakAssign();
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 24));
  return swift_unknownObjectRelease();
}

uint64_t (*sub_1C9E0A37C(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(os_unfair_lock_s **)(v1 + 136);
  a1[2] = (uint64_t)v3;
  swift_getKeyPath();
  v4 = v3 + 6;
  swift_retain();
  os_unfair_lock_lock(v3 + 6);
  v5 = sub_1C9E0A31C();
  v7 = v6;
  os_unfair_lock_unlock(v4);
  swift_release_n();
  *a1 = v5;
  a1[1] = v7;
  return sub_1C9E0A404;
}

uint64_t sub_1C9E0A404(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
    *(_QWORD *)(*(_QWORD *)(v3 + 16) + 32) = v2;
    swift_unknownObjectWeakAssign();
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
    swift_unknownObjectRelease();
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
    *(_QWORD *)(*(_QWORD *)(v3 + 16) + 32) = v2;
    swift_unknownObjectWeakAssign();
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  }
  return swift_unknownObjectRelease();
}

unint64_t sub_1C9E0A4C0()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = (os_unfair_lock_s *)(v1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  v25 = MEMORY[0x1E0DEE9D8];
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    v17 = (os_unfair_lock_s *)(v1 + 24);
    v6 = v3 + 32;
    swift_bridgeObjectRetain_n();
    for (i = 0; i != v5; ++i)
    {
      sub_1C9DE9E88(v6 + 40 * i, (uint64_t)v22);
      v9 = v23;
      v10 = v24;
      __swift_project_boxed_opaque_existential_1(v22, v23);
      (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10);
      swift_getAssociatedTypeWitness();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF931BB0);
      v11 = sub_1C9E4606C();
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(v11 + 16);
      if (v12)
      {
        v21 = v4;
        sub_1C9E46048();
        v13 = v11 + 32;
        do
        {
          sub_1C9DE9E88(v13, (uint64_t)v18);
          v14 = v19;
          v15 = v20;
          __swift_project_boxed_opaque_existential_1(v18, v19);
          (*(void (**)(uint64_t, uint64_t))(v15 + 32))(v14, v15);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
          sub_1C9E46030();
          sub_1C9E46054();
          sub_1C9E46060();
          sub_1C9E4603C();
          v13 += 40;
          --v12;
        }
        while (v12);
        v8 = v21;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v8 = v4;
      }
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
      sub_1C9E0DA30(v8);
    }
    swift_bridgeObjectRelease_n();
    v4 = v25;
    v2 = v17;
  }
  os_unfair_lock_unlock(v2);
  return v4;
}

uint64_t sub_1C9E0A6BC()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t result;
  os_unfair_lock_t lock;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = (os_unfair_lock_s *)(v1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_25:
    os_unfair_lock_unlock(v2);
    return (uint64_t)v6;
  }
  lock = v2;
  v5 = (_QWORD *)(v3 + 32);
  swift_bridgeObjectRetain_n();
  v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    __swift_project_boxed_opaque_existential_1(v5, v5[3]);
    swift_getDynamicType();
    (*(void (**)(void))(v5[4] + 32))();
    swift_getAssociatedTypeWitness();
    swift_getMetatypeMetadata();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF932D70);
    v7 = sub_1C9E4606C();
    swift_bridgeObjectRelease();
    v8 = *(_QWORD *)(v7 + 16);
    v9 = v6[2];
    v10 = v9 + v8;
    if (__OFADD__(v9, v8))
      break;
    isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)isUniquelyReferenced_nonNull_native && v10 <= v6[3] >> 1)
    {
      if (*(_QWORD *)(v7 + 16))
        goto LABEL_14;
    }
    else
    {
      if (v9 <= v10)
        v12 = v9 + v8;
      else
        v12 = v9;
      v6 = sub_1C9E0D804(isUniquelyReferenced_nonNull_native, v12, 1, v6);
      if (*(_QWORD *)(v7 + 16))
      {
LABEL_14:
        v13 = v6[2];
        if ((v6[3] >> 1) - v13 < v8)
          goto LABEL_28;
        v14 = &v6[2 * v13 + 4];
        if (v7 + 32 < (unint64_t)&v14[2 * v8] && (unint64_t)v14 < v7 + 32 + 16 * v8)
          goto LABEL_30;
        memcpy(v14, (const void *)(v7 + 32), 16 * v8);
        if (v8)
        {
          v16 = v6[2];
          v17 = __OFADD__(v16, v8);
          v18 = v16 + v8;
          if (v17)
            goto LABEL_29;
          v6[2] = v18;
        }
        goto LABEL_4;
      }
    }
    if (v8)
      goto LABEL_27;
LABEL_4:
    swift_bridgeObjectRelease();
    v5 += 5;
    if (!--v4)
    {
      swift_bridgeObjectRelease_n();
      v2 = lock;
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  result = sub_1C9E460D8();
  __break(1u);
  return result;
}

uint64_t sub_1C9E0A908()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = (os_unfair_lock_s *)(v1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  v14 = MEMORY[0x1E0DEE9D8];
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    v6 = v3 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_1C9DE9E88(v6, (uint64_t)v11);
      v7 = v12;
      v8 = v13;
      __swift_project_boxed_opaque_existential_1(v11, v12);
      v9 = sub_1C9DEB1D0(v7, v8);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v11);
      sub_1C9E0DBE8(v9);
      v6 += 40;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    v4 = v14;
  }
  os_unfair_lock_unlock(v2);
  return v4;
}

uint64_t sub_1C9E0A9DC()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1C9E0AA10();
  return v0;
}

_QWORD *sub_1C9E0AA10()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84F090);
  MEMORY[0x1E0C80A78](v2, v3);
  v33 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_1C9E45BF8();
  v32 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_1C9E45E68();
  v8 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1C9E45E5C();
  v13 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v12, v14);
  v15 = sub_1C9E45C4C();
  MEMORY[0x1E0C80A78](v15, v16);
  swift_defaultActor_initialize();
  v29 = sub_1C9DE8EB0(0, (unint64_t *)&qword_1ED84EFD0);
  sub_1C9E45C40();
  v34 = MEMORY[0x1E0DEE9D8];
  sub_1C9DF09DC((unint64_t *)&qword_1ED84F0B0, v13, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84F050);
  v17 = v30;
  sub_1C9DFD7E0(qword_1ED84F060, (uint64_t *)&unk_1ED84F050, MEMORY[0x1E0DEAF38]);
  v18 = v32;
  sub_1C9E45F4C();
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, *MEMORY[0x1E0DEF8D0], v31);
  v0[14] = sub_1C9E45E80();
  v0[15] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CA5660]), sel_init);
  v0[16] = 0;
  type metadata accessor for ContextualEngineContextStore.GuardedData();
  v19 = swift_allocObject();
  sub_1C9E09EFC();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF932980);
  v20 = swift_allocObject();
  *(_DWORD *)(v20 + 24) = 0;
  *(_QWORD *)(v20 + 16) = v19;
  v1[17] = v20;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  v21 = sub_1C9DFF740();
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v7, v21, v17);
  v22 = sub_1C9E45BD4();
  v23 = sub_1C9E45E44();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v24 = 0;
    _os_log_impl(&dword_1C9A3B000, v22, v23, "ContextualEngineContextStore init", v24, 2u);
    MEMORY[0x1CAA493AC](v24, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v17);
  v25 = sub_1C9E45DE4();
  v26 = (uint64_t)v33;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v33, 1, 1, v25);
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = 0;
  v27[3] = 0;
  v27[4] = v1;
  swift_retain();
  sub_1C9DEBF40(v26, (uint64_t)&unk_1EF932998, (uint64_t)v27);
  swift_release();
  return v1;
}

uint64_t sub_1C9E0ADD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t sub_1C9E0ADE8()
{
  uint64_t v0;

  sub_1C9E0AE7C();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1C9E0AE1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1C9DF080C;
  v3[2] = v2;
  return swift_task_switch();
}

void sub_1C9E0AE7C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[4];
  uint64_t aBlock;
  uint64_t v36;
  uint64_t (*v37)();
  void *v38;
  uint64_t (*v39)(_QWORD);
  uint64_t v40;

  v1 = v0;
  v2 = sub_1C9E45BF8();
  v34[1] = *(_QWORD *)(v2 - 8);
  v34[2] = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v4 = sub_1C9E458A4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v10 = *MEMORY[0x1E0CA9F88];
  v11 = swift_allocObject();
  swift_weakInit();
  v39 = (uint64_t (*)(_QWORD))sub_1C9E0DDE4;
  v40 = v11;
  v12 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v36 = 1107296256;
  v37 = (uint64_t (*)())sub_1C9DFEBC4;
  v38 = &block_descriptor_5;
  v13 = _Block_copy(&aBlock);
  swift_release();
  v14 = objc_msgSend(v9, sel_addObserverForName_object_queue_usingBlock_, v10, 0, 0, v13);
  _Block_release(v13);

  swift_unknownObjectRelease();
  v15 = (void *)v0[15];
  v16 = objc_msgSend((id)objc_opt_self(), sel_mainQueue);
  v17 = swift_allocObject();
  swift_weakInit();
  v39 = (uint64_t (*)(_QWORD))sub_1C9E0DE04;
  v40 = v17;
  aBlock = v12;
  v36 = 1107296256;
  v37 = (uint64_t (*)())sub_1C9E0BBD4;
  v38 = &block_descriptor_16;
  v18 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v15, sel_startActivityUpdatesToQueue_withHandler_, v16, v18);
  _Block_release(v18);

  v19 = (void *)v1[14];
  v20 = objc_allocWithZone(MEMORY[0x1E0D025E0]);
  v21 = v19;
  v22 = (void *)sub_1C9E45CE8();
  v23 = objc_msgSend(v20, sel_initWithIdentifier_targetQueue_, v22, v21);

  v1[18] = v23;
  swift_unknownObjectRelease();
  v24 = objc_msgSend((id)BiomeLibrary(), sel_App);
  swift_unknownObjectRelease();
  v25 = objc_msgSend(v24, sel_Intent);
  swift_unknownObjectRelease();
  v26 = objc_msgSend(v25, sel_DSLPublisherWithUseCase_, *MEMORY[0x1E0CF9398]);

  if (v1[18])
  {
    v27 = objc_msgSend(v26, sel_subscribeOn_);

    v39 = nullsub_1;
    v40 = 0;
    aBlock = v12;
    v36 = 1107296256;
    v37 = sub_1C9DED968;
    v38 = &block_descriptor_19_0;
    v28 = _Block_copy(&aBlock);
    v29 = swift_allocObject();
    swift_weakInit();
    v39 = (uint64_t (*)(_QWORD))sub_1C9E0DE0C;
    v40 = v29;
    aBlock = v12;
    v36 = 1107296256;
    v37 = (uint64_t (*)())sub_1C9E0C00C;
    v38 = &block_descriptor_23;
    v30 = _Block_copy(&aBlock);
    swift_release();
    v31 = objc_msgSend(v27, sel_sinkWithCompletion_receiveInput_, v28, v30);
    _Block_release(v30);
    _Block_release(v28);

    v1[19] = v31;
    swift_unknownObjectRelease();
    sub_1C9E4588C();
    sub_1C9E45880();
    sub_1C9E45898();
    v32 = sub_1C9E45874();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    swift_release();
    aBlock = v32;
    swift_allocObject();
    swift_weakInit();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF932D08);
    sub_1C9DFD7E0(&qword_1EF932D10, &qword_1EF932D08, MEMORY[0x1E0C95D90]);
    v33 = sub_1C9E45C10();
    swift_release();
    swift_release();
    v1[21] = v33;
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1C9E0B518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84F090);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = result;
    v6 = sub_1C9E45DE4();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v3, 1, 1, v6);
    v7 = (_QWORD *)swift_allocObject();
    v7[2] = 0;
    v7[3] = 0;
    v7[4] = v5;
    sub_1C9E0B6F4((uint64_t)v3, (uint64_t)&unk_1EF932D50, (uint64_t)v7);
    return swift_release();
  }
  return result;
}

uint64_t sub_1C9E0B5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  *(_QWORD *)(v4 + 16) = a1;
  v7 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)a4 + 352) + *(_QWORD *)(*(_QWORD *)a4 + 352));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = v4;
  v5[1] = sub_1C9E0B65C;
  return v7();
}

uint64_t sub_1C9E0B65C(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_BYTE *)(v4 + 32) = a1 & 1;
  return swift_task_switch();
}

uint64_t sub_1C9E0B6DC()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_BYTE *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1C9E0B6F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_1C9E45DE4();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_1C9E45DD8();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_1C9DF090C(a1, (uint64_t *)&unk_1ED84F090);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1C9E45DCC();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_1C9E0B824(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD *v19;
  NSObject *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  NSObject *v25;
  _QWORD v26[2];
  uint64_t v27;
  char *v28;
  NSObject *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84F090);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1C9E45BF8();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a2 + 16;
  v14 = sub_1C9DFF740();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v14, v8);
  v15 = a1;
  v16 = sub_1C9E45BD4();
  v17 = sub_1C9E45E44();
  if (os_log_type_enabled(v16, v17))
  {
    v26[0] = v9;
    v26[1] = v13;
    v27 = v8;
    v28 = v7;
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v18 = 138412290;
    if (a1)
    {
      v29 = v15;
      v20 = v15;
    }
    else
    {
      a1 = 0;
      v29 = 0;
    }
    sub_1C9E45F1C();
    *v19 = a1;

    _os_log_impl(&dword_1C9A3B000, v16, v17, "activity updated: %@", v18, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84EED0);
    swift_arrayDestroy();
    MEMORY[0x1CAA493AC](v19, -1, -1);
    MEMORY[0x1CAA493AC](v18, -1, -1);
    v8 = v27;
    v7 = v28;
    v9 = v26[0];
  }
  else
  {

    v16 = v15;
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v22 = result;
    v23 = sub_1C9E45DE4();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v7, 1, 1, v23);
    v24 = (_QWORD *)swift_allocObject();
    v24[2] = 0;
    v24[3] = 0;
    v24[4] = v22;
    v24[5] = a1;
    v25 = v15;
    sub_1C9E0B6F4((uint64_t)v7, (uint64_t)&unk_1EF932D40, (uint64_t)v24);
    return swift_release();
  }
  return result;
}

uint64_t sub_1C9E0BB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch();
}

uint64_t sub_1C9E0BB18()
{
  _QWORD *v0;
  void *v1;
  _QWORD *v2;
  void *v3;
  id v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v2 = (_QWORD *)v0[2];
  v1 = (void *)v0[3];
  v3 = (void *)v2[16];
  v2[16] = v1;
  v4 = v1;

  v7 = (uint64_t (*)(void))(**(int **)(*v2 + 352) + *(_QWORD *)(*v2 + 352));
  v5 = (_QWORD *)swift_task_alloc();
  v0[4] = v5;
  *v5 = v0;
  v5[1] = sub_1C9E0BB8C;
  return v7();
}

uint64_t sub_1C9E0BB8C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_1C9E0BBD4(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

uint64_t sub_1C9E0BC28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  id v18;
  _QWORD *v19;
  os_log_type_t v20;
  os_log_t v21;
  uint8_t *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  os_log_t v26;
  _QWORD *v27;
  uint8_t *v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84F090);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1C9E45BF8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v10 = result;
    swift_unknownObjectRetain();
    objc_opt_self();
    v11 = swift_dynamicCastObjCClass();
    if (v11)
    {
      v12 = (void *)v11;
      v13 = sub_1C9DFF740();
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v13, v4);
      swift_unknownObjectRetain();
      v14 = sub_1C9E45BD4();
      v15 = sub_1C9E45E44();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc();
        v27 = (_QWORD *)swift_slowAlloc();
        v28 = v16;
        *(_DWORD *)v16 = 138412290;
        v17 = objc_msgSend(v12, sel_eventBody);
        v18 = v17;
        v26 = v14;
        if (v17)
          v29 = v17;
        else
          v29 = 0;
        sub_1C9E45F1C();
        v19 = v27;
        *v27 = v18;
        swift_unknownObjectRelease();
        v20 = v15;
        v21 = v26;
        v22 = v28;
        _os_log_impl(&dword_1C9A3B000, v26, v20, "Intent: %@", v28, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84EED0);
        swift_arrayDestroy();
        v23 = v19;
        v14 = v21;
        MEMORY[0x1CAA493AC](v23, -1, -1);
        MEMORY[0x1CAA493AC](v22, -1, -1);
      }
      else
      {
        swift_unknownObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v24 = sub_1C9E45DE4();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v3, 1, 1, v24);
      v25 = (_QWORD *)swift_allocObject();
      v25[2] = 0;
      v25[3] = 0;
      v25[4] = v10;
      sub_1C9E0B6F4((uint64_t)v3, (uint64_t)&unk_1EF932D30, (uint64_t)v25);
    }
    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1C9E0BF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  *(_QWORD *)(v4 + 16) = a1;
  v7 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)a4 + 352) + *(_QWORD *)(*(_QWORD *)a4 + 352));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = v4;
  v5[1] = sub_1C9E0BF8C;
  return v7();
}

uint64_t sub_1C9E0BF8C(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_BYTE *)(v4 + 32) = a1 & 1;
  return swift_task_switch();
}

uint64_t sub_1C9E0C00C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1C9E0C054(void **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint8_t *v27;
  _QWORD v29[2];

  v2 = sub_1C9E45BF8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v29 - v9;
  v11 = *a1;
  if (v11)
  {
    v12 = v11;
    v13 = sub_1C9DFF740();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v13, v2);
    v14 = v11;
    v15 = v11;
    v16 = sub_1C9E45BD4();
    v17 = sub_1C9E45E2C();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v29[0] = v2;
      v20 = (_QWORD *)v19;
      *(_DWORD *)v18 = 138412290;
      v21 = v11;
      v22 = _swift_stdlib_bridgeErrorToNSError();
      v29[1] = v22;
      sub_1C9E45F1C();
      *v20 = v22;

      _os_log_impl(&dword_1C9A3B000, v16, v17, "Error sinking activity descriptors: %@", v18, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84EED0);
      swift_arrayDestroy();
      v23 = v20;
      v2 = v29[0];
      MEMORY[0x1CAA493AC](v23, -1, -1);
      MEMORY[0x1CAA493AC](v18, -1, -1);

    }
    else
    {

    }
    v10 = v6;
  }
  else
  {
    v24 = sub_1C9DFF740();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v10, v24, v2);
    v25 = sub_1C9E45BD4();
    v26 = sub_1C9E45E44();
    if (os_log_type_enabled(v25, (os_log_type_t)v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_1C9A3B000, v25, (os_log_type_t)v26, "Finished sinking activity descriptors", v27, 2u);
      MEMORY[0x1CAA493AC](v27, -1, -1);
    }

  }
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v10, v2);
}

uint64_t sub_1C9E0C2F4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84F090);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v8 = result;
    v9 = sub_1C9E45DE4();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v5, 1, 1, v9);
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = 0;
    v10[3] = 0;
    v10[4] = v8;
    v10[5] = v6;
    swift_bridgeObjectRetain();
    sub_1C9E0B6F4((uint64_t)v5, (uint64_t)&unk_1EF932D20, (uint64_t)v10);
    return swift_release();
  }
  return result;
}

uint64_t sub_1C9E0C3F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = sub_1C9DF080C;
  return sub_1C9E0C44C(a5);
}

uint64_t sub_1C9E0C44C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[3] = a1;
  v2[4] = v1;
  v3 = sub_1C9E45BF8();
  v2[5] = v3;
  v2[6] = *(_QWORD *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1C9E0C4AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint8_t *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(void);

  v2 = v0[6];
  v1 = v0[7];
  v3 = v0[5];
  v4 = sub_1C9DFF740();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_bridgeObjectRetain();
  v5 = sub_1C9E45BD4();
  v6 = sub_1C9E45E44();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = v0[3];
    v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v8 = 134217984;
    v0[2] = *(_QWORD *)(v7 + 16);
    sub_1C9E45F1C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9A3B000, v5, v6, "Received %ld activity descriptors", v8, 0xCu);
    MEMORY[0x1CAA493AC](v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  v9 = (_QWORD *)v0[4];
  v10 = v0[3];
  (*(void (**)(_QWORD, _QWORD))(v0[6] + 8))(v0[7], v0[5]);
  v9[20] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = (uint64_t (*)(void))(**(int **)(*v9 + 352) + *(_QWORD *)(*v9 + 352));
  v11 = (_QWORD *)swift_task_alloc();
  v0[8] = v11;
  *v11 = v0;
  v11[1] = sub_1C9E0C628;
  return v13();
}

uint64_t sub_1C9E0C628()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1C9E0C678()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[22] = v0;
  type metadata accessor for MeetingContextDependencies(0);
  v1[23] = swift_task_alloc();
  type metadata accessor for TimeOfDayContextDependencies(0);
  v1[24] = swift_task_alloc();
  v2 = sub_1C9E458A4();
  v1[25] = v2;
  v1[26] = *(_QWORD *)(v2 - 8);
  v1[27] = swift_task_alloc();
  v3 = sub_1C9E45BF8();
  v1[28] = v3;
  v1[29] = *(_QWORD *)(v3 - 8);
  v1[30] = swift_task_alloc();
  v1[31] = swift_task_alloc();
  v4 = sub_1C9E4582C();
  v1[32] = v4;
  v1[33] = *(_QWORD *)(v4 - 8);
  v1[34] = swift_task_alloc();
  v5 = sub_1C9E45844();
  v1[35] = v5;
  v1[36] = *(_QWORD *)(v5 - 8);
  v1[37] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F028);
  v1[38] = swift_task_alloc();
  v1[39] = swift_task_alloc();
  v6 = sub_1C9E457CC();
  v1[40] = v6;
  v1[41] = *(_QWORD *)(v6 - 8);
  v1[42] = swift_task_alloc();
  v1[43] = swift_task_alloc();
  v1[44] = swift_task_alloc();
  v1[45] = swift_task_alloc();
  return swift_task_switch();
}

void sub_1C9E0C824()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t, uint64_t);
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t i;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t);
  unint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(_QWORD, _QWORD);
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  id v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  int64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t KeyPath;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t ObjectType;
  uint64_t v120;
  uint64_t v121;
  os_unfair_lock_t lock;
  os_unfair_lock_t locka;
  os_unfair_lock_s *lockb;
  unsigned int v125;
  void (*v126)(uint64_t, uint64_t, uint64_t);
  void (*v127)(uint64_t);
  void (*v128)(_QWORD, _QWORD);
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t (*v133)(void);
  uint64_t v134;
  _QWORD *v135;
  void *v136;
  void *v137;
  char v138;
  _QWORD *v139;
  uint64_t v140;
  _QWORD *v141;

  v1 = v0 + 176;
  v133 = *(uint64_t (**)(void))(**(_QWORD **)(v0 + 176) + 216);
  v2 = v133();
  v3 = *(_QWORD *)(v2 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v5 = (_QWORD *)(v0 + 56);
    v139 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    sub_1C9DF66B4(0, v3, 0);
    v6 = v2 + 32;
    v7 = v139;
    do
    {
      sub_1C9DE9E88(v6, (uint64_t)v5);
      __swift_project_boxed_opaque_existential_1(v5, *(_QWORD *)(v0 + 80));
      sub_1C9E45FF4();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v5);
      v9 = *(_QWORD *)(v0 + 136);
      v8 = *(_QWORD *)(v0 + 144);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1C9DF66B4(0, v7[2] + 1, 1);
        v7 = v139;
      }
      v11 = v7[2];
      v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_1C9DF66B4(v10 > 1, v11 + 1, 1);
        v7 = v139;
      }
      v7[2] = v11 + 1;
      v12 = &v7[2 * v11];
      v12[4] = v9;
      v12[5] = v8;
      v6 += 40;
      --v3;
    }
    while (v3);
    v135 = v7;
    swift_bridgeObjectRelease();
    v1 = v0 + 176;
    v4 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    swift_bridgeObjectRelease();
    v135 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  sub_1C9E457C0();
  *(_QWORD *)(v0 + 152) = v4;
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CAA078]), sel_initWithEKOptions_, 128);
  if (!v13)
    goto LABEL_31;
  v136 = v13;
  v14 = *(_QWORD *)(v0 + 328);
  v129 = *(_QWORD *)(v0 + 320);
  v15 = *(_QWORD *)(v0 + 312);
  v16 = *(_QWORD *)(v0 + 288);
  v17 = *(_QWORD *)(v0 + 296);
  v18 = *(_QWORD *)(v0 + 272);
  v19 = *(_QWORD *)(v0 + 280);
  v20 = *(_QWORD *)(v0 + 256);
  v21 = *(_QWORD *)(v0 + 264);
  sub_1C9E45820();
  v125 = *MEMORY[0x1E0CB1130];
  v127 = *(void (**)(uint64_t))(v21 + 104);
  v127(v18);
  sub_1C9E45814();
  v22 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  v22(v18, v20);
  v23 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v23(v17, v19);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (v24(v15, 1, v129) != 1)
  {
    v27 = *(_QWORD *)(v0 + 320);
    v28 = *(_QWORD *)(v0 + 304);
    v29 = *(_QWORD *)(v0 + 296);
    v30 = *(_QWORD *)(v0 + 272);
    v130 = *(_QWORD *)(v0 + 280);
    v31 = *(_QWORD *)(v0 + 256);
    lock = *(os_unfair_lock_t *)(*(_QWORD *)(v0 + 328) + 32);
    ((void (*)(_QWORD, _QWORD, uint64_t))lock)(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 312), v27);
    sub_1C9E45820();
    ((void (*)(uint64_t, _QWORD, uint64_t))v127)(v30, v125, v31);
    sub_1C9E45814();
    v22(v30, v31);
    v23(v29, v130);
    if (v24(v28, 1, v27) == 1)
    {
      v32 = *(_QWORD *)(v0 + 304);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 320));

      v26 = v32;
      goto LABEL_15;
    }
    ((void (*)(_QWORD, _QWORD, _QWORD))lock)(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 320));
    v33 = (void *)sub_1C9E45784();
    v34 = (void *)sub_1C9E45784();
    v35 = objc_msgSend(v136, sel_predicateForEventsWithStartDate_endDate_calendars_, v33, v34, 0);

    v131 = v35;
    v36 = objc_msgSend(v136, sel_eventsMatchingPredicate_, v35);
    sub_1C9DE8EB0(0, &qword_1EF9329E0);
    v37 = sub_1C9E45D84();

    v140 = MEMORY[0x1E0DEE9D8];
    v1 = v0 + 176;
    if (v37 >> 62)
    {
      swift_bridgeObjectRetain();
      v38 = sub_1C9E460A8();
      swift_bridgeObjectRelease();
      if (v38)
        goto LABEL_18;
    }
    else
    {
      v38 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v38)
      {
LABEL_18:
        if (v38 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v38; ++i)
        {
          if ((v37 & 0xC000000000000001) != 0)
            v40 = (id)MEMORY[0x1CAA47960](i, v37);
          else
            v40 = *(id *)(v37 + 8 * i + 32);
          v41 = v40;
          if ((objc_msgSend(v40, sel_isAllDay) & 1) != 0)
          {

          }
          else
          {
            sub_1C9E46030();
            sub_1C9E46054();
            sub_1C9E46060();
            sub_1C9E4603C();
          }
        }
        swift_bridgeObjectRelease();
        v42 = v140;
        v1 = v0 + 176;
        goto LABEL_30;
      }
    }
    swift_bridgeObjectRelease();
    v42 = MEMORY[0x1E0DEE9D8];
LABEL_30:
    v44 = *(_QWORD *)(v0 + 344);
    v43 = *(_QWORD *)(v0 + 352);
    v45 = *(_QWORD *)(v0 + 320);
    v46 = *(_QWORD *)(v0 + 328);

    v47 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
    v47(v44, v45);
    v47(v43, v45);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 152) = v42;
    goto LABEL_31;
  }
  v25 = *(_QWORD *)(v0 + 312);

  v26 = v25;
LABEL_15:
  sub_1C9DF090C(v26, &qword_1ED84F028);
  v1 = v0 + 176;
LABEL_31:
  v48 = *(_QWORD *)(v0 + 248);
  v49 = *(_QWORD *)(v0 + 232);
  v50 = sub_1C9DFF740();
  v51 = *(void (**)(uint64_t))(v49 + 16);
  v132 = v50;
  v51(v48);
  v52 = *(_QWORD *)(v0 + 152);
  swift_bridgeObjectRetain_n();
  v53 = sub_1C9E45BD4();
  v54 = sub_1C9E45E44();
  if (os_log_type_enabled(v53, v54))
  {
    v55 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v55 = 134217984;
    if (v52 >> 62)
    {
      swift_bridgeObjectRetain();
      v56 = sub_1C9E460A8();
      swift_bridgeObjectRelease();
    }
    else
    {
      v56 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 - 8) = v56;
    sub_1C9E45F1C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9A3B000, v53, v54, "event count: %ld", v55, 0xCu);
    MEMORY[0x1CAA493AC](v55, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v57 = *(_QWORD *)(v0 + 176);
  v58 = *(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 232) + 8);
  v58(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 224));
  v59 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  objc_msgSend(v59, sel_updateCurrentLocationOfInterestIfTimeElapsed);
  if (!*(_QWORD *)(v57 + 160))
  {
    sub_1C9E4588C();
    sub_1C9E45880();
    sub_1C9E45898();
    v120 = sub_1C9E45868();
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 208) + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 200));
    swift_release();
    *(_QWORD *)(v57 + 160) = v120;
    swift_bridgeObjectRelease();
  }
  v126 = (void (*)(uint64_t, uint64_t, uint64_t))v51;
  v128 = v58;
  v60 = *(_QWORD *)(v0 + 360);
  v61 = *(_QWORD *)(v0 + 328);
  v62 = *(_QWORD *)(v0 + 336);
  v137 = v59;
  locka = (os_unfair_lock_t)v57;
  v63 = *(_QWORD *)(v0 + 320);
  v65 = *(_QWORD *)(v0 + 184);
  v64 = *(_QWORD *)(v0 + 192);
  v121 = *(_QWORD *)(v0 + 176);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9329B0);
  v66 = swift_allocObject();
  *(_OWORD *)(v66 + 16) = xmmword_1C9E81480;
  v67 = type metadata accessor for TimeOfDayContextStore();
  v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16);
  v68(v62, v60, v63);
  sub_1C9E0F41C(v62, v64);
  v69 = sub_1C9E0FAF8(v64);
  *(_QWORD *)(v66 + 56) = v67;
  *(_QWORD *)(v66 + 64) = sub_1C9DF09DC(&qword_1EF9329B8, (uint64_t (*)(uint64_t))type metadata accessor for TimeOfDayContextStore, (uint64_t)&unk_1C9E826E4);
  *(_QWORD *)(v66 + 32) = v69;
  v70 = type metadata accessor for MeetingContextStore(0);
  v71 = v63;
  v72 = v137;
  v68(v62, v60, v71);
  swift_beginAccess();
  v73 = *(_QWORD *)(v0 + 152);
  swift_bridgeObjectRetain();
  sub_1C9E052A0(v62, v73, v65);
  v74 = sub_1C9E057D4(v65);
  *(_QWORD *)(v66 + 96) = v70;
  *(_QWORD *)(v66 + 104) = sub_1C9DF09DC(&qword_1EF9329C0, type metadata accessor for MeetingContextStore, (uint64_t)&unk_1C9E82104);
  *(_QWORD *)(v66 + 72) = v74;
  v75 = type metadata accessor for LocationOfInterestContextStore();
  v76 = (void *)nullsub_1(objc_msgSend(v137, sel_cachedLocationOfInterestAtCurrentLocation));
  v77 = sub_1C9DEA9E4(v76);
  *(_QWORD *)(v66 + 136) = v75;
  *(_QWORD *)(v66 + 144) = sub_1C9DF09DC(&qword_1EF9329C8, (uint64_t (*)(uint64_t))type metadata accessor for LocationOfInterestContextStore, (uint64_t)&unk_1C9E814E4);
  *(_QWORD *)(v66 + 112) = v77;
  v78 = type metadata accessor for MotionContextStore();
  v79 = *(void **)(v121 + 128);
  v80 = v79;
  v81 = (void *)nullsub_1(v79);
  v82 = sub_1C9DE7F74(v81);
  *(_QWORD *)(v66 + 176) = v78;
  *(_QWORD *)(v66 + 184) = sub_1C9DF09DC(&qword_1EF9329D0, (uint64_t (*)(uint64_t))type metadata accessor for MotionContextStore, (uint64_t)&unk_1C9E810E4);
  *(_QWORD *)(v66 + 152) = v82;
  if (*(_QWORD *)&locka[40]._os_unfair_lock_opaque)
    v83 = *(_QWORD *)&locka[40]._os_unfair_lock_opaque;
  else
    v83 = MEMORY[0x1E0DEE9D8];
  v84 = type metadata accessor for LiveActivityContextStore();
  swift_bridgeObjectRetain();
  v85 = nullsub_1(v83);
  v86 = sub_1C9E09648(v85);
  *(_QWORD *)(v66 + 216) = v84;
  *(_QWORD *)(v66 + 224) = sub_1C9DF09DC(&qword_1EF9329D8, (uint64_t (*)(uint64_t))type metadata accessor for LiveActivityContextStore, (uint64_t)&unk_1C9E82434);
  *(_QWORD *)(v66 + 192) = v86;
  v87 = *(_QWORD *)(v121 + 136);
  v88 = swift_task_alloc();
  *(_QWORD *)(v88 + 16) = v66;
  os_unfair_lock_lock((os_unfair_lock_t)(v87 + 24));
  *(_QWORD *)(*(_QWORD *)(v87 + 16) + 16) = *(_QWORD *)(v88 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  lockb = (os_unfair_lock_s *)(v87 + 24);
  os_unfair_lock_unlock((os_unfair_lock_t)(v87 + 24));
  v89 = *(_QWORD *)(v0 + 240);
  v90 = *(_QWORD *)(v0 + 224);
  swift_bridgeObjectRelease();
  v91 = swift_task_dealloc();
  v92 = ((uint64_t (*)(uint64_t))v133)(v91);
  v126(v89, v132, v90);
  swift_bridgeObjectRetain();
  v93 = sub_1C9E45BD4();
  v94 = sub_1C9E45E44();
  if (os_log_type_enabled(v93, v94))
  {
    v95 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v95 = 134217984;
    *(_QWORD *)(v0 + 160) = *(_QWORD *)(v92 + 16);
    sub_1C9E45F1C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9A3B000, v93, v94, "new active contexts: %ld", v95, 0xCu);
    MEMORY[0x1CAA493AC](v95, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  v128(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 224));
  v96 = *(_QWORD *)(v92 + 16);
  v97 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v96)
  {
    v98 = (_QWORD *)(v0 + 16);
    v141 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    sub_1C9DF66B4(0, v96, 0);
    v134 = v92;
    v99 = v92 + 32;
    v97 = v141;
    do
    {
      sub_1C9DE9E88(v99, (uint64_t)v98);
      __swift_project_boxed_opaque_existential_1(v98, *(_QWORD *)(v0 + 40));
      sub_1C9E45FF4();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v98);
      v101 = *(_QWORD *)(v0 + 120);
      v100 = *(_QWORD *)(v0 + 128);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1C9DF66B4(0, v97[2] + 1, 1);
        v97 = v141;
      }
      v103 = v97[2];
      v102 = v97[3];
      if (v103 >= v102 >> 1)
      {
        sub_1C9DF66B4(v102 > 1, v103 + 1, 1);
        v97 = v141;
      }
      v97[2] = v103 + 1;
      v104 = &v97[2 * v103];
      v104[4] = v101;
      v104[5] = v100;
      v99 += 40;
      --v96;
    }
    while (v96);
    v105 = v135;
    v72 = v137;
    v92 = v134;
  }
  else
  {
    v105 = v135;
  }
  v106 = sub_1C9E0D740(v105, v97);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v138 = v106;
  if ((v106 & 1) != 0)
  {
    v107 = *(_QWORD *)(v0 + 360);
    v108 = *(_QWORD *)(v0 + 320);
    v109 = *(_QWORD *)(v0 + 328);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v107, v108);
  }
  else
  {
    KeyPath = swift_getKeyPath();
    v111 = swift_task_alloc();
    *(_QWORD *)(v111 + 16) = sub_1C9E0DD50;
    *(_QWORD *)(v111 + 24) = KeyPath;
    swift_retain();
    os_unfair_lock_lock(lockb);
    v112 = (*(uint64_t (**)(_QWORD))(v111 + 16))(*(_QWORD *)(v87 + 16));
    v114 = v113;
    os_unfair_lock_unlock(lockb);
    swift_release();
    swift_task_dealloc();
    swift_release();
    swift_bridgeObjectRelease();
    if (v112)
    {
      v115 = *(_QWORD *)(v0 + 360);
      v117 = *(_QWORD *)(v0 + 320);
      v116 = *(_QWORD *)(v0 + 328);
      v118 = *(_QWORD *)(v0 + 176);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v114 + 8))(v118, v92, ObjectType, v114);
      swift_bridgeObjectRelease();

      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v115, v117);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 320));
      swift_bridgeObjectRelease();

    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  (*(void (**)(BOOL))(v0 + 8))((v138 & 1) == 0);
}

id *sub_1C9E0D6C0()
{
  id *v0;

  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1C9E0D71C()
{
  sub_1C9E0D6C0();
  return swift_defaultActor_deallocate();
}

uint64_t sub_1C9E0D734()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1C9E0D740(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_1C9E46144(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (sub_1C9E46144() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

_QWORD *sub_1C9E0D804(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF932D78);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C9E0E348(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1C9E0D910(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF932D68);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1C9E0E430(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C9E0DA30(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_1C9E460A8();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1C9E460A8();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x1CAA4796C](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_1C9E0E13C(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = sub_1C9E460A8();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_1C9E45D90();
  }
  __break(1u);
  return result;
}

uint64_t sub_1C9E0DBE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1C9E0D910(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2)
    goto LABEL_24;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF931BB0);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1C9E460D8();
  __break(1u);
  return result;
}

uint64_t sub_1C9E0DD50()
{
  uint64_t v1;

  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  return v1;
}

uint64_t sub_1C9E0DD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t type metadata accessor for ContextualEngineContextStore()
{
  return objc_opt_self();
}

uint64_t sub_1C9E0DDC0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C9E0DDE4()
{
  return sub_1C9E0B518();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t sub_1C9E0DE04(void *a1)
{
  uint64_t v1;

  return sub_1C9E0B824(a1, v1);
}

uint64_t sub_1C9E0DE0C()
{
  return sub_1C9E0BC28();
}

uint64_t sub_1C9E0DE14(uint64_t *a1)
{
  return sub_1C9E0C2F4(a1);
}

uint64_t sub_1C9E0DE1C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1C9E0DE50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1C9DF0A2C;
  v4 = (_QWORD *)swift_task_alloc();
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_1C9DF080C;
  return sub_1C9E0C44C(v2);
}

uint64_t sub_1C9E0DECC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(void);

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1C9DF0A2C;
  v5[2] = a1;
  v8 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v4 + 352) + *(_QWORD *)(*(_QWORD *)v4 + 352));
  v6 = (_QWORD *)swift_task_alloc();
  v5[3] = v6;
  *v6 = v5;
  v6[1] = sub_1C9E0BF8C;
  return v8();
}

uint64_t sub_1C9E0DF58()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1C9E0DF8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1C9DF0A2C;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch();
}

uint64_t objectdestroyTm_1()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C9E0E01C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(void);

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1C9DF080C;
  v5[2] = a1;
  v8 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v4 + 352) + *(_QWORD *)(*(_QWORD *)v4 + 352));
  v6 = (_QWORD *)swift_task_alloc();
  v5[3] = v6;
  *v6 = v5;
  v6[1] = sub_1C9E0B65C;
  return v8();
}

uint64_t sub_1C9E0E0A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C9E0E0CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1C9DF0A2C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EF931F20 + dword_1EF931F20))(a1, v4);
}

uint64_t sub_1C9E0E13C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  void (*v12)(_QWORD *);
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1C9E460A8();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1C9E460A8();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1C9DFD7E0((unint64_t *)&unk_1EF932D88, &qword_1EF932D80, MEMORY[0x1E0DEAF50]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EF932D80);
          v12 = sub_1C9DFD670(v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1C9E45B14();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_1C9E460D8();
  __break(1u);
  return result;
}

char *sub_1C9E0E348(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1C9E460D8();
  __break(1u);
  return result;
}

uint64_t sub_1C9E0E430(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF931BB0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1C9E460D8();
  __break(1u);
  return result;
}

void sub_1C9E0E558()
{
  qword_1EF935138 = 0x7374726F7053;
  qword_1EF935140 = 0xE600000000000000;
}

uint64_t *sub_1C9E0E578()
{
  if (qword_1EF934EE0 != -1)
    swift_once();
  return &qword_1EF935138;
}

uint64_t sub_1C9E0E5B8()
{
  uint64_t v0;

  if (qword_1EF934EE0 != -1)
    swift_once();
  swift_beginAccess();
  v0 = qword_1EF935138;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1C9E0E630(uint64_t a1, uint64_t a2)
{
  if (qword_1EF934EE0 != -1)
    swift_once();
  swift_beginAccess();
  qword_1EF935138 = a1;
  qword_1EF935140 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C9E0E6B0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *v2;
  v3[4] = a2;
  v3[5] = v4;
  v3[3] = a1;
  v5 = sub_1C9E45BF8();
  v3[6] = v5;
  v3[7] = *(_QWORD *)(v5 - 8);
  v3[8] = swift_task_alloc();
  v6 = sub_1C9E4582C();
  v3[9] = v6;
  v3[10] = *(_QWORD *)(v6 - 8);
  v3[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F028);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  v7 = sub_1C9E457CC();
  v3[14] = v7;
  v3[15] = *(_QWORD *)(v7 - 8);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v8 = sub_1C9E45844();
  v3[18] = v8;
  v3[19] = *(_QWORD *)(v8 - 8);
  v3[20] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1C9E0E7D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD, _QWORD, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v29;
  _QWORD *v30;
  int *v31;
  _QWORD *v32;
  unsigned int v33;
  void (*v34)(uint64_t);
  int *v35;

  v2 = (uint64_t *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 72);
  sub_1C9E45820();
  v33 = *MEMORY[0x1E0CB1140];
  v34 = *(void (**)(uint64_t))(v5 + 104);
  v34(v6);
  sub_1C9E45814();
  v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(v6, v7);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v9(v1, 1, v3) != 1)
  {
    v2 = (uint64_t *)(v0 + 96);
    v10 = *(_QWORD *)(v0 + 96);
    v11 = *(_QWORD *)(v0 + 112);
    v12 = *(_QWORD *)(v0 + 88);
    v13 = *(_QWORD *)(v0 + 72);
    v14 = *(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 120) + 32);
    v14(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 104), v11);
    ((void (*)(uint64_t, _QWORD, uint64_t))v34)(v12, v33, v13);
    sub_1C9E45814();
    v8(v12, v13);
    if (v9(v10, 1, v11) != 1)
    {
      v14(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 112));
      v29 = sub_1C9E130A4();
      v30 = (_QWORD *)*v29;
      *(_QWORD *)(v0 + 168) = *v29;
      v31 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v30) + 0x78);
      v35 = (int *)((char *)v31 + *v31);
      v30;
      v32 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 176) = v32;
      *v32 = v0;
      v32[1] = sub_1C9E0EAF4;
      return ((uint64_t (*)(_QWORD, _QWORD))v35)(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 128));
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 112));
  }
  v16 = *(_QWORD *)(v0 + 56);
  v15 = *(_QWORD *)(v0 + 64);
  v17 = *(_QWORD *)(v0 + 48);
  sub_1C9DFD8C8(*v2);
  v18 = sub_1C9E1A8FC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v18, v17);
  v19 = sub_1C9E45BD4();
  v20 = sub_1C9E45E2C();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_1C9A3B000, v19, v20, "Unable to subtract 5 hours from date", v21, 2u);
    MEMORY[0x1CAA493AC](v21, -1, -1);
  }
  v23 = *(_QWORD *)(v0 + 152);
  v22 = *(_QWORD *)(v0 + 160);
  v24 = *(_QWORD *)(v0 + 144);
  v26 = *(_QWORD *)(v0 + 56);
  v25 = *(_QWORD *)(v0 + 64);
  v27 = *(_QWORD *)(v0 + 48);

  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x1E0DEE9D8]);
}

uint64_t sub_1C9E0EAF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;

  v4 = *v2;
  v5 = *(void **)(*v2 + 168);
  *(_QWORD *)(*v2 + 184) = v1;
  swift_task_dealloc();

  if (!v1)
    *(_QWORD *)(v4 + 192) = a1;
  return swift_task_switch();
}

uint64_t sub_1C9E0EB6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 160);
  v12 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  v11 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v2;
  *(_QWORD *)(v7 + 24) = v6;
  v8 = sub_1C9E0F2E8(v1, sub_1C9E0F13C);
  v9 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v9(v3, v5);
  v9(v11, v5);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v2, v13);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
}

uint64_t sub_1C9E0EC90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v2 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 120) + 8);
  v6(*(_QWORD *)(v0 + 128), v5);
  v6(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1C9E0ED5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;

  v58 = a4;
  v54 = a2;
  v55 = a3;
  v5 = type metadata accessor for SportsDependencies(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v57 = (uint64_t)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v56 = (uint64_t *)((char *)&v51 - v10);
  v11 = sub_1C9E45BF8();
  v51 = *(_QWORD *)(v11 - 8);
  v52 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1C9E4582C();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F028);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1C9E457CC();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v26);
  v28 = (char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29, v30);
  v53 = (char *)&v51 - v32;
  (*(void (**)(char *, _QWORD, uint64_t, double))(v16 + 104))(v19, *MEMORY[0x1E0CB1140], v15, v31);
  v33 = a1;
  sub_1C9E45814();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
  {
    sub_1C9DFD8C8((uint64_t)v23);
    v34 = sub_1C9E1A8FC();
    v36 = v51;
    v35 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v14, v34, v52);
    v37 = sub_1C9E45BD4();
    v38 = sub_1C9E45E2C();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v39 = 0;
      _os_log_impl(&dword_1C9A3B000, v37, v38, "Unable to add 5 hours to game start date", v39, 2u);
      MEMORY[0x1CAA493AC](v39, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v35);
    return MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v41 = v53;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v53, v23, v24);
    v42 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
    v42(v28, a1, v24);
    v43 = v55;
    swift_bridgeObjectRetain();
    v44 = v56;
    sub_1C9E00748(v54, v43, (uint64_t)v28, v56);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF932DB0);
    v45 = *(_QWORD *)(type metadata accessor for SportsContextEntry(0) - 8);
    v46 = *(_QWORD *)(v45 + 72);
    v47 = (*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
    v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_1C9E818B0;
    v48 = v40 + v47;
    v42(v28, v33, v24);
    v49 = v57;
    sub_1C9E00B64((uint64_t)v44, v57);
    sub_1C9E00C44((uint64_t)v28, 1, v49, v48);
    v42(v28, (uint64_t)v41, v24);
    sub_1C9E00B64((uint64_t)v44, v49);
    sub_1C9E00C44((uint64_t)v28, 0, v49, v48 + v46);
    sub_1C9E08798((uint64_t)v44);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v41, v24);
  }
  return v40;
}

uint64_t sub_1C9E0F13C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1C9E0ED5C(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_1C9E0F144(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1C9E0F160(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1C9E0F160(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF932DA0);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8)
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF932DA8);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1C9E460D8();
  __break(1u);
  return result;
}

uint64_t sub_1C9E0F2E8(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD))
{
  int64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v14 = MEMORY[0x1E0DEE9D8];
    sub_1C9E0F144(0, v2, 0);
    v3 = v14;
    v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F018);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v8 = *(_QWORD *)(v6 + 72);
    do
    {
      v9 = a2(v7, *(_QWORD *)(v7 + *(int *)(v5 + 48)), *(_QWORD *)(v7 + *(int *)(v5 + 48) + 8));
      v11 = *(_QWORD *)(v14 + 16);
      v10 = *(_QWORD *)(v14 + 24);
      if (v11 >= v10 >> 1)
        sub_1C9E0F144(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v14 + 16) = v11 + 1;
      *(_QWORD *)(v14 + 8 * v11 + 32) = v9;
      v7 += v8;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t type metadata accessor for SportsContextProducer()
{
  return objc_opt_self();
}

uint64_t sub_1C9E0F41C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_1C9E457CC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t sub_1C9E0F458()
{
  type metadata accessor for TimeOfDayContext(0);
  sub_1C9E0FEF0(qword_1EF932DB8, (uint64_t)&unk_1C9E82690);
  return sub_1C9DEB01C();
}

uint64_t type metadata accessor for TimeOfDayContext(uint64_t a1)
{
  return sub_1C9E00AAC(a1, (uint64_t *)&unk_1EF935090);
}

uint64_t sub_1C9E0F4AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC21AppPredictionInternal16TimeOfDayContext_dependencies;
  swift_beginAccess();
  return sub_1C9E0F4FC(v3, a1);
}

uint64_t sub_1C9E0F4FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimeOfDayContextDependencies(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for TimeOfDayContextDependencies(uint64_t a1)
{
  return sub_1C9E00AAC(a1, (uint64_t *)&unk_1EF935080);
}

uint64_t sub_1C9E0F554(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC21AppPredictionInternal16TimeOfDayContext_dependencies;
  swift_beginAccess();
  sub_1C9E0F5AC(a1, v3);
  return swift_endAccess();
}

uint64_t sub_1C9E0F5AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimeOfDayContextDependencies(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_1C9E0F5F0())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1C9E0F634(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_1C9E0F6A0(a1, v2 + OBJC_IVAR____TtC21AppPredictionInternal16TimeOfDayContext_dependencies);
  return v2;
}

uint64_t sub_1C9E0F67C(uint64_t a1)
{
  uint64_t v1;

  sub_1C9E0F6A0(a1, v1 + OBJC_IVAR____TtC21AppPredictionInternal16TimeOfDayContext_dependencies);
  return v1;
}

uint64_t sub_1C9E0F6A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimeOfDayContextDependencies(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C9E0F6E4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v23;

  v1 = *v0;
  v2 = type metadata accessor for TimeOfDayContextDependencies(0);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1C9E4582C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1C9E45844();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C9E45820();
  v16 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, *MEMORY[0x1E0CB1140], v6);
  (*(void (**)(uint64_t))(*v0 + 112))(v16);
  v17 = sub_1C9E45838();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v18 = sub_1C9E457CC();
  v19 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v5, v18);
  v20 = (*(uint64_t (**)(uint64_t))(v1 + 96))(v19);
  result = (*(uint64_t (**)(void))(v1 + 104))();
  if (result >= v20)
    return v17 >= v20 && v17 < result;
  __break(1u);
  return result;
}

uint64_t sub_1C9E0F87C()
{
  uint64_t v0;

  sub_1C9E0F8A0(v0 + OBJC_IVAR____TtC21AppPredictionInternal16TimeOfDayContext_dependencies);
  return v0;
}

uint64_t sub_1C9E0F8A0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TimeOfDayContextDependencies(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C9E0F8DC()
{
  uint64_t v0;

  sub_1C9E0F8A0(v0 + OBJC_IVAR____TtC21AppPredictionInternal16TimeOfDayContext_dependencies);
  return swift_deallocClassInstance();
}

uint64_t sub_1C9E0F90C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))();
}

uint64_t sub_1C9E0F934()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))() & 1;
}

uint64_t sub_1C9E0F960()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

uint64_t sub_1C9E0F988@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 136))();
  *a1 = result;
  return result;
}

uint64_t sub_1C9E0F9B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for TimeOfDayContext(0);
  sub_1C9E0FEF0(qword_1EF932DB8, (uint64_t)&unk_1C9E82690);
  result = sub_1C9DEB048();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1C9E0FA04()
{
  uint64_t v0;
  uint64_t result;

  sub_1C9E102F0();
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C9E82680;
  *(_QWORD *)(v0 + 32) = type metadata accessor for TimeOfDayContextStore.MorningContext(0);
  *(_QWORD *)(v0 + 40) = type metadata accessor for TimeOfDayContextStore.AfternoonContext(0);
  result = type metadata accessor for TimeOfDayContextStore.EveningContext(0);
  *(_QWORD *)(v0 + 48) = result;
  qword_1EF935148 = v0;
  return result;
}

uint64_t *sub_1C9E0FA78()
{
  if (qword_1EF934EF0 != -1)
    swift_once();
  return &qword_1EF935148;
}

uint64_t sub_1C9E0FAB8()
{
  if (qword_1EF934EF0 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C9E0FAF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  v2 = swift_allocObject();
  v4 = v2;
  if (qword_1EF934EF0 != -1)
    v2 = swift_once();
  v5 = qword_1EF935148;
  MEMORY[0x1E0C80A78](v2, v3);
  v8[2] = a1;
  swift_bridgeObjectRetain();
  v6 = sub_1C9E0FD1C((void (*)(uint64_t *__return_ptr, uint64_t *))sub_1C9E0FCF4, (uint64_t)v8, v5);
  swift_bridgeObjectRelease();
  sub_1C9E0F8A0(a1);
  *(_QWORD *)(v4 + 16) = v6;
  return v4;
}

uint64_t sub_1C9E0FBC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  v3 = a1;
  if (qword_1EF934EF0 != -1)
    a1 = swift_once();
  v4 = qword_1EF935148;
  MEMORY[0x1E0C80A78](a1, a2);
  v7[2] = v3;
  swift_bridgeObjectRetain();
  v5 = sub_1C9E0FD1C((void (*)(uint64_t *__return_ptr, uint64_t *))sub_1C9E10340, (uint64_t)v7, v4);
  swift_bridgeObjectRelease();
  sub_1C9E0F8A0(v3);
  *(_QWORD *)(v2 + 16) = v5;
  return v2;
}

uint64_t sub_1C9E0FC84(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = type metadata accessor for TimeOfDayContext(0);
  v5 = sub_1C9E0FEF0(qword_1EF932DB8, (uint64_t)&unk_1C9E82690);
  return sub_1C9DEB11C(v3, a2, v4, v4, v5, v5);
}

uint64_t sub_1C9E0FCF4(uint64_t *a1)
{
  uint64_t v1;

  return sub_1C9E0FC84(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1C9E0FD1C(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t result;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = v3;
  v6 = *(_QWORD *)(a3 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v12 = MEMORY[0x1E0DEE9D8];
    sub_1C9E46048();
    for (i = (uint64_t *)(a3 + 32); ; ++i)
    {
      v10 = *i;
      a1(&v11, &v10);
      if (v4)
        break;
      v4 = 0;
      sub_1C9E46030();
      sub_1C9E46054();
      sub_1C9E46060();
      sub_1C9E4603C();
      if (!--v6)
        return v12;
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1C9E0FE08()
{
  return 6;
}

uint64_t sub_1C9E0FE10()
{
  return 12;
}

uint64_t sub_1C9E0FE18()
{
  return 0x676E696E726F4DLL;
}

uint64_t sub_1C9E0FE38()
{
  return 17;
}

uint64_t sub_1C9E0FE40()
{
  return 0x6F6F6E7265746641;
}

uint64_t sub_1C9E0FE5C()
{
  return 24;
}

uint64_t sub_1C9E0FE64()
{
  return 0x676E696E657645;
}

uint64_t sub_1C9E0FE7C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1C9E0FE98()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1C9E0FEBC(uint64_t a1)
{
  uint64_t result;

  result = sub_1C9E0FEF0(qword_1EF932E08, (uint64_t)&unk_1C9E826AC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C9E0FEF0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for TimeOfDayContext(255);
    result = MEMORY[0x1CAA492F8](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C9E0FF30()
{
  return sub_1C9E0FEF0(qword_1EF932DB8, (uint64_t)&unk_1C9E82690);
}

uint64_t sub_1C9E0FF54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1C9E457CC();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1C9E0FF90(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1C9E457CC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1C9E0FFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1C9E457CC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1C9E10008(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1C9E457CC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1C9E1004C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1C9E457CC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1C9E10090(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1C9E457CC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1C9E100D4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C9E100E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1C9E457CC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1C9E1011C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C9E10128(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1C9E457CC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1C9E10168()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C9E457CC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C9E101D0()
{
  return type metadata accessor for TimeOfDayContext(0);
}

uint64_t sub_1C9E101D8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1C9E457CC();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for TimeOfDayContextStore()
{
  return objc_opt_self();
}

uint64_t sub_1C9E10264()
{
  return type metadata accessor for TimeOfDayContextStore.MorningContext(0);
}

uint64_t type metadata accessor for TimeOfDayContextStore.MorningContext(uint64_t a1)
{
  return sub_1C9E00AAC(a1, (uint64_t *)&unk_1EF9350A0);
}

uint64_t sub_1C9E10284()
{
  return type metadata accessor for TimeOfDayContextStore.AfternoonContext(0);
}

uint64_t type metadata accessor for TimeOfDayContextStore.AfternoonContext(uint64_t a1)
{
  return sub_1C9E00AAC(a1, (uint64_t *)&unk_1EF9350B0);
}

uint64_t sub_1C9E102A0()
{
  return type metadata accessor for TimeOfDayContextStore.EveningContext(0);
}

uint64_t type metadata accessor for TimeOfDayContextStore.EveningContext(uint64_t a1)
{
  return sub_1C9E00AAC(a1, (uint64_t *)&unk_1EF9350C0);
}

uint64_t sub_1C9E102BC()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1C9E102F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF9332F0);
  if (swift_isClassType())
    v1 = v0;
  else
    v1 = 0;
  if (v1)
    v2 = (uint64_t *)&unk_1EF931200;
  else
    v2 = (uint64_t *)&unk_1EF9332F8;
  return __swift_instantiateConcreteTypeFromMangledName(v2);
}

uint64_t sub_1C9E10340(uint64_t *a1)
{
  return sub_1C9E0FCF4(a1);
}

void *static RelevantContextConverter.context(from:)(void *a1)
{
  return sub_1C9E10968(a1);
}

{
  return sub_1C9E10968(a1);
}

id DateRelevantContext.__allocating_init(startDate:endDate:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  objc_super v11;

  v5 = (char *)objc_allocWithZone(v2);
  v6 = &v5[OBJC_IVAR___ATXDateRelevantContext_startDate];
  v7 = sub_1C9E457CC();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  sub_1C9DEA354(a2, (uint64_t)&v5[OBJC_IVAR___ATXDateRelevantContext_endDate]);
  v11.receiver = v5;
  v11.super_class = v2;
  v9 = objc_msgSendSuper2(&v11, sel_init);
  sub_1C9DFD8C8(a2);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v9;
}

id RelevantContextConverter.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RelevantContextConverter();
  return objc_msgSendSuper2(&v2, sel_init);
}

id RelevantContextConverter.__deallocating_deinit(uint64_t a1)
{
  return sub_1C9DFBBB0(a1, type metadata accessor for RelevantContextConverter);
}

uint64_t DateRelevantContext.startDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR___ATXDateRelevantContext_startDate;
  v4 = sub_1C9E457CC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DateRelevantContext.endDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1C9DEA354(v1 + OBJC_IVAR___ATXDateRelevantContext_endDate, a1);
}

id DateRelevantContext.init(startDate:endDate:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  objc_super v10;

  v5 = &v2[OBJC_IVAR___ATXDateRelevantContext_startDate];
  v6 = sub_1C9E457CC();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v5, a1, v6);
  sub_1C9DEA354(a2, (uint64_t)&v2[OBJC_IVAR___ATXDateRelevantContext_endDate]);
  v10.receiver = v2;
  v10.super_class = (Class)type metadata accessor for DateRelevantContext();
  v8 = objc_msgSendSuper2(&v10, sel_init);
  sub_1C9DFD8C8(a2);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  return v8;
}

id DateRelevantContext.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void DateRelevantContext.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id DateRelevantContext.__deallocating_deinit()
{
  return sub_1C9DFBBB0(0, type metadata accessor for DateRelevantContext);
}

void *sub_1C9E10968(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  objc_class *v17;
  id v18;
  objc_super v20;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F028);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1C9E457CC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_opt_self();
  v11 = (void *)swift_dynamicCastObjCClass();
  if (v11)
  {
    v12 = a1;
    v13 = objc_msgSend(v11, sel_startDate);
    sub_1C9E457A8();

    v14 = objc_msgSend(v11, sel_endDate);
    if (v14)
    {
      v15 = v14;
      sub_1C9E457A8();

      v16 = 0;
    }
    else
    {
      v16 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, v16, 1, v6);
    v17 = (objc_class *)type metadata accessor for DateRelevantContext();
    v18 = objc_allocWithZone(v17);
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))((uint64_t)v18 + OBJC_IVAR___ATXDateRelevantContext_startDate, v10, v6);
    sub_1C9DEA354((uint64_t)v5, (uint64_t)v18 + OBJC_IVAR___ATXDateRelevantContext_endDate);
    v20.receiver = v18;
    v20.super_class = v17;
    v11 = objc_msgSendSuper2(&v20, sel_init);
    sub_1C9DFD8C8((uint64_t)v5);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);

  }
  return v11;
}

uint64_t type metadata accessor for RelevantContextConverter()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for DateRelevantContext()
{
  uint64_t result;

  result = qword_1ED84F6F0;
  if (!qword_1ED84F6F0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1C9E10B88()
{
  return type metadata accessor for DateRelevantContext();
}

void sub_1C9E10B90()
{
  unint64_t v0;
  unint64_t v1;

  sub_1C9E457CC();
  if (v0 <= 0x3F)
  {
    sub_1C9E10C2C();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for DateRelevantContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DateRelevantContext.__allocating_init(startDate:endDate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

void sub_1C9E10C2C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED84ED40)
  {
    sub_1C9E457CC();
    v0 = sub_1C9E45F10();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED84ED40);
  }
}

uint64_t sub_1C9E10C84()
{
  return sub_1C9E12194();
}

void sub_1C9E10C98(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

uint64_t sub_1C9E10D00(uint64_t a1, unint64_t a2)
{
  return sub_1C9E1230C(a1, a2);
}

void *sub_1C9E10D20()
{
  return sub_1C9E12440();
}

id sub_1C9E10D40(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;

  v7 = sub_1C9E45CF4();
  v9 = v8;
  v10 = a1;
  a5(v7, v9);
  swift_bridgeObjectRelease();

  v11 = (void *)sub_1C9E45CE8();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1C9E10E14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EF933308 + dword_1EF933308);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1C9E10E80;
  return v7(a1, a2);
}

uint64_t sub_1C9E10E80(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t sub_1C9E10ED4(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1C9E12010(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_1C9E115D4(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1C9E11070(int a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t);

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v5 = sub_1C9E45CF4();
  v7 = v6;
  v3[4] = v6;
  v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EF933308 + dword_1EF933308);
  v8 = a3;
  v9 = (_QWORD *)swift_task_alloc();
  v3[5] = v9;
  *v9 = v3;
  v9[1] = sub_1C9E11110;
  return v11(v5, v7);
}

uint64_t sub_1C9E11110()
{
  void *v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);

  v2 = v0;
  v3 = *v1;
  v4 = *(void **)(*v1 + 16);
  v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v0)
  {
    v6 = sub_1C9E456F4();

    v7 = 0;
    v8 = (void *)v6;
  }
  else
  {
    v7 = sub_1C9E45D78();
    swift_bridgeObjectRelease();
    v6 = 0;
    v8 = (void *)v7;
  }
  v9 = *(void (***)(_QWORD, _QWORD, _QWORD))(v3 + 24);
  v9[2](v9, v7, v6);

  _Block_release(v9);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

id MegadomeContextualPersonRelationships.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id MegadomeContextualPersonRelationships.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MegadomeContextualPersonRelationships();
  return objc_msgSendSuper2(&v2, sel_init);
}

id MegadomeContextualPersonRelationships.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MegadomeContextualPersonRelationships();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

char *sub_1C9E112A4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84EEF0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

_QWORD *sub_1C9E113A4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF933370);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[3 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF933378);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1C9E114DC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF933368);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1C9E115D4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  double v31;
  uint64_t v32;
  double *v33;
  double v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  char v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t i;
  double v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  double *v109;

  v3 = a1[1];
  result = sub_1C9E4612C();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if ((unint64_t)v3 >= 2)
    {
      v86 = *a1;
      v87 = *a1 + 16;
      v88 = -1;
      for (i = 1; i != v3; ++i)
      {
        v90 = *(double *)(v86 + 24 * i + 16);
        v91 = v88;
        v92 = v87;
        do
        {
          if (*(double *)v92 >= v90)
            break;
          if (!v86)
            goto LABEL_142;
          v93 = *(_QWORD *)(v92 + 8);
          v94 = *(_QWORD *)(v92 + 16);
          *(_OWORD *)(v92 + 8) = *(_OWORD *)(v92 - 16);
          *(_QWORD *)(v92 + 24) = *(_QWORD *)v92;
          *(_QWORD *)(v92 - 16) = v93;
          *(_QWORD *)(v92 - 8) = v94;
          *(double *)v92 = v90;
          v92 -= 24;
        }
        while (!__CFADD__(v91++, 1));
        v87 += 24;
        --v88;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_137;
    v6 = result;
    v103 = a1;
    if (v3 > 1)
    {
      v7 = v5 >> 1;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF933378);
      result = sub_1C9E45DA8();
      *(_QWORD *)(result + 16) = v7;
      v105 = result;
      v109 = (double *)(result + 32);
LABEL_13:
      v9 = 0;
      v10 = *a1;
      v104 = *a1 + 64;
      v11 = MEMORY[0x1E0DEE9D8];
      v106 = v6;
      v107 = v3;
      v108 = v10;
      while (1)
      {
        v13 = v9++;
        if (v9 < v3)
        {
          v14 = *(double *)(v10 + 24 * v9 + 16);
          v15 = *(double *)(v10 + 24 * v13 + 16);
          v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            v16 = (double *)(v104 + 24 * v13);
            v17 = v14;
            while (1)
            {
              v18 = v17;
              v17 = *v16;
              if (v15 < v14 == v18 >= *v16)
                break;
              ++v9;
              v16 += 3;
              if (v3 == v9)
              {
                v9 = v3;
                break;
              }
            }
          }
          if (v15 < v14)
          {
            if (v9 < v13)
              goto LABEL_139;
            if (v13 < v9)
            {
              v19 = 24 * v9;
              v20 = 24 * v13;
              v21 = v9;
              v22 = v13;
              do
              {
                if (v22 != --v21)
                {
                  if (!v10)
                    goto LABEL_145;
                  v23 = v10 + v20;
                  v24 = v10 + v19;
                  v25 = *(_QWORD *)(v10 + v20);
                  v26 = *(_QWORD *)(v10 + v20 + 8);
                  v27 = *(_QWORD *)(v10 + v20 + 16);
                  v28 = *(_QWORD *)(v10 + v19 - 8);
                  *(_OWORD *)v23 = *(_OWORD *)(v10 + v19 - 24);
                  *(_QWORD *)(v23 + 16) = v28;
                  *(_QWORD *)(v24 - 24) = v25;
                  *(_QWORD *)(v24 - 16) = v26;
                  *(_QWORD *)(v24 - 8) = v27;
                }
                ++v22;
                v19 -= 24;
                v20 += 24;
              }
              while (v22 < v21);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13))
            goto LABEL_136;
          if (v9 - v13 < v6)
          {
            v29 = v13 + v6;
            if (__OFADD__(v13, v6))
              goto LABEL_140;
            if (v29 >= v3)
              v29 = v3;
            if (v29 < v13)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v9 != v29)
            {
              v30 = (double *)(v10 + 24 * v9);
              do
              {
                v31 = *(double *)(v10 + 24 * v9 + 16);
                v32 = v13;
                v33 = v30;
                do
                {
                  if (*(v33 - 1) >= v31)
                    break;
                  if (!v10)
                    goto LABEL_143;
                  v34 = *v33;
                  v35 = *((_QWORD *)v33 + 1);
                  *(_OWORD *)v33 = *(_OWORD *)(v33 - 3);
                  v33[2] = *(v33 - 1);
                  *((_QWORD *)v33 - 2) = v35;
                  *(v33 - 1) = v31;
                  *(v33 - 3) = v34;
                  v33 -= 3;
                  ++v32;
                }
                while (v9 != v32);
                ++v9;
                v30 += 3;
              }
              while (v9 != v29);
              v9 = v29;
            }
          }
        }
        if (v9 < v13)
          goto LABEL_131;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1C9E11F04(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
          v11 = result;
        }
        v37 = *(_QWORD *)(v11 + 16);
        v36 = *(_QWORD *)(v11 + 24);
        v12 = v37 + 1;
        v10 = v108;
        if (v37 >= v36 >> 1)
        {
          result = (uint64_t)sub_1C9E11F04((char *)(v36 > 1), v37 + 1, 1, (char *)v11);
          v10 = v108;
          v11 = result;
        }
        *(_QWORD *)(v11 + 16) = v12;
        v38 = v11 + 32;
        v39 = (uint64_t *)(v11 + 32 + 16 * v37);
        *v39 = v13;
        v39[1] = v9;
        if (v37)
        {
          while (1)
          {
            v40 = v12 - 1;
            if (v12 >= 4)
            {
              v45 = v38 + 16 * v12;
              v46 = *(_QWORD *)(v45 - 64);
              v47 = *(_QWORD *)(v45 - 56);
              v51 = __OFSUB__(v47, v46);
              v48 = v47 - v46;
              if (v51)
                goto LABEL_120;
              v50 = *(_QWORD *)(v45 - 48);
              v49 = *(_QWORD *)(v45 - 40);
              v51 = __OFSUB__(v49, v50);
              v43 = v49 - v50;
              v44 = v51;
              if (v51)
                goto LABEL_121;
              v52 = v12 - 2;
              v53 = (uint64_t *)(v38 + 16 * (v12 - 2));
              v55 = *v53;
              v54 = v53[1];
              v51 = __OFSUB__(v54, v55);
              v56 = v54 - v55;
              if (v51)
                goto LABEL_122;
              v51 = __OFADD__(v43, v56);
              v57 = v43 + v56;
              if (v51)
                goto LABEL_124;
              if (v57 >= v48)
              {
                v75 = (uint64_t *)(v38 + 16 * v40);
                v77 = *v75;
                v76 = v75[1];
                v51 = __OFSUB__(v76, v77);
                v78 = v76 - v77;
                if (v51)
                  goto LABEL_130;
                v68 = v43 < v78;
                goto LABEL_83;
              }
            }
            else
            {
              if (v12 != 3)
              {
                v69 = *(_QWORD *)(v11 + 32);
                v70 = *(_QWORD *)(v11 + 40);
                v51 = __OFSUB__(v70, v69);
                v62 = v70 - v69;
                v63 = v51;
                goto LABEL_77;
              }
              v42 = *(_QWORD *)(v11 + 32);
              v41 = *(_QWORD *)(v11 + 40);
              v51 = __OFSUB__(v41, v42);
              v43 = v41 - v42;
              v44 = v51;
            }
            if ((v44 & 1) != 0)
              goto LABEL_123;
            v52 = v12 - 2;
            v58 = (uint64_t *)(v38 + 16 * (v12 - 2));
            v60 = *v58;
            v59 = v58[1];
            v61 = __OFSUB__(v59, v60);
            v62 = v59 - v60;
            v63 = v61;
            if (v61)
              goto LABEL_125;
            v64 = (uint64_t *)(v38 + 16 * v40);
            v66 = *v64;
            v65 = v64[1];
            v51 = __OFSUB__(v65, v66);
            v67 = v65 - v66;
            if (v51)
              goto LABEL_127;
            if (__OFADD__(v62, v67))
              goto LABEL_129;
            if (v62 + v67 >= v43)
            {
              v68 = v43 < v67;
LABEL_83:
              if (v68)
                v40 = v52;
              goto LABEL_85;
            }
LABEL_77:
            if ((v63 & 1) != 0)
              goto LABEL_126;
            v71 = (uint64_t *)(v38 + 16 * v40);
            v73 = *v71;
            v72 = v71[1];
            v51 = __OFSUB__(v72, v73);
            v74 = v72 - v73;
            if (v51)
              goto LABEL_128;
            if (v74 < v62)
              goto LABEL_15;
LABEL_85:
            v79 = v40 - 1;
            if (v40 - 1 >= v12)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v10)
              goto LABEL_144;
            v80 = v11;
            v81 = (uint64_t *)(v38 + 16 * v79);
            v82 = *v81;
            v83 = (_QWORD *)(v38 + 16 * v40);
            v84 = v83[1];
            result = sub_1C9E11CA8((double *)(v10 + 24 * *v81), (double *)(v10 + 24 * *v83), v10 + 24 * v84, v109);
            if (v1)
              goto LABEL_93;
            if (v84 < v82)
              goto LABEL_117;
            if (v40 > *(_QWORD *)(v80 + 16))
              goto LABEL_118;
            *v81 = v82;
            *(_QWORD *)(v38 + 16 * v79 + 8) = v84;
            v85 = *(_QWORD *)(v80 + 16);
            if (v40 >= v85)
              goto LABEL_119;
            v11 = v80;
            v12 = v85 - 1;
            result = (uint64_t)memmove((void *)(v38 + 16 * v40), v83 + 2, 16 * (v85 - 1 - v40));
            *(_QWORD *)(v80 + 16) = v85 - 1;
            v10 = v108;
            if (v85 <= 2)
              goto LABEL_15;
          }
        }
        v12 = 1;
LABEL_15:
        v6 = v106;
        v3 = v107;
        if (v9 >= v107)
        {
          v8 = v105;
          goto LABEL_103;
        }
      }
    }
    v8 = MEMORY[0x1E0DEE9D8];
    v109 = (double *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 == 1)
    {
      v105 = MEMORY[0x1E0DEE9D8];
      goto LABEL_13;
    }
    v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    v11 = MEMORY[0x1E0DEE9D8];
LABEL_103:
    result = v11;
    v105 = v8;
    if (v12 >= 2)
    {
      v96 = *v103;
      do
      {
        v97 = v12 - 2;
        if (v12 < 2)
          goto LABEL_132;
        if (!v96)
          goto LABEL_146;
        v98 = result;
        v99 = *(_QWORD *)(result + 32 + 16 * v97);
        v100 = *(_QWORD *)(result + 32 + 16 * (v12 - 1) + 8);
        result = sub_1C9E11CA8((double *)(v96 + 24 * v99), (double *)(v96 + 24 * *(_QWORD *)(result + 32 + 16 * (v12 - 1))), v96 + 24 * v100, v109);
        if (v1)
          break;
        if (v100 < v99)
          goto LABEL_133;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1C9E11FFC(v98);
          v98 = result;
        }
        if (v97 >= *(_QWORD *)(v98 + 16))
          goto LABEL_134;
        v101 = (_QWORD *)(v98 + 32 + 16 * v97);
        *v101 = v99;
        v101[1] = v100;
        v102 = *(_QWORD *)(v98 + 16);
        if (v12 > v102)
          goto LABEL_135;
        memmove((void *)(v98 + 32 + 16 * (v12 - 1)), (const void *)(v98 + 32 + 16 * v12), 16 * (v102 - v12));
        result = v98;
        *(_QWORD *)(v98 + 16) = v102 - 1;
        v12 = v102 - 1;
      }
      while (v102 > 2);
    }
LABEL_93:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v105 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1C9E11CA8(double *__dst, double *__src, unint64_t a3, double *a4)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  __int128 v16;
  unint64_t v17;
  double *v18;
  double *v19;
  BOOL v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = ((char *)__src - (char *)__dst) / 24;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 24;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[3 * v11] <= a4)
      memmove(a4, __src, 24 * v11);
    v12 = &v4[3 * v11];
    if (v7 >= v6 || v10 < 24)
      goto LABEL_39;
    v17 = a3 - 24;
    while (1)
    {
      v18 = (double *)(v17 + 24);
      if (*(v6 - 1) >= *(v12 - 1))
      {
        v19 = v12 - 3;
        if (v18 != v12)
        {
          v12 -= 3;
          goto LABEL_36;
        }
        v20 = v17 >= (unint64_t)v12;
        v12 -= 3;
        if (v20)
          goto LABEL_36;
      }
      else
      {
        v19 = v6 - 3;
        if (v18 != v6)
        {
          v6 -= 3;
LABEL_36:
          v21 = *(_OWORD *)v19;
          *(double *)(v17 + 16) = v19[2];
          *(_OWORD *)v17 = v21;
          goto LABEL_37;
        }
        v20 = v17 >= (unint64_t)v6;
        v6 -= 3;
        if (v20)
          goto LABEL_36;
      }
LABEL_37:
      if (v6 > v7)
      {
        v17 -= 24;
        if (v12 > v4)
          continue;
      }
      goto LABEL_39;
    }
  }
  if (a4 != __dst || &__dst[3 * v9] <= a4)
    memmove(a4, __dst, 24 * v9);
  v12 = &v4[3 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 24)
  {
    while (1)
    {
      if (v4[2] >= v6[2])
      {
        v15 = v4 + 3;
        v14 = v4;
        v13 = v6;
        if (v7 == v4)
        {
          v4 += 3;
          if (v7 < v15)
            goto LABEL_16;
        }
        else
        {
          v4 += 3;
        }
      }
      else
      {
        v13 = v6 + 3;
        v14 = v6;
        if (v7 == v6 && v7 < v13)
          goto LABEL_16;
      }
      v16 = *(_OWORD *)v14;
      v7[2] = v14[2];
      *(_OWORD *)v7 = v16;
LABEL_16:
      v7 += 3;
      if (v4 < v12)
      {
        v6 = v13;
        if ((unint64_t)v13 < a3)
          continue;
      }
      break;
    }
  }
  v6 = v7;
LABEL_39:
  v22 = (unsigned __int128)(((char *)v12 - (char *)v4) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  v23 = (v22 >> 2) + ((unint64_t)v22 >> 63);
  if (v6 != v4 || v6 >= &v4[3 * v23])
    memmove(v6, v4, 24 * v23);
  return 1;
}

char *sub_1C9E11F04(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF933380);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1C9E11FFC(uint64_t a1)
{
  return sub_1C9E11F04(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_1C9E12010(_QWORD *a1)
{
  return sub_1C9E113A4(0, a1[2], 0, a1);
}

size_t sub_1C9E12024(size_t result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;

  v2 = *(_QWORD *)(result + 16);
  v3 = a2[2];
  if (v3 >= v2)
    v4 = *(_QWORD *)(result + 16);
  else
    v4 = a2[2];
  if (!v4)
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 24) >> 1;
    if (!v2)
      goto LABEL_16;
    goto LABEL_15;
  }
  v6 = result;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF933370);
  v7 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v7);
  v8 = (uint64_t)(result - 32) / 24;
  v7[2] = v4;
  v7[3] = 2 * v8;
  v9 = *(_QWORD *)(v6 + 40);
  v10 = v8 & 0x7FFFFFFFFFFFFFFFLL;
  v11 = a2[4];
  if (v2 <= 1)
    v12 = 1;
  else
    v12 = v2;
  v13 = v10 - 1;
  v7[4] = *(_QWORD *)(v6 + 32);
  v7[5] = v9;
  v7[6] = v11;
  v14 = v4 - 1;
  if (v14)
  {
    v15 = v7 + 7;
    v16 = a2 + 5;
    v17 = v6 + 56;
    v18 = v12 - 1;
    while (v18)
    {
      v19 = *(_QWORD *)(v17 - 8);
      result = swift_bridgeObjectRetain();
      --v13;
      v20 = *v16++;
      *v15 = v19;
      v15[1] = result;
      v15[2] = v20;
      v17 += 16;
      --v18;
      v15 += 3;
      if (!--v14)
        goto LABEL_12;
    }
    __break(1u);
    goto LABEL_21;
  }
LABEL_12:
  result = swift_bridgeObjectRetain();
  if (v2 > v3)
  {
LABEL_15:
    if (v2 <= v3)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
LABEL_16:
  v21 = v7[3];
  if (v21 < 2)
    return (size_t)v7;
  v22 = v21 >> 1;
  v23 = __OFSUB__(v22, v13);
  v24 = v22 - v13;
  if (!v23)
  {
    v7[2] = v24;
    return (size_t)v7;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1C9E12194()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD v8[6];

  sub_1C9E4594C();
  v2 = (void *)sub_1C9E45934();
  v3 = (void *)sub_1C9E45928();

  if (!v0)
  {
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = MEMORY[0x1E0DEE9D8];
    v5 = (void *)sub_1C9E45CE8();
    v8[4] = sub_1C9E12E84;
    v8[5] = v4;
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 1107296256;
    v8[2] = sub_1C9E10C98;
    v8[3] = &block_descriptor_6;
    v6 = _Block_copy(v8);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_enumeratePeopleMatchingName_block_, v5, v6);
    _Block_release(v6);

    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v4 + 16) + 16))
    {
      v1 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 32);
      swift_bridgeObjectRetain();
    }
    else
    {
      v1 = 0;
    }
    swift_release();
    swift_unknownObjectRelease();
  }
  return v1;
}

uint64_t sub_1C9E1230C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;

  v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v3)
    return 0;
  v4 = a1;
  sub_1C9E4594C();
  v5 = (void *)sub_1C9E45934();
  v6 = (void *)sub_1C9E45928();

  if (!v2)
  {
    v7 = (void *)sub_1C9E45CE8();
    v8 = objc_msgSend(v6, sel_personForIdentifier_, v7);

    if (v8)
    {
      v9 = objc_msgSend(v8, sel_entityIdentifier);
      v10 = objc_msgSend(v9, sel_stringValue);

      if (v10)
      {
        v4 = sub_1C9E45CF4();
        swift_unknownObjectRelease();

        return v4;
      }
    }
    swift_unknownObjectRelease();

    return 0;
  }
  return v4;
}

void *sub_1C9E12440()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF933388);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v18 - v7;
  v9 = sub_1C9E458F8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C9E4594C();
  v14 = (void *)sub_1C9E45934();
  sub_1C9E45940();

  if (!v0)
  {
    v19 = v9;
    sub_1C9E458EC();
    sub_1C9E12E18((uint64_t)v8, (uint64_t)v4);
    v15 = sub_1C9E45964();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v4, 1, v15) == 1)
    {
      sub_1C9DF090C((uint64_t)v4, &qword_1EF933388);
      v14 = 0;
    }
    else
    {
      v14 = (void *)sub_1C9E45958();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v4, v15);
    }
    sub_1C9DF090C((uint64_t)v8, &qword_1EF933388);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v19);
  }
  return v14;
}

uint64_t sub_1C9E125FC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  v3 = sub_1C9E4597C();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1C9E1265C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, _QWORD, _QWORD);

  v1 = *(_QWORD *)(v0 + 24);
  if ((v1 & 0x2000000000000000) != 0)
    v2 = HIBYTE(v1) & 0xF;
  else
    v2 = *(_QWORD *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    v3 = objc_allocWithZone((Class)sub_1C9E459F4());
    *(_QWORD *)(v0 + 56) = sub_1C9E459E8();
    v6 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))((int)*MEMORY[0x1E0D3D760] + MEMORY[0x1E0D3D760]);
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v4;
    *v4 = v0;
    v4[1] = sub_1C9E12758;
    return v6(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 0);
  }
  else
  {
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x1E0DEE9D8]);
  }
}

uint64_t sub_1C9E12758(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 72) = a1;
  *(_QWORD *)(v3 + 80) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

unint64_t sub_1C9E127C4()
{
  uint64_t v0;
  unint64_t result;
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  id v9;
  void *v10;
  double v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;

  result = sub_1C9E459DC();
  v2 = result;
  if (result >> 62)
  {
    result = sub_1C9E460A8();
    v3 = result;
  }
  else
  {
    v3 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = (char *)MEMORY[0x1E0DEE9D8];
  v45 = v0;
  if (v3)
  {
    if (v3 < 1)
    {
      __break(1u);
      return result;
    }
    v5 = 0;
    v44 = *(_QWORD *)(v0 + 40);
    v6 = v2;
    v7 = v2 & 0xC000000000000001;
    v8 = (char *)MEMORY[0x1E0DEE9D8];
    v4 = (char *)MEMORY[0x1E0DEE9D8];
    v43 = v2;
    do
    {
      if (v7)
        v9 = (id)MEMORY[0x1CAA47960](v5, v6);
      else
        v9 = *(id *)(v6 + 8 * v5 + 32);
      v10 = v9;
      sub_1C9E459D0();
      if (v11 > 0.5)
      {
        v12 = v3;
        v13 = v7;
        v14 = v4;
        v15 = *(_QWORD *)(v45 + 48);
        v16 = v8;
        v17 = *(_QWORD *)(v45 + 32);
        sub_1C9E459C4();
        v18 = sub_1C9E45970();
        v20 = v19;
        v21 = v17;
        v8 = v16;
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v15, v21);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = sub_1C9E112A4(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
        v23 = *((_QWORD *)v8 + 2);
        v22 = *((_QWORD *)v8 + 3);
        if (v23 >= v22 >> 1)
          v8 = sub_1C9E112A4((char *)(v22 > 1), v23 + 1, 1, v8);
        *((_QWORD *)v8 + 2) = v23 + 1;
        v24 = &v8[16 * v23];
        *((_QWORD *)v24 + 4) = v18;
        *((_QWORD *)v24 + 5) = v20;
        sub_1C9E459D0();
        v26 = v25;
        v4 = v14;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v4 = sub_1C9E114DC(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
        v7 = v13;
        v3 = v12;
        v6 = v43;
        v28 = *((_QWORD *)v4 + 2);
        v27 = *((_QWORD *)v4 + 3);
        if (v28 >= v27 >> 1)
          v4 = sub_1C9E114DC((char *)(v27 > 1), v28 + 1, 1, v4);
        *((_QWORD *)v4 + 2) = v28 + 1;
        *(_QWORD *)&v4[8 * v28 + 32] = v26;
      }
      ++v5;

    }
    while (v3 != v5);
  }
  else
  {
    v8 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v29 = v45;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v30 = (_QWORD *)sub_1C9E12024((size_t)v8, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v46 = v30;
  sub_1C9E10ED4(&v46);
  v31 = v46;
  v32 = v46[2];
  if (v32)
  {
    v47 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1C9DF66B4(0, v32, 0);
    v33 = 0;
    v34 = v47;
    v35 = *(_QWORD *)(v47 + 16);
    v36 = 16 * v35;
    do
    {
      v37 = v31[v33 + 4];
      v38 = v31[v33 + 5];
      v47 = v34;
      v39 = *(_QWORD *)(v34 + 24);
      swift_bridgeObjectRetain();
      if (v35 >= v39 >> 1)
      {
        sub_1C9DF66B4(v39 > 1, v35 + 1, 1);
        v34 = v47;
      }
      *(_QWORD *)(v34 + 16) = v35 + 1;
      v40 = v34 + v36;
      *(_QWORD *)(v40 + 32) = v37;
      *(_QWORD *)(v40 + 40) = v38;
      v36 += 16;
      v33 += 3;
      ++v35;
      --v32;
    }
    while (v32);
    v29 = v45;
    v41 = *(void **)(v45 + 56);

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v42 = *(void **)(v45 + 56);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = MEMORY[0x1E0DEE9D8];
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v29 + 8))(v34);
}

uint64_t sub_1C9E12B90()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for MegadomeContextualPersonRelationships()
{
  return objc_opt_self();
}

uint64_t method lookup function for MegadomeContextualPersonRelationships()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MegadomeContextualPersonRelationships.megadomePersonIDFromName(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x50))();
}

uint64_t dispatch thunk of MegadomeContextualPersonRelationships.megadomePersonIDFromContactID(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of MegadomeContextualPersonRelationships.megadomePersonIDFromPhoneNumber(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of MegadomeContextualPersonRelationships.entityRelationships(from:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x68);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1C9E12CFC;
  return v9(a1, a2);
}

uint64_t sub_1C9E12CFC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_1C9E12D4C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_1C9E12D80()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1C9DF080C;
  return ((uint64_t (*)(int, void *, void *))((char *)&dword_1EF933340 + dword_1EF933340))(v2, v3, v4);
}

uint64_t sub_1C9E12DF4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C9E12E18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF933388);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C9E12E60()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1C9E12E84(void *a1)
{
  uint64_t v1;
  id v2;
  id v3;
  char **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  char *v12;

  v2 = objc_msgSend(a1, sel_entityIdentifier);
  v3 = objc_msgSend(v2, sel_stringValue);

  if (v3)
  {
    v4 = (char **)(v1 + 16);
    v5 = sub_1C9E45CF4();
    v7 = v6;

    swift_beginAccess();
    v8 = *v4;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v4 = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v8 = sub_1C9E112A4(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
      *v4 = v8;
    }
    v11 = *((_QWORD *)v8 + 2);
    v10 = *((_QWORD *)v8 + 3);
    if (v11 >= v10 >> 1)
    {
      v8 = sub_1C9E112A4((char *)(v10 > 1), v11 + 1, 1, v8);
      *v4 = v8;
    }
    *((_QWORD *)v8 + 2) = v11 + 1;
    v12 = &v8[16 * v11];
    *((_QWORD *)v12 + 4) = v5;
    *((_QWORD *)v12 + 5) = v7;
  }
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

id sub_1C9E12FA8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v1 = OBJC_IVAR___ATXSportsServer____lazy_storage___listener;
  v2 = *(void **)(v0 + OBJC_IVAR___ATXSportsServer____lazy_storage___listener);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR___ATXSportsServer____lazy_storage___listener);
  }
  else
  {
    sub_1C9E45CF4();
    v4 = objc_allocWithZone(MEMORY[0x1E0CB3B58]);
    v5 = (void *)sub_1C9E45CE8();
    swift_bridgeObjectRelease();
    v6 = objc_msgSend(v4, sel_initWithMachServiceName_, v5);

    objc_msgSend(v6, sel_setDelegate_, v0);
    v7 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v6;
    v3 = v6;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

id sub_1C9E13078()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SportsServer()), sel_init);
  qword_1ED84F940 = (uint64_t)result;
  return result;
}

uint64_t *sub_1C9E130A4()
{
  if (qword_1ED84F948 != -1)
    swift_once();
  return &qword_1ED84F940;
}

id static SportsServer.shared.getter()
{
  if (qword_1ED84F948 != -1)
    swift_once();
  return (id)qword_1ED84F940;
}

id sub_1C9E13164()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  objc_class *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v12;
  objc_super v14;

  v1 = sub_1C9E45BF8();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v0[OBJC_IVAR___ATXSportsServer____lazy_storage___listener] = 0;
  v6 = (objc_class *)type metadata accessor for SportsServer();
  v14.receiver = v0;
  v14.super_class = v6;
  v7 = objc_msgSendSuper2(&v14, sel_init);
  v8 = sub_1C9DE79D4();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v8, v1);
  v9 = sub_1C9E45BD4();
  v10 = sub_1C9E45E44();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1C9A3B000, v9, v10, "SportsServer: init", v11, 2u);
    MEMORY[0x1CAA493AC](v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  v12 = sub_1C9E12FA8();
  objc_msgSend(v12, sel_resume);

  return v7;
}

uint64_t type metadata accessor for SportsServer()
{
  return objc_opt_self();
}

uint64_t sub_1C9E132FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_1EF9333A0 + dword_1EF9333A0);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1C9E10E80;
  return v3();
}

uint64_t sub_1C9E13354(void **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_1C9E45BF8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  v8 = sub_1C9DE79D4();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v8, v2);
  v9 = v7;
  v10 = sub_1C9E45BD4();
  v11 = sub_1C9E45E44();
  if (os_log_type_enabled(v10, (os_log_type_t)v11))
  {
    HIDWORD(v25) = v11;
    v12 = swift_slowAlloc();
    v26 = swift_slowAlloc();
    v28 = v26;
    *(_DWORD *)v12 = 136315394;
    v13 = objc_msgSend(v9, sel_qid);
    if (v13)
    {
      v14 = v13;
      v15 = sub_1C9E45CF4();
      v17 = v16;

    }
    else
    {
      v17 = 0xE300000000000000;
      v15 = 7104878;
    }
    v27 = sub_1C9DEDEE0(v15, v17, &v28);
    sub_1C9E45F1C();

    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    v18 = objc_msgSend(v9, sel_umcid);
    if (v18)
    {
      v19 = v18;
      v20 = sub_1C9E45CF4();
      v22 = v21;

    }
    else
    {
      v22 = 0xE300000000000000;
      v20 = 7104878;
    }
    v27 = sub_1C9DEDEE0(v20, v22, &v28);
    sub_1C9E45F1C();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9A3B000, v10, BYTE4(v25), "SportsServer: favorite team: %s : %s", (uint8_t *)v12, 0x16u);
    v23 = v26;
    swift_arrayDestroy();
    MEMORY[0x1CAA493AC](v23, -1, -1);
    MEMORY[0x1CAA493AC](v12, -1, -1);

  }
  else
  {

  }
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t sub_1C9E13708(const void *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = _Block_copy(a1);
  v4 = (uint64_t (__cdecl *)())((char *)&dword_1EF9333A0 + dword_1EF9333A0);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_1C9E13768;
  return v4();
}

uint64_t sub_1C9E13768(void *a1)
{
  void *v1;
  uint64_t *v2;
  void *v3;
  uint64_t v5;
  void (**v6)(_QWORD, _QWORD, _QWORD);
  void *v7;

  v3 = v1;
  v5 = *v2;
  swift_task_dealloc();
  v6 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 + 16);
  if (v3)
  {
    v7 = (void *)sub_1C9E456F4();

    ((void (**)(_QWORD, _QWORD, void *))v6)[2](v6, 0, v7);
    _Block_release(v6);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v6)[2](v6, a1, 0);
    _Block_release(v6);

  }
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1C9E1381C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F010);
  v3[9] = v4;
  v3[10] = *(_QWORD *)(v4 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F018);
  v3[14] = v5;
  v3[15] = *(_QWORD *)(v5 - 8);
  v3[16] = swift_task_alloc();
  v6 = sub_1C9E457CC();
  v3[17] = v6;
  v3[18] = *(_QWORD *)(v6 - 8);
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  v7 = sub_1C9E45BF8();
  v3[21] = v7;
  v3[22] = *(_QWORD *)(v7 - 8);
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  v3[25] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1C9E13948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  void (*v11)(uint64_t, uint64_t, uint64_t);
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  unint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  _QWORD *v31;
  NSObject *log;
  uint64_t v34;
  os_log_type_t type;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(void);
  uint64_t v41;

  v38 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 56);
  v9 = sub_1C9DE79D4();
  *(_QWORD *)(v0 + 208) = v9;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 216) = v10;
  v10(v1, v9, v2);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(_QWORD *)(v0 + 224) = v11;
  v11(v4, v38, v7);
  v11(v5, v8, v7);
  v12 = sub_1C9E45BD4();
  v13 = sub_1C9E45E44();
  if (os_log_type_enabled(v12, v13))
  {
    v36 = *(_QWORD *)(v0 + 176);
    v37 = *(_QWORD *)(v0 + 168);
    v39 = *(_QWORD *)(v0 + 200);
    type = v13;
    v15 = *(_QWORD *)(v0 + 152);
    v14 = *(_QWORD *)(v0 + 160);
    v17 = *(_QWORD *)(v0 + 136);
    v16 = *(_QWORD *)(v0 + 144);
    log = v12;
    v18 = swift_slowAlloc();
    v34 = swift_slowAlloc();
    v41 = v34;
    *(_DWORD *)v18 = 136315394;
    sub_1C9E1A2BC((unint64_t *)&qword_1ED84F020, MEMORY[0x1E0CB08F0]);
    v19 = sub_1C9E46138();
    *(_QWORD *)(v0 + 32) = sub_1C9DEDEE0(v19, v20, &v41);
    sub_1C9E45F1C();
    swift_bridgeObjectRelease();
    v21 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v21(v14, v17);
    *(_WORD *)(v18 + 12) = 2080;
    v22 = sub_1C9E46138();
    *(_QWORD *)(v0 + 40) = sub_1C9DEDEE0(v22, v23, &v41);
    sub_1C9E45F1C();
    swift_bridgeObjectRelease();
    v21(v15, v17);
    _os_log_impl(&dword_1C9A3B000, log, type, "SportsServer: scheduledGameQIDs %s - %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CAA493AC](v34, -1, -1);
    MEMORY[0x1CAA493AC](v18, -1, -1);

    v24 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v24(v39, v37);
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 200);
    v26 = *(_QWORD *)(v0 + 168);
    v27 = *(_QWORD *)(v0 + 176);
    v28 = *(_QWORD *)(v0 + 152);
    v29 = *(_QWORD *)(v0 + 136);
    v21 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 144) + 8);
    v21(*(_QWORD *)(v0 + 160), v29);
    v21(v28, v29);

    v24 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v24(v25, v26);
  }
  *(_QWORD *)(v0 + 232) = v21;
  *(_QWORD *)(v0 + 240) = v24;
  v30 = *(int **)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 64)) + 0x70);
  v40 = (uint64_t (*)(void))((char *)v30 + *v30);
  v31 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 248) = v31;
  *v31 = v0;
  v31[1] = sub_1C9E13C2C;
  return v40();
}

uint64_t sub_1C9E13C2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 256) = a1;
  *(_QWORD *)(v3 + 264) = v1;
  swift_task_dealloc();
  if (!v1)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1C9E13D2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  void *v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  _QWORD *v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  int64_t v59;
  _QWORD *v60;
  _QWORD *v61;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = objc_msgSend(*(id *)(v0 + 256), sel_teams);
  sub_1C9DE8EB0(0, (unint64_t *)&unk_1ED84EE90);
  v5 = sub_1C9E45D84();

  v6 = sub_1C9E14348(v5);
  swift_bridgeObjectRelease();
  v7 = sub_1C9DF6B9C((uint64_t)v6);
  swift_bridgeObjectRelease();
  sub_1C9E1930C(v2, v3);
  if (v1)
  {
    v9 = *(void **)(v0 + 256);
    swift_bridgeObjectRelease();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = v8;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 216))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 168));
    swift_bridgeObjectRetain();
    v12 = sub_1C9E45BD4();
    v13 = sub_1C9E45E44();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v14 = 134217984;
      *(_QWORD *)(v0 + 24) = *(_QWORD *)(v11 + 16);
      sub_1C9E45F1C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C9A3B000, v12, v13, "SportsServer: games returned %ld", v14, 0xCu);
      MEMORY[0x1CAA493AC](v14, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(_QWORD, _QWORD))(v0 + 240))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 168));
    v15 = (_QWORD *)sub_1C9E19920(v11, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v61 = v15;
    swift_bridgeObjectRetain();
    sub_1C9E162D0(&v61);
    swift_bridgeObjectRelease();
    v16 = v61;
    v17 = v61[2];
    if (v17)
    {
      v51 = *(_QWORD *)(v0 + 120);
      v52 = *(_QWORD *)(v0 + 144);
      v18 = *(_QWORD *)(v0 + 80);
      v49 = *(_QWORD *)(v0 + 72);
      v50 = *(_QWORD *)(v0 + 112);
      v61 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      sub_1C9E17514(0, v17, 0);
      v19 = (uint64_t)v16 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
      v48 = *(_QWORD *)(v18 + 72);
      v20 = v61;
      v53 = v0;
      do
      {
        v59 = v17;
        v60 = v20;
        v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 224);
        v57 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
        v58 = v19;
        v23 = *(_QWORD *)(v0 + 128);
        v22 = *(_QWORD *)(v0 + 136);
        v54 = v23;
        v55 = v21;
        v25 = *(_QWORD *)(v0 + 96);
        v24 = *(_QWORD *)(v0 + 104);
        v26 = *(_QWORD *)(v0 + 88);
        sub_1C9E1A36C(v19, v24, &qword_1ED84F010);
        v56 = (_QWORD *)(v23 + *(int *)(v50 + 48));
        v27 = *(int *)(v49 + 48);
        v28 = (_QWORD *)(v25 + v27);
        v29 = *(int *)(v49 + 64);
        v30 = (_QWORD *)(v25 + v29);
        v31 = (uint64_t *)(v24 + v27);
        v32 = (uint64_t *)(v24 + v29);
        v21(v25, v24, v22);
        v33 = *v31;
        v34 = v31[1];
        *v28 = v33;
        v28[1] = v34;
        v36 = *v32;
        v35 = v32[1];
        *v30 = v36;
        v30[1] = v35;
        v37 = v22;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v54, v25, v22);
        v38 = (_QWORD *)(v26 + *(int *)(v49 + 48));
        v39 = (_QWORD *)(v26 + *(int *)(v49 + 64));
        v55(v26, v24, v37);
        *v38 = v33;
        v38[1] = v34;
        *v39 = v36;
        v39[1] = v35;
        *v56 = v33;
        v56[1] = v34;
        v20 = v60;
        swift_bridgeObjectRetain();
        v57(v26, v37);
        sub_1C9DF090C(v24, &qword_1ED84F010);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1C9E17514(0, v60[2] + 1, 1);
          v20 = v61;
        }
        v41 = v20[2];
        v40 = v20[3];
        v0 = v53;
        if (v41 >= v40 >> 1)
        {
          sub_1C9E17514(v40 > 1, v41 + 1, 1);
          v20 = v61;
        }
        v42 = *(_QWORD *)(v53 + 128);
        v20[2] = v41 + 1;
        sub_1C9E1A2FC(v42, (uint64_t)v20+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(_QWORD *)(v51 + 72) * v41, &qword_1ED84F018);
        v19 = v58 + v48;
        v17 = v59 - 1;
      }
      while (v59 != 1);
      swift_release();
    }
    else
    {
      swift_release();
      v20 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 216))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 168));
    swift_bridgeObjectRetain();
    v43 = sub_1C9E45BD4();
    v44 = sub_1C9E45E44();
    v45 = os_log_type_enabled(v43, v44);
    v46 = *(void **)(v0 + 256);
    if (v45)
    {
      v47 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v47 = 134217984;
      *(_QWORD *)(v0 + 16) = v20[2];
      sub_1C9E45F1C();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C9A3B000, v43, v44, "SportsServer: games filtered %ld", v47, 0xCu);
      MEMORY[0x1CAA493AC](v47, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(_QWORD, _QWORD))(v0 + 240))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v20);
  }
}

char *sub_1C9E14348(unint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;

  if (a1 >> 62)
    goto LABEL_17;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = sub_1C9E460A8())
  {
    v3 = (char *)MEMORY[0x1E0DEE9D8];
    v4 = 4;
    while (1)
    {
      v5 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1CAA47960](v4 - 4, a1) : *(id *)(a1 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v8 = objc_msgSend(v5, sel_umcid);
      if (v8)
      {
        v9 = v8;
        v10 = sub_1C9E45CF4();
        v12 = v11;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = sub_1C9E112A4(0, *((_QWORD *)v3 + 2) + 1, 1, v3);
        v14 = *((_QWORD *)v3 + 2);
        v13 = *((_QWORD *)v3 + 3);
        if (v14 >= v13 >> 1)
          v3 = sub_1C9E112A4((char *)(v13 > 1), v14 + 1, 1, v3);
        *((_QWORD *)v3 + 2) = v14 + 1;
        v15 = &v3[16 * v14];
        *((_QWORD *)v15 + 4) = v10;
        *((_QWORD *)v15 + 5) = v12;
      }
      else
      {

      }
      ++v4;
      if (v7 == v2)
        goto LABEL_19;
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  v3 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_19:
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1C9E144DC(uint64_t a1, void *a2)
{
  return sub_1C9E19BEC(a2);
}

uint64_t sub_1C9E144E4()
{
  return sub_1C9E1450C(MEMORY[0x1E0DF2280], "SportsServer: connection interrupted");
}

uint64_t sub_1C9E144F8()
{
  return sub_1C9E1450C(MEMORY[0x1E0DF2290], "SportsServer: connection invalidated");
}

uint64_t sub_1C9E1450C(uint64_t (*a1)(void), const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v14;

  v4 = sub_1C9E45BF8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1C9DE79D4();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v9, v4);
  v10 = sub_1C9E45BD4();
  v11 = a1();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_1C9A3B000, v10, v11, a2, v12, 2u);
    MEMORY[0x1CAA493AC](v12, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1C9E1466C(uint64_t a1, char a2, void *a3)
{
  _QWORD *v4;
  id v5;

  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84EF60);
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    **(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40) = a2;
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1C9E146EC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _QWORD *v5;
  id v6;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84EF60);
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF9334D0);
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = sub_1C9E45D84();
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1C9E14788(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  char *v93;
  uint64_t v94;
  char v95;
  char *v96;
  void (*v97)(_QWORD, _QWORD);
  uint64_t v98;
  char v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(char *, uint64_t, uint64_t);
  char *v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  void (*v129)(char *, char *, uint64_t);
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  int64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  NSObject *v157;
  os_log_type_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  NSObject *v170;
  os_log_type_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  __int128 v180;
  void (*v181)(char *, uint64_t);
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  uint64_t *v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v194;
  char *v195;
  char *v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  NSObject *v204;
  os_log_type_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  void (*v214)(char *, uint64_t);
  char *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  NSObject *v221;
  char *v222;
  os_log_type_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  void (*v231)(char *, uint64_t);
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void (*v238)(char *, uint64_t);
  char *v239;
  char *v240;
  char *v241;
  char *v242;
  __int128 v243;
  char *v244;
  __int128 v245;
  uint64_t v246;
  char *v247;
  char *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t *v252;
  char *v253;
  char *v254;
  char *v255;
  char *v256;
  char *v257;
  char *v258;
  uint64_t v259;
  char **v260;
  uint64_t v261;
  char *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  uint64_t v268;
  char *v269;
  char *v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274[2];
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;

  v252 = a4;
  v259 = a3;
  v246 = a2;
  v261 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F010);
  v251 = *(_QWORD *)(v261 - 8);
  MEMORY[0x1E0C80A78](v261, v4);
  v257 = (char *)&v239 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v273 = sub_1C9E459AC();
  v266 = *(_QWORD *)(v273 - 8);
  MEMORY[0x1E0C80A78](v273, v6);
  v271 = (char *)&v239 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v254 = (char *)&v239 - v10;
  MEMORY[0x1E0C80A78](v11, v12);
  v256 = (char *)&v239 - v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v262 = (char *)&v239 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v244 = (char *)&v239 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v269 = (char *)&v239 - v22;
  *(_QWORD *)&v245 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84EE80);
  MEMORY[0x1E0C80A78](v245, v23);
  *(_QWORD *)&v243 = (char *)&v239 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v260 = (char **)((char *)&v239 - v27);
  v268 = sub_1C9E45BF8();
  v272 = *(_QWORD *)(v268 - 8);
  MEMORY[0x1E0C80A78](v268, v28);
  v253 = (char *)&v239 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v255 = (char *)&v239 - v32;
  MEMORY[0x1E0C80A78](v33, v34);
  v248 = (char *)&v239 - v35;
  MEMORY[0x1E0C80A78](v36, v37);
  v250 = (uint64_t)&v239 - v38;
  MEMORY[0x1E0C80A78](v39, v40);
  v247 = (char *)&v239 - v41;
  MEMORY[0x1E0C80A78](v42, v43);
  v263 = (char *)&v239 - v44;
  v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF933430);
  MEMORY[0x1E0C80A78](v45, v46);
  v48 = (char *)&v239 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F028);
  MEMORY[0x1E0C80A78](v49, v50);
  v270 = (char *)&v239 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_1C9E457CC();
  v53 = *(_QWORD *)(v52 - 8);
  v264 = v52;
  v265 = v53;
  MEMORY[0x1E0C80A78](v52, v54);
  v258 = (char *)&v239 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v56, v57);
  v59 = (char *)&v239 - v58;
  MEMORY[0x1E0C80A78](v60, v61);
  v63 = (char *)&v239 - v62;
  MEMORY[0x1E0C80A78](v64, v65);
  v67 = (char *)&v239 - v66;
  MEMORY[0x1E0C80A78](v68, v69);
  v71 = (char *)&v239 - v70;
  MEMORY[0x1E0C80A78](v72, v73);
  v75 = (char *)&v239 - v74;
  MEMORY[0x1E0C80A78](v76, v77);
  v79 = (char *)&v239 - v78;
  sub_1C9E459B8();
  v80 = sub_1C9E45A0C();
  v81 = *(_QWORD *)(v80 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v48, 1, v80) != 1)
  {
    v242 = v75;
    v240 = v71;
    v239 = v67;
    v241 = v63;
    v267 = v79;
    v249 = v59;
    v82 = (uint64_t)v270;
    sub_1C9E45A00();
    (*(void (**)(char *, uint64_t))(v81 + 8))(v48, v80);
    v84 = v264;
    v83 = v265;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v265 + 48))(v82, 1, v264) == 1)
      goto LABEL_4;
    v93 = v267;
    (*(void (**)(char *, uint64_t, uint64_t))(v83 + 32))(v267, v82, v84);
    sub_1C9E1A2BC(&qword_1ED84ED38, MEMORY[0x1E0CB08B0]);
    v94 = v259;
    v95 = sub_1C9E45CB8();
    v96 = v242;
    v263 = *(char **)(v83 + 16);
    ((void (*)(char *, char *, uint64_t))v263)(v242, v93, v84);
    v97 = (void (*)(_QWORD, _QWORD))v260;
    sub_1C9E1A36C(v94, (uint64_t)v260, (uint64_t *)&unk_1ED84EE80);
    if ((v95 & 1) != 0)
    {
      v98 = v84;
      v99 = sub_1C9E45CAC();
      v100 = v273;
    }
    else
    {
      v99 = 0;
      v100 = v273;
      v98 = v84;
    }
    v101 = v253;
    v102 = v269;
    sub_1C9DF090C((uint64_t)v97, (uint64_t *)&unk_1ED84EE80);
    v260 = *(char ***)(v83 + 8);
    ((void (*)(char *, uint64_t))v260)(v96, v98);
    v103 = v268;
    v104 = v266;
    v105 = v272;
    if ((v99 & 1) == 0)
    {
      v106 = sub_1C9DE79D4();
      v107 = v103;
      (*(void (**)(char *, uint64_t, uint64_t))(v105 + 16))(v247, v106, v103);
      v108 = v240;
      v109 = v264;
      ((void (*)(char *, char *, uint64_t))v263)(v240, v93, v264);
      v110 = v243;
      sub_1C9E1A36C(v259, v243, (uint64_t *)&unk_1ED84EE80);
      v111 = sub_1C9E45BD4();
      v112 = sub_1C9E45E38();
      LODWORD(v270) = v112;
      if (os_log_type_enabled(v111, v112))
      {
        v113 = swift_slowAlloc();
        v265 = swift_slowAlloc();
        v274[0] = v265;
        *(_DWORD *)v113 = 136315394;
        sub_1C9E1A2BC((unint64_t *)&qword_1ED84F020, MEMORY[0x1E0CB08F0]);
        v114 = sub_1C9E46138();
        v276 = sub_1C9DEDEE0(v114, v115, v274);
        sub_1C9E45F1C();
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v260)(v108, v109);
        *(_WORD *)(v113 + 12) = 2080;
        v276 = 0;
        v277 = 0xE000000000000000;
        sub_1C9E46078();
        sub_1C9E45D48();
        v100 = v273;
        sub_1C9E46078();
        v276 = sub_1C9DEDEE0(v276, v277, v274);
        v104 = v266;
        v105 = v272;
        sub_1C9E45F1C();
        swift_bridgeObjectRelease();
        sub_1C9DF090C(v110, (uint64_t *)&unk_1ED84EE80);
        _os_log_impl(&dword_1C9A3B000, v111, (os_log_type_t)v270, "SportsServer: Returned date is out of requested bounds [%s] %s", (uint8_t *)v113, 0x16u);
        v116 = v265;
        swift_arrayDestroy();
        v117 = v116;
        v107 = v268;
        MEMORY[0x1CAA493AC](v117, -1, -1);
        v118 = v113;
        v102 = v269;
        MEMORY[0x1CAA493AC](v118, -1, -1);

        v103 = v107;
      }
      else
      {
        ((void (*)(char *, uint64_t))v260)(v108, v109);
        sub_1C9DF090C(v110, (uint64_t *)&unk_1ED84EE80);

      }
      (*(void (**)(char *, uint64_t))(v105 + 8))(v247, v107);
      v101 = v253;
    }
    v119 = MEMORY[0x1E0DEE9D8];
    v275 = MEMORY[0x1E0DEE9D8];
    v120 = *(_QWORD *)(v246 + 16);
    v121 = swift_bridgeObjectRetain();
    v270 = (char *)v120;
    if (v120)
    {
      v122 = *(_QWORD *)(v104 + 72);
      v265 = (*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
      v123 = v121 + v265;
      v124 = *(void (**)(char *, uint64_t, uint64_t))(v104 + 16);
      v125 = v244;
      v124(v102, v121 + v265, v100);
      while (1)
      {
        v126 = sub_1C9E45988();
        if (!v127)
          goto LABEL_17;
        v276 = v126;
        v277 = v127;
        v274[0] = 778268021;
        v274[1] = 0xE400000000000000;
        sub_1C9E1A3B0();
        sub_1C9E1A3F4();
        v100 = v273;
        v128 = sub_1C9E45C94();
        swift_bridgeObjectRelease();
        if ((v128 & 1) != 0)
        {
          v129 = *(void (**)(char *, char *, uint64_t))(v104 + 32);
          v129(v125, v102, v100);
          v130 = v275;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1C9E1756C(0, *(_QWORD *)(v130 + 16) + 1, 1);
            v130 = v275;
          }
          v132 = *(_QWORD *)(v130 + 16);
          v131 = *(_QWORD *)(v130 + 24);
          if (v132 >= v131 >> 1)
          {
            sub_1C9E1756C(v131 > 1, v132 + 1, 1);
            v130 = v275;
          }
          *(_QWORD *)(v130 + 16) = v132 + 1;
          v100 = v273;
          v129((char *)(v130 + v265 + v132 * v122), v125, v273);
          v275 = v130;
          v104 = v266;
          v102 = v269;
        }
        else
        {
LABEL_17:
          (*(void (**)(char *, uint64_t))(v104 + 8))(v102, v100);
        }
        v123 += v122;
        if (!--v120)
          break;
        v124(v102, v123, v100);
      }
      v119 = v275;
      v133 = v246;
      v103 = v268;
      v105 = v272;
      v101 = v253;
      v120 = (int64_t)v270;
    }
    else
    {
      v133 = v121;
    }
    swift_bridgeObjectRelease();
    v134 = *(char **)(v119 + 16);
    swift_release();
    v135 = MEMORY[0x1E0DEE9D8];
    v269 = v134;
    if (v120)
    {
      v274[0] = MEMORY[0x1E0DEE9D8];
      sub_1C9DF66B4(0, v120, 0);
      v135 = v274[0];
      v136 = v133 + ((*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80));
      v137 = *(_QWORD *)(v104 + 72);
      v138 = v120;
      do
      {
        v276 = 10;
        v277 = 0xE100000000000000;
        sub_1C9E459A0();
        sub_1C9E45D48();
        swift_bridgeObjectRelease();
        sub_1C9E45D48();
        sub_1C9E45994();
        sub_1C9E45D48();
        swift_bridgeObjectRelease();
        sub_1C9E45D48();
        sub_1C9E45988();
        sub_1C9E45D48();
        swift_bridgeObjectRelease();
        v140 = v276;
        v139 = v277;
        v274[0] = v135;
        v142 = *(_QWORD *)(v135 + 16);
        v141 = *(_QWORD *)(v135 + 24);
        if (v142 >= v141 >> 1)
        {
          sub_1C9DF66B4(v141 > 1, v142 + 1, 1);
          v135 = v274[0];
        }
        *(_QWORD *)(v135 + 16) = v142 + 1;
        v143 = v135 + 16 * v142;
        *(_QWORD *)(v143 + 32) = v140;
        *(_QWORD *)(v143 + 40) = v139;
        v136 += v137;
        --v138;
      }
      while (v138);
      v103 = v268;
      v105 = v272;
      v100 = v273;
      v101 = v253;
      v144 = v258;
      v120 = (int64_t)v270;
    }
    else
    {
      v144 = v258;
    }
    v145 = v250;
    v276 = v135;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF931B10);
    sub_1C9E1A438();
    v265 = sub_1C9E45CA0();
    v147 = v146;
    swift_bridgeObjectRelease();
    v148 = v271;
    if (v269)
    {
      if (v269 == (char *)v120)
        goto LABEL_38;
    }
    else
    {
      v153 = sub_1C9DE79D4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 16))(v145, v153, v103);
      v154 = v239;
      v155 = v264;
      ((void (*)(char *, char *, uint64_t))v263)(v239, v267, v264);
      swift_bridgeObjectRetain_n();
      v156 = v147;
      v157 = sub_1C9E45BD4();
      v158 = sub_1C9E45E38();
      v159 = v158;
      if (os_log_type_enabled(v157, v158))
      {
        v160 = swift_slowAlloc();
        v161 = swift_slowAlloc();
        v276 = v161;
        *(_DWORD *)v160 = 136315394;
        sub_1C9E1A2BC((unint64_t *)&qword_1ED84F020, MEMORY[0x1E0CB08F0]);
        LODWORD(v259) = v159;
        v162 = sub_1C9E46138();
        v274[0] = sub_1C9DEDEE0(v162, v163, &v276);
        v105 = v272;
        sub_1C9E45F1C();
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v260)(v154, v155);
        *(_WORD *)(v160 + 12) = 2080;
        swift_bridgeObjectRetain();
        v274[0] = sub_1C9DEDEE0(v265, v156, &v276);
        v101 = v253;
        sub_1C9E45F1C();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C9A3B000, v157, (os_log_type_t)v259, "SportsServer: No umcids found for game at %s with teams: %s", (uint8_t *)v160, 0x16u);
        swift_arrayDestroy();
        v164 = v161;
        v100 = v273;
        MEMORY[0x1CAA493AC](v164, -1, -1);
        v165 = v160;
        v148 = v271;
        MEMORY[0x1CAA493AC](v165, -1, -1);

      }
      else
      {
        ((void (*)(char *, uint64_t))v260)(v154, v155);

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v250, v268);
      v144 = v258;
      v147 = v156;
      if (v269 == v270)
      {
LABEL_38:
        swift_bridgeObjectRelease();
        v149 = v246;
        v150 = v261;
        v151 = v262;
        v152 = v103;
        if (!v270)
          return ((uint64_t (*)(char *, uint64_t))v260)(v267, v264);
        goto LABEL_48;
      }
    }
    v166 = sub_1C9DE79D4();
    v152 = v103;
    (*(void (**)(char *, uint64_t, uint64_t))(v105 + 16))(v248, v166, v103);
    v167 = v241;
    v168 = v264;
    ((void (*)(char *, char *, uint64_t))v263)(v241, v267, v264);
    swift_bridgeObjectRetain();
    v169 = v147;
    v170 = sub_1C9E45BD4();
    v171 = sub_1C9E45E2C();
    v172 = v171;
    if (os_log_type_enabled(v170, v171))
    {
      v173 = swift_slowAlloc();
      v174 = swift_slowAlloc();
      v276 = v174;
      *(_DWORD *)v173 = 136315394;
      sub_1C9E1A2BC((unint64_t *)&qword_1ED84F020, MEMORY[0x1E0CB08F0]);
      LODWORD(v269) = v172;
      v175 = sub_1C9E46138();
      v274[0] = sub_1C9DEDEE0(v175, v176, &v276);
      sub_1C9E45F1C();
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v260)(v167, v168);
      *(_WORD *)(v173 + 12) = 2080;
      swift_bridgeObjectRetain();
      v274[0] = sub_1C9DEDEE0(v265, v169, &v276);
      v101 = v253;
      sub_1C9E45F1C();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C9A3B000, v170, (os_log_type_t)v269, "SportsServer: Missing umcid found for game at %s with teams: %s", (uint8_t *)v173, 0x16u);
      swift_arrayDestroy();
      v177 = v174;
      v100 = v273;
      MEMORY[0x1CAA493AC](v177, -1, -1);
      v178 = v173;
      v148 = v271;
      MEMORY[0x1CAA493AC](v178, -1, -1);

      (*(void (**)(char *, uint64_t))(v272 + 8))(v248, v152);
    }
    else
    {
      ((void (*)(char *, uint64_t))v260)(v167, v168);

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v105 + 8))(v248, v152);
    }
    v149 = v246;
    v150 = v261;
    v151 = v262;
    v144 = v258;
    if (!v270)
      return ((uint64_t (*)(char *, uint64_t))v260)(v267, v264);
LABEL_48:
    v179 = v149 + ((*(unsigned __int8 *)(v266 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v266 + 80));
    v259 = *(_QWORD *)(v266 + 72);
    v269 = *(char **)(v266 + 16);
    swift_bridgeObjectRetain();
    *(_QWORD *)&v180 = 136315650;
    v245 = v180;
    v244 = (char *)(MEMORY[0x1E0DEE9B8] + 8);
    *(_QWORD *)&v180 = 136315906;
    v243 = v180;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t))v269)(v151, v179, v100);
      v265 = sub_1C9E45994();
      if (v182)
      {
        v183 = v182;
        v184 = sub_1C9E45988();
        if (v185)
        {
          v186 = v184;
          v187 = v185;
          v188 = &v257[*(int *)(v150 + 48)];
          v189 = (uint64_t *)&v257[*(int *)(v150 + 64)];
          v190 = v264;
          ((void (*)(void))v263)();
          *(_QWORD *)v188 = v265;
          *((_QWORD *)v188 + 1) = v183;
          v250 = v186;
          *v189 = v186;
          v189[1] = v187;
          v191 = v252;
          v192 = *v252;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *v191 = v192;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v192 = sub_1C9E160C0(0, *(_QWORD *)(v192 + 16) + 1, 1, v192);
            *v252 = v192;
          }
          v194 = v251;
          v195 = v255;
          v196 = v249;
          v198 = *(_QWORD *)(v192 + 16);
          v197 = *(_QWORD *)(v192 + 24);
          v199 = (uint64_t)v257;
          if (v198 >= v197 >> 1)
          {
            v192 = sub_1C9E160C0(v197 > 1, v198 + 1, 1, v192);
            v199 = (uint64_t)v257;
            *v252 = v192;
          }
          *(_QWORD *)(v192 + 16) = v198 + 1;
          sub_1C9E1A2FC(v199, v192+ ((*(unsigned __int8 *)(v194 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v194 + 80))+ *(_QWORD *)(v194 + 72) * v198, &qword_1ED84F010);
          v200 = sub_1C9DE79D4();
          v201 = v268;
          (*(void (**)(char *, uint64_t, uint64_t))(v272 + 16))(v195, v200, v268);
          ((void (*)(char *, char *, uint64_t))v263)(v196, v267, v190);
          v202 = v256;
          v100 = v273;
          ((void (*)(char *, char *, uint64_t))v269)(v256, v262, v273);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v203 = v201;
          v204 = sub_1C9E45BD4();
          v205 = sub_1C9E45E44();
          v206 = v205;
          if (os_log_type_enabled(v204, v205))
          {
            v207 = swift_slowAlloc();
            LODWORD(v248) = v206;
            v208 = v207;
            v247 = (char *)swift_slowAlloc();
            v276 = (uint64_t)v247;
            *(_DWORD *)v208 = v243;
            sub_1C9E1A2BC((unint64_t *)&qword_1ED84F020, MEMORY[0x1E0CB08F0]);
            v209 = sub_1C9E46138();
            *(_QWORD *)(v208 + 4) = sub_1C9DEDEE0(v209, v210, &v276);
            swift_bridgeObjectRelease();
            ((void (*)(char *, uint64_t))v260)(v196, v190);
            *(_WORD *)(v208 + 12) = 2080;
            v211 = sub_1C9E459A0();
            if (v212)
            {
              v213 = v212;
            }
            else
            {
              v211 = 7104878;
              v213 = 0xE300000000000000;
            }
            *(_QWORD *)(v208 + 14) = sub_1C9DEDEE0(v211, v213, &v276);
            swift_bridgeObjectRelease();
            v214 = *(void (**)(char *, uint64_t))(v266 + 8);
            v214(v256, v100);
            *(_WORD *)(v208 + 22) = 2080;
            swift_bridgeObjectRetain();
            *(_QWORD *)(v208 + 24) = sub_1C9DEDEE0(v265, v183, &v276);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v208 + 32) = 2080;
            swift_bridgeObjectRetain();
            *(_QWORD *)(v208 + 34) = sub_1C9DEDEE0(v250, v187, &v276);
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1C9A3B000, v204, (os_log_type_t)v248, "SportsServer: Game at %s with team %s : %s : %s", (uint8_t *)v208, 0x2Au);
            v215 = v247;
            swift_arrayDestroy();
            MEMORY[0x1CAA493AC](v215, -1, -1);
            MEMORY[0x1CAA493AC](v208, -1, -1);

            v152 = v268;
            (*(void (**)(char *, uint64_t))(v272 + 8))(v255, v268);
            v151 = v262;
            v214(v262, v100);
          }
          else
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();

            v238 = *(void (**)(char *, uint64_t))(v266 + 8);
            v238(v202, v100);
            ((void (*)(char *, uint64_t))v260)(v196, v190);
            (*(void (**)(char *, uint64_t))(v272 + 8))(v255, v203);
            v151 = v262;
            v238(v262, v100);
            v152 = v203;
          }
          v150 = v261;
          v148 = v271;
          v101 = v253;
          v144 = v258;
          goto LABEL_50;
        }
        swift_bridgeObjectRelease();
        v151 = v262;
        v152 = v268;
      }
      v216 = sub_1C9DE79D4();
      (*(void (**)(char *, uint64_t, uint64_t))(v272 + 16))(v101, v216, v152);
      v217 = v264;
      ((void (*)(char *, char *, uint64_t))v263)(v144, v267, v264);
      v218 = v101;
      v219 = v254;
      v220 = v269;
      ((void (*)(char *, char *, uint64_t))v269)(v254, v151, v100);
      ((void (*)(char *, char *, uint64_t))v220)(v148, v151, v100);
      v221 = sub_1C9E45BD4();
      v222 = v144;
      v223 = sub_1C9E45E2C();
      if (os_log_type_enabled(v221, v223))
      {
        v224 = swift_slowAlloc();
        v265 = swift_slowAlloc();
        v276 = v265;
        *(_DWORD *)v224 = v245;
        sub_1C9E1A2BC((unint64_t *)&qword_1ED84F020, MEMORY[0x1E0CB08F0]);
        v225 = sub_1C9E46138();
        *(_QWORD *)(v224 + 4) = sub_1C9DEDEE0(v225, v226, &v276);
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v260)(v222, v217);
        *(_WORD *)(v224 + 12) = 2080;
        sub_1C9E45994();
        v228 = v227;
        swift_bridgeObjectRelease();
        if (v228)
          v229 = 0;
        else
          v229 = 6580593;
        if (v228)
          v230 = 0xE000000000000000;
        else
          v230 = 0xE300000000000000;
        *(_QWORD *)(v224 + 14) = sub_1C9DEDEE0(v229, v230, &v276);
        swift_bridgeObjectRelease();
        v231 = *(void (**)(char *, uint64_t))(v266 + 8);
        v231(v219, v273);
        *(_WORD *)(v224 + 22) = 2080;
        sub_1C9E45988();
        v233 = v232;
        swift_bridgeObjectRelease();
        if (v233)
          v234 = 0;
        else
          v234 = 0x6469636D75;
        if (v233)
          v235 = 0xE000000000000000;
        else
          v235 = 0xE500000000000000;
        *(_QWORD *)(v224 + 24) = sub_1C9DEDEE0(v234, v235, &v276);
        swift_bridgeObjectRelease();
        v231(v271, v273);
        _os_log_impl(&dword_1C9A3B000, v221, v223, "SportsServer: Game at %s missing identifier %s %s", (uint8_t *)v224, 0x20u);
        v236 = v265;
        swift_arrayDestroy();
        MEMORY[0x1CAA493AC](v236, -1, -1);
        v237 = v224;
        v148 = v271;
        MEMORY[0x1CAA493AC](v237, -1, -1);

        v152 = v268;
        (*(void (**)(char *, uint64_t))(v272 + 8))(v218, v268);
        v231(v151, v273);
        v100 = v273;
        v150 = v261;
        v101 = v218;
        v144 = v258;
      }
      else
      {

        v181 = *(void (**)(char *, uint64_t))(v266 + 8);
        v181(v271, v100);
        v181(v219, v100);
        ((void (*)(char *, uint64_t))v260)(v222, v217);
        v152 = v268;
        (*(void (**)(char *, uint64_t))(v272 + 8))(v218, v268);
        v181(v151, v100);
        v148 = v271;
        v150 = v261;
        v101 = v218;
        v144 = v222;
      }
LABEL_50:
      v179 += v259;
      if (!--v270)
      {
        swift_bridgeObjectRelease();
        return ((uint64_t (*)(_QWORD, _QWORD))v260)(v267, v264);
      }
    }
  }
  sub_1C9DF090C((uint64_t)v48, (uint64_t *)&unk_1EF933430);
  v82 = (uint64_t)v270;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v265 + 56))(v270, 1, 1, v264);
LABEL_4:
  sub_1C9DF090C(v82, &qword_1ED84F028);
  v85 = sub_1C9DE79D4();
  v86 = v272;
  v87 = v263;
  v88 = v268;
  (*(void (**)(char *, uint64_t, uint64_t))(v272 + 16))(v263, v85, v268);
  v89 = sub_1C9E45BD4();
  v90 = sub_1C9E45E2C();
  if (os_log_type_enabled(v89, v90))
  {
    v91 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v91 = 0;
    _os_log_impl(&dword_1C9A3B000, v89, v90, "SportsServer: no date", v91, 2u);
    MEMORY[0x1CAA493AC](v91, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v87, v88);
}

id SportsServer.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SportsServer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1C9E160C0(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF933420);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F010) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = sub_1C9E46084();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F010) - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1C9E1A484(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

void sub_1C9E162D0(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[2];

  v2 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F010) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)sub_1C9E17948(v3);
  v4 = v3[2];
  v5[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_1C9E16354(v5);
  *a1 = v3;
}

void sub_1C9E16354(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  char v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F010);
  v129 = *(_QWORD *)(v4 - 8);
  v130 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v126 = (uint64_t)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v136 = (uint64_t)&v121 - v9;
  MEMORY[0x1E0C80A78](v10, v11);
  v133 = (uint64_t)&v121 - v12;
  MEMORY[0x1E0C80A78](v13, v14);
  v132 = (uint64_t)&v121 - v15;
  v16 = a1[1];
  v17 = sub_1C9E4612C();
  if (v17 >= v16)
  {
    if (v16 < 0)
      goto LABEL_140;
    if (v16)
      sub_1C9E16D28(0, v16, 1, a1);
    return;
  }
  if (v16 >= 0)
    v18 = v16;
  else
    v18 = v16 + 1;
  if (v16 < -1)
    goto LABEL_148;
  v123 = v17;
  if (v16 < 2)
  {
    v22 = (char *)MEMORY[0x1E0DEE9D8];
    v128 = MEMORY[0x1E0DEE9D8]
         + ((*(unsigned __int8 *)(v129 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80));
    v122 = MEMORY[0x1E0DEE9D8];
    if (v16 != 1)
    {
      v24 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_106:
      if (v24 >= 2)
      {
        v114 = *a1;
        do
        {
          v115 = v24 - 2;
          if (v24 < 2)
            goto LABEL_135;
          if (!v114)
            goto LABEL_147;
          v116 = v22;
          v117 = *(_QWORD *)&v22[16 * v115 + 32];
          v118 = *(_QWORD *)&v22[16 * v24 + 24];
          sub_1C9E16F60(v114 + *(_QWORD *)(v129 + 72) * v117, v114 + *(_QWORD *)(v129 + 72) * *(_QWORD *)&v22[16 * v24 + 16], v114 + *(_QWORD *)(v129 + 72) * v118, v128);
          if (v2)
            break;
          if (v118 < v117)
            goto LABEL_136;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v116 = sub_1C9E11FFC((uint64_t)v22);
          if (v115 >= *((_QWORD *)v116 + 2))
            goto LABEL_137;
          v119 = &v116[16 * v115 + 32];
          *(_QWORD *)v119 = v117;
          *((_QWORD *)v119 + 1) = v118;
          v120 = *((_QWORD *)v116 + 2);
          if (v24 > v120)
            goto LABEL_138;
          memmove(&v116[16 * v24 + 16], &v116[16 * v24 + 32], 16 * (v120 - v24));
          *((_QWORD *)v116 + 2) = v120 - 1;
          v24 = v120 - 1;
          v22 = v116;
        }
        while (v120 > 2);
      }
LABEL_117:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v122 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v19 = v18 >> 1;
    v20 = sub_1C9E45DA8();
    *(_QWORD *)(v20 + 16) = v19;
    v21 = *(unsigned __int8 *)(v129 + 80);
    v122 = v20;
    v128 = v20 + ((v21 + 32) & ~v21);
  }
  v23 = 0;
  v22 = (char *)MEMORY[0x1E0DEE9D8];
  v135 = a1;
  while (1)
  {
    v25 = v23 + 1;
    v127 = v23;
    if (v23 + 1 >= v16)
    {
      v41 = v23 + 1;
      goto LABEL_58;
    }
    v124 = v2;
    v26 = *a1;
    v27 = *(_QWORD *)(v129 + 72);
    v28 = v132;
    sub_1C9E1A36C(*a1 + v27 * v25, v132, &qword_1ED84F010);
    v131 = v26;
    v134 = v16;
    v29 = v133;
    sub_1C9E1A36C(v26 + v27 * v23, v133, &qword_1ED84F010);
    v30 = sub_1C9E45790();
    v31 = v29;
    v32 = v134;
    sub_1C9DF090C(v31, &qword_1ED84F010);
    sub_1C9DF090C(v28, &qword_1ED84F010);
    v137 = v27;
    if (v23 + 2 >= v32)
    {
      v36 = v23 + 2;
      if ((v30 & 1) == 0)
        goto LABEL_37;
    }
    else
    {
      v33 = v27;
      v34 = v27 * v25;
      v35 = v131;
      v36 = v23 + 2;
      v37 = v33 * (v23 + 2);
      do
      {
        v38 = v132;
        sub_1C9E1A36C(v35 + v37, v132, &qword_1ED84F010);
        v39 = v133;
        sub_1C9E1A36C(v35 + v34, v133, &qword_1ED84F010);
        v40 = sub_1C9E45790();
        sub_1C9DF090C(v39, &qword_1ED84F010);
        sub_1C9DF090C(v38, &qword_1ED84F010);
        if (((v30 ^ v40) & 1) != 0)
        {
          v32 = v134;
          a1 = v135;
          v23 = v127;
          if ((v30 & 1) == 0)
            goto LABEL_37;
          goto LABEL_24;
        }
        v35 += v137;
        ++v36;
      }
      while (v134 != v36);
      v32 = v134;
      a1 = v135;
      v36 = v134;
      v23 = v127;
      if ((v30 & 1) == 0)
      {
LABEL_37:
        v41 = v36;
        break;
      }
    }
LABEL_24:
    v42 = v137;
    if (v36 < v23)
      goto LABEL_141;
    v41 = v36;
    if (v23 >= v36)
      break;
    v121 = v22;
    v43 = 0;
    v44 = v137 * (v36 - 1);
    v45 = v36 * v137;
    v46 = v23 * v137;
    v47 = v131;
    do
    {
      if (v23 != v41 + v43 - 1)
      {
        if (!v47)
          goto LABEL_146;
        sub_1C9E1A2FC(v47 + v46, v126, &qword_1ED84F010);
        if (v46 < v44 || v47 + v46 >= (unint64_t)(v47 + v45))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v46 != v44)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        sub_1C9E1A2FC(v126, v47 + v44, &qword_1ED84F010);
        a1 = v135;
        v41 = v36;
        v42 = v137;
      }
      ++v23;
      --v43;
      v44 -= v42;
      v45 -= v42;
      v46 += v42;
    }
    while (v23 < v41 + v43);
    v22 = v121;
    v2 = v124;
    v23 = v127;
    v32 = v134;
    if (v41 < v134)
      goto LABEL_41;
LABEL_58:
    if (v41 < v23)
      goto LABEL_134;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v134 = v41;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v22 = sub_1C9E11F04(0, *((_QWORD *)v22 + 2) + 1, 1, v22);
    v63 = *((_QWORD *)v22 + 2);
    v62 = *((_QWORD *)v22 + 3);
    v24 = v63 + 1;
    if (v63 >= v62 >> 1)
      v22 = sub_1C9E11F04((char *)(v62 > 1), v63 + 1, 1, v22);
    *((_QWORD *)v22 + 2) = v24;
    v64 = v22 + 32;
    v65 = &v22[16 * v63 + 32];
    v66 = v134;
    *(_QWORD *)v65 = v23;
    *((_QWORD *)v65 + 1) = v66;
    if (v63)
    {
      while (1)
      {
        v67 = v24 - 1;
        if (v24 >= 4)
        {
          v72 = &v64[16 * v24];
          v73 = *((_QWORD *)v72 - 8);
          v74 = *((_QWORD *)v72 - 7);
          v78 = __OFSUB__(v74, v73);
          v75 = v74 - v73;
          if (v78)
            goto LABEL_123;
          v77 = *((_QWORD *)v72 - 6);
          v76 = *((_QWORD *)v72 - 5);
          v78 = __OFSUB__(v76, v77);
          v70 = v76 - v77;
          v71 = v78;
          if (v78)
            goto LABEL_124;
          v79 = v24 - 2;
          v80 = &v64[16 * v24 - 32];
          v82 = *(_QWORD *)v80;
          v81 = *((_QWORD *)v80 + 1);
          v78 = __OFSUB__(v81, v82);
          v83 = v81 - v82;
          if (v78)
            goto LABEL_126;
          v78 = __OFADD__(v70, v83);
          v84 = v70 + v83;
          if (v78)
            goto LABEL_129;
          if (v84 >= v75)
          {
            v102 = &v64[16 * v67];
            v104 = *(_QWORD *)v102;
            v103 = *((_QWORD *)v102 + 1);
            v78 = __OFSUB__(v103, v104);
            v105 = v103 - v104;
            if (v78)
              goto LABEL_133;
            v95 = v70 < v105;
            goto LABEL_95;
          }
        }
        else
        {
          if (v24 != 3)
          {
            v96 = *((_QWORD *)v22 + 4);
            v97 = *((_QWORD *)v22 + 5);
            v78 = __OFSUB__(v97, v96);
            v89 = v97 - v96;
            v90 = v78;
            goto LABEL_89;
          }
          v69 = *((_QWORD *)v22 + 4);
          v68 = *((_QWORD *)v22 + 5);
          v78 = __OFSUB__(v68, v69);
          v70 = v68 - v69;
          v71 = v78;
        }
        if ((v71 & 1) != 0)
          goto LABEL_125;
        v79 = v24 - 2;
        v85 = &v64[16 * v24 - 32];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v88 = __OFSUB__(v86, v87);
        v89 = v86 - v87;
        v90 = v88;
        if (v88)
          goto LABEL_128;
        v91 = &v64[16 * v67];
        v93 = *(_QWORD *)v91;
        v92 = *((_QWORD *)v91 + 1);
        v78 = __OFSUB__(v92, v93);
        v94 = v92 - v93;
        if (v78)
          goto LABEL_131;
        if (__OFADD__(v89, v94))
          goto LABEL_132;
        if (v89 + v94 >= v70)
        {
          v95 = v70 < v94;
LABEL_95:
          if (v95)
            v67 = v79;
          goto LABEL_97;
        }
LABEL_89:
        if ((v90 & 1) != 0)
          goto LABEL_127;
        v98 = &v64[16 * v67];
        v100 = *(_QWORD *)v98;
        v99 = *((_QWORD *)v98 + 1);
        v78 = __OFSUB__(v99, v100);
        v101 = v99 - v100;
        if (v78)
          goto LABEL_130;
        if (v101 < v89)
          goto LABEL_14;
LABEL_97:
        v106 = v67 - 1;
        if (v67 - 1 >= v24)
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
        v107 = *a1;
        if (!*a1)
          goto LABEL_145;
        v108 = v22;
        v109 = &v64[16 * v106];
        v110 = *(_QWORD *)v109;
        v111 = &v64[16 * v67];
        v112 = *((_QWORD *)v111 + 1);
        sub_1C9E16F60(v107 + *(_QWORD *)(v129 + 72) * *(_QWORD *)v109, v107 + *(_QWORD *)(v129 + 72) * *(_QWORD *)v111, v107 + *(_QWORD *)(v129 + 72) * v112, v128);
        if (v2)
          goto LABEL_117;
        if (v112 < v110)
          goto LABEL_120;
        if (v67 > *((_QWORD *)v108 + 2))
          goto LABEL_121;
        *(_QWORD *)v109 = v110;
        *(_QWORD *)&v64[16 * v106 + 8] = v112;
        v113 = *((_QWORD *)v108 + 2);
        if (v67 >= v113)
          goto LABEL_122;
        v22 = v108;
        v24 = v113 - 1;
        memmove(&v64[16 * v67], v111 + 16, 16 * (v113 - 1 - v67));
        *((_QWORD *)v108 + 2) = v113 - 1;
        a1 = v135;
        if (v113 <= 2)
          goto LABEL_14;
      }
    }
    v24 = 1;
LABEL_14:
    v16 = a1[1];
    v23 = v134;
    if (v134 >= v16)
      goto LABEL_106;
  }
  v2 = v124;
  if (v41 >= v32)
    goto LABEL_58;
LABEL_41:
  if (__OFSUB__(v41, v23))
    goto LABEL_139;
  if (v41 - v23 >= v123)
    goto LABEL_58;
  if (__OFADD__(v23, v123))
    goto LABEL_142;
  if (v23 + v123 >= v32)
    v48 = v32;
  else
    v48 = v23 + v123;
  if (v48 >= v23)
  {
    if (v41 != v48)
    {
      v121 = v22;
      v124 = v2;
      v125 = v48;
      v49 = *(_QWORD *)(v129 + 72);
      v137 = v49 * (v41 - 1);
      v131 = v49;
      v50 = v41 * v49;
      do
      {
        v52 = 0;
        v134 = v41;
        while (1)
        {
          v53 = *a1;
          v54 = v50;
          v55 = v50 + v52 + *a1;
          v56 = a1;
          v57 = v132;
          sub_1C9E1A36C(v55, v132, &qword_1ED84F010);
          v58 = v133;
          sub_1C9E1A36C(v137 + v52 + v53, v133, &qword_1ED84F010);
          LOBYTE(v53) = sub_1C9E45790();
          sub_1C9DF090C(v58, &qword_1ED84F010);
          sub_1C9DF090C(v57, &qword_1ED84F010);
          if ((v53 & 1) == 0)
            break;
          v59 = *v56;
          if (!*v56)
            goto LABEL_144;
          v50 = v54;
          v60 = v59 + v137 + v52;
          sub_1C9E1A2FC(v59 + v54 + v52, v136, &qword_1ED84F010);
          swift_arrayInitWithTakeFrontToBack();
          sub_1C9E1A2FC(v136, v60, &qword_1ED84F010);
          v52 -= v131;
          ++v23;
          v51 = v134;
          a1 = v135;
          if (v134 == v23)
            goto LABEL_51;
        }
        v51 = v134;
        a1 = v56;
        v50 = v54;
LABEL_51:
        v41 = v51 + 1;
        v137 += v131;
        v50 += v131;
        v23 = v127;
      }
      while (v41 != v125);
      v41 = v125;
      v2 = v124;
      v22 = v121;
    }
    goto LABEL_58;
  }
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  sub_1C9E46084();
  __break(1u);
}

void sub_1C9E16D28(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v27 = a1;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F010);
  MEMORY[0x1E0C80A78](v28, v7);
  v32 = (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v29 = (uint64_t)&v25 - v11;
  MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v25 - v15;
  v31 = a3;
  v26 = a2;
  if (a3 != a2)
  {
    v17 = *(_QWORD *)(v14 + 72);
    v34 = v17 * (v31 - 1);
    v30 = v17;
    v33 = v17 * v31;
LABEL_5:
    v18 = 0;
    v19 = v27;
    while (1)
    {
      v20 = *a4;
      sub_1C9E1A36C(v33 + v18 + *a4, (uint64_t)v16, &qword_1ED84F010);
      v21 = v29;
      sub_1C9E1A36C(v34 + v18 + v20, v29, &qword_1ED84F010);
      LOBYTE(v20) = sub_1C9E45790();
      sub_1C9DF090C(v21, &qword_1ED84F010);
      sub_1C9DF090C((uint64_t)v16, &qword_1ED84F010);
      if ((v20 & 1) == 0)
      {
LABEL_4:
        v34 += v30;
        v33 += v30;
        if (++v31 == v26)
          return;
        goto LABEL_5;
      }
      v22 = *a4;
      if (!*a4)
        break;
      v23 = a4;
      v24 = v22 + v34 + v18;
      sub_1C9E1A2FC(v22 + v33 + v18, v32, &qword_1ED84F010);
      swift_arrayInitWithTakeFrontToBack();
      sub_1C9E1A2FC(v32, v24, &qword_1ED84F010);
      v18 -= v30;
      ++v19;
      a4 = v23;
      if (v31 == v19)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t sub_1C9E16F60(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t result;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F010);
  MEMORY[0x1E0C80A78](v45, v8);
  v46 = (uint64_t)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v42 - v12;
  v15 = *(_QWORD *)(v14 + 72);
  if (!v15)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v15 == -1)
    goto LABEL_62;
  v16 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v15 == -1)
    goto LABEL_63;
  v17 = (uint64_t)(a2 - a1) / v15;
  v49 = a1;
  v48 = a4;
  v18 = v16 / v15;
  if (v17 >= v16 / v15)
  {
    if ((v18 & 0x8000000000000000) == 0)
    {
      v20 = v18 * v15;
      if (a4 < a2 || a2 + v20 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v27 = a4 + v20;
      v47 = a4 + v20;
      v49 = a2;
      if (v20 >= 1 && a1 < a2)
      {
        v29 = -v15;
        v43 = a4;
        v44 = a1;
        do
        {
          v30 = a3 + v29;
          sub_1C9E1A36C(v27 + v29, (uint64_t)v13, &qword_1ED84F010);
          v31 = a2 + v29;
          v32 = a3;
          v33 = (uint64_t)v13;
          v34 = v46;
          sub_1C9E1A36C(a2 + v29, v46, &qword_1ED84F010);
          v35 = sub_1C9E45790();
          v36 = v34;
          v13 = (char *)v33;
          sub_1C9DF090C(v36, &qword_1ED84F010);
          sub_1C9DF090C(v33, &qword_1ED84F010);
          if ((v35 & 1) != 0)
          {
            if (v32 < a2 || v30 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              v39 = v43;
              v38 = v44;
            }
            else
            {
              v37 = v32 == a2;
              v39 = v43;
              v38 = v44;
              if (!v37)
                swift_arrayInitWithTakeBackToFront();
            }
            v49 += v29;
          }
          else
          {
            v40 = v47;
            v47 += v29;
            if (v32 < v40 || v30 >= v40)
            {
              swift_arrayInitWithTakeFrontToBack();
              v31 = a2;
              v39 = v43;
              v38 = v44;
            }
            else
            {
              v37 = v32 == v40;
              v39 = v43;
              v38 = v44;
              if (!v37)
                swift_arrayInitWithTakeBackToFront();
              v31 = a2;
            }
          }
          v27 = v47;
          if (v47 <= v39)
            break;
          a2 = v31;
          a3 = v30;
        }
        while (v31 > v38);
      }
      goto LABEL_60;
    }
  }
  else if ((v17 & 0x8000000000000000) == 0)
  {
    v19 = v17 * v15;
    if (a4 < a1 || a1 + v19 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v44 = a4 + v19;
    v47 = a4 + v19;
    if (v19 >= 1 && a2 < a3)
    {
      v22 = v46;
      do
      {
        sub_1C9E1A36C(a2, (uint64_t)v13, &qword_1ED84F010);
        sub_1C9E1A36C(a4, v22, &qword_1ED84F010);
        v23 = sub_1C9E45790();
        sub_1C9DF090C(v22, &qword_1ED84F010);
        sub_1C9DF090C((uint64_t)v13, &qword_1ED84F010);
        v24 = v49;
        if ((v23 & 1) != 0)
        {
          v25 = a2 + v15;
          if (v49 < a2 || v49 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v49 == a2)
          {
            v24 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          v26 = v48 + v15;
          if (v49 < v48 || v49 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v49 != v48)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v48 = v26;
          v25 = a2;
        }
        v49 = v24 + v15;
        a4 = v48;
        if (v48 >= v44)
          break;
        a2 = v25;
      }
      while (v25 < a3);
    }
LABEL_60:
    sub_1C9E17404(&v49, &v48, (uint64_t *)&v47);
    return 1;
  }
LABEL_64:
  result = sub_1C9E460D8();
  __break(1u);
  return result;
}

uint64_t sub_1C9E17404(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F010);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = sub_1C9E460D8();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
    return swift_arrayInitWithTakeFrontToBack();
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

uint64_t sub_1C9E17514(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1C9E17588(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_1EF933410, &qword_1ED84F018);
  *v3 = result;
  return result;
}

uint64_t sub_1C9E17540(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1C9E17588(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_1EF933420, &qword_1ED84F010);
  *v3 = result;
  return result;
}

uint64_t sub_1C9E1756C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1C9E17768(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1C9E17588(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = sub_1C9E460D8();
  __break(1u);
  return result;
}

uint64_t sub_1C9E17768(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EF933458);
  v10 = *(_QWORD *)(sub_1C9E459AC() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(sub_1C9E459AC() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = sub_1C9E460D8();
  __break(1u);
  return result;
}

uint64_t sub_1C9E17948(_QWORD *a1)
{
  return sub_1C9E17588(0, a1[2], 0, a1, (uint64_t *)&unk_1EF933420, &qword_1ED84F010);
}

uint64_t sub_1C9E1797C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = sub_1C9E45BF8();
  v0[30] = v1;
  v0[31] = *(_QWORD *)(v1 - 8);
  v0[32] = swift_task_alloc();
  v0[33] = swift_task_alloc();
  v0[34] = swift_task_alloc();
  v0[35] = swift_task_alloc();
  v0[36] = swift_task_alloc();
  v0[37] = swift_task_alloc();
  v0[38] = swift_task_alloc();
  v0[39] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1C9E17A30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  id v13;
  id v14;
  unsigned int v15;
  uint64_t *v16;
  NSObject *v17;
  int v18;
  uint8_t *v19;
  const char *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  uint64_t v31;
  id v32;

  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  v4 = objc_msgSend((id)objc_opt_self(), sel_isOptOutAvailable);
  v5 = sub_1C9DE79D4();
  *(_QWORD *)(v0 + 320) = v5;
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 328) = v6;
  v6(v1, v5, v2);
  v7 = sub_1C9E45BD4();
  v8 = sub_1C9E45E20();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v9 = 67109120;
    *(_DWORD *)(v0 + 368) = v4;
    sub_1C9E45F1C();
    _os_log_impl(&dword_1C9A3B000, v7, v8, "SportsServer: Check isOptOutAvailable %{BOOL}d", v9, 8u);
    MEMORY[0x1CAA493AC](v9, -1, -1);
  }

  v10 = *(_QWORD *)(v0 + 312);
  v11 = *(_QWORD *)(v0 + 240);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 248) + 8);
  *(_QWORD *)(v0 + 336) = v12;
  v12(v10, v11);
  if (v4)
  {
    v13 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
    v14 = objc_msgSend(v13, sel_activeAccount);

    if (v14)
    {
      v15 = objc_msgSend(v14, sel_isAuthenticated);

    }
    else
    {
      v15 = 0;
    }
    v6(*(_QWORD *)(v0 + 304), v5, *(_QWORD *)(v0 + 240));
    v21 = sub_1C9E45BD4();
    v22 = sub_1C9E45E20();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v23 = 67109120;
      *(_DWORD *)(v0 + 376) = v15;
      sub_1C9E45F1C();
      _os_log_impl(&dword_1C9A3B000, v21, v22, "SportsServer: Check isAuthenticated %{BOOL}d", v23, 8u);
      MEMORY[0x1CAA493AC](v23, -1, -1);
    }
    v24 = *(_QWORD *)(v0 + 304);
    v25 = *(_QWORD *)(v0 + 240);

    v12(v24, v25);
    if (v15)
    {
      v26 = (void *)objc_opt_self();
      *(_QWORD *)(v0 + 344) = v26;
      *(_QWORD *)(v0 + 56) = v0 + 380;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_1C9E17E98;
      v27 = swift_continuation_init();
      *(_QWORD *)(v0 + 184) = MEMORY[0x1E0C809B0];
      v28 = (_QWORD *)(v0 + 184);
      v28[1] = 0x40000000;
      v28[2] = sub_1C9E1466C;
      v28[3] = &block_descriptor_28;
      v28[4] = v27;
      objc_msgSend(v26, sel_isOnboarded_, v28);
      return swift_continuation_await();
    }
    v16 = (uint64_t *)(v0 + 264);
    v6(*(_QWORD *)(v0 + 264), v5, *(_QWORD *)(v0 + 240));
    v17 = sub_1C9E45BD4();
    v18 = sub_1C9E45E44();
    if (os_log_type_enabled(v17, (os_log_type_t)v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      v20 = "SportsServer: Returning no teams - Not authenticated";
      goto LABEL_15;
    }
  }
  else
  {
    v16 = (uint64_t *)(v0 + 256);
    v6(*(_QWORD *)(v0 + 256), v5, *(_QWORD *)(v0 + 240));
    v17 = sub_1C9E45BD4();
    v18 = sub_1C9E45E44();
    if (os_log_type_enabled(v17, (os_log_type_t)v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      v20 = "SportsServer: Returning no teams - Sports not available";
LABEL_15:
      _os_log_impl(&dword_1C9A3B000, v17, (os_log_type_t)v18, v20, v19, 2u);
      MEMORY[0x1CAA493AC](v19, -1, -1);
    }
  }
  v30 = *v16;
  v31 = *(_QWORD *)(v0 + 240);

  v12(v30, v31);
  v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CF90F8]), sel_init);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v32);
}

uint64_t sub_1C9E17E98()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 352) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_1C9E17EF8()
{
  uint64_t v0;
  int v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_QWORD, uint64_t, uint64_t);
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void *v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  id v27;

  v1 = *(unsigned __int8 *)(v0 + 380);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 328))(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 240));
  v2 = sub_1C9E45BD4();
  v3 = sub_1C9E45E20();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v4 = 67109120;
    *(_DWORD *)(v0 + 372) = v1;
    sub_1C9E45F1C();
    _os_log_impl(&dword_1C9A3B000, v2, v3, "SportsServer: Check isOnboarded %{BOOL}d", v4, 8u);
    MEMORY[0x1CAA493AC](v4, -1, -1);
  }
  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
  v6 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 240);

  v5(v6, v7);
  v8 = *(_QWORD *)(v0 + 320);
  v9 = *(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 328);
  v10 = *(_QWORD *)(v0 + 240);
  if (v1)
  {
    v9(*(_QWORD *)(v0 + 288), v8, v10);
    v11 = sub_1C9E45BD4();
    v12 = sub_1C9E45E20();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1C9A3B000, v11, v12, "SportsServer: Request start", v13, 2u);
      MEMORY[0x1CAA493AC](v13, -1, -1);
    }
    v15 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
    v14 = *(void **)(v0 + 344);
    v16 = *(_QWORD *)(v0 + 288);
    v17 = *(_QWORD *)(v0 + 240);

    v15(v16, v17);
    *(_QWORD *)(v0 + 120) = v0 + 224;
    *(_QWORD *)(v0 + 80) = v0;
    *(_QWORD *)(v0 + 88) = sub_1C9E18220;
    v18 = swift_continuation_init();
    *(_QWORD *)(v0 + 144) = MEMORY[0x1E0C809B0];
    v19 = (_QWORD *)(v0 + 144);
    v19[1] = 0x40000000;
    v19[2] = sub_1C9E146EC;
    v19[3] = &block_descriptor_30;
    v19[4] = v18;
    objc_msgSend(v14, sel_favoritesWithCompletion_, v19);
    return swift_continuation_await();
  }
  else
  {
    v9(*(_QWORD *)(v0 + 272), v8, v10);
    v21 = sub_1C9E45BD4();
    v22 = sub_1C9E45E44();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_1C9A3B000, v21, v22, "SportsServer: Returning no teams - Sync my sports not enabled", v23, 2u);
      MEMORY[0x1CAA493AC](v23, -1, -1);
    }
    v24 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
    v25 = *(_QWORD *)(v0 + 272);
    v26 = *(_QWORD *)(v0 + 240);

    v24(v25, v26);
    v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CF90F8]), sel_init);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(id))(v0 + 8))(v27);
  }
}

uint64_t sub_1C9E18220()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 360) = *(_QWORD *)(*(_QWORD *)v0 + 112);
  return swift_task_switch();
}

uint64_t sub_1C9E18280()
{
  uint64_t v0;
  uint8_t *v1;
  uint64_t *v2;
  unint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v18;

  v3 = *(_QWORD *)(v0 + 224);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 328))(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 240));
  swift_bridgeObjectRetain_n();
  v4 = sub_1C9E45BD4();
  v5 = sub_1C9E45E20();
  v6 = v3 >> 62;
  if (!os_log_type_enabled(v4, v5))
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_6;
  }
  v2 = (uint64_t *)(v0 + 232);
  v1 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)v1 = 134217984;
  if (v6)
    goto LABEL_18;
  v7 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    *v2 = v7;
    sub_1C9E45F1C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9A3B000, v4, v5, "SportsServer: Request finish, count = %ld", v1, 0xCu);
    MEMORY[0x1CAA493AC](v1, -1, -1);
LABEL_6:

    (*(void (**)(_QWORD, _QWORD))(v0 + 336))(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 240));
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = sub_1C9E460A8();
      swift_bridgeObjectRelease();
      if (!v8)
        goto LABEL_16;
    }
    else
    {
      v8 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v8)
        goto LABEL_16;
    }
    v18 = MEMORY[0x1E0DEE9D8];
    v4 = &v18;
    sub_1C9E46048();
    if ((v8 & 0x8000000000000000) == 0)
      break;
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    v7 = sub_1C9E460A8();
    swift_bridgeObjectRelease();
  }
  v9 = 0;
  do
  {
    if ((v3 & 0xC000000000000001) != 0)
    {
      v10 = (void *)MEMORY[0x1CAA47960](v9, v3);
    }
    else
    {
      v10 = *(void **)(v3 + 8 * v9 + 32);
      swift_unknownObjectRetain();
    }
    ++v9;
    v11 = objc_msgSend(v10, sel_ID);
    sub_1C9E45CF4();

    v12 = objc_allocWithZone(MEMORY[0x1E0CF9100]);
    v13 = (void *)sub_1C9E45CE8();
    swift_bridgeObjectRelease();
    objc_msgSend(v12, sel_initWithName_umcid_, 0, v13);

    swift_unknownObjectRelease();
    sub_1C9E46030();
    sub_1C9E46054();
    sub_1C9E46060();
    sub_1C9E4603C();
  }
  while (v8 != v9);
LABEL_16:
  swift_bridgeObjectRelease();
  v14 = objc_allocWithZone(MEMORY[0x1E0CF90F8]);
  sub_1C9DE8EB0(0, (unint64_t *)&unk_1ED84EE90);
  v15 = (void *)sub_1C9E45D78();
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(v14, sel_initWithTeams_, v15);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v16);
}

uint64_t sub_1C9E18610()
{
  uint64_t v0;

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1C9E186B0()
{
  uint64_t v0;

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1C9E18750()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = sub_1C9E45BF8();
  v0[7] = v1;
  v0[8] = *(_QWORD *)(v1 - 8);
  v0[9] = swift_task_alloc();
  v0[10] = swift_task_alloc();
  v0[11] = swift_task_alloc();
  v0[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1C9E187D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  _QWORD *v13;

  v1 = v0[12];
  v2 = v0[7];
  v3 = v0[8];
  v4 = sub_1C9DE79D4();
  v0[13] = v4;
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[14] = v5;
  v5(v1, v4, v2);
  v6 = sub_1C9E45BD4();
  v7 = sub_1C9E45E44();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1C9A3B000, v6, v7, "SportsServer: requestedSchedulesForTeams", v8, 2u);
    MEMORY[0x1CAA493AC](v8, -1, -1);
  }
  v9 = v0[12];
  v10 = v0[7];
  v11 = v0[8];

  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v0[15] = v12;
  v12(v9, v10);
  v13 = (_QWORD *)swift_task_alloc();
  v0[16] = v13;
  *v13 = v0;
  v13[1] = sub_1C9E188D0;
  return sub_1C9E1797C();
}

uint64_t sub_1C9E188D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 136) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 144) = a1;
  return swift_task_switch();
}

uint64_t sub_1C9E18944()
{
  uint64_t v0;
  void *v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;

  v1 = *(void **)(v0 + 144);
  v2 = objc_msgSend(v1, sel_teams);
  sub_1C9DE8EB0(0, (unint64_t *)&unk_1ED84EE90);
  v3 = sub_1C9E45D84();

  if (!(v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease_n();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void *))(v0 + 8))(v1);
  }
  swift_bridgeObjectRetain();
  result = sub_1C9E460A8();
  v4 = result;
  if (!result)
    goto LABEL_10;
LABEL_3:
  if (v4 >= 1)
  {
    v6 = 0;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x1CAA47960](v6, v3);
      else
        v7 = *(id *)(v3 + 8 * v6 + 32);
      v8 = v7;
      ++v6;
      v9 = v7;
      sub_1C9E13354(&v9);

    }
    while (v4 != v6);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C9E18AA4()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  void *v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  void *v28;
  uint8_t *v29;
  id v30;
  uint64_t v31;
  void *v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  NSObject *v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  _QWORD *v58;
  NSObject *v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  id v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t result;
  uint64_t v67;
  id v68;
  void *v69;
  _QWORD *v70;
  _QWORD *v71;
  void *v72;

  v1 = *(void **)(v0 + 136);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84EF60);
  sub_1C9DE8EB0(0, &qword_1ED84EF58);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v3 = *(id *)(v0 + 24);
    v4 = objc_msgSend(v3, sel_domain);
    v5 = sub_1C9E45CF4();
    v7 = v6;

    if (v5 == sub_1C9E45CF4() && v7 == v8)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v10 = sub_1C9E46144();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v10 & 1) == 0)
      {

        v11 = objc_msgSend(v3, sel_domain);
        v12 = sub_1C9E45CF4();
        v14 = v13;

        if (v12 == sub_1C9E45CF4() && v14 == v15)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v17 = sub_1C9E46144();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v17 & 1) == 0)
          {

            goto LABEL_13;
          }
        }
        v51 = *(_QWORD *)(v0 + 104);
        v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 112);
        v52 = *(_QWORD *)(v0 + 80);
        v53 = *(_QWORD *)(v0 + 56);

        v50(v52, v51, v53);
        v54 = v3;
        v55 = sub_1C9E45BD4();
        v56 = sub_1C9E45E2C();
        if (os_log_type_enabled(v55, v56))
        {
          v57 = (uint8_t *)swift_slowAlloc();
          v58 = (_QWORD *)swift_slowAlloc();
          *(_DWORD *)v57 = 138412290;
          *(_QWORD *)(v0 + 40) = v54;
          v59 = v54;
          sub_1C9E45F1C();
          *v58 = v54;

          _os_log_impl(&dword_1C9A3B000, v55, v56, "Sports response error - WLK error: %@", v57, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84EED0);
          swift_arrayDestroy();
          MEMORY[0x1CAA493AC](v58, -1, -1);
          MEMORY[0x1CAA493AC](v57, -1, -1);
        }
        else
        {

          v55 = v54;
        }
        v60 = *(void (**)(uint64_t, uint64_t))(v0 + 120);
        v61 = *(_QWORD *)(v0 + 80);
        v62 = *(_QWORD *)(v0 + 56);

        v60(v61, v62);
        v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CF90F8]), sel_init);

LABEL_27:
        v37 = *(void **)(v0 + 16);
        goto LABEL_28;
      }
    }
    v38 = *(_QWORD *)(v0 + 56);
    v40 = *(_QWORD *)(v0 + 104);
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 112);
    v41 = *(_QWORD *)(v0 + 88);

    v39(v41, v40, v38);
    v42 = v3;
    v43 = sub_1C9E45BD4();
    v44 = sub_1C9E45E2C();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      v71 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v45 = 138412290;
      *(_QWORD *)(v0 + 48) = v42;
      v46 = v42;
      sub_1C9E45F1C();
      *v71 = v42;

      _os_log_impl(&dword_1C9A3B000, v43, v44, "Sports response error - WLK favorite error: %@", v45, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84EED0);
      swift_arrayDestroy();
      MEMORY[0x1CAA493AC](v71, -1, -1);
      MEMORY[0x1CAA493AC](v45, -1, -1);
    }
    else
    {

      v43 = v42;
    }
    v47 = *(void (**)(uint64_t, uint64_t))(v0 + 120);
    v48 = *(_QWORD *)(v0 + 88);
    v49 = *(_QWORD *)(v0 + 56);

    v47(v48, v49);
    v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CF90F8]), sel_init);

    goto LABEL_27;
  }
LABEL_13:
  v18 = *(void **)(v0 + 136);
  v20 = *(_QWORD *)(v0 + 104);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 112);
  v21 = *(_QWORD *)(v0 + 72);
  v22 = *(_QWORD *)(v0 + 56);

  v19(v21, v20, v22);
  v23 = v18;
  v24 = v18;
  v25 = sub_1C9E45BD4();
  v26 = sub_1C9E45E38();
  v27 = os_log_type_enabled(v25, v26);
  v28 = *(void **)(v0 + 136);
  if (v27)
  {
    v29 = (uint8_t *)swift_slowAlloc();
    v70 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v29 = 138412290;
    v30 = v28;
    v31 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 32) = v31;
    sub_1C9E45F1C();
    *v70 = v31;

    _os_log_impl(&dword_1C9A3B000, v25, v26, "Sports response error - Unexpected error: %@", v29, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84EED0);
    swift_arrayDestroy();
    MEMORY[0x1CAA493AC](v70, -1, -1);
    MEMORY[0x1CAA493AC](v29, -1, -1);
  }
  else
  {

  }
  v32 = *(void **)(v0 + 136);
  v33 = *(void (**)(uint64_t, uint64_t))(v0 + 120);
  v34 = *(_QWORD *)(v0 + 72);
  v35 = *(_QWORD *)(v0 + 56);

  v33(v34, v35);
  v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CF90F8]), sel_init);
  v37 = v32;
LABEL_28:

  v63 = objc_msgSend(v36, sel_teams);
  sub_1C9DE8EB0(0, (unint64_t *)&unk_1ED84EE90);
  v64 = sub_1C9E45D84();

  if (!(v64 >> 62))
  {
    v65 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v65)
      goto LABEL_30;
LABEL_37:
    swift_bridgeObjectRelease_n();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(id))(v0 + 8))(v36);
  }
  swift_bridgeObjectRetain();
  result = sub_1C9E460A8();
  v65 = result;
  if (!result)
    goto LABEL_37;
LABEL_30:
  if (v65 >= 1)
  {
    v67 = 0;
    do
    {
      if ((v64 & 0xC000000000000001) != 0)
        v68 = (id)MEMORY[0x1CAA47960](v67, v64);
      else
        v68 = *(id *)(v64 + 8 * v67 + 32);
      v69 = v68;
      ++v67;
      v72 = v68;
      sub_1C9E13354(&v72);

    }
    while (v65 != v67);
    goto LABEL_37;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C9E1921C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1C9E460D8();
  __break(1u);
  return result;
}

void sub_1C9E1930C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  unint64_t v44;
  os_log_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  void *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void (*v53)(char *, uint64_t, uint64_t);
  char *v54;
  char *v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  char *v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  os_log_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  void (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;

  v75 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84ED28);
  MEMORY[0x1E0C80A78](v75, v4);
  v76 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v72 = (char *)&v65 - v8;
  v73 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84EE80);
  MEMORY[0x1E0C80A78](v73, v9);
  v74 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v79 = ((char *)&v65 - v13);
  v14 = sub_1C9E45910();
  v77 = *(_QWORD *)(v14 - 8);
  v78 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v84 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1C9E457CC();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v65 - v24;
  v26 = sub_1C9E45BF8();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (char *)&v65 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_1C9DE79D4();
  v81 = v27;
  v82 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v30, v31, v26);
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v80 = a1;
  v32(v25, a1, v17);
  v33 = a2;
  v70 = v32;
  v32(v21, a2, v17);
  v34 = sub_1C9E45BD4();
  v35 = sub_1C9E45E44();
  v36 = v35;
  v37 = os_log_type_enabled(v34, v35);
  v71 = v18;
  if (v37)
  {
    v38 = swift_slowAlloc();
    v68 = v33;
    v66 = v36;
    v39 = v38;
    v67 = swift_slowAlloc();
    v86 = v67;
    *(_DWORD *)v39 = 136315394;
    v69 = (void (*)(char *, uint64_t))(v39 + 4);
    sub_1C9E1A2BC((unint64_t *)&qword_1ED84F020, MEMORY[0x1E0CB08F0]);
    v65 = v34;
    v40 = sub_1C9E46138();
    v85 = sub_1C9DEDEE0(v40, v41, &v86);
    sub_1C9E45F1C();
    swift_bridgeObjectRelease();
    v42 = *(void (**)(char *, uint64_t))(v18 + 8);
    v42(v25, v17);
    *(_WORD *)(v39 + 12) = 2080;
    v43 = sub_1C9E46138();
    v85 = sub_1C9DEDEE0(v43, v44, &v86);
    sub_1C9E45F1C();
    swift_bridgeObjectRelease();
    v69 = v42;
    v42(v21, v17);
    v45 = v65;
    _os_log_impl(&dword_1C9A3B000, v65, (os_log_type_t)v66, "SportsServer: _scheduledGames %s, %s", (uint8_t *)v39, 0x16u);
    v46 = v67;
    swift_arrayDestroy();
    MEMORY[0x1CAA493AC](v46, -1, -1);
    v33 = v68;
    MEMORY[0x1CAA493AC](v39, -1, -1);

  }
  else
  {
    v47 = *(void (**)(char *, uint64_t))(v18 + 8);
    v47(v25, v17);
    v69 = v47;
    v47(v21, v17);

  }
  (*(void (**)(char *, uint64_t))(v81 + 8))(v30, v82);
  v86 = MEMORY[0x1E0DEE9D8];
  sub_1C9E4594C();
  v48 = (void *)sub_1C9E45934();
  v49 = v83;
  sub_1C9E4591C();

  if (!v49)
  {
    sub_1C9E1A2BC(&qword_1ED84ED38, MEMORY[0x1E0CB08B0]);
    if ((sub_1C9E45CB8() & 1) != 0)
    {
      v50 = v75;
      v51 = v72;
      v52 = &v72[*(int *)(v75 + 48)];
      v83 = 0;
      v53 = v70;
      v70(v72, v80, v17);
      v53(v52, v33, v17);
      v54 = v76;
      v55 = &v76[*(int *)(v50 + 48)];
      v53(v76, (uint64_t)v51, v17);
      v53(v55, (uint64_t)v52, v17);
      v56 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
      v57 = (uint64_t)v74;
      v56(v74, v54, v17);
      v58 = v69;
      v69(v55, v17);
      v59 = &v54[*(int *)(v50 + 48)];
      v56(v54, v51, v17);
      v56(v59, v52, v17);
      v56((char *)(v57 + *(int *)(v73 + 36)), v59, v17);
      v60 = v84;
      v58(v54, v17);
      v61 = v79;
      v62 = sub_1C9E1A2FC(v57, (uint64_t)v79, (uint64_t *)&unk_1ED84EE80);
      MEMORY[0x1E0C80A78](v62, v63);
      *(&v65 - 2) = v61;
      *(&v65 - 1) = (os_log_t)&v86;
      v64 = v83;
      sub_1C9E45904();
      if (v64)
      {
        (*(void (**)(char *, uint64_t))(v77 + 8))(v60, v78);
        sub_1C9DF090C((uint64_t)v79, (uint64_t *)&unk_1ED84EE80);
        swift_bridgeObjectRelease();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v77 + 8))(v60, v78);
        sub_1C9DF090C((uint64_t)v79, (uint64_t *)&unk_1ED84EE80);
      }
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_1C9E19920(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F010);
  MEMORY[0x1E0C80A78](v37, v5);
  v39 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v35 - v10;
  result = MEMORY[0x1E0DEE9D8];
  v44 = MEMORY[0x1E0DEE9D8];
  v41 = *(_QWORD *)(a1 + 16);
  if (v41)
  {
    v13 = 0;
    v14 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v15 = *(_QWORD *)(v9 + 72);
    v35 = v2;
    v36 = v14;
    v40 = a1 + v14;
    v42 = v15;
    v43 = a2 + 56;
    v38 = MEMORY[0x1E0DEE9D8];
    v16 = &qword_1ED84F010;
    while (1)
    {
      v17 = v16;
      sub_1C9E1A36C(v40 + v42 * v13, (uint64_t)v11, v16);
      v18 = a2;
      if (*(_QWORD *)(a2 + 16))
      {
        v19 = &v11[*(int *)(v37 + 64)];
        v21 = *(_QWORD *)v19;
        v20 = *((_QWORD *)v19 + 1);
        sub_1C9E461B0();
        sub_1C9E45D3C();
        v22 = sub_1C9E461E0();
        v23 = -1 << *(_BYTE *)(a2 + 32);
        v24 = v22 & ~v23;
        if (((*(_QWORD *)(v43 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) != 0)
        {
          v25 = *(_QWORD *)(v18 + 48);
          v26 = (_QWORD *)(v25 + 16 * v24);
          v27 = *v26 == v21 && v26[1] == v20;
          if (v27 || (sub_1C9E46144() & 1) != 0)
          {
LABEL_12:
            v16 = v17;
            sub_1C9E1A2FC((uint64_t)v11, v39, v17);
            v28 = v38;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              sub_1C9E17540(0, *(_QWORD *)(v28 + 16) + 1, 1);
            v29 = v44;
            v31 = *(_QWORD *)(v44 + 16);
            v30 = *(_QWORD *)(v44 + 24);
            if (v31 >= v30 >> 1)
            {
              sub_1C9E17540(v30 > 1, v31 + 1, 1);
              v29 = v44;
            }
            *(_QWORD *)(v29 + 16) = v31 + 1;
            v38 = v29;
            sub_1C9E1A2FC(v39, v29 + v36 + v31 * v42, v17);
            goto LABEL_4;
          }
          v32 = ~v23;
          while (1)
          {
            v24 = (v24 + 1) & v32;
            if (((*(_QWORD *)(v43 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
              break;
            v33 = (_QWORD *)(v25 + 16 * v24);
            v34 = *v33 == v21 && v33[1] == v20;
            if (v34 || (sub_1C9E46144() & 1) != 0)
              goto LABEL_12;
          }
        }
      }
      v16 = v17;
      sub_1C9DF090C((uint64_t)v11, v17);
LABEL_4:
      ++v13;
      a2 = v18;
      if (v13 == v41)
        return v44;
    }
  }
  return result;
}

uint64_t sub_1C9E19BEC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  NSObject *v33;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  uint64_t v39;
  char *v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *aBlock;
  uint64_t v45;
  uint64_t (*v46)(uint64_t);
  void *v47;
  uint64_t (*v48)();
  uint64_t v49;
  char v50;
  _OWORD v51[2];

  v2 = v1;
  v4 = sub_1C9E45BF8();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v39 - v12;
  if (objc_msgSend(a1, sel_valueForEntitlement_, *MEMORY[0x1E0CF9360], v11))
  {
    sub_1C9E45F40();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v51, 0, sizeof(v51));
  }
  sub_1C9E1A2FC((uint64_t)v51, (uint64_t)&aBlock, &qword_1ED84EEF8);
  if (v47)
  {
    if (swift_dynamicCast() && (v50 & 1) != 0)
    {
      v14 = sub_1C9DE79D4();
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v13, v14, v4);
      v15 = a1;
      v16 = sub_1C9E45BD4();
      v17 = sub_1C9E45E44();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc();
        v41 = swift_slowAlloc();
        v42 = v2;
        *(_DWORD *)v18 = 138412290;
        aBlock = v15;
        v19 = v15;
        v43 = v5;
        v20 = v19;
        v2 = v42;
        sub_1C9E45F1C();
        v21 = v41;
        v41->isa = (Class)v15;

        v5 = v43;
        _os_log_impl(&dword_1C9A3B000, v16, v17, "SportsServer: connection accepted %@", v18, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84EED0);
        swift_arrayDestroy();
        MEMORY[0x1CAA493AC](v21, -1, -1);
        MEMORY[0x1CAA493AC](v18, -1, -1);
      }
      else
      {

        v16 = v15;
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
      v48 = sub_1C9E144E4;
      v49 = 0;
      v35 = MEMORY[0x1E0C809B0];
      aBlock = MEMORY[0x1E0C809B0];
      v45 = 1107296256;
      v46 = sub_1C9DE98D8;
      v47 = &block_descriptor_7;
      v36 = _Block_copy(&aBlock);
      -[NSObject setInterruptionHandler:](v15, sel_setInterruptionHandler_, v36);
      _Block_release(v36);
      v48 = sub_1C9E144F8;
      v49 = 0;
      aBlock = v35;
      v45 = 1107296256;
      v46 = sub_1C9DE98D8;
      v47 = &block_descriptor_26;
      v37 = _Block_copy(&aBlock);
      -[NSObject setInvalidationHandler:](v15, sel_setInvalidationHandler_, v37);
      _Block_release(v37);
      v38 = (id)ATXSportsInterface();
      -[NSObject setExportedInterface:](v15, sel_setExportedInterface_, v38);

      -[NSObject setExportedObject:](v15, sel_setExportedObject_, v2);
      -[NSObject resume](v15, sel_resume);
      return 1;
    }
  }
  else
  {
    sub_1C9DF090C((uint64_t)&aBlock, &qword_1ED84EEF8);
  }
  v22 = sub_1C9DE79D4();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v22, v4);
  v23 = a1;
  v24 = sub_1C9E45BD4();
  v25 = sub_1C9E45E2C();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc();
    v40 = v8;
    v27 = v26;
    v28 = swift_slowAlloc();
    v43 = v5;
    v29 = (_QWORD *)v28;
    v41 = swift_slowAlloc();
    aBlock = v41;
    *(_DWORD *)v27 = 138412546;
    v42 = v4;
    *(_QWORD *)&v51[0] = v23;
    v30 = v23;
    sub_1C9E45F1C();
    *v29 = v23;

    *(_WORD *)(v27 + 12) = 2080;
    v31 = sub_1C9E45CF4();
    *(_QWORD *)&v51[0] = sub_1C9DEDEE0(v31, v32, (uint64_t *)&aBlock);
    sub_1C9E45F1C();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9A3B000, v24, v25, "SportsServer: connection rejected %@ without entitlement %s", (uint8_t *)v27, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ED84EED0);
    swift_arrayDestroy();
    MEMORY[0x1CAA493AC](v29, -1, -1);
    v33 = v41;
    swift_arrayDestroy();
    MEMORY[0x1CAA493AC](v33, -1, -1);
    MEMORY[0x1CAA493AC](v27, -1, -1);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v40, v42);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return 0;
}

uint64_t method lookup function for SportsServer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SportsServer.requestedSchedulesForTeams()()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = *(int **)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70);
  v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1C9E12CFC;
  return v5();
}

uint64_t dispatch thunk of SportsServer.listener(_:shouldAcceptNewConnection:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t sub_1C9E1A1E8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_1C9E1A214()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  _QWORD *v3;

  v2 = *(const void **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1C9DF080C;
  return ((uint64_t (*)(const void *))((char *)&dword_1EF9333C8 + dword_1EF9333C8))(v2);
}

uint64_t sub_1C9E1A280()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t sub_1C9E1A2BC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1C9E457CC();
    result = MEMORY[0x1CAA492F8](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C9E1A2FC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C9E1A340(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1C9E14788(a1, a2, *(_QWORD *)(v2 + 16), *(unint64_t **)(v2 + 24));
  return 1;
}

uint64_t sub_1C9E1A36C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1C9E1A3B0()
{
  unint64_t result;

  result = qword_1EF933440;
  if (!qword_1EF933440)
  {
    result = MEMORY[0x1CAA492F8](MEMORY[0x1E0DEA980], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EF933440);
  }
  return result;
}

unint64_t sub_1C9E1A3F4()
{
  unint64_t result;

  result = qword_1EF933448;
  if (!qword_1EF933448)
  {
    result = MEMORY[0x1CAA492F8](MEMORY[0x1E0DEFF48], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EF933448);
  }
  return result;
}

unint64_t sub_1C9E1A438()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF931E00;
  if (!qword_1EF931E00)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EF931B10);
    result = MEMORY[0x1CAA492F8](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1EF931E00);
  }
  return result;
}

uint64_t sub_1C9E1A484(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1ED84F010) - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = sub_1C9E460D8();
  __break(1u);
  return result;
}

uint64_t sub_1C9E1A5A8()
{
  uint64_t v0;

  v0 = sub_1C9E45BF8();
  __swift_allocate_value_buffer(v0, qword_1EF9350D8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF9350D8);
  return sub_1C9E45BE0();
}

void static NotificationCategorizationLogger.info(_:function:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_1C9E1A660(a1, a2, a3, a4, MEMORY[0x1E0DF2270]);
}

void static NotificationCategorizationLogger.debug(_:function:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_1C9E1A660(a1, a2, a3, a4, MEMORY[0x1E0DF2278]);
}

void static NotificationCategorizationLogger.log(_:function:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_1C9E1A660(a1, a2, a3, a4, MEMORY[0x1E0DF2290]);
}

void static NotificationCategorizationLogger.error(_:function:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_1C9E1A660(a1, a2, a3, a4, MEMORY[0x1E0DF2280]);
}

void static NotificationCategorizationLogger.fault(_:function:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_1C9E1A660(a1, a2, a3, a4, MEMORY[0x1E0DF2288]);
}

void sub_1C9E1A660(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (qword_1EF9350D0 != -1)
    swift_once();
  v10 = sub_1C9E45BF8();
  __swift_project_value_buffer(v10, (uint64_t)qword_1EF9350D8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v11 = sub_1C9E45BD4();
  v12 = a5();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    v14 = swift_slowAlloc();
    v15 = v14;
    *(_DWORD *)v13 = 136315394;
    swift_bridgeObjectRetain();
    sub_1C9DEDEE0(a3, a4, &v15);
    sub_1C9E45F1C();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_1C9DEDEE0(a1, a2, &v15);
    sub_1C9E45F1C();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C9A3B000, v11, v12, "%s: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CAA493AC](v14, -1, -1);
    MEMORY[0x1CAA493AC](v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

ValueMetadata *type metadata accessor for NotificationCategorizationLogger()
{
  return &type metadata for NotificationCategorizationLogger;
}

uint64_t sub_1C9E1A87C()
{
  uint64_t v0;

  v0 = sub_1C9E45BF8();
  __swift_allocate_value_buffer(v0, qword_1ED84FF18);
  __swift_project_value_buffer(v0, (uint64_t)qword_1ED84FF18);
  return sub_1C9E45BE0();
}

uint64_t sub_1C9E1A8FC()
{
  uint64_t v0;

  if (qword_1ED84F918 != -1)
    swift_once();
  v0 = sub_1C9E45BF8();
  return __swift_project_value_buffer(v0, (uint64_t)qword_1ED84FF18);
}

uint64_t sub_1C9E1A944@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1ED84F918 != -1)
    swift_once();
  v2 = sub_1C9E45BF8();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED84FF18);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void ATXSleepSuggestedHomePageWasCreatedDuringMigration_cold_1(os_log_t log)
{
  int v1;
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v1 = 136315138;
  v2 = "NSNumber * _Nullable ATXSleepSuggestedHomePageWasCreatedDuringMigration(void)";
  _os_log_error_impl(&dword_1C9A3B000, log, OS_LOG_TYPE_ERROR, "%s: Unable to read sleep settings because couldn't soft link HKSPSleepStore.", (uint8_t *)&v1, 0xCu);
}

void ATXSleepSuggestedHomePageWasCreatedDuringMigration_cold_2(uint64_t a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = 136315394;
  v3 = "NSNumber * _Nullable ATXSleepSuggestedHomePageWasCreatedDuringMigration(void)";
  v4 = 2112;
  v5 = a1;
  _os_log_error_impl(&dword_1C9A3B000, a2, OS_LOG_TYPE_ERROR, "%s: Failed to fetch sleep settings with error: %@", (uint8_t *)&v2, 0x16u);
}

void __getHKSPSleepStoreClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *SleepLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("ATXSleepSuggestedHomePageWasCreatedDuringMigration.m"), 16, CFSTR("%s"), *a1);

  __break(1u);
}

void __getHKSPSleepStoreClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getHKSPSleepStoreClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("ATXSleepSuggestedHomePageWasCreatedDuringMigration.m"), 17, CFSTR("Unable to find class %s"), "HKSPSleepStore");

  __break(1u);
}

void engagementTypeForPrediction(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  OUTLINED_FUNCTION_0_3(&dword_1C9A3B000, a3, (uint64_t)a3, "%@ is not a valid engagment type to call engagementTypeForPrediction with engaged==YES", (uint8_t *)a2);

}

void ATXSmoothedProbability_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_5(&dword_1C9A3B000, v0, v1, "ATXSmoothedProbability called with invalid arguments. numerator: %f denominator: %f", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void ATXSmoothedProbability_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_5(&dword_1C9A3B000, v0, v1, "Invalid probability found. numerator: %f denominator: %f", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void ATXProbability_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_5(&dword_1C9A3B000, v0, v1, "ATXProbability called with invalid arguments. numerator: %f denominator: %f", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void shouldReturnUndefined_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_3(&dword_1C9A3B000, v0, v1, "App prediction interpreter stack underflow", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4();
}

void push_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_3(&dword_1C9A3B000, v0, v1, "App prediction interpreter stack overflow", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4();
}

void linkChangedCallback_cold_1(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_1_3(&dword_1C9A3B000, a2, a3, "WiFi link status change: %@", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1_0();
}

void __linkChangedCallback_block_invoke_cold_1(uint64_t *a1, _BYTE *a2, os_log_t log)
{
  uint64_t v3;
  _BOOL4 v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  _BOOL4 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = *a2 == 0;
  v5 = 138412546;
  v6 = v3;
  v7 = 1024;
  v8 = v4;
  _os_log_debug_impl(&dword_1C9A3B000, log, OS_LOG_TYPE_DEBUG, "SSID changed to '%@', link active: %i", (uint8_t *)&v5, 0x12u);
  OUTLINED_FUNCTION_1_0();
}

void __getAirplaneMode_block_invoke_2_cold_1(os_log_t log)
{
  unsigned __int8 v1;
  _DWORD v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v1 = atomic_load(getAirplaneMode_inAirplaneMode);
  v2[0] = 67109120;
  v2[1] = v1 & 1;
  _os_log_debug_impl(&dword_1C9A3B000, log, OS_LOG_TYPE_DEBUG, "Airplane mode change detected. New status: %{BOOL}d", (uint8_t *)v2, 8u);
  OUTLINED_FUNCTION_4();
}

void ATXUpdatePredictions_cold_1(uint64_t a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  +[ATXUpdatePredictionsReasons stringForUpdatePredictionsReason:](ATXUpdatePredictionsReasons, "stringForUpdatePredictionsReason:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = 138412290;
  v6 = v3;
  OUTLINED_FUNCTION_0_3(&dword_1C9A3B000, a2, v4, "ATXUpdatePredictions: Can not refresh predictions when class C locked! Reason: %@", (uint8_t *)&v5);

}

void readWholeFile_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  __error();
  OUTLINED_FUNCTION_0_10(&dword_1C9A3B000, v0, v1, "Could not read; errno=%i", v2, v3, v4, v5, 0);
  OUTLINED_FUNCTION_1_0();
}

void readWholeFile_cold_2(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 134218240;
  v4 = a1;
  v5 = 2048;
  v6 = a2;
  _os_log_error_impl(&dword_1C9A3B000, log, OS_LOG_TYPE_ERROR, "Wrong length; expected %lu, got %lu",
    (uint8_t *)&v3,
    0x16u);
  OUTLINED_FUNCTION_1_0();
}

void readWholeFile_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  __error();
  OUTLINED_FUNCTION_0_10(&dword_1C9A3B000, v0, v1, "Could not stat fd, errno=%i", v2, v3, v4, v5, 0);
  OUTLINED_FUNCTION_1_0();
}

void _ATXCopySqliteDatabaseClassC_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_0(&dword_1C9A3B000, v0, v1, "Could not open DB for replacing: %@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void _ATXCopySqliteDatabaseClassC_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_0(&dword_1C9A3B000, v0, v1, "Could not open DB for reading: %@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void _ATXCopySqliteDatabaseDataClassC_cold_1(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "allKeys");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_3(&dword_1C9A3B000, a2, v4, "Could not find .db file in %@", v5);

  OUTLINED_FUNCTION_1();
}

void _ATXCopySqliteDatabaseDataClassC_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_0(&dword_1C9A3B000, v0, v1, "Could not write to %@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void _ATXCopySqliteDatabaseDataClassC_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_0(&dword_1C9A3B000, v0, v1, "Error creating temporary directory: %@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void _ATXExtractFilesFromDECBackupArchiveIfExists_cold_1()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  v3 = 2112;
  v4 = v0;
  OUTLINED_FUNCTION_5_0(&dword_1C9A3B000, v1, (uint64_t)v1, "Error opening %@: %@", v2);
  OUTLINED_FUNCTION_1_0();
}

void _ATXExtractFilesFromDECBackupArchiveIfExists_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_0(&dword_1C9A3B000, v0, v1, "Backup file truncated: %@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void _ATXExtractFilesFromDECBackupArchiveIfExists_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_3(&dword_1C9A3B000, v0, v1, "Could not decompress backup buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4();
}

void _ATXExtractFilesFromDECBackupArchiveIfExists_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_0(&dword_1C9A3B000, v0, v1, "Error parsing app predictor backup: %@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void ATXEnableMobileAssetDataVault_cold_1()
{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  _os_log_fault_impl(&dword_1C9A3B000, v0, OS_LOG_TYPE_FAULT, "Failed to initialize datavault for DuetExpertCenterAsset: %@", v1, 0xCu);
  OUTLINED_FUNCTION_1_0();
}

void ATXEnableMobileAssetDataVault_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_0(&dword_1C9A3B000, v0, v1, "Retrying after failure to initialize datavault for DuetExpertCenterAsset: %@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void __registerForRestoreStateNotifications_block_invoke_cold_1(NSObject *a1)
{
  uint64_t v2;
  uint8_t v3[24];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  dlerror();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_3(&dword_1C9A3B000, a1, v2, "Could not load symbol: %s", v3);
  OUTLINED_FUNCTION_1();
}

void __registerForWidgetOnboardingCTSJob_block_invoke_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_3(&dword_1C9A3B000, v0, v1, "ATXOnboardingStackResultCacheManager: no widget cache file was generated, not updating result cache.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4();
}

void __registerForFaceSuggestionsCTSJob_block_invoke_cold_1(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0_0(&dword_1C9A3B000, a1, a3, "%s: could not set activity to CONTINUE, not refreshing face suggestions", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1_0();
}

void __registerForFaceSuggestionsCTSJob_block_invoke_447_cold_1(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  const char *v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 136315394;
  v4 = "void registerForFaceSuggestionsCTSJob(void)_block_invoke";
  v5 = 2112;
  v6 = a1;
  OUTLINED_FUNCTION_5_0(&dword_1C9A3B000, a2, a3, "%s: regenerating Lock Screen suggestions failed: %@", (uint8_t *)&v3);
  OUTLINED_FUNCTION_1_0();
}

void dateColumnNameForLaunchType_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_3(&dword_1C9A3B000, v0, v1, "launchType must be a valid _ATXLaunchType.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4();
}

void decodeSubGenresData_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_0(&dword_1C9A3B000, v0, v1, "Error unarchiving subgenres: %@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1_0();
}

void __getPRSServiceClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *PosterBoardServicesLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("ATXUserEducationSuggestionCustomizeFocusServer.m"), 19, CFSTR("%s"), *a1);

  __break(1u);
}

void __getPRSServiceClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPRSServiceClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("ATXUserEducationSuggestionCustomizeFocusServer.m"), 20, CFSTR("Unable to find class %s"), "PRSService");

  __break(1u);
}

void __getSGSuggestionsServiceClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CoreSuggestionsLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("ATXActionFeedback.m"), 29, CFSTR("%s"), *a1);

  __break(1u);
}

void __getSGSuggestionsServiceClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getSGSuggestionsServiceClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("ATXActionFeedback.m"), 30, CFSTR("Unable to find class %s"), "SGSuggestionsService");

  __break(1u);
}

void ATXUserEducationSuggestionStateToString_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = 136315394;
  v3 = "NSString * _Nonnull ATXUserEducationSuggestionStateToString(ATXUserEducationSuggestionState)";
  v4 = 2048;
  v5 = a1;
  _os_log_fault_impl(&dword_1C9A3B000, a2, OS_LOG_TYPE_FAULT, "%s: Unknown state: %ld", (uint8_t *)&v2, 0x16u);
}

void atx_CMFBlockListIsItemBlocked_cold_1()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Boolean atx_CMFBlockListIsItemBlocked(CMFItemRef)");
  objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleFailureInFunction:file:lineNumber:description:", v0, CFSTR("ATXActionPredictionsProcessor.m"), 29, CFSTR("%s"), OUTLINED_FUNCTION_4_8());

  __break(1u);
}

void CommunicationsFilterLibrary_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *CommunicationsFilterLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("ATXActionPredictionsProcessor.m"), 26, CFSTR("%s"), *a1);

  __break(1u);
}

void ATXSetInputAge_cold_1(void *a1, uint8_t *buf, os_log_t log, double a4)
{
  *(_DWORD *)buf = 138412546;
  *(_QWORD *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2048;
  *(double *)(buf + 14) = a4;
  _os_log_error_impl(&dword_1C9A3B000, log, OS_LOG_TYPE_ERROR, "Invalid age for %@: %f. last date cannot be in the future.", buf, 0x16u);

}

void runInstructionsAndPopResult_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_3(&dword_1C9A3B000, v0, v1, "App prediction interpreter stack overflow", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_4();
}

void __atxRegisterCTSJobHandlerForNonClassCLocked_block_invoke_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = 136315138;
  v4 = v2;
  _os_log_fault_impl(&dword_1C9A3B000, a2, OS_LOG_TYPE_FAULT, "Unexpected run of CTS job %s when device is class-C locked", (uint8_t *)&v3, 0xCu);
}

void __getPRSServiceClass_block_invoke_cold_1_0(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *PosterBoardServicesLibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("ATXFaceSuggestionServer.m"), 38, CFSTR("%s"), *a1);

  __break(1u);
}

void __getPRSServiceClass_block_invoke_cold_2_0()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getPRSServiceClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("ATXFaceSuggestionServer.m"), 39, CFSTR("Unable to find class %s"), "PRSService");

  __break(1u);
}

void DNDModeSemanticTypeToSuggestedFaceType_cold_1(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_5(&dword_1C9A3B000, a2, a3, "ATXModeFaceSuggestionGenerator: unhandled DNDModeSemanticType %ld", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_1_0();
}

void flushHistogram_cold_1(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_1C9A3B000, log, OS_LOG_TYPE_ERROR, "Flush called on histogram which isn't backed by persistent store", v1, 2u);
  OUTLINED_FUNCTION_4();
}

uint64_t sub_1C9E45670()
{
  return MEMORY[0x1E0CAE430]();
}

uint64_t sub_1C9E4567C()
{
  return MEMORY[0x1E0CAE4B8]();
}

uint64_t sub_1C9E45688()
{
  return MEMORY[0x1E0CAE590]();
}

uint64_t sub_1C9E45694()
{
  return MEMORY[0x1E0CAE5B0]();
}

uint64_t sub_1C9E456A0()
{
  return MEMORY[0x1E0CAE5D0]();
}

uint64_t sub_1C9E456AC()
{
  return MEMORY[0x1E0CAE618]();
}

uint64_t sub_1C9E456B8()
{
  return MEMORY[0x1E0CAE648]();
}

uint64_t sub_1C9E456C4()
{
  return MEMORY[0x1E0CAEB20]();
}

uint64_t sub_1C9E456D0()
{
  return MEMORY[0x1E0CAEB38]();
}

uint64_t sub_1C9E456DC()
{
  return MEMORY[0x1E0CAEB40]();
}

uint64_t sub_1C9E456E8()
{
  return MEMORY[0x1E0CAEB50]();
}

uint64_t sub_1C9E456F4()
{
  return MEMORY[0x1E0CAF980]();
}

uint64_t sub_1C9E45700()
{
  return MEMORY[0x1E0CAF990]();
}

uint64_t sub_1C9E4570C()
{
  return MEMORY[0x1E0CAF9D0]();
}

uint64_t sub_1C9E45718()
{
  return MEMORY[0x1E0CAF9F8]();
}

uint64_t sub_1C9E45724()
{
  return MEMORY[0x1E0CAFA28]();
}

uint64_t sub_1C9E45730()
{
  return MEMORY[0x1E0CAFE38]();
}

uint64_t sub_1C9E4573C()
{
  return MEMORY[0x1E0CAFF00]();
}

uint64_t sub_1C9E45748()
{
  return MEMORY[0x1E0CAFFF8]();
}

uint64_t sub_1C9E45754()
{
  return MEMORY[0x1E0CB01F0]();
}

uint64_t sub_1C9E45760()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t sub_1C9E4576C()
{
  return MEMORY[0x1E0CB03C0]();
}

uint64_t sub_1C9E45778()
{
  return MEMORY[0x1E0CB0680]();
}

uint64_t sub_1C9E45784()
{
  return MEMORY[0x1E0CB06B8]();
}

uint64_t sub_1C9E45790()
{
  return MEMORY[0x1E0CB06D8]();
}

uint64_t sub_1C9E4579C()
{
  return MEMORY[0x1E0CB07C8]();
}

uint64_t sub_1C9E457A8()
{
  return MEMORY[0x1E0CB07E8]();
}

uint64_t sub_1C9E457B4()
{
  return MEMORY[0x1E0CB07F8]();
}

uint64_t sub_1C9E457C0()
{
  return MEMORY[0x1E0CB0860]();
}

uint64_t sub_1C9E457CC()
{
  return MEMORY[0x1E0CB0870]();
}

uint64_t sub_1C9E457D8()
{
  return MEMORY[0x1E0CB0910]();
}

uint64_t sub_1C9E457E4()
{
  return MEMORY[0x1E0CB0988]();
}

uint64_t sub_1C9E457F0()
{
  return MEMORY[0x1E0CB0998]();
}

uint64_t sub_1C9E457FC()
{
  return MEMORY[0x1E0CB0CC8]();
}

uint64_t sub_1C9E45808()
{
  return MEMORY[0x1E0CB0E38]();
}

uint64_t sub_1C9E45814()
{
  return MEMORY[0x1E0CB1070]();
}

uint64_t sub_1C9E45820()
{
  return MEMORY[0x1E0CB10C8]();
}

uint64_t sub_1C9E4582C()
{
  return MEMORY[0x1E0CB11B8]();
}

uint64_t sub_1C9E45838()
{
  return MEMORY[0x1E0CB11E0]();
}

uint64_t sub_1C9E45844()
{
  return MEMORY[0x1E0CB11F0]();
}

uint64_t sub_1C9E45850()
{
  return MEMORY[0x1E0C8F618]();
}

uint64_t sub_1C9E4585C()
{
  return MEMORY[0x1E0C8F670]();
}

uint64_t sub_1C9E45868()
{
  return MEMORY[0x1E0C8FCD8]();
}

uint64_t sub_1C9E45874()
{
  return MEMORY[0x1E0C8FCE8]();
}

uint64_t sub_1C9E45880()
{
  return MEMORY[0x1E0C8FD08]();
}

uint64_t sub_1C9E4588C()
{
  return MEMORY[0x1E0C8FD10]();
}

uint64_t sub_1C9E45898()
{
  return MEMORY[0x1E0C8FF38]();
}

uint64_t sub_1C9E458A4()
{
  return MEMORY[0x1E0C8FF40]();
}

uint64_t sub_1C9E458B0()
{
  return MEMORY[0x1E0C8FFA0]();
}

uint64_t sub_1C9E458BC()
{
  return MEMORY[0x1E0C8FFB8]();
}

uint64_t sub_1C9E458C8()
{
  return MEMORY[0x1E0C90090]();
}

uint64_t sub_1C9E458D4()
{
  return MEMORY[0x1E0C900E0]();
}

uint64_t sub_1C9E458E0()
{
  return MEMORY[0x1E0D0F940]();
}

uint64_t sub_1C9E458EC()
{
  return MEMORY[0x1E0D3B760]();
}

uint64_t sub_1C9E458F8()
{
  return MEMORY[0x1E0D3B778]();
}

uint64_t sub_1C9E45904()
{
  return MEMORY[0x1E0D3BE90]();
}

uint64_t sub_1C9E45910()
{
  return MEMORY[0x1E0D3BE98]();
}

uint64_t sub_1C9E4591C()
{
  return MEMORY[0x1E0D3BEA0]();
}

uint64_t sub_1C9E45928()
{
  return MEMORY[0x1E0D3BEC0]();
}

uint64_t sub_1C9E45934()
{
  return MEMORY[0x1E0D3BFF8]();
}

uint64_t sub_1C9E45940()
{
  return MEMORY[0x1E0D3C000]();
}

uint64_t sub_1C9E4594C()
{
  return MEMORY[0x1E0D3C020]();
}

uint64_t sub_1C9E45958()
{
  return MEMORY[0x1E0D3CDD8]();
}

uint64_t sub_1C9E45964()
{
  return MEMORY[0x1E0D3CE28]();
}

uint64_t sub_1C9E45970()
{
  return MEMORY[0x1E0D3D138]();
}

uint64_t sub_1C9E4597C()
{
  return MEMORY[0x1E0D3D140]();
}

uint64_t sub_1C9E45988()
{
  return MEMORY[0x1E0D3D1C0]();
}

uint64_t sub_1C9E45994()
{
  return MEMORY[0x1E0D3D1C8]();
}

uint64_t sub_1C9E459A0()
{
  return MEMORY[0x1E0D3D1D0]();
}

uint64_t sub_1C9E459AC()
{
  return MEMORY[0x1E0D3D1D8]();
}

uint64_t sub_1C9E459B8()
{
  return MEMORY[0x1E0D3D700]();
}

uint64_t sub_1C9E459C4()
{
  return MEMORY[0x1E0D3D748]();
}

uint64_t sub_1C9E459D0()
{
  return MEMORY[0x1E0D3D750]();
}

uint64_t sub_1C9E459DC()
{
  return MEMORY[0x1E0D3D758]();
}

uint64_t sub_1C9E459E8()
{
  return MEMORY[0x1E0D3D768]();
}

uint64_t sub_1C9E459F4()
{
  return MEMORY[0x1E0D3D770]();
}

uint64_t sub_1C9E45A00()
{
  return MEMORY[0x1E0D3D850]();
}

uint64_t sub_1C9E45A0C()
{
  return MEMORY[0x1E0D3D858]();
}

uint64_t sub_1C9E45A18()
{
  return MEMORY[0x1E0D143A0]();
}

uint64_t sub_1C9E45A24()
{
  return MEMORY[0x1E0D143A8]();
}

uint64_t sub_1C9E45A30()
{
  return MEMORY[0x1E0D143B0]();
}

uint64_t sub_1C9E45A3C()
{
  return MEMORY[0x1E0D143B8]();
}

uint64_t sub_1C9E45A48()
{
  return MEMORY[0x1E0D143C0]();
}

uint64_t sub_1C9E45A54()
{
  return MEMORY[0x1E0D143C8]();
}

uint64_t sub_1C9E45A60()
{
  return MEMORY[0x1E0D143D0]();
}

uint64_t sub_1C9E45A6C()
{
  return MEMORY[0x1E0D143D8]();
}

uint64_t sub_1C9E45A78()
{
  return MEMORY[0x1E0D143E0]();
}

uint64_t sub_1C9E45A84()
{
  return MEMORY[0x1E0D143F0]();
}

uint64_t sub_1C9E45A90()
{
  return MEMORY[0x1E0D143F8]();
}

uint64_t sub_1C9E45A9C()
{
  return MEMORY[0x1E0D14400]();
}

uint64_t sub_1C9E45AA8()
{
  return MEMORY[0x1E0D14408]();
}

uint64_t sub_1C9E45AB4()
{
  return MEMORY[0x1E0D14410]();
}

uint64_t sub_1C9E45AC0()
{
  return MEMORY[0x1E0D14418]();
}

uint64_t sub_1C9E45ACC()
{
  return MEMORY[0x1E0D14420]();
}

uint64_t sub_1C9E45AD8()
{
  return MEMORY[0x1E0D14430]();
}

uint64_t sub_1C9E45AE4()
{
  return MEMORY[0x1E0D14438]();
}

uint64_t sub_1C9E45AF0()
{
  return MEMORY[0x1E0D14448]();
}

uint64_t sub_1C9E45AFC()
{
  return MEMORY[0x1E0D14458]();
}

uint64_t sub_1C9E45B08()
{
  return MEMORY[0x1E0D14460]();
}

uint64_t sub_1C9E45B14()
{
  return MEMORY[0x1E0D14468]();
}

uint64_t sub_1C9E45B20()
{
  return MEMORY[0x1E0D14478]();
}

uint64_t sub_1C9E45B2C()
{
  return MEMORY[0x1E0D14488]();
}

uint64_t sub_1C9E45B38()
{
  return MEMORY[0x1E0D14490]();
}

uint64_t sub_1C9E45B44()
{
  return MEMORY[0x1E0D144A0]();
}

uint64_t sub_1C9E45B50()
{
  return MEMORY[0x1E0D144B0]();
}

uint64_t sub_1C9E45B5C()
{
  return MEMORY[0x1E0D144B8]();
}

uint64_t sub_1C9E45B68()
{
  return MEMORY[0x1E0D144C0]();
}

uint64_t sub_1C9E45B74()
{
  return MEMORY[0x1E0D144D0]();
}

uint64_t sub_1C9E45B80()
{
  return MEMORY[0x1E0D144D8]();
}

uint64_t sub_1C9E45B8C()
{
  return MEMORY[0x1E0D144E0]();
}

uint64_t sub_1C9E45B98()
{
  return MEMORY[0x1E0D144E8]();
}

uint64_t sub_1C9E45BA4()
{
  return MEMORY[0x1E0D81390]();
}

uint64_t sub_1C9E45BB0()
{
  return MEMORY[0x1E0D813A8]();
}

uint64_t sub_1C9E45BBC()
{
  return MEMORY[0x1E0D813B0]();
}

uint64_t sub_1C9E45BC8()
{
  return MEMORY[0x1E0D144F0]();
}

uint64_t sub_1C9E45BD4()
{
  return MEMORY[0x1E0DF2240]();
}

uint64_t sub_1C9E45BE0()
{
  return MEMORY[0x1E0DF2248]();
}

uint64_t sub_1C9E45BEC()
{
  return MEMORY[0x1E0DF2250]();
}

uint64_t sub_1C9E45BF8()
{
  return MEMORY[0x1E0DF2258]();
}

uint64_t sub_1C9E45C04()
{
  return MEMORY[0x1E0DF2268]();
}

uint64_t sub_1C9E45C10()
{
  return MEMORY[0x1E0C96290]();
}

uint64_t sub_1C9E45C1C()
{
  return MEMORY[0x1E0DEF4A8]();
}

uint64_t sub_1C9E45C28()
{
  return MEMORY[0x1E0DEF4F8]();
}

uint64_t sub_1C9E45C34()
{
  return MEMORY[0x1E0DEF560]();
}

uint64_t sub_1C9E45C40()
{
  return MEMORY[0x1E0DEF578]();
}

uint64_t sub_1C9E45C4C()
{
  return MEMORY[0x1E0DEF5B0]();
}

uint64_t sub_1C9E45C58()
{
  return MEMORY[0x1E0DEF698]();
}

uint64_t sub_1C9E45C64()
{
  return MEMORY[0x1E0DEF6B8]();
}

uint64_t sub_1C9E45C70()
{
  return MEMORY[0x1E0CB17D8]();
}

uint64_t sub_1C9E45C7C()
{
  return MEMORY[0x1E0DEA1B8]();
}

uint64_t sub_1C9E45C88()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t sub_1C9E45C94()
{
  return MEMORY[0x1E0DF1FA0]();
}

uint64_t sub_1C9E45CA0()
{
  return MEMORY[0x1E0DEA3B0]();
}

uint64_t sub_1C9E45CAC()
{
  return MEMORY[0x1E0DEA3C0]();
}

uint64_t sub_1C9E45CB8()
{
  return MEMORY[0x1E0DEA3D0]();
}

uint64_t sub_1C9E45CC4()
{
  return MEMORY[0x1E0DEA568]();
}

uint64_t sub_1C9E45CD0()
{
  return MEMORY[0x1E0CB18A0]();
}

uint64_t sub_1C9E45CDC()
{
  return MEMORY[0x1E0CB18F8]();
}

uint64_t sub_1C9E45CE8()
{
  return MEMORY[0x1E0CB1940]();
}

uint64_t sub_1C9E45CF4()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t sub_1C9E45D00()
{
  return MEMORY[0x1E0CB1A50]();
}

uint64_t sub_1C9E45D0C()
{
  return MEMORY[0x1E0DEA5F8]();
}

uint64_t sub_1C9E45D18()
{
  return MEMORY[0x1E0DEA630]();
}

uint64_t sub_1C9E45D24()
{
  return MEMORY[0x1E0D144F8]();
}

uint64_t sub_1C9E45D30()
{
  return MEMORY[0x1E0D14500]();
}

uint64_t sub_1C9E45D3C()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t sub_1C9E45D48()
{
  return MEMORY[0x1E0DEA800]();
}

uint64_t sub_1C9E45D54()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t sub_1C9E45D60()
{
  return MEMORY[0x1E0DEAA40]();
}

uint64_t sub_1C9E45D6C()
{
  return MEMORY[0x1E0DEADA0]();
}

uint64_t sub_1C9E45D78()
{
  return MEMORY[0x1E0CB1AC0]();
}

uint64_t sub_1C9E45D84()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t sub_1C9E45D90()
{
  return MEMORY[0x1E0DEADB8]();
}

uint64_t sub_1C9E45D9C()
{
  return MEMORY[0x1E0DEADE8]();
}

uint64_t sub_1C9E45DA8()
{
  return MEMORY[0x1E0DEAE28]();
}

uint64_t sub_1C9E45DB4()
{
  return MEMORY[0x1E0DEAE58]();
}

uint64_t sub_1C9E45DC0()
{
  return MEMORY[0x1E0DEAEC8]();
}

uint64_t sub_1C9E45DCC()
{
  return MEMORY[0x1E0DF05B8]();
}

uint64_t sub_1C9E45DD8()
{
  return MEMORY[0x1E0DF0748]();
}

uint64_t sub_1C9E45DE4()
{
  return MEMORY[0x1E0DF0750]();
}

uint64_t sub_1C9E45DF0()
{
  return MEMORY[0x1E0CB1B50]();
}

uint64_t sub_1C9E45DFC()
{
  return MEMORY[0x1E0DEB258]();
}

uint64_t sub_1C9E45E08()
{
  return MEMORY[0x1E0DEB310]();
}

uint64_t sub_1C9E45E14()
{
  return MEMORY[0x1E0CB1C10]();
}

uint64_t sub_1C9E45E20()
{
  return MEMORY[0x1E0DF2270]();
}

uint64_t sub_1C9E45E2C()
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t sub_1C9E45E38()
{
  return MEMORY[0x1E0DF2288]();
}

uint64_t sub_1C9E45E44()
{
  return MEMORY[0x1E0DF2290]();
}

uint64_t sub_1C9E45E50()
{
  return MEMORY[0x1E0CB1E68]();
}

uint64_t sub_1C9E45E5C()
{
  return MEMORY[0x1E0DEF810]();
}

uint64_t sub_1C9E45E68()
{
  return MEMORY[0x1E0DEF8E0]();
}

uint64_t sub_1C9E45E74()
{
  return MEMORY[0x1E0DEF900]();
}

uint64_t sub_1C9E45E80()
{
  return MEMORY[0x1E0DEF910]();
}

uint64_t sub_1C9E45E8C()
{
  return MEMORY[0x1E0DEF920]();
}

uint64_t sub_1C9E45E98()
{
  return MEMORY[0x1E0DEF938]();
}

uint64_t sub_1C9E45EA4()
{
  return MEMORY[0x1E0DEF978]();
}

uint64_t sub_1C9E45EB0()
{
  return MEMORY[0x1E0DEF9F0]();
}

uint64_t sub_1C9E45EBC()
{
  return MEMORY[0x1E0DEFA18]();
}

uint64_t sub_1C9E45EC8()
{
  return MEMORY[0x1E0DEFA30]();
}

uint64_t sub_1C9E45ED4()
{
  return MEMORY[0x1E0DEFAA8]();
}

uint64_t sub_1C9E45EE0()
{
  return MEMORY[0x1E0DEFCD8]();
}

uint64_t sub_1C9E45EEC()
{
  return MEMORY[0x1E0DEFCE0]();
}

uint64_t sub_1C9E45EF8()
{
  return MEMORY[0x1E0DEFCE8]();
}

uint64_t sub_1C9E45F04()
{
  return MEMORY[0x1E0DF22E0]();
}

uint64_t sub_1C9E45F10()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t sub_1C9E45F1C()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t sub_1C9E45F28()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t sub_1C9E45F34()
{
  return MEMORY[0x1E0CB2480]();
}

uint64_t sub_1C9E45F40()
{
  return MEMORY[0x1E0DEBE50]();
}

uint64_t sub_1C9E45F4C()
{
  return MEMORY[0x1E0DEC060]();
}

uint64_t sub_1C9E45F58()
{
  return MEMORY[0x1E0DEC068]();
}

uint64_t sub_1C9E45F64()
{
  return MEMORY[0x1E0DEC078]();
}

uint64_t sub_1C9E45F70()
{
  return MEMORY[0x1E0DEC0B0]();
}

uint64_t sub_1C9E45F7C()
{
  return MEMORY[0x1E0DEC0E0]();
}

uint64_t sub_1C9E45F88()
{
  return MEMORY[0x1E0DEC0F8]();
}

uint64_t sub_1C9E45F94()
{
  return MEMORY[0x1E0DEC110]();
}

uint64_t sub_1C9E45FA0()
{
  return MEMORY[0x1E0DEC118]();
}

uint64_t sub_1C9E45FAC()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t sub_1C9E45FB8()
{
  return MEMORY[0x1E0DEC250]();
}

uint64_t sub_1C9E45FC4()
{
  return MEMORY[0x1E0DEC258]();
}

uint64_t sub_1C9E45FD0()
{
  return MEMORY[0x1E0DEC260]();
}

uint64_t sub_1C9E45FDC()
{
  return MEMORY[0x1E0DEC2A8]();
}

uint64_t sub_1C9E45FE8()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t sub_1C9E45FF4()
{
  return MEMORY[0x1E0DEC2F0]();
}

uint64_t sub_1C9E46000()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t sub_1C9E4600C()
{
  return MEMORY[0x1E0DEC3E8]();
}

uint64_t sub_1C9E46018()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t sub_1C9E46024()
{
  return MEMORY[0x1E0DEC5F8]();
}

uint64_t sub_1C9E46030()
{
  return MEMORY[0x1E0DEC660]();
}

uint64_t sub_1C9E4603C()
{
  return MEMORY[0x1E0DEC670]();
}

uint64_t sub_1C9E46048()
{
  return MEMORY[0x1E0DEC688]();
}

uint64_t sub_1C9E46054()
{
  return MEMORY[0x1E0DEC6C0]();
}

uint64_t sub_1C9E46060()
{
  return MEMORY[0x1E0DEC6C8]();
}

uint64_t sub_1C9E4606C()
{
  return MEMORY[0x1E0DEC8D8]();
}

uint64_t sub_1C9E46078()
{
  return MEMORY[0x1E0DEC8E0]();
}

uint64_t sub_1C9E46084()
{
  return MEMORY[0x1E0DECBE0]();
}

uint64_t sub_1C9E46090()
{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t sub_1C9E4609C()
{
  return MEMORY[0x1E0DECBF8]();
}

uint64_t sub_1C9E460A8()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t sub_1C9E460B4()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t sub_1C9E460C0()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t sub_1C9E460CC()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t sub_1C9E460D8()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t sub_1C9E460E4()
{
  return MEMORY[0x1E0DECF58]();
}

uint64_t sub_1C9E460F0()
{
  return MEMORY[0x1E0DECFC0]();
}

uint64_t sub_1C9E460FC()
{
  return MEMORY[0x1E0DECFF0]();
}

uint64_t sub_1C9E46108()
{
  return MEMORY[0x1E0DED090]();
}

uint64_t sub_1C9E46114()
{
  return MEMORY[0x1E0DED0F0]();
}

uint64_t sub_1C9E46120()
{
  return MEMORY[0x1E0DED120]();
}

uint64_t sub_1C9E4612C()
{
  return MEMORY[0x1E0DED1B0]();
}

uint64_t sub_1C9E46138()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t sub_1C9E46144()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t sub_1C9E46150()
{
  return MEMORY[0x1E0DED768]();
}

uint64_t sub_1C9E4615C()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t sub_1C9E46168()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t sub_1C9E46174()
{
  return MEMORY[0x1E0CB2650]();
}

uint64_t sub_1C9E46180()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t sub_1C9E4618C()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t sub_1C9E46198()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t sub_1C9E461A4()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t sub_1C9E461B0()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t sub_1C9E461BC()
{
  return MEMORY[0x1E0DEDF10]();
}

uint64_t sub_1C9E461C8()
{
  return MEMORY[0x1E0DEDF18]();
}

uint64_t sub_1C9E461D4()
{
  return MEMORY[0x1E0DEDF38]();
}

uint64_t sub_1C9E461E0()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t sub_1C9E461EC()
{
  return MEMORY[0x1E0DEDF48]();
}

uint64_t sub_1C9E461F8()
{
  return MEMORY[0x1E0DEE240]();
}

uint64_t sub_1C9E46204()
{
  return MEMORY[0x1E0DEE270]();
}

uint64_t sub_1C9E46210()
{
  return MEMORY[0x1E0DEE8E0]();
}

uint64_t sub_1C9E4621C()
{
  return MEMORY[0x1E0DEE8E8]();
}

uint64_t sub_1C9E46228()
{
  return MEMORY[0x1E0DEE978]();
}

uint64_t ASEnsureDataVault()
{
  return MEMORY[0x1E0D4DF60]();
}

uint64_t ATXActionPredictionInterface()
{
  return MEMORY[0x1E0CF8988]();
}

uint64_t ATXActivityTypeFromMode()
{
  return MEMORY[0x1E0CF8990]();
}

uint64_t ATXActivityTypeToBMUserFocusInferredModeType()
{
  return MEMORY[0x1E0D80CE0]();
}

uint64_t ATXActivityTypeToDNDModeSemanticType()
{
  return MEMORY[0x1E0CF8998]();
}

uint64_t ATXActivityTypeToModeSemanticType()
{
  return MEMORY[0x1E0D80CE8]();
}

uint64_t ATXActivityTypeToString()
{
  return MEMORY[0x1E0D80CF0]();
}

uint64_t ATXAppDirectoryInterface()
{
  return MEMORY[0x1E0CF89A0]();
}

uint64_t ATXAppPredictionXPCInterface()
{
  return MEMORY[0x1E0CF89B0]();
}

uint64_t ATXBundleIdIsFakeContainerBundleId()
{
  return MEMORY[0x1E0CF93A8]();
}

uint64_t ATXBundleIdIsSpecialWidgetExtensionBundleId()
{
  return MEMORY[0x1E0CF93B0]();
}

uint64_t ATXBundleIdReplacementForBundleId()
{
  return MEMORY[0x1E0CF93B8]();
}

uint64_t ATXBundleIdReplacementForBundleIdWithWebpageURLHint()
{
  return MEMORY[0x1E0CF93C0]();
}

uint64_t ATXCAStringForStackLayoutSize()
{
  return MEMORY[0x1E0CF89C0]();
}

uint64_t ATXCAStringForStackLocation()
{
  return MEMORY[0x1E0CF89C8]();
}

uint64_t ATXCacheAppendInteger()
{
  return MEMORY[0x1E0CF89D0]();
}

uint64_t ATXCacheFileJoinChunks()
{
  return MEMORY[0x1E0CF93C8]();
}

uint64_t ATXCacheFileRead()
{
  return MEMORY[0x1E0CF93D0]();
}

uint64_t ATXCacheFileSplitChunks()
{
  return MEMORY[0x1E0CF93D8]();
}

uint64_t ATXCacheFileWrite()
{
  return MEMORY[0x1E0CF93E0]();
}

uint64_t ATXCacheFileWriteChunks()
{
  return MEMORY[0x1E0CF93E8]();
}

uint64_t ATXDefaultWidgetSuggesterInterface()
{
  return MEMORY[0x1E0CF8A00]();
}

uint64_t ATXDeserializeTriggers()
{
  return MEMORY[0x1E0D80CF8]();
}

uint64_t ATXDetailedActionLoggingEnabled()
{
  return MEMORY[0x1E0CF9440]();
}

uint64_t ATXDigestOnboardingEntrySourceToString()
{
  return MEMORY[0x1E0CF8A10]();
}

uint64_t ATXDigestOnboardingFinalUIShownToString()
{
  return MEMORY[0x1E0CF8A18]();
}

uint64_t ATXDigestOnboardingOutcomeToString()
{
  return MEMORY[0x1E0CF8A20]();
}

uint64_t ATXDigestOnboardingSuggestionOutcomeToString()
{
  return MEMORY[0x1E0CF8A28]();
}

uint64_t ATXFaceSuggestionClientXPCInterface()
{
  return MEMORY[0x1E0CF8A38]();
}

uint64_t ATXHeroDataXPCInterface()
{
  return MEMORY[0x1E0D2FC60]();
}

uint64_t ATXHomeScreenSuggestionClientXPCInterface()
{
  return MEMORY[0x1E0CF8A58]();
}

uint64_t ATXHomeScreenSuggestionServerXPCInterface()
{
  return MEMORY[0x1E0CF8A60]();
}

uint64_t ATXInfoSuggestionXPCInterface()
{
  return MEMORY[0x1E0D810E0]();
}

uint64_t ATXIsSessionEndedByEvent()
{
  return MEMORY[0x1E0CF8A68]();
}

uint64_t ATXIsSessionStartedByEvent()
{
  return MEMORY[0x1E0CF8A70]();
}

uint64_t ATXLocalizationNotNeeded()
{
  return MEMORY[0x1E0CF9448]();
}

uint64_t ATXLockScreenNotificationRankerXPCInterface()
{
  return MEMORY[0x1E0CF8A78]();
}

uint64_t ATXMemoryPressureTypeToString()
{
  return MEMORY[0x1E0CF9450]();
}

uint64_t ATXModeAnchorModelSuggestionClientXPCInterface()
{
  return MEMORY[0x1E0D80D00]();
}

uint64_t ATXModeAnchorModelSuggestionServerXPCInterface()
{
  return MEMORY[0x1E0D80D08]();
}

uint64_t ATXModeConfigurationUIToString()
{
  return MEMORY[0x1E0CF8AA0]();
}

uint64_t ATXModeForDNDSemanticType()
{
  return MEMORY[0x1E0CF8AA8]();
}

uint64_t ATXModeFromActivityType()
{
  return MEMORY[0x1E0CF8AB0]();
}

uint64_t ATXModeToString()
{
  return MEMORY[0x1E0CF8AB8]();
}

uint64_t ATXNEventTypeFromString()
{
  return MEMORY[0x1E0CF8948]();
}

uint64_t ATXNEventTypeToString()
{
  return MEMORY[0x1E0CF8950]();
}

uint64_t ATXNotificationCategorizationXPCInterface()
{
  return MEMORY[0x1E0CF8AC0]();
}

uint64_t ATXNotificationDeliveryUIToString()
{
  return MEMORY[0x1E0CF8958]();
}

uint64_t ATXNotificationSuggestionEventTypeToString()
{
  return MEMORY[0x1E0CF8AD8]();
}

uint64_t ATXNotificationSuggestionScopeToString()
{
  return MEMORY[0x1E0CF8AE0]();
}

uint64_t ATXNotificationsLoggingInterface()
{
  return MEMORY[0x1E0CF8968]();
}

uint64_t ATXPBStackLocationForLocation()
{
  return MEMORY[0x1E0CF8AE8]();
}

uint64_t ATXSerializeTriggers()
{
  return MEMORY[0x1E0D80D10]();
}

uint64_t ATXSettingsActionsInterface()
{
  return MEMORY[0x1E0CF8B00]();
}

uint64_t ATXSleepSuggestionInterface()
{
  return MEMORY[0x1E0CF8B28]();
}

uint64_t ATXSlotSetsDeserialize()
{
  return MEMORY[0x1E0CF8B30]();
}

uint64_t ATXSlotSetsSerialize()
{
  return MEMORY[0x1E0CF8B38]();
}

uint64_t ATXSpecialWidgetKindAppPredictions()
{
  return MEMORY[0x1E0CF9458]();
}

uint64_t ATXSpecialWidgetKindFiles()
{
  return MEMORY[0x1E0CF9460]();
}

uint64_t ATXSpecialWidgetKindSiriSuggestions()
{
  return MEMORY[0x1E0CF9478]();
}

uint64_t ATXSportsInterface()
{
  return MEMORY[0x1E0CF8B40]();
}

uint64_t ATXStackKindForStack()
{
  return MEMORY[0x1E0CF8B50]();
}

uint64_t ATXStackLocationForPageAndIndex()
{
  return MEMORY[0x1E0CF8B58]();
}

uint64_t ATXStackLocationIsHomeScreen()
{
  return MEMORY[0x1E0CF8B60]();
}

uint64_t ATXStackLocationIsTodayPage()
{
  return MEMORY[0x1E0CF8B68]();
}

uint64_t ATXStringForStackKind()
{
  return MEMORY[0x1E0CF8B70]();
}

uint64_t ATXStringForStackLayoutSize()
{
  return MEMORY[0x1E0CF8B78]();
}

uint64_t ATXStringForStackLocation()
{
  return MEMORY[0x1E0CF8B80]();
}

uint64_t ATXStringToMode()
{
  return MEMORY[0x1E0CF8B88]();
}

uint64_t ATXSuggestedPagesInterface()
{
  return MEMORY[0x1E0CF8B90]();
}

uint64_t ATXSuggestionPredictionReasonEnumerateReasonCodes()
{
  return MEMORY[0x1E0D810F0]();
}

uint64_t ATXSuggestionTypeToString()
{
  return MEMORY[0x1E0CF8B98]();
}

uint64_t ATXUsageInsightsInterface()
{
  return MEMORY[0x1E0CF8BA8]();
}

uint64_t ATXUserEducationSuggestionFeedbackTypeToString()
{
  return MEMORY[0x1E0CF8BB8]();
}

uint64_t ATXUserEducationSuggestionTypeToString()
{
  return MEMORY[0x1E0CF8BC8]();
}

uint64_t ATXUserNotificationDeliveryMethodToString()
{
  return MEMORY[0x1E0CF8BD0]();
}

uint64_t ATXUserNotificationDeliveryReasonToString()
{
  return MEMORY[0x1E0CF8970]();
}

uint64_t ATXUserNotificationDeliveryUrgencyToString()
{
  return MEMORY[0x1E0CF8BD8]();
}

uint64_t AWDPostMetric()
{
  return MEMORY[0x1E0DD9AF0]();
}

uint64_t AnalyticsSendEvent()
{
  return MEMORY[0x1E0D15420]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1E0D15428]();
}

uint64_t BMUserFocusInferredModeOriginAsString()
{
  return MEMORY[0x1E0D01E00]();
}

uint64_t BMUserFocusInferredModeOriginFromLegacy()
{
  return MEMORY[0x1E0D80D20]();
}

uint64_t BMUserFocusInferredModeOriginToLegacy()
{
  return MEMORY[0x1E0D80D28]();
}

uint64_t BMUserFocusInferredModeOriginToString()
{
  return MEMORY[0x1E0D80D30]();
}

uint64_t BMUserFocusInferredModeTypeAsString()
{
  return MEMORY[0x1E0D01E08]();
}

uint64_t BMUserFocusInferredModeTypeFromBMUserFocusModeComputedSemanticType()
{
  return MEMORY[0x1E0D80D38]();
}

uint64_t BMUserFocusInferredModeTypeFromString()
{
  return MEMORY[0x1E0D01E10]();
}

uint64_t BMUserFocusInferredModeTypeToActivity()
{
  return MEMORY[0x1E0D80D40]();
}

uint64_t BMUserFocusInferredModeTypeToLegacy()
{
  return MEMORY[0x1E0D80D48]();
}

uint64_t BiomeLibrary()
{
  return MEMORY[0x1E0D01E18]();
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80368](data, *(_QWORD *)&len, md);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80370](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80378](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80380](c, data, *(_QWORD *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

CFArrayRef CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray)
{
  return (CFArrayRef)MEMORY[0x1E0C98040](locArray, prefArray);
}

uint64_t CFBundleCopyLocalizedStringForLocalization()
{
  return MEMORY[0x1E0C98060]();
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1E0C980E8](bundleID);
}

uint64_t CFBurstTrieContains()
{
  return MEMORY[0x1E0C981D0]();
}

uint64_t CFBurstTrieCreateFromMapBytes()
{
  return MEMORY[0x1E0C981F0]();
}

uint64_t CFBurstTrieRelease()
{
  return MEMORY[0x1E0C98208]();
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98508](theDict, applier, context);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

uint64_t CFPhoneNumberCreate()
{
  return MEMORY[0x1E0D17838]();
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A60](key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
  MEMORY[0x1E0C98A80](key, value, applicationID);
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1E0C98A98](applicationID, userName, hostName);
}

uint64_t CFQSortArray()
{
  return MEMORY[0x1E0C98B08]();
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C40]();
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
  MEMORY[0x1E0C98C80](rl, mode, block);
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
  MEMORY[0x1E0C98D68](rl);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x1E0C990C0](theString, range.location, range.length, buffer);
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1E0C990C8](theString);
}

uint64_t CHSWidgetFamilyDescription()
{
  return MEMORY[0x1E0D0FF20]();
}

uint64_t CHSWidgetFamilyFromATXStackLayoutSize()
{
  return MEMORY[0x1E0CF8BE0]();
}

uint64_t CHSWidgetFamilyIsAccessory()
{
  return MEMORY[0x1E0D0FF30]();
}

uint64_t CHSWidgetFamilyMaskContainsFamily()
{
  return MEMORY[0x1E0D0FF40]();
}

uint64_t CHSWidgetFamilyMaskDescription()
{
  return MEMORY[0x1E0D0FF48]();
}

uint64_t CHSWidgetFamilyMaskEnumerateFamilies()
{
  return MEMORY[0x1E0D0FF50]();
}

uint64_t CHSWidgetFamilyMaskFromWidgetFamily()
{
  return MEMORY[0x1E0D0FF58]();
}

uint64_t CKCanRetryForError()
{
  return MEMORY[0x1E0C946D8]();
}

uint64_t CKRetryAfterSecondsForError()
{
  return MEMORY[0x1E0C94A50]();
}

CLLocationCoordinate2D CLLocationCoordinate2DMake(CLLocationDegrees latitude, CLLocationDegrees longitude)
{
  double v2;
  double v3;
  CLLocationCoordinate2D result;

  MEMORY[0x1E0C9E308](latitude, longitude);
  result.longitude = v3;
  result.latitude = v2;
  return result;
}

uint64_t DNDModeLocalizedNameForSemanticType()
{
  return MEMORY[0x1E0D1D418]();
}

uint64_t DNDModeSemanticTypeToATXActivityType()
{
  return MEMORY[0x1E0D80D50]();
}

uint64_t DNDModeSemanticTypeToString()
{
  return MEMORY[0x1E0D1D420]();
}

uint64_t DNDStringFromConfigurationType()
{
  return MEMORY[0x1E0D1D4F8]();
}

uint64_t IOHIDEventGetDoubleValue()
{
  return MEMORY[0x1E0CBB108]();
}

uint64_t IOHIDEventSystemClientCancel()
{
  return MEMORY[0x1E0CBB1D8]();
}

uint64_t IOHIDEventSystemClientCreateWithType()
{
  return MEMORY[0x1E0CBB1F8]();
}

uint64_t IOHIDEventSystemClientRegisterEventCallback()
{
  return MEMORY[0x1E0CBB220]();
}

uint64_t IOHIDEventSystemClientScheduleWithDispatchQueue()
{
  return MEMORY[0x1E0CBB248]();
}

Boolean IOHIDEventSystemClientSetProperty(IOHIDEventSystemClientRef client, CFStringRef key, CFTypeRef property)
{
  return MEMORY[0x1E0CBB278](client, key, property);
}

uint64_t IOHIDEventSystemClientUnregisterEventCallback()
{
  return MEMORY[0x1E0CBB298]();
}

uint64_t IOHIDEventSystemClientUnscheduleFromDispatchQueue()
{
  return MEMORY[0x1E0CBB2B8]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MGGetStringAnswer()
{
  return MEMORY[0x1E0DE2B80]();
}

uint64_t MGRegisterForUpdates()
{
  return MEMORY[0x1E0DE2BA8]();
}

uint64_t MRMediaRemoteGetAppsSupportingBrowsableContentAPIs()
{
  return MEMORY[0x1E0D4BED8]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

uint64_t NSStringForATXHomeScreenStackChangeReason()
{
  return MEMORY[0x1E0CF8BF0]();
}

uint64_t NSStringForATXHomeScreenWidgetExplicitFeedback()
{
  return MEMORY[0x1E0CF8BF8]();
}

uint64_t NSStringForATXModeConfigurationType()
{
  return MEMORY[0x1E0CF8C00]();
}

uint64_t NSStringFromATXSuggestedPageType()
{
  return MEMORY[0x1E0CF8C08]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

uint64_t NSStringFromWidgetFamily()
{
  return MEMORY[0x1E0D0FF90]();
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

uint64_t PBDataWriterWriteBOOLField()
{
  return MEMORY[0x1E0D82C10]();
}

uint64_t PBDataWriterWriteDataField()
{
  return MEMORY[0x1E0D82C28]();
}

uint64_t PBDataWriterWriteDoubleField()
{
  return MEMORY[0x1E0D82C38]();
}

uint64_t PBDataWriterWriteFixed64Field()
{
  return MEMORY[0x1E0D82C48]();
}

uint64_t PBDataWriterWriteFloatField()
{
  return MEMORY[0x1E0D82C50]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x1E0D82C58]();
}

uint64_t PBDataWriterWriteInt64Field()
{
  return MEMORY[0x1E0D82C68]();
}

uint64_t PBDataWriterWriteStringField()
{
  return MEMORY[0x1E0D82C98]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x1E0D82CB0]();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return MEMORY[0x1E0D82CB8]();
}

uint64_t PBDataWriterWriteUint64Field()
{
  return MEMORY[0x1E0D82CC0]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x1E0D82CE0]();
}

uint64_t PBReaderReadData()
{
  return MEMORY[0x1E0D82CF0]();
}

uint64_t PBReaderReadString()
{
  return MEMORY[0x1E0D82D00]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x1E0D82D10]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x1E0D82D28]();
}

uint64_t PBRepeatedInt32Add()
{
  return MEMORY[0x1E0D82DD8]();
}

uint64_t PBRepeatedInt32Clear()
{
  return MEMORY[0x1E0D82DE0]();
}

uint64_t PBRepeatedInt32Copy()
{
  return MEMORY[0x1E0D82DE8]();
}

uint64_t PBRepeatedInt32Hash()
{
  return MEMORY[0x1E0D82DF0]();
}

uint64_t PBRepeatedInt32IsEqual()
{
  return MEMORY[0x1E0D82DF8]();
}

uint64_t PBRepeatedInt32NSArray()
{
  return MEMORY[0x1E0D82E00]();
}

uint64_t PBRepeatedInt32Set()
{
  return MEMORY[0x1E0D82E08]();
}

uint64_t PMLBuildChunkFile()
{
  return MEMORY[0x1E0D81088]();
}

uint64_t PMLReadChunkData()
{
  return MEMORY[0x1E0D81090]();
}

uint64_t PMMInitializeInOwnerProcess()
{
  return MEMORY[0x1E0D810C8]();
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x1E0CD65A0](rnd, count, bytes);
}

uint64_t WiFiDeviceClientCopyCurrentNetwork()
{
  return MEMORY[0x1E0D4FAF8]();
}

uint64_t WiFiDeviceClientGetTypeID()
{
  return MEMORY[0x1E0D4FB38]();
}

uint64_t WiFiDeviceClientRegisterExtendedLinkCallback()
{
  return MEMORY[0x1E0D4FB68]();
}

uint64_t WiFiManagerClientCopyDevices()
{
  return MEMORY[0x1E0D4FBE0]();
}

uint64_t WiFiManagerClientCreate()
{
  return MEMORY[0x1E0D4FC08]();
}

uint64_t WiFiManagerClientScheduleWithRunLoop()
{
  return MEMORY[0x1E0D4FC88]();
}

uint64_t WiFiManagerClientUnscheduleFromRunLoop()
{
  return MEMORY[0x1E0D4FCC0]();
}

uint64_t WiFiNetworkGetSSID()
{
  return MEMORY[0x1E0D4FD30]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return MEMORY[0x1E0C9A800]();
}

uint64_t _PASIsInternalDevice()
{
  return MEMORY[0x1E0D816E8]();
}

uint64_t _PASQMarksSeparatedByCommas()
{
  return MEMORY[0x1E0D81740]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return (std::bad_alloc *)MEMORY[0x1E0DE4DB0](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

void operator delete(void *__p)
{
  off_1E82D9918(__p);
}

uint64_t operator delete()
{
  return off_1E82D9920();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E82D9928(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_1E82D9930(__sz, a2);
}

uint64_t operator new()
{
  return off_1E82D9938();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1E0C80B68]();
}

uint64_t _objc_autoreleasePoolPop()
{
  return MEMORY[0x1E0DE7960]();
}

uint64_t _objc_autoreleasePoolPush()
{
  return MEMORY[0x1E0DE7970]();
}

uint64_t _os_crash()
{
  return MEMORY[0x1E0C81000]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1E0DEEA28]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

uint64_t allModes()
{
  return MEMORY[0x1E0CF9238]();
}

uint64_t allModesForModeSetupPrediction()
{
  return MEMORY[0x1E0CF9240]();
}

uint64_t allModesForTraining()
{
  return MEMORY[0x1E0CF9248]();
}

uint32_t arc4random(void)
{
  return MEMORY[0x1E0C81570]();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
  MEMORY[0x1E0C81580](__buf, __nbytes);
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1E0C81588](*(_QWORD *)&__upper_bound);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1E0C81738](__key, __base, __nel, __width, __compar);
}

void *__cdecl bsearch_b(const void *__key, const void *__base, size_t __nel, size_t __width, void *__compar)
{
  return (void *)MEMORY[0x1E0C81740](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

uint64_t catlas_saxpby_NEWLAPACK()
{
  return MEMORY[0x1E0C8BAE0]();
}

uint64_t cblas_sdot_NEWLAPACK()
{
  return MEMORY[0x1E0C8BBE0]();
}

uint64_t cblas_sgemv_NEWLAPACK()
{
  return MEMORY[0x1E0C8BC28]();
}

uint64_t cblas_snrm2_NEWLAPACK()
{
  return MEMORY[0x1E0C8BC50]();
}

uint64_t cblas_sscal_NEWLAPACK()
{
  return MEMORY[0x1E0C8BC68]();
}

const char *__cdecl class_getName(Class cls)
{
  return (const char *)MEMORY[0x1E0DE7AC8](cls);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

size_t compression_decode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x1E0DE5270](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(_QWORD *)&algorithm);
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x1E0C82B40](__x);
  return result;
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
  MEMORY[0x1E0C82BD8](iterations, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C60](flags, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C68](flags, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x1E0C82F28](source);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x1E0C82F88](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

void exit(int a1)
{
  MEMORY[0x1E0C83278](*(_QWORD *)&a1);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x1E0C83298](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

FILE *__cdecl fdopen(int a1, const char *a2)
{
  return (FILE *)MEMORY[0x1E0C83318](*(_QWORD *)&a1, a2);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C83448](a1, a2);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1E0C83488](*(_QWORD *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1E0C83490](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C834A0](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x1E0C83590](*(_QWORD *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

long double lgamma(long double __x)
{
  long double result;

  MEMORY[0x1E0C83B60](__x);
  return result;
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BC0](__x);
  return result;
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BE8](__x);
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1E0C83C38](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C83C40](a1, a2);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x1E0C83F08](memptr, alignment, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1E0C843E8](*(_QWORD *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1E0C843F8](name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_rethrow(void)
{
  MEMORY[0x1E0DE7C98]();
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

void objc_moveWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7D18](to, from);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

const char *__cdecl object_getClassName(id a1)
{
  return (const char *)MEMORY[0x1E0DE8000](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1E0C84488](a1, *(_QWORD *)&a2, *(_QWORD *)&a3, *(_QWORD *)&a4);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1E0C84970]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E40](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E48](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1E0C84E60](a1, *(_QWORD *)&a2);
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84E90](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x1E0C84E98](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EA0](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EB8](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EC0](a1);
}

ssize_t pwrite(int __fd, const void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1E0C84F68](*(_QWORD *)&__fd, __buf, __nbyte, a4);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x1E0C84F88](__base, __nel, __width, __compar);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1E0C85030](__ptr, __size);
}

const char *__cdecl sel_getName(SEL sel)
{
  return (const char *)MEMORY[0x1E0DE80C8](sel);
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x1E0C85418](__x);
  return result;
}

sparse_status sparse_commit(void *A)
{
  return MEMORY[0x1E0C8BE20](A);
}

sparse_status sparse_insert_entry_float(sparse_matrix_float A, float val, sparse_index i, sparse_index j)
{
  return MEMORY[0x1E0C8BE90](A, i, j, val);
}

sparse_matrix_float sparse_matrix_create_float(sparse_dimension M, sparse_dimension N)
{
  return (sparse_matrix_float)MEMORY[0x1E0C8BEB0](M, N);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE8580](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&n, a5);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1E0DE8650](a1);
}

int sqlite3_close_v2(sqlite3 *a1)
{
  return MEMORY[0x1E0DE8658](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1E0DE8660](a1, *(_QWORD *)&iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1E0DE86B8](a1, *(_QWORD *)&iCol);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x1E0DE8798](a1, sql, callback, a4, errmsg);
}

int sqlite3_file_control(sqlite3 *a1, const char *zDbName, int op, void *a4)
{
  return MEMORY[0x1E0DE87C0](a1, zDbName, *(_QWORD *)&op, a4);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1E0DE8870](filename, ppDb, *(_QWORD *)&flags, zVfs);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE88B0](pStmt);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1E0C85540](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

uint64_t stringForATXSuggestionPredictionReasonCode()
{
  return MEMORY[0x1E0D81270]();
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1E0DEEAE8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1E0DEEAF0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1E0DEEB28]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x1E0DF0F88]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1E0DF0F90]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x1E0DF0FA0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x1E0DF0FA8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x1E0DF0FB0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x1E0DF0FB8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x1E0DF0FC0]();
}

uint64_t swift_deletedMethodError()
{
  return MEMORY[0x1E0DEEB78]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1E0DEEBA8]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1E0DEEBE0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1E0DEEC00]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1E0DEEC18]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x1E0DEEC38]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1E0DEEC50]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1E0DEECB8]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x1E0DEECC0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x1E0DEED90]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1E0DEED98]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1E0DEEDC8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1E0DF1000]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1E0DF1008]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1E0DF1010]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x1E0DF1050]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1E0DEEEB8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x1E0DEEF20]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1E0DEEF38]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1E0DEEF40]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1E0DEEF48]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1E0DEEF78]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1E0DEEF98]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1E0DEEFA0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1E0DEEFA8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

float tanhf(float a1)
{
  float result;

  MEMORY[0x1E0C85800](a1);
  return result;
}

int unlink(const char *a1)
{
  return MEMORY[0x1E0C859B8](a1);
}

void vvexpf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x1E0C8D9D8](a1, a2, a3);
}

void vvlog2f(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x1E0C8DA80](a1, a2, a3);
}

xpc_object_t xpc_activity_copy_criteria(xpc_activity_t activity)
{
  return (xpc_object_t)MEMORY[0x1E0C85D80](activity);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return MEMORY[0x1E0C85D90](activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
  MEMORY[0x1E0C85D98](identifier, criteria, handler);
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return MEMORY[0x1E0C85DB8](activity, state);
}

void xpc_activity_unregister(const char *identifier)
{
  MEMORY[0x1E0C85DD0](identifier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1E0C862C8](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C862E0](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
  MEMORY[0x1E0C86310](xdict, key, value);
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
  MEMORY[0x1E0C86360](xdict, key, value);
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
  MEMORY[0x1E0C86390](xdict, key, string);
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
  MEMORY[0x1E0C866E8](stream, targetq, handler);
}

uint64_t xpc_transaction_exit_clean()
{
  return MEMORY[0x1E0C86778]();
}

