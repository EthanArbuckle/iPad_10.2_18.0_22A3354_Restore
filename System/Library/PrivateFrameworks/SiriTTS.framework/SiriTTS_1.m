uint64_t kaldi::nnet1::Padding2DComponent::WriteData(int a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;

  kaldi::WriteToken(a2, a3, (kaldi *)"<FmapXLen>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<FmapYLen>", v7, v8);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PadTop>", v9, v10);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PadBottom>", v11, v12);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PadLeft>", v13, v14);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<PadRight>", v15, v16);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  return kaldi::WriteBasicType<char>(a2, (int)a3);
}

uint64_t kaldi::nnet1::Padding2DComponent::Info(kaldi::nnet1::Padding2DComponent *this)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  (*(void (**)(kaldi::nnet1::Padding2DComponent *, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)this + 104))(this, v3, 0, 0);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v3[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v5);
}

void sub_1DE473C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Padding2DComponent::PropagateFnc(int *a1, uint64_t a2, uint64_t a3)
{
  kaldi::nnet1::Pad2D(a2, a3, a1[14], a1[15], a1[16], a1[17], a1[13], a1[12]);
}

void kaldi::nnet1::Pad2D(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  const char *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  void *v32;
  __int128 v33;
  __int128 v34;
  void *v35;
  __int128 v36;
  __int128 v37;

  v29 = a8;
  if (a5 > 0 || a3 > 0 || a4 > 0 || a6 >= 1)
  {
    kaldi::CuMatrixBase<float>::SetZero(a2);
    a8 = v29;
  }
  v24 = *(_DWORD *)(a1 + 16) / (a8 * a7);
  v25 = a8 * a7;
  if (v24 >= 1)
  {
    v13 = 0;
    v14 = a6 + a5 + a8;
    v15 = -a3;
    v16 = a5 & (a5 >> 31);
    v17 = (a6 & (a6 >> 31)) + a8 + v16;
    v28 = -v16;
    v27 = (a5 & ~(a5 >> 31)) + a3 * v14;
    v23 = v14 * (a7 + a4 + a3);
    do
    {
      v26 = v13;
      if (a7 >= 1)
      {
        v18 = 0;
        v19 = v27;
        v20 = v28;
        do
        {
          if (v18 >= v15 && v18 < a7 + a4)
          {
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v35, a2, 0, *(_DWORD *)(a2 + 20), (const char *)v19, v17);
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v32, a1, 0, *(_DWORD *)(a1 + 20), (const char *)v20, v17);
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v35, (uint64_t)&v32, 111, v21, v22);
            v32 = &unk_1EA926508;
            v33 = 0u;
            v34 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v32);
            v35 = &unk_1EA926508;
            v36 = 0u;
            v37 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v35);
            a8 = v29;
          }
          ++v18;
          v20 = (v20 + a8);
          v19 = (v19 + v14);
        }
        while (a7 != v18);
      }
      v13 = v26 + 1;
      v28 += v25;
      v27 += v23;
    }
    while (v26 + 1 != v24);
  }
}

void sub_1DE473E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _OWORD *v22;
  _OWORD *v23;

  a17 = &unk_1EA926508;
  *v23 = 0u;
  v23[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a17);
  a22 = &unk_1EA926508;
  *v22 = 0u;
  v22[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a22);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Padding2DComponent::BackpropagateFnc(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::nnet1::Pad2D(a4, a5, -a1[14], -a1[15], -a1[16], -a1[17], a1[14] + a1[13] + a1[15], a1[16] + a1[12] + a1[17]);
}

void kaldi::nnet1::CnnRearrangeComponent::~CnnRearrangeComponent(kaldi::nnet1::CnnRearrangeComponent *this)
{
  kaldi::nnet1::CnnRearrangeComponent::~CnnRearrangeComponent(this);
  JUMPOUT(0x1DF0ED014);
}

{
  _QWORD *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1EA929B00;
  v2 = (_QWORD *)((char *)this + 72);
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
    free(v3);
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
    free(v4);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  kaldi::nnet1::Component::~Component(this);
}

uint64_t kaldi::nnet1::CnnRearrangeComponent::Copy(kaldi::nnet1::CnnRearrangeComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1EA929B00;
  kaldi::CuArray<int>::CuArray((int *)(v2 + 48), (uint64_t)this + 48, v4, v5, v6);
  kaldi::CuArray<int>::CuArray((int *)(v2 + 72), (uint64_t)this + 72, v7, v8, v9);
  return v2;
}

void sub_1DE473FBC(_Unwind_Exception *a1)
{
  kaldi::nnet1::Component *v1;
  _QWORD *v2;
  void *v4;

  v4 = (void *)*((_QWORD *)v1 + 7);
  if (v4)
    free(v4);
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  kaldi::nnet1::Component::~Component(v1);
  MEMORY[0x1DF0ED014](v1, 0x1091C40DB89F4D6);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::CnnRearrangeComponent::GetType(kaldi::nnet1::CnnRearrangeComponent *this)
{
  return 1036;
}

void kaldi::nnet1::PaddingComponent::~PaddingComponent(kaldi::nnet1::PaddingComponent *this)
{
  kaldi::nnet1::Component::~Component(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::nnet1::PaddingComponent::Copy(kaldi::nnet1::PaddingComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1EA9284F0;
  *(_OWORD *)(v2 + 48) = *((_OWORD *)this + 3);
  return v2;
}

void sub_1DE4740C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C40E1B45FB4);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::PaddingComponent::GetType(kaldi::nnet1::PaddingComponent *this)
{
  return 1037;
}

void kaldi::nnet1::Padding2DComponent::~Padding2DComponent(kaldi::nnet1::Padding2DComponent *this)
{
  kaldi::nnet1::Component::~Component(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::nnet1::Padding2DComponent::Copy(kaldi::nnet1::Padding2DComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)v2 = off_1EA92D6D8;
  *(_QWORD *)(v2 + 8) = v3;
  *(_WORD *)(v2 + 16) = *((_WORD *)this + 8);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(v2 + 24), *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
  *(_QWORD *)v2 = &off_1EA929318;
  *(_OWORD *)(v2 + 48) = *((_OWORD *)this + 3);
  *(_QWORD *)(v2 + 64) = *((_QWORD *)this + 8);
  return v2;
}

void sub_1DE47419C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C406EF1CAE1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Padding2DComponent::GetType(kaldi::nnet1::Padding2DComponent *this)
{
  return 1038;
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29[35];

  *(_QWORD *)a1 = off_1EA92D6D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1EA929750;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_QWORD *)(a1 + 88) = &unk_1EA92C960;
  *(_QWORD *)(a1 + 96) = &unk_1EA92C988;
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)a1 = &unk_1EA92C828;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 168), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 192), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 3);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 216), *(_QWORD *)(a2 + 216), *(_QWORD *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 224) - *(_QWORD *)(a2 + 216)) >> 4));
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 240), *(_QWORD *)(a2 + 240), *(_QWORD *)(a2 + 248), (uint64_t)(*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 5);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 288), *(const void **)(a2 + 288), *(_QWORD *)(a2 + 296), (uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 312), *(const void **)(a2 + 312), *(_QWORD *)(a2 + 320), (uint64_t)(*(_QWORD *)(a2 + 320) - *(_QWORD *)(a2 + 312)) >> 2);
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_BYTE *)(a1 + 480) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29, "ConvolutionalMaxPoolingComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 133);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  v6 = *(_QWORD *)(a2 + 152);
  if (v6)
  {
    v7 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v7, v6);
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), v7);
  }
  v8 = *(_QWORD **)(a2 + 160);
  if (v8)
  {
    kaldi::NewCuSubOrVec<float>(v8, *(unsigned __int8 *)(a1 + 16), v29);
    v9 = v29[0];
    v29[0] = 0;
    v10 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v11 = v29[0];
      v29[0] = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    }
  }
  v13 = *(_QWORD *)(a1 + 168);
  v12 = *(_QWORD *)(a1 + 176);
  if (v12 != v13)
  {
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 168) + 8 * v14);
      if (v15)
      {
        kaldi::NewCuSubOrMat<float>(v15, *(unsigned __int8 *)(a1 + 16), v29);
        v16 = *(_QWORD *)(a1 + 168);
        v17 = v29[0];
        v29[0] = 0;
        v18 = *(_QWORD *)(v16 + 8 * v14);
        *(_QWORD *)(v16 + 8 * v14) = v17;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        v19 = v29[0];
        v29[0] = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
        v13 = *(_QWORD *)(a1 + 168);
        v12 = *(_QWORD *)(a1 + 176);
      }
      ++v14;
    }
    while (v14 < (v12 - v13) >> 3);
  }
  v21 = *(_QWORD *)(a1 + 192);
  v20 = *(_QWORD *)(a1 + 200);
  if (v20 != v21)
  {
    v22 = 0;
    do
    {
      v23 = *(_QWORD **)(*(_QWORD *)(a2 + 192) + 8 * v22);
      if (v23)
      {
        kaldi::NewCuSubOrVec<float>(v23, *(unsigned __int8 *)(a1 + 16), v29);
        v24 = *(_QWORD *)(a1 + 192);
        v25 = v29[0];
        v29[0] = 0;
        v26 = *(_QWORD *)(v24 + 8 * v22);
        *(_QWORD *)(v24 + 8 * v22) = v25;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        v27 = v29[0];
        v29[0] = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v21 = *(_QWORD *)(a1 + 192);
        v20 = *(_QWORD *)(a1 + 200);
      }
      ++v22;
    }
    while (v22 < (v20 - v21) >> 3);
  }
  if (*(_QWORD *)(a2 + 496) != *(_QWORD *)(a2 + 488))
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator((_QWORD *)a1, (uint64_t *)(a1 + 488));
  return a1;
}

void sub_1DE474610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  kaldi::nnet1::UpdatableComponent *v16;
  void **v17;
  uint64_t *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  v19 = (void *)*((_QWORD *)v16 + 57);
  if (v19)
    operator delete(v19);
  a16 = (_QWORD *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v20 = *a12;
  if (*a12)
  {
    *((_QWORD *)v16 + 40) = v20;
    operator delete(v20);
  }
  v21 = *a13;
  if (*a13)
  {
    *((_QWORD *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v22 = *((_QWORD *)v16 + 20);
  *((_QWORD *)v16 + 20) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v18, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a14);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29[35];

  *(_QWORD *)a1 = off_1EA92D6D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1EA929750;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_QWORD *)(a1 + 88) = &unk_1EA92CAE8;
  *(_QWORD *)(a1 + 96) = &unk_1EA92CB10;
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)a1 = &unk_1EA92C9B0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 168), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 192), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 3);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 216), *(_QWORD *)(a2 + 216), *(_QWORD *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 224) - *(_QWORD *)(a2 + 216)) >> 4));
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 240), *(_QWORD *)(a2 + 240), *(_QWORD *)(a2 + 248), (uint64_t)(*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 5);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 288), *(const void **)(a2 + 288), *(_QWORD *)(a2 + 296), (uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 312), *(const void **)(a2 + 312), *(_QWORD *)(a2 + 320), (uint64_t)(*(_QWORD *)(a2 + 320) - *(_QWORD *)(a2 + 312)) >> 2);
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_BYTE *)(a1 + 480) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29, "ConvolutionalMaxPoolingComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 133);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  v6 = *(_QWORD *)(a2 + 152);
  if (v6)
  {
    v7 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix(v7, v6);
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), v7);
  }
  v8 = *(_QWORD **)(a2 + 160);
  if (v8)
  {
    kaldi::NewCuSubOrVec<float>(v8, *(unsigned __int8 *)(a1 + 16), v29);
    v9 = v29[0];
    v29[0] = 0;
    v10 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v11 = v29[0];
      v29[0] = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    }
  }
  v13 = *(_QWORD *)(a1 + 168);
  v12 = *(_QWORD *)(a1 + 176);
  if (v12 != v13)
  {
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 168) + 8 * v14);
      if (v15)
      {
        kaldi::NewCuSubOrMat<float>(v15, *(unsigned __int8 *)(a1 + 16), v29);
        v16 = *(_QWORD *)(a1 + 168);
        v17 = v29[0];
        v29[0] = 0;
        v18 = *(_QWORD *)(v16 + 8 * v14);
        *(_QWORD *)(v16 + 8 * v14) = v17;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        v19 = v29[0];
        v29[0] = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
        v13 = *(_QWORD *)(a1 + 168);
        v12 = *(_QWORD *)(a1 + 176);
      }
      ++v14;
    }
    while (v14 < (v12 - v13) >> 3);
  }
  v21 = *(_QWORD *)(a1 + 192);
  v20 = *(_QWORD *)(a1 + 200);
  if (v20 != v21)
  {
    v22 = 0;
    do
    {
      v23 = *(_QWORD **)(*(_QWORD *)(a2 + 192) + 8 * v22);
      if (v23)
      {
        kaldi::NewCuSubOrVec<float>(v23, *(unsigned __int8 *)(a1 + 16), v29);
        v24 = *(_QWORD *)(a1 + 192);
        v25 = v29[0];
        v29[0] = 0;
        v26 = *(_QWORD *)(v24 + 8 * v22);
        *(_QWORD *)(v24 + 8 * v22) = v25;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        v27 = v29[0];
        v29[0] = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v21 = *(_QWORD *)(a1 + 192);
        v20 = *(_QWORD *)(a1 + 200);
      }
      ++v22;
    }
    while (v22 < (v20 - v21) >> 3);
  }
  if (*(_QWORD *)(a2 + 496) != *(_QWORD *)(a2 + 488))
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator((_QWORD *)a1, (uint64_t *)(a1 + 488));
  return a1;
}

void sub_1DE474B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  kaldi::nnet1::UpdatableComponent *v16;
  void **v17;
  uint64_t *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  v19 = (void *)*((_QWORD *)v16 + 57);
  if (v19)
    operator delete(v19);
  a16 = (_QWORD *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v20 = *a12;
  if (*a12)
  {
    *((_QWORD *)v16 + 40) = v20;
    operator delete(v20);
  }
  v21 = *a13;
  if (*a13)
  {
    *((_QWORD *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v22 = *((_QWORD *)v16 + 20);
  *((_QWORD *)v16 + 20) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v18, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a14);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0;
    v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
    v10 = 0;
    v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_1DE474D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 8);
  v10 = *a1 + 8 * (v4 >> 6);
  v16 = *(_QWORD *)a2;
  v17 = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

unint64_t *std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8;
  unint64_t *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v8 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)__src);
  if (v8 <= 0)
  {
    v16 = *(unint64_t **)a5;
  }
  else
  {
    v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2))
        v10 = 64 - a2;
      else
        v10 = v8;
      v8 -= v10;
      v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0)
      v13 = v8;
    else
      v13 = v8 + 63;
    v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    v15 = v8 - (v14 << 6);
    v16 = &__src[v14];
    *(_QWORD *)a5 = v16;
    if (v15 >= 1)
    {
      *v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(_QWORD *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29[35];

  *(_QWORD *)a1 = off_1EA92D6D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1EA929750;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_QWORD *)(a1 + 88) = &unk_1EA92CAE8;
  *(_QWORD *)(a1 + 96) = &unk_1EA92CB10;
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)a1 = &unk_1EA92C9B0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 168), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 192), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 3);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 216), *(_QWORD *)(a2 + 216), *(_QWORD *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 224) - *(_QWORD *)(a2 + 216)) >> 4));
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 240), *(_QWORD *)(a2 + 240), *(_QWORD *)(a2 + 248), (uint64_t)(*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 5);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 288), *(const void **)(a2 + 288), *(_QWORD *)(a2 + 296), (uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 312), *(const void **)(a2 + 312), *(_QWORD *)(a2 + 320), (uint64_t)(*(_QWORD *)(a2 + 320) - *(_QWORD *)(a2 + 312)) >> 2);
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_BYTE *)(a1 + 480) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29, "ConvolutionalMaxPoolingComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 133);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  v6 = *(int **)(a2 + 152);
  if (v6)
  {
    v7 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix<signed char>(v7, v6);
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), v7);
  }
  v8 = *(_QWORD **)(a2 + 160);
  if (v8)
  {
    kaldi::NewCuSubOrVec<float>(v8, *(unsigned __int8 *)(a1 + 16), v29);
    v9 = v29[0];
    v29[0] = 0;
    v10 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v11 = v29[0];
      v29[0] = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    }
  }
  v13 = *(_QWORD *)(a1 + 168);
  v12 = *(_QWORD *)(a1 + 176);
  if (v12 != v13)
  {
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 168) + 8 * v14);
      if (v15)
      {
        kaldi::NewCuSubOrMat<float>(v15, *(unsigned __int8 *)(a1 + 16), v29);
        v16 = *(_QWORD *)(a1 + 168);
        v17 = v29[0];
        v29[0] = 0;
        v18 = *(_QWORD *)(v16 + 8 * v14);
        *(_QWORD *)(v16 + 8 * v14) = v17;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        v19 = v29[0];
        v29[0] = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
        v13 = *(_QWORD *)(a1 + 168);
        v12 = *(_QWORD *)(a1 + 176);
      }
      ++v14;
    }
    while (v14 < (v12 - v13) >> 3);
  }
  v21 = *(_QWORD *)(a1 + 192);
  v20 = *(_QWORD *)(a1 + 200);
  if (v20 != v21)
  {
    v22 = 0;
    do
    {
      v23 = *(_QWORD **)(*(_QWORD *)(a2 + 192) + 8 * v22);
      if (v23)
      {
        kaldi::NewCuSubOrVec<float>(v23, *(unsigned __int8 *)(a1 + 16), v29);
        v24 = *(_QWORD *)(a1 + 192);
        v25 = v29[0];
        v29[0] = 0;
        v26 = *(_QWORD *)(v24 + 8 * v22);
        *(_QWORD *)(v24 + 8 * v22) = v25;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        v27 = v29[0];
        v29[0] = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v21 = *(_QWORD *)(a1 + 192);
        v20 = *(_QWORD *)(a1 + 200);
      }
      ++v22;
    }
    while (v22 < (v20 - v21) >> 3);
  }
  if (*(_QWORD *)(a2 + 496) != *(_QWORD *)(a2 + 488))
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator((_QWORD *)a1, (uint64_t *)(a1 + 488));
  return a1;
}

void sub_1DE475660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  kaldi::nnet1::UpdatableComponent *v16;
  void **v17;
  uint64_t *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  v19 = (void *)*((_QWORD *)v16 + 57);
  if (v19)
    operator delete(v19);
  a16 = (_QWORD *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v20 = *a12;
  if (*a12)
  {
    *((_QWORD *)v16 + 40) = v20;
    operator delete(v20);
  }
  v21 = *a13;
  if (*a13)
  {
    *((_QWORD *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v22 = *((_QWORD *)v16 + 20);
  *((_QWORD *)v16 + 20) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v18, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a14);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29[35];

  *(_QWORD *)a1 = off_1EA92D6D8;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1EA929750;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_QWORD *)(a1 + 88) = &unk_1EA92C960;
  *(_QWORD *)(a1 + 96) = &unk_1EA92C988;
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)a1 = &unk_1EA92C828;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 168), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 192), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 3);
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 216), *(_QWORD *)(a2 + 216), *(_QWORD *)(a2 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 224) - *(_QWORD *)(a2 + 216)) >> 4));
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 240), *(_QWORD *)(a2 + 240), *(_QWORD *)(a2 + 248), (uint64_t)(*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 5);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 288), *(const void **)(a2 + 288), *(_QWORD *)(a2 + 296), (uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 312), *(const void **)(a2 + 312), *(_QWORD *)(a2 + 320), (uint64_t)(*(_QWORD *)(a2 + 320) - *(_QWORD *)(a2 + 312)) >> 2);
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_BYTE *)(a1 + 480) = 0;
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29, "ConvolutionalMaxPoolingComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-convolutional-maxpooling-component.cc", 133);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  v6 = *(int **)(a2 + 152);
  if (v6)
  {
    v7 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix<short>(v7, v6);
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 152), v7);
  }
  v8 = *(_QWORD **)(a2 + 160);
  if (v8)
  {
    kaldi::NewCuSubOrVec<float>(v8, *(unsigned __int8 *)(a1 + 16), v29);
    v9 = v29[0];
    v29[0] = 0;
    v10 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v9;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v11 = v29[0];
      v29[0] = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    }
  }
  v13 = *(_QWORD *)(a1 + 168);
  v12 = *(_QWORD *)(a1 + 176);
  if (v12 != v13)
  {
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 168) + 8 * v14);
      if (v15)
      {
        kaldi::NewCuSubOrMat<float>(v15, *(unsigned __int8 *)(a1 + 16), v29);
        v16 = *(_QWORD *)(a1 + 168);
        v17 = v29[0];
        v29[0] = 0;
        v18 = *(_QWORD *)(v16 + 8 * v14);
        *(_QWORD *)(v16 + 8 * v14) = v17;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        v19 = v29[0];
        v29[0] = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
        v13 = *(_QWORD *)(a1 + 168);
        v12 = *(_QWORD *)(a1 + 176);
      }
      ++v14;
    }
    while (v14 < (v12 - v13) >> 3);
  }
  v21 = *(_QWORD *)(a1 + 192);
  v20 = *(_QWORD *)(a1 + 200);
  if (v20 != v21)
  {
    v22 = 0;
    do
    {
      v23 = *(_QWORD **)(*(_QWORD *)(a2 + 192) + 8 * v22);
      if (v23)
      {
        kaldi::NewCuSubOrVec<float>(v23, *(unsigned __int8 *)(a1 + 16), v29);
        v24 = *(_QWORD *)(a1 + 192);
        v25 = v29[0];
        v29[0] = 0;
        v26 = *(_QWORD *)(v24 + 8 * v22);
        *(_QWORD *)(v24 + 8 * v22) = v25;
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
        v27 = v29[0];
        v29[0] = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        v21 = *(_QWORD *)(a1 + 192);
        v20 = *(_QWORD *)(a1 + 200);
      }
      ++v22;
    }
    while (v22 < (v20 - v21) >> 3);
  }
  if (*(_QWORD *)(a2 + 496) != *(_QWORD *)(a2 + 488))
    kaldi::nnet1::ConvolutionalMaxPoolingComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator((_QWORD *)a1, (uint64_t *)(a1 + 488));
  return a1;
}

void sub_1DE475BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, void **a12, void **a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  kaldi::nnet1::UpdatableComponent *v16;
  void **v17;
  uint64_t *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v17);
  v19 = (void *)*((_QWORD *)v16 + 57);
  if (v19)
    operator delete(v19);
  a16 = (_QWORD *)((char *)v16 + 432);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 384);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 360);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (_QWORD *)((char *)v16 + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v20 = *a12;
  if (*a12)
  {
    *((_QWORD *)v16 + 40) = v20;
    operator delete(v20);
  }
  v21 = *a13;
  if (*a13)
  {
    *((_QWORD *)v16 + 37) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v22 = *((_QWORD *)v16 + 20);
  *((_QWORD *)v16 + 20) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v18, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a14);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::FixedAttentionComponent::FixedAttentionComponent(kaldi::nnet1::FixedAttentionComponent *this, int a2, int a3)
{
  double result;

  *((_DWORD *)this + 46) = a2;
  *((_DWORD *)this + 47) = a3;
  *((_WORD *)this + 96) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = &off_1EA9284D0;
  *(_OWORD *)((char *)this + 232) = xmmword_1DEC3D450;
  *((_DWORD *)this + 62) = -1082130432;
  *(_QWORD *)((char *)this + 252) = 0x100000003;
  *((_WORD *)this + 130) = 0;
  *((_BYTE *)this + 262) = 0;
  *((_QWORD *)this + 1) = -1;
  *(_QWORD *)this = &off_1EA92A310;
  *((_QWORD *)this + 22) = &off_1EA92A518;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &unk_1EA92DFA8;
  *((_BYTE *)this + 64) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 9) = &unk_1EA92DFA8;
  *((_BYTE *)this + 112) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 15) = &unk_1EA92DFA8;
  *((_BYTE *)this + 160) = 0;
  *((_BYTE *)this + 168) = 0;
  return result;
}

kaldi::nnet1::FixedAttentionComponent *kaldi::nnet1::FixedAttentionComponent::FixedAttentionComponent(kaldi::nnet1::FixedAttentionComponent *this, const kaldi::nnet1::FixedAttentionComponent *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = *(_QWORD *)(*(_QWORD *)a2 - 24);
  *((_QWORD *)this + 22) = &off_1EA92A518;
  *((_QWORD *)this + 23) = *(_QWORD *)((char *)a2 + v6 + 8);
  *((_WORD *)this + 96) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = &off_1EA9284D0;
  *(_OWORD *)((char *)this + 232) = xmmword_1DEC3D450;
  *((_DWORD *)this + 62) = -1082130432;
  *(_QWORD *)((char *)this + 252) = 0x100000003;
  *((_WORD *)this + 130) = 0;
  *((_BYTE *)this + 262) = 0;
  *((_QWORD *)this + 1) = -1;
  *(_QWORD *)this = &off_1EA92A310;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 3) = &unk_1EA92DFA8;
  v7 = (char *)this + 24;
  *((_BYTE *)this + 64) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 9) = &unk_1EA92DFA8;
  v8 = (char *)this + 72;
  *((_BYTE *)this + 112) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 15) = &unk_1EA92DFA8;
  v9 = (char *)this + 120;
  *((_BYTE *)this + 160) = 0;
  v10 = *((_QWORD *)a2 + 2);
  if (!v10)
    kaldi::KaldiAssertFailure_((kaldi *)"FixedAttentionComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)0x23, "src.component_", a5);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 2) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  kaldi::CuMatrix<float>::operator=((uint64_t)v7, (uint64_t)a2 + 24);
  kaldi::CuMatrix<float>::operator=((uint64_t)v8, (uint64_t)a2 + 72);
  kaldi::CuMatrix<float>::operator=((uint64_t)v9, (uint64_t)a2 + 120);
  *((_BYTE *)this + 168) = *((_BYTE *)a2 + 168);
  return this;
}

void sub_1DE475F2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  kaldi::nnet1::UpdatableComponent *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  kaldi::CuMatrix<float>::~CuMatrix(v5);
  kaldi::CuMatrix<float>::~CuMatrix(v4);
  kaldi::CuMatrix<float>::~CuMatrix(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v2);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FixedAttentionComponent::~FixedAttentionComponent(kaldi::nnet1::FixedAttentionComponent *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[3];
  v4 = *((_QWORD *)this + 2);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 2) = 0;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 120);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 72);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 24);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
}

void kaldi::nnet1::FixedAttentionComponent::~FixedAttentionComponent(kaldi::nnet1::FixedAttentionComponent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 176));
}

{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 176));
  JUMPOUT(0x1DF0ED014);
}

void `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::~FixedAttentionComponent(kaldi::nnet1::FixedAttentionComponent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 176));
}

{
  kaldi::nnet1::FixedAttentionComponent::~FixedAttentionComponent((kaldi::nnet1::FixedAttentionComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t kaldi::nnet1::FixedAttentionComponent::Copy(kaldi::nnet1::FixedAttentionComponent *this)
{
  kaldi::nnet1::FixedAttentionComponent *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;

  v2 = (kaldi::nnet1::FixedAttentionComponent *)operator new();
  kaldi::nnet1::FixedAttentionComponent::FixedAttentionComponent(v2, this, v3, v4, v5);
  return (uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_1DE4760D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10A1C40CEA1F95ALL);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::Copy(kaldi::nnet1::FixedAttentionComponent *this)
{
  return kaldi::nnet1::FixedAttentionComponent::Copy((kaldi::nnet1::FixedAttentionComponent *)((char *)this
                                                                                             + *(_QWORD *)(*(_QWORD *)this - 32)));
}

uint64_t kaldi::nnet1::FixedAttentionComponent::GetType(kaldi::nnet1::FixedAttentionComponent *this)
{
  return 279;
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::GetType(kaldi::nnet1::FixedAttentionComponent *this)
{
  return 279;
}

void kaldi::nnet1::FixedAttentionComponent::InitData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t *v6;
  char *v7;
  _QWORD *v8;
  BOOL v10;
  uint64_t v11;
  void *v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  void **v17;
  void *v18;
  int v19;
  uint64_t v21;
  kaldi::nnet1::Component *v22;
  _QWORD *v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  const void *v30;
  void *v31;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD v39[35];
  uint64_t v40;
  void **v41;
  uint64_t v42;
  uint64_t v43;
  void *v44[4];

  memset(v44, 0, 24);
  v6 = a2 + 4;
  v7 = (char *)a1 + 12;
  v8 = a1 + 1;
  while (1)
  {
    if ((*((_BYTE *)v6 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_44;
    kaldi::ReadToken(a2, 0, (uint64_t)v44, a4, a5);
    if (SHIBYTE(v44[2]) < 0)
      break;
    if (HIBYTE(v44[2]) == 15)
    {
      v16 = v44[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v44 + 7) == (void *)0x3E736E6F69746E65;
      v11 = (uint64_t)v7;
      if (!v16)
      {
LABEL_35:
        if (HIBYTE(v44[2]) == 12)
        {
          v17 = v44;
          goto LABEL_39;
        }
        goto LABEL_59;
      }
    }
    else
    {
      if (HIBYTE(v44[2]) != 22)
        goto LABEL_35;
      v10 = v44[0] == (void *)0x53656372756F533CLL
         && v44[1] == (void *)0x656D694465746174
         && *(void **)((char *)&v44[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      v11 = (uint64_t)v8;
      if (!v10)
        goto LABEL_59;
    }
LABEL_34:
    kaldi::ReadBasicType<int>(a2, 0, v11, a4, a5);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v12 = v44[1];
  if (v44[1] != (void *)15)
  {
    if (v44[1] != (void *)22)
      goto LABEL_37;
    v13 = *(_QWORD *)v44[0] == 0x53656372756F533CLL && *((_QWORD *)v44[0] + 1) == 0x656D694465746174;
    v14 = v13 && *(_QWORD *)((char *)v44[0] + 14) == 0x3E6E6F69736E656DLL;
    v11 = (uint64_t)v8;
    if (!v14)
      goto LABEL_37;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)v44[0] == 0x6574744178614D3CLL && *(_QWORD *)((char *)v44[0] + 7) == 0x3E736E6F69746E65;
  v11 = (uint64_t)v7;
  if (v15)
    goto LABEL_34;
  v12 = v44[1];
LABEL_37:
  if (v12 != (void *)12)
    goto LABEL_59;
  v17 = (void **)v44[0];
LABEL_39:
  v18 = *v17;
  v19 = *((_DWORD *)v17 + 2);
  if (v18 != (void *)0x6E6F706D6F432F3CLL || v19 != 1047817829)
  {
LABEL_59:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", 81);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v44[2]) >= 0)
      v33 = v44;
    else
      v33 = (void **)v44[0];
    if (SHIBYTE(v44[2]) >= 0)
      v34 = HIBYTE(v44[2]);
    else
      v34 = (uint64_t)v44[1];
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" (SourceStateDimension|MaxAttentions)", 37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v39);
  }
LABEL_44:
  v21 = a1[2];
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v41 = 0;
  v42 = 0;
  v43 = 0;
  kaldi::ReadToken(a2, 0, (uint64_t)&v41, a4, a5);
  v22 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v41);
  v40 = 0;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v39, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", 91, 3);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Initializing component of type ", 31);
    if (v43 >= 0)
      v24 = (void **)&v41;
    else
      v24 = v41;
    if (v43 >= 0)
      v25 = HIBYTE(v43);
    else
      v25 = v42;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v39);
  }
  kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v40 + 4, v26, v27);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v40, v28, v29);
  v30 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v22, HIDWORD(v40), v40);
  a1[2] = v31;
  (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v31 + 96))(v31, a2, a3);
  kaldi::nnet1::FixedAttentionComponent::Check(a1);
  if (SHIBYTE(v43) < 0)
    operator delete(v41);
  if (SHIBYTE(v44[2]) < 0)
    operator delete(v44[0]);
}

void *kaldi::nnet1::FixedAttentionComponent::Check(void *this)
{
  uint64_t v1;
  _DWORD *v2;
  int v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD v11[34];

  if (!*((_BYTE *)this + 168))
  {
    v1 = (uint64_t)this;
    v2 = (_DWORD *)*((_QWORD *)this + 2);
    if (!v2)
      goto LABEL_5;
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", 342);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "this is a non-recurrent version, cannot have a recurrent internal component");
      goto LABEL_16;
    }
    if (this)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", 345);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "no recursive inclusion");
    }
    else
    {
LABEL_5:
      v3 = *(_DWORD *)(v1 + 12);
      if (v3 < 1 || (v4 = *(_DWORD *)(v1 + 8), v4 <= 0))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", 348);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"component is not initialized, max attention is ", 47);
        v6 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", source state dimension is ", 28);
        std::ostream::operator<<();
      }
      else
      {
        v5 = v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
        if (*(_DWORD *)(v5 + 8) + v4 * v3 == v2[2])
        {
          if (*(_DWORD *)(v5 + 12) == v2[3])
          {
            *(_BYTE *)(v1 + 168) = 1;
            return this;
          }
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", 358);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"the output dim of attention component is ", 41);
          v10 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" , however, the internal training component has output dim ", 59);
          std::ostream::operator<<();
        }
        else
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", 352);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"component has input dim ", 24);
          v7 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", attentions ", 13);
          v8 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", source state dimension ", 25);
          v9 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", however, the internal training component has input dim ", 57);
          std::ostream::operator<<();
        }
      }
    }
LABEL_16:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  return this;
}

void `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::InitData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::FixedAttentionComponent::InitData((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 112)), a2, a3, a4, a5);
}

void kaldi::nnet1::FixedAttentionComponent::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  BOOL v13;
  uint64_t v14;
  void *v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  void **v20;
  void *v21;
  int v22;
  uint64_t v24;
  const void *v25;
  _QWORD *v26;
  void **v27;
  uint64_t v28;
  _QWORD v31[34];
  void *v32[4];

  memset(v32, 0, 24);
  v6 = (char *)a1 + 12;
  v7 = a1 + 1;
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60)
      goto LABEL_44;
    kaldi::ReadToken(a2, a3, (uint64_t)v32, v8, v9);
    if (SHIBYTE(v32[2]) < 0)
      break;
    if (HIBYTE(v32[2]) == 15)
    {
      v19 = v32[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v32 + 7) == (void *)0x3E736E6F69746E65;
      v14 = (uint64_t)v6;
      if (!v19)
      {
LABEL_35:
        if (HIBYTE(v32[2]) == 12)
        {
          v20 = v32;
          goto LABEL_39;
        }
        goto LABEL_51;
      }
    }
    else
    {
      if (HIBYTE(v32[2]) != 22)
        goto LABEL_35;
      v13 = v32[0] == (void *)0x53656372756F533CLL
         && v32[1] == (void *)0x656D694465746174
         && *(void **)((char *)&v32[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      v14 = (uint64_t)v7;
      if (!v13)
        goto LABEL_51;
    }
LABEL_34:
    kaldi::ReadBasicType<int>(a2, a3, v14, v10, v11);
  }
  v15 = v32[1];
  if (v32[1] != (void *)15)
  {
    if (v32[1] != (void *)22)
      goto LABEL_37;
    v16 = *(_QWORD *)v32[0] == 0x53656372756F533CLL && *((_QWORD *)v32[0] + 1) == 0x656D694465746174;
    v17 = v16 && *(_QWORD *)((char *)v32[0] + 14) == 0x3E6E6F69736E656DLL;
    v14 = (uint64_t)v7;
    if (!v17)
      goto LABEL_37;
    goto LABEL_34;
  }
  v18 = *(_QWORD *)v32[0] == 0x6574744178614D3CLL && *(_QWORD *)((char *)v32[0] + 7) == 0x3E736E6F69746E65;
  v14 = (uint64_t)v6;
  if (v18)
    goto LABEL_34;
  v15 = v32[1];
LABEL_37:
  if (v15 != (void *)12)
    goto LABEL_51;
  v20 = (void **)v32[0];
LABEL_39:
  v21 = *v20;
  v22 = *((_DWORD *)v20 + 2);
  if (v21 != (void *)0x6E6F706D6F432F3CLL || v22 != 1047817829)
  {
LABEL_51:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", 112);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Unrecognized token ", 19);
    if (SHIBYTE(v32[2]) >= 0)
      v27 = v32;
    else
      v27 = (void **)v32[0];
    if (SHIBYTE(v32[2]) >= 0)
      v28 = HIBYTE(v32[2]);
    else
      v28 = (uint64_t)v32[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
  }
LABEL_44:
  v24 = a1[2];
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (v25)
  a1[2] = v25;
  kaldi::nnet1::FixedAttentionComponent::Check(a1);
  if (SHIBYTE(v32[2]) < 0)
    operator delete(v32[0]);
}

void sub_1DE476AA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::FixedAttentionComponent::ReadData((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 176)), a2, a3, a4);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  kaldi::nnet1::Component *v12;
  uint64_t v13;
  const char *v14;
  std::string __p;

  kaldi::WriteToken(a2, a3, (kaldi *)"<SourceStateDimension>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxAttentions>", v8, v9);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v10, v11);
  v12 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  kaldi::nnet1::Component::TypeToMarker(v12, &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  return kaldi::WriteBasicType<int>(a2, (int)a3);
}

void sub_1DE476BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::WriteConfig(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::FixedAttentionComponent::WriteConfig((uint64_t)a1 + *(_QWORD *)(*a1 - 184), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::WriteData(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ((void (*)(_QWORD **))(*a1)[12])(a1);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a1[2] + 104))(a1[2], a2, a3, a4);
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::WriteData(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD **v7;

  v7 = (_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 120));
  ((void (*)(_QWORD **))(*v7)[12])(v7);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v7[2] + 104))(v7[2], a2, a3, a4);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::NumParams(kaldi::nnet1::FixedAttentionComponent *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 176))(*((_QWORD *)this + 2));
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::NumParams(kaldi::nnet1::FixedAttentionComponent *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 176))(v1);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::GetParams(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 184))(*(_QWORD *)(a1 + 16));
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::GetParams(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 200) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 184))(v1);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SetParams(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 192))(*(_QWORD *)(a1 + 16));
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::SetParams(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 208) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 192))(v1);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SumParams(kaldi::nnet1::FixedAttentionComponent *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 208))(*((_QWORD *)this + 2));
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::SumParams(kaldi::nnet1::FixedAttentionComponent *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 224) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 208))(v1);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::PerturbParams(kaldi::nnet1::FixedAttentionComponent *this, float a2)
{
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 2) + 216))(*((_QWORD *)this + 2), a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::PerturbParams(kaldi::nnet1::FixedAttentionComponent *this, float a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 232) + 16);
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v2 + 216))(v2, a2);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::Info(kaldi::nnet1::FixedAttentionComponent *this)
{
  void **v2;
  uint64_t v3;
  void *__p[2];
  unsigned __int8 v6;
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  (*(void (**)(kaldi::nnet1::FixedAttentionComponent *, _QWORD *, _QWORD))(*(_QWORD *)this + 96))(this, v7, 0);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 2) + 64))(__p);
  if ((v6 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v6 & 0x80u) == 0)
    v3 = v6;
  else
    v3 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v2, v3);
  if ((char)v6 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v9);
}

void sub_1DE476E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::Info(kaldi::nnet1::FixedAttentionComponent *this)
{
  return kaldi::nnet1::FixedAttentionComponent::Info((kaldi::nnet1::FixedAttentionComponent *)((char *)this
                                                                                             + *(_QWORD *)(*(_QWORD *)this - 80)));
}

uint64_t kaldi::nnet1::FixedAttentionComponent::InfoGradient(kaldi::nnet1::FixedAttentionComponent *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::InfoGradient(kaldi::nnet1::FixedAttentionComponent *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SetTrainOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;

  v2 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v2 + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(v2 + 56) = v3;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 264))(*(_QWORD *)(a1 + 16));
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::SetTrainOptions(_QWORD *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  __int128 v4;

  v2 = (char *)a1 + *(_QWORD *)(*a1 - 280);
  v3 = &v2[*(_QWORD *)(*(_QWORD *)v2 - 24)];
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v3 + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(v3 + 56) = v4;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 2) + 264))(*((_QWORD *)v2 + 2));
}

void kaldi::nnet1::FixedAttentionComponent::SetSourceStates(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const char *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  _QWORD v23[4];
  void *v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  kaldi::nnet1::FixedAttentionComponent::Check((void *)a1);
  v21 = a3;
  v7 = a3[1] - *a3;
  v22 = v7 >> 2;
  if (*(_DWORD *)(a2 + 20) % (int)(v7 >> 2))
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)0xA5, "seq_size * num_seq == source.NumRows()", v6);
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)0xA6, "source.NumCols() == source_vec_dim_", v6);
  kaldi::CuMatrix<float>::Resize(a1 + 24, v22, *(unsigned int *)(*(_QWORD *)(a1 + 16) + 8), 0, 0);
  if ((int)v22 >= 1)
  {
    v8 = 0;
    v9 = *(_DWORD *)(a1 + 12);
    do
    {
      if (v9 >= 1)
      {
        v10 = *(_DWORD *)(*v21 + 4 * v8);
        if (v10 >= 1)
        {
          v11 = v10 & ~(v10 >> 31);
          v12 = v8 + v22 * (v10 - 1);
          v13 = 1;
          do
          {
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v24, a1 + 24, 0, *(_DWORD *)(a1 + 44), (const char *)(*(_DWORD *)(a1 + 8) * (v13 - 1)), *(_DWORD *)(a1 + 8));
            if (v8 >= HIDWORD(v25))
              kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v16);
            v27 = &unk_1EA926538;
            v28 = v25 + 4 * (int)v26 * (int)v8;
            v30 = *((_QWORD *)&v26 + 1);
            v29 = DWORD2(v25);
            if (*(_DWORD *)(a2 + 20) <= v12)
              kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v16);
            v17 = *(_QWORD *)(a2 + 8) + 4 * (int)(*(_DWORD *)(a2 + 24) * v12);
            v18 = *(_DWORD *)(a2 + 16);
            v19 = *(_QWORD *)(a2 + 32);
            v23[0] = &unk_1EA926538;
            v23[1] = v17;
            v23[3] = v19;
            v23[2] = v18;
            kaldi::CuVectorBase<float>::CopyFromVec(&v27, (uint64_t)v23, v14, v15, v16);
            v27 = &unk_1EA926538;
            v28 = 0;
            LODWORD(v29) = 0;
            v30 = 0;
            v24 = &unk_1EA926508;
            v25 = 0u;
            v26 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v24);
            v9 = *(_DWORD *)(a1 + 12);
            if (v13 >= v9)
              break;
            v12 -= v22;
          }
          while (v11 != v13++);
        }
      }
      ++v8;
    }
    while (v8 != (v7 >> 2));
  }
}

void sub_1DE4771D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _OWORD *v18;

  a18 = &unk_1EA926508;
  *v18 = 0u;
  v18[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a18);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::FixedAttentionComponent::GetSourceDiffs(int *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  _QWORD *v26;
  unint64_t v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];

  kaldi::nnet1::FixedAttentionComponent::Check(a1);
  v26 = a3;
  v9 = a3[1] - *a3;
  v10 = *(unsigned int *)(a2 + 20);
  v27 = v9 >> 2;
  if ((int)v10 % (int)(v9 >> 2))
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)0xBB, "seq_size * num_seq == source.NumRows()", v8);
  v11 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v11 != a1[2])
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)0xBC, "source.NumCols() == source_vec_dim_", v8);
  if (a1[23] != (_DWORD)v27)
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)0xBD, "accumed_source_states_diff_.NumRows() == num_seq", v8);
  if (a1[22] != a1[3] * (_DWORD)v11)
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)0xBE, "accumed_source_states_diff_.NumCols() == max_attentions_ * source_vec_dim_", v8);
  kaldi::CuMatrix<float>::Resize(a4, v10, v11, 0, 0);
  if ((int)v27 >= 1)
  {
    v13 = 0;
    v14 = a1[3];
    do
    {
      if (v14 >= 1)
      {
        v15 = *(_DWORD *)(*v26 + 4 * v13);
        if (v15 >= 1)
        {
          v16 = v15 & ~(v15 >> 31);
          v17 = v13 + v27 * (v15 - 1);
          v18 = 1;
          do
          {
            if (*(_DWORD *)(a4 + 20) <= v17)
              kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v12);
            v19 = *(_QWORD *)(a4 + 8) + 4 * (int)(*(_DWORD *)(a4 + 24) * v17);
            v20 = *(_DWORD *)(a4 + 16);
            v21 = *(_QWORD *)(a4 + 32);
            v35[0] = &unk_1EA926538;
            v35[1] = v19;
            v35[3] = v21;
            v35[2] = v20;
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v28, (uint64_t)(a1 + 18), 0, a1[23], (const char *)(a1[2] * (v18 - 1)), a1[2]);
            if (v13 >= HIDWORD(v29))
              kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v24);
            v31 = &unk_1EA926538;
            v32 = v29 + 4 * (int)v30 * (int)v13;
            v34 = *((_QWORD *)&v30 + 1);
            v33 = DWORD2(v29);
            kaldi::CuVectorBase<float>::CopyFromVec(v35, (uint64_t)&v31, v22, v23, v24);
            v31 = &unk_1EA926538;
            v32 = 0;
            LODWORD(v33) = 0;
            v34 = 0;
            v28 = &unk_1EA926508;
            v29 = 0u;
            v30 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v28);
            v14 = a1[3];
            if (v18 >= v14)
              break;
            v17 -= v27;
          }
          while (v16 != v18++);
        }
      }
      ++v13;
    }
    while (v13 != (v9 >> 2));
  }
}

void sub_1DE477500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22)
{
  _OWORD *v22;

  a20 = 0;
  a21 = 0;
  a22 = 0;
  a14 = &unk_1EA926508;
  *v22 = 0u;
  v22[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a14);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::GetCurrentAlignment()
{
  return 0;
}

uint64_t kaldi::nnet1::FixedAttentionComponent::GetOverallAlignment()
{
  return 0;
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SetSourceVectorDimension(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 8) != a2)
  {
    *(_DWORD *)(this + 8) = a2;
    *(_BYTE *)(this + 168) = 0;
  }
  return this;
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SetMaxAttentions(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 12) != a2)
  {
    *(_DWORD *)(this + 12) = a2;
    *(_BYTE *)(this + 168) = 0;
  }
  return this;
}

void *kaldi::nnet1::FixedAttentionComponent::PropagateFnc(int *a1, uint64_t a2, uint64_t a3, int a4)
{
  void *result;
  const char *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  const char *v17;
  unsigned int v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  void *v22;
  __int128 v23;
  __int128 v24;

  result = kaldi::nnet1::FixedAttentionComponent::Check(a1);
  if (*(_DWORD *)(a2 + 16) != *(int *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)0xE2, "in.NumCols() == input_dim_", v9);
  if (a4)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)0xE4, "batch_idx == 0", v9);
  v10 = a1[11];
  v11 = *(_DWORD *)(a2 + 20);
  v12 = v11 / v10;
  if (v11 / v10 * v10 != v11)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)0xE7, "num_seq * seq_size == in.NumRows()", v9);
  v13 = a1[2];
  v14 = a1[3];
  *((_QWORD *)a1 + 7) = *(_QWORD *)(a3 + 32);
  if (v12 >= 1)
  {
    v15 = 0;
    v18 = v13 * v14;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v22, (uint64_t)(a1 + 6), 0, a1[11], (const char *)v18, *(int *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v19, a2, v15, v10, 0, *(_DWORD *)(a2 + 16));
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v22, (uint64_t)&v19, 111, v16, v17);
      v19 = &unk_1EA926508;
      v20 = 0u;
      v21 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v19);
      v22 = &unk_1EA926508;
      v23 = 0u;
      v24 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v22);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v22, a3, v15, v10, 0, *(_DWORD *)(a3 + 16));
      (*(void (**)(_QWORD, _QWORD *, void **, _QWORD))(**((_QWORD **)a1 + 2) + 112))(*((_QWORD *)a1 + 2), (_QWORD *)a1 + 3, &v22, 0);
      v22 = &unk_1EA926508;
      v23 = 0u;
      v24 = 0u;
      result = (void *)kaldi::CuMatrixBase<float>::~CuMatrixBase(&v22);
      v15 += v10;
      --v12;
    }
    while (v12);
  }
  return result;
}

void sub_1DE477794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _OWORD *v16;

  a16 = &unk_1EA926508;
  *v16 = 0u;
  v16[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a16);
  _Unwind_Resume(a1);
}

void *`virtual thunk to'kaldi::nnet1::FixedAttentionComponent::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  return kaldi::nnet1::FixedAttentionComponent::PropagateFnc((int *)((char *)a1 + *(_QWORD *)(*a1 - 128)), a2, a3, a4);
}

void kaldi::nnet1::FixedAttentionComponent::BackpropagateFnc(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  const char *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  unsigned int v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  void *v32;
  __int128 v33;
  __int128 v34;

  kaldi::nnet1::FixedAttentionComponent::Check(a1);
  if (*(_DWORD *)(a2 + 16) != *(int *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)0xF9, "in.NumCols() == input_dim_", v9);
  if (a6)
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)0xFA, "batch_idx == 0", v9);
  v10 = a1[11];
  v11 = *(_DWORD *)(a2 + 20);
  v12 = v11 / (int)v10;
  if (v11 / (int)v10 * (_DWORD)v10 != v11)
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)0xFD, "num_seq * seq_size == in.NumRows()", v9);
  v13 = (a1[2] * a1[3]);
  *((_QWORD *)a1 + 13) = *(_QWORD *)(a5 + 32);
  *((_QWORD *)a1 + 19) = *(_QWORD *)(a5 + 32);
  v25 = v13;
  kaldi::CuMatrix<float>::Resize((uint64_t)(a1 + 18), v10, v13, 0, 0);
  kaldi::CuMatrix<float>::Resize((uint64_t)(a1 + 30), v10, *(unsigned int *)(*((_QWORD *)a1 + 2) + 8), 0, 0);
  if (v12 >= 1)
  {
    v14 = 0;
    do
    {
      v15 = *((_QWORD *)a1 + 2);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v32, a2, v14, v10, 0, *(_DWORD *)(a2 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v29, a3, v14, v10, 0, *(_DWORD *)(a3 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v26, a4, v14, v10, 0, *(_DWORD *)(a4 + 16));
      (*(void (**)(uint64_t, void **, void **, void **, _QWORD *, _QWORD))(*(_QWORD *)v15 + 128))(v15, &v32, &v29, &v26, (_QWORD *)a1 + 15, 0);
      v26 = &unk_1EA926508;
      v27 = 0u;
      v28 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v26);
      v29 = &unk_1EA926508;
      v30 = 0u;
      v31 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v29);
      v32 = &unk_1EA926508;
      v33 = 0u;
      v34 = 0u;
      v16 = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v32);
      kaldi::CuSubMatrix<float>::CuSubMatrix(v16, a5, v14, v10, 0, *(_DWORD *)(a5 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v29, (uint64_t)(a1 + 30), 0, a1[35], (const char *)v25, *(int *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8));
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v32, (uint64_t)&v29, 111, v17, v18);
      v29 = &unk_1EA926508;
      v30 = 0u;
      v31 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v29);
      v32 = &unk_1EA926508;
      v33 = 0u;
      v34 = 0u;
      v19 = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v32);
      kaldi::CuSubMatrix<float>::CuSubMatrix(v19, (uint64_t)(a1 + 30), 0, a1[35], 0, v25);
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)(a1 + 18), (uint64_t)&v32, 111, v20, v21, 1.0, 1.0);
      v32 = &unk_1EA926508;
      v33 = 0u;
      v34 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v32);
      v14 += v10;
      --v12;
    }
    while (v12);
  }
}

void sub_1DE477B10(_Unwind_Exception *a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 128) = v2;
  *v1 = 0u;
  v1[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3 - 128);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  kaldi::nnet1::FixedAttentionComponent::BackpropagateFnc((int *)((char *)a1 + *(_QWORD *)(*a1 - 144)), a2, a3, a4, a5, a6);
}

uint64_t kaldi::nnet1::FixedAttentionComponent::SetGradientNormalization(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 240))(*(_QWORD *)(a1 + 16));
}

uint64_t `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::SetGradientNormalization(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 256) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 240))(v1);
}

void kaldi::nnet1::FixedAttentionComponent::AccumGradients(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  const char *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  float v17;
  int v18;
  uint64_t v19;
  const char *v20;
  void *v22;
  __int128 v23;
  __int128 v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  void (**v28)(kaldi::nnet1::NnetTrainOptions *__hidden);
  float v29[10];

  kaldi::nnet1::FixedAttentionComponent::Check(a1);
  if (*(_DWORD *)(a2 + 16) != *(int *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)0x120, "input.NumCols() == input_dim_", v9);
  if (a5)
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)0x121, "batch_idx == 0", v9);
  v10 = a1[11];
  v11 = *(_DWORD *)(a2 + 20);
  v12 = v11 / v10;
  if (v11 / v10 * v10 != v11)
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)0x124, "num_seq * seq_size == input.NumRows()", v9);
  v13 = a1[2];
  v14 = a1[3];
  *((_QWORD *)a1 + 7) = a4;
  v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 2) + 272))(*((_QWORD *)a1 + 2));
  v28 = &off_1EA9284D0;
  v16 = *(_OWORD *)(v15 + 23);
  *(_OWORD *)v29 = *(_OWORD *)(v15 + 8);
  *(_OWORD *)((char *)&v29[3] + 3) = v16;
  v17 = v29[0];
  v29[0] = v29[0] / (float)v12;
  (*(void (**)(_QWORD, void (***)(kaldi::nnet1::NnetTrainOptions *__hidden)))(**((_QWORD **)a1 + 2)
                                                                                                  + 264))(*((_QWORD *)a1 + 2), &v28);
  if (v12 >= 1)
  {
    v18 = 0;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v25, (uint64_t)(a1 + 6), 0, a1[11], (const char *)(v13 * v14), *(int *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v22, a2, v18, v10, 0, *(_DWORD *)(a2 + 16));
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v25, (uint64_t)&v22, 111, v19, v20);
      v22 = &unk_1EA926508;
      v23 = 0u;
      v24 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v22);
      v25 = &unk_1EA926508;
      v26 = 0u;
      v27 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v25);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v25, a3, v18, v10, 0, *(_DWORD *)(a3 + 16));
      (*(void (**)(_QWORD, _QWORD *, void **, uint64_t, _QWORD))(**((_QWORD **)a1 + 2) + 232))(*((_QWORD *)a1 + 2), (_QWORD *)a1 + 3, &v25, a4, 0);
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)a1 + 2) + 256))(*((_QWORD *)a1 + 2), a4, 0);
      v25 = &unk_1EA926508;
      v26 = 0u;
      v27 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v25);
      v18 += v10;
      --v12;
    }
    while (v12);
  }
  v29[0] = v17;
  (*(void (**)(_QWORD, void (***)(kaldi::nnet1::NnetTrainOptions *__hidden)))(**((_QWORD **)a1 + 2)
                                                                                                  + 264))(*((_QWORD *)a1 + 2), &v28);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)&v28);
}

void sub_1DE477E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::AccumGradients(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::FixedAttentionComponent::AccumGradients((int *)((char *)a1 + *(_QWORD *)(*a1 - 248)), a2, a3, a4, a5);
}

void kaldi::nnet1::FixedAttentionComponent::GetGradient(_DWORD *a1, uint64_t a2, uint64_t a3, void **a4)
{
  const void *v8;
  int *v9;
  const char *v10;
  int v11;
  int v12;
  int v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  int v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  void *v36[3];

  v8 = (const void *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 64))(a1);
  v11 = v9[11];
  v12 = *(_DWORD *)(a2 + 20);
  v13 = v12 / v11;
  if (v12 / v11 * v11 != v12)
    kaldi::KaldiAssertFailure_((kaldi *)"GetGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-fixed-attention-component.cc", (const char *)0x143, "num_seq * seq_size == input.NumRows()", v10);
  v14 = v9;
  v15 = a1[3];
  v16 = a1[2];
  v17 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 112))(a1);
  v29 = (uint64_t)a4;
  kaldi::Vector<float>::Resize(a4, v17, 0, v18, v19);
  v20 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 112))(a1);
  memset(v36, 0, sizeof(v36));
  kaldi::Vector<float>::Resize(v36, v20, 1, v21, v22);
  if (v13 >= 1)
  {
    v23 = 0;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v30, (uint64_t)(v14 + 6), 0, v14[11], (const char *)(v16 * v15), *(_DWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v33, a2, v23, v11, 0, *(_DWORD *)(a2 + 16));
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v30, (uint64_t)&v33, 111, v24, v25);
      v33 = &unk_1EA926508;
      v34 = 0u;
      v35 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v33);
      v30 = &unk_1EA926508;
      v31 = 0u;
      v32 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v30);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v33, a3, v23, v11, 0, *(_DWORD *)(a3 + 16));
      kaldi::CuMatrix<float>::CuMatrix(&v30, &v33, 111);
      v33 = &unk_1EA926508;
      v34 = 0u;
      v35 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v33);
      (*(void (**)(int *, int *, void **, void **))(*(_QWORD *)v14 + 168))(v14, v14 + 6, &v30, v36);
      kaldi::VectorBase<float>::AddVec<float>(v29, (uint64_t)v36, 1.0, v26, v27, v28);
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v30);
      v23 += v11;
      --v13;
    }
    while (v13);
  }
  (*(void (**)(int *))(*(_QWORD *)v14 + 8))(v14);
  kaldi::Vector<float>::Destroy((uint64_t)v36);
}

void sub_1DE478180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _OWORD *v19;
  uint64_t v20;

  a19 = &unk_1EA926508;
  *v19 = 0u;
  v19[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a19);
  kaldi::Vector<float>::Destroy(v20 - 104);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::FixedAttentionComponent::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, void **a4)
{
  kaldi::nnet1::FixedAttentionComponent::GetGradient((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 240)), a2, a3, a4);
}

double kaldi::nnet1::GlobalAttentionComponent::GlobalAttentionComponent(kaldi::nnet1::GlobalAttentionComponent *this, int a2, int a3)
{
  double result;

  *((_DWORD *)this + 220) = a2;
  *((_DWORD *)this + 221) = a3;
  *((_WORD *)this + 444) = 0;
  *((_QWORD *)this + 112) = 0;
  *((_QWORD *)this + 114) = 0;
  *((_QWORD *)this + 113) = 0;
  *((_QWORD *)this + 115) = &off_1EA9284D0;
  *((_OWORD *)this + 58) = xmmword_1DEC3D450;
  *((_QWORD *)this + 118) = 0x3BF800000;
  *((_DWORD *)this + 238) = 1;
  *((_WORD *)this + 478) = 0;
  *((_BYTE *)this + 958) = 0;
  *((_QWORD *)this + 1) = -1;
  *(_QWORD *)this = &off_1EA92AAE0;
  *((_QWORD *)this + 109) = &off_1EA92ACE8;
  result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 6) = &unk_1EA92DFA8;
  *((_BYTE *)this + 88) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 12) = &unk_1EA92DFA8;
  *((_BYTE *)this + 136) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_QWORD *)this + 18) = &unk_1EA92DFA8;
  *((_BYTE *)this + 184) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_QWORD *)this + 24) = &unk_1EA92DFA8;
  *((_BYTE *)this + 232) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 30) = &unk_1EA92DFA8;
  *((_BYTE *)this + 280) = 0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_QWORD *)this + 36) = &unk_1EA92DFA8;
  *((_BYTE *)this + 328) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_QWORD *)this + 42) = &unk_1EA92DFA8;
  *((_BYTE *)this + 376) = 0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((_QWORD *)this + 48) = &unk_1EA92DFA8;
  *((_BYTE *)this + 424) = 0;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *((_QWORD *)this + 54) = &unk_1EA92DFA8;
  *((_BYTE *)this + 472) = 0;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((_QWORD *)this + 60) = &unk_1EA92DFA8;
  *((_BYTE *)this + 520) = 0;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *((_QWORD *)this + 66) = &unk_1EA92DFA8;
  *((_BYTE *)this + 568) = 0;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_QWORD *)this + 72) = &unk_1EA92DFA8;
  *((_BYTE *)this + 616) = 0;
  *((_QWORD *)this + 80) = 0;
  *((_QWORD *)this + 79) = 0;
  *((_QWORD *)this + 81) = 0;
  *((_QWORD *)this + 78) = &unk_1EA92DFD8;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((_QWORD *)this + 82) = &unk_1EA92DFA8;
  *((_BYTE *)this + 696) = 0;
  *((_QWORD *)this + 90) = 0;
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 91) = 0;
  *((_QWORD *)this + 88) = &unk_1EA92DFD8;
  *((_QWORD *)this + 94) = 0;
  *((_QWORD *)this + 93) = 0;
  *((_QWORD *)this + 95) = 0;
  *((_QWORD *)this + 92) = &unk_1EA92DFD8;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((_QWORD *)this + 96) = &unk_1EA92DFA8;
  *((_BYTE *)this + 808) = 0;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_DWORD *)this + 216) = -1;
  *((_BYTE *)this + 868) = 0;
  return result;
}

kaldi::nnet1::GlobalAttentionComponent *kaldi::nnet1::GlobalAttentionComponent::GlobalAttentionComponent(kaldi::nnet1::GlobalAttentionComponent *this, const kaldi::nnet1::GlobalAttentionComponent *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  const char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;

  *((_QWORD *)this + 110) = *(_QWORD *)((char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24) + 8);
  *((_WORD *)this + 444) = 0;
  *((_QWORD *)this + 112) = 0;
  *((_QWORD *)this + 114) = 0;
  *((_QWORD *)this + 113) = 0;
  *((_QWORD *)this + 115) = &off_1EA9284D0;
  *((_OWORD *)this + 58) = xmmword_1DEC3D450;
  *((_DWORD *)this + 236) = -1082130432;
  *(_QWORD *)((char *)this + 948) = 0x100000003;
  *((_WORD *)this + 478) = 0;
  *((_BYTE *)this + 958) = 0;
  *((_QWORD *)this + 1) = -1;
  *(_QWORD *)this = &off_1EA92AAE0;
  *((_QWORD *)this + 109) = &off_1EA92ACE8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 6) = &unk_1EA92DFA8;
  v38 = (char *)this + 48;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_BYTE *)this + 88) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 12) = &unk_1EA92DFA8;
  v6 = (char *)this + 96;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_BYTE *)this + 136) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_QWORD *)this + 18) = &unk_1EA92DFA8;
  v7 = (char *)this + 144;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_BYTE *)this + 184) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_QWORD *)this + 24) = &unk_1EA92DFA8;
  v8 = (char *)this + 192;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_BYTE *)this + 232) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 30) = &unk_1EA92DFA8;
  *((_BYTE *)this + 280) = 0;
  v36 = (char *)this + 288;
  v37 = (char *)this + 240;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_QWORD *)this + 36) = &unk_1EA92DFA8;
  *((_BYTE *)this + 328) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_QWORD *)this + 42) = &unk_1EA92DFA8;
  *((_BYTE *)this + 376) = 0;
  v34 = (char *)this + 384;
  v35 = (char *)this + 336;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((_QWORD *)this + 48) = &unk_1EA92DFA8;
  *((_BYTE *)this + 424) = 0;
  v33 = (char *)this + 432;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *((_QWORD *)this + 54) = &unk_1EA92DFA8;
  *((_BYTE *)this + 472) = 0;
  v9 = (char *)this + 480;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((_QWORD *)this + 60) = &unk_1EA92DFA8;
  *((_BYTE *)this + 520) = 0;
  v10 = (char *)this + 528;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *((_QWORD *)this + 66) = &unk_1EA92DFA8;
  *((_BYTE *)this + 568) = 0;
  v11 = (char *)this + 576;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_QWORD *)this + 72) = &unk_1EA92DFA8;
  *((_BYTE *)this + 616) = 0;
  v32 = (char *)this + 624;
  *((_QWORD *)this + 80) = 0;
  *((_QWORD *)this + 81) = 0;
  *((_QWORD *)this + 78) = &unk_1EA92DFD8;
  *((_QWORD *)this + 79) = 0;
  v12 = (char *)this + 656;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((_QWORD *)this + 82) = &unk_1EA92DFA8;
  *((_BYTE *)this + 696) = 0;
  v31 = (char *)this + 704;
  *((_QWORD *)this + 90) = 0;
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 91) = 0;
  *((_QWORD *)this + 88) = &unk_1EA92DFD8;
  *((_QWORD *)this + 94) = 0;
  *((_QWORD *)this + 93) = 0;
  *((_QWORD *)this + 95) = 0;
  *((_QWORD *)this + 92) = &unk_1EA92DFD8;
  v13 = (char *)this + 768;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((_QWORD *)this + 96) = &unk_1EA92DFA8;
  *((_BYTE *)this + 808) = 0;
  v29 = (char *)this + 816;
  v30 = (char *)this + 736;
  v28 = (char *)this + 840;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  v14 = *((_QWORD *)a2 + 2);
  if (!v14)
  {
    v26 = "src.src_dot_trans_";
    v27 = 84;
    goto LABEL_12;
  }
  if (!*((_QWORD *)a2 + 3))
  {
    v26 = "src.tgt_dot_trans_";
    v27 = 85;
    goto LABEL_12;
  }
  if (!*((_QWORD *)a2 + 4))
  {
    v26 = "src.src_add_trans_";
    v27 = 86;
    goto LABEL_12;
  }
  if (!*((_QWORD *)a2 + 5))
  {
    v26 = "src.tgt_add_trans_";
    v27 = 87;
LABEL_12:
    kaldi::KaldiAssertFailure_((kaldi *)"GlobalAttentionComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)v27, v26, a5);
  }
  *((_QWORD *)this + 2) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  *((_QWORD *)this + 3) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 3) + 16))(*((_QWORD *)a2 + 3));
  *((_QWORD *)this + 4) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 4) + 16))(*((_QWORD *)a2 + 4));
  *((_QWORD *)this + 5) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 5) + 16))(*((_QWORD *)a2 + 5));
  kaldi::CuMatrix<float>::operator=((uint64_t)v38, (uint64_t)a2 + 48);
  kaldi::CuMatrix<float>::operator=((uint64_t)v6, (uint64_t)a2 + 96);
  kaldi::CuMatrix<float>::operator=((uint64_t)v7, (uint64_t)a2 + 144);
  kaldi::CuMatrix<float>::operator=((uint64_t)v8, (uint64_t)a2 + 192);
  kaldi::CuMatrix<float>::operator=((uint64_t)v37, (uint64_t)a2 + 240);
  kaldi::CuMatrix<float>::operator=((uint64_t)v36, (uint64_t)a2 + 288);
  kaldi::CuMatrix<float>::operator=((uint64_t)v35, (uint64_t)a2 + 336);
  kaldi::CuMatrix<float>::operator=((uint64_t)v34, (uint64_t)a2 + 384);
  kaldi::CuMatrix<float>::operator=((uint64_t)v33, (uint64_t)a2 + 432);
  kaldi::CuMatrix<float>::operator=((uint64_t)v9, (uint64_t)a2 + 480);
  kaldi::CuMatrix<float>::operator=((uint64_t)v10, (uint64_t)a2 + 528);
  kaldi::CuMatrix<float>::operator=((uint64_t)v11, (uint64_t)a2 + 576);
  kaldi::CuVector<float>::operator=((uint64_t)v32, (uint64_t)a2 + 624, v16, v17, v18);
  kaldi::CuMatrix<float>::operator=((uint64_t)v12, (uint64_t)a2 + 656);
  kaldi::CuVector<float>::operator=((uint64_t)v31, (uint64_t)a2 + 704, v19, v20, v21);
  kaldi::CuVector<float>::operator=((uint64_t)v30, (uint64_t)a2 + 736, v22, v23, v24);
  kaldi::CuMatrix<float>::operator=((uint64_t)v13, (uint64_t)a2 + 768);
  if (this != a2)
  {
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)v29, *((_QWORD *)a2 + 102), *((_QWORD *)a2 + 103), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 103) - *((_QWORD *)a2 + 102)) >> 3));
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v28, *((char **)a2 + 105), *((_QWORD *)a2 + 106), (uint64_t)(*((_QWORD *)a2 + 106) - *((_QWORD *)a2 + 105)) >> 2);
  }
  *((_DWORD *)this + 216) = *((_DWORD *)a2 + 216);
  *((_BYTE *)this + 868) = *((_BYTE *)a2 + 868);
  return this;
}

void sub_1DE478858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, kaldi::nnet1::UpdatableComponent *a10, void **a11, uint64_t a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v32;

  v32 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v21 + 848) = v32;
    operator delete(v32);
  }
  *(_QWORD *)(v30 - 88) = a12;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 88));
  kaldi::CuMatrix<float>::~CuMatrix(v23);
  kaldi::CuVector<float>::~CuVector(a13);
  kaldi::CuVector<float>::~CuVector(a14);
  kaldi::CuMatrix<float>::~CuMatrix(v22);
  kaldi::CuVector<float>::~CuVector(a15);
  kaldi::CuMatrix<float>::~CuMatrix(v29);
  kaldi::CuMatrix<float>::~CuMatrix(v28);
  kaldi::CuMatrix<float>::~CuMatrix(v27);
  kaldi::CuMatrix<float>::~CuMatrix(a16);
  kaldi::CuMatrix<float>::~CuMatrix(a17);
  kaldi::CuMatrix<float>::~CuMatrix(a18);
  kaldi::CuMatrix<float>::~CuMatrix(a19);
  kaldi::CuMatrix<float>::~CuMatrix(a20);
  kaldi::CuMatrix<float>::~CuMatrix(v26);
  kaldi::CuMatrix<float>::~CuMatrix(v25);
  kaldi::CuMatrix<float>::~CuMatrix(v24);
  kaldi::CuMatrix<float>::~CuMatrix(a21);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v21);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GlobalAttentionComponent::~GlobalAttentionComponent(kaldi::nnet1::GlobalAttentionComponent *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void **v9;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[3];
  v4 = *((_QWORD *)this + 2);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 3);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 4);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 5);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (void *)*((_QWORD *)this + 105);
  if (v8)
  {
    *((_QWORD *)this + 106) = v8;
    operator delete(v8);
  }
  v9 = (void **)((char *)this + 816);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 768);
  *((_QWORD *)this + 92) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 736);
  *((_QWORD *)this + 88) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 704);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 656);
  *((_QWORD *)this + 78) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 624);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 576);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 528);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 480);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 432);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 384);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 336);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 288);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 240);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 192);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 144);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 96);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 48);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
}

void kaldi::nnet1::GlobalAttentionComponent::~GlobalAttentionComponent(kaldi::nnet1::GlobalAttentionComponent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 872));
}

{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 872));
  JUMPOUT(0x1DF0ED014);
}

void `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::~GlobalAttentionComponent(kaldi::nnet1::GlobalAttentionComponent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 872));
}

{
  kaldi::nnet1::GlobalAttentionComponent::~GlobalAttentionComponent((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::Copy(kaldi::nnet1::GlobalAttentionComponent *this)
{
  kaldi::nnet1::GlobalAttentionComponent *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;

  v2 = (kaldi::nnet1::GlobalAttentionComponent *)operator new();
  kaldi::nnet1::GlobalAttentionComponent::GlobalAttentionComponent(v2, this, v3, v4, v5);
  return (uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_1DE478B98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40813A3384);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::Copy(kaldi::nnet1::GlobalAttentionComponent *this)
{
  return kaldi::nnet1::GlobalAttentionComponent::Copy((kaldi::nnet1::GlobalAttentionComponent *)((char *)this
                                                                                               + *(_QWORD *)(*(_QWORD *)this - 32)));
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::GetType(kaldi::nnet1::GlobalAttentionComponent *this)
{
  return 282;
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::GetType(kaldi::nnet1::GlobalAttentionComponent *this)
{
  return 282;
}

void kaldi::nnet1::GlobalAttentionComponent::InitData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t *v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  const char *v10;
  BOOL v12;
  uint64_t v13;
  void *v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  void **v19;
  void *v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  kaldi::nnet1::Component *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  const void *v34;
  void *v35;
  uint64_t v36;
  const char *v37;
  kaldi::nnet1::Component *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  const void *v43;
  void *v44;
  uint64_t v45;
  const char *v46;
  kaldi::nnet1::Component *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  const void *v52;
  void *v53;
  uint64_t v54;
  const char *v55;
  kaldi::nnet1::Component *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  const void *v61;
  void *v62;
  _QWORD *v63;
  void **v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  void *p_p;
  uint64_t v70;
  _QWORD *v71;
  void *v72;
  uint64_t v73;
  _QWORD *v74;
  void *v75;
  uint64_t v76;
  _QWORD *v77;
  void *v78;
  uint64_t v79;
  uint64_t v82;
  void *__p;
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[34];
  void *v87[4];

  memset(v87, 0, 24);
  v6 = a2 + 4;
  v7 = (char *)a1 + 12;
  v8 = a1 + 1;
  while (1)
  {
    if ((*((_BYTE *)v6 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_44;
    kaldi::ReadToken(a2, 0, (uint64_t)v87, a4, a5);
    if (SHIBYTE(v87[2]) < 0)
      break;
    if (HIBYTE(v87[2]) == 15)
    {
      v18 = v87[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v87 + 7) == (void *)0x3E736E6F69746E65;
      v13 = (uint64_t)v7;
      if (!v18)
      {
LABEL_35:
        if (HIBYTE(v87[2]) == 12)
        {
          v19 = v87;
          goto LABEL_39;
        }
        goto LABEL_65;
      }
    }
    else
    {
      if (HIBYTE(v87[2]) != 22)
        goto LABEL_35;
      v12 = v87[0] == (void *)0x53656372756F533CLL
         && v87[1] == (void *)0x656D694465746174
         && *(void **)((char *)&v87[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      v13 = (uint64_t)v8;
      if (!v12)
        goto LABEL_65;
    }
LABEL_34:
    kaldi::ReadBasicType<int>(a2, 0, v13, v9, v10);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v14 = v87[1];
  if (v87[1] != (void *)15)
  {
    if (v87[1] != (void *)22)
      goto LABEL_37;
    v15 = *(_QWORD *)v87[0] == 0x53656372756F533CLL && *((_QWORD *)v87[0] + 1) == 0x656D694465746174;
    v16 = v15 && *(_QWORD *)((char *)v87[0] + 14) == 0x3E6E6F69736E656DLL;
    v13 = (uint64_t)v8;
    if (!v16)
      goto LABEL_37;
    goto LABEL_34;
  }
  v17 = *(_QWORD *)v87[0] == 0x6574744178614D3CLL && *(_QWORD *)((char *)v87[0] + 7) == 0x3E736E6F69746E65;
  v13 = (uint64_t)v7;
  if (v17)
    goto LABEL_34;
  v14 = v87[1];
LABEL_37:
  if (v14 != (void *)12)
    goto LABEL_65;
  v19 = (void **)v87[0];
LABEL_39:
  v20 = *v19;
  v21 = *((_DWORD *)v19 + 2);
  if (v20 != (void *)0x6E6F706D6F432F3CLL || v21 != 1047817829)
  {
LABEL_65:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v86, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 179);
    v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v87[2]) >= 0)
      v64 = v87;
    else
      v64 = (void **)v87[0];
    if (SHIBYTE(v87[2]) >= 0)
      v65 = HIBYTE(v87[2]);
    else
      v65 = (uint64_t)v87[1];
    v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
    v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" (SourceStateDimension|MaxAttentions)", 37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v86);
  }
LABEL_44:
  v23 = a1[2];
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = a1[3];
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = a1[4];
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = a1[5];
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  __p = 0;
  v84 = 0;
  v85 = 0;
  v82 = 0;
  kaldi::ExpectToken(a2, 0, (kaldi *)"<SourceDotTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&__p, v27, v28);
  v29 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v82 + 4, v30, v31);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v82, v32, v33);
  v34 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v29, HIDWORD(v82), v82);
  if (!v34)
  {
    a1[2] = 0;
LABEL_73:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v86, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 202);
    v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"this is not an updatable component, you used ", 45);
    if (v85 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v85 >= 0)
      v70 = HIBYTE(v85);
    else
      v70 = v84;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)p_p, v70);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v86);
  }
  a1[2] = v35;
  if (!v35)
    goto LABEL_73;
  (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v35 + 96))(v35, a2, a3);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<TargetDotTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&__p, v36, v37);
  v38 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v82 + 4, v39, v40);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v82, v41, v42);
  v43 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v38, HIDWORD(v82), v82);
  if (!v43)
  {
    a1[3] = 0;
LABEL_81:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v86, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 214);
    v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"this is not an updatable component, you used ", 45);
    if (v85 >= 0)
      v72 = &__p;
    else
      v72 = __p;
    if (v85 >= 0)
      v73 = HIBYTE(v85);
    else
      v73 = v84;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v72, v73);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v86);
  }
  a1[3] = v44;
  if (!v44)
    goto LABEL_81;
  (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v44 + 96))(v44, a2, a3);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<SourceAddTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&__p, v45, v46);
  v47 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v82 + 4, v48, v49);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v82, v50, v51);
  v52 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v47, HIDWORD(v82), v82);
  if (!v52)
  {
    a1[4] = 0;
LABEL_89:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v86, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 226);
    v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"this is not an updatable component, you used ", 45);
    if (v85 >= 0)
      v75 = &__p;
    else
      v75 = __p;
    if (v85 >= 0)
      v76 = HIBYTE(v85);
    else
      v76 = v84;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)v75, v76);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v86);
  }
  a1[4] = v53;
  if (!v53)
    goto LABEL_89;
  (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v53 + 96))(v53, a2, a3);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<TargetAddTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&__p, v54, v55);
  v56 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v82 + 4, v57, v58);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v82, v59, v60);
  v61 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v56, HIDWORD(v82), v82);
  if (!v61)
  {
    a1[5] = 0;
LABEL_97:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v86, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 238);
    v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"this is not an updatable component, you used ", 45);
    if (v85 >= 0)
      v78 = &__p;
    else
      v78 = __p;
    if (v85 >= 0)
      v79 = HIBYTE(v85);
    else
      v79 = v84;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v78, v79);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v86);
  }
  a1[5] = v62;
  if (!v62)
    goto LABEL_97;
  (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v62 + 96))(v62, a2, a3);
  kaldi::nnet1::GlobalAttentionComponent::Check((uint64_t)a1);
  if (SHIBYTE(v85) < 0)
    operator delete(__p);
  if (SHIBYTE(v87[2]) < 0)
    operator delete(v87[0]);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::Check(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD v17[34];

  if (!*(_BYTE *)(this + 868))
  {
    if (*(int *)(this + 12) < 1 || (v1 = *(_DWORD *)(this + 8), v1 <= 0))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 645);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"component is not initialized, max attention is ", 47);
      v9 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", source state dimension is ", 28);
      std::ostream::operator<<();
    }
    else
    {
      v2 = *(_QWORD *)(this + 16);
      if (v1 == *(_DWORD *)(v2 + 8))
      {
        v3 = *(_QWORD *)(this + 32);
        if (v1 == *(_DWORD *)(v3 + 8))
        {
          v4 = this + *(_QWORD *)(*(_QWORD *)this - 24);
          v5 = *(_DWORD *)(v4 + 8);
          v6 = *(_QWORD *)(this + 24);
          if (v5 == *(_DWORD *)(v6 + 8))
          {
            v7 = *(_QWORD *)(this + 40);
            if (v5 == *(_DWORD *)(v7 + 8))
            {
              if (*(_DWORD *)(v2 + 12) == *(_DWORD *)(v6 + 12))
              {
                v8 = *(_DWORD *)(v3 + 12);
                if (v8 == *(_DWORD *)(v7 + 12))
                {
                  if (*(_DWORD *)(v4 + 12) == v8)
                  {
                    *(_BYTE *)(this + 868) = 1;
                    return this;
                  }
                  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 680);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"the source/target add transform has output dim ", 47);
                  v16 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" , but the component has output dim ", 36);
                  std::ostream::operator<<();
                }
                else
                {
                  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 675);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"the source and target add transform has different output dim ", 61);
                  v15 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" vs ", 4);
                  std::ostream::operator<<();
                }
              }
              else
              {
                kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 670);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"the source and target dot transform has different output dim ", 61);
                v14 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" vs ", 4);
                std::ostream::operator<<();
              }
            }
            else
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 665);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"the component has input dim ", 28);
              v13 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" , but the target add transform has input dim ", 46);
              std::ostream::operator<<();
            }
          }
          else
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 660);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"the component has input dim ", 28);
            v12 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" , but the target dot transform has input dim ", 46);
            std::ostream::operator<<();
          }
        }
        else
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 655);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"source state dimension is ", 26);
          v11 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" , but the source add transform has input dim ", 46);
          std::ostream::operator<<();
        }
      }
      else
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 650);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"source state dimension is ", 26);
        v10 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" , but the source dot transform has input dim ", 46);
        std::ostream::operator<<();
      }
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  return this;
}

void `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::InitData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::GlobalAttentionComponent::InitData((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 112)), a2, a3, a4, a5);
}

void kaldi::nnet1::GlobalAttentionComponent::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  BOOL v12;
  uint64_t v13;
  void *v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  void **v19;
  void *v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  void *v28;
  const void *v29;
  void *v30;
  const void *v31;
  void *v32;
  const void *v33;
  void *v34;
  _QWORD *v35;
  void **v36;
  uint64_t v37;
  void *__p[3];
  _QWORD v40[35];

  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v40, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 245);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Reading attention model", 23);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v40);
  }
  memset(__p, 0, sizeof(__p));
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60)
      goto LABEL_46;
    kaldi::ReadToken(a2, a3, (uint64_t)__p, v7, v8);
    if (SHIBYTE(__p[2]) < 0)
      break;
    if (HIBYTE(__p[2]) == 15)
    {
      v18 = __p[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)__p + 7) == (void *)0x3E736E6F69746E65;
      v13 = (uint64_t)a1 + 12;
      if (!v18)
      {
LABEL_37:
        if (HIBYTE(__p[2]) == 12)
        {
          v19 = __p;
          goto LABEL_41;
        }
        goto LABEL_65;
      }
    }
    else
    {
      if (HIBYTE(__p[2]) != 22)
        goto LABEL_37;
      v12 = __p[0] == (void *)0x53656372756F533CLL
         && __p[1] == (void *)0x656D694465746174
         && *(void **)((char *)&__p[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      v13 = (uint64_t)(a1 + 1);
      if (!v12)
        goto LABEL_65;
    }
LABEL_36:
    kaldi::ReadBasicType<int>(a2, a3, v13, v9, v10);
  }
  v14 = __p[1];
  if (__p[1] != (void *)15)
  {
    if (__p[1] != (void *)22)
      goto LABEL_39;
    v15 = *(_QWORD *)__p[0] == 0x53656372756F533CLL && *((_QWORD *)__p[0] + 1) == 0x656D694465746174;
    v16 = v15 && *(_QWORD *)((char *)__p[0] + 14) == 0x3E6E6F69736E656DLL;
    v13 = (uint64_t)(a1 + 1);
    if (!v16)
      goto LABEL_39;
    goto LABEL_36;
  }
  v17 = *(_QWORD *)__p[0] == 0x6574744178614D3CLL && *(_QWORD *)((char *)__p[0] + 7) == 0x3E736E6F69746E65;
  v13 = (uint64_t)a1 + 12;
  if (v17)
    goto LABEL_36;
  v14 = __p[1];
LABEL_39:
  if (v14 != (void *)12)
    goto LABEL_65;
  v19 = (void **)__p[0];
LABEL_41:
  v20 = *v19;
  v21 = *((_DWORD *)v19 + 2);
  if (v20 != (void *)0x6E6F706D6F432F3CLL || v21 != 1047817829)
  {
LABEL_65:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 256);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Unrecognized token ", 19);
    if (SHIBYTE(__p[2]) >= 0)
      v36 = __p;
    else
      v36 = (void **)__p[0];
    if (SHIBYTE(__p[2]) >= 0)
      v37 = HIBYTE(__p[2]);
    else
      v37 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
  }
LABEL_46:
  v23 = a1[2];
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = a1[3];
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = a1[4];
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = a1[5];
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<SourceDotTransform>");
  v27 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v27)
  {
    a1[2] = 0;
LABEL_73:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 266);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"read source dot transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
  }
  a1[2] = v28;
  if (!v28)
    goto LABEL_73;
  kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
  kaldi::ExpectToken(a2, a3, (kaldi *)"<TargetDotTransform>");
  v29 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v29)
  {
    a1[3] = 0;
LABEL_75:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 270);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"read target dot transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
  }
  a1[3] = v30;
  if (!v30)
    goto LABEL_75;
  kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
  kaldi::ExpectToken(a2, a3, (kaldi *)"<SourceAddTransform>");
  v31 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v31)
  {
    a1[4] = 0;
LABEL_77:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 274);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"read source add transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
  }
  a1[4] = v32;
  if (!v32)
    goto LABEL_77;
  kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
  kaldi::ExpectToken(a2, a3, (kaldi *)"<TargetAddTransform>");
  v33 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v33)
  {
    a1[5] = 0;
LABEL_79:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", 278);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"read target dot transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
  }
  a1[5] = v34;
  if (!v34)
    goto LABEL_79;
  kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
  kaldi::nnet1::GlobalAttentionComponent::Check((uint64_t)a1);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_1DE479DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::GlobalAttentionComponent::ReadData((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 176)), a2, a3, a4);
}

_QWORD *kaldi::nnet1::GlobalAttentionComponent::WriteConfig(int a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;

  kaldi::WriteToken(a2, a3, (kaldi *)"<SourceStateDimension>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxAttentions>", v7, v8);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  return kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v9, v10);
}

_QWORD *`virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::WriteConfig(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::GlobalAttentionComponent::WriteConfig(a1 + *(_QWORD *)(*a1 - 184), a2, a3, a4, a5);
}

_QWORD *kaldi::nnet1::GlobalAttentionComponent::WriteData(uint64_t *a1, _QWORD *a2, const char *a3, uint64_t a4)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;

  (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  kaldi::WriteToken(a2, a3, (kaldi *)"<SourceDotTransform>", v8, v9);
  kaldi::nnet1::Component::Write(a1[2], a2, (uint64_t)a3, a4);
  kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v10, v11);
  kaldi::WriteToken(a2, a3, (kaldi *)"<TargetDotTransform>", v12, v13);
  kaldi::nnet1::Component::Write(a1[3], a2, (uint64_t)a3, a4);
  kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v14, v15);
  kaldi::WriteToken(a2, a3, (kaldi *)"<SourceAddTransform>", v16, v17);
  kaldi::nnet1::Component::Write(a1[4], a2, (uint64_t)a3, a4);
  kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v18, v19);
  kaldi::WriteToken(a2, a3, (kaldi *)"<TargetAddTransform>", v20, v21);
  kaldi::nnet1::Component::Write(a1[5], a2, (uint64_t)a3, a4);
  return kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v22, v23);
}

_QWORD *`virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::WriteData(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4)
{
  return kaldi::nnet1::GlobalAttentionComponent::WriteData((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 120)), a2, a3, a4);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::NumParams(kaldi::nnet1::GlobalAttentionComponent *this)
{
  int v2;
  int v3;
  int v4;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 176))(*((_QWORD *)this + 2));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 176))(*((_QWORD *)this + 3)) + v2;
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 176))(*((_QWORD *)this + 4));
  return v3 + v4 + (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 5) + 176))(*((_QWORD *)this + 5));
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::NumParams(kaldi::nnet1::GlobalAttentionComponent *this)
{
  return kaldi::nnet1::GlobalAttentionComponent::NumParams((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192)));
}

void kaldi::nnet1::GlobalAttentionComponent::GetParams(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  int v23;
  const char *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = ((uint64_t (*)(_QWORD **))(*a1)[14])(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 1, v5, v6);
  v28 = 0;
  v29 = 0;
  v30 = 0;
  (*(void (**)(_QWORD *, uint64_t *))(*a1[2] + 184))(a1[2], &v28);
  v26 = 0;
  v27 = 0;
  v25 = 0;
  if (v29 > *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
  v25 = *(void **)a2;
  LODWORD(v26) = v29;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v25, (uint64_t)&v28, v7, v8, v9);
  v10 = (int)v29;
  (*(void (**)(_QWORD *, uint64_t *))(*a1[3] + 184))(a1[3], &v28);
  v26 = 0;
  v27 = 0;
  if ((v29 + v10) > *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v13);
  v25 = (void *)(*(_QWORD *)a2 + 4 * v10);
  LODWORD(v26) = v29;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v25, (uint64_t)&v28, v11, v12, v13);
  v14 = v29;
  (*(void (**)(_QWORD *, uint64_t *))(*a1[4] + 184))(a1[4], &v28);
  v18 = v14 + v10;
  v26 = 0;
  v27 = 0;
  if ((v29 + v18) > *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v17);
  v25 = (void *)(*(_QWORD *)a2 + 4 * v18);
  LODWORD(v26) = v29;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v25, (uint64_t)&v28, v15, v16, v17);
  v19 = v29;
  (*(void (**)(_QWORD *, uint64_t *))(*a1[5] + 184))(a1[5], &v28);
  v23 = v19 + v18;
  v26 = 0;
  v27 = 0;
  if ((v29 + v19 + v18) > *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v22);
  v25 = (void *)(*(_QWORD *)a2 + 4 * v23);
  LODWORD(v26) = v29;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v25, (uint64_t)&v28, v20, v21, v22);
  if ((_DWORD)v29 + v23 != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"GetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)0x148, "shift == wei_copy->Dim()", v24);
  kaldi::Vector<float>::Destroy((uint64_t)&v28);
}

void sub_1DE47A294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::GetParams(_QWORD *a1, uint64_t a2)
{
  kaldi::nnet1::GlobalAttentionComponent::GetParams((_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 200)), a2);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::SetParams(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  const char *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a1[2];
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
  v19 = 0;
  v20 = 0;
  if (v5 > *(_DWORD *)(a2 + 8))
    goto LABEL_7;
  v18 = *(_QWORD *)a2;
  LODWORD(v19) = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 192))(v4, &v18);
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[2] + 176))(a1[2]);
  v8 = a1[3];
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 176))(v8);
  v19 = 0;
  v20 = 0;
  if ((v9 + v7) > *(_DWORD *)(a2 + 8))
    goto LABEL_7;
  v18 = *(_QWORD *)a2 + 4 * v7;
  LODWORD(v19) = v9;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 192))(v8, &v18);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[3] + 176))(a1[3]) + v7;
  v11 = a1[4];
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 176))(v11);
  v19 = 0;
  v20 = 0;
  if ((v12 + v10) > *(_DWORD *)(a2 + 8))
    goto LABEL_7;
  v18 = *(_QWORD *)a2 + 4 * v10;
  LODWORD(v19) = v12;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 192))(v11, &v18);
  v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[4] + 176))(a1[4]) + v10;
  v14 = a1[5];
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 176))(v14);
  v19 = 0;
  v20 = 0;
  if ((v15 + v13) > *(_DWORD *)(a2 + 8))
LABEL_7:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v6);
  v18 = *(_QWORD *)a2 + 4 * v13;
  LODWORD(v19) = v15;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 192))(v14, &v18);
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[5] + 176))(a1[5]);
  if ((_DWORD)result + v13 != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)0x155, "shift == wei_src.Dim()", v17);
  return result;
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::SetParams(_QWORD *a1, uint64_t a2)
{
  return kaldi::nnet1::GlobalAttentionComponent::SetParams((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 208)), a2);
}

float kaldi::nnet1::GlobalAttentionComponent::SumParams(kaldi::nnet1::GlobalAttentionComponent *this)
{
  float v2;
  float v3;
  float v4;

  v2 = (*(float (**)(_QWORD))(**((_QWORD **)this + 2) + 208))(*((_QWORD *)this + 2));
  v3 = v2 + (*(float (**)(_QWORD))(**((_QWORD **)this + 3) + 208))(*((_QWORD *)this + 3));
  v4 = v3 + (*(float (**)(_QWORD))(**((_QWORD **)this + 4) + 208))(*((_QWORD *)this + 4));
  return v4 + (*(float (**)(_QWORD))(**((_QWORD **)this + 5) + 208))(*((_QWORD *)this + 5));
}

float `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::SumParams(kaldi::nnet1::GlobalAttentionComponent *this)
{
  return kaldi::nnet1::GlobalAttentionComponent::SumParams((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 224)));
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::PerturbParams(kaldi::nnet1::GlobalAttentionComponent *this, float a2)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 216))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD, float))(**((_QWORD **)this + 3) + 216))(*((_QWORD *)this + 3), a2);
  (*(void (**)(_QWORD, float))(**((_QWORD **)this + 4) + 216))(*((_QWORD *)this + 4), a2);
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 5) + 216))(*((_QWORD *)this + 5), a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::PerturbParams(kaldi::nnet1::GlobalAttentionComponent *this, float a2)
{
  return kaldi::nnet1::GlobalAttentionComponent::PerturbParams((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 232)), a2);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::Info(kaldi::nnet1::GlobalAttentionComponent *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  void **v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void **v23;
  uint64_t v24;
  void *__p[2];
  unsigned __int8 v27;
  void *v28[2];
  unsigned __int8 v29;
  void *v30[2];
  unsigned __int8 v31;
  void *v32[2];
  unsigned __int8 v33;
  _QWORD v34[11];
  char v35;
  uint64_t v36;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v34);
  (*(void (**)(kaldi::nnet1::GlobalAttentionComponent *, _QWORD *, _QWORD))(*(_QWORD *)this + 96))(this, v34, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"\n## Source Dot Transform: input-dim ", 36);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", output-dim ", 13);
  v3 = (_QWORD *)std::ostream::operator<<();
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 2) + 64))(v32);
  if ((v33 & 0x80u) == 0)
    v5 = v32;
  else
    v5 = (void **)v32[0];
  if ((v33 & 0x80u) == 0)
    v6 = v33;
  else
    v6 = (uint64_t)v32[1];
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n## Target Dot Transform: input-dim ", 36);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", output-dim ", 13);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 3) + 64))(v30);
  if ((v31 & 0x80u) == 0)
    v11 = v30;
  else
    v11 = (void **)v30[0];
  if ((v31 & 0x80u) == 0)
    v12 = v31;
  else
    v12 = (uint64_t)v30[1];
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n## Source Add Transform: input-dim ", 36);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", output-dim ", 13);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 4) + 64))(v28);
  if ((v29 & 0x80u) == 0)
    v17 = v28;
  else
    v17 = (void **)v28[0];
  if ((v29 & 0x80u) == 0)
    v18 = v29;
  else
    v18 = (uint64_t)v28[1];
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n## Target Add Transform: input-dim ", 36);
  v20 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", output-dim ", 13);
  v21 = (_QWORD *)std::ostream::operator<<();
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 5) + 64))(__p);
  if ((v27 & 0x80u) == 0)
    v23 = __p;
  else
    v23 = (void **)__p[0];
  if ((v27 & 0x80u) == 0)
    v24 = v27;
  else
    v24 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
  if ((char)v27 < 0)
    operator delete(__p[0]);
  if ((char)v29 < 0)
    operator delete(v28[0]);
  if ((char)v31 < 0)
    operator delete(v30[0]);
  if ((char)v33 < 0)
    operator delete(v32[0]);
  std::stringbuf::str();
  v34[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v34[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v35 < 0)
    operator delete((void *)v34[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v36);
}

void sub_1DE47A900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::Info(kaldi::nnet1::GlobalAttentionComponent *this)
{
  return kaldi::nnet1::GlobalAttentionComponent::Info((kaldi::nnet1::GlobalAttentionComponent *)((char *)this
                                                                                               + *(_QWORD *)(*(_QWORD *)this - 80)));
}

void kaldi::nnet1::GlobalAttentionComponent::InfoGradient(kaldi::nnet1::GlobalAttentionComponent *this@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  void *__p[2];
  unsigned __int8 v20;
  void *v21[2];
  unsigned __int8 v22;
  void *v23[2];
  unsigned __int8 v24;
  void *v25[2];
  unsigned __int8 v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;

  (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 72))(&v27);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 3) + 72))(v25);
  if ((v26 & 0x80u) == 0)
    v4 = v25;
  else
    v4 = (void **)v25[0];
  if ((v26 & 0x80u) == 0)
    v5 = v26;
  else
    v5 = (std::string::size_type)v25[1];
  v6 = std::string::append(&v27, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 4) + 72))(v23);
  if ((v24 & 0x80u) == 0)
    v8 = v23;
  else
    v8 = (void **)v23[0];
  if ((v24 & 0x80u) == 0)
    v9 = v24;
  else
    v9 = (std::string::size_type)v23[1];
  v10 = std::string::append(&v28, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 5) + 72))(v21);
  if ((v22 & 0x80u) == 0)
    v12 = v21;
  else
    v12 = (void **)v21[0];
  if ((v22 & 0x80u) == 0)
    v13 = v22;
  else
    v13 = (std::string::size_type)v21[1];
  v14 = std::string::append(&v29, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "\n");
  if ((v20 & 0x80u) == 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if ((v20 & 0x80u) == 0)
    v17 = v20;
  else
    v17 = (std::string::size_type)__p[1];
  v18 = std::string::append(&v30, (const std::string::value_type *)v16, v17);
  *a2 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((char)v20 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if ((char)v22 < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if ((char)v24 < 0)
    operator delete(v23[0]);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if ((char)v26 < 0)
    operator delete(v25[0]);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void sub_1DE47AB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v45 - 41) < 0)
    operator delete(*(void **)(v45 - 64));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v45 - 73) < 0)
    operator delete(*(void **)(v45 - 96));
  if (a27 < 0)
    operator delete(a22);
  if (a45 < 0)
    operator delete(a40);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::InfoGradient(kaldi::nnet1::GlobalAttentionComponent *this@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::GlobalAttentionComponent::InfoGradient((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)), a2);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::SetTrainOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v5 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v4 + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(v4 + 56) = v5;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 264))(*(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 264))(*(_QWORD *)(a1 + 24), a2);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 264))(*(_QWORD *)(a1 + 32), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 264))(*(_QWORD *)(a1 + 40), a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::SetTrainOptions(_QWORD *a1, uint64_t a2)
{
  return kaldi::nnet1::GlobalAttentionComponent::SetTrainOptions((uint64_t)a1 + *(_QWORD *)(*a1 - 280), a2);
}

void kaldi::nnet1::GlobalAttentionComponent::SetSourceStates(uint64_t a1, uint64_t a2, int **a3)
{
  const char *v6;
  uint64_t v7;
  int v8;
  int v9;
  const char *v10;
  int v11;
  int *v12;
  int *v13;
  int v14;
  void *__p;
  void *v16;
  uint64_t v17;

  kaldi::nnet1::GlobalAttentionComponent::Check(a1);
  v7 = (char *)a3[1] - (char *)*a3;
  v8 = *(_DWORD *)(a2 + 20);
  v9 = v8 / (int)((unint64_t)v7 >> 2);
  if (v9 * ((unint64_t)v7 >> 2) != v8)
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)0x183, "seq_size * num_seq == source.NumRows()", v6);
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)0x184, "source.NumCols() == source_vec_dim_", v6);
  kaldi::CuMatrix<float>::operator=(a1 + 384, a2);
  if ((int **)(a1 + 840) != a3)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 840), (char *)*a3, (uint64_t)a3[1], a3[1] - *a3);
  v12 = *a3 + 1;
  v11 = **a3;
  *(_DWORD *)(a1 + 864) = v11;
  v13 = a3[1];
  while (v12 != v13)
  {
    v14 = *v12;
    if (*v12 > v11)
    {
      *(_DWORD *)(a1 + 864) = v14;
      v11 = v14;
    }
    ++v12;
  }
  if (v11 >= *(_DWORD *)(a1 + 12))
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)0x18D, "max_src_length_ < max_attentions_", v10);
  if (v11 >= v9)
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)0x18E, "max_src_length_ + 1 <= seq_size", v10);
  kaldi::nnet1::Component::Propagate(*(_DWORD **)(a1 + 16), a1 + 384, a1 + 48, 0);
  kaldi::nnet1::Component::Propagate(*(_DWORD **)(a1 + 32), a1 + 384, a1 + 144, 0);
  __p = 0;
  v16 = 0;
  v17 = 0;
  std::vector<std::vector<int>>::assign((uint64_t *)(a1 + 816), (int)(v7 >> 2), (uint64_t)&__p);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_1DE47AEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<int>>::assign(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  char *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;

  v6 = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= a2)
  {
    v13 = (a1[1] - (uint64_t)v6) / 24;
    if (v13 >= a2)
      v14 = a2;
    else
      v14 = (a1[1] - (uint64_t)v6) / 24;
    for (; v14; --v14)
    {
      if (v6 != (char *)a3)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v6, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v6 += 24;
    }
    if (a2 <= v13)
    {
      v18 = a1[1];
      v19 = *a1 + 24 * a2;
      if (v18 != v19)
      {
        v20 = a1[1];
        do
        {
          v22 = *(void **)(v20 - 24);
          v20 -= 24;
          v21 = v22;
          if (v22)
          {
            *(_QWORD *)(v18 - 16) = v21;
            operator delete(v21);
          }
          v18 = v20;
        }
        while (v20 != v19);
      }
      a1[1] = v19;
    }
    else
    {
      v15 = (_QWORD *)a1[1];
      v16 = &v15[3 * (a2 - v13)];
      v17 = -24 * v13 + 24 * a2;
      do
      {
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v15, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
        v15 += 3;
        v17 -= 24;
      }
      while (v17);
      a1[1] = (uint64_t)v16;
    }
  }
  else
  {
    std::vector<std::vector<int>>::__vdeallocate(a1);
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
    if (v7 <= a2)
      v7 = a2;
    if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
      v8 = 0xAAAAAAAAAAAAAAALL;
    else
      v8 = v7;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, v8);
    v9 = (_QWORD *)a1[1];
    v10 = 3 * a2;
    v11 = &v9[3 * a2];
    v12 = 8 * v10;
    do
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v9, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v9 += 3;
      v12 -= 24;
    }
    while (v12);
    a1[1] = (uint64_t)v11;
  }
}

void sub_1DE47B0A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::GetSourceDiffs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v8;
  size_t v9;
  const void *v10;

  kaldi::nnet1::GlobalAttentionComponent::Check(a1);
  if (*(_DWORD *)(a2 + 20) != *(_DWORD *)(a1 + 404))
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)0x19A, "source.NumRows() == source_states_.NumRows()", v8);
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 400))
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)0x19B, "source.NumCols() == source_states_.NumCols()", v8);
  v9 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  v10 = *(const void **)(a1 + 840);
  if (v9 != *(_QWORD *)(a1 + 848) - (_QWORD)v10 || memcmp(*(const void **)a3, v10, v9))
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)0x19C, "sequence_length == src_sequence_length_", v8);
  return kaldi::CuMatrix<float>::Swap(a1 + 432, a4);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::GetCurrentAlignment(uint64_t a1, std::vector<int> *this)
{
  int v4;
  std::vector<int>::pointer begin;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = -1431655765 * ((uint64_t)(*(_QWORD *)(a1 + 824) - *(_QWORD *)(a1 + 816)) >> 3);
  std::vector<int>::resize(this, v4);
  if (v4 >= 1)
  {
    begin = this->__begin_;
    v6 = v4;
    v7 = (uint64_t *)(*(_QWORD *)(a1 + 816) + 8);
    do
    {
      v8 = *v7;
      v7 += 3;
      *begin++ = *(_DWORD *)(v8 - 4);
      --v6;
    }
    while (v6);
  }
  return 1;
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::GetOverallAlignment(uint64_t a1, uint64_t a2)
{
  if (a1 + 816 != a2)
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(a2, *(_QWORD *)(a1 + 816), *(_QWORD *)(a1 + 824), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 824) - *(_QWORD *)(a1 + 816)) >> 3));
  return 1;
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::SetSourceVectorDimension(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 8) != a2)
  {
    *(_DWORD *)(this + 8) = a2;
    *(_BYTE *)(this + 868) = 0;
  }
  return this;
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::SetMaxAttentions(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 12) != a2)
  {
    *(_DWORD *)(this + 12) = a2;
    *(_BYTE *)(this + 868) = 0;
  }
  return this;
}

void kaldi::nnet1::GlobalAttentionComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  const char *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  float v38;
  float v39;
  int v40;
  uint64_t v41;
  int *v42;
  int **v43;
  unint64_t v44;
  _QWORD *v45;
  int *v46;
  int *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  int *v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  char *v57;
  float v58;
  int v59;
  float v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  const char *v72;
  const char *v73;
  unint64_t v74;
  unsigned int v75;
  const char *v76;
  char *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  unsigned int v84;
  int v85;
  unint64_t v86;
  _DWORD *v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD v98[4];
  void *v99;
  __int128 v100;
  __int128 v101;
  void *v102;
  __int128 v103;
  __int128 v104;
  void *v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;

  v6 = a1;
  kaldi::nnet1::GlobalAttentionComponent::Check(a1);
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)0x1C1, "in.NumCols() == input_dim_", v7);
  if (a4)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)0x1C3, "batch_idx == 0", v7);
  v8 = *(_QWORD *)(v6 + 848) - *(_QWORD *)(v6 + 840);
  v9 = *(unsigned int *)(a2 + 20);
  v86 = v8 >> 2;
  v85 = (int)v9 / (int)(v8 >> 2);
  if (v85 * (v8 >> 2) != (_DWORD)v9)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)0x1C9, "num_seq * tgt_seq_size == in.NumRows()", v7);
  v10 = *(_DWORD *)(v6 + 404);
  v11 = v6 + 96;
  kaldi::nnet1::Component::Propagate(*(_DWORD **)(v6 + 24), a2, v6 + 96, 0);
  v81 = v6 + 192;
  kaldi::nnet1::Component::Propagate(*(_DWORD **)(v6 + 40), a2, v6 + 192, 0);
  v87 = (_DWORD *)(v6 + 624);
  kaldi::CuVector<float>::Resize(v6 + 624, *(unsigned int *)(v6 + 404), 0, v12, v13);
  v14 = *(unsigned int *)(v6 + 404);
  v113 = 0;
  v114 = 0;
  v112 = 0;
  kaldi::Vector<float>::Resize((void **)&v112, v14, 1, v15, v16);
  kaldi::Matrix<float>::Matrix((uint64_t)&v108);
  v17 = v8 >> 2;
  v83 = v6 + 480;
  v84 = v10 / (int)v86;
  kaldi::CuMatrix<float>::Resize(v6 + 480, v9, (v10 / (int)v86), 1u, 0);
  if (v85 >= 1)
  {
    v88 = 0;
    v80 = v6 + 48;
    v91 = v6 + 576;
    v89 = v6 + 144;
    v18 = (int)((uint64_t)v8 >> 2);
    v93 = (v8 >> 2);
    v78 = "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMat"
          "rixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)";
    v77 = "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h";
    v79 = v6 + 96;
    v92 = v6;
    do
    {
      kaldi::CuMatrix<float>::operator=(v91, v80);
      v90 = v88 * v17;
      if (*(int *)(v6 + 864) >= 1)
      {
        v22 = 0;
        v23 = 0;
        do
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v105, v91, v22, v17, 0, *(_DWORD *)(v6 + 592));
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v102, v11, v90, v17, 0, *(_DWORD *)(v6 + 112));
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v105, (uint64_t)&v102, v24, v25, v26);
          v102 = &unk_1EA926508;
          v103 = 0u;
          v104 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v102);
          v105 = &unk_1EA926508;
          v106 = 0u;
          v107 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v105);
          ++v23;
          v22 += v17;
        }
        while (v23 < *(_DWORD *)(v6 + 864));
      }
      kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v87, v91, 1.0, 0.0, v19, v20, v21);
      kaldi::CuVectorBase<float>::CopyToVec<float>(v87, (uint64_t)&v112, v27, v28, v29);
      kaldi::Matrix<float>::Resize((uint64_t)&v108, v17, v84, 0, 0);
      if ((int)v17 >= 1)
      {
        v31 = 0;
        v32 = 0;
        v33 = -(int)v86;
        do
        {
          v34 = *(unsigned int *)(*(_QWORD *)(v6 + 840) + 4 * v32);
          if ((int)v34 < 1)
          {
            v37 = -1;
            v38 = -INFINITY;
          }
          else
          {
            v35 = 0;
            v36 = 0;
            v37 = -1;
            v38 = -INFINITY;
            do
            {
              if (v113 <= v33 + (int)v35 + (int)v18)
                kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v30);
              v39 = *(float *)&v112[4 * v35 + v31];
              if (v39 > v38)
                v37 = v36;
              v40 = v36 + 1;
              if (v39 > v38)
                v38 = *(float *)&v112[4 * v35 + v31];
              v35 += v18;
              ++v36;
            }
            while ((_DWORD)v34 != v40);
          }
          v41 = *(_QWORD *)(v6 + 816) + 24 * v32;
          v43 = (int **)(v41 + 8);
          v42 = *(int **)(v41 + 8);
          v45 = (_QWORD *)(v41 + 16);
          v44 = *(_QWORD *)(v41 + 16);
          if ((unint64_t)v42 >= v44)
          {
            v47 = *(int **)v41;
            v48 = ((uint64_t)v42 - *(_QWORD *)v41) >> 2;
            v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v50 = v44 - (_QWORD)v47;
            if (v50 >> 1 > v49)
              v49 = v50 >> 1;
            if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
              v51 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v51 = v49;
            if (v51)
            {
              v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v45, v51);
              v42 = *v43;
              v47 = *(int **)v41;
            }
            else
            {
              v52 = 0;
            }
            v53 = (int *)&v52[4 * v48];
            *v53 = v37;
            v46 = v53 + 1;
            while (v42 != v47)
            {
              v54 = *--v42;
              *--v53 = v54;
            }
            *(_QWORD *)v41 = v53;
            *v43 = v46;
            *v45 = &v52[4 * v51];
            if (v47)
              operator delete(v47);
          }
          else
          {
            *v42 = v37;
            v46 = v42 + 1;
          }
          v6 = v92;
          *v43 = v46;
          if ((int)v34 >= 1)
          {
            v55 = 0;
            v56 = v113;
            v57 = &v112[v31];
            v58 = 0.0;
            v59 = v34;
            do
            {
              if (v56 <= v33 + (int)v55 + (int)v18)
                kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v30);
              --v59;
              v60 = expf(*(float *)&v57[4 * v55] - v38);
              *(float *)&v57[4 * v55] = v60;
              v58 = v58 + v60;
              v55 += v18;
            }
            while (v59);
            v61 = 0;
            v62 = 0;
            v63 = v113;
            v64 = v110;
            v65 = v108 + 4 * v111 * (int)v32;
            v66 = &v112[v31];
            v6 = v92;
            while (v63 > v33 + (int)v61 + (int)v18)
            {
              v67 = 205;
              if (v32 >= v64 || v62 >= v109)
                goto LABEL_60;
              *(float *)(v65 + 4 * v62) = (float)(1.0 / v58) * *(float *)&v66[4 * v61];
              v61 += v18;
              if (v34 == ++v62)
                goto LABEL_46;
            }
            v67 = 104;
            v77 = "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h";
            v78 = "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)";
LABEL_60:
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", v77, (const char *)v67, v78, v30);
          }
LABEL_46:
          ++v32;
          ++v33;
          v31 += 4;
        }
        while (v32 != v93);
      }
      v17 = v86;
      v68 = kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v105, v83, v90, v86, 0, *(_DWORD *)(v6 + 496));
      kaldi::CuMatrixBase<float>::CopyFromMat(v68, (uint64_t)&v108, 111, v69, v70);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v102, a3, v90, v86, 0, *(_DWORD *)(a3 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v99, v81, v90, v86, 0, *(_DWORD *)(v6 + 208));
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v102, (uint64_t)&v99, 111, v71, v72);
      v99 = &unk_1EA926508;
      v100 = 0u;
      v101 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v99);
      if ((int)v86 >= 1)
      {
        v74 = 0;
        do
        {
          if (v74 >= HIDWORD(v103))
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v73);
          v75 = *(_DWORD *)(*(_QWORD *)(v6 + 840) + 4 * v74);
          v98[0] = &unk_1EA926538;
          v98[1] = v103 + 4 * (int)v104 * (int)v74;
          v98[3] = *((_QWORD *)&v104 + 1);
          v98[2] = DWORD2(v103);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v99, v89, v74, v75 * v86, 0, *(_DWORD *)(v6 + 160));
          if ((_DWORD)v86 != 1)
            kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v99, *(_DWORD *)(v6 + 168) * v86);
          if (v74 >= HIDWORD(v106))
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v76);
          v96 = 0;
          v97 = 0;
          v95 = 0;
          v94 = &unk_1EA926538;
          if (v75 > DWORD2(v106))
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v76);
          v95 = v106 + 4 * (int)v107 * (int)v74;
          LODWORD(v96) = v75;
          v97 = *((_QWORD *)&v107 + 1);
          kaldi::CuVectorBase<float>::AddMatVec((uint64_t)v98, (uint64_t)&v99, CblasTrans, (uint64_t)&v94, v76, 1.0, 1.0);
          v99 = &unk_1EA926508;
          v100 = 0u;
          v101 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v99);
          ++v74;
        }
        while (v93 != v74);
      }
      v102 = &unk_1EA926508;
      v103 = 0u;
      v104 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v102);
      v105 = &unk_1EA926508;
      v106 = 0u;
      v107 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v105);
      ++v88;
      v11 = v79;
    }
    while (v88 != v85);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)&v108);
  kaldi::Vector<float>::Destroy((uint64_t)&v112);
}

void sub_1DE47BADC(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::Matrix<float>::~Matrix(v1 - 184);
  kaldi::Vector<float>::Destroy(v1 - 144);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  kaldi::nnet1::GlobalAttentionComponent::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 128), a2, a3, a4);
}

void kaldi::nnet1::GlobalAttentionComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  const char *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  __int128 v82;
  __int128 v83;

  kaldi::nnet1::GlobalAttentionComponent::Check(a1);
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)0x20E, "in.NumCols() == input_dim_", v11);
  if (a6)
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)0x20F, "batch_idx == 0", v11);
  v64 = a5;
  v12 = *(_QWORD *)(a1 + 848) - *(_QWORD *)(a1 + 840);
  v13 = v12 >> 2;
  v14 = *(_DWORD *)(a2 + 20);
  v15 = (v14 / (int)(v12 >> 2));
  if ((_DWORD)v15 * (v12 >> 2) != v14)
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)0x212, "num_seq * tgt_seq_size == in.NumRows()", v11);
  v68 = a1 + 240;
  kaldi::CuMatrix<float>::Resize(a1 + 240, *(unsigned int *)(a1 + 404), *(unsigned int *)(*(_QWORD *)(a1 + 16) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(a1 + 288, *(unsigned int *)(a2 + 20), *(unsigned int *)(*(_QWORD *)(a1 + 24) + 12), 0, 0);
  v67 = a1 + 336;
  kaldi::CuMatrix<float>::Resize(a1 + 336, *(unsigned int *)(a1 + 404), *(unsigned int *)(*(_QWORD *)(a1 + 32) + 12), 0, 0);
  if ((int)v15 >= 1)
  {
    v18 = 0;
    v71 = a1 + 736;
    v72 = a1 + 704;
    v69 = 0;
    v70 = a1 + 768;
    v66 = (v12 >> 2);
    do
    {
      v65 = v18;
      if ((int)v13 >= 1)
      {
        v19 = 0;
        do
        {
          v20 = *(unsigned int *)(*(_QWORD *)(a1 + 840) + 4 * v19);
          kaldi::CuVector<float>::Resize(v72, v20, 1u, v16, v17);
          v21 = kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v81, a1 + 144, v19, (int)v20 * (int)v13, 0, *(_DWORD *)(a1 + 160));
          if ((_DWORD)v13 != 1)
            kaldi::CuMatrixBase<float>::SetStride(v21, *(_DWORD *)(a1 + 168) * v13);
          v23 = v69 + v19;
          if (v23 >= *(unsigned int *)(a4 + 20))
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v22);
          v24 = v69 + v19;
          v25 = *(_QWORD *)(a4 + 8) + 4 * (int)(*(_DWORD *)(a4 + 24) * (v69 + v19));
          v26 = *(_DWORD *)(a4 + 16);
          v27 = *(_QWORD *)(a4 + 32);
          v77 = &unk_1EA926538;
          v78 = v25;
          v80 = v27;
          v79 = v26;
          kaldi::CuVectorBase<float>::AddMatVec(v72, (uint64_t)&v81, CblasNoTrans, (uint64_t)&v77, v22, 1.0, 0.0);
          v81 = &unk_1EA926508;
          v82 = 0u;
          v83 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v81);
          if (v23 >= *(unsigned int *)(a1 + 500))
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v28);
          v29 = *(_QWORD *)(a1 + 488);
          v30 = *(_DWORD *)(a1 + 504);
          v31 = *(_DWORD *)(a1 + 496);
          v32 = *(_QWORD *)(a1 + 512);
          v79 = 0;
          v80 = 0;
          v78 = 0;
          v77 = &unk_1EA926538;
          if (v20 > v31)
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v28);
          v78 = v29 + 4 * v30 * v24;
          LODWORD(v79) = v20;
          v80 = v32;
          kaldi::CuMatrix<float>::Resize(a1 + 656, v20, v20, 0, 0);
          kaldi::CuMatrixBase<float>::AddToDiag(a1 + 656, (uint64_t)&v77, v33, v34, v35, 1.0, 0.0);
          kaldi::CuMatrixBase<float>::AddVecVec(a1 + 656, (uint64_t)&v77, (uint64_t)&v77, v36, v37, -1.0, 1.0);
          kaldi::CuVector<float>::Resize(v71, v20, 1u, v38, v39);
          kaldi::CuVectorBase<float>::AddMatVec(v71, a1 + 656, CblasNoTrans, v72, v40, 1.0, 0.0);
          v41 = kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v81, v68, v19, (int)v20 * (int)v13, 0, *(_DWORD *)(a1 + 256));
          if ((_DWORD)v13 != 1)
            kaldi::CuMatrixBase<float>::SetStride(v41, *(_DWORD *)(a1 + 264) * v13);
          if (v23 >= *(unsigned int *)(a1 + 116))
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v43);
          v44 = *(_QWORD *)(a1 + 104) + 4 * *(_DWORD *)(a1 + 120) * v24;
          v45 = *(_DWORD *)(a1 + 112);
          v46 = *(_QWORD *)(a1 + 128);
          v73 = &unk_1EA926538;
          v74 = v44;
          v76 = v46;
          v75 = v45;
          kaldi::CuMatrixBase<float>::AddVecVec((uint64_t)&v81, v71, (uint64_t)&v73, v42, v43, 1.0, 1.0);
          v81 = &unk_1EA926508;
          v82 = 0u;
          v83 = 0u;
          v47 = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v81);
          v48 = kaldi::CuSubMatrix<float>::CuSubMatrix(v47, v67, v19, (int)v20 * (int)v13, 0, *(_DWORD *)(a1 + 352));
          if ((_DWORD)v13 != 1)
            kaldi::CuMatrixBase<float>::SetStride(v48, *(_DWORD *)(a1 + 360) * v13);
          if (v23 >= *(unsigned int *)(a4 + 20))
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v50);
          v51 = *(_QWORD *)(a4 + 8) + 4 * *(_DWORD *)(a4 + 24) * v24;
          v52 = *(_DWORD *)(a4 + 16);
          v53 = *(_QWORD *)(a4 + 32);
          v73 = &unk_1EA926538;
          v74 = v51;
          v76 = v53;
          v75 = v52;
          kaldi::CuMatrixBase<float>::AddVecVec((uint64_t)&v81, (uint64_t)&v77, (uint64_t)&v73, v49, v50, 1.0, 1.0);
          v81 = &unk_1EA926508;
          v82 = 0u;
          v83 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v81);
          kaldi::CuMatrix<float>::Resize(v70, v20, *(unsigned int *)(*(_QWORD *)(a1 + 24) + 12), 0, 0);
          v54 = kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v81, a1 + 48, v19, (int)v20 * (int)v13, 0, *(_DWORD *)(a1 + 64));
          if ((_DWORD)v13 != 1)
            kaldi::CuMatrixBase<float>::SetStride(v54, *(_DWORD *)(a1 + 72) * v13);
          kaldi::CuMatrixBase<float>::AddMatMat(v70, a1 + 656, CblasNoTrans, (uint64_t)&v81, (const char *)0x6F, 1.0, 0.0);
          v81 = &unk_1EA926508;
          v82 = 0u;
          v83 = 0u;
          v55 = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v81);
          if (v23 >= *(unsigned int *)(a1 + 308))
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v56);
          v57 = *(_QWORD *)(a1 + 296) + 4 * *(_DWORD *)(a1 + 312) * v24;
          v58 = *(_DWORD *)(a1 + 304);
          v59 = *(_QWORD *)(a1 + 320);
          v81 = &unk_1EA926538;
          *(_QWORD *)&v82 = v57;
          *(_QWORD *)&v83 = v59;
          *((_QWORD *)&v82 + 1) = v58;
          kaldi::CuVectorBase<float>::AddMatVec(v55, v70, CblasTrans, v72, v56, 1.0, 1.0);
          ++v19;
        }
        while (v66 != v19);
      }
      v18 = v65 + 1;
      v69 += v13;
    }
    while (v65 + 1 != v15);
  }
  kaldi::CuMatrix<float>::Resize(a1 + 528, *(unsigned int *)(a2 + 20), *(unsigned int *)(*(_QWORD *)(a1 + 40) + 8), 0, 0);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 40) + 128))(*(_QWORD *)(a1 + 40), a2, a1 + 192, a4, a1 + 528, 0);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 24) + 128))(*(_QWORD *)(a1 + 24), a2, a1 + 96, a1 + 288, v64, 0);
  kaldi::CuMatrixBase<float>::AddMat(v64, a1 + 528, 111, v60, v61, 1.0, 1.0);
  kaldi::CuMatrix<float>::Resize(a1 + 528, *(unsigned int *)(a1 + 404), *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8), 0, 0);
  kaldi::CuMatrix<float>::Resize(a1 + 432, *(unsigned int *)(a1 + 404), *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8), 0, 0);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 32) + 128))(*(_QWORD *)(a1 + 32), a1 + 384, a1 + 144, v67, a1 + 528, 0);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 16) + 128))(*(_QWORD *)(a1 + 16), a1 + 384, a1 + 48, v68, a1 + 432, 0);
  kaldi::CuMatrixBase<float>::AddMat(a1 + 432, a1 + 528, 111, v62, v63, 1.0, 1.0);
}

void sub_1DE47C3E4(_Unwind_Exception *a1)
{
  _OWORD *v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = &unk_1EA926508;
  *v1 = 0u;
  v1[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2 - 128);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  kaldi::nnet1::GlobalAttentionComponent::BackpropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 144), a2, a3, a4, a5, a6);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::SetGradientNormalization(_QWORD **a1, uint64_t a2, float a3)
{
  (*(void (**)(_QWORD *))(*a1[2] + 240))(a1[2]);
  (*(void (**)(_QWORD *, uint64_t, float))(*a1[3] + 240))(a1[3], a2, a3);
  (*(void (**)(_QWORD *, uint64_t, float))(*a1[4] + 240))(a1[4], a2, a3);
  return (*(uint64_t (**)(_QWORD *, uint64_t, float))(*a1[5] + 240))(a1[5], a2, a3);
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::SetGradientNormalization(_QWORD *a1, uint64_t a2, float a3)
{
  return kaldi::nnet1::GlobalAttentionComponent::SetGradientNormalization((_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 256)), a2, a3);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v10;

  kaldi::nnet1::GlobalAttentionComponent::Check(a1);
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)0x256, "input.NumCols() == input_dim_", v10);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 232))(*(_QWORD *)(a1 + 16), a1 + 384, a1 + 240, a4, a5);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 232))(*(_QWORD *)(a1 + 24), a2, a1 + 288, a4, a5);
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 232))(*(_QWORD *)(a1 + 32), a1 + 384, a1 + 336, a4, a5);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 232))(*(_QWORD *)(a1 + 40), a2, a3, a4, a5);
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::AccumGradients(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return kaldi::nnet1::GlobalAttentionComponent::AccumGradients((uint64_t)a1 + *(_QWORD *)(*a1 - 248), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::UpdateWeights(kaldi::nnet1::GlobalAttentionComponent *this, void *a2, uint64_t a3)
{
  kaldi::nnet1::GlobalAttentionComponent::Check((uint64_t)this);
  (*(void (**)(_QWORD, void *, uint64_t))(**((_QWORD **)this + 2) + 256))(*((_QWORD *)this + 2), a2, a3);
  (*(void (**)(_QWORD, void *, uint64_t))(**((_QWORD **)this + 3) + 256))(*((_QWORD *)this + 3), a2, a3);
  (*(void (**)(_QWORD, void *, uint64_t))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4), a2, a3);
  return (*(uint64_t (**)(_QWORD, void *, uint64_t))(**((_QWORD **)this + 5) + 256))(*((_QWORD *)this + 5), a2, a3);
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::UpdateWeights(kaldi::nnet1::GlobalAttentionComponent *this, void *a2, uint64_t a3)
{
  return kaldi::nnet1::GlobalAttentionComponent::UpdateWeights((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 272)), a2, a3);
}

void kaldi::nnet1::GlobalAttentionComponent::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const void *v11;
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  int v30;
  const char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  char v38;
  _BYTE v39[48];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v40 = 0;
  v41 = 0;
  v42 = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v8, 1, v9, v10);
  v11 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  if (v11)
  else
    v12 = 0;
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v39, *(unsigned int *)(a2 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  v36 = 0u;
  v37 = 0u;
  v35 = &unk_1EA92DFA8;
  v38 = 0;
  kaldi::nnet1::Component::Backpropagate((_QWORD **)((char *)v12 + *(*v12 - 3)), a2, (uint64_t)v39, a3, (uint64_t)&v35, 0);
  v13 = a1 + 384;
  (*(void (**)(_QWORD *, uint64_t, _QWORD **, uint64_t *))(*v12[2] + 224))(v12[2], v13, v12 + 30, &v40);
  v33 = 0;
  v34 = 0;
  v32 = 0;
  if (v41 > *(_DWORD *)(a4 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v16);
  v32 = *(void **)a4;
  LODWORD(v33) = v41;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v32, (uint64_t)&v40, v14, v15, v16);
  v17 = (int)v41;
  (*(void (**)(_QWORD *, uint64_t, _QWORD **, uint64_t *))(*v12[3] + 224))(v12[3], a2, v12 + 36, &v40);
  v33 = 0;
  v34 = 0;
  if ((v41 + v17) > *(_DWORD *)(a4 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v20);
  v32 = (void *)(*(_QWORD *)a4 + 4 * v17);
  LODWORD(v33) = v41;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v32, (uint64_t)&v40, v18, v19, v20);
  v21 = v41;
  (*(void (**)(_QWORD *, uint64_t, _QWORD **, uint64_t *))(*v12[4] + 224))(v12[4], v13, v12 + 42, &v40);
  v25 = v21 + v17;
  v33 = 0;
  v34 = 0;
  if ((v41 + v21 + v17) > *(_DWORD *)(a4 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v24);
  v32 = (void *)(*(_QWORD *)a4 + 4 * v25);
  LODWORD(v33) = v41;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v32, (uint64_t)&v40, v22, v23, v24);
  v26 = v41;
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t *))(*v12[5] + 224))(v12[5], a2, a3, &v40);
  v30 = v26 + v25;
  v33 = 0;
  v34 = 0;
  if ((v41 + v26 + v25) > *(_DWORD *)(a4 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v29);
  v32 = (void *)(*(_QWORD *)a4 + 4 * v30);
  LODWORD(v33) = v41;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v32, (uint64_t)&v40, v27, v28, v29);
  if ((_DWORD)v41 + v30 != *(_DWORD *)(a4 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"GetGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-attention-component.cc", (const char *)0x27C, "shift == gradient_out->Dim()", v31);
  ((void (*)(_QWORD **))(*v12)[1])(v12);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v35);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v39);
  kaldi::Vector<float>::Destroy((uint64_t)&v40);
}

void sub_1DE47C9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  kaldi::Vector<float>::Destroy(v4 - 88);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Component::Backpropagate(_DWORD *lpsrc, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const char *v12;
  uint64_t result;
  void *v14;
  _QWORD *v16;
  _QWORD v17[34];

  if (lpsrc[3] != *(_DWORD *)(a4 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Backpropagate", "../engine/common/libquasar/libkaldi/src/nnet/nnet-component.h", 712);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Non-matching output dims, component:", 36);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" data:", 6);
    std::ostream::operator<<();
    goto LABEL_20;
  }
  if (*((_BYTE *)lpsrc + 17))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "Backpropagate", "../engine/common/libquasar/libkaldi/src/nnet/nnet-component.h", 716);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "Backpropagate() attempted while disabled");
LABEL_20:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  if (a5)
  {
    kaldi::CuMatrix<float>::Resize(a5, *(unsigned int *)(a2 + 20), lpsrc[2], 0, 0);
    if (*(_DWORD *)(a4 + 20) != *(_DWORD *)(a3 + 20)
      || (*(unsigned int (**)(_DWORD *, _QWORD))(*(_QWORD *)lpsrc + 56))(lpsrc, *(unsigned int *)(a2 + 20)) != *(_DWORD *)(a3 + 20))
    {
      kaldi::KaldiAssertFailure_((kaldi *)"Backpropagate", "../engine/common/libquasar/libkaldi/src/nnet/nnet-component.h", (const char *)0x2DE, "out_diff.NumRows() == out.NumRows() && OutputRowCount(in.NumRows()) == out.NumRows()", v12);
    }
    if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a5 + 16))
      kaldi::KaldiAssertFailure_((kaldi *)"Backpropagate", "../engine/common/libquasar/libkaldi/src/nnet/nnet-component.h", (const char *)0x2DF, "in.NumCols() == in_diff->NumCols()", v12);
    if (*(_DWORD *)(a3 + 16) != *(_DWORD *)(a4 + 16))
      kaldi::KaldiAssertFailure_((kaldi *)"Backpropagate", "../engine/common/libquasar/libkaldi/src/nnet/nnet-component.h", (const char *)0x2E0, "out.NumCols() == out_diff.NumCols()", v12);
    return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)lpsrc + 128))(lpsrc, a2, a3, a4, a5, a6);
  }
  else
  {
    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)lpsrc + 24))(lpsrc) == 2055)
      return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)lpsrc + 128))(lpsrc, a2, a3, a4, 0, a6);
    result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)lpsrc + 24))(lpsrc);
    if ((_DWORD)result == 2049 || v14 != 0)
      return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)lpsrc + 128))(lpsrc, a2, a3, a4, 0, a6);
  }
  return result;
}

void sub_1DE47CCBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::GlobalAttentionComponent::GetGradient((uint64_t)a1 + *(_QWORD *)(*a1 - 240), a2, a3, a4);
}

void std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<int>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v20, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>((int)&v21, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    v17 = *(_QWORD *)(a1 + 8);
    do
    {
      v19 = *(void **)(v17 - 24);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *(_QWORD *)(v16 - 16) = v18;
        operator delete(v18);
      }
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1DE47CE58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DE47CE60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<int>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<int>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<int>>,std::vector<int>*,std::vector<int>*,std::vector<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1DE47CF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 16) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<int> *,std::vector<int> *,std::vector<int> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a4, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

kaldi::nnet1::ScaledDotAttention *kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, const kaldi::nnet1::ScaledDotAttention *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *((_QWORD *)a2 + 1);
  *(_QWORD *)this = v5;
  *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 40)) = *((_QWORD *)a2 + 2);
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)) = *((_QWORD *)a2 + 3);
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = *((_QWORD *)a2 + 4);
  v6 = *(_QWORD *)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v6 - 40)) = *((_QWORD *)a2 + 5);
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)) = *((_QWORD *)a2 + 6);
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = *((_QWORD *)a2 + 7);
  *((_QWORD *)this + 1) = &unk_1EA92DFA8;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  v7 = *(_BYTE *)(a3 + 104);
  v8 = *(_DWORD *)(a3 + 108);
  *((_OWORD *)this + 7) = 0u;
  v9 = (uint64_t *)((char *)this + 112);
  *((_QWORD *)this + 7) = &unk_1EA92DFA8;
  *((_BYTE *)this + 48) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = v7;
  *((_DWORD *)this + 27) = v8;
  *((_OWORD *)this + 8) = 0u;
  v10 = *(_QWORD *)(a3 + 112);
  if (v10)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    v12 = *v9;
    *v9 = v11;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = *(_QWORD *)(a3 + 120);
  if (v13)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    v15 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  v16 = *(_QWORD *)(a3 + 128);
  if (v16)
  {
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    v18 = *((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v17;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = *(_QWORD *)(a3 + 136);
  if (v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
    v21 = *((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = v20;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  return this;
}

void sub_1DE47D1E8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = v1[17];
  v1[17] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = v1[16];
  v1[16] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = v1[15];
  v1[15] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *v4;
  *v4 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  kaldi::CuMatrix<float>::~CuMatrix(v3);
  kaldi::CuMatrix<float>::~CuMatrix(v2);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  _Unwind_Resume(a1);
}

kaldi::nnet1::ScaledDotAttention *kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, const kaldi::nnet1::ScaledDotAttention *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(*(_QWORD *)a2 - 40);
  *((_QWORD *)this + 18) = &off_1EA929530;
  *((_QWORD *)this + 19) = *(_QWORD *)((char *)a2 + v4 + 8);
  *((_WORD *)this + 80) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 24) = &off_1EA929600;
  *(_QWORD *)this = &off_1EA929400;
  *((_QWORD *)this + 1) = &unk_1EA92DFA8;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_BYTE *)this + 48) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 7) = &unk_1EA92DFA8;
  *((_BYTE *)this + 96) = 0;
  LOBYTE(v4) = *((_BYTE *)a2 + 104);
  v5 = *((_DWORD *)a2 + 27);
  *((_OWORD *)this + 7) = 0u;
  v6 = (uint64_t *)((char *)this + 112);
  *((_BYTE *)this + 104) = v4;
  *((_DWORD *)this + 27) = v5;
  *((_OWORD *)this + 8) = 0u;
  v7 = *((_QWORD *)a2 + 14);
  if (v7)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    v9 = *v6;
    *v6 = v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v10 = *((_QWORD *)a2 + 15);
  if (v10)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    v12 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v11;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = *((_QWORD *)a2 + 16);
  if (v13)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    v15 = *((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  v16 = *((_QWORD *)a2 + 17);
  if (v16)
  {
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    v18 = *((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = v17;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  return this;
}

void sub_1DE47D408(_Unwind_Exception *a1)
{
  _QWORD *v1;
  kaldi::nnet1::Component *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = v1[17];
  v1[17] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v1[16];
  v1[16] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = v1[15];
  v1[15] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *v6;
  *v6 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  kaldi::CuMatrix<float>::~CuMatrix(v5);
  kaldi::CuMatrix<float>::~CuMatrix(v4);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::ScaledDotAttention::Copy(kaldi::nnet1::ScaledDotAttention *this, int a2)
{
  kaldi::nnet1::ScaledDotAttention *v4;
  kaldi::nnet1::ScaledDotAttention *v5;
  char *v6;
  char v7;
  int v8;
  _QWORD *result;

  v4 = (kaldi::nnet1::ScaledDotAttention *)operator new();
  v5 = v4;
  if (a2)
  {
    v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 40);
    v7 = *((_BYTE *)this + 104);
    v8 = *((_DWORD *)this + 27);
    *((_QWORD *)v4 + 18) = &off_1EA929530;
    result = (_QWORD *)((char *)v4 + 144);
    *((_QWORD *)v5 + 19) = *((_QWORD *)v6 + 1);
    *((_WORD *)v5 + 80) = 0;
    *((_QWORD *)v5 + 21) = 0;
    *((_QWORD *)v5 + 22) = 0;
    *((_QWORD *)v5 + 23) = 0;
    *((_QWORD *)v5 + 24) = &off_1EA929600;
    *((_OWORD *)v5 + 1) = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    *(_QWORD *)v5 = &off_1EA929400;
    *((_QWORD *)v5 + 1) = &unk_1EA92DFA8;
    *((_BYTE *)v5 + 48) = 0;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_QWORD *)v5 + 7) = &unk_1EA92DFA8;
    *((_BYTE *)v5 + 96) = 0;
    *((_BYTE *)v5 + 104) = v7;
    *((_DWORD *)v5 + 27) = v8;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 8) = 0u;
  }
  else
  {
    kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(v4, this);
    return (_QWORD *)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 40));
  }
  return result;
}

void sub_1DE47D590(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10A1C406D10C96CLL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ScaledDotAttention::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v9;
  const char *v10;
  __n128 v11;
  _BYTE v12[48];

  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 40) + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x30, "in.NumCols() == InputDim()", a5);
  (*(void (**)(void))(*(_QWORD *)a1 + 96))();
  if (*(_QWORD *)(a1 + 136))
  {
    v11 = kaldi::CuMatrix<float>::CuMatrix(v12, a3, 111);
    (*(void (**)(_QWORD, _BYTE *, uint64_t, uint64_t, __n128))(**(_QWORD **)(a1 + 136) + 112))(*(_QWORD *)(a1 + 136), v12, a3, a4, v11);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v12);
  }
  if (*(_BYTE *)(a1 + 104))
    kaldi::CuMatrixBase<float>::AddMat(a3, a2, 111, v9, v10, 1.0, 1.0);
}

void sub_1DE47D68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::ScaledDotAttention::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::ScaledDotAttention::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 128), a2, a3, a4, a5);
}

unsigned int *kaldi::nnet1::ScaledDotAttention::SetKeyValueStates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int *v18;
  uint64_t v19;
  const char *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD v27[34];

  v6 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v6 != *(_DWORD *)(a3 + 20))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "SetKeyValueStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Mismatch in number of key and value pairs in ScaledDotAttention, got ", 69);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" keys and ", 10);
    v22 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, " values");
    goto LABEL_20;
  }
  v9 = *(_QWORD *)(a1 + 120);
  v10 = *(unsigned int *)(a2 + 16);
  if (v9)
  {
    if ((_DWORD)v10 != *(_DWORD *)(v9 + 8))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "SetKeyValueStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 79);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Mismatch of key matrix input in ScaledDotAttention, expected ", 61);
      v23 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)", but got ", 10);
      std::ostream::operator<<();
      goto LABEL_20;
    }
    kaldi::CuMatrix<float>::Resize(a1 + 8, v6, *(unsigned int *)(v9 + 12), 0, 0);
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 120) + 112))(*(_QWORD *)(a1 + 120), a2, a1 + 8, a4);
  }
  else
  {
    if ((_DWORD)v10 != *(_DWORD *)(*(_QWORD *)(a1 + 112) + 12))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "SetKeyValueStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 71);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Mismatch of key matrix input in ScaledDotAttention, expected ", 61);
      v25 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)", but got ", 10);
      std::ostream::operator<<();
      goto LABEL_20;
    }
    kaldi::CuMatrix<float>::Resize(a1 + 8, v6, v10, 0, 0);
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)(a1 + 8), a2, 111, v11, v12);
  }
  v13 = *(_QWORD *)(a1 + 128);
  if (v13)
  {
    if (*(_DWORD *)(a3 + 16) == *(_DWORD *)(v13 + 8))
    {
      kaldi::CuMatrix<float>::Resize(a1 + 56, *(unsigned int *)(a3 + 20), *(unsigned int *)(v13 + 12), 0, 0);
      return (unsigned int *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 128)
                                                                                          + 112))(*(_QWORD *)(a1 + 128), a3, a1 + 56, a4);
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "SetKeyValueStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 98);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Mismatch of value matrix input in ScaledDotAttention, expected ", 63);
    v24 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", but got ", 10);
    std::ostream::operator<<();
LABEL_20:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  v15 = *(_QWORD *)(a1 + 136);
  v16 = *(unsigned int *)(a3 + 16);
  if (v15)
    v17 = *(_DWORD *)(v15 + 8);
  else
    v17 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 40) + 12);
  if ((_DWORD)v16 != v17)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "SetKeyValueStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 90);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Mismatch of value matrix input in ScaledDotAttention, expected ", 63);
    v26 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", but got ", 10);
    std::ostream::operator<<();
    goto LABEL_20;
  }
  v18 = (unsigned int *)(a1 + 56);
  kaldi::CuMatrix<float>::Resize((uint64_t)v18, *(unsigned int *)(a3 + 20), v16, 0, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v18, a3, 111, v19, v20);
}

uint64_t kaldi::nnet1::ScaledDotAttention::ClearKeyValueStates(kaldi::nnet1::ScaledDotAttention *this)
{
  void *v3;
  __int128 v4;
  __int128 v5;
  char v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v9 = 0u;
  v8 = 0u;
  v7 = &unk_1EA92DFA8;
  v10 = 0;
  v5 = 0u;
  v4 = 0u;
  v3 = &unk_1EA92DFA8;
  v6 = 0;
  kaldi::CuMatrix<float>::Swap((uint64_t)this + 8, (uint64_t)&v7);
  kaldi::CuMatrix<float>::Swap((uint64_t)this + 56, (uint64_t)&v3);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v3);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v7);
}

void sub_1DE47DAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ScaledDotAttention::ComputeAttention(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD v10[34];

  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 112) + 12);
  if ((_DWORD)v5 != *(_DWORD *)(a1 + 24))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "ComputeAttention", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 117);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "SetKeyValueStores needs to be called in ScaledDotAttention for attention to work");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v10, *(unsigned int *)(a2 + 20), v5, 0, 0, 0);
  (*(void (**)(_QWORD, uint64_t, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 112) + 112))(*(_QWORD *)(a1 + 112), a2, v10, a4);
  kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(a1, (uint64_t)v10, a1 + 8, a1 + 56, a3, 0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v10);
}

void sub_1DE47DBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  float v15;
  uint64_t v16;
  const char *v17;
  unsigned int v19[12];

  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v19, *(unsigned int *)(a2 + 20), *(unsigned int *)(a3 + 20), 0, 0, 0);
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)v19, a2, CblasNoTrans, a3, (const char *)0x70, 1.0, 0.0);
  v15 = *(float *)(a1 + 108);
  if (v15 != 1.0)
    kaldi::CuMatrixBase<float>::Scale((uint64_t)v19, v15);
  kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow(v19, (uint64_t)v19, v12, v13, v14);
  if (a6)
    kaldi::CuMatrixBase<float>::AddMat(a6, (uint64_t)v19, 111, v16, v17, 1.0, 0.0);
  kaldi::CuMatrixBase<float>::AddMatMat(a5, (uint64_t)v19, CblasNoTrans, a4, (const char *)0x6F, 1.0, 0.0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v19);
}

void sub_1DE47DCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *kaldi::nnet1::ScaledDotAttention::CopyQuantized<kaldi::nnet1::Quantizable8BitComponentItf>(const void **a1)
{
  const void *v2;
  const char *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v2 = (const void *)(*((uint64_t (**)(const void **, uint64_t))*a1 + 11))(a1, 1);
  if (!v2
  {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyQuantized", "../engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.h", (const char *)0x79, "quantized_attention", v3);
  }
  v5 = v4;
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(a1 + 14, &v19);
  v6 = v19;
  v19 = 0;
  v7 = v5[14];
  v5[14] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v19;
    v19 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(a1 + 15, &v19);
  v9 = v19;
  v19 = 0;
  v10 = v5[15];
  v5[15] = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v19;
    v19 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(a1 + 16, &v19);
  v12 = v19;
  v19 = 0;
  v13 = v5[16];
  v5[16] = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = v19;
    v19 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(a1 + 17, &v19);
  v15 = v19;
  v19 = 0;
  v16 = v5[17];
  v5[17] = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v19;
    v19 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  return (char *)v5 + *(_QWORD *)(*v5 - 40);
}

char *kaldi::nnet1::ScaledDotAttention::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>(const void **a1)
{
  const void *v2;
  const char *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v2 = (const void *)(*((uint64_t (**)(const void **, uint64_t))*a1 + 11))(a1, 1);
  if (!v2
  {
    kaldi::KaldiAssertFailure_((kaldi *)"CopyQuantized", "../engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.h", (const char *)0x79, "quantized_attention", v3);
  }
  v5 = v4;
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(a1 + 14, &v19);
  v6 = v19;
  v19 = 0;
  v7 = v5[14];
  v5[14] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v19;
    v19 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(a1 + 15, &v19);
  v9 = v19;
  v19 = 0;
  v10 = v5[15];
  v5[15] = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v19;
    v19 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(a1 + 16, &v19);
  v12 = v19;
  v19 = 0;
  v13 = v5[16];
  v5[16] = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = v19;
    v19 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(a1 + 17, &v19);
  v15 = v19;
  v19 = 0;
  v16 = v5[17];
  v5[17] = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v19;
    v19 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  return (char *)v5 + *(_QWORD *)(*v5 - 40);
}

char *`virtual thunk to'kaldi::nnet1::ScaledDotAttention::CopyQuantized16Bit(kaldi::nnet1::ScaledDotAttention *this)
{
  return kaldi::nnet1::ScaledDotAttention::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>((const void **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)));
}

uint64_t kaldi::nnet1::ScaledDotAttention::Info(kaldi::nnet1::ScaledDotAttention *this)
{
  uint64_t v2;
  const char *v3;
  _QWORD *v4;
  uint64_t v5;
  const char *v6;
  void **v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  void *__p;
  uint64_t v17;
  unsigned __int8 v18;
  _QWORD v19[11];
  char v20;
  uint64_t v21;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  kaldi::WriteToken(v19, 0, (kaldi *)"<AddQuery>", v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" ", 1);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
  if (*((_QWORD *)this + 14))
  {
    kaldi::WriteToken(v19, 0, (kaldi *)"<QueryTransform>", v5, v6);
    (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 14) + 64))(&__p);
    v7 = (v18 & 0x80u) == 0 ? &__p : (void **)__p;
    v8 = (v18 & 0x80u) == 0 ? v18 : v17;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v7, v8);
    if ((char)v18 < 0)
      operator delete(__p);
  }
  if (*((_QWORD *)this + 15))
  {
    kaldi::WriteToken(v19, 0, (kaldi *)"<KeyTransform>", v5, v6);
    (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 15) + 64))(&__p);
    v9 = (v18 & 0x80u) == 0 ? &__p : (void **)__p;
    v10 = (v18 & 0x80u) == 0 ? v18 : v17;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v9, v10);
    if ((char)v18 < 0)
      operator delete(__p);
  }
  if (*((_QWORD *)this + 16))
  {
    kaldi::WriteToken(v19, 0, (kaldi *)"<ValueTransform>", v5, v6);
    (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 16) + 64))(&__p);
    v11 = (v18 & 0x80u) == 0 ? &__p : (void **)__p;
    v12 = (v18 & 0x80u) == 0 ? v18 : v17;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v11, v12);
    if ((char)v18 < 0)
      operator delete(__p);
  }
  if (*((_QWORD *)this + 17))
  {
    kaldi::WriteToken(v19, 0, (kaldi *)"<OutputTransform>", v5, v6);
    (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 17) + 64))(&__p);
    v13 = (v18 & 0x80u) == 0 ? &__p : (void **)__p;
    v14 = (v18 & 0x80u) == 0 ? v18 : v17;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v13, v14);
    if ((char)v18 < 0)
      operator delete(__p);
  }
  std::stringbuf::str();
  v19[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v19[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v20 < 0)
    operator delete((void *)v19[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v21);
}

void sub_1DE47E294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::ScaledDotAttention::Info(kaldi::nnet1::ScaledDotAttention *this)
{
  return kaldi::nnet1::ScaledDotAttention::Info((kaldi::nnet1::ScaledDotAttention *)((char *)this
                                                                                   + *(_QWORD *)(*(_QWORD *)this - 80)));
}

void kaldi::nnet1::ScaledDotAttention::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  __int128 *p_p;
  uint64_t v13;
  BOOL v19;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  __int128 *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  __int128 __p;
  uint64_t v51;
  _QWORD v52[36];

  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v52, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 170, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Reading ScaledDotAttention component", 36);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v52);
  }
  __p = 0uLL;
  v51 = 0;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              if (kaldi::Peek(a2, a3) != 60)
                goto LABEL_107;
              kaldi::ReadToken(a2, a3, (uint64_t)&__p, v8, v9);
              if (SHIBYTE(v51) < 0)
                break;
              p_p = &__p;
              switch(HIBYTE(v51))
              {
                case 7:
                  if ((_DWORD)__p != 1633899324 || *(_DWORD *)((char *)&__p + 3) != 1046834273)
                    goto LABEL_123;
                  goto LABEL_51;
                case 0xA:
                  if ((_QWORD)__p != 0x726575516464413CLL || WORD4(__p) != 15993)
                    goto LABEL_123;
                  goto LABEL_81;
                case 0xC:
                  goto LABEL_102;
                case 0xE:
                  goto LABEL_67;
                case 0x10:
                  if ((_QWORD)__p == 0x725479726575513CLL && *((_QWORD *)&__p + 1) == 0x3E6D726F66736E61)
                    goto LABEL_94;
                  if (HIBYTE(v51) == 14)
                  {
LABEL_67:
                    if ((_QWORD)__p != 0x6E61725479654B3CLL || *(_QWORD *)((char *)&__p + 6) != 0x3E6D726F66736E61)
                      goto LABEL_98;
                    goto LABEL_72;
                  }
                  if (HIBYTE(v51) != 16
                    || ((_QWORD)__p == 0x725465756C61563CLL
                      ? (v22 = *((_QWORD *)&__p + 1) == 0x3E6D726F66736E61)
                      : (v22 = 0),
                        !v22))
                  {
LABEL_98:
                    if (HIBYTE(v51) == 12)
                    {
                      p_p = &__p;
                      goto LABEL_102;
                    }
                    goto LABEL_123;
                  }
                  break;
                case 0x11:
                  if ((_QWORD)__p != 0x5474757074754F3CLL
                    || *((_QWORD *)&__p + 1) != 0x6D726F66736E6172
                    || v51 != 62)
                  {
                    goto LABEL_98;
                  }
                  goto LABEL_90;
                default:
                  goto LABEL_123;
              }
LABEL_63:
              v23 = kaldi::nnet1::Component::Read(a2, a3, a4);
              v24 = *(_QWORD *)(a1 + 128);
              *(_QWORD *)(a1 + 128) = v23;
              if (v24)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
                v23 = *(_QWORD *)(a1 + 128);
              }
              if (!v23)
              {
                kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 192);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"reading value transform failed", 30);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52);
              }
            }
            v13 = *((_QWORD *)&__p + 1);
            if (*((_QWORD *)&__p + 1) != 7)
              break;
            if (*(_DWORD *)__p != 1633899324 || *(_DWORD *)(__p + 3) != 1046834273)
            {
              v13 = *((_QWORD *)&__p + 1);
              goto LABEL_24;
            }
LABEL_51:
            kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 108), v10, v9);
          }
          if (*((_QWORD *)&__p + 1) != 10)
            break;
          if (*(_QWORD *)__p != 0x726575516464413CLL || *(_WORD *)(__p + 8) != 15993)
            break;
LABEL_81:
          kaldi::ReadBasicType<BOOL>(a2, a3, (char *)(a1 + 104), v10, v9);
        }
LABEL_24:
        if (v13 != 16)
          goto LABEL_30;
        if (*(_QWORD *)__p != 0x725479726575513CLL || *(_QWORD *)(__p + 8) != 0x3E6D726F66736E61)
          break;
LABEL_94:
        v33 = kaldi::nnet1::Component::Read(a2, a3, a4);
        v34 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 112) = v33;
        if (v34)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
          v33 = *(_QWORD *)(a1 + 112);
        }
        if (!v33)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 182);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"reading query transform failed", 30);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52);
        }
      }
      v13 = *((_QWORD *)&__p + 1);
LABEL_30:
      if (v13 != 14)
        goto LABEL_36;
      if (*(_QWORD *)__p != 0x6E61725479654B3CLL || *(_QWORD *)(__p + 6) != 0x3E6D726F66736E61)
        break;
LABEL_72:
      v26 = kaldi::nnet1::Component::Read(a2, a3, a4);
      v27 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v26;
      if (v27)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        v26 = *(_QWORD *)(a1 + 120);
      }
      if (!v26)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 187);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"reading key transform failed", 28);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52);
      }
    }
    v13 = *((_QWORD *)&__p + 1);
LABEL_36:
    if (v13 == 16)
    {
      if (*(_QWORD *)__p == 0x725465756C61563CLL && *(_QWORD *)(__p + 8) == 0x3E6D726F66736E61)
        goto LABEL_63;
      v13 = *((_QWORD *)&__p + 1);
    }
    if (v13 != 17)
      goto LABEL_100;
    v19 = *(_QWORD *)__p == 0x5474757074754F3CLL && *(_QWORD *)(__p + 8) == 0x6D726F66736E6172;
    if (!v19 || *(_BYTE *)(__p + 16) != 62)
      break;
LABEL_90:
    v31 = kaldi::nnet1::Component::Read(a2, a3, a4);
    v32 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 136) = v31;
    if (v32)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      v31 = *(_QWORD *)(a1 + 136);
    }
    if (!v31)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 197);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"reading output transform failed", 31);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52);
    }
  }
  v13 = *((_QWORD *)&__p + 1);
LABEL_100:
  if (v13 != 12)
    goto LABEL_123;
  p_p = (__int128 *)__p;
LABEL_102:
  v35 = *(_QWORD *)p_p;
  v36 = *((_DWORD *)p_p + 2);
  if (v35 != 0x6E6F706D6F432F3CLL || v36 != 1047817829)
  {
LABEL_123:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 202);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Unrecognized token ", 19);
    if (v51 >= 0)
      v46 = &__p;
    else
      v46 = (__int128 *)__p;
    if (v51 >= 0)
      v47 = HIBYTE(v51);
    else
      v47 = *((_QWORD *)&__p + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v52);
  }
LABEL_107:
  v38 = *(_QWORD *)(a1 + 112);
  if (!v38)
  {
    v48 = "query_transform_";
    v49 = 206;
    goto LABEL_136;
  }
  v39 = *(_QWORD *)(a1 + 120);
  if (v39 && *(_DWORD *)(v38 + 12) != *(_DWORD *)(v39 + 12))
  {
    v48 = "!key_transform_ || query_transform_->OutputDim() == key_transform_->OutputDim()";
    v49 = 207;
    goto LABEL_136;
  }
  v40 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 40);
  v41 = *(_DWORD *)(v40 + 8);
  if (v41 != *(_DWORD *)(v38 + 8))
  {
    v48 = "InputDim() == query_transform_->InputDim()";
    v49 = 208;
    goto LABEL_136;
  }
  if (*(_BYTE *)(a1 + 104) && v41 != *(_DWORD *)(v40 + 12))
  {
    v48 = "!add_query_ || InputDim() == OutputDim()";
    v49 = 209;
    goto LABEL_136;
  }
  v42 = *(_QWORD *)(a1 + 136);
  if (!v42)
  {
    v44 = *(_QWORD *)(a1 + 128);
    if (!v44 || *(_DWORD *)(v40 + 12) == *(_DWORD *)(v44 + 12))
      goto LABEL_120;
LABEL_135:
    v48 = "!value_transform_ || (!output_transform_ && OutputDim() == value_transform_->OutputDim()) || (output_transform"
          "_ && output_transform_->InputDim() == value_transform_->OutputDim())";
    v49 = 212;
LABEL_136:
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)v49, v48, v9);
  }
  if (*(_DWORD *)(v40 + 12) != *(_DWORD *)(v42 + 12))
  {
    v48 = "!output_transform_ || OutputDim() == output_transform_->OutputDim()";
    v49 = 210;
    goto LABEL_136;
  }
  v43 = *(_QWORD *)(a1 + 128);
  if (v43 && *(_DWORD *)(v42 + 8) != *(_DWORD *)(v43 + 12))
    goto LABEL_135;
LABEL_120:
  if (SHIBYTE(v51) < 0)
    operator delete((void *)__p);
}

void sub_1DE47EA5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::ScaledDotAttention::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::ScaledDotAttention::ReadData((uint64_t)a1 + *(_QWORD *)(*a1 - 176), a2, a3, a4);
}

_QWORD *kaldi::nnet1::ScaledDotAttention::WriteData(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;

  kaldi::WriteToken(a2, a3, (kaldi *)"<AddQuery>", a4, a5);
  kaldi::WriteBasicType<BOOL>(a2, (char)a3, *(unsigned __int8 *)(a1 + 104));
  kaldi::WriteToken(a2, a3, (kaldi *)"<Scale>", v9, v10);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  if (*(_QWORD *)(a1 + 112))
  {
    kaldi::WriteToken(a2, a3, (kaldi *)"<QueryTransform>", v11, v12);
    kaldi::nnet1::Component::Write(*(_QWORD *)(a1 + 112), a2, (uint64_t)a3, a4);
  }
  if (*(_QWORD *)(a1 + 120))
  {
    kaldi::WriteToken(a2, a3, (kaldi *)"<KeyTransform>", v11, v12);
    kaldi::nnet1::Component::Write(*(_QWORD *)(a1 + 120), a2, (uint64_t)a3, a4);
  }
  if (*(_QWORD *)(a1 + 128))
  {
    kaldi::WriteToken(a2, a3, (kaldi *)"<ValueTransform>", v11, v12);
    kaldi::nnet1::Component::Write(*(_QWORD *)(a1 + 128), a2, (uint64_t)a3, a4);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    kaldi::WriteToken(a2, a3, (kaldi *)"<OutputTransform>", v11, v12);
    kaldi::nnet1::Component::Write(*(_QWORD *)(a1 + 136), a2, (uint64_t)a3, a4);
  }
  return kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v11, v12);
}

_QWORD *`virtual thunk to'kaldi::nnet1::ScaledDotAttention::WriteData(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::ScaledDotAttention::WriteData((uint64_t)a1 + *(_QWORD *)(*a1 - 120), a2, a3, a4, a5);
}

kaldi::nnet1::ScaledDotAttention *kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(kaldi::nnet1::ScaledDotAttention *a1, uint64_t *a2, uint64_t a3)
{
  kaldi::nnet1::ScaledDotAttention *result;
  uint64_t v6;

  result = kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(a1, (const kaldi::nnet1::ScaledDotAttention *)(a2 + 1), a3);
  v6 = *a2;
  *(_QWORD *)result = *a2;
  *(_QWORD *)((char *)result + *(_QWORD *)(v6 - 40)) = a2[9];
  *(_QWORD *)((char *)result + *(_QWORD *)(*(_QWORD *)result - 48)) = a2[10];
  *(_QWORD *)((char *)result + *(_QWORD *)(*(_QWORD *)result - 56)) = a2[11];
  *((_DWORD *)result + 36) = *(_DWORD *)(a3 + 144);
  return result;
}

uint64_t kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)a2 - 40);
  *(_QWORD *)(a1 + 152) = off_1EA92D6D8;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + v4 + 8);
  *(_WORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)a1 = off_1EA92BE90;
  *(_QWORD *)(a1 + 200) = off_1EA92C038;
  kaldi::nnet1::ScaledDotAttention::ScaledDotAttention((kaldi::nnet1::ScaledDotAttention *)a1, (const kaldi::nnet1::ScaledDotAttention *)&off_1EA91C078, a2);
  *(_QWORD *)(a1 + 152) = &off_1EA929160;
  *(_QWORD *)a1 = &off_1EA929030;
  *(_QWORD *)(a1 + 200) = &off_1EA929230;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  return a1;
}

void sub_1DE47ECFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  kaldi::nnet1::Component *v2;
  uint64_t v3;

  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MultiHeadAttention::Copy(kaldi::nnet1::MultiHeadAttention *this, int a2)
{
  kaldi::nnet1::MultiHeadAttention *v4;
  kaldi::nnet1::MultiHeadAttention *v5;

  v4 = (kaldi::nnet1::MultiHeadAttention *)operator new();
  v5 = v4;
  if (a2)
    kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(v4, *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40) + 8), *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40) + 12), *((unsigned __int8 *)this + 104), *((float *)this + 27), *((_DWORD *)this + 36));
  else
    kaldi::nnet1::MultiHeadAttention::MultiHeadAttention((uint64_t)v4, (uint64_t)this);
  return (uint64_t)v5 + *(_QWORD *)(*(_QWORD *)v5 - 40);
}

void sub_1DE47EDA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10A1C40ECDADF9FLL);
  _Unwind_Resume(a1);
}

kaldi::nnet1::MultiHeadAttention *kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this, int a2, _BOOL4 a3, int a4, float a5, int a6)
{
  *((_QWORD *)this + 19) = off_1EA92D6D8;
  *((_DWORD *)this + 40) = a2;
  *((_DWORD *)this + 41) = a3;
  *((_WORD *)this + 84) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 22) = 0;
  *(_QWORD *)this = off_1EA92BE90;
  *((_QWORD *)this + 25) = off_1EA92C038;
  kaldi::nnet1::ScaledDotAttention::ScaledDotAttention((uint64_t)this, (uint64_t *)&off_1EA91C078, a2, a3, a5, a4 != 0);
  *((_QWORD *)this + 19) = &off_1EA929160;
  *(_QWORD *)this = &off_1EA929030;
  *((_QWORD *)this + 25) = &off_1EA929230;
  *((_DWORD *)this + 36) = a6;
  return this;
}

void sub_1DE47EE84(_Unwind_Exception *a1)
{
  uint64_t v1;
  kaldi::nnet1::Component *v2;
  uint64_t v3;

  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MultiHeadAttention::ComputeAttention(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v9;
  const char *v10;
  int v11;
  int v12;
  void *v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  _QWORD v26[2];
  int v27;

  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 112) + 12);
  if ((_DWORD)v5 != *(_DWORD *)(a1 + 24))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26, "ComputeAttention", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 261);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, "SetKeyValueStores needs to be called in ScaledDotAttention for attention to work");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26);
  }
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v26, *(unsigned int *)(a2 + 20), v5, 0, 0, 0);
  (*(void (**)(_QWORD, uint64_t, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 112) + 112))(*(_QWORD *)(a1 + 112), a2, v26, a4);
  v9 = *(_DWORD *)(a1 + 144);
  if (v9 >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = *(_DWORD *)(a2 + 16) / v9;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v23, (uint64_t)v26, 0, v27, v10, v12);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v20, a1 + 8, 0, *(_DWORD *)(a1 + 28), v10, v12);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a1 + 56, 0, *(_DWORD *)(a1 + 76), v10, v12);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v14, a3, 0, *(_DWORD *)(a3 + 20), v10, v12);
      kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(a1, (uint64_t)&v23, (uint64_t)&v20, (uint64_t)&v17, (uint64_t)&v14, 0);
      v14 = &unk_1EA926508;
      v15 = 0u;
      v16 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v14);
      v17 = &unk_1EA926508;
      v18 = 0u;
      v19 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v17);
      v20 = &unk_1EA926508;
      v21 = 0u;
      v22 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v20);
      v23 = &unk_1EA926508;
      v24 = 0u;
      v25 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v23);
      ++v11;
      v10 = (const char *)((_DWORD)v10 + v12);
    }
    while (v11 < *(_DWORD *)(a1 + 144));
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v26);
}

void sub_1DE47F0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a32);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MultiHeadAttention::Info(kaldi::nnet1::MultiHeadAttention *this)
{
  uint64_t v2;
  const char *v3;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  void *__p[2];
  unsigned __int8 v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  kaldi::WriteToken(v10, 0, (kaldi *)"<NumberHeads>", v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
  kaldi::nnet1::ScaledDotAttention::Info((uint64_t *)__p, this);
  if ((v9 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v6 = v9;
  else
    v6 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v5, v6);
  if ((char)v9 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v12);
}

void sub_1DE47F2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::MultiHeadAttention::Info(kaldi::nnet1::MultiHeadAttention *this)
{
  return kaldi::nnet1::MultiHeadAttention::Info((kaldi::nnet1::MultiHeadAttention *)((char *)this
                                                                                   + *(_QWORD *)(*(_QWORD *)this - 80)));
}

void kaldi::nnet1::MultiHeadAttention::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const char *v9;
  const char *v10;
  _QWORD v11[35];

  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 288, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Reading MultiHeadAttention component", 36);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11);
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"<NumberHeads>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 144, v8, v9);
  kaldi::nnet1::ScaledDotAttention::ReadData(a1, a2, a3, a4);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 112) + 12) % *(_DWORD *)(a1 + 144))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x126, "int(query_transform_->OutputDim() / number_heads_) * number_heads_ == query_transform_->OutputDim()", v10);
}

void sub_1DE47F3F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::MultiHeadAttention::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::MultiHeadAttention::ReadData((uint64_t)a1 + *(_QWORD *)(*a1 - 176), a2, a3, a4);
}

_QWORD *kaldi::nnet1::MultiHeadAttention::WriteData(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  const char *v9;

  kaldi::WriteToken(a2, a3, (kaldi *)"<NumberHeads>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  return kaldi::nnet1::ScaledDotAttention::WriteData(a1, a2, a3, a4, v9);
}

_QWORD *`virtual thunk to'kaldi::nnet1::MultiHeadAttention::WriteData(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::MultiHeadAttention::WriteData((uint64_t)a1 + *(_QWORD *)(*a1 - 120), a2, a3, a4, a5);
}

kaldi::nnet1::SupervisedMultiHeadAttention *kaldi::nnet1::SupervisedMultiHeadAttention::SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this, const kaldi::nnet1::SupervisedMultiHeadAttention *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)a2 - 40);
  *((_QWORD *)this + 25) = off_1EA92D6D8;
  *((_QWORD *)this + 26) = *(_QWORD *)((char *)a2 + v4 + 8);
  *((_WORD *)this + 108) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 28) = 0;
  *(_QWORD *)this = off_1EA92BE90;
  *((_QWORD *)this + 31) = off_1EA92C038;
  kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(this, (uint64_t *)&off_1EA91C1F0, (uint64_t)a2);
  *((_QWORD *)this + 25) = &off_1EA92C1B8;
  *(_QWORD *)this = &off_1EA92C088;
  *((_QWORD *)this + 31) = &off_1EA92C288;
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 152, (char *)a2 + 152, 111);
  return this;
}

void sub_1DE47F550(_Unwind_Exception *a1)
{
  kaldi::nnet1::ScaledDotAttention *v1;
  kaldi::nnet1::Component *v2;
  uint64_t v3;

  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(v1, (uint64_t *)&off_1EA91C1F8);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SupervisedMultiHeadAttention::Copy(kaldi::nnet1::SupervisedMultiHeadAttention *this, int a2)
{
  kaldi::nnet1::SupervisedMultiHeadAttention *v4;
  kaldi::nnet1::SupervisedMultiHeadAttention *v5;

  v4 = (kaldi::nnet1::SupervisedMultiHeadAttention *)operator new();
  v5 = v4;
  if (a2)
  {
    kaldi::nnet1::SupervisedMultiHeadAttention::SupervisedMultiHeadAttention(v4, *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40) + 8), *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40) + 12), *((unsigned __int8 *)this + 104), *((float *)this + 27), *((_DWORD *)this + 36), *((_DWORD *)this + 37));
    kaldi::CuMatrix<float>::operator=((uint64_t)v5 + 152, (uint64_t)this + 152);
  }
  else
  {
    kaldi::nnet1::SupervisedMultiHeadAttention::SupervisedMultiHeadAttention(v4, this);
  }
  return (uint64_t)v5 + *(_QWORD *)(*(_QWORD *)v5 - 40);
}

void sub_1DE47F620(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10A1C403997DC88);
  _Unwind_Resume(a1);
}

kaldi::nnet1::SupervisedMultiHeadAttention *kaldi::nnet1::SupervisedMultiHeadAttention::SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this, int a2, _BOOL4 a3, int a4, float a5, int a6, int a7)
{
  *((_QWORD *)this + 25) = off_1EA92D6D8;
  *((_DWORD *)this + 52) = a2;
  *((_DWORD *)this + 53) = a3;
  *((_WORD *)this + 108) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 28) = 0;
  *(_QWORD *)this = off_1EA92BE90;
  *((_QWORD *)this + 31) = off_1EA92C038;
  kaldi::nnet1::ScaledDotAttention::ScaledDotAttention((uint64_t)this, (uint64_t *)&off_1EA91C1F8, a2, a3, a5, a4 != 0);
  *((_QWORD *)this + 25) = &off_1EA92C1B8;
  *(_QWORD *)this = &off_1EA92C088;
  *((_QWORD *)this + 31) = &off_1EA92C288;
  *((_DWORD *)this + 36) = a6;
  *((_DWORD *)this + 37) = a7;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_QWORD *)this + 19) = &unk_1EA92DFA8;
  *((_BYTE *)this + 192) = 0;
  return this;
}

void sub_1DE47F724(_Unwind_Exception *a1)
{
  uint64_t v1;
  kaldi::nnet1::Component *v2;
  uint64_t v3;

  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SupervisedMultiHeadAttention::GetAttnProbabilities(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  return (uint64_t)this + 152;
}

uint64_t kaldi::nnet1::SupervisedMultiHeadAttention::ComputeAttention(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v9;
  const char *v10;
  int v11;
  int v12;
  int v13;
  float v14;
  uint64_t v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  _QWORD v29[2];
  unsigned int v30;

  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 112) + 12);
  if ((_DWORD)v5 != *(_DWORD *)(a1 + 24))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29, "ComputeAttention", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 331);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v29, "SetKeyValueStores needs to be called in ScaledDotAttention for attention to work");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v29, *(unsigned int *)(a2 + 20), v5, 0, 0, 0);
  (*(void (**)(_QWORD, uint64_t, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 112) + 112))(*(_QWORD *)(a1 + 112), a2, v29, a4);
  kaldi::CuMatrix<float>::Resize(a1 + 152, v30, *(unsigned int *)(a1 + 28), 0, 0);
  kaldi::CuMatrixBase<float>::SetZero(a1 + 152);
  v16 = a1 + 152;
  v9 = *(_DWORD *)(a1 + 144);
  if (v9 >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = *(_DWORD *)(a2 + 16) / v9;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v26, (uint64_t)v29, 0, v30, v10, v12);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v23, a1 + 8, 0, *(_DWORD *)(a1 + 28), v10, v12);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v20, a1 + 56, 0, *(_DWORD *)(a1 + 76), v10, v12);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a3, 0, *(_DWORD *)(a3 + 20), v10, v12);
      if (v11 >= *(_DWORD *)(a1 + 148))
        kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(a1, (uint64_t)&v26, (uint64_t)&v23, (uint64_t)&v20, (uint64_t)&v17, 0);
      else
        kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(a1, (uint64_t)&v26, (uint64_t)&v23, (uint64_t)&v20, (uint64_t)&v17, v16);
      v17 = &unk_1EA926508;
      v18 = 0u;
      v19 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v17);
      v20 = &unk_1EA926508;
      v21 = 0u;
      v22 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v20);
      v23 = &unk_1EA926508;
      v24 = 0u;
      v25 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v23);
      v26 = &unk_1EA926508;
      v27 = 0u;
      v28 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v26);
      ++v11;
      v10 = (const char *)((_DWORD)v10 + v12);
    }
    while (v11 < *(_DWORD *)(a1 + 144));
  }
  v13 = *(_DWORD *)(a1 + 148);
  if (v13 > 1)
  {
    v14 = 1.0 / (double)v13;
    kaldi::CuMatrixBase<float>::Scale(v16, v14);
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v29);
}

uint64_t kaldi::nnet1::SupervisedMultiHeadAttention::Info(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  uint64_t v2;
  const char *v3;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  void *__p[2];
  unsigned __int8 v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  kaldi::WriteToken(v10, 0, (kaldi *)"<SupervisedHeads>", v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
  kaldi::nnet1::MultiHeadAttention::Info((uint64_t *)__p, this);
  if ((v9 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v6 = v9;
  else
    v6 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v5, v6);
  if ((char)v9 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v12);
}

void sub_1DE47FBD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::Info(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  return kaldi::nnet1::SupervisedMultiHeadAttention::Info((kaldi::nnet1::SupervisedMultiHeadAttention *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 80)));
}

void kaldi::nnet1::SupervisedMultiHeadAttention::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const char *v9;
  const char *v10;
  int v11;
  _QWORD v12[35];

  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 367, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Reading SupervisedMultiHeadAttention component", 46);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"<SupervisedHeads>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 148, v8, v9);
  kaldi::nnet1::MultiHeadAttention::ReadData(a1, a2, a3, a4);
  v11 = *(_DWORD *)(a1 + 148);
  if (v11 < 1)
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x175, "number_supervised_heads_ >= 1", v10);
  if (v11 > *(_DWORD *)(a1 + 144))
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x176, "number_supervised_heads_ <= number_heads_", v10);
}

void sub_1DE47FD34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::SupervisedMultiHeadAttention::ReadData((uint64_t)a1 + *(_QWORD *)(*a1 - 176), a2, a3, a4);
}

_QWORD *kaldi::nnet1::SupervisedMultiHeadAttention::WriteData(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  const char *v9;

  kaldi::WriteToken(a2, a3, (kaldi *)"<SupervisedHeads>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  return kaldi::nnet1::MultiHeadAttention::WriteData(a1, a2, a3, a4, v9);
}

_QWORD *`virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::WriteData(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::SupervisedMultiHeadAttention::WriteData((uint64_t)a1 + *(_QWORD *)(*a1 - 120), a2, a3, a4, a5);
}

kaldi::nnet1::SelfAttention *kaldi::nnet1::SelfAttention::SelfAttention(kaldi::nnet1::SelfAttention *this, const kaldi::nnet1::SelfAttention *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  const char *v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)a2 - 40);
  *((_QWORD *)this + 10) = &off_1EA927838;
  *((_QWORD *)this + 11) = *(_QWORD *)((char *)a2 + v4 + 8);
  *((_WORD *)this + 48) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 16) = &off_1EA927908;
  *((_QWORD *)this + 1) = &off_1EA927720;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = &unk_1EA927930;
  *((_DWORD *)this + 12) = 1;
  *(_QWORD *)this = &off_1EA927668;
  *((_QWORD *)this + 7) = 0;
  v5 = (uint64_t *)((char *)this + 56);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v6 = *((_QWORD *)a2 + 7);
  if (v6)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = *v5;
    *v5 = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  v9 = *((_QWORD *)a2 + 8);
  if (v9)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    v11 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = (char *)*((_QWORD *)a2 + 9);
  if (v12)
  {
    v13 = (void *)(*(uint64_t (**)(char *))(*(_QWORD *)&v12[*(_QWORD *)(*(_QWORD *)v12 - 40)] + 16))(&v12[*(_QWORD *)(*(_QWORD *)v12 - 40)]);
    if (v13)
    v15 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v13;
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      v13 = (void *)*((_QWORD *)this + 9);
    }
    if (!v13)
      kaldi::KaldiAssertFailure_((kaldi *)"SelfAttention", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x191, "attention_", v14);
  }
  return this;
}

void sub_1DE47FF5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  kaldi::nnet1::Component *v2;
  uint64_t v3;
  kaldi::nnet1::HistoricalComponent *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v1 + 72) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 64) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *v5;
  *v5 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent(v4);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SelfAttention::PropagateFnc(uint64_t *a1, int *a2, int *a3, uint64_t a4, const char *a5)
{
  int v5;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  int v25;
  unsigned int i;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  int v36;
  signed int v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  void *v44;
  __int128 v45;
  __int128 v46;
  void *v47;
  __int128 v48;
  __int128 v49;
  void *v50;
  __int128 v51;
  __int128 v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  void *v56;
  __int128 v57;
  __int128 v58;
  _QWORD v59[2];
  unsigned int v60;
  unsigned int v61;
  int v62;
  uint64_t v63;

  v5 = *((_DWORD *)a1 + 12);
  if (a2[5] % v5)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x199, "batch_size % num_utts == 0", a5);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v59, "PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 411, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"Running forward propagation for batch size = ", 45);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", which contains ", 17);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" frames each from ", 18);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v59);
  }
  (*(void (**)(uint64_t *))(*a1 + 160))(a1);
  v13 = a1[7];
  if (v13)
    v14 = (unsigned int *)(v13 + 12);
  else
    v14 = (unsigned int *)((char *)a1 + *(_QWORD *)(*a1 - 40) + 8);
  v15 = *v14;
  v16 = a1[8];
  if (v16)
  {
    v17 = (int *)(v16 + 12);
    v18 = *a1;
  }
  else
  {
    v18 = *a1;
    v17 = (int *)((char *)a1 + *(_QWORD *)(*a1 - 40) + 8);
  }
  v19 = a1[2];
  v36 = *v17;
  v20 = *v17 + v15;
  if (v20 != (*(unsigned int (**)(uint64_t *))(v18 + 88))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x1A4, "history_state_size == HistoryStateSize()", v21);
  v22 = v19 + 48 * (int)a4;
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v59, *((unsigned int *)a1 + 12), ((int)(a2[5] * v20) / v5 + *(_DWORD *)(v22 + 16)), 0, 0, 0);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v56, (uint64_t)v59, 0, v61, 0, *(_DWORD *)(v22 + 16));
  v37 = v20;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v56, v22, 111, v23, v24);
  v56 = &unk_1EA926508;
  v57 = 0u;
  v58 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v56);
  if (v5 >= 1)
  {
    v25 = 0;
    for (i = 0; i != v5; ++i)
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v56, (uint64_t)a2, i, v25 + a2[5], 0, a2[4]);
      if (v5 != 1)
        kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v56, a2[6] * v5);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v53, (uint64_t)a3, i, v25 + a3[5], 0, a3[4]);
      if (v5 != 1)
        kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v53, a3[6] * v5);
      if (v61 <= i)
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v27);
      v47 = &unk_1EA926538;
      *(_QWORD *)&v48 = v59[1] + 4 * (int)(v62 * i);
      *(_QWORD *)&v49 = v63;
      *((_QWORD *)&v48 + 1) = v60;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v50, (uint64_t)&v47, (int)v60 / v37);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v47, (uint64_t)&v50, 0, SHIDWORD(v51), 0, v15);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v44, (uint64_t)&v50, 0, SHIDWORD(v51), (const char *)v15, v36);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v41, (uint64_t)&v47, HIDWORD(v48) - HIDWORD(v57), SHIDWORD(v57), 0, SDWORD2(v48));
      v30 = a1[7];
      if (v30)
        (*(void (**)(uint64_t, void **, void **, uint64_t))(*(_QWORD *)v30 + 112))(v30, &v56, &v41, a4);
      else
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v41, (uint64_t)&v56, 111, v28, v29);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v38, (uint64_t)&v44, HIDWORD(v45) - HIDWORD(v57), SHIDWORD(v57), 0, SDWORD2(v45));
      v33 = a1[8];
      if (v33)
        (*(void (**)(uint64_t, void **, void **, uint64_t))(*(_QWORD *)v33 + 112))(v33, &v56, &v38, a4);
      else
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v38, (uint64_t)&v56, 111, v31, v32);
      (*(void (**)(uint64_t, void **, void **, uint64_t))(*(_QWORD *)a1[9] + 24))(a1[9], &v47, &v44, a4);
      v34 = a1[9] + *(_QWORD *)(*(_QWORD *)a1[9] - 40);
      (*(void (**)(uint64_t, void **, void **, uint64_t))(*(_QWORD *)v34 + 112))(v34, &v56, &v53, a4);
      v38 = &unk_1EA926508;
      v39 = 0u;
      v40 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v38);
      v41 = &unk_1EA926508;
      v42 = 0u;
      v43 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v41);
      v44 = &unk_1EA926508;
      v45 = 0u;
      v46 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v44);
      v47 = &unk_1EA926508;
      v48 = 0u;
      v49 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v47);
      v50 = &unk_1EA926508;
      v51 = 0u;
      v52 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v50);
      v53 = &unk_1EA926508;
      v54 = 0u;
      v55 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v53);
      v56 = &unk_1EA926508;
      v57 = 0u;
      v58 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v56);
      --v25;
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1[9] + 32))(a1[9]);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*a1 + 128))(a1, v59, a4);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v59);
}

void sub_1DE48056C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;

  a48 = &unk_1EA926508;
  *(_OWORD *)(v53 + 8) = 0u;
  *(_OWORD *)(v53 + 24) = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a48);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a53);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::SelfAttention::PropagateFnc(_QWORD *a1, int *a2, int *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::SelfAttention::PropagateFnc((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 128)), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::SelfAttention::Info(kaldi::nnet1::SelfAttention *this)
{
  uint64_t v2;
  const char *v3;
  void **v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  void *__p;
  uint64_t v13;
  unsigned __int8 v14;
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  if (*((_QWORD *)this + 7))
  {
    kaldi::WriteToken(v15, 0, (kaldi *)"<KeyTransform>", v2, v3);
    (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 7) + 64))(&__p);
    v4 = (v14 & 0x80u) == 0 ? &__p : (void **)__p;
    v5 = (v14 & 0x80u) == 0 ? v14 : v13;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v4, v5);
    if ((char)v14 < 0)
      operator delete(__p);
  }
  if (*((_QWORD *)this + 8))
  {
    kaldi::WriteToken(v15, 0, (kaldi *)"<ValueTransform>", v2, v3);
    (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 8) + 64))(&__p);
    v6 = (v14 & 0x80u) == 0 ? &__p : (void **)__p;
    v7 = (v14 & 0x80u) == 0 ? v14 : v13;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v6, v7);
    if ((char)v14 < 0)
      operator delete(__p);
  }
  v8 = (_QWORD *)*((_QWORD *)this + 9);
  if (v8)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)((char *)v8 + *(_QWORD *)(*v8 - 40)) + 64))(&__p);
    v9 = (v14 & 0x80u) == 0 ? &__p : (void **)__p;
    v10 = (v14 & 0x80u) == 0 ? v14 : v13;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v9, v10);
    if ((char)v14 < 0)
      operator delete(__p);
  }
  std::stringbuf::str();
  v15[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v17);
}

void sub_1DE4808E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::SelfAttention::Info(kaldi::nnet1::SelfAttention *this)
{
  return kaldi::nnet1::SelfAttention::Info((kaldi::nnet1::SelfAttention *)((char *)this
                                                                         + *(_QWORD *)(*(_QWORD *)this - 80)));
}

uint64_t kaldi::nnet1::SelfAttention::CopyQuantized8Bit(const void **this)
{
  uint64_t v2;
  void (**v3)(kaldi::nnet1::SelfAttention *__hidden);
  char *v4;
  const void *v5;
  const char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;

  v2 = operator new();
  *(_QWORD *)(v2 + 88) = *(const void **)((char *)this + *((_QWORD *)*this - 5) + 8);
  *(_WORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = &unk_1EA927930;
  *(_DWORD *)(v2 + 48) = 1;
  v3 = &off_1EA927668;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = &off_1EA927908;
  *(_QWORD *)v2 = &off_1EA927668;
  *(_QWORD *)(v2 + 8) = &off_1EA927720;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = &off_1EA927838;
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(this + 7, &v10);
  *(_QWORD *)(v2 + 56) = v10;
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(this + 8, &v10);
  *(_QWORD *)(v2 + 64) = v10;
  v4 = (char *)this[9];
  if (v4)
  {
    v5 = (const void *)(*(uint64_t (**)(char *))(*(_QWORD *)&v4[*(_QWORD *)(*(_QWORD *)v4 - 48)] + 16))(&v4[*(_QWORD *)(*(_QWORD *)v4 - 48)]);
    if (v5)
    else
      v7 = 0;
    v8 = *(_QWORD *)(v2 + 72);
    *(_QWORD *)(v2 + 72) = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (!v7)
      kaldi::KaldiAssertFailure_((kaldi *)"CopyQuantized8Bit", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x1E9, "quantized_attention->attention_", v6);
    v3 = *(void (***)(kaldi::nnet1::SelfAttention *__hidden))v2;
  }
  return (uint64_t)*(v3 - 5) + v2;
}

uint64_t kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>@<X0>(const void **a1@<X0>, uint64_t *a2@<X8>)
{
  const void *v3;
  kaldi::nnet1::Quantizable8BitComponentItf *v4;
  uint64_t result;

  v3 = *a1;
  if (*a1)
  {
    if (v4)
      result = kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(v4);
    else
      result = (*(uint64_t (**)(const void *))(*(_QWORD *)v3 + 16))(v3);
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

uint64_t kaldi::nnet1::SelfAttention::CopyQuantized16Bit(const void **this)
{
  uint64_t v2;
  void (**v3)(kaldi::nnet1::SelfAttention *__hidden);
  char *v4;
  const void *v5;
  const char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;

  v2 = operator new();
  *(_QWORD *)(v2 + 88) = *(const void **)((char *)this + *((_QWORD *)*this - 5) + 8);
  *(_WORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = &unk_1EA927930;
  *(_DWORD *)(v2 + 48) = 1;
  v3 = &off_1EA927668;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = &off_1EA927908;
  *(_QWORD *)v2 = &off_1EA927668;
  *(_QWORD *)(v2 + 8) = &off_1EA927720;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = &off_1EA927838;
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(this + 7, &v10);
  *(_QWORD *)(v2 + 56) = v10;
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(this + 8, &v10);
  *(_QWORD *)(v2 + 64) = v10;
  v4 = (char *)this[9];
  if (v4)
  {
    v5 = (const void *)(*(uint64_t (**)(char *))(*(_QWORD *)&v4[*(_QWORD *)(*(_QWORD *)v4 - 56)] + 16))(&v4[*(_QWORD *)(*(_QWORD *)v4 - 56)]);
    if (v5)
    else
      v7 = 0;
    v8 = *(_QWORD *)(v2 + 72);
    *(_QWORD *)(v2 + 72) = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (!v7)
      kaldi::KaldiAssertFailure_((kaldi *)"CopyQuantized16Bit", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x1F7, "quantized_attention->attention_", v6);
    v3 = *(void (***)(kaldi::nnet1::SelfAttention *__hidden))v2;
  }
  return (uint64_t)*(v3 - 5) + v2;
}

uint64_t kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>@<X0>(const void **a1@<X0>, uint64_t *a2@<X8>)
{
  const void *v3;
  kaldi::nnet1::Quantizable8BitComponentItf *v4;
  uint64_t result;

  v3 = *a1;
  if (*a1)
  {
    if (v4)
      result = kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(v4);
    else
      result = (*(uint64_t (**)(const void *))(*(_QWORD *)v3 + 16))(v3);
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

uint64_t `virtual thunk to'kaldi::nnet1::SelfAttention::CopyQuantized16Bit(kaldi::nnet1::SelfAttention *this)
{
  return kaldi::nnet1::SelfAttention::CopyQuantized16Bit((const void **)((char *)this
                                                                       + *(_QWORD *)(*(_QWORD *)this - 32)));
}

void kaldi::nnet1::SelfAttention::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const char *v9;
  __int128 *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v27;
  __int128 *p_p;
  uint64_t v29;
  __int128 __p;
  uint64_t v31;
  _QWORD v32[36];

  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v32, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 509, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Reading SelfAttention component", 31);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v32);
  }
  __p = 0uLL;
  v31 = 0;
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60)
      goto LABEL_60;
    kaldi::ReadToken(a2, a3, (uint64_t)&__p, v8, v9);
    if ((SHIBYTE(v31) & 0x80000000) == 0)
      break;
    v14 = *((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1) == 14
      && (*(_QWORD *)__p == 0x6E61725479654B3CLL ? (v15 = *(_QWORD *)(__p + 6) == 0x3E6D726F66736E61) : (v15 = 0), v15))
    {
LABEL_12:
      v12 = kaldi::nnet1::Component::Read(a2, a3, a4);
      v13 = a1[7];
      a1[7] = v12;
      if (v13)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        v12 = a1[7];
      }
      if (!v12)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 517);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"reading key transform failed", 28);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
      }
    }
    else
    {
      if (*((_QWORD *)&__p + 1) != 16)
        goto LABEL_27;
      if (*(_QWORD *)__p == 0x725465756C61563CLL && *(_QWORD *)(__p + 8) == 0x3E6D726F66736E61)
      {
LABEL_49:
        v22 = kaldi::nnet1::Component::Read(a2, a3, a4);
        v23 = a1[8];
        a1[8] = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v22 = a1[8];
        }
        if (!v22)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 522);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"reading value transform failed", 30);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
        }
      }
      else
      {
        v14 = *((_QWORD *)&__p + 1);
LABEL_27:
        if (v14 != 11)
          goto LABEL_53;
        if (*(_QWORD *)__p != 0x69746E657474413CLL || *(_QWORD *)(__p + 3) != 0x3E6E6F69746E6574)
        {
          v14 = *((_QWORD *)&__p + 1);
LABEL_53:
          if (v14 == 12)
          {
            v10 = (__int128 *)__p;
            goto LABEL_55;
          }
LABEL_66:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 533);
          v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Unrecognized token ", 19);
          if (v31 >= 0)
            p_p = &__p;
          else
            p_p = (__int128 *)__p;
          if (v31 >= 0)
            v29 = HIBYTE(v31);
          else
            v29 = *((_QWORD *)&__p + 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)p_p, v29);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
        }
LABEL_43:
        v20 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
        if (v20)
        v21 = a1[9];
        a1[9] = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = (const void *)a1[9];
        }
        if (!v20)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 528);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"failed to read attention component in SelfAttention", 51);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
        }
      }
    }
  }
  v10 = &__p;
  switch(HIBYTE(v31))
  {
    case 0xB:
      goto LABEL_38;
    case 0xC:
      goto LABEL_55;
    case 0xE:
      if ((_QWORD)__p != 0x6E61725479654B3CLL || *(_QWORD *)((char *)&__p + 6) != 0x3E6D726F66736E61)
        goto LABEL_66;
      goto LABEL_12;
    case 0x10:
      if ((_QWORD)__p == 0x725465756C61563CLL && *((_QWORD *)&__p + 1) == 0x3E6D726F66736E61)
        goto LABEL_49;
      if (HIBYTE(v31) == 11)
      {
LABEL_38:
        if ((_QWORD)__p != 0x69746E657474413CLL || *(_QWORD *)((char *)&__p + 3) != 0x3E6E6F69746E6574)
          goto LABEL_66;
        goto LABEL_43;
      }
      if (HIBYTE(v31) != 12)
        goto LABEL_66;
      v10 = &__p;
LABEL_55:
      v24 = *(_QWORD *)v10;
      v25 = *((_DWORD *)v10 + 2);
      if (v24 != 0x6E6F706D6F432F3CLL || v25 != 1047817829)
        goto LABEL_66;
LABEL_60:
      if (!a1[9])
        kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x219, "attention_", v9);
      if (SHIBYTE(v31) < 0)
        operator delete((void *)__p);
      return;
    default:
      goto LABEL_66;
  }
}

void sub_1DE481188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::SelfAttention::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::SelfAttention::ReadData((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 176)), a2, a3, a4);
}

_QWORD *kaldi::nnet1::SelfAttention::WriteData(uint64_t *a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v9;
  const char *v10;

  if (!a1[9])
    kaldi::KaldiAssertFailure_((kaldi *)"WriteData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x21D, "attention_", a5);
  if (a1[7])
  {
    kaldi::WriteToken(a2, a3, (kaldi *)"<KeyTransform>", a4, a5);
    kaldi::nnet1::Component::Write(a1[7], a2, (uint64_t)a3, a4);
  }
  if (a1[8])
  {
    kaldi::WriteToken(a2, a3, (kaldi *)"<ValueTransform>", a4, a5);
    kaldi::nnet1::Component::Write(a1[8], a2, (uint64_t)a3, a4);
  }
  kaldi::WriteToken(a2, a3, (kaldi *)"<Attention>", a4, a5);
  kaldi::nnet1::Component::Write(a1[9] + *(_QWORD *)(*(_QWORD *)a1[9] - 40), a2, (uint64_t)a3, a4);
  return kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v9, v10);
}

_QWORD *`virtual thunk to'kaldi::nnet1::SelfAttention::WriteData(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::SelfAttention::WriteData((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 120)), a2, a3, a4, a5);
}

uint64_t *kaldi::nnet1::SelfAttention::EnsureBuffers(kaldi::nnet1::SelfAttention *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 2, 1uLL);
}

uint64_t *`non-virtual thunk to'kaldi::nnet1::SelfAttention::EnsureBuffers(kaldi::nnet1::SelfAttention *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 1, 1uLL);
}

uint64_t kaldi::nnet1::SelfAttention::HistoryStateSize(kaldi::nnet1::SelfAttention *this)
{
  uint64_t v1;
  int *v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;

  v1 = *((_QWORD *)this + 7);
  if (v1)
    v2 = (int *)(v1 + 12);
  else
    v2 = (int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40) + 8);
  v3 = *v2;
  v4 = *((_QWORD *)this + 8);
  if (v4)
    v5 = (_DWORD *)(v4 + 12);
  else
    v5 = (_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40) + 8);
  return (*v5 + v3);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::SelfAttention::HistoryStateSize(kaldi::nnet1::SelfAttention *this)
{
  uint64_t v1;
  int *v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;

  v1 = *((_QWORD *)this + 6);
  if (v1)
    v2 = (int *)(v1 + 12);
  else
    v2 = (int *)((char *)this + *(_QWORD *)(*((_QWORD *)this - 1) - 40));
  v3 = *v2;
  v4 = *((_QWORD *)this + 7);
  if (v4)
    v5 = (_DWORD *)(v4 + 12);
  else
    v5 = (_DWORD *)((char *)this + *(_QWORD *)(*((_QWORD *)this - 1) - 40));
  return (*v5 + v3);
}

uint64_t kaldi::nnet1::SelfAttention::ResetHistoryState(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  void *v13;
  __int128 v14;
  __int128 v15;
  char v16;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  if (a4)
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x237, "batch_idx == 0", v8);
  v9 = a2[1];
  if (v9 != *(_DWORD *)(a1 + 48))
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x238, "sequence_idx.size() == hopts_.num_sequences", v8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v10 + 32) = a3;
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      if (((*(_QWORD *)(*a2 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v13, "ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 573);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v13, "ResetHistoryState for SelfAttention makes only sense if all utterances get reset at the same time");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v13);
      }
    }
  }
  v15 = 0u;
  v14 = 0u;
  v13 = &unk_1EA92DFA8;
  v16 = 0;
  kaldi::CuMatrix<float>::operator=(v10, (uint64_t)&v13);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v13);
}

void sub_1DE4814B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1DE4814C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::SelfAttention::ResetHistoryState(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  return kaldi::nnet1::SelfAttention::ResetHistoryState(a1 - 8, a2, a3, a4);
}

uint64_t kaldi::nnet1::SelfAttention::ResetHistoryState(kaldi::nnet1::SelfAttention *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;

  v3 = (_QWORD *)*((_QWORD *)this + 2);
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 != v3)
  {
    v4 = v2 - 6;
    v5 = v2 - 6;
    do
    {
      v6 = *v5;
      v5 -= 6;
      (*(void (**)(_QWORD *))(v6 + 16))(v4);
      v7 = v4 == v3;
      v4 = v5;
    }
    while (!v7);
  }
  *((_QWORD *)this + 3) = v3;
  return (*(uint64_t (**)(kaldi::nnet1::SelfAttention *))(*(_QWORD *)this + 160))(this);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::SelfAttention::ResetHistoryState(kaldi::nnet1::SelfAttention *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  char *v8;
  uint64_t v9;

  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2 != v3)
  {
    v4 = v2 - 6;
    v5 = v2 - 6;
    do
    {
      v6 = *v5;
      v5 -= 6;
      (*(void (**)(_QWORD *))(v6 + 16))(v4);
      v7 = v4 == v3;
      v4 = v5;
    }
    while (!v7);
  }
  v9 = *((_QWORD *)this - 1);
  v8 = (char *)this - 8;
  *((_QWORD *)v8 + 3) = v3;
  return (*(uint64_t (**)(char *))(v9 + 160))(v8);
}

unsigned int *kaldi::nnet1::SelfAttention::GetHistoryState(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  const char *v8;

  if (a3)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x249, "batch_idx == 0", a5);
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(*(_QWORD *)(a1 + 16) + 20), *(unsigned int *)(*(_QWORD *)(a1 + 16) + 16), 1u, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, *(_QWORD *)(a1 + 16), 111, v7, v8);
}

unsigned int *`non-virtual thunk to'kaldi::nnet1::SelfAttention::GetHistoryState(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::SelfAttention::GetHistoryState(a1 - 8, a2, a3, a4, a5);
}

void kaldi::nnet1::SelfAttention::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD v16[4];

  if ((_DWORD)a4)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x24F, "batch_idx == 0", a5);
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 48) <= (signed int)a3)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x250, "sequence_idx >= 0 && sequence_idx < hopts_.num_sequences", a5);
  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(*(_QWORD *)(a1 + 16) + 16), 1u, a4, a5);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_DWORD *)(v11 + 20);
  if (v12 >= 1)
  {
    if (v12 <= a3)
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v10);
    v13 = *(_QWORD *)(v11 + 8) + 4 * (int)(*(_DWORD *)(v11 + 24) * a3);
    v14 = *(_DWORD *)(v11 + 16);
    v15 = *(_QWORD *)(v11 + 32);
    v16[0] = &unk_1EA926538;
    v16[1] = v13;
    v16[3] = v15;
    v16[2] = v14;
    kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v16, v8, v9, v10);
  }
}

void `non-virtual thunk to'kaldi::nnet1::SelfAttention::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::SelfAttention::GetHistoryState(a1 - 8, a2, a3, a4, a5);
}

unsigned int *kaldi::nnet1::SelfAttention::SetHistoryState(uint64_t *a1, uint64_t a2, int a3)
{
  const char *v6;
  uint64_t v7;
  const char *v8;

  (*(void (**)(uint64_t *))(*a1 + 160))(a1);
  if (a3)
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x259, "batch_idx == 0", v6);
  kaldi::CuMatrix<float>::Resize(a1[2], *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a1[2], a2, 111, v7, v8);
}

unsigned int *`non-virtual thunk to'kaldi::nnet1::SelfAttention::SetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
  return kaldi::nnet1::SelfAttention::SetHistoryState((uint64_t *)(a1 - 8), a2, a3);
}

void kaldi::nnet1::SelfAttention::SetHistoryState(uint64_t *a1, uint64_t a2, unsigned int a3, int a4)
{
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD v20[4];

  (*(void (**)(uint64_t *))(*a1 + 160))(a1);
  if (a4)
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x260, "batch_idx == 0", v8);
  if ((a3 & 0x80000000) != 0 || *((_DWORD *)a1 + 12) <= (signed int)a3)
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x261, "sequence_idx >= 0 && sequence_idx < hopts_.num_sequences", v8);
  v9 = *(_DWORD *)(a2 + 16);
  if (v9 % (*(int (**)(uint64_t *))(*a1 + 88))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x262, "history.Dim() % HistoryStateSize() == 0", v10);
  v11 = *(unsigned int *)(a2 + 16);
  v12 = a1[2];
  if ((int)v11 < 1)
  {
    kaldi::CuMatrix<float>::Resize(v12, 0, 0, 0, 0);
  }
  else
  {
    kaldi::CuMatrix<float>::Resize(v12, *((unsigned int *)a1 + 12), v11, 2u, 0);
    v16 = a1[2];
    if (*(_DWORD *)(v16 + 20) <= a3)
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v15);
    v17 = *(_QWORD *)(v16 + 8) + 4 * (int)(*(_DWORD *)(v16 + 24) * a3);
    v18 = *(_DWORD *)(v16 + 16);
    v19 = *(_QWORD *)(v16 + 32);
    v20[0] = &unk_1EA926538;
    v20[1] = v17;
    v20[3] = v19;
    v20[2] = v18;
    kaldi::CuVectorBase<float>::CopyFromVec(v20, a2, v13, v14, v15);
  }
}

void `non-virtual thunk to'kaldi::nnet1::SelfAttention::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  kaldi::nnet1::SelfAttention::SetHistoryState((uint64_t *)(a1 - 8), a2, a3, a4);
}

kaldi::nnet1::AverageAttention *kaldi::nnet1::AverageAttention::AverageAttention(kaldi::nnet1::AverageAttention *this, const kaldi::nnet1::Nnet **a2)
{
  uint64_t v4;
  kaldi::nnet1::Nnet **v5;
  kaldi::nnet1::Nnet **v6;
  kaldi::nnet1::Nnet *v7;
  kaldi::nnet1::Nnet *v8;

  v4 = *((_QWORD *)*a2 - 5);
  *((_QWORD *)this + 9) = &off_1EA9283D8;
  *((_QWORD *)this + 10) = *(const kaldi::nnet1::Nnet **)((char *)a2 + v4 + 8);
  *((_WORD *)this + 44) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 15) = &off_1EA9284A8;
  *((_QWORD *)this + 1) = &off_1EA9282C0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = &unk_1EA927930;
  *((_DWORD *)this + 12) = 1;
  *(_QWORD *)this = &off_1EA928208;
  *((_QWORD *)this + 7) = 0;
  v5 = (kaldi::nnet1::Nnet **)((char *)this + 56);
  *((_QWORD *)this + 8) = 0;
  v6 = (kaldi::nnet1::Nnet **)((char *)this + 64);
  v7 = (kaldi::nnet1::Nnet *)operator new();
  kaldi::nnet1::Nnet::Nnet(v7, a2[7]);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](v5, v7);
  if (a2[8])
  {
    v8 = (kaldi::nnet1::Nnet *)operator new();
    kaldi::nnet1::Nnet::Nnet(v8, a2[8]);
    std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](v6, v8);
  }
  return this;
}

void sub_1DE481A64(_Unwind_Exception *a1)
{
  uint64_t v1;
  kaldi::nnet1::Component *v2;
  uint64_t v3;
  kaldi::nnet1::HistoricalComponent *v4;
  kaldi::nnet1::Nnet **v5;
  kaldi::nnet1::Nnet **v6;
  uint64_t v7;

  MEMORY[0x1DF0ED014](v7, 0x10B0C4082B712C9);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](v6, 0);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](v5, 0);
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent(v4);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AverageAttention::PropagateFnc(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  float v20;
  int v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  void *v43;
  __int128 v44;
  __int128 v45;
  void *v46;
  __int128 v47;
  __int128 v48;
  char v49;
  _BYTE v50[20];
  int v51;
  void *v52;
  __int128 v53;
  __int128 v54;
  char v55;
  void *v56;
  __int128 v57;
  __int128 v58;
  void *v59;
  __int128 v60;
  __int128 v61;
  _QWORD v62[2];
  int v63;

  v5 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v5 != *(_DWORD *)(a1 + 48))
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x27E, "batch_size == num_utts", a5);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v62, "PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 640, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"Running forward propagation for batch size = ", 45);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", which contains ", 17);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" frames each from ", 18);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v62);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  v13 = *(_QWORD *)(a1 + 16) + 48 * (int)a4;
  v14 = *(_DWORD *)(v13 + 20);
  if (!v14)
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    kaldi::CuMatrix<float>::Resize(v13, v5, v15, 0, 0);
    v14 = *(_DWORD *)(v13 + 20);
  }
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v59, v13, 0, v14, 0, 1);
  kaldi::CuMatrixBase<float>::Add((uint64_t)&v59, 1.0);
  if (!HIDWORD(v60) || !DWORD2(v60))
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v19);
  v20 = *(float *)v60;
  v21 = kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(a1 + 56), v16, v17, v18, v19);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v56, v13, 0, *(_DWORD *)(v13 + 20), (const char *)1, v21);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v56, a2, 111, v22, v23, 1.0, 1.0);
  kaldi::CuMatrix<float>::CuMatrix(v62, &v56, 111);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v62, 1.0 / v20);
  v54 = 0u;
  v53 = 0u;
  v52 = &unk_1EA92DFA8;
  v55 = 0;
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(*(uint64_t **)(a1 + 56), (uint64_t)v62, (uint64_t)&v52, a4, v24);
  if (*(_QWORD *)(a1 + 64))
  {
    kaldi::CuMatrix<float>::CuMatrix((uint64_t)v50, *(unsigned int *)(a2 + 20), (v63 + *(_DWORD *)(a2 + 16)), 0, 0, 0);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)v50, 0, v51, 0, *(_DWORD *)(a2 + 16));
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v46, a2, 111, v27, v28);
    v46 = &unk_1EA926508;
    v47 = 0u;
    v48 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, (uint64_t)v50, 0, v51, (const char *)*(unsigned int *)(a2 + 16), v63);
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v46, (uint64_t)&v52, 111, v29, v30);
    v46 = &unk_1EA926508;
    v47 = 0u;
    v48 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
    v47 = 0u;
    v48 = 0u;
    v46 = &unk_1EA92DFA8;
    v49 = 0;
    kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(*(uint64_t **)(a1 + 64), (uint64_t)v50, (uint64_t)&v46, 0, v31);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, (uint64_t)&v46, 0, SHIDWORD(v47), 0, *(_DWORD *)(a2 + 16));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v43, a2, v32, v33, v34);
    v43 = &unk_1EA926508;
    v44 = 0u;
    v45 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, (uint64_t)&v46, 0, SHIDWORD(v47), (const char *)*(unsigned int *)(a2 + 16), v63);
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v43, (uint64_t)&v52, v35, v36, v37);
    v43 = &unk_1EA926508;
    v44 = 0u;
    v45 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, (uint64_t)&v46, 0, SHIDWORD(v47), 0, *(_DWORD *)(a2 + 16));
    kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, (uint64_t)&v43, 111, v38, v39);
    v43 = &unk_1EA926508;
    v44 = 0u;
    v45 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, (uint64_t)&v46, 0, SHIDWORD(v47), (const char *)*(unsigned int *)(a2 + 16), v63);
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)a3, (uint64_t)&v43, 111, v40, v41, 1.0, 1.0);
    v43 = &unk_1EA926508;
    v44 = 0u;
    v45 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v46);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v50);
  }
  else
  {
    kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, (uint64_t)&v52, 111, v25, v26);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v52);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v62);
  v56 = &unk_1EA926508;
  v57 = 0u;
  v58 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v56);
  v59 = &unk_1EA926508;
  v60 = 0u;
  v61 = 0u;
  return kaldi::CuMatrixBase<float>::~CuMatrixBase(&v59);
}

void sub_1DE481FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  uint64_t v40;
  _OWORD *v41;

  a9 = v40 + 16;
  a10 = 0u;
  a11 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a12);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a18);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a24);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a40);
  a30 = &unk_1EA926508;
  *(_OWORD *)((char *)v41 + 56) = 0u;
  *(_OWORD *)((char *)v41 + 72) = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a30);
  a35 = &unk_1EA926508;
  v41[6] = 0u;
  v41[7] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a35);
  _Unwind_Resume(a1);
}

void sub_1DE4820D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a42);
  JUMPOUT(0x1DE4820C8);
}

uint64_t `virtual thunk to'kaldi::nnet1::AverageAttention::PropagateFnc(_QWORD *a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::AverageAttention::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 128), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::AverageAttention::Info(kaldi::nnet1::Nnet **this)
{
  uint64_t v2;
  const char *v3;
  void *p_p;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  void **v8;
  uint64_t v9;
  void *__p;
  uint64_t v12;
  unsigned __int8 v13;
  _QWORD v14[11];
  char v15;
  uint64_t v16;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  kaldi::WriteToken(v14, 0, (kaldi *)"<AverageFfn>", v2, v3);
  kaldi::nnet1::Nnet::Info((uint64_t *)&__p, this[7]);
  if ((v13 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v13 & 0x80u) == 0)
    v5 = v13;
  else
    v5 = v12;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)p_p, v5);
  if ((char)v13 < 0)
    operator delete(__p);
  if (this[8])
  {
    kaldi::WriteToken(v14, 0, (kaldi *)"<Gate>", v6, v7);
    kaldi::nnet1::Nnet::Info((uint64_t *)&__p, this[8]);
    v8 = (v13 & 0x80u) == 0 ? &__p : (void **)__p;
    v9 = (v13 & 0x80u) == 0 ? v13 : v12;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v8, v9);
    if ((char)v13 < 0)
      operator delete(__p);
  }
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v14[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v15 < 0)
    operator delete((void *)v14[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v16);
}

void sub_1DE482248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::AverageAttention::Info(kaldi::nnet1::AverageAttention *this)
{
  return kaldi::nnet1::AverageAttention::Info((kaldi::nnet1::Nnet **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 80)));
}

uint64_t kaldi::nnet1::AverageAttention::CopyQuantized8Bit(const kaldi::nnet1::Nnet **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const void ***v11;

  v2 = operator new();
  kaldi::nnet1::AverageAttention::AverageAttention((kaldi::nnet1::AverageAttention *)v2, this);
  kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable8BitComponentItf>(*(const void ****)(v2 + 56), v3, v4, v5, v6);
  v11 = *(const void ****)(v2 + 64);
  if (v11)
    kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable8BitComponentItf>(v11, v7, v8, v9, v10);
  return v2 + *(_QWORD *)(*(_QWORD *)v2 - 40);
}

void sub_1DE4822F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10A1C40C7858128);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AverageAttention::CopyQuantized16Bit(const kaldi::nnet1::Nnet **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const void ***v11;

  v2 = operator new();
  kaldi::nnet1::AverageAttention::AverageAttention((kaldi::nnet1::AverageAttention *)v2, this);
  kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable16BitComponentItf>(*(const void ****)(v2 + 56), v3, v4, v5, v6);
  v11 = *(const void ****)(v2 + 64);
  if (v11)
    kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable16BitComponentItf>(v11, v7, v8, v9, v10);
  return v2 + *(_QWORD *)(*(_QWORD *)v2 - 40);
}

void sub_1DE482374(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10A1C40C7858128);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::AverageAttention::CopyQuantized16Bit(kaldi::nnet1::AverageAttention *this)
{
  return kaldi::nnet1::AverageAttention::CopyQuantized16Bit((const kaldi::nnet1::Nnet **)((char *)this
                                                                                        + *(_QWORD *)(*(_QWORD *)this - 32)));
}

void kaldi::nnet1::AverageAttention::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t ***v8;
  uint64_t ***v9;
  uint64_t v10;
  const char *v11;
  kaldi::nnet1::Nnet *v13;
  uint64_t v14;
  kaldi::nnet1::Nnet *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  void *v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *__p;
  void *v61;

  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 714, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading AverageAttention component", 34);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  v8 = (uint64_t ***)(a1 + 64);
  v57 = 0;
  v58 = 0;
  v9 = (uint64_t ***)(a1 + 56);
  v59 = 0;
  while (1)
  {
    while (1)
    {
      if (kaldi::Peek(a2, a3) != 60)
        goto LABEL_49;
      kaldi::ReadToken(a2, a3, (uint64_t)&v57, v10, v11);
      if (SHIBYTE(v59) < 0)
        break;
      if (HIBYTE(v59) != 6)
      {
        if (HIBYTE(v59) != 12)
        {
          if (HIBYTE(v59) == 19)
          {
            v19 = (uint64_t *)&v57;
            goto LABEL_41;
          }
          goto LABEL_70;
        }
        if (v57 != (void *)0x656761726576413CLL || v58 != 1047422534)
          goto LABEL_70;
        goto LABEL_13;
      }
      if ((_DWORD)v57 != 1952532284 || WORD2(v57) != 15973)
        goto LABEL_70;
LABEL_33:
      v18 = (kaldi::nnet1::Nnet *)operator new();
      kaldi::nnet1::Nnet::Nnet(v18);
      std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)(a1 + 64), v18);
      kaldi::nnet1::Nnet::Read(*v8, a2, a3, a4);
      if (!*v8)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 730);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"reading input gate network failed", 33);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      if (kaldi::g_kaldi_verbose_level >= 2)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 732, 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"done", 4);
LABEL_36:
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
      }
    }
    v14 = v58;
    if (v58 == 6)
      break;
    if (v58 != 12)
      goto LABEL_39;
    if (*(_QWORD *)v57 != 0x656761726576413CLL || *((_DWORD *)v57 + 2) != 1047422534)
      goto LABEL_39;
LABEL_13:
    v13 = (kaldi::nnet1::Nnet *)operator new();
    kaldi::nnet1::Nnet::Nnet(v13);
    std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)(a1 + 56), v13);
    kaldi::nnet1::Nnet::Read(*v9, a2, a3, a4);
    if (!*v9)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 723);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"reading average feed-forward network failed", 43);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 725, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"done", 4);
      goto LABEL_36;
    }
  }
  if (*(_DWORD *)v57 == 1952532284 && *((_WORD *)v57 + 2) == 15973)
    goto LABEL_33;
  v14 = v58;
LABEL_39:
  if (v14 != 19)
    goto LABEL_70;
  v19 = (uint64_t *)v57;
LABEL_41:
  v20 = *v19;
  v21 = v19[1];
  v22 = *(uint64_t *)((char *)v19 + 11);
  v23 = v20 == 0x6761726576412F3CLL && v21 == 0x69746E6574744165;
  if (!v23 || v22 != 0x3E6E6F69746E6574)
  {
LABEL_70:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 736);
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unrecognized token ", 19);
    if (v59 >= 0)
      v51 = &v57;
    else
      v51 = v57;
    if (v59 >= 0)
      v52 = HIBYTE(v59);
    else
      v52 = v58;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
LABEL_49:
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 739, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"done", 4);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  if (!*v9)
  {
    v53 = "average_ffn_";
    v54 = 741;
    goto LABEL_83;
  }
  kaldi::nnet1::Nnet::GetHistoricalComponents((kaldi::nnet1::Nnet *)*v9, &__p);
  v29 = __p;
  if (__p != v61)
  {
    v30 = 1;
    if (!__p)
      goto LABEL_60;
LABEL_59:
    v61 = v29;
    operator delete(v29);
    goto LABEL_60;
  }
  if (*v8)
  {
    kaldi::nnet1::Nnet::GetHistoricalComponents((kaldi::nnet1::Nnet *)*v8, &v55);
    v30 = v55 != v56;
    if (v55)
    {
      v56 = v55;
      operator delete(v55);
    }
    v29 = __p;
    if (__p)
      goto LABEL_59;
  }
  else
  {
    v30 = 0;
    if (__p)
      goto LABEL_59;
  }
LABEL_60:
  if (v30)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 743);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Recurrent neural networks are not supported inside the average attention component.", 83);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  v31 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 40) + 12);
  if (v31 != kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 56), v25, v26, v27, v28))
  {
    v53 = "OutputDim() == average_ffn_->OutputDim()";
    v54 = 746;
LABEL_83:
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)v54, v53, v11);
  }
  if (*v8)
  {
    v35 = kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)*v8, v32, v33, v34, v11);
    v36 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 40) + 8);
    if (v35 != kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(a1 + 56), v37, v38, v39, v40) + v36
      || (v44 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)*v8, v41, v42, v43, v11),
          v45 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 40) + 12),
          v44 != kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 56), v46, v47, v48, v49)
               + v45))
    {
      v53 = "!gate_ || (gate_->InputDim() == InputDim() + average_ffn_->InputDim() && gate_->OutputDim() == OutputDim() +"
            " average_ffn_->OutputDim())";
      v54 = 748;
      goto LABEL_83;
    }
  }
  if (SHIBYTE(v59) < 0)
    operator delete(v57);
}

void sub_1DE4829E8()
{
  uint64_t v0;

  MEMORY[0x1DF0ED014](v0, 0x10B0C4082B712C9);
  JUMPOUT(0x1DE482A28);
}

void sub_1DE482A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::AverageAttention::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::AverageAttention::ReadData((uint64_t)a1 + *(_QWORD *)(*a1 - 176), a2, a3, a4);
}

_QWORD *kaldi::nnet1::AverageAttention::WriteData(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  const char *v9;
  uint64_t v10;
  const char *v11;
  const char *v12;

  if (!*(_QWORD *)(a1 + 56))
    kaldi::KaldiAssertFailure_((kaldi *)"WriteData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x2F0, "average_ffn_", a5);
  kaldi::WriteToken(a2, a3, (kaldi *)"<AverageFfn>", a4, a5);
  kaldi::nnet1::Nnet::Write(*(uint64_t **)(a1 + 56), a2, (uint64_t)a3, a4, v9);
  if (*(_QWORD *)(a1 + 64))
  {
    kaldi::WriteToken(a2, a3, (kaldi *)"<Gate>", v10, v11);
    kaldi::nnet1::Nnet::Write(*(uint64_t **)(a1 + 64), a2, (uint64_t)a3, a4, v12);
  }
  return kaldi::WriteToken(a2, a3, (kaldi *)"</AverageAttention>", v10, v11);
}

_QWORD *`virtual thunk to'kaldi::nnet1::AverageAttention::WriteData(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::AverageAttention::WriteData((uint64_t)a1 + *(_QWORD *)(*a1 - 120), a2, a3, a4, a5);
}

uint64_t *kaldi::nnet1::AverageAttention::EnsureBuffers(kaldi::nnet1::AverageAttention *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 2, 1uLL);
}

uint64_t *`non-virtual thunk to'kaldi::nnet1::AverageAttention::EnsureBuffers(kaldi::nnet1::AverageAttention *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 1, 1uLL);
}

uint64_t kaldi::nnet1::AverageAttention::HistoryStateSize(kaldi::nnet1::Nnet **this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::Nnet::InputDim(this[7], a2, a3, a4, a5) + 1;
}

uint64_t `non-virtual thunk to'kaldi::nnet1::AverageAttention::HistoryStateSize(kaldi::nnet1::Nnet **this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::Nnet::InputDim(this[6], a2, a3, a4, a5) + 1;
}

uint64_t kaldi::nnet1::AverageAttention::ResetHistoryState(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  void *v13;
  __int128 v14;
  __int128 v15;
  char v16;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  if (a4)
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x300, "batch_idx == 0", v8);
  v9 = a2[1];
  if (v9 != *(_DWORD *)(a1 + 48))
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x301, "sequence_idx.size() == hopts_.num_sequences", v8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v10 + 32) = a3;
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      if (((*(_QWORD *)(*a2 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v13, "ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", 774);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v13, "ResetHistoryState for AverageAttention makes only sense if all utterances get reset at the same time");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v13);
      }
    }
  }
  v15 = 0u;
  v14 = 0u;
  v13 = &unk_1EA92DFA8;
  v16 = 0;
  kaldi::CuMatrix<float>::operator=(v10, (uint64_t)&v13);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v13);
}

void sub_1DE482CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1DE482CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::AverageAttention::ResetHistoryState(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  return kaldi::nnet1::AverageAttention::ResetHistoryState(a1 - 8, a2, a3, a4);
}

uint64_t kaldi::nnet1::AverageAttention::ResetHistoryState(kaldi::nnet1::AverageAttention *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;

  v3 = (_QWORD *)*((_QWORD *)this + 2);
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 != v3)
  {
    v4 = v2 - 6;
    v5 = v2 - 6;
    do
    {
      v6 = *v5;
      v5 -= 6;
      (*(void (**)(_QWORD *))(v6 + 16))(v4);
      v7 = v4 == v3;
      v4 = v5;
    }
    while (!v7);
  }
  *((_QWORD *)this + 3) = v3;
  return (*(uint64_t (**)(kaldi::nnet1::AverageAttention *))(*(_QWORD *)this + 160))(this);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::AverageAttention::ResetHistoryState(kaldi::nnet1::AverageAttention *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  char *v8;
  uint64_t v9;

  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2 != v3)
  {
    v4 = v2 - 6;
    v5 = v2 - 6;
    do
    {
      v6 = *v5;
      v5 -= 6;
      (*(void (**)(_QWORD *))(v6 + 16))(v4);
      v7 = v4 == v3;
      v4 = v5;
    }
    while (!v7);
  }
  v9 = *((_QWORD *)this - 1);
  v8 = (char *)this - 8;
  *((_QWORD *)v8 + 3) = v3;
  return (*(uint64_t (**)(char *))(v9 + 160))(v8);
}

unsigned int *kaldi::nnet1::AverageAttention::GetHistoryState(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  const char *v8;

  if (a3)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x313, "batch_idx == 0", a5);
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(*(_QWORD *)(a1 + 16) + 20), *(unsigned int *)(*(_QWORD *)(a1 + 16) + 16), 0, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, *(_QWORD *)(a1 + 16), 111, v7, v8);
}

unsigned int *`non-virtual thunk to'kaldi::nnet1::AverageAttention::GetHistoryState(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::AverageAttention::GetHistoryState(a1 - 8, a2, a3, a4, a5);
}

void kaldi::nnet1::AverageAttention::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, int a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD v19[4];

  if (a4)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x319, "batch_idx == 0", a5);
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 48) <= (signed int)a3)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x31A, "sequence_idx >= 0 && sequence_idx < hopts_.num_sequences", a5);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  kaldi::CuVector<float>::Resize((uint64_t)a2, v8, 0, v9, v10);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_DWORD *)(v14 + 20);
  if (v15 >= 1)
  {
    if (v15 <= a3)
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v13);
    v16 = *(_QWORD *)(v14 + 8) + 4 * (int)(*(_DWORD *)(v14 + 24) * a3);
    v17 = *(_DWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v14 + 32);
    v19[0] = &unk_1EA926538;
    v19[1] = v16;
    v19[3] = v18;
    v19[2] = v17;
    kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v19, v11, v12, v13);
  }
}

void `non-virtual thunk to'kaldi::nnet1::AverageAttention::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, int a4, const char *a5)
{
  kaldi::nnet1::AverageAttention::GetHistoryState(a1 - 8, a2, a3, a4, a5);
}

unsigned int *kaldi::nnet1::AverageAttention::SetHistoryState(uint64_t *a1, uint64_t a2, int a3)
{
  const char *v6;
  uint64_t v7;
  const char *v8;

  (*(void (**)(uint64_t *))(*a1 + 160))(a1);
  if (a3)
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x323, "batch_idx == 0", v6);
  kaldi::CuMatrix<float>::Resize(a1[2], *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a1[2], a2, 111, v7, v8);
}

unsigned int *`non-virtual thunk to'kaldi::nnet1::AverageAttention::SetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
  return kaldi::nnet1::AverageAttention::SetHistoryState((uint64_t *)(a1 - 8), a2, a3);
}

void kaldi::nnet1::AverageAttention::SetHistoryState(uint64_t *a1, uint64_t a2, unsigned int a3, int a4)
{
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD v20[4];

  (*(void (**)(uint64_t *))(*a1 + 160))(a1);
  if (a4)
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x32A, "batch_idx == 0", v8);
  if ((a3 & 0x80000000) != 0 || *((_DWORD *)a1 + 12) <= (signed int)a3)
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x32B, "sequence_idx >= 0 && sequence_idx < hopts_.num_sequences", v8);
  v9 = *(_DWORD *)(a2 + 16);
  if (v9 != (*(unsigned int (**)(uint64_t *))(*a1 + 88))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-attention-component.cc", (const char *)0x32C, "history.Dim() == HistoryStateSize()", v10);
  v11 = *(unsigned int *)(a2 + 16);
  v12 = a1[2];
  if ((int)v11 < 1)
  {
    kaldi::CuMatrix<float>::Resize(v12, 0, 0, 0, 0);
  }
  else
  {
    kaldi::CuMatrix<float>::Resize(v12, *((unsigned int *)a1 + 12), v11, 2u, 0);
    v16 = a1[2];
    if (*(_DWORD *)(v16 + 20) <= a3)
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v15);
    v17 = *(_QWORD *)(v16 + 8) + 4 * (int)(*(_DWORD *)(v16 + 24) * a3);
    v18 = *(_DWORD *)(v16 + 16);
    v19 = *(_QWORD *)(v16 + 32);
    v20[0] = &unk_1EA926538;
    v20[1] = v17;
    v20[3] = v19;
    v20[2] = v18;
    kaldi::CuVectorBase<float>::CopyFromVec(v20, a2, v13, v14, v15);
  }
}

void `non-virtual thunk to'kaldi::nnet1::AverageAttention::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  kaldi::nnet1::AverageAttention::SetHistoryState((uint64_t *)(a1 - 8), a2, a3, a4);
}

void kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this)
{
  uint64_t v2;

  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2 + 192);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::ScaledDotAttention *)((char *)this + 144));
}

{
  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::nnet1::ScaledDotAttention::Copy(kaldi::nnet1::ScaledDotAttention *this)
{
  return (*(uint64_t (**)(kaldi::nnet1::ScaledDotAttention *, _QWORD))(*(_QWORD *)this + 88))(this, 0);
}

uint64_t kaldi::nnet1::ScaledDotAttention::GetType(kaldi::nnet1::ScaledDotAttention *this)
{
  return 285;
}

void `virtual thunk to'kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this)
{
  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention((kaldi::nnet1::ScaledDotAttention *)((char *)this
                                                                                           + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention((kaldi::nnet1::ScaledDotAttention *)((char *)this
                                                                                           + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1DF0ED014);
}

uint64_t `virtual thunk to'kaldi::nnet1::ScaledDotAttention::Copy(kaldi::nnet1::ScaledDotAttention *this)
{
  return (*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32))
                                                   + 88))((char *)this + *(_QWORD *)(*(_QWORD *)this - 32), 0);
}

void kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this)
{
  uint64_t v2;

  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(this, (uint64_t *)&off_1EA91C078);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2 + 200);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::MultiHeadAttention *)((char *)this + 152));
}

{
  kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::nnet1::MultiHeadAttention::GetType(kaldi::nnet1::MultiHeadAttention *this)
{
  return 286;
}

void `virtual thunk to'kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this)
{
  kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention((kaldi::nnet1::MultiHeadAttention *)((char *)this
                                                                                           + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention((kaldi::nnet1::MultiHeadAttention *)((char *)this
                                                                                           + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  uint64_t v2;

  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2 + 248);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::SupervisedMultiHeadAttention *)((char *)this + 200));
}

{
  kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::nnet1::SupervisedMultiHeadAttention::GetType(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  return 287;
}

void `virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention((kaldi::nnet1::SupervisedMultiHeadAttention *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention((kaldi::nnet1::SupervisedMultiHeadAttention *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::SelfAttention::~SelfAttention(kaldi::nnet1::SelfAttention *this)
{
  uint64_t v2;

  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2 + 128);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::SelfAttention *)((char *)this + 80));
}

{
  kaldi::nnet1::SelfAttention::~SelfAttention(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::nnet1::SelfAttention::Copy(kaldi::nnet1::SelfAttention *this)
{
  kaldi::nnet1::SelfAttention *v2;

  v2 = (kaldi::nnet1::SelfAttention *)operator new();
  kaldi::nnet1::SelfAttention::SelfAttention(v2, this);
  return (uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 40);
}

void sub_1DE483430(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10A1C40975FDFB3);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SelfAttention::GetType(kaldi::nnet1::SelfAttention *this)
{
  return 288;
}

void `non-virtual thunk to'kaldi::nnet1::SelfAttention::~SelfAttention(kaldi::nnet1::SelfAttention *this)
{
  kaldi::nnet1::SelfAttention::~SelfAttention((kaldi::nnet1::SelfAttention *)((char *)this - 8));
}

{
  kaldi::nnet1::SelfAttention::~SelfAttention((kaldi::nnet1::SelfAttention *)((char *)this - 8));
  JUMPOUT(0x1DF0ED014);
}

void `virtual thunk to'kaldi::nnet1::SelfAttention::~SelfAttention(kaldi::nnet1::SelfAttention *this)
{
  kaldi::nnet1::SelfAttention::~SelfAttention((kaldi::nnet1::SelfAttention *)((char *)this
                                                                            + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  kaldi::nnet1::SelfAttention::~SelfAttention((kaldi::nnet1::SelfAttention *)((char *)this
                                                                            + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1DF0ED014);
}

uint64_t `virtual thunk to'kaldi::nnet1::SelfAttention::Copy(kaldi::nnet1::SelfAttention *this)
{
  return kaldi::nnet1::SelfAttention::Copy((kaldi::nnet1::SelfAttention *)((char *)this
                                                                         + *(_QWORD *)(*(_QWORD *)this - 32)));
}

void kaldi::nnet1::AverageAttention::~AverageAttention(kaldi::nnet1::AverageAttention *this)
{
  uint64_t v2;

  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2 + 120);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::AverageAttention *)((char *)this + 72));
}

{
  kaldi::nnet1::AverageAttention::~AverageAttention(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::nnet1::AverageAttention::Copy(const kaldi::nnet1::Nnet **this)
{
  kaldi::nnet1::AverageAttention *v2;

  v2 = (kaldi::nnet1::AverageAttention *)operator new();
  kaldi::nnet1::AverageAttention::AverageAttention(v2, this);
  return (uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 40);
}

void sub_1DE483590(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10A1C40C7858128);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AverageAttention::GetType(kaldi::nnet1::AverageAttention *this)
{
  return 289;
}

void `non-virtual thunk to'kaldi::nnet1::AverageAttention::~AverageAttention(kaldi::nnet1::AverageAttention *this)
{
  kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8));
}

{
  kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8));
  JUMPOUT(0x1DF0ED014);
}

void `virtual thunk to'kaldi::nnet1::AverageAttention::~AverageAttention(kaldi::nnet1::AverageAttention *this)
{
  kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this
                                                                                     + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this
                                                                                     + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1DF0ED014);
}

uint64_t `virtual thunk to'kaldi::nnet1::AverageAttention::Copy(kaldi::nnet1::AverageAttention *this)
{
  return kaldi::nnet1::AverageAttention::Copy((const kaldi::nnet1::Nnet **)((char *)this
                                                                          + *(_QWORD *)(*(_QWORD *)this - 32)));
}

uint64_t kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(uint64_t this, uint64_t *a2, int a3, BOOL a4, float a5, char a6)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a2[1];
  *(_QWORD *)this = v6;
  *(_QWORD *)(this + *(_QWORD *)(v6 - 40)) = a2[2];
  *(_QWORD *)(this + *(_QWORD *)(*(_QWORD *)this - 48)) = a2[3];
  *(_QWORD *)(this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[4];
  v7 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)(this + *(_QWORD *)(v7 - 40)) = a2[5];
  *(_QWORD *)(this + *(_QWORD *)(*(_QWORD *)this - 48)) = a2[6];
  *(_QWORD *)(this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[7];
  *(_OWORD *)(this + 16) = 0u;
  *(_OWORD *)(this + 32) = 0u;
  *(_QWORD *)(this + 8) = &unk_1EA92DFA8;
  *(_BYTE *)(this + 48) = 0;
  *(_OWORD *)(this + 64) = 0u;
  *(_OWORD *)(this + 80) = 0u;
  *(_QWORD *)(this + 56) = &unk_1EA92DFA8;
  *(_BYTE *)(this + 96) = 0;
  *(_BYTE *)(this + 104) = a6;
  *(float *)(this + 108) = a5;
  *(_OWORD *)(this + 112) = 0u;
  *(_OWORD *)(this + 128) = 0u;
  return this;
}

void kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 40)) = a2[5];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)) = a2[6];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[7];
  v4 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 56);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 8);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
}

void kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 40)) = a2[13];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)) = a2[14];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[15];
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 152);
  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(this, a2 + 2);
}

void kaldi::nnet1::SelfAttention::~SelfAttention(kaldi::nnet1::SelfAttention *this, uint64_t *a2)
{
  uint64_t v3;
  kaldi::nnet1::HistoricalComponent *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 40)) = a2[5];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)) = a2[6];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[7];
  *((_QWORD *)this + 1) = &off_1EA927720;
  v4 = (kaldi::nnet1::SelfAttention *)((char *)this + 8);
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)v4 + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent(v4);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
}

void kaldi::nnet1::AverageAttention::~AverageAttention(kaldi::nnet1::AverageAttention *this, uint64_t *a2)
{
  uint64_t v3;
  kaldi::nnet1::HistoricalComponent *v4;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 40)) = a2[5];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)) = a2[6];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[7];
  *((_QWORD *)this + 1) = &off_1EA9282C0;
  v4 = (kaldi::nnet1::AverageAttention *)((char *)this + 8);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 8, 0);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 7, 0);
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent(v4);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
}

kaldi::nnet1::Nnet *std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](kaldi::nnet1::Nnet **a1, kaldi::nnet1::Nnet *a2)
{
  kaldi::nnet1::Nnet *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::nnet1::Nnet::~Nnet(result);
    JUMPOUT(0x1DF0ED014);
  }
  return result;
}

double kaldi::nnet1::RecurrentAttentionBaseComponent::RecurrentAttentionBaseComponent(kaldi::nnet1::RecurrentAttentionBaseComponent *this, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  uint64_t v5;

  v2 = a2[1];
  *(_QWORD *)this = v2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v2 - 24)) = a2[2];
  *((_QWORD *)this + 2) = off_1EA929878;
  *((_QWORD *)this + 1) = -1;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = &unk_1EA927930;
  *((_DWORD *)this + 14) = 1;
  v3 = a2[3];
  *((_QWORD *)this + 2) = v3;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 16) = a2[4];
  *(_OWORD *)((char *)this + 72) = xmmword_1DEC3D450;
  *((_DWORD *)this + 22) = -1082130432;
  *(_QWORD *)((char *)this + 92) = 0x100000003;
  *((_WORD *)this + 50) = 0;
  *((_BYTE *)this + 102) = 0;
  *((_QWORD *)this + 8) = &off_1EA92B868;
  *((_QWORD *)this + 13) = &unk_1EA92B888;
  *((_QWORD *)this + 14) = 0x100000001;
  result = 0.0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 21) = 0;
  v5 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 24)) = a2[5];
  *((_QWORD *)this + 2) = a2[6];
  return result;
}

kaldi::nnet1::GlobalRecurrentAttention *kaldi::nnet1::GlobalRecurrentAttention::GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this, int a2, int a3)
{
  kaldi::nnet1::Nnet *v4;

  *((_DWORD *)this + 170) = a2;
  *((_DWORD *)this + 171) = a3;
  *((_WORD *)this + 344) = 0;
  *((_QWORD *)this + 87) = 0;
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 88) = 0;
  *((_QWORD *)this + 84) = off_1EA929750;
  *((_QWORD *)this + 90) = &off_1EA9284D0;
  *(_OWORD *)((char *)this + 728) = xmmword_1DEC3D450;
  *((_QWORD *)this + 93) = 0x3BF800000;
  *((_DWORD *)this + 188) = 1;
  *((_WORD *)this + 378) = 0;
  *((_BYTE *)this + 758) = 0;
  kaldi::nnet1::RecurrentAttentionBaseComponent::RecurrentAttentionBaseComponent(this, (uint64_t *)&off_1EA91C158);
  *(_QWORD *)this = &off_1EA92AE18;
  *((_QWORD *)this + 84) = &off_1EA92B108;
  *((_QWORD *)this + 2) = &off_1EA92AF60;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  v4 = (kaldi::nnet1::Nnet *)operator new();
  kaldi::nnet1::Nnet::Nnet(v4);
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_QWORD *)this + 24) = v4;
  *((_QWORD *)this + 25) = &unk_1EA92DFA8;
  *((_BYTE *)this + 240) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_QWORD *)this + 31) = &unk_1EA92DFA8;
  *((_BYTE *)this + 288) = 0;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_QWORD *)this + 37) = &unk_1EA92DFA8;
  *((_BYTE *)this + 336) = 0;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_QWORD *)this + 43) = &unk_1EA92DFA8;
  *((_BYTE *)this + 384) = 0;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_QWORD *)this + 49) = &unk_1EA92DFA8;
  *((_BYTE *)this + 432) = 0;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_QWORD *)this + 55) = &unk_1EA92DFA8;
  *((_BYTE *)this + 480) = 0;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_QWORD *)this + 61) = &unk_1EA92DFA8;
  *((_BYTE *)this + 528) = 0;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_QWORD *)this + 67) = &unk_1EA92DFA8;
  *((_BYTE *)this + 576) = 0;
  *((_QWORD *)this + 76) = 0;
  *((_QWORD *)this + 74) = 0;
  *((_QWORD *)this + 75) = 0;
  *((_QWORD *)this + 73) = &unk_1EA92DFD8;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((_DWORD *)this + 166) = -1;
  *((_BYTE *)this + 668) = 0;
  return this;
}

void sub_1DE483BF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x1DF0ED014](v3, 0x10B0C4082B712C9);
  kaldi::nnet1::RecurrentAttentionBaseComponent::~RecurrentAttentionBaseComponent((kaldi::nnet1::RecurrentAttentionBaseComponent *)v1, (uint64_t)&off_1EA91C158);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 672));
  _Unwind_Resume(a1);
}

kaldi::nnet1::GlobalRecurrentAttention *kaldi::nnet1::GlobalRecurrentAttention::GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this, const kaldi::nnet1::GlobalRecurrentAttention *a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v10;
  uint64_t v11;
  _QWORD v12[35];

  *((_QWORD *)this + 85) = *(_QWORD *)((char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24) + 8);
  *((_WORD *)this + 344) = 0;
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 88) = 0;
  *((_QWORD *)this + 87) = 0;
  *((_QWORD *)this + 84) = off_1EA929750;
  *((_QWORD *)this + 90) = &off_1EA9284D0;
  *(_OWORD *)((char *)this + 728) = xmmword_1DEC3D450;
  *((_DWORD *)this + 186) = -1082130432;
  *(_QWORD *)((char *)this + 748) = 0x100000003;
  *((_WORD *)this + 378) = 0;
  *((_BYTE *)this + 758) = 0;
  kaldi::nnet1::RecurrentAttentionBaseComponent::RecurrentAttentionBaseComponent(this, (uint64_t *)&off_1EA91C158);
  *(_QWORD *)this = &off_1EA92AE18;
  *((_QWORD *)this + 84) = &off_1EA92B108;
  *((_QWORD *)this + 2) = &off_1EA92AF60;
  *((_QWORD *)this + 25) = &unk_1EA92DFA8;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_QWORD *)this + 31) = &unk_1EA92DFA8;
  *((_BYTE *)this + 240) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_BYTE *)this + 288) = 0;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_QWORD *)this + 37) = &unk_1EA92DFA8;
  *((_BYTE *)this + 336) = 0;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_QWORD *)this + 43) = &unk_1EA92DFA8;
  *((_BYTE *)this + 384) = 0;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_QWORD *)this + 49) = &unk_1EA92DFA8;
  *((_BYTE *)this + 432) = 0;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_QWORD *)this + 55) = &unk_1EA92DFA8;
  *((_BYTE *)this + 480) = 0;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_QWORD *)this + 61) = &unk_1EA92DFA8;
  *((_BYTE *)this + 528) = 0;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_QWORD *)this + 67) = &unk_1EA92DFA8;
  *((_BYTE *)this + 576) = 0;
  *((_QWORD *)this + 75) = 0;
  *((_QWORD *)this + 74) = 0;
  *((_QWORD *)this + 76) = 0;
  *((_QWORD *)this + 73) = &unk_1EA92DFD8;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  v5 = *((_QWORD *)a2 + 22);
  if (!v5)
  {
    v10 = "src.src_dot_trans_";
    v11 = 52;
    goto LABEL_11;
  }
  if (!*((_QWORD *)a2 + 23))
  {
    v10 = "src.tgt_dot_trans_";
    v11 = 53;
    goto LABEL_11;
  }
  if (!*((_QWORD *)a2 + 24))
  {
    v10 = "src.recurrent_net_";
    v11 = 54;
LABEL_11:
    kaldi::KaldiAssertFailure_((kaldi *)"GlobalRecurrentAttention", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)v11, v10, v4);
  }
  *((_QWORD *)this + 22) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  *((_QWORD *)this + 23) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 23) + 16))(*((_QWORD *)a2 + 23));
  kaldi::CuMatrix<float>::operator=((uint64_t)this + 200, (uint64_t)a2 + 200);
  kaldi::CuMatrix<float>::operator=((uint64_t)this + 248, (uint64_t)a2 + 248);
  kaldi::CuMatrix<float>::operator=((uint64_t)this + 296, (uint64_t)a2 + 296);
  kaldi::CuMatrix<float>::operator=((uint64_t)this + 440, (uint64_t)a2 + 440);
  kaldi::CuMatrix<float>::operator=((uint64_t)this + 488, (uint64_t)a2 + 488);
  kaldi::CuMatrix<float>::operator=((uint64_t)this + 536, (uint64_t)a2 + 536);
  kaldi::CuVector<float>::operator=((uint64_t)this + 584, (uint64_t)a2 + 584, v6, v7, v8);
  if (this != a2)
  {
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)this + 616, *((_QWORD *)a2 + 77), *((_QWORD *)a2 + 78), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 78) - *((_QWORD *)a2 + 77)) >> 3));
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 640, *((char **)a2 + 80), *((_QWORD *)a2 + 81), (uint64_t)(*((_QWORD *)a2 + 81) - *((_QWORD *)a2 + 80)) >> 2);
  }
  *((_DWORD *)this + 166) = *((_DWORD *)a2 + 166);
  *((_BYTE *)this + 668) = 0;
  if ((kaldi::nnet1::Nnet::IsRnn(*((kaldi::nnet1::Nnet **)this + 24)) & 1) == 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12, "GlobalRecurrentAttention", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 69);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"it doesn't make sense to use a non-reccurent network here", 57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v12);
  }
  (*(void (**)(kaldi::nnet1::GlobalRecurrentAttention *))(*(_QWORD *)this + 296))(this);
  return this;
}

void sub_1DE483F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void **v19;
  void *v20;

  v20 = *v19;
  if (*v19)
  {
    v12[81] = v20;
    operator delete(v20);
  }
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  kaldi::CuVector<float>::~CuVector(v18);
  kaldi::CuMatrix<float>::~CuMatrix(v17);
  kaldi::CuMatrix<float>::~CuMatrix(v16);
  kaldi::CuMatrix<float>::~CuMatrix(v15);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)(v12 + 49));
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)(v12 + 43));
  kaldi::CuMatrix<float>::~CuMatrix(a11);
  kaldi::CuMatrix<float>::~CuMatrix(v14);
  kaldi::CuMatrix<float>::~CuMatrix(v13);
  kaldi::nnet1::RecurrentAttentionBaseComponent::~RecurrentAttentionBaseComponent((kaldi::nnet1::RecurrentAttentionBaseComponent *)v12, (uint64_t)&off_1EA91C158);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v12 + 84));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  kaldi::nnet1::Nnet *v7;
  void *v8;
  void **v9;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[8];
  *((_QWORD *)this + 2) = a2[9];
  v5 = *((_QWORD *)this + 22);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 23);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (kaldi::nnet1::Nnet *)*((_QWORD *)this + 24);
  if (v7)
  {
    kaldi::nnet1::Nnet::~Nnet(v7);
    MEMORY[0x1DF0ED014]();
  }
  v8 = (void *)*((_QWORD *)this + 80);
  if (v8)
  {
    *((_QWORD *)this + 81) = v8;
    operator delete(v8);
  }
  v9 = (void **)((char *)this + 616);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  *((_QWORD *)this + 73) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 584);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 536);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 488);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 440);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 392);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 344);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 296);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 248);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 200);
  kaldi::nnet1::RecurrentAttentionBaseComponent::~RecurrentAttentionBaseComponent(this, (uint64_t)(a2 + 1));
}

void kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 672));
}

{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 672));
  JUMPOUT(0x1DF0ED014);
}

void `non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this + 656));
}

{
  kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this - 16));
}

void `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 672));
}

{
  kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::Copy(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  kaldi::nnet1::GlobalRecurrentAttention *v2;

  v2 = (kaldi::nnet1::GlobalRecurrentAttention *)operator new();
  kaldi::nnet1::GlobalRecurrentAttention::GlobalRecurrentAttention(v2, this);
  return (uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_1DE484278(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40F96FF2AFLL);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::Copy(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return kaldi::nnet1::GlobalRecurrentAttention::Copy((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this
                                                                                               + *(_QWORD *)(*(_QWORD *)this - 32)));
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetType(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return 283;
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetType(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return 283;
}

void kaldi::nnet1::GlobalRecurrentAttention::InitData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  BOOL v12;
  uint64_t v13;
  void *v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  void **v19;
  void *v20;
  int v21;
  uint64_t v23;
  const char *v24;
  kaldi::nnet1::Component *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  const void *v30;
  void *v31;
  uint64_t v32;
  const char *v33;
  kaldi::nnet1::Component *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  const void *v39;
  void *v40;
  const std::locale::facet *v41;
  unsigned __int8 v42;
  size_t v43;
  char v44;
  size_t v45;
  char *v46;
  char *v47;
  int v48;
  size_t v49;
  std::string *v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  _QWORD *v56;
  void **v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  _QWORD *v64;
  void *v65;
  uint64_t v66;
  std::string __p[11];
  void *v70;
  size_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  std::locale v77;
  uint64_t v78;
  void *v79;
  char v80;
  uint64_t v81;
  void *v82[3];

  memset(v82, 0, sizeof(v82));
  v6 = a2 + 4;
  v7 = a1 + 12;
  v8 = a1 + 8;
  while (1)
  {
    if ((*((_BYTE *)v6 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_44;
    kaldi::ReadToken(a2, 0, (uint64_t)v82, a4, a5);
    if (SHIBYTE(v82[2]) < 0)
      break;
    if (HIBYTE(v82[2]) == 15)
    {
      v18 = v82[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v82 + 7) == (void *)0x3E736E6F69746E65;
      v13 = v7;
      if (!v18)
      {
LABEL_35:
        if (HIBYTE(v82[2]) == 12)
        {
          v19 = v82;
          goto LABEL_39;
        }
        goto LABEL_78;
      }
    }
    else
    {
      if (HIBYTE(v82[2]) != 22)
        goto LABEL_35;
      v12 = v82[0] == (void *)0x53656372756F533CLL
         && v82[1] == (void *)0x656D694465746174
         && *(void **)((char *)&v82[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      v13 = v8;
      if (!v12)
        goto LABEL_78;
    }
LABEL_34:
    kaldi::ReadBasicType<int>(a2, 0, v13, v9, v10);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v14 = v82[1];
  if (v82[1] != (void *)15)
  {
    if (v82[1] != (void *)22)
      goto LABEL_37;
    v15 = *(_QWORD *)v82[0] == 0x53656372756F533CLL && *((_QWORD *)v82[0] + 1) == 0x656D694465746174;
    v16 = v15 && *(_QWORD *)((char *)v82[0] + 14) == 0x3E6E6F69736E656DLL;
    v13 = v8;
    if (!v16)
      goto LABEL_37;
    goto LABEL_34;
  }
  v17 = *(_QWORD *)v82[0] == 0x6574744178614D3CLL && *(_QWORD *)((char *)v82[0] + 7) == 0x3E736E6F69746E65;
  v13 = v7;
  if (v17)
    goto LABEL_34;
  v14 = v82[1];
LABEL_37:
  if (v14 != (void *)12)
    goto LABEL_78;
  v19 = (void **)v82[0];
LABEL_39:
  v20 = *v19;
  v21 = *((_DWORD *)v19 + 2);
  if (v20 != (void *)0x6E6F706D6F432F3CLL || v21 != 1047817829)
  {
LABEL_78:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v77, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 131);
    v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v82[2]) >= 0)
      v57 = v82;
    else
      v57 = (void **)v82[0];
    if (SHIBYTE(v82[2]) >= 0)
      v58 = HIBYTE(v82[2]);
    else
      v58 = (uint64_t)v82[1];
    v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v57, v58);
    v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)" (SourceStateDimension|MaxAttentions)", 37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v77);
  }
LABEL_44:
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v73 = 0;
  kaldi::ExpectToken(a2, 0, (kaldi *)"<SourceDotTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&v74, v23, v24);
  v25 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v74);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v73 + 4, v26, v27);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v73, v28, v29);
  v30 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v25, HIDWORD(v73), v73);
  if (!v30)
  {
    *(_QWORD *)(a1 + 176) = 0;
LABEL_86:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v77, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 149);
    v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"cannot initialize source dot transform from ", 44);
    if (v76 >= 0)
      v62 = &v74;
    else
      v62 = v74;
    if (v76 >= 0)
      v63 = HIBYTE(v76);
    else
      v63 = v75;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v62, v63);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v77);
  }
  *(_QWORD *)(a1 + 176) = v31;
  if (!v31)
    goto LABEL_86;
  (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v31 + 96))(v31, a2, a3);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<TargetDotTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&v74, v32, v33);
  v34 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v74);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v73 + 4, v35, v36);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v73, v37, v38);
  v39 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v34, HIDWORD(v73), v73);
  if (!v39)
  {
    *(_QWORD *)(a1 + 184) = 0;
LABEL_94:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v77, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 161);
    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"cannot initialize target dot transform from ", 44);
    if (v76 >= 0)
      v65 = &v74;
    else
      v65 = v74;
    if (v76 >= 0)
      v66 = HIBYTE(v76);
    else
      v66 = v75;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, v66);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v77);
  }
  *(_QWORD *)(a1 + 184) = v40;
  if (!v40)
    goto LABEL_94;
  (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v40 + 96))(v40, a2, a3);
  v70 = 0;
  v71 = 0;
  v72 = 0;
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v41 = std::locale::use_facet(&v77, MEMORY[0x1E0DE4A90]);
  v42 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
  std::locale::~locale(&v77);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v70, v42);
  v43 = HIBYTE(v72);
  v44 = HIBYTE(v72);
  v46 = (char *)v70;
  v45 = v71;
  v47 = (char *)v70 + v71;
  if (v72 >= 0)
  {
    v47 = (char *)&v70 + HIBYTE(v72);
    v46 = (char *)&v70;
  }
  if (v46 != v47)
  {
    do
    {
      v48 = *v46;
      if (v48 == 124)
        LOBYTE(v48) = 10;
      *v46++ = v48;
    }
    while (v46 != v47);
    v43 = HIBYTE(v72);
    v45 = v71;
    v44 = HIBYTE(v72);
  }
  if (v44 >= 0)
    v49 = v43;
  else
    v49 = v45;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v49 + 1);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v50 = __p;
  else
    v50 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  if (v49)
  {
    if (v72 >= 0)
      v51 = &v70;
    else
      v51 = v70;
    memmove(v50, v51, v49);
  }
  *(_WORD *)((char *)&v50->__r_.__value_.__l.__data_ + v49) = 10;
  std::istringstream::basic_istringstream[abi:ne180100](&v77, __p, 8);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  kaldi::nnet1::Nnet::Init(*(kaldi::nnet1::Nnet **)(a1 + 192), (uint64_t *)&v77, a3);
  kaldi::nnet1::Nnet::ValidateNnet(*(kaldi::nnet1::Nnet **)(a1 + 192), v52, v53, v54, v55);
  if ((kaldi::nnet1::Nnet::IsRnn(*(kaldi::nnet1::Nnet **)(a1 + 192)) & 1) == 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 178);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"it doesn't make sense to use a non-recurrent network here", 57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  v77.__locale_ = (std::locale::__imp *)*MEMORY[0x1E0DE4F58];
  *(std::locale *)((char *)&v77 + *((_QWORD *)v77.__locale_ - 3)) = *(std::locale *)(MEMORY[0x1E0DE4F58] + 24);
  v78 = MEMORY[0x1E0DE4FB8] + 16;
  if (v80 < 0)
    operator delete(v79);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1DF0ECF6C](&v81);
  if (SHIBYTE(v72) < 0)
    operator delete(v70);
  if (SHIBYTE(v76) < 0)
    operator delete(v74);
  if (SHIBYTE(v82[2]) < 0)
    operator delete(v82[0]);
}

void `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::InitData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::GlobalRecurrentAttention::InitData((uint64_t)a1 + *(_QWORD *)(*a1 - 112), a2, a3, a4, a5);
}

void kaldi::nnet1::GlobalRecurrentAttention::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  BOOL v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  void **v21;
  void *v22;
  int v23;
  const void *v25;
  void *v26;
  const void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  _QWORD *v33;
  void **v34;
  uint64_t v35;
  _QWORD v37[34];
  void *v38[4];

  memset(v38, 0, 24);
  v7 = a1 + 12;
  v8 = a1 + 8;
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60)
      goto LABEL_44;
    kaldi::ReadToken(a2, a3, (uint64_t)v38, v9, v10);
    if (SHIBYTE(v38[2]) < 0)
      break;
    if (HIBYTE(v38[2]) == 15)
    {
      v20 = v38[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v38 + 7) == (void *)0x3E736E6F69746E65;
      v15 = v7;
      if (!v20)
      {
LABEL_35:
        if (HIBYTE(v38[2]) == 12)
        {
          v21 = v38;
          goto LABEL_39;
        }
        goto LABEL_52;
      }
    }
    else
    {
      if (HIBYTE(v38[2]) != 22)
        goto LABEL_35;
      v14 = v38[0] == (void *)0x53656372756F533CLL
         && v38[1] == (void *)0x656D694465746174
         && *(void **)((char *)&v38[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      v15 = v8;
      if (!v14)
        goto LABEL_52;
    }
LABEL_34:
    kaldi::ReadBasicType<int>(a2, a3, v15, v11, v12);
  }
  v16 = v38[1];
  if (v38[1] != (void *)15)
  {
    if (v38[1] != (void *)22)
      goto LABEL_37;
    v17 = *(_QWORD *)v38[0] == 0x53656372756F533CLL && *((_QWORD *)v38[0] + 1) == 0x656D694465746174;
    v18 = v17 && *(_QWORD *)((char *)v38[0] + 14) == 0x3E6E6F69736E656DLL;
    v15 = v8;
    if (!v18)
      goto LABEL_37;
    goto LABEL_34;
  }
  v19 = *(_QWORD *)v38[0] == 0x6574744178614D3CLL && *(_QWORD *)((char *)v38[0] + 7) == 0x3E736E6F69746E65;
  v15 = v7;
  if (v19)
    goto LABEL_34;
  v16 = v38[1];
LABEL_37:
  if (v16 != (void *)12)
    goto LABEL_52;
  v21 = (void **)v38[0];
LABEL_39:
  v22 = *v21;
  v23 = *((_DWORD *)v21 + 2);
  if (v22 != (void *)0x6E6F706D6F432F3CLL || v23 != 1047817829)
  {
LABEL_52:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 194);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Unrecognized token ", 19);
    if (SHIBYTE(v38[2]) >= 0)
      v34 = v38;
    else
      v34 = (void **)v38[0];
    if (SHIBYTE(v38[2]) >= 0)
      v35 = HIBYTE(v38[2]);
    else
      v35 = (uint64_t)v38[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
  }
LABEL_44:
  kaldi::ExpectToken(a2, a3, (kaldi *)"<SourceDotTransform>");
  v25 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v25)
  {
    *(_QWORD *)(a1 + 176) = 0;
LABEL_60:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 198);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"read source dot transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
  }
  *(_QWORD *)(a1 + 176) = v26;
  if (!v26)
    goto LABEL_60;
  kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
  kaldi::ExpectToken(a2, a3, (kaldi *)"<TargetDotTransform>");
  v27 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v27)
  {
    *(_QWORD *)(a1 + 184) = 0;
LABEL_62:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 202);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"read target dot transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
  }
  *(_QWORD *)(a1 + 184) = v28;
  if (!v28)
    goto LABEL_62;
  kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
  kaldi::nnet1::Nnet::Read(*(uint64_t ***)(a1 + 192), a2, a3, a4);
  kaldi::nnet1::Nnet::ValidateNnet(*(kaldi::nnet1::Nnet **)(a1 + 192), v29, v30, v31, v32);
  if ((kaldi::nnet1::Nnet::IsRnn(*(kaldi::nnet1::Nnet **)(a1 + 192)) & 1) == 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 207);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"it doesn't make sense to use a non-reccurent network here", 57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  if (SHIBYTE(v38[2]) < 0)
    operator delete(v38[0]);
}

void sub_1DE484EAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::GlobalRecurrentAttention::ReadData((uint64_t)a1 + *(_QWORD *)(*a1 - 176), a2, a3, a4);
}

_QWORD *kaldi::nnet1::GlobalRecurrentAttention::WriteConfig(int a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;

  kaldi::WriteToken(a2, a3, (kaldi *)"<SourceStateDimension>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxAttentions>", v7, v8);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  return kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v9, v10);
}

_QWORD *`virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::WriteConfig(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::GlobalRecurrentAttention::WriteConfig(a1 + *(_QWORD *)(*a1 - 184), a2, a3, a4, a5);
}

_QWORD *kaldi::nnet1::GlobalRecurrentAttention::WriteData(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  const char *v16;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  kaldi::WriteToken(a2, a3, (kaldi *)"<SourceDotTransform>", v8, v9);
  kaldi::nnet1::Component::Write(*(_QWORD *)(a1 + 176), a2, (uint64_t)a3, a4);
  kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v10, v11);
  kaldi::WriteToken(a2, a3, (kaldi *)"<TargetDotTransform>", v12, v13);
  kaldi::nnet1::Component::Write(*(_QWORD *)(a1 + 184), a2, (uint64_t)a3, a4);
  kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v14, v15);
  return kaldi::nnet1::Nnet::Write(*(uint64_t **)(a1 + 192), a2, (uint64_t)a3, a4, v16);
}

_QWORD *`virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::WriteData(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4)
{
  return kaldi::nnet1::GlobalRecurrentAttention::WriteData((uint64_t)a1 + *(_QWORD *)(*a1 - 120), a2, a3, a4);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::NumParams(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  int v2;
  int v3;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 22) + 176))(*((_QWORD *)this + 22));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 23) + 176))(*((_QWORD *)this + 23)) + v2;
  return v3 + kaldi::nnet1::Nnet::NumParams(*((kaldi::nnet1::Nnet **)this + 24));
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::NumParams(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  char *v1;
  int v2;
  int v3;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 192);
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v1 + 22) + 176))(*((_QWORD *)v1 + 22));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v1 + 23) + 176))(*((_QWORD *)v1 + 23)) + v2;
  return v3 + kaldi::nnet1::Nnet::NumParams(*((kaldi::nnet1::Nnet **)v1 + 24));
}

void kaldi::nnet1::GlobalRecurrentAttention::GetParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  int v18;
  const char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 1, v5, v6);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 176) + 184))(*(_QWORD *)(a1 + 176), &v23);
  v21 = 0;
  v22 = 0;
  if (v24 > *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
  v20 = *(void **)a2;
  LODWORD(v21) = v24;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v20, (uint64_t)&v23, v7, v8, v9);
  v10 = (int)v24;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 184) + 184))(*(_QWORD *)(a1 + 184), &v23);
  v21 = 0;
  v22 = 0;
  if ((v24 + v10) > *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v13);
  v20 = (void *)(*(_QWORD *)a2 + 4 * v10);
  LODWORD(v21) = v24;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v20, (uint64_t)&v23, v11, v12, v13);
  v14 = v24;
  kaldi::nnet1::Nnet::GetParams(*(kaldi::nnet1::Nnet **)(a1 + 192), (uint64_t)&v23);
  v18 = v14 + v10;
  v21 = 0;
  v22 = 0;
  if ((v24 + v14 + v10) > *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v17);
  v20 = (void *)(*(_QWORD *)a2 + 4 * v18);
  LODWORD(v21) = v24;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v20, (uint64_t)&v23, v15, v16, v17);
  if ((_DWORD)v24 + v18 != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"GetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0xF8, "shift == wei_copy->Dim()", v19);
  kaldi::Vector<float>::Destroy((uint64_t)&v23);
}

void sub_1DE4852C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetParams(_QWORD *a1, uint64_t a2)
{
  kaldi::nnet1::GlobalRecurrentAttention::GetParams((uint64_t)a1 + *(_QWORD *)(*a1 - 200), a2);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetParams(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  const char *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  kaldi::nnet1::Nnet *v11;
  int v12;
  uint64_t result;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 176);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
  v16 = 0;
  v17 = 0;
  if (v5 > *(_DWORD *)(a2 + 8))
    goto LABEL_6;
  v15 = *(_QWORD *)a2;
  LODWORD(v16) = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 192))(v4, &v15);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 176))(*(_QWORD *)(a1 + 176));
  v8 = *(_QWORD *)(a1 + 184);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 176))(v8);
  v16 = 0;
  v17 = 0;
  if ((v9 + v7) > *(_DWORD *)(a2 + 8))
    goto LABEL_6;
  v15 = *(_QWORD *)a2 + 4 * v7;
  LODWORD(v16) = v9;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 192))(v8, &v15);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 176))(*(_QWORD *)(a1 + 184)) + v7;
  v11 = *(kaldi::nnet1::Nnet **)(a1 + 192);
  v12 = kaldi::nnet1::Nnet::NumParams(v11);
  v16 = 0;
  v17 = 0;
  if ((v12 + v10) > *(_DWORD *)(a2 + 8))
LABEL_6:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v6);
  v15 = *(_QWORD *)a2 + 4 * v10;
  LODWORD(v16) = v12;
  kaldi::nnet1::Nnet::SetParams(v11, (uint64_t)&v15);
  result = kaldi::nnet1::Nnet::NumParams(*(kaldi::nnet1::Nnet **)(a1 + 192));
  if ((_DWORD)result + v10 != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0x103, "shift == wei_src.Dim()", v14);
  return result;
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetParams(_QWORD *a1, uint64_t a2)
{
  return kaldi::nnet1::GlobalRecurrentAttention::SetParams((uint64_t)a1 + *(_QWORD *)(*a1 - 208), a2);
}

float kaldi::nnet1::GlobalRecurrentAttention::SumParams(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  float v2;
  float v3;

  v2 = (*(float (**)(_QWORD))(**((_QWORD **)this + 22) + 208))(*((_QWORD *)this + 22));
  v3 = v2 + (*(float (**)(_QWORD))(**((_QWORD **)this + 23) + 208))(*((_QWORD *)this + 23));
  return v3 + kaldi::nnet1::Nnet::SumParams(*((kaldi::nnet1::Nnet **)this + 24));
}

float `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SumParams(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  char *v1;
  float v2;
  float v3;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 224);
  v2 = (*(float (**)(_QWORD))(**((_QWORD **)v1 + 22) + 208))(*((_QWORD *)v1 + 22));
  v3 = v2 + (*(float (**)(_QWORD))(**((_QWORD **)v1 + 23) + 208))(*((_QWORD *)v1 + 23));
  return v3 + kaldi::nnet1::Nnet::SumParams(*((kaldi::nnet1::Nnet **)v1 + 24));
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::PerturbParams(kaldi::nnet1::GlobalRecurrentAttention *this, float a2)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 22) + 216))(*((_QWORD *)this + 22));
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 23) + 216))(*((_QWORD *)this + 23), a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::PerturbParams(kaldi::nnet1::GlobalRecurrentAttention *this, float a2)
{
  char *v3;

  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 232);
  (*(void (**)(_QWORD))(**((_QWORD **)v3 + 22) + 216))(*((_QWORD *)v3 + 22));
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)v3 + 23) + 216))(*((_QWORD *)v3 + 23), a2);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::Info(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v19;
  void *v20[2];
  unsigned __int8 v21;
  void *v22[2];
  unsigned __int8 v23;
  _QWORD v24[11];
  char v25;
  uint64_t v26;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
  (*(void (**)(kaldi::nnet1::GlobalRecurrentAttention *, _QWORD *, _QWORD))(*(_QWORD *)this + 96))(this, v24, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n## Source Dot Transform: input-dim ", 36);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", output-dim ", 13);
  v3 = (_QWORD *)std::ostream::operator<<();
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 22) + 64))(v22);
  if ((v23 & 0x80u) == 0)
    v5 = v22;
  else
    v5 = (void **)v22[0];
  if ((v23 & 0x80u) == 0)
    v6 = v23;
  else
    v6 = (uint64_t)v22[1];
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n## Target Dot Transform: input-dim ", 36);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", output-dim ", 13);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 23) + 64))(v20);
  if ((v21 & 0x80u) == 0)
    v11 = v20;
  else
    v11 = (void **)v20[0];
  if ((v21 & 0x80u) == 0)
    v12 = v21;
  else
    v12 = (uint64_t)v20[1];
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n## Internal recurrent network info ", 36);
  kaldi::nnet1::Nnet::Info((uint64_t *)__p, *((kaldi::nnet1::Nnet **)this + 24));
  if ((v19 & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v16 = v19;
  else
    v16 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  if ((char)v21 < 0)
    operator delete(v20[0]);
  if ((char)v23 < 0)
    operator delete(v22[0]);
  std::stringbuf::str();
  v24[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v24 + *(_QWORD *)(v24[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v24[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v25 < 0)
    operator delete((void *)v24[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v26);
}

void sub_1DE48582C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  std::ostringstream::~ostringstream((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::Info(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return kaldi::nnet1::GlobalRecurrentAttention::Info((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this
                                                                                               + *(_QWORD *)(*(_QWORD *)this - 80)));
}

void kaldi::nnet1::GlobalRecurrentAttention::InfoGradient(kaldi::nnet1::GlobalRecurrentAttention *this@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  void *__p[2];
  unsigned __int8 v16;
  void *v17[2];
  unsigned __int8 v18;
  void *v19[2];
  unsigned __int8 v20;
  std::string v21;
  std::string v22;
  std::string v23;

  (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 22) + 72))(&v21);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 23) + 72))(v19);
  if ((v20 & 0x80u) == 0)
    v4 = v19;
  else
    v4 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v5 = v20;
  else
    v5 = (std::string::size_type)v19[1];
  v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::Nnet::InfoGradient(*((kaldi::nnet1::Nnet **)this + 24), v17);
  if ((v18 & 0x80u) == 0)
    v8 = v17;
  else
    v8 = (void **)v17[0];
  if ((v18 & 0x80u) == 0)
    v9 = v18;
  else
    v9 = (std::string::size_type)v17[1];
  v10 = std::string::append(&v22, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "\n");
  if ((v16 & 0x80u) == 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if ((v16 & 0x80u) == 0)
    v13 = v16;
  else
    v13 = (std::string::size_type)__p[1];
  v14 = std::string::append(&v23, (const std::string::value_type *)v12, v13);
  *a2 = *v14;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if ((char)v18 < 0)
    operator delete(v17[0]);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_1DE485A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v38 - 41) < 0)
    operator delete(*(void **)(v38 - 64));
  if (a20 < 0)
    operator delete(a15);
  if (a38 < 0)
    operator delete(a33);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::InfoGradient(kaldi::nnet1::GlobalRecurrentAttention *this@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::GlobalRecurrentAttention::InfoGradient((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)), a2);
}

void kaldi::nnet1::GlobalRecurrentAttention::SetTrainOptions(kaldi::nnet1::GlobalRecurrentAttention *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  char *v4;
  __int128 v5;
  uint64_t v6;
  const char *v7;

  v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v5 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)(v4 + 71) = *(_OWORD *)((char *)a2 + 23);
  *(_OWORD *)(v4 + 56) = v5;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 22) + 264))(*((_QWORD *)this + 22));
  (*(void (**)(_QWORD, const kaldi::nnet1::NnetTrainOptions *))(**((_QWORD **)this + 23) + 264))(*((_QWORD *)this + 23), a2);
  kaldi::nnet1::Nnet::SetTrainOptions(*((kaldi::nnet1::Nnet **)this + 24), a2, 0, v6, v7);
}

void `non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetTrainOptions(kaldi::nnet1::GlobalRecurrentAttention *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::GlobalRecurrentAttention::SetTrainOptions((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this - 16), a2);
}

void `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetTrainOptions(kaldi::nnet1::GlobalRecurrentAttention *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::GlobalRecurrentAttention::SetTrainOptions((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 280)), a2);
}

unsigned int *kaldi::nnet1::GlobalRecurrentAttention::SetSourceStates(uint64_t a1, uint64_t a2, int **a3)
{
  const char *v6;
  unint64_t v7;
  int v8;
  int v9;
  const char *v10;
  int v11;
  int *v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  void *v24;
  __int128 v25;
  __int128 v26;
  void *__p;
  __int128 v28;
  __int128 v29;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  v7 = (char *)a3[1] - (char *)*a3;
  v8 = *(_DWORD *)(a2 + 20);
  v9 = v8 / (int)(v7 >> 2);
  if (v9 * (v7 >> 2) != v8)
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0x12B, "seq_size * num_seq == source.NumRows()", v6);
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0x12C, "source.NumCols() == source_vec_dim_", v6);
  kaldi::CuMatrix<float>::operator=(a1 + 296, a2);
  if ((int **)(a1 + 640) != a3)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 640), (char *)*a3, (uint64_t)a3[1], a3[1] - *a3);
  v12 = *a3 + 1;
  v11 = **a3;
  *(_DWORD *)(a1 + 664) = v11;
  v13 = a3[1];
  while (v12 != v13)
  {
    v14 = *v12;
    if (*v12 > v11)
    {
      *(_DWORD *)(a1 + 664) = v14;
      v11 = v14;
    }
    ++v12;
  }
  if (v11 >= *(_DWORD *)(a1 + 12))
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0x135, "max_src_length_ < max_attentions_", v10);
  if (v11 >= v9)
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0x136, "max_src_length_ + 1 <= seq_size", v10);
  kaldi::nnet1::Component::Propagate(*(_DWORD **)(a1 + 176), a1 + 296, a1 + 200, 0);
  __p = 0;
  v28 = 0uLL;
  std::vector<std::vector<int>>::assign((uint64_t *)(a1 + 616), (int)((uint64_t)v7 >> 2), (uint64_t)&__p);
  if (__p)
  {
    *(_QWORD *)&v28 = __p;
    operator delete(__p);
  }
  v19 = kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(a1 + 192), v15, v16, v17, v18);
  kaldi::CuMatrix<float>::Resize(a1 + 344, v7 >> 2, v19, 0, 0);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, a1 + 344, 0, *(_DWORD *)(a1 + 364), 0, *(_DWORD *)(a1 + 8));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v24, a1 + 296, 0, v7 >> 2, 0, *(_DWORD *)(a1 + 312));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&__p, (uint64_t)&v24, 111, v20, v21);
  v24 = &unk_1EA926508;
  v25 = 0u;
  v26 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v24);
  __p = &unk_1EA926508;
  v28 = 0u;
  v29 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
  kaldi::nnet1::Nnet::ResetHistoryStateIfExists(*(_QWORD *)(a1 + 192));
  return kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(*(uint64_t **)(a1 + 192), a1 + 344, a1 + 392, 0, v22);
}

void sub_1DE485DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, __int128 a10, __int128 a11, void *__p, __int128 a13, __int128 a14)
{
  a9 = &unk_1EA926508;
  a10 = 0u;
  a11 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a9);
  __p = &unk_1EA926508;
  a13 = 0u;
  a14 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetSourceDiffs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v8;
  size_t v9;
  const void *v10;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  if (*(_DWORD *)(a2 + 20) != *(_DWORD *)(a1 + 316))
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0x147, "source.NumRows() == source_states_.NumRows()", v8);
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 312))
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0x148, "source.NumCols() == source_states_.NumCols()", v8);
  v9 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  v10 = *(const void **)(a1 + 640);
  if (v9 != *(_QWORD *)(a1 + 648) - (_QWORD)v10 || memcmp(*(const void **)a3, v10, v9))
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0x149, "sequence_length == src_sequence_length_", v8);
  return kaldi::CuMatrix<float>::Swap(a1 + 440, a4);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetCurrentAlignment(uint64_t a1, std::vector<int> *this)
{
  int v4;
  std::vector<int>::pointer begin;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = -1431655765 * ((uint64_t)(*(_QWORD *)(a1 + 624) - *(_QWORD *)(a1 + 616)) >> 3);
  std::vector<int>::resize(this, v4);
  if (v4 >= 1)
  {
    begin = this->__begin_;
    v6 = v4;
    v7 = (uint64_t *)(*(_QWORD *)(a1 + 616) + 8);
    do
    {
      v8 = *v7;
      v7 += 3;
      *begin++ = *(_DWORD *)(v8 - 4);
      --v6;
    }
    while (v6);
  }
  return 1;
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetOverallAlignment(uint64_t a1, uint64_t a2)
{
  if (a1 + 616 != a2)
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(a2, *(_QWORD *)(a1 + 616), *(_QWORD *)(a1 + 624), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 624) - *(_QWORD *)(a1 + 616)) >> 3));
  return 1;
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetSourceVectorDimension(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 8) != a2)
  {
    *(_DWORD *)(this + 8) = a2;
    *(_BYTE *)(this + 668) = 0;
  }
  return this;
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetMaxAttentions(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 12) != a2)
  {
    *(_DWORD *)(this + 12) = a2;
    *(_BYTE *)(this + 668) = 0;
  }
  return this;
}

void kaldi::nnet1::GlobalRecurrentAttention::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  float v40;
  float v41;
  int v42;
  uint64_t v43;
  int *v44;
  int **v45;
  unint64_t v46;
  _QWORD *v47;
  int *v48;
  int *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  int *v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  char *v59;
  float v60;
  int v61;
  float v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  const char *v72;
  const char *v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  const char *v80;
  unsigned int *v81;
  uint64_t v82;
  const char *v83;
  char *v84;
  const char *v85;
  int v86;
  uint64_t v87;
  _DWORD *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  __int128 v109;
  __int128 v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  int v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;

  v6 = a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  v95 = a2;
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(v6 + *(_QWORD *)(*(_QWORD *)v6 - 24) + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0x16E, "in.NumCols() == input_dim_", v8);
  if (a4)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0x170, "batch_idx == 0", v8);
  v9 = *(_QWORD *)(v6 + 648) - *(_QWORD *)(v6 + 640);
  v10 = v9 >> 2;
  v11 = *(_DWORD *)(a2 + 20);
  v94 = v11 / (int)(v9 >> 2);
  if (v94 * (v9 >> 2) != v11)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", (const char *)0x176, "num_seq * tgt_seq_size == in.NumRows()", v8);
  v12 = *(unsigned int *)(v6 + 316);
  v13 = (_DWORD *)(v6 + 584);
  v14 = ((int)v12 / (int)v10);
  kaldi::CuVector<float>::Resize(v6 + 584, v12, 0, v7, v8);
  v92 = v6 + 488;
  v93 = v14;
  kaldi::CuMatrix<float>::Resize(v6 + 488, v9 >> 2, v14, 1u, 0);
  v15 = *(unsigned int *)(v6 + 316);
  v123 = 0;
  v124 = 0;
  v122 = 0;
  kaldi::Vector<float>::Resize((void **)&v122, v15, 1, v16, v17);
  kaldi::Matrix<float>::Matrix((uint64_t)&v118);
  if (v94 >= 1)
  {
    v96 = 0;
    v98 = v6 + 296;
    v87 = v6 + 8;
    v90 = v6 + 200;
    v99 = v6 + 248;
    v100 = v6 + 344;
    v101 = v6 + 536;
    v97 = v6 + 392;
    v18 = (int)((uint64_t)v9 >> 2);
    v103 = (v9 >> 2);
    v86 = -(int)(v9 >> 2);
    v85 = "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMat"
          "rixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)";
    v84 = "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h";
    v89 = v9 >> 2;
    v102 = v6;
    v88 = (_DWORD *)(v6 + 584);
    do
    {
      kaldi::CuMatrix<float>::operator=(v101, v90);
      kaldi::nnet1::Component::Propagate(*(_DWORD **)(v6 + 184), v97, v99, 0);
      if (*(int *)(v6 + 664) >= 1)
      {
        v22 = 0;
        v23 = 0;
        do
        {
          v24 = kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v115, v101, v22, v10, 0, *(_DWORD *)(v6 + 552));
          kaldi::CuMatrixBase<float>::MulElements(v24, v99, v25, v26, v27);
          v115 = &unk_1EA926508;
          v116 = 0u;
          v117 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v115);
          ++v23;
          v22 += v10;
        }
        while (v23 < *(_DWORD *)(v6 + 664));
      }
      kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v13, v101, 1.0, 0.0, v19, v20, v21);
      kaldi::CuVectorBase<float>::CopyToVec<float>(v13, (uint64_t)&v122, v28, v29, v30);
      kaldi::Matrix<float>::Resize((uint64_t)&v118, v10, v93, 0, 0);
      if ((int)v10 >= 1)
      {
        v33 = 0;
        v34 = 0;
        v35 = v86;
        do
        {
          v36 = *(unsigned int *)(*(_QWORD *)(v6 + 640) + 4 * v34);
          if ((int)v36 < 1)
          {
            v39 = -1;
            v40 = -INFINITY;
          }
          else
          {
            v37 = 0;
            v38 = 0;
            v39 = -1;
            v40 = -INFINITY;
            do
            {
              if (v123 <= v35 + (int)v37 + (int)v18)
                kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v32);
              v41 = *(float *)&v122[4 * v37 + v33];
              if (v41 > v40)
                v39 = v38;
              v42 = v38 + 1;
              if (v41 > v40)
                v40 = *(float *)&v122[4 * v37 + v33];
              v37 += v18;
              ++v38;
            }
            while ((_DWORD)v36 != v42);
          }
          v43 = *(_QWORD *)(v102 + 616) + 24 * v34;
          v45 = (int **)(v43 + 8);
          v44 = *(int **)(v43 + 8);
          v47 = (_QWORD *)(v43 + 16);
          v46 = *(_QWORD *)(v43 + 16);
          if ((unint64_t)v44 >= v46)
          {
            v49 = *(int **)v43;
            v50 = ((uint64_t)v44 - *(_QWORD *)v43) >> 2;
            v51 = v50 + 1;
            if ((unint64_t)(v50 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v52 = v46 - (_QWORD)v49;
            if (v52 >> 1 > v51)
              v51 = v52 >> 1;
            if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
              v53 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v53 = v51;
            if (v53)
            {
              v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v47, v53);
              v44 = *v45;
              v49 = *(int **)v43;
            }
            else
            {
              v54 = 0;
            }
            v55 = (int *)&v54[4 * v50];
            *v55 = v39;
            v48 = v55 + 1;
            while (v44 != v49)
            {
              v56 = *--v44;
              *--v55 = v56;
            }
            *(_QWORD *)v43 = v55;
            *v45 = v48;
            *v47 = &v54[4 * v53];
            if (v49)
              operator delete(v49);
          }
          else
          {
            *v44 = v39;
            v48 = v44 + 1;
          }
          *v45 = v48;
          if ((int)v36 >= 1)
          {
            v57 = 0;
            v58 = v123;
            v59 = &v122[v33];
            v60 = 0.0;
            v61 = v36;
            do
            {
              if (v58 <= v35 + (int)v57 + (int)v18)
                kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v32);
              --v61;
              v62 = expf(*(float *)&v59[4 * v57] - v40);
              *(float *)&v59[4 * v57] = v62;
              v60 = v60 + v62;
              v57 += v18;
            }
            while (v61);
            v63 = 0;
            v64 = 0;
            v65 = v123;
            v66 = v120;
            v67 = v118 + 4 * v121 * (int)v34;
            v68 = &v122[v33];
            while (v65 > v35 + (int)v63 + (int)v18)
            {
              v69 = 205;
              if (v34 >= v66 || v64 >= v119)
                goto LABEL_60;
              *(float *)(v67 + 4 * v64) = (float)(1.0 / v60) * *(float *)&v68[4 * v63];
              v63 += v18;
              if (v36 == ++v64)
                goto LABEL_46;
            }
            v69 = 104;
            v84 = "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h";
            v85 = "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)";
LABEL_60:
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", v84, (const char *)v69, v85, v32);
          }
LABEL_46:
          ++v34;
          ++v35;
          v33 += 4;
          v6 = v102;
        }
        while (v34 != v103);
      }
      kaldi::CuMatrixBase<float>::CopyFromMat(v92, (uint64_t)&v118, 111, v31, v32);
      v10 = v89;
      v13 = v88;
      if ((int)v89 >= 1)
      {
        v70 = 0;
        do
        {
          v71 = *(_DWORD *)(*(_QWORD *)(v6 + 640) + 4 * v70);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v115, v100, 0, *(_DWORD *)(v6 + 364), 0, *(_DWORD *)(v6 + 8));
          if (v70 >= HIDWORD(v116))
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v72);
          v111 = &unk_1EA926538;
          v112 = v116 + 4 * (int)v117 * (int)v70;
          v114 = *((_QWORD *)&v117 + 1);
          v113 = DWORD2(v116);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v108, v98, v70, v71 * v89, 0, *(_DWORD *)(v6 + 312));
          if ((_DWORD)v89 != 1)
            kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v108, *(_DWORD *)(v6 + 320) * v89);
          if (v70 >= *(unsigned int *)(v6 + 508))
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v73);
          v74 = *(_QWORD *)(v6 + 496);
          v75 = *(_DWORD *)(v6 + 512);
          v76 = *(_DWORD *)(v6 + 504);
          v77 = *(_QWORD *)(v6 + 520);
          v106 = 0;
          v107 = 0;
          v105 = 0;
          v104 = &unk_1EA926538;
          if (v71 > v76)
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v73);
          v105 = v74 + 4 * v75 * (int)v70;
          LODWORD(v106) = v71;
          v107 = v77;
          kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v111, (uint64_t)&v108, CblasTrans, (uint64_t)&v104, v73, 1.0, 0.0);
          v108 = &unk_1EA926508;
          v109 = 0u;
          v110 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v108);
          v111 = &unk_1EA926538;
          v112 = 0;
          LODWORD(v113) = 0;
          v114 = 0;
          v115 = &unk_1EA926508;
          v116 = 0u;
          v117 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v115);
          ++v70;
        }
        while (v103 != v70);
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v115, v100, 0, *(_DWORD *)(v6 + 364), (const char *)*(unsigned int *)(v6 + 8), *(_DWORD *)(v87 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v108, v95, v96 * v89, v89, 0, *(_DWORD *)(v95 + 16));
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v115, (uint64_t)&v108, 111, v78, v79);
      v108 = &unk_1EA926508;
      v109 = 0u;
      v110 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v108);
      v115 = &unk_1EA926508;
      v116 = 0u;
      v117 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v115);
      kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(*(uint64_t **)(v6 + 192), v100, v97, 0, v80);
      v81 = (unsigned int *)kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v115, a3, v96 * (int)v89, v89, 0, *(_DWORD *)(a3 + 16));
      kaldi::CuMatrixBase<float>::CopyFromMat<float>(v81, v97, 111, v82, v83);
      v115 = &unk_1EA926508;
      v116 = 0u;
      v117 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v115);
      ++v96;
    }
    while (v96 != v94);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)&v118);
  kaldi::Vector<float>::Destroy((uint64_t)&v122);
}

void sub_1DE486888(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::Vector<float>::Destroy(v1 - 144);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  kaldi::nnet1::GlobalRecurrentAttention::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 128), a2, a3, a4);
}

void kaldi::nnet1::GlobalRecurrentAttention::BackpropagateFnc()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 448);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "not implemented yet");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::BackpropagateFnc()
{
  kaldi::nnet1::GlobalRecurrentAttention::BackpropagateFnc();
}

_QWORD *kaldi::nnet1::GlobalRecurrentAttention::SetGradientNormalization(_QWORD **a1, uint64_t a2, float a3)
{
  (*(void (**)(_QWORD *))(*a1[22] + 240))(a1[22]);
  (*(void (**)(_QWORD *, uint64_t, float))(*a1[23] + 240))(a1[23], a2, a3);
  return kaldi::nnet1::Nnet::SetGradientNormalization(a1[24], a2, 0, 0, a3);
}

_QWORD *`virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetGradientNormalization(_QWORD *a1, uint64_t a2, float a3)
{
  return kaldi::nnet1::GlobalRecurrentAttention::SetGradientNormalization((_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 256)), a2, a3);
}

void kaldi::nnet1::GlobalRecurrentAttention::AccumGradients()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 466);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "not implemented yet");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::AccumGradients()
{
  kaldi::nnet1::GlobalRecurrentAttention::AccumGradients();
}

void kaldi::nnet1::GlobalRecurrentAttention::UpdateWeights(kaldi::nnet1::GlobalRecurrentAttention *this, void *a2, uint64_t a3)
{
  (*(void (**)(kaldi::nnet1::GlobalRecurrentAttention *))(*(_QWORD *)this + 296))(this);
  (*(void (**)(_QWORD, void *, uint64_t))(**((_QWORD **)this + 22) + 256))(*((_QWORD *)this + 22), a2, a3);
  (*(void (**)(_QWORD, void *, uint64_t))(**((_QWORD **)this + 23) + 256))(*((_QWORD *)this + 23), a2, a3);
  kaldi::nnet1::Nnet::Update(*((const void ****)this + 24), a2, a3);
}

void `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::UpdateWeights(kaldi::nnet1::GlobalRecurrentAttention *this, void *a2, uint64_t a3)
{
  kaldi::nnet1::GlobalRecurrentAttention::UpdateWeights((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 272)), a2, a3);
}

void kaldi::nnet1::GlobalRecurrentAttention::GetGradient()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "GetGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 479);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "not implemented yet");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetGradient()
{
  kaldi::nnet1::GlobalRecurrentAttention::GetGradient();
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::HistoryStateSize(kaldi::nnet1::Nnet **this)
{
  (*((void (**)(kaldi::nnet1::Nnet **))*this + 37))(this);
  return kaldi::nnet1::Nnet::HistoryStateSize(this[24]);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::HistoryStateSize(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  kaldi::nnet1::Nnet **v1;

  v1 = (kaldi::nnet1::Nnet **)((char *)this - 16);
  (*(void (**)(char *))(*((_QWORD *)this - 2) + 296))((char *)this - 16);
  return kaldi::nnet1::Nnet::HistoryStateSize(v1[24]);
}

_QWORD *kaldi::nnet1::GlobalRecurrentAttention::ResetHistoryState(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v8;

  ((void (*)(_QWORD **))(*a1)[37])(a1);
  return kaldi::nnet1::Nnet::ResetHistoryStateIfExists(a1[24], a2, a3, a4, v8);
}

_QWORD *`non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::ResetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;

  v7 = a1 - 16;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 - 16) + 296))(a1 - 16);
  return kaldi::nnet1::Nnet::ResetHistoryStateIfExists(*(_QWORD **)(v7 + 192), a2, a3, a4, v8);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::ResetHistoryState(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  (*(void (**)(kaldi::nnet1::GlobalRecurrentAttention *))(*(_QWORD *)this + 296))(this);
  return kaldi::nnet1::Nnet::ResetHistoryStateIfExists(*((_QWORD *)this + 24));
}

uint64_t `non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::ResetHistoryState(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  char *v1;

  v1 = (char *)this - 16;
  (*(void (**)(char *))(*((_QWORD *)this - 2) + 296))((char *)this - 16);
  return kaldi::nnet1::Nnet::ResetHistoryStateIfExists(*((_QWORD *)v1 + 24));
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetHistoryState(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t *))(*a1 + 296))(a1);
  return kaldi::nnet1::Nnet::GetHistoryState(a1[24], a2, a3);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = a1 - 16;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 - 16) + 296))(a1 - 16);
  return kaldi::nnet1::Nnet::GetHistoryState(*(_QWORD *)(v5 + 192), a2, a3);
}

void kaldi::nnet1::GlobalRecurrentAttention::GetHistoryState(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v8;

  (*(void (**)(uint64_t *))(*a1 + 296))(a1);
  kaldi::nnet1::Nnet::GetHistoryState(a1[24], a2, a3, a4, v8);
}

void `non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;

  v7 = a1 - 16;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 - 16) + 296))(a1 - 16);
  kaldi::nnet1::Nnet::GetHistoryState(*(_QWORD *)(v7 + 192), a2, a3, a4, v8);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetHistoryState(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;

  (*(void (**)(uint64_t *))(*a1 + 296))(a1);
  return kaldi::nnet1::Nnet::SetHistoryState(a1[24], a2, a3, v6, v7);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;

  v5 = a1 - 16;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 - 16) + 296))(a1 - 16);
  return kaldi::nnet1::Nnet::SetHistoryState(*(_QWORD *)(v5 + 192), a2, a3, v6, v7);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetHistoryState(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v8;

  (*(void (**)(uint64_t *))(*a1 + 296))(a1);
  return kaldi::nnet1::Nnet::SetHistoryState(a1[24], a2, a3, a4, v8);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;

  v7 = a1 - 16;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 - 16) + 296))(a1 - 16);
  return kaldi::nnet1::Nnet::SetHistoryState(*(_QWORD *)(v7 + 192), a2, a3, a4, v8);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetInternalBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::nnet1::Nnet::SetInternalBoundary(*(_QWORD *)(a1 + 192), a2, a3);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetInternalBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::nnet1::Nnet::SetInternalBoundary(*(_QWORD *)(a1 + 176), a2, a3);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::Check(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  _QWORD *v39;
  _QWORD v40[34];

  if (!*(_BYTE *)(this + 668))
  {
    v5 = this;
    if (*(int *)(this + 12) < 1 || (v6 = *(_DWORD *)(this + 8), v6 <= 0))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 531);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"component is not initialized, max attention is ", 47);
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", source state dimension is ", 28);
      std::ostream::operator<<();
    }
    else if (v6 == *(_DWORD *)(*(_QWORD *)(this + 176) + 8))
    {
      v7 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(this + 192), a2, a3, a4, a5);
      v12 = *(_QWORD *)(v5 + 184);
      if (v7 == *(_DWORD *)(v12 + 8))
      {
        if (*(_DWORD *)(*(_QWORD *)(v5 + 176) + 12) == *(_DWORD *)(v12 + 12))
        {
          v13 = *(_DWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 24) + 8) + *(_DWORD *)(v5 + 8);
          if (v13 == kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(v5 + 192), v8, v9, v10, v11))
          {
            v18 = *(_DWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 24) + 12);
            this = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(v5 + 192), v14, v15, v16, v17);
            if (v18 == (_DWORD)this)
            {
              *(_BYTE *)(v5 + 668) = 1;
              return this;
            }
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 558);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"the internal network has output dim ", 36);
            kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(v5 + 192), v35, v36, v37, v38);
            v39 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" , but the component has output dim ", 36);
            std::ostream::operator<<();
          }
          else
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 551);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"the internal network takes input dimension ", 43);
            kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(v5 + 192), v27, v28, v29, v30);
            v31 = (_QWORD *)std::ostream::operator<<();
            v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" , that is not equal the sum of ", 32);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"source vector dimension ", 24);
            v33 = (_QWORD *)std::ostream::operator<<();
            v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" and ", 5);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"target input network dim ", 25);
            std::ostream::operator<<();
          }
        }
        else
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 546);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"the source and target dot transform has different output dim ", 61);
          v26 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" vs ", 4);
          std::ostream::operator<<();
        }
      }
      else
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 541);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"the internal recurrent network has output dim ", 46);
        kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(v5 + 192), v21, v22, v23, v24);
        v25 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" , but the target dot transform has input dim ", 46);
        std::ostream::operator<<();
      }
    }
    else
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-global-recurrent-attention.cc", 536);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"source state dimension is ", 26);
      v20 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" , but the source dot transform has input dim ", 46);
      std::ostream::operator<<();
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
  }
  return this;
}

uint64_t `non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::Check(kaldi::nnet1::GlobalRecurrentAttention *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::GlobalRecurrentAttention::Check((uint64_t)this - 16, a2, a3, a4, a5);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void kaldi::nnet1::GatedRecurrentUnit::InitData(unsigned int *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t *v10;
  uint64_t v12;
  BOOL v16;
  float *v17;
  BOOL v18;
  BOOL v19;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  std::string *v28;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  int inited;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  unint64_t v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  _QWORD *v52;
  __int128 *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  float *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  uint64_t v62;
  void *__p;
  void *v64;
  __int128 v65;
  uint64_t v66;
  std::string v67;
  std::string v68;
  float v69;
  float v70;
  int v71;
  int v72[3];

  *(float *)&v71 = -2.0;
  v72[0] = -1;
  v69 = 0.1;
  v70 = 2.0;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v68);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)a1[39], &v67);
  v65 = 0uLL;
  v66 = 0;
  while ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)&v65, v6, v7);
    if ((SHIBYTE(v66) & 0x80000000) == 0)
    {
      v10 = (uint64_t *)&v65;
      switch(HIBYTE(v66))
      {
        case 9:
          goto LABEL_90;
        case 0xA:
          if ((_QWORD)v65 != 0x61654D736169423CLL || WORD4(v65) != 15982)
            goto LABEL_118;
          goto LABEL_70;
        case 0xB:
          if ((_QWORD)v65 == 0x6E6152736169423CLL && *(_QWORD *)((char *)&v65 + 3) == 0x3E65676E61527361)
            goto LABEL_83;
          goto LABEL_89;
        case 0xC:
          goto LABEL_109;
        case 0xD:
          if ((_QWORD)v65 == 0x74536D617261503CLL && *(_QWORD *)((char *)&v65 + 5) == 0x3E7665646474536DLL)
            goto LABEL_77;
          if (HIBYTE(v66) == 9)
            goto LABEL_90;
          goto LABEL_108;
        case 0xF:
          v31 = (_QWORD)v65 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v65 + 7) == 0x3E66656F43657461;
          v17 = (float *)(a1 + 152);
          if (v31)
            goto LABEL_100;
          if (HIBYTE(v66) == 12)
            goto LABEL_109;
LABEL_89:
          if (HIBYTE(v66) != 9)
            goto LABEL_118;
LABEL_90:
          v32 = (_QWORD)v65 == 0x6D726F4E78614D3CLL && BYTE8(v65) == 62;
          v17 = (float *)(a1 + 153);
          if (!v32)
          {
            if (HIBYTE(v66) != 9)
              goto LABEL_118;
            v33 = (_QWORD)v65 == 0x6461724778614D3CLL && BYTE8(v65) == 62;
            v17 = (float *)(a1 + 38);
            if (!v33)
              goto LABEL_118;
          }
          goto LABEL_100;
        case 0x12:
          if ((_QWORD)v65 == 0x6E6569646172473CLL
            && *((_QWORD *)&v65 + 1) == 0x7079546D726F4E74
            && (unsigned __int16)v66 == 15973)
          {
            goto LABEL_115;
          }
LABEL_108:
          if (HIBYTE(v66) != 12)
            goto LABEL_118;
LABEL_109:
          if ((_QWORD)v65 != 0x536D6F646E61523CLL || DWORD2(v65) != 1046766949)
            goto LABEL_118;
          goto LABEL_114;
        case 0x13:
          goto LABEL_61;
        default:
          goto LABEL_118;
      }
    }
    v12 = *((_QWORD *)&v65 + 1);
    if (*((_QWORD *)&v65 + 1) == 10 && *(_QWORD *)v65 == 0x61654D736169423CLL && *(_WORD *)(v65 + 8) == 15982)
    {
LABEL_70:
      v17 = (float *)&v71;
LABEL_100:
      kaldi::ReadBasicType<float>(a2, 0, v17, v8, v9);
      goto LABEL_117;
    }
    if (*((_QWORD *)&v65 + 1) == 11)
    {
      if (*(_QWORD *)v65 == 0x6E6152736169423CLL && *(_QWORD *)(v65 + 3) == 0x3E65676E61527361)
      {
LABEL_83:
        v17 = &v70;
        goto LABEL_100;
      }
      v12 = *((_QWORD *)&v65 + 1);
    }
    if (v12 == 13)
    {
      if (*(_QWORD *)v65 == 0x74536D617261503CLL && *(_QWORD *)(v65 + 5) == 0x3E7665646474536DLL)
      {
LABEL_77:
        v17 = &v69;
        goto LABEL_100;
      }
      v12 = *((_QWORD *)&v65 + 1);
    }
    if (v12 == 15)
    {
      v16 = *(_QWORD *)v65 == 0x61526E7261654C3CLL && *(_QWORD *)(v65 + 7) == 0x3E66656F43657461;
      v17 = (float *)(a1 + 152);
      if (v16)
        goto LABEL_100;
      v12 = *((_QWORD *)&v65 + 1);
    }
    if (v12 == 9)
    {
      v18 = *(_QWORD *)v65 == 0x6D726F4E78614D3CLL && *(_BYTE *)(v65 + 8) == 62;
      v17 = (float *)(a1 + 153);
      if (v18)
        goto LABEL_100;
      v12 = *((_QWORD *)&v65 + 1);
      if (*((_QWORD *)&v65 + 1) == 9)
      {
        v19 = *(_QWORD *)v65 == 0x6461724778614D3CLL && *(_BYTE *)(v65 + 8) == 62;
        v17 = (float *)(a1 + 38);
        if (v19)
          goto LABEL_100;
        if ((v66 & 0x8000000000000000) == 0)
          goto LABEL_118;
      }
    }
    if (v12 == 18)
    {
      if (*(_QWORD *)v65 == 0x6E6569646172473CLL
        && *(_QWORD *)(v65 + 8) == 0x7079546D726F4E74
        && *(_WORD *)(v65 + 16) == 15973)
      {
LABEL_115:
        v28 = &v67;
        goto LABEL_116;
      }
      v12 = *((_QWORD *)&v65 + 1);
    }
    if (v12 == 12)
    {
      if (*(_QWORD *)v65 == 0x536D6F646E61523CLL && *(_DWORD *)(v65 + 8) == 1046766949)
      {
LABEL_114:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v72, v8, v9);
        goto LABEL_117;
      }
      v12 = *((_QWORD *)&v65 + 1);
    }
    if (v12 != 19)
      goto LABEL_118;
    v10 = (uint64_t *)v65;
LABEL_61:
    v23 = *v10;
    v24 = v10[1];
    v25 = *(uint64_t *)((char *)v10 + 11);
    v26 = v23 == 0x61725474696E493CLL && v24 == 0x79546D726F66736ELL;
    if (!v26 || v25 != 0x3E657079546D726FLL)
    {
LABEL_118:
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v65, "</Component>"))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v61, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 72);
        v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Invalid token ", 14);
        if (v66 >= 0)
          v53 = &v65;
        else
          v53 = (__int128 *)v65;
        if (v66 >= 0)
          v54 = HIBYTE(v66);
        else
          v54 = *((_QWORD *)&v65 + 1);
        v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
        v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)". Allowed tokens: ", 18);
        v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"(BiasMean|BiasRange|ParamStddev|LearnRateCoef|MaxNorm|MaxGrad|InitTransformType", 79);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"|GradientNormType|RandomSeed)", 29);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v61);
      }
      break;
    }
    v28 = &v68;
LABEL_116:
    kaldi::ReadToken(a2, 0, (uint64_t)v28, v8, v9);
LABEL_117:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  kaldi::nnet1::GatedRecurrentUnit::AllocateParams((kaldi::nnet1::GatedRecurrentUnit *)a1);
  inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v68);
  a1[39] = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v67);
  if (v72[0] >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v72[0]);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v61, a3);
  kaldi::nnet1::RandMatrix(a3, (kaldi::GaussRandomNumber *)v61, inited, (uint64_t)(a1 + 40), v69);
  kaldi::nnet1::RandMatrix(a3, (kaldi::GaussRandomNumber *)v61, inited, (uint64_t)(a1 + 52), v69);
  kaldi::nnet1::RandMatrix(a3, (kaldi::GaussRandomNumber *)v61, inited, (uint64_t)(a1 + 64), v69);
  v38 = a1[80];
  v59 = 0;
  v60 = 0;
  v58 = 0;
  kaldi::Vector<float>::Resize((void **)&v58, v38, 0, v39, v40);
  v44 = v59;
  if ((int)v59 >= 1)
  {
    v45 = 0;
    do
    {
      v46 = *(float *)&v71;
      v47 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v41, v42, v43);
      v44 = v59;
      if (v45 >= v59)
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v43);
      v48 = v46 + (v47 + -0.5) * v70;
      v58[v45++] = v48;
    }
    while ((uint64_t)v45 < (int)v44);
  }
  kaldi::CuVector<float>::Resize((uint64_t)(a1 + 76), v44, 1u, v42, v43);
  kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 76, (uint64_t)&v58, v49, v50, v51);
  (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 128))(a1);
  kaldi::Vector<float>::Destroy((uint64_t)&v58);
  if (__p)
  {
    v64 = __p;
    operator delete(__p);
  }
  v58 = (float *)&v62;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  if (SHIBYTE(v66) < 0)
    operator delete((void *)v65);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
}

void sub_1DE487B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  if (*(char *)(v13 - 169) < 0)
    operator delete(*(void **)(v13 - 192));
  if (*(char *)(v13 - 145) < 0)
    operator delete(*(void **)(v13 - 168));
  if (*(char *)(v13 - 121) < 0)
    operator delete(*(void **)(v13 - 144));
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::GatedRecurrentUnit::AllocateParams(kaldi::nnet1::GatedRecurrentUnit *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  void *__p[2];
  unsigned __int8 v10;
  _QWORD v11[35];

  kaldi::CuMatrix<float>::Resize((uint64_t)this + 160, (3 * *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12)), *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8), 0, 0);
  v2 = *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12);
  kaldi::CuMatrix<float>::Resize((uint64_t)this + 208, (2 * v2), v2, 0, 0);
  v3 = *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12);
  kaldi::CuMatrix<float>::Resize((uint64_t)this + 256, v3, v3, 0, 0);
  kaldi::CuVector<float>::Resize((uint64_t)this + 304, (3 * *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12)), 0, v4, v5);
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 663, 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Allocated memory for the parameters: ", 37);
    (*(void (**)(void **__return_ptr, kaldi::nnet1::GatedRecurrentUnit *))(*(_QWORD *)this + 232))(__p, this);
    if ((v10 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v10 & 0x80u) == 0)
      v8 = v10;
    else
      v8 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
    if ((char)v10 < 0)
      operator delete(__p[0]);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11);
  }
}

void sub_1DE487D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RandMatrix(kaldi::UniformRandomNumber *a1, kaldi::GaussRandomNumber *a2, int a3, uint64_t a4, float a5)
{
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  unint64_t i;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;

  kaldi::Matrix<float>::Matrix((uint64_t)&v23, *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 16), 0, 0);
  v10 = 0;
LABEL_2:
  if ((uint64_t)v10 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)&v23))
  {
    for (i = 0; ; ++i)
    {
      if ((uint64_t)i >= (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v23))
      {
        ++v10;
        goto LABEL_2;
      }
      if (a3)
      {
        if (a3 == 2)
        {
          kaldi::GaussRandomNumber::Rand(a2, 0, v14, v15, v16);
          if (v10 >= v25 || i >= v24)
            goto LABEL_25;
          v18 = v23 + 4 * (int)v10 * v26;
          v19 = v20 * a5;
        }
        else
        {
          if (a3 != 1)
            continue;
          v17 = kaldi::UniformRandomNumber::RandUniform(a1, 0, v14, v15, v16);
          if (v10 >= v25 || i >= v24)
            goto LABEL_25;
          v18 = v23 + 4 * (int)v10 * v26;
          v19 = (v17 + -0.5) * (float)(a5 + a5);
        }
      }
      else
      {
        if (v10 >= v25 || i >= v24)
LABEL_25:
          kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v16);
        v18 = v23 + 4 * (int)v10 * v26;
        if (v10 == i)
          v19 = 1.0;
        else
          v19 = 0.0;
      }
      *(float *)(v18 + 4 * i) = v19;
    }
  }
  kaldi::CuMatrixBase<float>::CopyFromMat(a4, (uint64_t)&v23, 111, v11, v12);
  return kaldi::Matrix<float>::~Matrix((uint64_t)&v23);
}

void sub_1DE487F00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::InitData(_QWORD *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  kaldi::nnet1::GatedRecurrentUnit::InitData((unsigned int *)((char *)a1 + *(_QWORD *)(*a1 - 112)), a2, a3);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::ReadData(float *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v14;
  BOOL v15;
  float *v16;
  BOOL v17;
  __int128 *v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  const char *v27;
  double v28;
  _QWORD *v30;
  __int128 *v31;
  uint64_t v32;
  void *__p[2];
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  while (kaldi::Peek(a2, a3) == 60)
  {
    v35 = 0uLL;
    v36 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v35, v8, v9);
    if (SHIBYTE(v36) < 0)
    {
      v14 = *((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1) == 9)
      {
        v17 = *(_QWORD *)v35 == 0x6D726F4E78614D3CLL && *(_BYTE *)(v35 + 8) == 62;
        v16 = a1 + 153;
        if (!v17)
        {
          v14 = *((_QWORD *)&v35 + 1);
LABEL_27:
          if (v14 == 18)
          {
            if (*(_QWORD *)v35 == 0x6E6569646172473CLL
              && *(_QWORD *)(v35 + 8) == 0x7079546D726F4E74
              && *(_WORD *)(v35 + 16) == 15973)
            {
              goto LABEL_59;
            }
            v14 = *((_QWORD *)&v35 + 1);
          }
          if (v14 != 9)
            goto LABEL_62;
          v20 = (__int128 *)v35;
LABEL_49:
          v23 = *(_QWORD *)v20;
          v24 = *((unsigned __int8 *)v20 + 8);
          v25 = v23 == 0x6461724778614D3CLL && v24 == 62;
          v16 = a1 + 38;
          if (!v25)
            goto LABEL_62;
        }
      }
      else
      {
        if (*((_QWORD *)&v35 + 1) != 15)
          goto LABEL_27;
        v15 = *(_QWORD *)v35 == 0x61526E7261654C3CLL && *(_QWORD *)(v35 + 7) == 0x3E66656F43657461;
        v16 = a1 + 152;
        if (!v15)
          goto LABEL_27;
      }
    }
    else
    {
      if (HIBYTE(v36) != 9)
      {
        if (HIBYTE(v36) == 15)
        {
          v21 = (_QWORD)v35 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v35 + 7) == 0x3E66656F43657461;
          v16 = a1 + 152;
          if (!v21)
          {
LABEL_62:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 115);
            v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
            if (v36 >= 0)
              v31 = &v35;
            else
              v31 = (__int128 *)v35;
            if (v36 >= 0)
              v32 = HIBYTE(v36);
            else
              v32 = *((_QWORD *)&v35 + 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
          }
          goto LABEL_54;
        }
        if (HIBYTE(v36) != 18)
          goto LABEL_62;
        if ((_QWORD)v35 == 0x6E6569646172473CLL
          && *((_QWORD *)&v35 + 1) == 0x7079546D726F4E74
          && (unsigned __int16)v36 == 15973)
        {
LABEL_59:
          __p[0] = 0;
          __p[1] = 0;
          v34 = 0;
          kaldi::ReadToken(a2, a3, (uint64_t)__p, v10, v11);
          *((_DWORD *)a1 + 39) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
          if (SHIBYTE(v34) < 0)
            operator delete(__p[0]);
          goto LABEL_55;
        }
LABEL_47:
        if (HIBYTE(v36) != 9)
          goto LABEL_62;
        v20 = &v35;
        goto LABEL_49;
      }
      v22 = (_QWORD)v35 == 0x6D726F4E78614D3CLL && BYTE8(v35) == 62;
      v16 = a1 + 153;
      if (!v22)
        goto LABEL_47;
    }
LABEL_54:
    kaldi::ReadBasicType<float>(a2, a3, v16, v10, v11);
LABEL_55:
    if (SHIBYTE(v36) < 0)
      operator delete((void *)v35);
  }
  kaldi::CuMatrix<float>::Read((uint64_t)(a1 + 40), a2, a3, a4);
  kaldi::CuMatrix<float>::Read((uint64_t)(a1 + 52), a2, a3, a4);
  kaldi::CuMatrix<float>::Read((uint64_t)(a1 + 64), a2, a3, a4);
  v28 = kaldi::CuVector<float>::Read((uint64_t)(a1 + 76), a2, a3, v26, v27);
  return (*(uint64_t (**)(float *, double))(*(_QWORD *)a1 + 128))(a1, v28);
}

void sub_1DE4882D8()
{
  JUMPOUT(0x1DE4882E0);
}

uint64_t `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::GatedRecurrentUnit::ReadData((float *)((char *)a1 + *(_QWORD *)(*a1 - 176)), a2, a3, a4);
}

_QWORD *kaldi::nnet1::GatedRecurrentUnit::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  std::string __p;

  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v10, v11);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v12, v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v14, v15);
  return kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
}

void sub_1DE4883E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *`virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::WriteConfig(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::GatedRecurrentUnit::WriteConfig((uint64_t)a1 + *(_QWORD *)(*a1 - 184), a2, a3, a4, a5);
}

void kaldi::nnet1::GatedRecurrentUnit::WriteData(_DWORD *a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;

  v8 = (uint64_t)(a1 + 40);
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 128))(a1);
  (*(void (**)(_DWORD *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 168))(a1, a2, a3);
  kaldi::CuMatrixBase<float>::Write(v8, a2, a3, a4);
  kaldi::CuMatrixBase<float>::Write((uint64_t)(a1 + 52), a2, a3, a4);
  kaldi::CuMatrixBase<float>::Write((uint64_t)(a1 + 64), a2, a3, a4);
  kaldi::CuVectorBase<float>::Write(a1 + 76, a2, a3, v9, v10);
}

void `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::WriteData(_QWORD *a1, _QWORD *a2, uint64_t a3, int a4)
{
  kaldi::nnet1::GatedRecurrentUnit::WriteData((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 120)), a2, a3, a4);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::NumParams(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return (*((_DWORD *)this + 44) * *((_DWORD *)this + 45)
                      + *((_DWORD *)this + 56) * *((_DWORD *)this + 57)
                      + *((_DWORD *)this + 68) * *((_DWORD *)this + 69)
                      + *((_DWORD *)this + 80));
}

uint64_t `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::NumParams(kaldi::nnet1::GatedRecurrentUnit *this)
{
  _DWORD *v1;

  v1 = (_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192));
  return (v1[44] * v1[45] + v1[56] * v1[57] + v1[68] * v1[69] + v1[80]);
}

_DWORD *kaldi::nnet1::GatedRecurrentUnit::GetParams(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void *v27;
  uint64_t v28;
  uint64_t v29;

  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 184))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  v10 = a1[44] * a1[45];
  v12 = a1[56];
  v11 = a1[57];
  v13 = a1[69];
  v14 = a1[68];
  v28 = 0;
  v29 = 0;
  if (v10 > *(_DWORD *)(a2 + 8))
    goto LABEL_6;
  v15 = v12 * v11;
  v27 = *(void **)a2;
  LODWORD(v28) = v10;
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v27, (uint64_t)(a1 + 40), v7, v8, v9);
  v28 = 0;
  v29 = 0;
  v18 = v15 + v10;
  if ((v15 + v10) > *(_DWORD *)(a2 + 8))
    goto LABEL_6;
  v19 = v14 * v13;
  v27 = (void *)(*(_QWORD *)a2 + 4 * v10);
  LODWORD(v28) = v15;
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v27, (uint64_t)(a1 + 52), v16, v17, v9);
  v28 = 0;
  v29 = 0;
  v22 = v19 + v18;
  if ((v19 + v18) > *(_DWORD *)(a2 + 8)
    || (v27 = (void *)(*(_QWORD *)a2 + 4 * v18),
        LODWORD(v28) = v19,
        kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v27, (uint64_t)(a1 + 64), v20, v21, v9),
        v25 = a1[80],
        v28 = 0,
        v29 = 0,
        (v25 + v22) > *(_DWORD *)(a2 + 8)))
  {
LABEL_6:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
  }
  v27 = (void *)(*(_QWORD *)a2 + 4 * v22);
  LODWORD(v28) = v25;
  return kaldi::CuVectorBase<float>::CopyToVec<float>(a1 + 76, (uint64_t)&v27, v23, v24, v9);
}

_DWORD *`virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::GetParams(_QWORD *a1, uint64_t a2)
{
  return kaldi::nnet1::GatedRecurrentUnit::GetParams((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 200)), a2);
}

_DWORD *kaldi::nnet1::GatedRecurrentUnit::SetParams(_DWORD *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 184))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0xAC, "wei_src.Dim() == NumParams()", v5);
  v6 = a1[44] * a1[45];
  v8 = a1[56];
  v7 = a1[57];
  v9 = a1[69];
  v10 = a1[68];
  v20 = 0;
  v21 = 0;
  if (v6 > *(_DWORD *)(a2 + 8))
    goto LABEL_7;
  v11 = v8 * v7;
  v19 = *(char **)a2;
  LODWORD(v20) = v6;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 40), &v19);
  v20 = 0;
  v21 = 0;
  v12 = v11 + v6;
  if ((v11 + v6) > *(_DWORD *)(a2 + 8))
    goto LABEL_7;
  v13 = v10 * v9;
  v19 = (char *)(*(_QWORD *)a2 + 4 * v6);
  LODWORD(v20) = v11;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 52), &v19);
  v20 = 0;
  v21 = 0;
  v14 = v13 + v12;
  if ((v13 + v12) > *(_DWORD *)(a2 + 8)
    || (v19 = (char *)(*(_QWORD *)a2 + 4 * v12),
        LODWORD(v20) = v13,
        kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)(a1 + 64), &v19),
        v17 = a1[80],
        v20 = 0,
        v21 = 0,
        (v17 + v14) > *(_DWORD *)(a2 + 8)))
  {
LABEL_7:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v5);
  }
  v19 = (char *)(*(_QWORD *)a2 + 4 * v14);
  LODWORD(v20) = v17;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(a1 + 76, (uint64_t)&v19, v15, v16, v5);
}

_DWORD *`virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::SetParams(_QWORD *a1, uint64_t a2)
{
  return kaldi::nnet1::GatedRecurrentUnit::SetParams((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 208)), a2);
}

float kaldi::nnet1::GatedRecurrentUnit::SumParams(kaldi::nnet1::GatedRecurrentUnit *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  float v16;

  v6 = kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 160, a2, a3, a4, a5);
  v11 = v6 + kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 208, v7, v8, v9, v10);
  v16 = v11 + kaldi::CuMatrixBase<float>::Sum((uint64_t)this + 256, v12, v13, v14, v15);
  return v16 + kaldi::CuVectorBase<float>::Sum((uint64_t)this + 304);
}

float `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::SumParams(kaldi::nnet1::GatedRecurrentUnit *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::GatedRecurrentUnit::SumParams((kaldi::nnet1::GatedRecurrentUnit *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 224)), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::GetGradient(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;

  v8 = (const void *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
  if (v8)
  else
    v9 = 0;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, _QWORD, _QWORD))(*v9 + 296))(v9, a2, a3, 0, 0);
  v10 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 184))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v10, 0, v11, v12);
  v15 = a1[44] * a1[45];
  v17 = a1[56];
  v16 = a1[57];
  v18 = a1[69];
  v19 = a1[68];
  v36 = 0;
  v37 = 0;
  if (v15 > *(_DWORD *)(a4 + 8))
    goto LABEL_9;
  v35 = *(char **)a4;
  LODWORD(v36) = v15;
  kaldi::Matrix<float>::Matrix<float>((uint64_t)&v32, v9[81], 111, v13, v14);
  kaldi::VectorBase<float>::CopyRowsFromMat(&v35, (uint64_t)&v32);
  v20 = v17 * v16;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v32);
  v33 = 0;
  v34 = 0;
  v23 = v20 + v15;
  if ((v20 + v15) > *(_DWORD *)(a4 + 8))
    goto LABEL_9;
  v24 = v19 * v18;
  v32 = *(_QWORD *)a4 + 4 * v15;
  LODWORD(v33) = v20;
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v32, v9[84], v21, v22, v14);
  v33 = 0;
  v34 = 0;
  v27 = v24 + v23;
  if ((v24 + v23) > *(_DWORD *)(a4 + 8)
    || (v32 = *(_QWORD *)a4 + 4 * v23,
        LODWORD(v33) = v24,
        kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v32, v9[87], v25, v26, v14),
        v30 = a1[80],
        v33 = 0,
        v34 = 0,
        (v30 + v27) > *(_DWORD *)(a4 + 8)))
  {
LABEL_9:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v14);
  }
  v32 = *(_QWORD *)a4 + 4 * v27;
  LODWORD(v33) = v30;
  kaldi::CuVectorBase<float>::CopyToVec<float>((_DWORD *)v9[90], (uint64_t)&v32, v28, v29, v14);
  return (*(uint64_t (**)(uint64_t *))(*v9 + 8))(v9);
}

void sub_1DE488A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::GatedRecurrentUnit::GetGradient((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 240)), a2, a3, a4);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::PerturbParams(kaldi::nnet1::GatedRecurrentUnit *this, float a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  _QWORD v17[4];
  _BYTE v18[48];

  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v18, *((unsigned int *)this + 45), *((unsigned int *)this + 44), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v18);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, (uint64_t)v18, 111, v4, v5, a2, 1.0);
  kaldi::CuMatrix<float>::Resize((uint64_t)v18, *((unsigned int *)this + 57), *((unsigned int *)this + 56), 1u, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v18);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 208, (uint64_t)v18, 111, v6, v7, a2, 1.0);
  kaldi::CuMatrix<float>::Resize((uint64_t)v18, *((unsigned int *)this + 69), *((unsigned int *)this + 68), 1u, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v18);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 256, (uint64_t)v18, 111, v8, v9, a2, 1.0);
  v10 = *((unsigned int *)this + 80);
  v17[0] = &unk_1EA92DFD8;
  memset(&v17[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v17, v10, 1u, v11, v12);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v17);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 304, (uint64_t)v17, v13, v14, v15, a2, 1.0);
  v17[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v17);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v18);
}

void sub_1DE488BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::PerturbParams(kaldi::nnet1::GatedRecurrentUnit *this, float a2)
{
  return kaldi::nnet1::GatedRecurrentUnit::PerturbParams((kaldi::nnet1::GatedRecurrentUnit *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 232)), a2);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::Info(kaldi::nnet1::GatedRecurrentUnit *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  void **v19;
  uint64_t v20;
  void *__p[2];
  unsigned __int8 v23;
  void *v24[2];
  unsigned __int8 v25;
  void *v26[2];
  unsigned __int8 v27;
  void *v28[2];
  unsigned __int8 v29;
  _QWORD v30[11];
  char v31;
  uint64_t v32;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
  (*(void (**)(kaldi::nnet1::GatedRecurrentUnit *, _QWORD *, _QWORD))(*(_QWORD *)this + 168))(this, v30, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\n Input weights:", 16);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 160);
  if ((v29 & 0x80u) == 0)
    v3 = v28;
  else
    v3 = (void **)v28[0];
  if ((v29 & 0x80u) == 0)
    v4 = v29;
  else
    v4 = (uint64_t)v28[1];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n Gate recurrent weights:", 25);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 208);
  if ((v27 & 0x80u) == 0)
    v7 = v26;
  else
    v7 = (void **)v26[0];
  if ((v27 & 0x80u) == 0)
    v8 = v27;
  else
    v8 = (uint64_t)v26[1];
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n Activation recurrent weights:", 31);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 256);
  if ((v25 & 0x80u) == 0)
    v11 = v24;
  else
    v11 = (void **)v24[0];
  if ((v25 & 0x80u) == 0)
    v12 = v25;
  else
    v12 = (uint64_t)v24[1];
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n Bias:", 7);
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)this + 76, v15, v16, v17, v18);
  if ((v23 & 0x80u) == 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  if ((v23 & 0x80u) == 0)
    v20 = v23;
  else
    v20 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v19, v20);
  if ((char)v23 < 0)
    operator delete(__p[0]);
  if ((char)v25 < 0)
    operator delete(v24[0]);
  if ((char)v27 < 0)
    operator delete(v26[0]);
  if ((char)v29 < 0)
    operator delete(v28[0]);
  std::stringbuf::str();
  v30[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v30[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v31 < 0)
    operator delete((void *)v30[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v32);
}

void sub_1DE488DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::Info(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return kaldi::nnet1::GatedRecurrentUnit::Info((kaldi::nnet1::GatedRecurrentUnit *)((char *)this
                                                                                   + *(_QWORD *)(*(_QWORD *)this - 80)));
}

void kaldi::nnet1::GatedRecurrentUnit::InfoGradient(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, _QWORD *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  void **v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  void **v43;
  std::string::size_type v44;
  std::string *v45;
  __int128 v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  std::string *v49;
  std::string *v50;
  std::string::size_type size;
  std::string *v52;
  __int128 v53;
  void *__p[2];
  unsigned __int8 v56;
  void *v57[2];
  unsigned __int8 v58;
  void *v59[2];
  unsigned __int8 v60;
  void *v61[2];
  unsigned __int8 v62;
  void *v63[2];
  unsigned __int8 v64;
  void *v65[2];
  unsigned __int8 v66;
  void *v67[2];
  unsigned __int8 v68;
  void *v69[2];
  unsigned __int8 v70;
  void *v71[2];
  unsigned __int8 v72;
  void *v73[2];
  unsigned __int8 v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  __int128 v85;
  int64_t v86;
  int v87;
  std::string v88;

  if (*((_BYTE *)this + 640))
  {
    memset(&v88, 0, sizeof(v88));
    v87 = 0;
    if (*((int *)this + 20) >= 1)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v75, "\n For batch ");
        kaldi::nnet1::ToString<int>();
        if ((v74 & 0x80u) == 0)
          v3 = v73;
        else
          v3 = (void **)v73[0];
        if ((v74 & 0x80u) == 0)
          v4 = v74;
        else
          v4 = (std::string::size_type)v73[1];
        v5 = std::string::append(&v75, (const std::string::value_type *)v3, v4);
        v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v76.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v71, ": ");
        if ((v72 & 0x80u) == 0)
          v7 = v71;
        else
          v7 = (void **)v71[0];
        if ((v72 & 0x80u) == 0)
          v8 = v72;
        else
          v8 = (std::string::size_type)v71[1];
        v9 = std::string::append(&v76, (const std::string::value_type *)v7, v8);
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v77.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v69, "\n  Input weights gradient: ");
        if ((v70 & 0x80u) == 0)
          v11 = v69;
        else
          v11 = (void **)v69[0];
        if ((v70 & 0x80u) == 0)
          v12 = v70;
        else
          v12 = (std::string::size_type)v69[1];
        v13 = std::string::append(&v77, (const std::string::value_type *)v11, v12);
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v78.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::MomentStatistics<float>(*((_QWORD *)this + 81) + 48 * v87);
        if ((v68 & 0x80u) == 0)
          v15 = v67;
        else
          v15 = (void **)v67[0];
        if ((v68 & 0x80u) == 0)
          v16 = v68;
        else
          v16 = (std::string::size_type)v67[1];
        v17 = std::string::append(&v78, (const std::string::value_type *)v15, v16);
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v79.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v65, "\n  Gate recurrent weights gradient: ");
        if ((v66 & 0x80u) == 0)
          v19 = v65;
        else
          v19 = (void **)v65[0];
        if ((v66 & 0x80u) == 0)
          v20 = v66;
        else
          v20 = (std::string::size_type)v65[1];
        v21 = std::string::append(&v79, (const std::string::value_type *)v19, v20);
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v80.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::MomentStatistics<float>(*((_QWORD *)this + 84) + 48 * v87);
        if ((v64 & 0x80u) == 0)
          v23 = v63;
        else
          v23 = (void **)v63[0];
        if ((v64 & 0x80u) == 0)
          v24 = v64;
        else
          v24 = (std::string::size_type)v63[1];
        v25 = std::string::append(&v80, (const std::string::value_type *)v23, v24);
        v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v81.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v61, "\n  Activation recurrent weights gradient: ");
        if ((v62 & 0x80u) == 0)
          v27 = v61;
        else
          v27 = (void **)v61[0];
        if ((v62 & 0x80u) == 0)
          v28 = v62;
        else
          v28 = (std::string::size_type)v61[1];
        v29 = std::string::append(&v81, (const std::string::value_type *)v27, v28);
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v82.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::MomentStatistics<float>(*((_QWORD *)this + 87) + 48 * v87);
        if ((v60 & 0x80u) == 0)
          v31 = v59;
        else
          v31 = (void **)v59[0];
        if ((v60 & 0x80u) == 0)
          v32 = v60;
        else
          v32 = (std::string::size_type)v59[1];
        v33 = std::string::append(&v82, (const std::string::value_type *)v31, v32);
        v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v83.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v57, "\n  Bias gradient: ");
        if ((v58 & 0x80u) == 0)
          v35 = v57;
        else
          v35 = (void **)v57[0];
        if ((v58 & 0x80u) == 0)
          v36 = v58;
        else
          v36 = (std::string::size_type)v57[1];
        v37 = std::string::append(&v83, (const std::string::value_type *)v35, v36);
        v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v84.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::MomentStatistics<float>((_DWORD *)(*((_QWORD *)this + 90) + 32 * v87), v39, v40, v41, v42);
        if ((v56 & 0x80u) == 0)
          v43 = __p;
        else
          v43 = (void **)__p[0];
        if ((v56 & 0x80u) == 0)
          v44 = v56;
        else
          v44 = (std::string::size_type)__p[1];
        v45 = std::string::append(&v84, (const std::string::value_type *)v43, v44);
        v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v86 = v45->__r_.__value_.__r.__words[2];
        v85 = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        if (v86 >= 0)
          v47 = (const std::string::value_type *)&v85;
        else
          v47 = (const std::string::value_type *)v85;
        if (v86 >= 0)
          v48 = HIBYTE(v86);
        else
          v48 = *((_QWORD *)&v85 + 1);
        std::string::append(&v88, v47, v48);
        if (SHIBYTE(v86) < 0)
          operator delete((void *)v85);
        if ((char)v56 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v84.__r_.__value_.__l.__data_);
        if ((char)v58 < 0)
          operator delete(v57[0]);
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v83.__r_.__value_.__l.__data_);
        if ((char)v60 < 0)
          operator delete(v59[0]);
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v82.__r_.__value_.__l.__data_);
        if ((char)v62 < 0)
          operator delete(v61[0]);
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v81.__r_.__value_.__l.__data_);
        if ((char)v64 < 0)
          operator delete(v63[0]);
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v80.__r_.__value_.__l.__data_);
        if ((char)v66 < 0)
          operator delete(v65[0]);
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v79.__r_.__value_.__l.__data_);
        if ((char)v68 < 0)
          operator delete(v67[0]);
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v78.__r_.__value_.__l.__data_);
        if ((char)v70 < 0)
          operator delete(v69[0]);
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v77.__r_.__value_.__l.__data_);
        if ((char)v72 < 0)
          operator delete(v71[0]);
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v76.__r_.__value_.__l.__data_);
        if ((char)v74 < 0)
          operator delete(v73[0]);
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v75.__r_.__value_.__l.__data_);
        ++v87;
      }
      while (v87 < *((_DWORD *)this + 20));
    }
    v49 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v85, "\n");
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = &v88;
    else
      v50 = (std::string *)v88.__r_.__value_.__r.__words[0];
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    else
      size = v88.__r_.__value_.__l.__size_;
    v52 = std::string::insert(v49, 0, (const std::string::value_type *)v50, size);
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v52->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v86) < 0)
      operator delete((void *)v85);
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v88.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  Gradients are uninitialized");
  }
}

void sub_1DE489444(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1DE489608()
{
  JUMPOUT(0x1DE489530);
}

void sub_1DE489610()
{
  JUMPOUT(0x1DE489540);
}

void sub_1DE489618()
{
  JUMPOUT(0x1DE489550);
}

void sub_1DE489620()
{
  JUMPOUT(0x1DE489560);
}

void sub_1DE489628()
{
  JUMPOUT(0x1DE489570);
}

void sub_1DE489630()
{
  JUMPOUT(0x1DE489580);
}

void sub_1DE489638()
{
  JUMPOUT(0x1DE489590);
}

void sub_1DE489640()
{
  JUMPOUT(0x1DE4895A0);
}

void sub_1DE489648()
{
  JUMPOUT(0x1DE4895B0);
}

void sub_1DE489650()
{
  JUMPOUT(0x1DE4895C0);
}

void sub_1DE489658()
{
  JUMPOUT(0x1DE4895D0);
}

void sub_1DE489660()
{
  JUMPOUT(0x1DE4895E0);
}

uint64_t kaldi::nnet1::ToString<int>()
{
  _QWORD v1[11];
  char v2;
  uint64_t v3;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v1[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v2 < 0)
    operator delete((void *)v1[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v3);
}

void sub_1DE489724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::InfoGradient(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, _QWORD *a2@<X8>)
{
  kaldi::nnet1::GatedRecurrentUnit::InfoGradient((kaldi::nnet1::GatedRecurrentUnit *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)), a2);
}

void kaldi::nnet1::GatedRecurrentUnit::InfoPropagate(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, std::string *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string *v38;
  std::string::size_type size;
  std::string *v40;
  void *__p[2];
  unsigned __int8 v43;
  void *v44[2];
  unsigned __int8 v45;
  void *v46[2];
  unsigned __int8 v47;
  void *v48[2];
  unsigned __int8 v49;
  void *v50[2];
  unsigned __int8 v51;
  void *v52[2];
  unsigned __int8 v53;
  void *v54[2];
  unsigned __int8 v55;
  void *v56[2];
  unsigned __int8 v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  __int128 v66;
  int64_t v67;
  int v68;
  std::string v69;

  memset(&v69, 0, sizeof(v69));
  v68 = 0;
  if (*((int *)this + 20) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v58, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v57 & 0x80u) == 0)
        v3 = v56;
      else
        v3 = (void **)v56[0];
      if ((v57 & 0x80u) == 0)
        v4 = v57;
      else
        v4 = (std::string::size_type)v56[1];
      v5 = std::string::append(&v58, (const std::string::value_type *)v3, v4);
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, ": ");
      if ((v55 & 0x80u) == 0)
        v7 = v54;
      else
        v7 = (void **)v54[0];
      if ((v55 & 0x80u) == 0)
        v8 = v55;
      else
        v8 = (std::string::size_type)v54[1];
      v9 = std::string::append(&v59, (const std::string::value_type *)v7, v8);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v52, "\n  Gates values: ");
      if ((v53 & 0x80u) == 0)
        v11 = v52;
      else
        v11 = (void **)v52[0];
      if ((v53 & 0x80u) == 0)
        v12 = v53;
      else
        v12 = (std::string::size_type)v52[1];
      v13 = std::string::append(&v60, (const std::string::value_type *)v11, v12);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((_QWORD *)this + 46) + 48 * v68);
      if ((v51 & 0x80u) == 0)
        v15 = v50;
      else
        v15 = (void **)v50[0];
      if ((v51 & 0x80u) == 0)
        v16 = v51;
      else
        v16 = (std::string::size_type)v50[1];
      v17 = std::string::append(&v61, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v48, "\n  Candidate activations: ");
      if ((v49 & 0x80u) == 0)
        v19 = v48;
      else
        v19 = (void **)v48[0];
      if ((v49 & 0x80u) == 0)
        v20 = v49;
      else
        v20 = (std::string::size_type)v48[1];
      v21 = std::string::append(&v62, (const std::string::value_type *)v19, v20);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((_QWORD *)this + 49) + 48 * v68);
      if ((v47 & 0x80u) == 0)
        v23 = v46;
      else
        v23 = (void **)v46[0];
      if ((v47 & 0x80u) == 0)
        v24 = v47;
      else
        v24 = (std::string::size_type)v46[1];
      v25 = std::string::append(&v63, (const std::string::value_type *)v23, v24);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v44, "\n  Activations: ");
      if ((v45 & 0x80u) == 0)
        v27 = v44;
      else
        v27 = (void **)v44[0];
      if ((v45 & 0x80u) == 0)
        v28 = v45;
      else
        v28 = (std::string::size_type)v44[1];
      v29 = std::string::append(&v64, (const std::string::value_type *)v27, v28);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((_QWORD *)this + 61) + 48 * v68);
      if ((v43 & 0x80u) == 0)
        v31 = __p;
      else
        v31 = (void **)__p[0];
      if ((v43 & 0x80u) == 0)
        v32 = v43;
      else
        v32 = (std::string::size_type)__p[1];
      v33 = std::string::append(&v65, (const std::string::value_type *)v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v67 = v33->__r_.__value_.__r.__words[2];
      v66 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v67 >= 0)
        v35 = (const std::string::value_type *)&v66;
      else
        v35 = (const std::string::value_type *)v66;
      if (v67 >= 0)
        v36 = HIBYTE(v67);
      else
        v36 = *((_QWORD *)&v66 + 1);
      std::string::append(&v69, v35, v36);
      if (SHIBYTE(v67) < 0)
        operator delete((void *)v66);
      if ((char)v43 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if ((char)v45 < 0)
        operator delete(v44[0]);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if ((char)v47 < 0)
        operator delete(v46[0]);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      if ((char)v49 < 0)
        operator delete(v48[0]);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      if ((char)v51 < 0)
        operator delete(v50[0]);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if ((char)v53 < 0)
        operator delete(v52[0]);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      if ((char)v55 < 0)
        operator delete(v54[0]);
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      if ((char)v57 < 0)
        operator delete(v56[0]);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      ++v68;
    }
    while (v68 < *((_DWORD *)this + 20));
  }
  v37 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v66, "\n");
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = &v69;
  else
    v38 = (std::string *)v69.__r_.__value_.__r.__words[0];
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  else
    size = v69.__r_.__value_.__l.__size_;
  v40 = std::string::insert(v37, 0, (const std::string::value_type *)v38, size);
  *a2 = *v40;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v67) < 0)
    operator delete((void *)v66);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
}

void sub_1DE489BEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1DE489D70()
{
  JUMPOUT(0x1DE489CD8);
}

void sub_1DE489D78()
{
  JUMPOUT(0x1DE489CE8);
}

void sub_1DE489D80()
{
  JUMPOUT(0x1DE489CF8);
}

void sub_1DE489D88()
{
  JUMPOUT(0x1DE489D08);
}

void sub_1DE489D90()
{
  JUMPOUT(0x1DE489D18);
}

void sub_1DE489D98()
{
  JUMPOUT(0x1DE489D28);
}

void sub_1DE489DA0()
{
  JUMPOUT(0x1DE489D38);
}

void sub_1DE489DA8()
{
  JUMPOUT(0x1DE489D48);
}

void `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::InfoPropagate(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::GatedRecurrentUnit::InfoPropagate((kaldi::nnet1::GatedRecurrentUnit *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 96)), a2);
}

void kaldi::nnet1::GatedRecurrentUnit::InfoBackPropagate(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, std::string *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string *v38;
  std::string::size_type size;
  std::string *v40;
  void *__p[2];
  unsigned __int8 v43;
  void *v44[2];
  unsigned __int8 v45;
  void *v46[2];
  unsigned __int8 v47;
  void *v48[2];
  unsigned __int8 v49;
  void *v50[2];
  unsigned __int8 v51;
  void *v52[2];
  unsigned __int8 v53;
  void *v54[2];
  unsigned __int8 v55;
  void *v56[2];
  unsigned __int8 v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  __int128 v66;
  int64_t v67;
  int v68;
  std::string v69;

  memset(&v69, 0, sizeof(v69));
  v68 = 0;
  if (*((int *)this + 20) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v58, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v57 & 0x80u) == 0)
        v3 = v56;
      else
        v3 = (void **)v56[0];
      if ((v57 & 0x80u) == 0)
        v4 = v57;
      else
        v4 = (std::string::size_type)v56[1];
      v5 = std::string::append(&v58, (const std::string::value_type *)v3, v4);
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, ": ");
      if ((v55 & 0x80u) == 0)
        v7 = v54;
      else
        v7 = (void **)v54[0];
      if ((v55 & 0x80u) == 0)
        v8 = v55;
      else
        v8 = (std::string::size_type)v54[1];
      v9 = std::string::append(&v59, (const std::string::value_type *)v7, v8);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v52, "\n  Gates diff: ");
      if ((v53 & 0x80u) == 0)
        v11 = v52;
      else
        v11 = (void **)v52[0];
      if ((v53 & 0x80u) == 0)
        v12 = v53;
      else
        v12 = (std::string::size_type)v52[1];
      v13 = std::string::append(&v60, (const std::string::value_type *)v11, v12);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((_QWORD *)this + 70) + 48 * v68);
      if ((v51 & 0x80u) == 0)
        v15 = v50;
      else
        v15 = (void **)v50[0];
      if ((v51 & 0x80u) == 0)
        v16 = v51;
      else
        v16 = (std::string::size_type)v50[1];
      v17 = std::string::append(&v61, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v48, "\n  Candidate activation diff: ");
      if ((v49 & 0x80u) == 0)
        v19 = v48;
      else
        v19 = (void **)v48[0];
      if ((v49 & 0x80u) == 0)
        v20 = v49;
      else
        v20 = (std::string::size_type)v48[1];
      v21 = std::string::append(&v62, (const std::string::value_type *)v19, v20);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((_QWORD *)this + 67) + 48 * v68);
      if ((v47 & 0x80u) == 0)
        v23 = v46;
      else
        v23 = (void **)v46[0];
      if ((v47 & 0x80u) == 0)
        v24 = v47;
      else
        v24 = (std::string::size_type)v46[1];
      v25 = std::string::append(&v63, (const std::string::value_type *)v23, v24);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v64.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v44, "\n  Activation diff: ");
      if ((v45 & 0x80u) == 0)
        v27 = v44;
      else
        v27 = (void **)v44[0];
      if ((v45 & 0x80u) == 0)
        v28 = v45;
      else
        v28 = (std::string::size_type)v44[1];
      v29 = std::string::append(&v64, (const std::string::value_type *)v27, v28);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*((_QWORD *)this + 64) + 48 * v68);
      if ((v43 & 0x80u) == 0)
        v31 = __p;
      else
        v31 = (void **)__p[0];
      if ((v43 & 0x80u) == 0)
        v32 = v43;
      else
        v32 = (std::string::size_type)__p[1];
      v33 = std::string::append(&v65, (const std::string::value_type *)v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v67 = v33->__r_.__value_.__r.__words[2];
      v66 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v67 >= 0)
        v35 = (const std::string::value_type *)&v66;
      else
        v35 = (const std::string::value_type *)v66;
      if (v67 >= 0)
        v36 = HIBYTE(v67);
      else
        v36 = *((_QWORD *)&v66 + 1);
      std::string::append(&v69, v35, v36);
      if (SHIBYTE(v67) < 0)
        operator delete((void *)v66);
      if ((char)v43 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if ((char)v45 < 0)
        operator delete(v44[0]);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if ((char)v47 < 0)
        operator delete(v46[0]);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      if ((char)v49 < 0)
        operator delete(v48[0]);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      if ((char)v51 < 0)
        operator delete(v50[0]);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if ((char)v53 < 0)
        operator delete(v52[0]);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      if ((char)v55 < 0)
        operator delete(v54[0]);
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      if ((char)v57 < 0)
        operator delete(v56[0]);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      ++v68;
    }
    while (v68 < *((_DWORD *)this + 20));
  }
  v37 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v66, "\n");
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v38 = &v69;
  else
    v38 = (std::string *)v69.__r_.__value_.__r.__words[0];
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  else
    size = v69.__r_.__value_.__l.__size_;
  v40 = std::string::insert(v37, 0, (const std::string::value_type *)v38, size);
  *a2 = *v40;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v67) < 0)
    operator delete((void *)v66);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
}

void sub_1DE48A26C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1DE48A3F0()
{
  JUMPOUT(0x1DE48A358);
}

void sub_1DE48A3F8()
{
  JUMPOUT(0x1DE48A368);
}

void sub_1DE48A400()
{
  JUMPOUT(0x1DE48A378);
}

void sub_1DE48A408()
{
  JUMPOUT(0x1DE48A388);
}

void sub_1DE48A410()
{
  JUMPOUT(0x1DE48A398);
}

void sub_1DE48A418()
{
  JUMPOUT(0x1DE48A3A8);
}

void sub_1DE48A420()
{
  JUMPOUT(0x1DE48A3B8);
}

void sub_1DE48A428()
{
  JUMPOUT(0x1DE48A3C8);
}

void `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::InfoBackPropagate(kaldi::nnet1::GatedRecurrentUnit *this@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::GatedRecurrentUnit::InfoBackPropagate((kaldi::nnet1::GatedRecurrentUnit *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 104)), a2);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::PropagateFnc(kaldi::nnet1::GatedRecurrentUnit *this, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  int v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  void *v74;
  __int128 v75;
  __int128 v76;
  void *v77;
  __int128 v78;
  __int128 v79;
  void *v80;
  __int128 v81;
  __int128 v82;
  void *v83;
  _QWORD v84[4];
  void *v85;
  __int128 v86;
  __int128 v87;
  void *v88;
  _QWORD v89[4];
  _QWORD v90[5];
  void *v91;
  _OWORD v92[2];

  v5 = *(unsigned int *)(a2 + 20);
  v6 = *((unsigned int *)this + 24);
  v69 = ((int)v5 / (int)v6);
  if ((int)v5 % (int)v6)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x126, "batch_size % num_utts == 0", a5);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v91, "PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 296, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v91, (uint64_t)"Running forward propagation for batch size = ", 45);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v91);
  }
  v14 = *(void **)(a3 + 32);
  kaldi::nnet1::GatedRecurrentUnit::AllocateForwardBuffers(this, a4, v5, v14);
  v16 = *((_QWORD *)this + 105);
  if (*((_QWORD *)this + 106) == v16 || (v17 = *(_DWORD *)(v16 + 32 * a4 + 16), v17 < 1))
  {
    v65 = 0;
  }
  else
  {
    if (v17 != (_DWORD)v5)
      kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x12F, "boundary_[batch_index].Dim() == batch_size", v15);
    v18 = *((_QWORD *)this + 108) + 48 * a4;
    *(_QWORD *)(v18 + 32) = v14;
    v65 = 1;
    kaldi::CuMatrix<float>::Resize(v18, v6, *(unsigned int *)(*((_QWORD *)this + 1) + 48 * a4 + 16), 1u, 0);
  }
  v19 = *((_QWORD *)this + 43) + 48 * a4;
  v20 = (unsigned int *)(*((_QWORD *)this + 46) + 48 * a4);
  v21 = *((_QWORD *)this + 49);
  v71 = *((_QWORD *)this + 55);
  v22 = *((_QWORD *)this + 58);
  v23 = *((_QWORD *)this + 61);
  kaldi::CuMatrixBase<float>::AddMatMat(v19, a2, CblasNoTrans, (uint64_t)this + 160, (const char *)0x70, 1.0, 0.0);
  kaldi::CuMatrixBase<float>::AddVecToRows(v19, (uint64_t)this + 304, v24, v25, v26, 1.0, 1.0);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v91, v19, 0, *(_DWORD *)(v19 + 20), 0, 2 * *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12));
  v73 = (uint64_t)v20;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v20, (uint64_t)&v91, 111, v27, v28);
  v91 = &unk_1EA926508;
  memset(v92, 0, sizeof(v92));
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v91);
  v29 = *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v91, v19, 0, *(_DWORD *)(v19 + 20), (const char *)(2 * v29), v29);
  v68 = v21 + 48 * a4;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)v68, (uint64_t)&v91, 111, v30, v31);
  v91 = &unk_1EA926508;
  memset(v92, 0, sizeof(v92));
  v70 = v23 + 48 * a4;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v91);
  v67 = v22 + 48 * a4;
  kaldi::CuMatrixBase<float>::Set(v67, v32, v33, v34, v35, 1.0);
  if ((int)v69 >= 1)
  {
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = v71 + 48 * a4;
    v72 = (char *)this + 12;
    v66 = v41;
    v42 = 0uLL;
    do
    {
      v92[0] = v42;
      v92[1] = v42;
      v91 = &unk_1EA926508;
      *(_OWORD *)&v90[1] = v42;
      *(_OWORD *)&v90[3] = v42;
      v90[0] = &unk_1EA926508;
      if (v40)
      {
        v43 = a4;
        if (v65)
        {
          kaldi::CuMatrixBase<float>::SetZero(*((_QWORD *)this + 108) + 48 * a4);
          v44 = *((_QWORD *)this + 108) + 48 * a4;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v88, v44, 0, *(_DWORD *)(v44 + 20), 0, *(_DWORD *)&v72[*(_QWORD *)(*(_QWORD *)this - 24)]);
          *(_OWORD *)((char *)v92 + 8) = *(_OWORD *)&v89[1];
          *(_QWORD *)&v92[0] = v89[0];
          *((_QWORD *)&v92[1] + 1) = v89[3];
          v88 = &unk_1EA926508;
          memset(v89, 0, sizeof(v89));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v88);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v88, v70, v39 - v6, v6, 0, *(_DWORD *)(v70 + 16));
          v46 = *((_QWORD *)this + 105) + 32 * a4;
          *(_QWORD *)&v87 = 0;
          v86 = 0uLL;
          v85 = &unk_1EA926538;
          if ((v6 + v39) > *(_DWORD *)(v46 + 16))
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v45);
          *(_QWORD *)&v86 = *(_QWORD *)(v46 + 8) + v38;
          DWORD2(v86) = v6;
          *(_QWORD *)&v87 = *(_QWORD *)(v46 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v91, (uint64_t)&v88, (uint64_t)&v85, 1, v45);
          goto LABEL_18;
        }
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v88, v70, v39 - v6, v6, 0, *(_DWORD *)(v70 + 16));
      }
      else
      {
        v43 = a4;
        v47 = *((_QWORD *)this + 1) + 48 * a4;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v88, v47, 0, *(_DWORD *)(v47 + 20), 0, *(_DWORD *)&v72[*(_QWORD *)(*(_QWORD *)this - 24)]);
      }
      *(_OWORD *)((char *)v92 + 8) = *(_OWORD *)&v89[1];
      *(_QWORD *)&v92[0] = v89[0];
      *((_QWORD *)&v92[1] + 1) = v89[3];
LABEL_18:
      v88 = &unk_1EA926508;
      memset(v89, 0, sizeof(v89));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v88);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v88, v73, v39, v6, 0, *(_DWORD *)(v73 + 16));
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v88, (uint64_t)&v91, CblasNoTrans, (uint64_t)this + 208, (const char *)0x70, 1.0, 1.0);
      v88 = &unk_1EA926508;
      memset(v89, 0, sizeof(v89));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v88);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v88, v73, v39, v6, 0, *(_DWORD *)&v72[*(_QWORD *)(*(_QWORD *)this - 24)]);
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v88, (uint64_t)&v88, v48, v49, v50);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v85, v73, v39, v6, (const char *)*(unsigned int *)&v72[*(_QWORD *)(*(_QWORD *)this - 24)], *(_DWORD *)&v72[*(_QWORD *)(*(_QWORD *)this - 24)]);
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v85, (uint64_t)&v85, v51, v52, v53);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v83, v66, v39, v6, 0, *(_DWORD *)(v66 + 16));
      v90[1] = v84[0];
      *(_OWORD *)&v90[2] = *(_OWORD *)&v84[1];
      v90[4] = v84[3];
      v83 = &unk_1EA926508;
      memset(v84, 0, sizeof(v84));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v83);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)v90, (uint64_t)&v85, 111, (uint64_t)&v91, (const char *)0x6F, 1.0, 0.0);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v83, v68, v39, v6, 0, *(_DWORD *)(v68 + 16));
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v83, (uint64_t)v90, CblasNoTrans, (uint64_t)this + 256, (const char *)0x6F, 1.0, 1.0);
      kaldi::CuMatrixBase<float>::Tanh((uint64_t)&v83, (uint64_t)&v83, v54, v55, v56);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v80, v67, v39, v6, 0, *(_DWORD *)(v67 + 16));
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v80, (uint64_t)&v88, 111, v57, v58, -1.0, 1.0);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v77, v70, v39, v6, 0, *(_DWORD *)(v70 + 16));
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v77, (uint64_t)&v80, 111, (uint64_t)&v91, (const char *)0x6F, 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v77, (uint64_t)&v88, 111, (uint64_t)&v83, (const char *)0x6F, 1.0, 1.0);
      v59 = *((_QWORD *)this + 52) + 48 * v43;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v74, v59, v39, v6, 0, *(_DWORD *)(v59 + 16));
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v74, (uint64_t)&v83, 111, v60, v61);
      kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v74, (uint64_t)&v91, 111, v62, v63, -1.0, 1.0);
      v74 = &unk_1EA926508;
      v75 = 0u;
      v76 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v74);
      v77 = &unk_1EA926508;
      v78 = 0u;
      v79 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v77);
      v80 = &unk_1EA926508;
      v81 = 0u;
      v82 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v80);
      v83 = &unk_1EA926508;
      memset(v84, 0, sizeof(v84));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v83);
      v85 = &unk_1EA926508;
      v86 = 0u;
      v87 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v85);
      v88 = &unk_1EA926508;
      memset(v89, 0, sizeof(v89));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v88);
      v90[0] = &unk_1EA926508;
      memset(&v90[1], 0, 32);
      kaldi::CuMatrixBase<float>::~CuMatrixBase(v90);
      v91 = &unk_1EA926508;
      memset(v92, 0, sizeof(v92));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v91);
      v42 = 0uLL;
      ++v40;
      v39 += v6;
      v38 += 4 * (int)v6;
    }
    while (v69 != v40);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a3, v70, 111, v36, v37);
  return kaldi::nnet1::GatedRecurrentUnit::SaveLastState(this, a4);
}

void sub_1DE48AD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  uint64_t v67;

  *(_OWORD *)(v67 + 168) = 0u;
  *(_OWORD *)(v67 + 184) = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a67);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GatedRecurrentUnit::AllocateForwardBuffers(kaldi::nnet1::GatedRecurrentUnit *this, int a2, uint64_t a3, void *a4)
{
  _QWORD *v8;
  _QWORD v9[35];

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateForwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 744, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating forward buffers for batch ", 37);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 43) + 48 * a2, a3, (3 * *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12)), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 46) + 48 * a2, a3, (2 * *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12)), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 49) + 48 * a2, a3, *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 52) + 48 * a2, a3, *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 55) + 48 * a2, a3, *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 58) + 48 * a2, a3, *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 61) + 48 * a2, a3, *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12), 0, 0);
  *(_QWORD *)(*((_QWORD *)this + 43) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 46) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 49) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 52) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 55) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 58) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 61) + 48 * a2 + 32) = a4;
}

void sub_1DE48B114(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::SaveLastState(kaldi::nnet1::GatedRecurrentUnit *this, int a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  const char *v7;
  void *v9;
  __int128 v10;
  __int128 v11;

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v9, "SaveLastState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 852, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Saving last activation batch ", 29);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v9);
  }
  v4 = *((_QWORD *)this + 61) + 48 * a2;
  v5 = (unsigned int *)(*((_QWORD *)this + 1) + 48 * a2);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v9, v4, *(_DWORD *)(v4 + 20) - *((_DWORD *)this + 24), *((_DWORD *)this + 24), 0, *(_DWORD *)(v4 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v5, (uint64_t)&v9, 111, v6, v7);
  v9 = &unk_1EA926508;
  v10 = 0u;
  v11 = 0u;
  return kaldi::CuMatrixBase<float>::~CuMatrixBase(&v9);
}

void sub_1DE48B20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, __int128 a11, __int128 a12)
{
  a10 = &unk_1EA926508;
  a11 = 0u;
  a12 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a10);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  return kaldi::nnet1::GatedRecurrentUnit::PropagateFnc((kaldi::nnet1::GatedRecurrentUnit *)((char *)a1 + *(_QWORD *)(*a1 - 128)), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  void *v8;
  const char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  unsigned int v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[2];
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[2];
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  if (*(_DWORD *)(a1 + 96) != 1)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x17C, "ropts_.num_sequences == 1", a5);
  v8 = *(void **)(a3 + 24);
  kaldi::nnet1::GatedRecurrentUnit::AllocateForwardBuffers((kaldi::nnet1::GatedRecurrentUnit *)a1, 0, 1, v8);
  v10 = *(_QWORD *)(a1 + 840);
  if (*(_QWORD *)(a1 + 848) != v10)
  {
    v11 = *(_DWORD *)(v10 + 16);
    if (v11 >= 1)
    {
      if (v11 != 1)
        kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x181, "boundary_[0].Dim() == 1", v9);
      v12 = *(_QWORD *)(a1 + 864);
      *(_QWORD *)(v12 + 32) = v8;
      kaldi::CuMatrix<float>::Resize(v12, 1, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 16), 1u, 0);
    }
  }
  v13 = *(_QWORD *)(a1 + 344);
  v95 = 0;
  v96 = 0;
  v93 = &unk_1EA926538;
  v94 = 0;
  v94 = *(_QWORD *)(v13 + 8);
  LODWORD(v95) = *(_DWORD *)(v13 + 16);
  v96 = *(_QWORD *)(v13 + 32);
  v14 = *(_QWORD *)(a1 + 368);
  v91 = 0;
  v92 = 0;
  v89 = &unk_1EA926538;
  v90 = 0;
  v90 = *(_QWORD *)(v14 + 8);
  LODWORD(v91) = *(_DWORD *)(v14 + 16);
  v92 = *(_QWORD *)(v14 + 32);
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v93, a1 + 160, CblasNoTrans, a2, v9, 1.0, 0.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)&v93, a1 + 304, v15, v16, v17, 1.0, 1.0);
  v21 = 2 * *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  v87 = 0;
  v88 = 0;
  v85 = &unk_1EA926538;
  v86 = 0;
  if (v21 > v95)
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v20);
  v86 = v94;
  LODWORD(v87) = v21;
  v88 = v96;
  kaldi::CuVectorBase<float>::CopyFromVec(&v89, (uint64_t)&v85, v18, v19, v20);
  v23 = *(_QWORD *)(a1 + 8);
  if (!*(_DWORD *)(v23 + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v22);
  v24 = *(_QWORD *)(v23 + 8);
  v25 = *(_DWORD *)(v23 + 16);
  v26 = *(_QWORD *)(v23 + 32);
  v85 = &unk_1EA926538;
  v86 = v24;
  v88 = v26;
  v87 = v25;
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v89, a1 + 208, CblasNoTrans, (uint64_t)&v85, v22, 1.0, 1.0);
  v30 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  v83 = 0;
  v84 = 0;
  v81 = &unk_1EA926538;
  v82 = 0;
  if (v30 > v91)
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v29);
  v82 = v90;
  LODWORD(v83) = v30;
  v84 = v92;
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)&v81, (uint64_t)&v81, v27, v28, v29);
  v34 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  v79 = 0;
  v80 = 0;
  v77 = &unk_1EA926538;
  v78 = 0;
  if (v91 < 2 * v34)
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v33);
  v78 = v90 + 4 * v34;
  LODWORD(v79) = v34;
  v80 = v92;
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)&v77, (uint64_t)&v77, v31, v32, v33);
  v35 = *(_QWORD *)(a1 + 440);
  v75 = 0;
  v36 = *(_QWORD *)(v35 + 8);
  v74[0] = &unk_1EA926538;
  v74[1] = v36;
  LODWORD(v75) = *(_DWORD *)(v35 + 16);
  v76 = *(_QWORD *)(v35 + 32);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v74, (uint64_t)&v77, (uint64_t)&v85, v37, v38, 1.0, 0.0);
  v42 = *(_QWORD *)(a1 + 392);
  v72 = 0;
  v43 = *(_QWORD *)(v42 + 8);
  v71[0] = &unk_1EA926538;
  v71[1] = v43;
  LODWORD(v72) = *(_DWORD *)(v42 + 16);
  v73 = *(_QWORD *)(v42 + 32);
  v44 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  v69 = 0;
  v67 = &unk_1EA926538;
  if (3 * v44 > v95)
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v41);
  v68 = v94 + 8 * v44;
  LODWORD(v69) = v44;
  v70 = v96;
  kaldi::CuVectorBase<float>::CopyFromVec(v71, (uint64_t)&v67, v39, v40, v41);
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)v71, a1 + 256, CblasNoTrans, (uint64_t)v74, v45, 1.0, 1.0);
  kaldi::CuVectorBase<float>::Tanh((uint64_t)v71, (uint64_t)v71, v46, v47, v48);
  v49 = *(_QWORD *)(a1 + 464);
  v69 = 0;
  v50 = *(_QWORD *)(v49 + 8);
  v67 = &unk_1EA926538;
  v68 = v50;
  LODWORD(v69) = *(_DWORD *)(v49 + 16);
  v70 = *(_QWORD *)(v49 + 32);
  kaldi::CuVectorBase<float>::Set((uint64_t)&v67, 1.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)&v67, (uint64_t)&v81, v51, v52, v53, -1.0, 1.0);
  v54 = *(_QWORD *)(a1 + 488);
  v65 = 0;
  v55 = *(_QWORD *)(v54 + 8);
  v64[0] = &unk_1EA926538;
  v64[1] = v55;
  LODWORD(v65) = *(_DWORD *)(v54 + 16);
  v66 = *(_QWORD *)(v54 + 32);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v64, (uint64_t)&v67, (uint64_t)&v85, v56, v57, 1.0, 0.0);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v64, (uint64_t)&v81, (uint64_t)v71, v58, v59, 1.0, 1.0);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)a3, (uint64_t)v64, v60, v61, v62);
  return kaldi::nnet1::GatedRecurrentUnit::SaveLastState((kaldi::nnet1::GatedRecurrentUnit *)a1, 0);
}

uint64_t `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::GatedRecurrentUnit::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 136), a2, a3, a4, a5);
}

double kaldi::nnet1::GatedRecurrentUnit::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  int v11;
  const char *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  int v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  int v49;
  double result;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  __int128 v62;
  __int128 v63;
  void *v64;
  __int128 v65;
  __int128 v66;
  void *v67;
  __int128 v68;
  __int128 v69;
  void *v70;
  __int128 v71;
  __int128 v72;
  void *v73;
  __int128 v74;
  __int128 v75;
  void *v76;
  __int128 v77;
  __int128 v78;
  void *v79;
  __int128 v80;
  __int128 v81;
  void *v82;
  __int128 v83;
  __int128 v84;
  void *v85;
  __int128 v86;
  __int128 v87;
  void *v88;
  __int128 v89;
  __int128 v90;

  v10 = *(unsigned int *)(a2 + 20);
  v11 = *(_DWORD *)(a1 + 96);
  kaldi::nnet1::GatedRecurrentUnit::EnsureTrainingBuffers((uint64_t *)a1);
  if ((int)v10 % v11)
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x1C0, "batch_size % num_utts == 0", v12);
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v88, "BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 450, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"Running backward propagation for batch size = ", 46);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", which contains ", 17);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" frames each from ", 18);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v88);
  }
  v52 = (int)v10 / v11;
  if ((int)v10 / v11 < 2)
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x1C4, "frames_in_batch > 1 && \"GRU backprop will not work with batches of single frames.\"", v12);
  v51 = a5;
  if (a5)
    v16 = a5;
  else
    v16 = a4;
  kaldi::nnet1::GatedRecurrentUnit::AllocateBackwardBuffers((kaldi::nnet1::GatedRecurrentUnit *)a1, a6, v10, *(void **)(v16 + 32));
  v17 = *(_QWORD *)(a1 + 368) + 48 * a6;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v88, v17, 0, *(_DWORD *)(v17 + 20), 0, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v85, v17, 0, *(_DWORD *)(v17 + 20), (const char *)*(unsigned int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12), *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12));
  v18 = a6;
  v59 = *(_QWORD *)(a1 + 392);
  v19 = 3 * a6;
  v54 = *(_QWORD *)(a1 + 464);
  v20 = *(_QWORD *)(a1 + 488);
  v21 = *(_QWORD *)(a1 + 512);
  v22 = *(_QWORD *)(a1 + 560) + 16 * v19;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v82, v22, 0, *(_DWORD *)(v22 + 20), 0, *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12));
  v56 = v22;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v79, v22, 0, *(_DWORD *)(v22 + 20), (const char *)*(unsigned int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12), *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12));
  v23 = (unsigned int *)(v21 + 16 * v19);
  v24 = *(_QWORD *)(a1 + 536);
  v25 = *(_QWORD *)(a1 + 584);
  v60 = (uint64_t)v23;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(v23, a4, 111, v26, v27);
  v28 = v10 - v11;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v76, (uint64_t)&v79, v11, v28, 0, SDWORD2(v80));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v73, (uint64_t)&v85, v11, v28, 0, SDWORD2(v86));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v70, v20 + 16 * v19, 0, v28, 0, *(_DWORD *)(v20 + 16 * v19 + 16));
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v76, (uint64_t)&v73, (uint64_t)&v70, v29, v30);
  v70 = &unk_1EA926508;
  v71 = 0u;
  v72 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v70);
  v73 = &unk_1EA926508;
  v74 = 0u;
  v75 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v73);
  v76 = &unk_1EA926508;
  v77 = 0u;
  v78 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v76);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v76, (uint64_t)&v79, 0, v11, 0, SDWORD2(v80));
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v76);
  v76 = &unk_1EA926508;
  v77 = 0u;
  v78 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v76);
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v82, (uint64_t)&v88, *(_QWORD *)(a1 + 416) + 48 * (int)v18, v31, v32);
  v33 = 3 * v18;
  v58 = v24 + 48 * v18;
  kaldi::CuMatrixBase<float>::DiffTanh(v58, v59 + 16 * v19, (uint64_t)&v88, v34, v35);
  v36 = 0;
  v37 = v52;
  v57 = v11 * (v52 - 1);
  v53 = v54 + 16 * v19;
  v55 = v11 * v52;
  v38 = v25 + 16 * v33;
  do
  {
    v39 = v57 + v36;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v76, v60, v57 + v36, v11, 0, *(_DWORD *)(v60 + 16));
    if (--v37 < v52 - 1)
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v73, v60, v55 + v36, v11, 0, *(_DWORD *)(v60 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v70, v53, v55 + v36, v11, 0, *(_DWORD *)(v53 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v67, v38, v55 + v36, v11, 0, *(_DWORD *)(v38 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v64, (uint64_t)&v85, v55 + v36, v11, 0, SDWORD2(v86));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v61, v56, v55 + v36, v11, 0, *(_DWORD *)(v56 + 16));
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v76, (uint64_t)&v73, 111, (uint64_t)&v70, (const char *)0x6F, 1.0, 1.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v76, (uint64_t)&v67, 111, (uint64_t)&v64, (const char *)0x6F, 1.0, 1.0);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v76, (uint64_t)&v61, CblasNoTrans, a1 + 208, (const char *)0x6F, 1.0, 1.0);
      v61 = &unk_1EA926508;
      v62 = 0u;
      v63 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v61);
      v64 = &unk_1EA926508;
      v65 = 0u;
      v66 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v64);
      v67 = &unk_1EA926508;
      v68 = 0u;
      v69 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v67);
      v70 = &unk_1EA926508;
      v71 = 0u;
      v72 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v70);
      v73 = &unk_1EA926508;
      v74 = 0u;
      v75 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v73);
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v73, (uint64_t)&v82, v39, v11, 0, SDWORD2(v83));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v73, (uint64_t)&v76, v40, v41, v42);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v70, v58, v39, v11, 0, *(_DWORD *)(v58 + 16));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v70, (uint64_t)&v76, v43, v44, v45);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v67, v38, v39, v11, 0, *(_DWORD *)(v38 + 16));
    kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v67, (uint64_t)&v70, CblasNoTrans, a1 + 256, (const char *)0x6F, 1.0, 0.0);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v64, (uint64_t)&v79, v39, v11, 0, SDWORD2(v80));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v64, (uint64_t)&v67, v46, v47, v48);
    v64 = &unk_1EA926508;
    v65 = 0u;
    v66 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v64);
    v67 = &unk_1EA926508;
    v68 = 0u;
    v69 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v67);
    v70 = &unk_1EA926508;
    v71 = 0u;
    v72 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v70);
    v73 = &unk_1EA926508;
    v74 = 0u;
    v75 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v73);
    v76 = &unk_1EA926508;
    v77 = 0u;
    v78 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v76);
    v36 -= v11;
  }
  while (v37 > 0);
  if (v51)
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v76, a1 + 160, 0, 2 * *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12), 0, *(_DWORD *)(a1 + 176));
    v49 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v73, a1 + 160, 2 * v49, v49, 0, *(_DWORD *)(a1 + 176));
    kaldi::CuMatrixBase<float>::AddMatMat(v51, v56, CblasNoTrans, (uint64_t)&v76, (const char *)0x6F, 1.0, 0.0);
    kaldi::CuMatrixBase<float>::AddMatMat(v51, v58, CblasNoTrans, (uint64_t)&v73, (const char *)0x6F, 1.0, 1.0);
    v73 = &unk_1EA926508;
    v74 = 0u;
    v75 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v73);
    v76 = &unk_1EA926508;
    v77 = 0u;
    v78 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v76);
  }
  v79 = &unk_1EA926508;
  v80 = 0u;
  v81 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v79);
  v82 = &unk_1EA926508;
  v83 = 0u;
  v84 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v82);
  v85 = &unk_1EA926508;
  v86 = 0u;
  v87 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v85);
  v88 = &unk_1EA926508;
  v89 = 0u;
  v90 = 0u;
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v88).n128_u64[0];
  return result;
}

void sub_1DE48BF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,__int128 a50,__int128 a51,void *a52,__int128 a53,__int128 a54,void *a55,__int128 a56,__int128 a57,void *a58,__int128 a59,__int128 a60,void *a61,__int128 a62,__int128 a63)
{
  a49 = &unk_1EA926508;
  a50 = 0u;
  a51 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a49);
  a52 = &unk_1EA926508;
  a53 = 0u;
  a54 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a52);
  a55 = &unk_1EA926508;
  a56 = 0u;
  a57 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a55);
  a58 = &unk_1EA926508;
  a59 = 0u;
  a60 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a58);
  a61 = &unk_1EA926508;
  a62 = 0u;
  a63 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a61);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::nnet1::GatedRecurrentUnit::EnsureTrainingBuffers(uint64_t *this)
{
  uint64_t *v1;

  if (!*((_BYTE *)this + 337))
  {
    v1 = this;
    std::vector<kaldi::CuMatrix<float>>::resize(this + 64, *((int *)this + 20));
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 67, *((int *)v1 + 20));
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 70, *((int *)v1 + 20));
    this = std::vector<kaldi::CuMatrix<float>>::resize(v1 + 73, *((int *)v1 + 20));
    *((_BYTE *)v1 + 337) = 1;
  }
  return this;
}

void kaldi::nnet1::GatedRecurrentUnit::AllocateBackwardBuffers(kaldi::nnet1::GatedRecurrentUnit *this, int a2, uint64_t a3, void *a4)
{
  _QWORD *v8;
  _QWORD v9[35];

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateBackwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 763, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating backward buffers for batch ", 38);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 64) + 48 * a2, a3, *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 67) + 48 * a2, a3, *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 70) + 48 * a2, a3, (2 * *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12)), 0, 0);
  kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 73) + 48 * a2, a3, *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12), 0, 0);
  *(_QWORD *)(*((_QWORD *)this + 64) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 67) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 70) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 73) + 48 * a2 + 32) = a4;
}

void sub_1DE48C4E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

double `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return kaldi::nnet1::GatedRecurrentUnit::BackpropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 144), a2, a3, a4, a5, a6);
}

void kaldi::nnet1::GatedRecurrentUnit::AccumGradients(kaldi::nnet1::GatedRecurrentUnit *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v7;
  int v8;
  int v9;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  int v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  void *v43;
  __int128 v44;
  __int128 v45;
  void *v46;
  __int128 v47;
  __int128 v48;

  if (*((_DWORD *)this + 20) <= (int)a5)
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x20E, "batch_index < ropts_.num_subbatches", a5);
  v7 = *((_DWORD *)this + 24);
  v8 = *(_DWORD *)(a2 + 20);
  if (v8 % v7)
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x212, "batch_size % num_utts == 0", a5);
  v9 = (int)a5;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v46, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 532, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Accumulating gradients for batch id = ", 38);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v46);
  }
  kaldi::nnet1::GatedRecurrentUnit::AllocateGradients(this);
  v14 = *((float *)this + 15);
  v15 = v9;
  *(_DWORD *)(*((_QWORD *)this + 77) + 4 * v9) = v8;
  v16 = *((_QWORD *)this + 70);
  v17 = 3 * v9;
  v18 = *((_QWORD *)this + 67);
  v19 = *((_QWORD *)this + 81) + 48 * v9;
  *(_QWORD *)(v19 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 84) + 48 * v9 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 87) + 48 * v9 + 32) = a4;
  *(_QWORD *)(*((_QWORD *)this + 90) + 32 * v9 + 24) = a4;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, v19, 0, 2 * *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12), 0, *(_DWORD *)(v19 + 16));
  v20 = *((_QWORD *)this + 81) + 48 * v9;
  v21 = *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, v20, 2 * v21, v21, 0, *(_DWORD *)(v20 + 16));
  v22 = v16 + 48 * v9;
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v46, v16 + 16 * v17, CblasTrans, a2, (const char *)0x6F, 1.0, v14);
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v43, v18 + 16 * v17, CblasTrans, a2, (const char *)0x6F, 1.0, v14);
  v23 = *((_QWORD *)this + 84);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v40, v22, v7, v8 - v7, 0, *(_DWORD *)(v22 + 16));
  v24 = *((_QWORD *)this + 61) + 48 * (int)v15;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v37, v24, 0, v8 - v7, 0, *(_DWORD *)(v24 + 16));
  kaldi::CuMatrixBase<float>::AddMatMat(v23 + 48 * (int)v15, (uint64_t)&v40, CblasTrans, (uint64_t)&v37, (const char *)0x6F, 1.0, v14);
  v37 = &unk_1EA926508;
  v38 = 0u;
  v39 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v37);
  v40 = &unk_1EA926508;
  v41 = 0u;
  v42 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v40);
  v25 = *((_QWORD *)this + 87);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v40, v18 + 16 * v17, v7, v8 - v7, 0, *(_DWORD *)(v18 + 16 * v17 + 16));
  v26 = *((_QWORD *)this + 55) + 48 * (int)v15;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v37, v26, 0, v8 - v7, 0, *(_DWORD *)(v26 + 16));
  kaldi::CuMatrixBase<float>::AddMatMat(v25 + 48 * (int)v15, (uint64_t)&v40, CblasTrans, (uint64_t)&v37, (const char *)0x6F, 1.0, v14);
  v37 = &unk_1EA926508;
  v38 = 0u;
  v39 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v37);
  v40 = &unk_1EA926508;
  v41 = 0u;
  v42 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v40);
  v30 = *((_QWORD *)this + 90) + 32 * v15;
  v31 = 2 * *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12);
  *((_QWORD *)&v41 + 1) = 0;
  v40 = &unk_1EA926538;
  if (v31 > *(_DWORD *)(v30 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v29);
  *(_QWORD *)&v41 = *(_QWORD *)(v30 + 8);
  DWORD2(v41) = v31;
  *(_QWORD *)&v42 = *(_QWORD *)(v30 + 24);
  kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)&v40, v22, 1.0, v14, v27, v28, v29);
  v35 = *((_QWORD *)this + 90) + 32 * v15;
  v36 = *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12);
  *((_QWORD *)&v41 + 1) = 0;
  v40 = &unk_1EA926538;
  if ((3 * v36) > *(_DWORD *)(v35 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v34);
  *(_QWORD *)&v41 = *(_QWORD *)(v35 + 8) + 8 * v36;
  DWORD2(v41) = v36;
  *(_QWORD *)&v42 = *(_QWORD *)(v35 + 24);
  kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)&v40, v18 + 16 * v17, 1.0, v14, v32, v33, v34);
  v43 = &unk_1EA926508;
  v44 = 0u;
  v45 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
  v46 = &unk_1EA926508;
  v47 = 0u;
  v48 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
}

void sub_1DE48C9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,__int128 a21,__int128 a22,void *a23,__int128 a24,__int128 a25)
{
  a20 = &unk_1EA926508;
  a21 = 0u;
  a22 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a20);
  a23 = &unk_1EA926508;
  a24 = 0u;
  a25 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a23);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GatedRecurrentUnit::AllocateGradients(kaldi::nnet1::GatedRecurrentUnit *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  _QWORD *v27;
  void **v28;
  uint64_t v29;
  void *__p[2];
  unsigned __int8 v31;
  _QWORD v32[36];

  if (!*((_BYTE *)this + 640))
  {
    v2 = *((_DWORD *)this + 39);
    v3 = *((_DWORD *)this + 20);
    if (v3 > 1)
      v4 = (v3 + 1);
    else
      v4 = 1;
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 81, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 84, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 87, (int)v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 90, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 93, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 96, (int)v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 99, (int)v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 102, (int)v4);
    if ((int)v4 >= 1)
    {
      v5 = 0;
      v6 = (char *)this + 12;
      do
      {
        kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 81) + 48 * v5, (3 * *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12)), *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8), 0, 0);
        v7 = *(unsigned int *)&v6[*(_QWORD *)(*(_QWORD *)this - 24)];
        kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 84) + 48 * v5, (2 * v7), v7, 0, 0);
        v8 = *(unsigned int *)&v6[*(_QWORD *)(*(_QWORD *)this - 24)];
        kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 87) + 48 * v5, v8, v8, 0, 0);
        kaldi::CuVector<float>::Resize(*((_QWORD *)this + 90) + 32 * v5, (3 * *(_DWORD *)&v6[*(_QWORD *)(*(_QWORD *)this - 24)]), 0, v9, v10);
        if ((v2 & 0xFFFFFFFE) == 2)
        {
          kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 93) + 48 * v5, (3 * *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12)), *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8), 1u, 0);
          v11 = *(unsigned int *)&v6[*(_QWORD *)(*(_QWORD *)this - 24)];
          kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 96) + 48 * v5, (2 * v11), v11, 1u, 0);
          v12 = *(unsigned int *)&v6[*(_QWORD *)(*(_QWORD *)this - 24)];
          kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 99) + 48 * v5, v12, v12, 1u, 0);
          kaldi::CuVector<float>::Resize(*((_QWORD *)this + 102) + 32 * v5, (3 * *(_DWORD *)&v6[*(_QWORD *)(*(_QWORD *)this - 24)]), 1u, v13, v14);
          if (*((_DWORD *)this + 39) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*((_QWORD *)this + 93) + 48 * v5, v15, v16, v17, v18, 1.0);
            kaldi::CuMatrixBase<float>::Set(*((_QWORD *)this + 96) + 48 * v5, v19, v20, v21, v22, 1.0);
            kaldi::CuMatrixBase<float>::Set(*((_QWORD *)this + 99) + 48 * v5, v23, v24, v25, v26, 1.0);
            kaldi::CuVectorBase<float>::Set(*((_QWORD *)this + 102) + 32 * v5, 1.0);
          }
        }
        ++v5;
      }
      while (v5 != v4);
    }
    *((_BYTE *)this + 640) = 1;
    if (kaldi::g_kaldi_verbose_level > 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v32, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 739, 2);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Allocated memory for the gradients: ", 36);
      (*(void (**)(void **__return_ptr, kaldi::nnet1::GatedRecurrentUnit *))(*(_QWORD *)this + 240))(__p, this);
      if ((v31 & 0x80u) == 0)
        v28 = __p;
      else
        v28 = (void **)__p[0];
      if ((v31 & 0x80u) == 0)
        v29 = v31;
      else
        v29 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
      if ((char)v31 < 0)
        operator delete(__p[0]);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v32);
    }
  }
}

void sub_1DE48CDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::AccumGradients(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::GatedRecurrentUnit::AccumGradients((kaldi::nnet1::GatedRecurrentUnit *)((char *)a1 + *(_QWORD *)(*a1 - 248)), a2, a3, a4, a5);
}

void kaldi::nnet1::GatedRecurrentUnit::UpdateWeights(kaldi::nnet1::GatedRecurrentUnit *this, void *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float v5;
  float v6;
  float v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  int *v26;
  int v27;
  uint64_t v28;
  int *v29;
  int v30;
  float v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  _BYTE *v58;
  _BYTE *v59;

  v5 = *((float *)this + 14);
  v6 = *((float *)this + 16);
  v7 = *((float *)this + 17);
  *((_QWORD *)this + 24) = a2;
  *((_QWORD *)this + 30) = a2;
  *((_QWORD *)this + 36) = a2;
  *((_QWORD *)this + 41) = a2;
  v8 = *(_QWORD *)this;
  v9 = *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 80);
  if ((int)a3 >= 0)
    v10 = a3;
  else
    v10 = *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 80);
  if (v9 == 1)
    v11 = 0;
  else
    v11 = v10;
  if ((int)v11 > v9)
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x249, "batch_index <= opts_.num_subbatches", a5);
  v14 = (_QWORD *)((char *)this + 80);
  v13 = *((_DWORD *)this + 20);
  v15 = *((_QWORD *)this + 81) + 48 * (int)v11;
  *(_QWORD *)(v15 + 32) = a2;
  *(_QWORD *)(v14[74] + 48 * (int)v11 + 32) = a2;
  *(_QWORD *)(v14[77] + 48 * (int)v11 + 32) = a2;
  *(_QWORD *)(v14[80] + 32 * (int)v11 + 24) = a2;
  *(_QWORD *)(v14[83] + 48 * (int)v11 + 32) = a2;
  *(_QWORD *)(v14[86] + 48 * (int)v11 + 32) = a2;
  *(_QWORD *)(v14[89] + 48 * (int)v11 + 32) = a2;
  *(_QWORD *)(v14[92] + 32 * (int)v11 + 24) = a2;
  if ((_DWORD)v11 == v13)
  {
    kaldi::CuMatrixBase<float>::SetZero(v15);
    kaldi::CuMatrixBase<float>::SetZero(*((_QWORD *)this + 84) + 48 * (int)v11);
    kaldi::CuMatrixBase<float>::SetZero(*((_QWORD *)this + 87) + 48 * (int)v11);
    kaldi::CuVectorBase<float>::SetZero(*((_QWORD *)this + 90) + 32 * (int)v11);
    v8 = *(_QWORD *)this;
    if (*(int *)((char *)v14 + *(_QWORD *)(*(_QWORD *)this - 24)) >= 1)
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      do
      {
        kaldi::CuMatrixBase<float>::AddMat(*((_QWORD *)this + 81) + 48 * (int)v11, *((_QWORD *)this + 81) + v17, 111, a4, a5, 1.0, 1.0);
        kaldi::CuMatrixBase<float>::AddMat(*((_QWORD *)this + 84) + 48 * (int)v11, *((_QWORD *)this + 84) + v17, 111, v19, v20, 1.0, 1.0);
        kaldi::CuMatrixBase<float>::AddMat(*((_QWORD *)this + 87) + 48 * (int)v11, *((_QWORD *)this + 87) + v17, 111, v21, v22, 1.0, 1.0);
        kaldi::CuVectorBase<float>::AddVec(*((_QWORD *)this + 90) + 32 * (int)v11, *((_QWORD *)this + 90) + v16, v23, v24, v25, 1.0, 1.0);
        ++v18;
        v8 = *(_QWORD *)this;
        v17 += 48;
        v16 += 32;
      }
      while (v18 < *(int *)((char *)v14 + *(_QWORD *)(*(_QWORD *)this - 24)));
    }
    v26 = (int *)*((_QWORD *)this + 77);
    v26[(int)v11] = 0;
    if ((int)v11 >= 1)
    {
      v27 = 0;
      v28 = v11;
      v29 = v26;
      do
      {
        v30 = *v29++;
        v27 += v30;
        v26[(int)v11] = v27;
        --v28;
      }
      while (v28);
    }
  }
  if (*((_BYTE *)this + 84))
    v5 = v5 / (float)*(int *)(*((_QWORD *)this + 77) + 4 * (int)v11);
  if (*((float *)this + 38) >= 0.0)
    (*(void (**)(kaldi::nnet1::GatedRecurrentUnit *, uint64_t))(v8 + 320))(this, v11);
  if (v6 != 0.0)
  {
    v31 = -(float)(v5 * v6);
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, (uint64_t)this + 160, 111, a4, a5, v31 * (float)*(int *)(*((_QWORD *)this + 77) + 4 * (int)v11), 1.0);
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 208, (uint64_t)this + 208, 111, v32, v33, v31 * (float)*(int *)(*((_QWORD *)this + 77) + 4 * (int)v11), 1.0);
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 256, (uint64_t)this + 256, 111, v34, v35, v31 * (float)*(int *)(*((_QWORD *)this + 77) + 4 * (int)v11), 1.0);
    kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 304, (uint64_t)this + 304, v36, v37, v38, v31, 1.0);
  }
  v39 = *((_QWORD *)this + 81);
  if (v7 != 0.0)
  {
    kaldi::cu::RegularizeL1<float>((uint64_t)this + 160, v39 + 48 * (int)v11, (float)(v7 * v5) * (float)*(int *)(*((_QWORD *)this + 77) + 4 * (int)v11), v5, a3, a4, a5);
    kaldi::cu::RegularizeL1<float>((uint64_t)this + 208, *((_QWORD *)this + 84) + 48 * (int)v11, (float)(v7 * v5) * (float)*(int *)(*((_QWORD *)this + 77) + 4 * (int)v11), v5, v40, v41, v42);
    kaldi::cu::RegularizeL1<float>((uint64_t)this + 256, *((_QWORD *)this + 87) + 48 * (int)v11, (float)(v7 * v5) * (float)*(int *)(*((_QWORD *)this + 77) + 4 * (int)v11), v5, v43, v44, v45);
    v39 = *((_QWORD *)this + 81);
  }
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 160, v39 + 48 * (int)v11, 111, a4, a5, -(float)(v5 * *((float *)this + 152)), 1.0);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 208, *((_QWORD *)this + 84) + 48 * (int)v11, 111, v46, v47, -(float)(v5 * *((float *)this + 152)), 1.0);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)this + 256, *((_QWORD *)this + 87) + 48 * (int)v11, 111, v48, v49, -(float)(v5 * *((float *)this + 152)), 1.0);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)this + 304, *((_QWORD *)this + 90) + 32 * (int)v11, v50, v51, v52, -(float)(v5 * *((float *)this + 152)), 1.0);
  v53 = *((float *)this + 153);
  if (v53 > 0.0)
  {
    kaldi::CuMatrixBase<float>::ApplyMaxNorm((uint64_t)this + 160, 1, v53);
    kaldi::CuMatrixBase<float>::ApplyMaxNorm((uint64_t)this + 208, 1, *((float *)this + 153));
    kaldi::CuMatrixBase<float>::ApplyMaxNorm((uint64_t)this + 256, 1, *((float *)this + 153));
    kaldi::CuVectorBase<float>::ApplyMaxNorm((uint64_t)this + 304, *((float *)this + 153), v54, v55, v56, v57);
  }
  v58 = (_BYTE *)*((_QWORD *)this + 77);
  if ((_DWORD)v11 == *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 80))
  {
    v59 = (_BYTE *)*((_QWORD *)this + 78);
    if (v58 != v59)
      bzero(v58, ((v59 - v58 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  else
  {
    *(_DWORD *)&v58[4 * (int)v11] = 0;
  }
}

void `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::UpdateWeights(kaldi::nnet1::GatedRecurrentUnit *this, void *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::GatedRecurrentUnit::UpdateWeights((kaldi::nnet1::GatedRecurrentUnit *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 272)), a2, a3, a4, a5);
}

void kaldi::nnet1::GatedRecurrentUnit::EnsureBuffers(kaldi::nnet1::GatedRecurrentUnit *this)
{
  unint64_t v2;
  uint64_t v3;

  if (!*((_BYTE *)this + 336))
  {
    v2 = *((int *)this + 20);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 43, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 46, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 49, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 52, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 55, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 58, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 61, v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 1, v2);
    if ((int)v2 >= 1)
    {
      v3 = 0;
      do
      {
        kaldi::CuMatrix<float>::Resize(*((_QWORD *)this + 1) + v3, *((unsigned int *)this + 24), *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12), 0, 0);
        v3 += 48;
      }
      while (48 * v2 != v3);
    }
    std::vector<int>::resize((std::vector<int> *)((char *)this + 616), v2);
    *((_BYTE *)this + 336) = 1;
  }
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 152) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(_BYTE *)(result + 640) = 0;
  return result;
}

_QWORD *`virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::SetGradientNormalization(_QWORD *result, int a2, float a3)
{
  float *v3;

  v3 = (float *)((char *)result + *(_QWORD *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((_BYTE *)v3 + 640) = 0;
  return result;
}

void kaldi::nnet1::GatedRecurrentUnit::NormalizeGradients(kaldi::nnet1::GatedRecurrentUnit *this, float a2, unsigned int a3, uint64_t a4, uint64_t a5, const char *a6)
{
  float v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;

  if ((a3 & 0x80000000) != 0 || *((_DWORD *)this + 20) <= (signed int)a3)
    kaldi::KaldiAssertFailure_((kaldi *)"NormalizeGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x30E, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a6);
  v7 = a2;
  v8 = *((_DWORD *)this + 39);
  if (v8 == 1)
  {
    if (a2 > 0.0)
    {
      v14 = a3;
      if (*((_BYTE *)this + 84))
        v7 = (float)*(int *)(*((_QWORD *)this + 77) + 4 * a3) * a2;
      kaldi::nnet1::UpdatableComponent::ClipGradient(*((_QWORD *)this + 81) + 48 * a3, v7);
      kaldi::nnet1::UpdatableComponent::ClipGradient(*((_QWORD *)this + 84) + 48 * v14, v7);
      kaldi::nnet1::UpdatableComponent::ClipGradient(*((_QWORD *)this + 87) + 48 * v14, v7);
      kaldi::nnet1::UpdatableComponent::ClipGradient(*((_QWORD *)this + 90) + 32 * v14, v7);
    }
  }
  else if (v8 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0)
    {
      v9 = a3;
      v10 = 3 * a3;
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((_QWORD *)this + 81) + 48 * a3, *((_QWORD *)this + 93) + 48 * a3, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((_QWORD *)this + 84) + 16 * v10, *((_QWORD *)this + 96) + 16 * v10, v7);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((_QWORD *)this + 87) + 16 * v10, *((_QWORD *)this + 99) + 16 * v10, v7);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*((_QWORD *)this + 90) + 32 * v9, *((_QWORD *)this + 102) + 32 * v9, v7, v11, v12, v13);
    }
  }
  else if (a2 > 0.0 && v8 == 2)
  {
    v15 = a3;
    if (*((_BYTE *)this + 84))
      v7 = (float)*(int *)(*((_QWORD *)this + 77) + 4 * a3) * a2;
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((_QWORD *)this + 81) + 48 * a3, (unsigned int *)(*((_QWORD *)this + 93) + 48 * a3), v7, a4, a5, a6);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((_QWORD *)this + 84) + 48 * v15, (unsigned int *)(*((_QWORD *)this + 96) + 48 * v15), v7, v16, v17, v18);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((_QWORD *)this + 87) + 48 * v15, (unsigned int *)(*((_QWORD *)this + 99) + 48 * v15), v7, v19, v20, v21);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*((_QWORD *)this + 90) + 32 * v15, (_DWORD *)(*((_QWORD *)this + 102) + 32 * v15), v22, v23, v24, v7);
  }
}

void `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::NormalizeGradients(kaldi::nnet1::GatedRecurrentUnit *this, float a2, unsigned int a3, uint64_t a4, uint64_t a5, const char *a6)
{
  kaldi::nnet1::GatedRecurrentUnit::NormalizeGradients((kaldi::nnet1::GatedRecurrentUnit *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 264)), a2, a3, a4, a5, a6);
}

float kaldi::nnet1::GatedRecurrentUnit::Check(kaldi::nnet1::GatedRecurrentUnit *this)
{
  int v1;
  char *v2;
  int v3;
  float result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[34];

  v1 = *((_DWORD *)this + 45);
  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v3 = *((_DWORD *)v2 + 3);
  if (v1 != 3 * v3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 812);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Input weights #rows = ", 22);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"; expecting ", 12);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"; output dim = ", 15);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 44) != *((_DWORD *)v2 + 2))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 816);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Input weights #columns = ", 25);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"; expecting ", 12);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, " (same as input dim)");
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 57) != 2 * v3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 820);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Gate recurrent weights #rows = ", 31);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"; expecting ", 12);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; output dim = ", 15);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 56) != v3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 824);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Gate recurrent weights #columns = ", 34);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; expecting ", 12);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, " (same as output dim)");
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 69) != v3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 828);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Activation recurrent weights #rows = ", 37);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"; expecting ", 12);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"; output dim = ", 15);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 68) != v3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 832);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Activation recurrent weights #columns = ", 40);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"; expecting ", 12);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, " (same as output dim)");
    goto LABEL_22;
  }
  if (*((_DWORD *)this + 80) != v1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 836);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Bias dim = ", 11);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"; expecting ", 12);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"; output dim = ", 15);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((float *)this + 152) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 841);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"learn_rate_coeff_ must not be negative; found: ",
      47);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  if (*((float *)this + 153) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 844);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"max_norm_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_22;
  }
  result = *((float *)this + 38);
  if (result < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 847);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"max_grad_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
LABEL_22:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  return result;
}

unsigned int *kaldi::nnet1::GatedRecurrentUnit::GetHistoryState(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;

  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x35A, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  v8 = *(_QWORD *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(v8 + 20), *(unsigned int *)(v8 + 16), 1u, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, *(_QWORD *)(a1 + 8) + 48 * a3, 111, v9, v10);
}

_DWORD *kaldi::nnet1::GatedRecurrentUnit::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD v18[4];

  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (int)a4)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x360, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  if ((a3 & 0x80000000) != 0
    || (v7 = *(_QWORD *)(a1 + 8) + 48 * a4, *(_DWORD *)(v7 + 20) <= (signed int)a3))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x361, "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", a5);
  }
  v9 = a4;
  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(v7 + 16), 1u, a4, a5);
  v13 = *(_QWORD *)(a1 + 8) + 48 * v9;
  if (*(_DWORD *)(v13 + 20) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v12);
  v14 = *(_QWORD *)(v13 + 8) + 4 * (int)(*(_DWORD *)(v13 + 24) * a3);
  v15 = *(_DWORD *)(v13 + 16);
  v16 = *(_QWORD *)(v13 + 32);
  v18[0] = &unk_1EA926538;
  v18[1] = v14;
  v18[3] = v16;
  v18[2] = v15;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v18, v10, v11, v12);
}

_DWORD *kaldi::nnet1::GatedRecurrentUnit::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  const char *v12;

  v7 = (_QWORD *)(a1 + 840);
  v8 = *(_QWORD *)(a1 + 840);
  if (v8 == *(_QWORD *)(a1 + 848))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 840), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 864), *(int *)(a1 + 80));
    v8 = *(_QWORD *)(a1 + 840);
  }
  kaldi::CuVector<float>::Resize(v8 + 32 * a3, *(unsigned int *)(a2 + 16), 1u, a4, a5);
  return kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)(*v7 + 32 * a3), a2, v10, v11, v12);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::HistoryStateSize(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 12);
}

unsigned int *kaldi::nnet1::GatedRecurrentUnit::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  const char *v7;
  unsigned int *v8;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3)
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x374, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v7);
  v8 = (unsigned int *)(*(_QWORD *)(a1 + 8) + 48 * a3);
  if (*(_DWORD *)(a2 + 20) != v8[5])
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x375, "history.NumRows() == history_state_[batch_index].NumRows()", v7);
  if (*(_DWORD *)(a2 + 16) != v8[4])
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x376, "history.NumCols() == history_state_[batch_index].NumCols()", v7);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v8, a2, 111, v6, v7);
}

_DWORD *kaldi::nnet1::GatedRecurrentUnit::SetHistoryState(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4)
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x37E, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v10);
  if (a3 < 0 || (v11 = *(_QWORD *)(a1 + 8) + 48 * a4, *(_DWORD *)(v11 + 20) <= a3))
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x37F, "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", v10);
  v12 = *(_DWORD *)(a2 + 16);
  if (v12 != *(_DWORD *)(v11 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x380, "history.Dim() == history_state_[batch_index].NumCols()", v10);
  v13 = *(_QWORD *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * a3;
  v14 = *(_QWORD *)(v11 + 32);
  v16[0] = &unk_1EA926538;
  v16[1] = v13;
  v16[3] = v14;
  v16[2] = v12;
  return kaldi::CuVectorBase<float>::CopyFromVec(v16, a2, v8, v9, v10);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::ResetHistoryState(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4, const char *a5)
{
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void **v17;
  uint64_t v18;
  void *__p[2];
  unsigned __int8 v21;
  _QWORD v22[35];
  _QWORD v23[11];
  char v24;
  uint64_t v25;

  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4)
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x385, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  if (a2[1] != *(_DWORD *)(*(_QWORD *)(a1 + 8) + 48 * a4 + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", (const char *)0x386, "sequence_idx.size() == history_state_[batch_index].NumRows()", a5);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48 * a4 + 32) = a3;
  if (a2[1])
  {
    v10 = 0;
    do
    {
      if (((*(_QWORD *)(*a2 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
      {
        v11 = *(_QWORD *)(a1 + 8) + 48 * a4;
        if (v10 >= *(unsigned int *)(v11 + 20))
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v9);
        v12 = *(_QWORD *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * (int)v10;
        v13 = *(_DWORD *)(v11 + 16);
        v14 = *(_QWORD *)(v11 + 32);
        v22[0] = &unk_1EA926538;
        v22[1] = v12;
        v22[3] = v14;
        v22[2] = v13;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v22);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          v15 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
        }
      }
      ++v10;
    }
    while (a2[1] > v10);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22, "ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-gru.cc", 914, 3);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Reset previous states for utts ", 31);
    std::stringbuf::str();
    if ((v21 & 0x80u) == 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    if ((v21 & 0x80u) == 0)
      v18 = v21;
    else
      v18 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    if ((char)v21 < 0)
      operator delete(__p[0]);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22);
  }
  v23[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v23 + *(_QWORD *)(v23[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v23[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v24 < 0)
    operator delete((void *)v23[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v25);
}

void sub_1DE48E298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0)
    operator delete(__p);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GatedRecurrentUnit::ResetHistoryState(kaldi::nnet1::GatedRecurrentUnit *this)
{
  uint64_t i;

  (*(void (**)(kaldi::nnet1::GatedRecurrentUnit *))(*(_QWORD *)this + 88))(this);
  for (i = *((_QWORD *)this + 1); i != *((_QWORD *)this + 2); i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

void kaldi::nnet1::GatedRecurrentUnit::~GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 888));
}

{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 888));
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::Copy(kaldi::nnet1::GatedRecurrentUnit *this)
{
  kaldi::nnet1::GatedRecurrentUnit *v2;

  v2 = (kaldi::nnet1::GatedRecurrentUnit *)operator new();
  kaldi::nnet1::GatedRecurrentUnit::GatedRecurrentUnit(v2, this);
  return (uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_1DE48E3F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40B7274482);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::GatedRecurrentUnit::GetType(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return 277;
}

void kaldi::nnet1::GatedRecurrentUnit::GetUnitOutputFnc()
{
  _QWORD *v0;
  _QWORD v1[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetUnitOutputFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-gru.h", 93);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::~GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 888));
}

{
  kaldi::nnet1::GatedRecurrentUnit::~GatedRecurrentUnit((kaldi::nnet1::GatedRecurrentUnit *)((char *)this
                                                                                           + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::Copy(kaldi::nnet1::GatedRecurrentUnit *this)
{
  return kaldi::nnet1::GatedRecurrentUnit::Copy((kaldi::nnet1::GatedRecurrentUnit *)((char *)this
                                                                                   + *(_QWORD *)(*(_QWORD *)this - 32)));
}

void `virtual thunk to'kaldi::nnet1::GatedRecurrentUnit::GetUnitOutputFnc()
{
  kaldi::nnet1::GatedRecurrentUnit::GetUnitOutputFnc();
}

void kaldi::nnet1::GatedRecurrentUnit::~GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  void **v6;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[3];
  v6 = (void **)((char *)this + 864);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 840);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 816);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 792);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 768);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 744);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 720);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 696);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 672);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 648);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v5 = (void *)*((_QWORD *)this + 77);
  if (v5)
  {
    *((_QWORD *)this + 78) = v5;
    operator delete(v5);
  }
  v6 = (void **)((char *)this + 584);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 560);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 536);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 512);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 488);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 464);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 440);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 416);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 392);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 368);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 344);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  *((_QWORD *)this + 38) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 304);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 256);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 208);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 160);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(this, a2 + 1);
}

kaldi::nnet1::GatedRecurrentUnit *kaldi::nnet1::GatedRecurrentUnit::GatedRecurrentUnit(kaldi::nnet1::GatedRecurrentUnit *this, const kaldi::nnet1::GatedRecurrentUnit *a2)
{
  char *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;

  v4 = (char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24);
  *((_QWORD *)this + 111) = off_1EA92D6D8;
  v5 = *((_QWORD *)v4 + 1);
  *((_WORD *)this + 452) = *((_WORD *)v4 + 8);
  *((_QWORD *)this + 112) = v5;
  *((_QWORD *)this + 114) = 0;
  *((_QWORD *)this + 116) = 0;
  *((_QWORD *)this + 115) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 114, *((const void **)v4 + 3), *((_QWORD *)v4 + 4), (uint64_t)(*((_QWORD *)v4 + 4) - *((_QWORD *)v4 + 3)) >> 3);
  *((_QWORD *)this + 111) = off_1EA929750;
  *((_QWORD *)this + 117) = &off_1EA9284D0;
  v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)((char *)this + 959) = *(_OWORD *)(v4 + 71);
  *((_OWORD *)this + 59) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent(this, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1EA91C058, (uint64_t)a2);
  *(_QWORD *)this = &off_1EA928C78;
  *((_QWORD *)this + 111) = &off_1EA928EE0;
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 160, (char *)a2 + 160, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 208, (char *)a2 + 208, 111);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 256, (char *)a2 + 256, 111);
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 38) = &unk_1EA92DFD8;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 41) = *((_QWORD *)a2 + 41);
  kaldi::CuVector<float>::Resize((uint64_t)this + 304, *((unsigned int *)a2 + 80), 1u, v7, v8);
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)this + 76, (uint64_t)a2 + 304, v9, v10, v11);
  *((_WORD *)this + 168) = *((_WORD *)a2 + 168);
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 43) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 43, *((_QWORD *)a2 + 43), *((_QWORD *)a2 + 44), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 44) - *((_QWORD *)a2 + 43)) >> 4));
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 46, *((_QWORD *)a2 + 46), *((_QWORD *)a2 + 47), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 47) - *((_QWORD *)a2 + 46)) >> 4));
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 49, *((_QWORD *)a2 + 49), *((_QWORD *)a2 + 50), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 50) - *((_QWORD *)a2 + 49)) >> 4));
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 52, *((_QWORD *)a2 + 52), *((_QWORD *)a2 + 53), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 53) - *((_QWORD *)a2 + 52)) >> 4));
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 55, *((_QWORD *)a2 + 55), *((_QWORD *)a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 56) - *((_QWORD *)a2 + 55)) >> 4));
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 60) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 58, *((_QWORD *)a2 + 58), *((_QWORD *)a2 + 59), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 59) - *((_QWORD *)a2 + 58)) >> 4));
  *((_QWORD *)this + 61) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 63) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 61, *((_QWORD *)a2 + 61), *((_QWORD *)a2 + 62), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 62) - *((_QWORD *)a2 + 61)) >> 4));
  *((_QWORD *)this + 66) = 0;
  *((_OWORD *)this + 32) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 64, *((_QWORD *)a2 + 64), *((_QWORD *)a2 + 65), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 65) - *((_QWORD *)a2 + 64)) >> 4));
  *((_QWORD *)this + 69) = 0;
  *(_OWORD *)((char *)this + 536) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 67, *((_QWORD *)a2 + 67), *((_QWORD *)a2 + 68), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 68) - *((_QWORD *)a2 + 67)) >> 4));
  *((_QWORD *)this + 72) = 0;
  *((_OWORD *)this + 35) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 70, *((_QWORD *)a2 + 70), *((_QWORD *)a2 + 71), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 71) - *((_QWORD *)a2 + 70)) >> 4));
  *((_QWORD *)this + 75) = 0;
  *(_OWORD *)((char *)this + 584) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 73, *((_QWORD *)a2 + 73), *((_QWORD *)a2 + 74), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 74) - *((_QWORD *)a2 + 73)) >> 4));
  *((_QWORD *)this + 76) = *((_QWORD *)a2 + 76);
  *((_QWORD *)this + 77) = 0;
  *((_QWORD *)this + 79) = 0;
  *((_QWORD *)this + 78) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 77, *((const void **)a2 + 77), *((_QWORD *)a2 + 78), (uint64_t)(*((_QWORD *)a2 + 78) - *((_QWORD *)a2 + 77)) >> 2);
  *((_BYTE *)this + 640) = *((_BYTE *)a2 + 640);
  *((_QWORD *)this + 81) = 0;
  *((_QWORD *)this + 83) = 0;
  *((_QWORD *)this + 82) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 81, *((_QWORD *)a2 + 81), *((_QWORD *)a2 + 82), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 82) - *((_QWORD *)a2 + 81)) >> 4));
  *((_QWORD *)this + 86) = 0;
  *((_OWORD *)this + 42) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 84, *((_QWORD *)a2 + 84), *((_QWORD *)a2 + 85), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 85) - *((_QWORD *)a2 + 84)) >> 4));
  *((_QWORD *)this + 89) = 0;
  *(_OWORD *)((char *)this + 696) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 87, *((_QWORD *)a2 + 87), *((_QWORD *)a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 88) - *((_QWORD *)a2 + 87)) >> 4));
  *((_QWORD *)this + 92) = 0;
  *((_OWORD *)this + 45) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 90, *((_QWORD *)a2 + 90), *((_QWORD *)a2 + 91), (uint64_t)(*((_QWORD *)a2 + 91) - *((_QWORD *)a2 + 90)) >> 5);
  *((_QWORD *)this + 95) = 0;
  *(_OWORD *)((char *)this + 744) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 93, *((_QWORD *)a2 + 93), *((_QWORD *)a2 + 94), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 94) - *((_QWORD *)a2 + 93)) >> 4));
  *((_QWORD *)this + 98) = 0;
  *((_OWORD *)this + 48) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 96, *((_QWORD *)a2 + 96), *((_QWORD *)a2 + 97), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 97) - *((_QWORD *)a2 + 96)) >> 4));
  *((_QWORD *)this + 101) = 0;
  *(_OWORD *)((char *)this + 792) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 99, *((_QWORD *)a2 + 99), *((_QWORD *)a2 + 100), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 100) - *((_QWORD *)a2 + 99)) >> 4));
  *((_QWORD *)this + 104) = 0;
  *((_OWORD *)this + 51) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 102, *((_QWORD *)a2 + 102), *((_QWORD *)a2 + 103), (uint64_t)(*((_QWORD *)a2 + 103) - *((_QWORD *)a2 + 102)) >> 5);
  *((_QWORD *)this + 107) = 0;
  *(_OWORD *)((char *)this + 840) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 105, *((_QWORD *)a2 + 105), *((_QWORD *)a2 + 106), (uint64_t)(*((_QWORD *)a2 + 106) - *((_QWORD *)a2 + 105)) >> 5);
  *((_QWORD *)this + 110) = 0;
  *((_OWORD *)this + 54) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 108, *((_QWORD *)a2 + 108), *((_QWORD *)a2 + 109), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 109) - *((_QWORD *)a2 + 108)) >> 4));
  return this;
}

void sub_1DE48EC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23)
{
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v34;

  *(_QWORD *)(v32 - 88) = v25;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = v28;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = v24;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = v31;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = v29;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = v27;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = v26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  v34 = *a11;
  if (*a11)
  {
    v23[78] = v34;
    operator delete(v34);
  }
  *(_QWORD *)(v32 - 88) = v30;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a14;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a15;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a20;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  *(_QWORD *)(v32 - 88) = a21;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 88));
  kaldi::CuVector<float>::~CuVector(a22);
  kaldi::CuMatrix<float>::~CuMatrix(a23);
  kaldi::CuMatrix<float>::~CuMatrix(*(_QWORD *)(v32 - 104));
  kaldi::CuMatrix<float>::~CuMatrix(*(_QWORD *)(v32 - 96));
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v23, (uint64_t *)&off_1EA91C058);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v23 + 111));
  _Unwind_Resume(a1);
}

void sub_1DE48ED98()
{
  JUMPOUT(0x1DE48EC60);
}

void sub_1DE48EDA0()
{
  JUMPOUT(0x1DE48EC6CLL);
}

void sub_1DE48EDA8()
{
  JUMPOUT(0x1DE48EC78);
}

void sub_1DE48EDB0()
{
  JUMPOUT(0x1DE48EC88);
}

void sub_1DE48EDB8()
{
  JUMPOUT(0x1DE48EC98);
}

void sub_1DE48EDC0()
{
  JUMPOUT(0x1DE48ECACLL);
}

void sub_1DE48EDC8()
{
  JUMPOUT(0x1DE48ECB8);
}

void sub_1DE48EDD0()
{
  JUMPOUT(0x1DE48ECC8);
}

void sub_1DE48EDD8()
{
  JUMPOUT(0x1DE48ECD8);
}

void sub_1DE48EDE0()
{
  JUMPOUT(0x1DE48ECE8);
}

void sub_1DE48EDE8()
{
  JUMPOUT(0x1DE48ECF8);
}

void sub_1DE48EDF0()
{
  JUMPOUT(0x1DE48ED08);
}

void sub_1DE48EDF8()
{
  JUMPOUT(0x1DE48ED18);
}

void sub_1DE48EE00()
{
  JUMPOUT(0x1DE48ED28);
}

void sub_1DE48EE08()
{
  JUMPOUT(0x1DE48ED38);
}

void sub_1DE48EE10()
{
  JUMPOUT(0x1DE48ED48);
}

void sub_1DE48EE18()
{
  JUMPOUT(0x1DE48ED58);
}

void sub_1DE48EE20()
{
  JUMPOUT(0x1DE48ED68);
}

void sub_1DE48EE28()
{
  JUMPOUT(0x1DE48ED70);
}

void sub_1DE48EE30()
{
  JUMPOUT(0x1DE48ED78);
}

void sub_1DE48EE38()
{
  JUMPOUT(0x1DE48ED88);
}

void sub_1DE48EE40()
{
  JUMPOUT(0x1DE48ED60);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1DE48EF4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1DF0ECF6C](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1DF0ECF6C](a1 + 128);
  return a1;
}

_QWORD *std::vector<std::vector<double>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1DE48F088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_DWORD *)i + 10) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_1DE48F384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1DE48FBD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

kaldi::nnet1::LayerNorm *kaldi::nnet1::LayerNorm::LayerNorm(kaldi::nnet1::LayerNorm *this, const kaldi::nnet1::LayerNorm *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;

  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1EA92D798;
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_BYTE *)this + 52) = *((_BYTE *)a2 + 52);
  *((_QWORD *)this + 7) = &unk_1EA92DFD8;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = &unk_1EA92DFD8;
  v7 = (char *)this + 88;
  *((_QWORD *)this + 12) = 0;
  kaldi::CuVector<float>::operator=((uint64_t)this + 56, (uint64_t)a2 + 56, a3, a4, a5);
  kaldi::CuVector<float>::operator=((uint64_t)v7, (uint64_t)a2 + 88, v8, v9, v10);
  return this;
}

void sub_1DE48FCD8(_Unwind_Exception *a1)
{
  kaldi::nnet1::Component *v1;
  _QWORD *v2;
  _QWORD *v3;

  kaldi::CuVector<float>::~CuVector(v3);
  kaldi::CuVector<float>::~CuVector(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LayerNorm::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  _QWORD v40[2];
  int v41;
  _QWORD v42[4];
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-layer-norm-component.cc", (const char *)0x1A, "in.NumCols() == input_dim_", a5);
  v8 = *(unsigned int *)(a2 + 20);
  v49 = 0;
  v50 = 0;
  v47 = &unk_1EA92DFD8;
  v48 = 0;
  kaldi::CuVector<float>::Resize((uint64_t)&v47, v8, 0, a4, a5);
  if (*(int *)(a2 + 20) >= 1)
  {
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * (int)v11;
      v13 = *(_DWORD *)(a2 + 16);
      v14 = *(_QWORD *)(a2 + 32);
      v43 = &unk_1EA926538;
      v44 = v12;
      v46 = v14;
      v45 = v13;
      v15 = kaldi::CuVectorBase<float>::Sum((uint64_t)&v43);
      if (v11 >= v49)
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x106, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v10);
      *(float *)(v48 + 4 * v11++) = v15 / (float)(int)v45;
    }
    while ((uint64_t)v11 < *(int *)(a2 + 20));
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a3, a2, 111, v9, v10);
  kaldi::CuMatrixBase<float>::AddVecToCols(a3, (uint64_t)&v47, v16, v17, v18, -1.0, 1.0);
  v19 = *(unsigned int *)(a2 + 20);
  v45 = 0;
  v46 = 0;
  v43 = &unk_1EA92DFD8;
  v44 = 0;
  kaldi::CuVector<float>::Resize((uint64_t)&v43, v19, 0, v20, v21);
  if (*(int *)(a2 + 20) >= 1)
  {
    v25 = 0;
    do
    {
      if (v25 >= *(unsigned int *)(a3 + 20))
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v24);
      v26 = *(_QWORD *)(a3 + 8) + 4 * *(_DWORD *)(a3 + 24) * (int)v25;
      v27 = *(_DWORD *)(a3 + 16);
      v28 = *(_QWORD *)(a3 + 32);
      v42[0] = &unk_1EA926538;
      v42[1] = v26;
      v42[3] = v28;
      v42[2] = v27;
      kaldi::CuVector<float>::CuVector((uint64_t)v40, (uint64_t)v42, v22, v23, v24);
      kaldi::CuVectorBase<float>::MulElements((uint64_t)v40, (uint64_t)v42, v29, v30, v31);
      v33 = kaldi::CuVectorBase<float>::Sum((uint64_t)v40);
      if (v25 >= v45)
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x106, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v32);
      *(float *)(v44 + 4 * v25) = 1.0
                                / (float)(*(float *)(a1 + 48) + sqrtf(v33 / (float)(v41 - *(unsigned __int8 *)(a1 + 52))));
      v40[0] = &unk_1EA92DFD8;
      kaldi::CuVector<float>::Destroy((uint64_t)v40);
      ++v25;
    }
    while ((uint64_t)v25 < *(int *)(a2 + 20));
  }
  kaldi::CuMatrixBase<float>::MulRowsVec(a3, (uint64_t)&v43, v22, v23, v24);
  kaldi::CuMatrixBase<float>::MulColsVec(a3, a1 + 56, v34, v35, v36);
  kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 88, v37, v38, v39, 1.0, 1.0);
  v43 = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)&v43);
  v47 = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)&v47);
}

void sub_1DE48FFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LayerNorm::Info(kaldi::nnet1::LayerNorm *this)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  void *p_p;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *__p;
  uint64_t v25;
  unsigned __int8 v26;
  _QWORD v27[2];
  _QWORD v28[11];
  char v29;
  uint64_t v30;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v27);
  kaldi::WriteToken(v28, 0, (kaldi *)"<Epsilon>", v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" ", 1);
  std::ostream::operator<<();
  kaldi::WriteToken(v28, 0, (kaldi *)"<UnbiasedVar>", v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" ", 1);
  std::ostream::operator<<();
  kaldi::WriteToken(v28, 0, (kaldi *)"<Gamma>", v6, v7);
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)this + 14, v8, v9, v10, v11);
  if ((v26 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v26 & 0x80u) == 0)
    v13 = v26;
  else
    v13 = v25;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)p_p, v13);
  if ((char)v26 < 0)
    operator delete(__p);
  kaldi::WriteToken(v28, 0, (kaldi *)"<Beta>", v14, v15);
  kaldi::nnet1::MomentStatistics<float>((_DWORD *)this + 22, v16, v17, v18, v19);
  if ((v26 & 0x80u) == 0)
    v20 = &__p;
  else
    v20 = __p;
  if ((v26 & 0x80u) == 0)
    v21 = v26;
  else
    v21 = v25;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v20, v21);
  if ((char)v26 < 0)
    operator delete(__p);
  std::stringbuf::str();
  v27[0] = *MEMORY[0x1E0DE4F50];
  v22 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v27 + *(_QWORD *)(v27[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v28[0] = v22;
  v28[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v29 < 0)
    operator delete((void *)v28[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1DF0ECF6C](&v30);
}

void sub_1DE4901E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LayerNorm::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v11;
  BOOL v12;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  int v23;
  int v24;
  _QWORD *v25;
  __int128 *p_p;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  __int128 __p;
  uint64_t v31;
  _QWORD v32[36];

  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v32, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-layer-norm-component.cc", 64, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Reading LayerNorm component", 27);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v32);
  }
  __p = 0uLL;
  v31 = 0;
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60)
      goto LABEL_61;
    kaldi::ReadToken(a2, a3, (uint64_t)&__p, v6, v7);
    if ((SHIBYTE(v31) & 0x80000000) == 0)
      break;
    v11 = *((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1) == 9
      && (*(_QWORD *)__p == 0x6E6F6C697370453CLL ? (v12 = *(_BYTE *)(__p + 8) == 62) : (v12 = 0), v12))
    {
LABEL_35:
      kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 48), v8, v7);
    }
    else if (*((_QWORD *)&__p + 1) == 13)
    {
      if (*(_QWORD *)__p != 0x65736169626E553CLL || *(_QWORD *)(__p + 5) != 0x3E72615664657361)
      {
        v11 = *((_QWORD *)&__p + 1);
        goto LABEL_23;
      }
LABEL_53:
      kaldi::ReadBasicType<BOOL>(a2, a3, (char *)(a1 + 52), v8, v7);
    }
    else
    {
LABEL_23:
      if (v11 == 7)
      {
        v14 = *(_DWORD *)__p == 1835091772 && *(_DWORD *)(__p + 3) == 1046572397;
        v15 = a1 + 56;
        if (v14)
          goto LABEL_52;
        v11 = *((_QWORD *)&__p + 1);
      }
      if (v11 != 6)
        goto LABEL_54;
      v16 = *(_DWORD *)__p == 1952793148 && *(_WORD *)(__p + 4) == 15969;
      v15 = a1 + 88;
      if (!v16)
      {
        v11 = *((_QWORD *)&__p + 1);
LABEL_54:
        if (v11 == 12)
        {
          v9 = (__int128 *)__p;
          goto LABEL_56;
        }
LABEL_69:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-layer-norm-component.cc", 80);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Unrecognized token ", 19);
        if (v31 >= 0)
          p_p = &__p;
        else
          p_p = (__int128 *)__p;
        if (v31 >= 0)
          v27 = HIBYTE(v31);
        else
          v27 = *((_QWORD *)&__p + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)p_p, v27);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
      }
LABEL_52:
      kaldi::CuVector<float>::Read(v15, a2, a3, v8, v7);
    }
  }
  v9 = &__p;
  switch(HIBYTE(v31))
  {
    case 6:
      goto LABEL_47;
    case 7:
      goto LABEL_42;
    case 9:
      if ((_QWORD)__p != 0x6E6F6C697370453CLL || BYTE8(__p) != 62)
        goto LABEL_69;
      goto LABEL_35;
    case 0xC:
      goto LABEL_56;
    case 0xD:
      if ((_QWORD)__p == 0x65736169626E553CLL && *(_QWORD *)((char *)&__p + 5) == 0x3E72615664657361)
        goto LABEL_53;
      if (HIBYTE(v31) == 6)
        goto LABEL_47;
      if (HIBYTE(v31) == 7)
      {
LABEL_42:
        v18 = (_DWORD)__p == 1835091772 && *(_DWORD *)((char *)&__p + 3) == 1046572397;
        v15 = a1 + 56;
        if (!v18)
        {
          if (HIBYTE(v31) != 6)
            goto LABEL_69;
LABEL_47:
          v19 = (_DWORD)__p == 1952793148 && WORD2(__p) == 15969;
          v15 = a1 + 88;
          if (!v19)
            goto LABEL_69;
        }
        goto LABEL_52;
      }
      if (HIBYTE(v31) != 12)
        goto LABEL_69;
      v9 = &__p;
LABEL_56:
      v20 = *(_QWORD *)v9;
      v21 = *((_DWORD *)v9 + 2);
      if (v20 != 0x6E6F706D6F432F3CLL || v21 != 1047817829)
        goto LABEL_69;
LABEL_61:
      v23 = *(_DWORD *)(a1 + 104);
      if (v23 != *(_DWORD *)(a1 + 72))
      {
        v28 = "beta_.Dim() == gamma_.Dim()";
        v29 = 84;
        goto LABEL_79;
      }
      v24 = *(_DWORD *)(a1 + 8);
      if (v24 != *(_DWORD *)(a1 + 12))
      {
        v28 = "input_dim_ == output_dim_";
        v29 = 85;
        goto LABEL_79;
      }
      if (v23 != v24)
      {
        v28 = "beta_.Dim() == output_dim_";
        v29 = 86;
LABEL_79:
        kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-layer-norm-component.cc", (const char *)v29, v28, v7);
      }
      if (SHIBYTE(v31) < 0)
        operator delete((void *)__p);
      return;
    default:
      goto LABEL_69;
  }
}

void sub_1DE49063C(_Unwind_Exception *a1)
{
  void *v2;
  char v3;

  if (v3 < 0)
    operator delete(v2);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::LayerNorm::WriteData(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;

  kaldi::WriteToken(a2, a3, (kaldi *)"<Epsilon>", a4, a5);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<UnbiasedVar>", v8, v9);
  kaldi::WriteBasicType<BOOL>(a2, (char)a3, *(unsigned __int8 *)(a1 + 52));
  kaldi::WriteToken(a2, a3, (kaldi *)"<Gamma>", v10, v11);
  kaldi::CuVectorBase<float>::Write((_DWORD *)(a1 + 56), a2, (int)a3, v12, v13);
  kaldi::WriteToken(a2, a3, (kaldi *)"<Beta>", v14, v15);
  kaldi::CuVectorBase<float>::Write((_DWORD *)(a1 + 88), a2, (int)a3, v16, v17);
  return kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v18, v19);
}

void kaldi::nnet1::LayerNorm::~LayerNorm(kaldi::nnet1::LayerNorm *this)
{
  kaldi::nnet1::LayerNorm::~LayerNorm(this);
  JUMPOUT(0x1DF0ED014);
}

{
  *(_QWORD *)this = &off_1EA92D798;
  *((_QWORD *)this + 11) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 88);
  *((_QWORD *)this + 7) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 56);
  kaldi::nnet1::Component::~Component(this);
}

kaldi::nnet1::LayerNorm *kaldi::nnet1::LayerNorm::Copy(kaldi::nnet1::LayerNorm *this)
{
  kaldi::nnet1::LayerNorm *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;

  v2 = (kaldi::nnet1::LayerNorm *)operator new();
  kaldi::nnet1::LayerNorm::LayerNorm(v2, this, v3, v4, v5);
  return v2;
}

void sub_1DE490794(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C40D558B94DLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LayerNorm::GetType(kaldi::nnet1::LayerNorm *this)
{
  return 290;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 536);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 257);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 258);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 536);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 262);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 263);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 560);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 268);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 269);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 560);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 273);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 274);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 608);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 279);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 280);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 608);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 284);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 285);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 208))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 290);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 584);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 291);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 292);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 208))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 296);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 584);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 297);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 298);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 224))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 303);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 632);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 304);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 305);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 224))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 309);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 632);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 310);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 311);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateGradients(a1);
  if (*(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80) == 1)
    v4 = 0;
  else
    v4 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80);
  v5 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v5);
  v6 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v6);
  v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, v4);
  result = kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
  if (*(_BYTE *)(a1 + 208))
  {
    v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v4);
    result = kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v9);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, v4);
    return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v10);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  char v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v54;
  uint64_t v55;
  uint64_t v56[35];

  v4 = a2 + *(_QWORD *)(*(_QWORD *)a2 - 24);
  *(_QWORD *)(a1 + 848) = off_1EA92D6D8;
  v5 = *(_QWORD *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(_QWORD *)(a1 + 856) = v5;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 872), *(const void **)(v4 + 24), *(_QWORD *)(v4 + 32), (uint64_t)(*(_QWORD *)(v4 + 32) - *(_QWORD *)(v4 + 24)) >> 3);
  *(_QWORD *)(a1 + 848) = off_1EA929750;
  *(_QWORD *)(a1 + 896) = &off_1EA9284D0;
  v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1EA91BF78, a2);
  *(_QWORD *)(a1 + 160) = &unk_1EA926F98;
  *(_QWORD *)(a1 + 168) = &unk_1EA926FC0;
  *(_QWORD *)a1 = &off_1EA926E08;
  *(_QWORD *)(a1 + 848) = &off_1EA9270F8;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = 0;
  v7 = *(_BYTE *)(a2 + 240);
  v8 = *(_BYTE *)(a2 + 241);
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 240) = v7;
  *(_BYTE *)(a1 + 241) = v8;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 248), *(_QWORD *)(a2 + 248), *(_QWORD *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 256) - *(_QWORD *)(a2 + 248)) >> 4));
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 272), *(_QWORD *)(a2 + 272), *(_QWORD *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 4));
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 296), *(_QWORD *)(a2 + 296), *(_QWORD *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 4));
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 320), *(_QWORD *)(a2 + 320), *(_QWORD *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 4));
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 344), *(_QWORD *)(a2 + 344), *(_QWORD *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344)) >> 4));
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 368), *(_QWORD *)(a2 + 368), *(_QWORD *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 376) - *(_QWORD *)(a2 + 368)) >> 4));
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 392), *(_QWORD *)(a2 + 392), *(_QWORD *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 400) - *(_QWORD *)(a2 + 392)) >> 4));
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 416), *(_QWORD *)(a2 + 416), *(_QWORD *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 424) - *(_QWORD *)(a2 + 416)) >> 4));
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 440), *(_QWORD *)(a2 + 440), *(_QWORD *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 448) - *(_QWORD *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 480), *(const void **)(a2 + 480), *(_QWORD *)(a2 + 488), (uint64_t)(*(_QWORD *)(a2 + 488) - *(_QWORD *)(a2 + 480)) >> 2);
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 504), *(const void **)(a2 + 504), *(_QWORD *)(a2 + 512), (uint64_t)(*(_QWORD *)(a2 + 512) - *(_QWORD *)(a2 + 504)) >> 2);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 536), (uint64_t)(*(_QWORD *)(a2 + 544) - *(_QWORD *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 560), (uint64_t)(*(_QWORD *)(a2 + 568) - *(_QWORD *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 584), (uint64_t)(*(_QWORD *)(a2 + 592) - *(_QWORD *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 608), (uint64_t)(*(_QWORD *)(a2 + 616) - *(_QWORD *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 632), (uint64_t)(*(_QWORD *)(a2 + 640) - *(_QWORD *)(a2 + 632)) >> 3);
  *(_QWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 656), *(_QWORD *)(a2 + 656), *(_QWORD *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 664) - *(_QWORD *)(a2 + 656)) >> 4));
  *(_QWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 680), *(_QWORD *)(a2 + 680), *(_QWORD *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 688) - *(_QWORD *)(a2 + 680)) >> 4));
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 704), *(_QWORD *)(a2 + 704), *(_QWORD *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 712) - *(_QWORD *)(a2 + 704)) >> 4));
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 728), *(_QWORD *)(a2 + 728), *(_QWORD *)(a2 + 736), (uint64_t)(*(_QWORD *)(a2 + 736) - *(_QWORD *)(a2 + 728)) >> 5);
  *(_QWORD *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 752), *(_QWORD *)(a2 + 752), *(_QWORD *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 760) - *(_QWORD *)(a2 + 752)) >> 4));
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v56, "LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 248);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v56);
  }
  v10 = *(_QWORD *)(a2 + 184);
  if (v10)
  {
    v11 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v11, v10);
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), v11);
  }
  v12 = *(_QWORD *)(a2 + 192);
  if (v12)
  {
    v13 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v13, v12);
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), v13);
  }
  v14 = *(_QWORD **)(a2 + 200);
  if (v14)
  {
    kaldi::NewCuSubOrVec<float>(v14, 0, v56);
    v15 = v56[0];
    v56[0] = 0;
    v16 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v15;
    if (v16)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
      v17 = v56[0];
      v56[0] = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    }
  }
  v18 = *(_QWORD *)(a2 + 216);
  if (v18)
  {
    kaldi::NewCuSubOrMat<float>(v18, 0, v56);
    v19 = v56[0];
    v56[0] = 0;
    v20 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v19;
    if (v20)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
      v21 = v56[0];
      v56[0] = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
    }
  }
  v22 = *(_QWORD *)(a2 + 232);
  if (v22)
  {
    v23 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v23, v22);
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), v23);
  }
  v24 = *(_QWORD *)(a1 + 544);
  v25 = *(_QWORD *)(a1 + 536);
  v26 = (v24 - v25) >> 3;
  if (v26 != (uint64_t)(*(_QWORD *)(a1 + 568) - *(_QWORD *)(a1 + 560)) >> 3)
  {
    v54 = "input_weights_gradient_.size() == recurrent_weights_gradient_.size()";
    v55 = 259;
    goto LABEL_60;
  }
  if (v26 != (uint64_t)(*(_QWORD *)(a1 + 616) - *(_QWORD *)(a1 + 608)) >> 3)
  {
    v54 = "input_weights_gradient_.size() == bias_gradient_.size()";
    v55 = 260;
    goto LABEL_60;
  }
  if (*(_BYTE *)(a1 + 208) && v26 != (uint64_t)(*(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584)) >> 3)
  {
    v54 = "input_weights_gradient_.size() == peephole_weights_gradient_.size()";
    v55 = 262;
    goto LABEL_60;
  }
  if (*(_BYTE *)(a1 + 224) && v26 != (uint64_t)(*(_QWORD *)(a1 + 640) - *(_QWORD *)(a1 + 632)) >> 3)
  {
    v54 = "input_weights_gradient_.size() == projection_weights_gradient_.size()";
    v55 = 265;
LABEL_60:
    kaldi::KaldiAssertFailure_((kaldi *)"LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)v55, v54, v9);
  }
  if (v24 != v25)
  {
    v27 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a2 + 536) + 8 * v27))
      {
        v28 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a2, v27);
        kaldi::NewCuSubOrMat<float>(v28, 0, v56);
        v29 = *(_QWORD *)(a1 + 536);
        v30 = v56[0];
        v56[0] = 0;
        v31 = *(_QWORD *)(v29 + 8 * v27);
        *(_QWORD *)(v29 + 8 * v27) = v30;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
        v32 = v56[0];
        v56[0] = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 560) + 8 * v27))
      {
        v33 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a2, v27);
        kaldi::NewCuSubOrMat<float>(v33, 0, v56);
        v34 = *(_QWORD *)(a1 + 560);
        v35 = v56[0];
        v56[0] = 0;
        v36 = *(_QWORD *)(v34 + 8 * v27);
        *(_QWORD *)(v34 + 8 * v27) = v35;
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
        v37 = v56[0];
        v56[0] = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 608) + 8 * v27))
      {
        v38 = (_QWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a2, v27);
        kaldi::NewCuSubOrVec<float>(v38, 0, v56);
        v39 = *(_QWORD *)(a1 + 608);
        v40 = v56[0];
        v56[0] = 0;
        v41 = *(_QWORD *)(v39 + 8 * v27);
        *(_QWORD *)(v39 + 8 * v27) = v40;
        if (v41)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
        v42 = v56[0];
        v56[0] = 0;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
      }
      if (*(_BYTE *)(a1 + 208) && *(_QWORD *)(*(_QWORD *)(a2 + 584) + 8 * v27))
      {
        v43 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a2, v27);
        kaldi::NewCuSubOrMat<float>(v43, 0, v56);
        v44 = *(_QWORD *)(a1 + 584);
        v45 = v56[0];
        v56[0] = 0;
        v46 = *(_QWORD *)(v44 + 8 * v27);
        *(_QWORD *)(v44 + 8 * v27) = v45;
        if (v46)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46);
        v47 = v56[0];
        v56[0] = 0;
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
      }
      if (*(_BYTE *)(a1 + 224) && *(_QWORD *)(*(_QWORD *)(a2 + 632) + 8 * v27))
      {
        v48 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a2, v27);
        kaldi::NewCuSubOrMat<float>(v48, 0, v56);
        v49 = *(_QWORD *)(a1 + 632);
        v50 = v56[0];
        v56[0] = 0;
        v51 = *(_QWORD *)(v49 + 8 * v27);
        *(_QWORD *)(v49 + 8 * v27) = v50;
        if (v51)
          (*(void (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51);
        v52 = v56[0];
        v56[0] = 0;
        if (v52)
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52);
      }
      ++v27;
    }
    while (v27 < (uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 3);
  }
  if (*(_QWORD *)(a2 + 784) != *(_QWORD *)(a2 + 776))
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  return a1;
}

void sub_1DE491640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, uint64_t a20,uint64_t a21,void **a22,void **a23,void **a24,void **a25,void **a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,void **a30)
{
  _QWORD *v30;
  void **v31;
  uint64_t v32;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;

  MEMORY[0x1DF0ED014](v32, 0x10D0C4068EB0291);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v31);
  a30 = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a10;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a11;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  v34 = *a14;
  if (*a14)
  {
    v30[64] = v34;
    operator delete(v34);
  }
  v35 = *a22;
  if (*a22)
  {
    v30[61] = v35;
    operator delete(v35);
  }
  a30 = a15;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a23;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a24;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a27, 0);
  v36 = v30[27];
  v30[27] = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
  v37 = v30[25];
  v30[25] = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a28, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a29, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a20);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a21);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v30, (uint64_t *)&off_1EA91BF78);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v30 + 106));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateGradients(a1);
  if (*(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80) == 1)
    v4 = 0;
  else
    v4 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80);
  v5 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v5);
  v6 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v6);
  v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, v4);
  result = kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
  if (*(_BYTE *)(a1 + 208))
  {
    v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v4);
    result = kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v9);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, v4);
    return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v10);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  char v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v54;
  uint64_t v55;
  uint64_t v56[35];

  v4 = a2 + *(_QWORD *)(*(_QWORD *)a2 - 24);
  *(_QWORD *)(a1 + 848) = off_1EA92D6D8;
  v5 = *(_QWORD *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(_QWORD *)(a1 + 856) = v5;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 872), *(const void **)(v4 + 24), *(_QWORD *)(v4 + 32), (uint64_t)(*(_QWORD *)(v4 + 32) - *(_QWORD *)(v4 + 24)) >> 3);
  *(_QWORD *)(a1 + 848) = off_1EA929750;
  *(_QWORD *)(a1 + 896) = &off_1EA9284D0;
  v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1EA91BF98, a2);
  *(_QWORD *)(a1 + 160) = &unk_1EA9273B8;
  *(_QWORD *)(a1 + 168) = &unk_1EA9273E0;
  *(_QWORD *)a1 = &off_1EA927228;
  *(_QWORD *)(a1 + 848) = &off_1EA927518;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = 0;
  v7 = *(_BYTE *)(a2 + 240);
  v8 = *(_BYTE *)(a2 + 241);
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 240) = v7;
  *(_BYTE *)(a1 + 241) = v8;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 248), *(_QWORD *)(a2 + 248), *(_QWORD *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 256) - *(_QWORD *)(a2 + 248)) >> 4));
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 272), *(_QWORD *)(a2 + 272), *(_QWORD *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 4));
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 296), *(_QWORD *)(a2 + 296), *(_QWORD *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 4));
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 320), *(_QWORD *)(a2 + 320), *(_QWORD *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 4));
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 344), *(_QWORD *)(a2 + 344), *(_QWORD *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344)) >> 4));
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 368), *(_QWORD *)(a2 + 368), *(_QWORD *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 376) - *(_QWORD *)(a2 + 368)) >> 4));
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 392), *(_QWORD *)(a2 + 392), *(_QWORD *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 400) - *(_QWORD *)(a2 + 392)) >> 4));
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 416), *(_QWORD *)(a2 + 416), *(_QWORD *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 424) - *(_QWORD *)(a2 + 416)) >> 4));
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 440), *(_QWORD *)(a2 + 440), *(_QWORD *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 448) - *(_QWORD *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 480), *(const void **)(a2 + 480), *(_QWORD *)(a2 + 488), (uint64_t)(*(_QWORD *)(a2 + 488) - *(_QWORD *)(a2 + 480)) >> 2);
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 504), *(const void **)(a2 + 504), *(_QWORD *)(a2 + 512), (uint64_t)(*(_QWORD *)(a2 + 512) - *(_QWORD *)(a2 + 504)) >> 2);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 536), (uint64_t)(*(_QWORD *)(a2 + 544) - *(_QWORD *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 560), (uint64_t)(*(_QWORD *)(a2 + 568) - *(_QWORD *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 584), (uint64_t)(*(_QWORD *)(a2 + 592) - *(_QWORD *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 608), (uint64_t)(*(_QWORD *)(a2 + 616) - *(_QWORD *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 632), (uint64_t)(*(_QWORD *)(a2 + 640) - *(_QWORD *)(a2 + 632)) >> 3);
  *(_QWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 656), *(_QWORD *)(a2 + 656), *(_QWORD *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 664) - *(_QWORD *)(a2 + 656)) >> 4));
  *(_QWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 680), *(_QWORD *)(a2 + 680), *(_QWORD *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 688) - *(_QWORD *)(a2 + 680)) >> 4));
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 704), *(_QWORD *)(a2 + 704), *(_QWORD *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 712) - *(_QWORD *)(a2 + 704)) >> 4));
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 728), *(_QWORD *)(a2 + 728), *(_QWORD *)(a2 + 736), (uint64_t)(*(_QWORD *)(a2 + 736) - *(_QWORD *)(a2 + 728)) >> 5);
  *(_QWORD *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 752), *(_QWORD *)(a2 + 752), *(_QWORD *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 760) - *(_QWORD *)(a2 + 752)) >> 4));
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v56, "LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 248);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v56);
  }
  v10 = *(_QWORD *)(a2 + 184);
  if (v10)
  {
    v11 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix(v11, v10);
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), v11);
  }
  v12 = *(_QWORD *)(a2 + 192);
  if (v12)
  {
    v13 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix(v13, v12);
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), v13);
  }
  v14 = *(_QWORD **)(a2 + 200);
  if (v14)
  {
    kaldi::NewCuSubOrVec<float>(v14, 0, v56);
    v15 = v56[0];
    v56[0] = 0;
    v16 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v15;
    if (v16)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
      v17 = v56[0];
      v56[0] = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    }
  }
  v18 = *(_QWORD *)(a2 + 216);
  if (v18)
  {
    kaldi::NewCuSubOrMat<float>(v18, 0, v56);
    v19 = v56[0];
    v56[0] = 0;
    v20 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v19;
    if (v20)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
      v21 = v56[0];
      v56[0] = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
    }
  }
  v22 = *(_QWORD *)(a2 + 232);
  if (v22)
  {
    v23 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix(v23, v22);
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), v23);
  }
  v24 = *(_QWORD *)(a1 + 544);
  v25 = *(_QWORD *)(a1 + 536);
  v26 = (v24 - v25) >> 3;
  if (v26 != (uint64_t)(*(_QWORD *)(a1 + 568) - *(_QWORD *)(a1 + 560)) >> 3)
  {
    v54 = "input_weights_gradient_.size() == recurrent_weights_gradient_.size()";
    v55 = 259;
    goto LABEL_60;
  }
  if (v26 != (uint64_t)(*(_QWORD *)(a1 + 616) - *(_QWORD *)(a1 + 608)) >> 3)
  {
    v54 = "input_weights_gradient_.size() == bias_gradient_.size()";
    v55 = 260;
    goto LABEL_60;
  }
  if (*(_BYTE *)(a1 + 208) && v26 != (uint64_t)(*(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584)) >> 3)
  {
    v54 = "input_weights_gradient_.size() == peephole_weights_gradient_.size()";
    v55 = 262;
    goto LABEL_60;
  }
  if (*(_BYTE *)(a1 + 224) && v26 != (uint64_t)(*(_QWORD *)(a1 + 640) - *(_QWORD *)(a1 + 632)) >> 3)
  {
    v54 = "input_weights_gradient_.size() == projection_weights_gradient_.size()";
    v55 = 265;
LABEL_60:
    kaldi::KaldiAssertFailure_((kaldi *)"LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)v55, v54, v9);
  }
  if (v24 != v25)
  {
    v27 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a2 + 536) + 8 * v27))
      {
        v28 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a2, v27);
        kaldi::NewCuSubOrMat<float>(v28, 0, v56);
        v29 = *(_QWORD *)(a1 + 536);
        v30 = v56[0];
        v56[0] = 0;
        v31 = *(_QWORD *)(v29 + 8 * v27);
        *(_QWORD *)(v29 + 8 * v27) = v30;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
        v32 = v56[0];
        v56[0] = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 560) + 8 * v27))
      {
        v33 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a2, v27);
        kaldi::NewCuSubOrMat<float>(v33, 0, v56);
        v34 = *(_QWORD *)(a1 + 560);
        v35 = v56[0];
        v56[0] = 0;
        v36 = *(_QWORD *)(v34 + 8 * v27);
        *(_QWORD *)(v34 + 8 * v27) = v35;
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
        v37 = v56[0];
        v56[0] = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 608) + 8 * v27))
      {
        v38 = (_QWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a2, v27);
        kaldi::NewCuSubOrVec<float>(v38, 0, v56);
        v39 = *(_QWORD *)(a1 + 608);
        v40 = v56[0];
        v56[0] = 0;
        v41 = *(_QWORD *)(v39 + 8 * v27);
        *(_QWORD *)(v39 + 8 * v27) = v40;
        if (v41)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
        v42 = v56[0];
        v56[0] = 0;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
      }
      if (*(_BYTE *)(a1 + 208) && *(_QWORD *)(*(_QWORD *)(a2 + 584) + 8 * v27))
      {
        v43 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a2, v27);
        kaldi::NewCuSubOrMat<float>(v43, 0, v56);
        v44 = *(_QWORD *)(a1 + 584);
        v45 = v56[0];
        v56[0] = 0;
        v46 = *(_QWORD *)(v44 + 8 * v27);
        *(_QWORD *)(v44 + 8 * v27) = v45;
        if (v46)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46);
        v47 = v56[0];
        v56[0] = 0;
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
      }
      if (*(_BYTE *)(a1 + 224) && *(_QWORD *)(*(_QWORD *)(a2 + 632) + 8 * v27))
      {
        v48 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a2, v27);
        kaldi::NewCuSubOrMat<float>(v48, 0, v56);
        v49 = *(_QWORD *)(a1 + 632);
        v50 = v56[0];
        v56[0] = 0;
        v51 = *(_QWORD *)(v49 + 8 * v27);
        *(_QWORD *)(v49 + 8 * v27) = v50;
        if (v51)
          (*(void (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51);
        v52 = v56[0];
        v56[0] = 0;
        if (v52)
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52);
      }
      ++v27;
    }
    while (v27 < (uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 3);
  }
  if (*(_QWORD *)(a2 + 784) != *(_QWORD *)(a2 + 776))
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  return a1;
}

void sub_1DE492340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, uint64_t a20,uint64_t a21,void **a22,void **a23,void **a24,void **a25,void **a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,void **a30)
{
  _QWORD *v30;
  void **v31;
  uint64_t v32;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;

  MEMORY[0x1DF0ED014](v32, 0x10D0C4068EB0291);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v31);
  a30 = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a10;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a11;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  v34 = *a14;
  if (*a14)
  {
    v30[64] = v34;
    operator delete(v34);
  }
  v35 = *a22;
  if (*a22)
  {
    v30[61] = v35;
    operator delete(v35);
  }
  a30 = a15;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a23;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a24;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a27, 0);
  v36 = v30[27];
  v30[27] = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
  v37 = v30[25];
  v30[25] = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a28, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a29, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a20);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a21);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v30, (uint64_t *)&off_1EA91BF98);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v30 + 106));
  _Unwind_Resume(a1);
}

double kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::LstmComponent(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)(a1 + 856) = a2;
  *(_DWORD *)(a1 + 860) = a3;
  *(_WORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 896) = &off_1EA9284D0;
  *(_OWORD *)(a1 + 904) = xmmword_1DEC3D450;
  *(_QWORD *)(a1 + 920) = 0x3BF800000;
  *(_DWORD *)(a1 + 928) = 1;
  *(_WORD *)(a1 + 932) = 0;
  *(_BYTE *)(a1 + 934) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &unk_1EA927930;
  *(_DWORD *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 56) = xmmword_1DEC3D450;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)(a1 + 48) = &off_1EA92B868;
  *(_QWORD *)(a1 + 88) = &unk_1EA92B888;
  *(_QWORD *)(a1 + 96) = 0x100000001;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)a1 = &off_1EA9269E8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 848) = &off_1EA926CD8;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = &unk_1EA926B78;
  *(_QWORD *)(a1 + 168) = &unk_1EA926BA0;
  *(_DWORD *)(a1 + 176) = a3;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_WORD *)(a1 + 208) = 1;
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_WORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0x3DCCCCCD3F800000;
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 513) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(a1);
  if (*(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80) == 1)
    v4 = 0;
  else
    v4 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80);
  v5 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v5);
  v6 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v4);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v6);
  v7 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v4);
  result = kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v7);
  if (*(_BYTE *)(a1 + 208))
  {
    v9 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v4);
    result = kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v9);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v10 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v4);
    return kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, v10);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::LstmComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  char v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63[35];

  v4 = a2 + *(_QWORD *)(*(_QWORD *)a2 - 24);
  *(_QWORD *)(a1 + 848) = off_1EA92D6D8;
  v5 = *(_QWORD *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(_QWORD *)(a1 + 856) = v5;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 872), *(const void **)(v4 + 24), *(_QWORD *)(v4 + 32), (uint64_t)(*(_QWORD *)(v4 + 32) - *(_QWORD *)(v4 + 24)) >> 3);
  *(_QWORD *)(a1 + 848) = off_1EA929750;
  *(_QWORD *)(a1 + 896) = &off_1EA9284D0;
  v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1EA91BF58, a2);
  *(_QWORD *)(a1 + 160) = &unk_1EA926B78;
  *(_QWORD *)(a1 + 168) = &unk_1EA926BA0;
  *(_QWORD *)a1 = &off_1EA9269E8;
  *(_QWORD *)(a1 + 848) = &off_1EA926CD8;
  v7 = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = 0;
  v62 = (uint64_t *)(a1 + 184);
  *(_DWORD *)(a1 + 176) = v7;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = 0;
  LOBYTE(v7) = *(_BYTE *)(a2 + 240);
  v8 = *(_BYTE *)(a2 + 241);
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 240) = v7;
  *(_BYTE *)(a1 + 241) = v8;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 248), *(_QWORD *)(a2 + 248), *(_QWORD *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 256) - *(_QWORD *)(a2 + 248)) >> 4));
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 272), *(_QWORD *)(a2 + 272), *(_QWORD *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 4));
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 296), *(_QWORD *)(a2 + 296), *(_QWORD *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 4));
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 320), *(_QWORD *)(a2 + 320), *(_QWORD *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 4));
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 344), *(_QWORD *)(a2 + 344), *(_QWORD *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344)) >> 4));
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 368), *(_QWORD *)(a2 + 368), *(_QWORD *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 376) - *(_QWORD *)(a2 + 368)) >> 4));
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 392), *(_QWORD *)(a2 + 392), *(_QWORD *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 400) - *(_QWORD *)(a2 + 392)) >> 4));
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 416), *(_QWORD *)(a2 + 416), *(_QWORD *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 424) - *(_QWORD *)(a2 + 416)) >> 4));
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 440), *(_QWORD *)(a2 + 440), *(_QWORD *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 448) - *(_QWORD *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 480), *(const void **)(a2 + 480), *(_QWORD *)(a2 + 488), (uint64_t)(*(_QWORD *)(a2 + 488) - *(_QWORD *)(a2 + 480)) >> 2);
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 504), *(const void **)(a2 + 504), *(_QWORD *)(a2 + 512), (uint64_t)(*(_QWORD *)(a2 + 512) - *(_QWORD *)(a2 + 504)) >> 2);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 536), (uint64_t)(*(_QWORD *)(a2 + 544) - *(_QWORD *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 560), (uint64_t)(*(_QWORD *)(a2 + 568) - *(_QWORD *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 584), (uint64_t)(*(_QWORD *)(a2 + 592) - *(_QWORD *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 608), (uint64_t)(*(_QWORD *)(a2 + 616) - *(_QWORD *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 632), (uint64_t)(*(_QWORD *)(a2 + 640) - *(_QWORD *)(a2 + 632)) >> 3);
  *(_QWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 656), *(_QWORD *)(a2 + 656), *(_QWORD *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 664) - *(_QWORD *)(a2 + 656)) >> 4));
  *(_QWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 680), *(_QWORD *)(a2 + 680), *(_QWORD *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 688) - *(_QWORD *)(a2 + 680)) >> 4));
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 704), *(_QWORD *)(a2 + 704), *(_QWORD *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 712) - *(_QWORD *)(a2 + 704)) >> 4));
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 728), *(_QWORD *)(a2 + 728), *(_QWORD *)(a2 + 736), (uint64_t)(*(_QWORD *)(a2 + 736) - *(_QWORD *)(a2 + 728)) >> 5);
  *(_QWORD *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 752), *(_QWORD *)(a2 + 752), *(_QWORD *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 760) - *(_QWORD *)(a2 + 752)) >> 4));
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v63, "LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 151);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v63);
  }
  v10 = *(_QWORD *)(a2 + 184);
  if (v10)
  {
    kaldi::NewCuSubOrMat<float>(v10, 0, v63);
    v11 = v63[0];
    v63[0] = 0;
    v12 = *v62;
    *v62 = v11;
    if (v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      v13 = v63[0];
      v63[0] = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
    }
  }
  v14 = *(_QWORD *)(a2 + 192);
  if (v14)
  {
    kaldi::NewCuSubOrMat<float>(v14, 0, v63);
    v15 = v63[0];
    v63[0] = 0;
    v16 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v15;
    if (v16)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
      v17 = v63[0];
      v63[0] = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
    }
  }
  v18 = *(_QWORD **)(a2 + 200);
  if (v18)
  {
    kaldi::NewCuSubOrVec<float>(v18, 0, v63);
    v19 = v63[0];
    v63[0] = 0;
    v20 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v19;
    if (v20)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
      v21 = v63[0];
      v63[0] = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    }
  }
  v22 = *(_QWORD *)(a2 + 216);
  if (v22)
  {
    kaldi::NewCuSubOrMat<float>(v22, 0, v63);
    v23 = v63[0];
    v63[0] = 0;
    v24 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v23;
    if (v24)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
      v25 = v63[0];
      v63[0] = 0;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
    }
  }
  v26 = *(_QWORD *)(a2 + 232);
  if (v26)
  {
    kaldi::NewCuSubOrMat<float>(v26, 0, v63);
    v27 = v63[0];
    v63[0] = 0;
    v28 = *(_QWORD *)(a1 + 232);
    *(_QWORD *)(a1 + 232) = v27;
    if (v28)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
      v29 = v63[0];
      v63[0] = 0;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
    }
  }
  v30 = *(_QWORD *)(a1 + 544);
  v31 = *(_QWORD *)(a1 + 536);
  v32 = (v30 - v31) >> 3;
  if (v32 != (uint64_t)(*(_QWORD *)(a1 + 568) - *(_QWORD *)(a1 + 560)) >> 3)
  {
    v60 = "input_weights_gradient_.size() == recurrent_weights_gradient_.size()";
    v61 = 162;
    goto LABEL_66;
  }
  if (v32 != (uint64_t)(*(_QWORD *)(a1 + 616) - *(_QWORD *)(a1 + 608)) >> 3)
  {
    v60 = "input_weights_gradient_.size() == bias_gradient_.size()";
    v61 = 163;
    goto LABEL_66;
  }
  if (*(_BYTE *)(a1 + 208) && v32 != (uint64_t)(*(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584)) >> 3)
  {
    v60 = "input_weights_gradient_.size() == peephole_weights_gradient_.size()";
    v61 = 165;
    goto LABEL_66;
  }
  if (*(_BYTE *)(a1 + 224) && v32 != (uint64_t)(*(_QWORD *)(a1 + 640) - *(_QWORD *)(a1 + 632)) >> 3)
  {
    v60 = "input_weights_gradient_.size() == projection_weights_gradient_.size()";
    v61 = 168;
LABEL_66:
    kaldi::KaldiAssertFailure_((kaldi *)"LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)v61, v60, v9);
  }
  if (v30 != v31)
  {
    v33 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a2 + 536) + 8 * v33))
      {
        v34 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a2, v33);
        kaldi::NewCuSubOrMat<float>(v34, 0, v63);
        v35 = *(_QWORD *)(a1 + 536);
        v36 = v63[0];
        v63[0] = 0;
        v37 = *(_QWORD *)(v35 + 8 * v33);
        *(_QWORD *)(v35 + 8 * v33) = v36;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
        v38 = v63[0];
        v63[0] = 0;
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 560) + 8 * v33))
      {
        v39 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a2, v33);
        kaldi::NewCuSubOrMat<float>(v39, 0, v63);
        v40 = *(_QWORD *)(a1 + 560);
        v41 = v63[0];
        v63[0] = 0;
        v42 = *(_QWORD *)(v40 + 8 * v33);
        *(_QWORD *)(v40 + 8 * v33) = v41;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
        v43 = v63[0];
        v63[0] = 0;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 608) + 8 * v33))
      {
        v44 = (_QWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a2, v33);
        kaldi::NewCuSubOrVec<float>(v44, 0, v63);
        v45 = *(_QWORD *)(a1 + 608);
        v46 = v63[0];
        v63[0] = 0;
        v47 = *(_QWORD *)(v45 + 8 * v33);
        *(_QWORD *)(v45 + 8 * v33) = v46;
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
        v48 = v63[0];
        v63[0] = 0;
        if (v48)
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
      }
      if (*(_BYTE *)(a1 + 208) && *(_QWORD *)(*(_QWORD *)(a2 + 584) + 8 * v33))
      {
        v49 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a2, v33);
        kaldi::NewCuSubOrMat<float>(v49, 0, v63);
        v50 = *(_QWORD *)(a1 + 584);
        v51 = v63[0];
        v63[0] = 0;
        v52 = *(_QWORD *)(v50 + 8 * v33);
        *(_QWORD *)(v50 + 8 * v33) = v51;
        if (v52)
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52);
        v53 = v63[0];
        v63[0] = 0;
        if (v53)
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53);
      }
      if (*(_BYTE *)(a1 + 224) && *(_QWORD *)(*(_QWORD *)(a2 + 632) + 8 * v33))
      {
        v54 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a2, v33);
        kaldi::NewCuSubOrMat<float>(v54, 0, v63);
        v55 = *(_QWORD *)(a1 + 632);
        v56 = v63[0];
        v63[0] = 0;
        v57 = *(_QWORD *)(v55 + 8 * v33);
        *(_QWORD *)(v55 + 8 * v33) = v56;
        if (v57)
          (*(void (**)(uint64_t))(*(_QWORD *)v57 + 24))(v57);
        v58 = v63[0];
        v63[0] = 0;
        if (v58)
          (*(void (**)(uint64_t))(*(_QWORD *)v58 + 24))(v58);
      }
      ++v33;
    }
    while (v33 < (uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 3);
  }
  if (*(_QWORD *)(a2 + 784) != *(_QWORD *)(a2 + 776))
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  return a1;
}

void sub_1DE4931DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t a28)
{
  _QWORD *v28;
  void **v29;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v29);
  a28 = a10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a11;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a14;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  v31 = *a15;
  if (*a15)
  {
    v28[64] = v31;
    operator delete(v31);
  }
  v32 = *a16;
  if (*a16)
  {
    v28[61] = v32;
    operator delete(v32);
  }
  a28 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a23;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a24;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = a20;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  v33 = v28[29];
  v28[29] = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
  v34 = v28[27];
  v28[27] = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
  v35 = v28[25];
  v28[25] = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
  v36 = v28[24];
  v28[24] = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
  v37 = *a27;
  *a27 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a21);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a22);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v28, (uint64_t *)&off_1EA91BF58);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v28 + 106));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = a2[3];
  *(_QWORD *)(a1 + 160) = &unk_1EA926B78;
  v5 = a1 + 160;
  *(_QWORD *)(a1 + 168) = &unk_1EA926BA0;
  v6 = a1 + 168;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 776));
  v14 = (void **)(v5 + 592);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(v5 + 568);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(v5 + 544);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(v5 + 520);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(v5 + 496);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(v5 + 472);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(v5 + 448);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(v5 + 424);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(v5 + 400);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(v5 + 376);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v7 = *(void **)(v5 + 344);
  if (v7)
  {
    *(_QWORD *)(a1 + 512) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 480);
  if (v8)
  {
    *(_QWORD *)(a1 + 488) = v8;
    operator delete(v8);
  }
  v14 = (void **)(a1 + 440);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(a1 + 416);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(a1 + 392);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(a1 + 368);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(a1 + 344);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(a1 + 320);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(a1 + 296);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(a1 + 272);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v14 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v9 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  v10 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  v11 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  v12 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  v13 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v6);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v5);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, a2 + 1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(uint64_t a1)
{
  uint64_t v2;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v2 + 848));
  return a1;
}

void `non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 688));
}

{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 680));
}

{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(a1 - 160);
}

{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(a1 - 168);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(_QWORD *a1)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 848));
}

{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::~LstmComponent(uint64_t a1)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 848));
  JUMPOUT(0x1DF0ED014);
}

char *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Copy(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::LstmComponent((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_1DE493874(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

char *`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Copy(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Copy((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

char *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent<kaldi::CuMatrixBase<float>>((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_1DE4938F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

char *`non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(a1 - 160);
}

char *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent<kaldi::CuMatrixBase<float>>((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_1DE49396C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

char *`non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(a1 - 168);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  void **v11;
  void *v14;
  BOOL v23;
  float *v24;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  int *v30;
  BOOL v36;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  void *v43;
  void *v44;
  int v45;
  BOOL v48;
  std::string *v49;
  int inited;
  float v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  unsigned int v61;
  unint64_t v62;
  float v63;
  float v64;
  float v65;
  float *v66;
  uint64_t v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  float v75;
  uint64_t v76;
  float v77;
  uint64_t v78;
  _QWORD *v79;
  void **v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  float *v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE v88[16];
  uint64_t v89;
  void *__p;
  void *v91;
  void **v92[34];
  void *v93[3];
  std::string v94;
  std::string v95;
  float v96;
  int v97;
  int v98;
  float v99;
  int v100;
  int v101;
  unsigned int v102;

  v6 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  v101 = -1;
  v102 = v6;
  v99 = 2.0;
  *(float *)&v100 = -2.0;
  *(float *)&v97 = -2.0;
  v98 = 1036831949;
  v96 = 2.0;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v95);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &v94);
  memset(v93, 0, sizeof(v93));
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_170;
    kaldi::ReadToken(a2, 0, (uint64_t)v93, v7, v8);
    if ((SHIBYTE(v93[2]) & 0x80000000) == 0)
      break;
    v14 = v93[1];
    if (v93[1] == (void *)10)
    {
      if (*(_QWORD *)v93[0] == 0x6C6C65436D754E3CLL && *((_WORD *)v93[0] + 4) == 15987)
      {
LABEL_86:
        v30 = (int *)&v102;
LABEL_159:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v30, v9, v10);
        goto LABEL_168;
      }
      if (*(_QWORD *)v93[0] == 0x61654D736169423CLL && *((_WORD *)v93[0] + 4) == 15982)
      {
LABEL_145:
        v24 = (float *)&v100;
        goto LABEL_156;
      }
      v14 = v93[1];
    }
    if (v14 == (void *)11)
    {
      if (*(_QWORD *)v93[0] == 0x6E6152736169423CLL && *(_QWORD *)((char *)v93[0] + 3) == 0x3E65676E61527361)
      {
LABEL_121:
        v24 = &v99;
        goto LABEL_156;
      }
      v14 = v93[1];
    }
    if (v14 == (void *)20)
    {
      if (*(_QWORD *)v93[0] == 0x47746567726F463CLL
        && *((_QWORD *)v93[0] + 1) == 0x4D73616942657461
        && *((_DWORD *)v93[0] + 4) == 1047421285)
      {
LABEL_95:
        v24 = (float *)&v97;
LABEL_156:
        kaldi::ReadBasicType<float>(a2, 0, v24, v9, v10);
        goto LABEL_168;
      }
      v14 = v93[1];
    }
    if (v14 == (void *)21)
    {
      if (*(_QWORD *)v93[0] == 0x47746567726F463CLL
        && *((_QWORD *)v93[0] + 1) == 0x5273616942657461
        && *(_QWORD *)((char *)v93[0] + 13) == 0x3E65676E61527361)
      {
LABEL_146:
        v24 = &v96;
        goto LABEL_156;
      }
      v14 = v93[1];
    }
    if (v14 == (void *)13)
    {
      if (*(_QWORD *)v93[0] == 0x74536D617261503CLL && *(_QWORD *)((char *)v93[0] + 5) == 0x3E7665646474536DLL)
      {
LABEL_109:
        v24 = (float *)&v98;
        goto LABEL_156;
      }
      v14 = v93[1];
    }
    if (v14 == (void *)15)
    {
      v23 = *(_QWORD *)v93[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v93[0] + 7) == 0x3E66656F43657461;
      v24 = (float *)(a1 + 464);
      if (v23)
        goto LABEL_156;
      v14 = v93[1];
    }
    if (v14 == (void *)25)
    {
      v27 = *(_QWORD *)v93[0] == 0x7463656A6F72503CLL
         && *((_QWORD *)v93[0] + 1) == 0x6E7261654C6E6F69
         && *((_QWORD *)v93[0] + 2) == 0x66656F4365746152
         && *((_BYTE *)v93[0] + 24) == 62;
      v24 = (float *)(a1 + 468);
      if (v27)
        goto LABEL_156;
      v14 = v93[1];
    }
    if (v14 == (void *)9)
    {
      v28 = *(_QWORD *)v93[0] == 0x6D726F4E78614D3CLL && *((_BYTE *)v93[0] + 8) == 62;
      v24 = (float *)(a1 + 472);
      if (v28)
        goto LABEL_156;
      v14 = v93[1];
      if (v93[1] == (void *)9)
      {
        v29 = *(_QWORD *)v93[0] == 0x6461724778614D3CLL && *((_BYTE *)v93[0] + 8) == 62;
        v24 = (float *)(a1 + 152);
        if (v29)
          goto LABEL_156;
        if ((HIBYTE(v93[2]) & 0x80) == 0)
          goto LABEL_155;
      }
    }
    if (v14 != (void *)18)
      goto LABEL_155;
    v11 = (void **)v93[0];
LABEL_148:
    v43 = *v11;
    v44 = v11[1];
    v45 = *((unsigned __int16 *)v11 + 8);
    if (v43 != (void *)0x6E6569646172473CLL || v44 != (void *)0x7079546D726F4E74 || v45 != 15973)
      goto LABEL_155;
    v49 = &v94;
LABEL_167:
    kaldi::ReadToken(a2, 0, (uint64_t)v49, v9, v10);
LABEL_168:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v11 = v93;
  switch(HIBYTE(v93[2]))
  {
    case 9:
      goto LABEL_134;
    case 0xA:
      if (v93[0] == (void *)0x6C6C65436D754E3CLL && LOWORD(v93[1]) == 15987)
        goto LABEL_86;
      if (v93[0] != (void *)0x61654D736169423CLL || LOWORD(v93[1]) != 15982)
        goto LABEL_133;
      goto LABEL_145;
    case 0xB:
      if (v93[0] == (void *)0x6E6152736169423CLL && *(void **)((char *)v93 + 3) == (void *)0x3E65676E61527361)
        goto LABEL_121;
      goto LABEL_133;
    case 0xD:
LABEL_104:
      if (v93[0] == (void *)0x74536D617261503CLL && *(void **)((char *)v93 + 5) == (void *)0x3E7665646474536DLL)
        goto LABEL_109;
      goto LABEL_133;
    case 0xF:
LABEL_110:
      v36 = v93[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v93 + 7) == (void *)0x3E66656F43657461;
      v24 = (float *)(a1 + 464);
      if (v36)
        goto LABEL_156;
      goto LABEL_133;
    case 0x12:
      goto LABEL_148;
    case 0x14:
      if (v93[0] != (void *)0x47746567726F463CLL
        || v93[1] != (void *)0x4D73616942657461
        || LODWORD(v93[2]) != 1047421285)
      {
        v11 = v93;
        switch(HIBYTE(v93[2]))
        {
          case 9:
            goto LABEL_134;
          case 0xD:
            goto LABEL_104;
          case 0xF:
            goto LABEL_110;
          case 0x12:
            goto LABEL_148;
          default:
            goto LABEL_155;
        }
      }
      goto LABEL_95;
    case 0x15:
      if (v93[0] != (void *)0x47746567726F463CLL
        || v93[1] != (void *)0x5273616942657461
        || *(void **)((char *)&v93[1] + 5) != (void *)0x3E65676E61527361)
      {
        v11 = v93;
        switch(HIBYTE(v93[2]))
        {
          case 9:
            goto LABEL_134;
          case 0xD:
            goto LABEL_104;
          case 0xF:
            goto LABEL_110;
          case 0x12:
            goto LABEL_148;
          default:
            goto LABEL_155;
        }
      }
      goto LABEL_146;
    case 0x19:
      v40 = v93[0] == (void *)0x7463656A6F72503CLL
         && v93[1] == (void *)0x6E7261654C6E6F69
         && v93[2] == (void *)0x66656F4365746152
         && v94.__r_.__value_.__s.__data_[0] == 62;
      v24 = (float *)(a1 + 468);
      if (v40)
        goto LABEL_156;
      if (HIBYTE(v93[2]) == 18)
      {
        v11 = v93;
        goto LABEL_148;
      }
LABEL_133:
      if (HIBYTE(v93[2]) == 9)
      {
LABEL_134:
        v41 = v93[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v93[1]) == 62;
        v24 = (float *)(a1 + 472);
        if (v41)
          goto LABEL_156;
        if (HIBYTE(v93[2]) == 9)
        {
          v42 = v93[0] == (void *)0x6461724778614D3CLL && LOBYTE(v93[1]) == 62;
          v24 = (float *)(a1 + 152);
          if (v42)
            goto LABEL_156;
        }
      }
LABEL_155:
      v48 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<MaxCell>");
      v24 = (float *)(a1 + 476);
      if (v48)
        goto LABEL_156;
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<RandomSeed>"))
      {
        v30 = &v101;
        goto LABEL_159;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<NoPeep>"))
      {
        *(_BYTE *)(a1 + 208) = 0;
        goto LABEL_168;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<OutputCellValues>"))
      {
        *(_BYTE *)(a1 + 209) = 1;
        goto LABEL_168;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<InitTransformType>"))
      {
        v49 = &v95;
        goto LABEL_167;
      }
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "</Component>"))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v92, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 351);
        v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"Invalid token ", 14);
        if (SHIBYTE(v93[2]) >= 0)
          v80 = v93;
        else
          v80 = (void **)v93[0];
        if (SHIBYTE(v93[2]) >= 0)
          v81 = HIBYTE(v93[2]);
        else
          v81 = (uint64_t)v93[1];
        v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v80, v81);
        v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)". Allowed tokens: ", 18);
        v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"(NumCells|BiasMean|BiasRange|ForgetGateBiasMean|ForgetGateBiasRange|ParamStddev|LearnRateCoef|ProjectionLearnRateCoef|MaxNorm|", 126);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"MaxGrad|MaxCell|NoPeep|InitTransformType|GradientNormType|RandomSeed)", 69);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v92);
      }
LABEL_170:
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateParams((uint64_t *)a1, v102);
      inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v95);
      *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v94);
      if (v101 >= 1)
        kaldi::UniformRandomNumber::SetRandomSeeds(a3, v101);
      kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v88, a3);
      v51 = *(float *)&v98;
      v52 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
      kaldi::nnet1::RandMatrix<kaldi::CuMatrixBase<float>>(a3, (kaldi::GaussRandomNumber *)v88, inited, v52, v51);
      v53 = *(float *)&v98;
      v54 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
      kaldi::nnet1::RandMatrix<kaldi::CuMatrixBase<float>>(a3, (kaldi::GaussRandomNumber *)v88, inited, v54, v53);
      v55 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + 16);
      v86 = 0;
      v87 = 0;
      v85 = 0;
      kaldi::Vector<float>::Resize((void **)&v85, v55, 0, v56, v57);
      v61 = v86;
      if ((int)v86 >= 1)
      {
        v62 = 0;
        do
        {
          v63 = *(float *)&v100;
          v64 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v58, v59, v60);
          v61 = v86;
          if (v62 >= v86)
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v60);
          v65 = v63 + (v64 + -0.5) * v99;
          v85[v62++] = v65;
        }
        while ((uint64_t)v62 < (int)v61);
      }
      if (v61 < 2 * v102)
        kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v60);
      if ((int)v102 >= 1)
      {
        v66 = &v85[v102];
        v67 = v102;
        do
        {
          v68 = *(float *)&v97;
          v69 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v58, v59, v60);
          v70 = v68 + (v69 + -0.5) * v96;
          *v66++ = v70;
          --v67;
        }
        while (v67);
      }
      if (!*(_QWORD *)(a1 + 200))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v92, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 382);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"bias_ thought to be initialized here", 36);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v92);
      }
      v71 = operator new();
      kaldi::CuVector<float>::CuVector(v71, (uint64_t)&v85, 0, v72, v73);
      v74 = *(_QWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 200) = v71;
      if (v74)
        (*(void (**)(uint64_t))(*(_QWORD *)v74 + 16))(v74);
      if (*(_BYTE *)(a1 + 208))
      {
        v75 = *(float *)&v98;
        v76 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
        kaldi::nnet1::RandMatrix<kaldi::CuMatrixBase<float>>(a3, (kaldi::GaussRandomNumber *)v88, inited, v76, v75);
      }
      if (*(_BYTE *)(a1 + 224))
      {
        v77 = *(float *)&v98;
        v78 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
        kaldi::nnet1::RandMatrix<kaldi::CuMatrixBase<float>>(a3, (kaldi::GaussRandomNumber *)v88, inited, v78, v77);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
      kaldi::Vector<float>::Destroy((uint64_t)&v85);
      if (__p)
      {
        v91 = __p;
        operator delete(__p);
      }
      v92[0] = (void **)&v89;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v92);
      if (SHIBYTE(v93[2]) < 0)
        operator delete(v93[0]);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v95.__r_.__value_.__l.__data_);
      return;
    default:
      goto LABEL_155;
  }
}

void sub_1DE4944C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)va1);
  if (*(char *)(v5 - 185) < 0)
    operator delete(*(void **)(v5 - 208));
  if (*(char *)(v5 - 161) < 0)
    operator delete(*(void **)(v5 - 184));
  if (*(char *)(v5 - 137) < 0)
    operator delete(*(void **)(v5 - 160));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateParams(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  void *__p[2];
  unsigned __int8 v28;
  _QWORD v29[35];

  *((_DWORD *)a1 + 44) = a2;
  v3 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  if (*(_DWORD *)(v3 + 12) > a2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1249);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"# LSTM cells (", 14);
    v25 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)") should not be less than output dim (", 38);
    v26 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, ").");
    goto LABEL_37;
  }
  if (a1[23])
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1253);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v29, "input_weights_ thought to be un-initialized here");
    goto LABEL_37;
  }
  v4 = (4 * a2);
  v5 = operator new();
  kaldi::CuMatrix<float>::CuMatrix(v5, v4, *(unsigned int *)(v3 + 8), 0, 0, 0);
  v6 = a1[23];
  a1[23] = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  if (a1[24])
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1260);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v29, "recurrent_weights_ thought to be un-initialized here");
    goto LABEL_37;
  }
  v7 = (4 * *((_DWORD *)a1 + 44));
  v8 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  v9 = operator new();
  kaldi::CuMatrix<float>::CuMatrix(v9, v7, *(unsigned int *)(v8 + 12), 0, 0, 0);
  v10 = a1[24];
  a1[24] = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  if (a1[25])
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1265);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v29, "bias_ thought to be un-initialized here");
    goto LABEL_37;
  }
  v11 = (4 * *((_DWORD *)a1 + 44));
  v12 = (_QWORD *)operator new();
  v12[2] = 0;
  v12[3] = 0;
  *v12 = &unk_1EA92DFD8;
  v12[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v12, v11, 0, v13, v14);
  v15 = a1[25];
  a1[25] = (uint64_t)v12;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
  if (*((_BYTE *)a1 + 208))
  {
    if (a1[27])
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1271);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v29, "peephole_weights_ thought to be un-initialized here");
      goto LABEL_37;
    }
    v16 = operator new();
    kaldi::CuMatrix<float>::CuMatrix(v16, 3, *((unsigned int *)a1 + 44), 0, 0, 0);
    v17 = a1[27];
    a1[27] = v16;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  }
  v18 = *a1;
  if (*((_DWORD *)a1 + 44) == *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 12))
  {
    *((_BYTE *)a1 + 224) = 0;
    goto LABEL_20;
  }
  *((_BYTE *)a1 + 224) = 1;
  if (a1[29])
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1281);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v29, "projection_weights_ thought to be un-initialized here");
LABEL_37:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  v19 = (uint64_t)a1 + *(_QWORD *)(v18 - 24);
  v20 = operator new();
  kaldi::CuMatrix<float>::CuMatrix(v20, *(unsigned int *)(v19 + 12), *((unsigned int *)a1 + 44), 0, 0, 0);
  v21 = a1[29];
  a1[29] = v20;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
LABEL_20:
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v29, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1285, 2);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Allocated memory for the parameters: ", 37);
    (*(void (**)(void **__return_ptr, uint64_t *))(*a1 + 264))(__p, a1);
    if ((v28 & 0x80u) == 0)
      v23 = __p;
    else
      v23 = (void **)__p[0];
    if ((v28 & 0x80u) == 0)
      v24 = v28;
    else
      v24 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    if ((char)v28 < 0)
      operator delete(__p[0]);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v29);
  }
}

void sub_1DE494A1C()
{
  JUMPOUT(0x1DE494A44);
}

void sub_1DE494A30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RandMatrix<kaldi::CuMatrixBase<float>>(kaldi::UniformRandomNumber *a1, kaldi::GaussRandomNumber *a2, int a3, uint64_t a4, float a5)
{
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  unint64_t i;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;

  kaldi::Matrix<float>::Matrix((uint64_t)&v23, *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 16), 0, 0);
  v10 = 0;
LABEL_2:
  if ((uint64_t)v10 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)&v23))
  {
    for (i = 0; ; ++i)
    {
      if ((uint64_t)i >= (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v23))
      {
        ++v10;
        goto LABEL_2;
      }
      if (a3)
      {
        if (a3 == 2)
        {
          kaldi::GaussRandomNumber::Rand(a2, 0, v14, v15, v16);
          if (v10 >= v25 || i >= v24)
            goto LABEL_25;
          v18 = v23 + 4 * (int)v10 * v26;
          v19 = v20 * a5;
        }
        else
        {
          if (a3 != 1)
            continue;
          v17 = kaldi::UniformRandomNumber::RandUniform(a1, 0, v14, v15, v16);
          if (v10 >= v25 || i >= v24)
            goto LABEL_25;
          v18 = v23 + 4 * (int)v10 * v26;
          v19 = (v17 + -0.5) * (float)(a5 + a5);
        }
      }
      else
      {
        if (v10 >= v25 || i >= v24)
LABEL_25:
          kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v16);
        v18 = v23 + 4 * (int)v10 * v26;
        if (v10 == i)
          v19 = 1.0;
        else
          v19 = 0.0;
      }
      *(float *)(v18 + 4 * i) = v19;
    }
  }
  kaldi::CuMatrixBase<float>::CopyFromMat(a4, (uint64_t)&v23, 111, v11, v12);
  return kaldi::Matrix<float>::~Matrix((uint64_t)&v23);
}

void sub_1DE494C18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "InputWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 214);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "InputWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 210);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "RecurrentWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 223);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "RecurrentWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 219);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 232);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 228);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "PeepholeWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 241);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "PeepholeWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 237);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "ProjectionWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 250);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "ProjectionWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 246);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitData(_QWORD *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitData((uint64_t)a1 + *(_QWORD *)(*a1 - 112), a2, a3);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  float *v15;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v23;
  BOOL v26;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  __int128 *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (***v46)(_QWORD, uint64_t *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (***v51)(_QWORD, uint64_t *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  void (***v54)(_QWORD, uint64_t *, uint64_t, uint64_t);
  _QWORD *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  void (***v59)(_QWORD, uint64_t *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (***v63)(_QWORD, uint64_t *, uint64_t, uint64_t);
  uint64_t v64;
  _QWORD *v66;
  __int128 *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  void *__p[2];
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  char v76;

  while (kaldi::Peek(a2, a3) == 60)
  {
    v74 = 0uLL;
    v75 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v74, v7, v8);
    if ((SHIBYTE(v75) & 0x80000000) == 0)
    {
      switch(HIBYTE(v75))
      {
        case 8:
          goto LABEL_97;
        case 9:
          goto LABEL_85;
        case 0xA:
          if ((_QWORD)v74 != 0x6C6C65436D754E3CLL || WORD4(v74) != 15987)
            goto LABEL_156;
          goto LABEL_46;
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0x10:
        case 0x11:
          goto LABEL_156;
        case 0xF:
          v28 = (_QWORD)v74 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v74 + 7) == 0x3E66656F43657461;
          v15 = (float *)(a1 + 464);
          if (v28)
            goto LABEL_127;
          if (HIBYTE(v75) != 8)
            goto LABEL_84;
          goto LABEL_97;
        case 0x12:
          if ((_QWORD)v74 == 0x4374757074754F3CLL
            && *((_QWORD *)&v74 + 1) == 0x65756C61566C6C65
            && (unsigned __int16)v75 == 15987)
          {
            goto LABEL_132;
          }
          if (HIBYTE(v75) == 9)
            goto LABEL_119;
          if (HIBYTE(v75) != 18)
            goto LABEL_156;
          v26 = (_QWORD)v74 == 0x6E6569646172473CLL && *((_QWORD *)&v74 + 1) == 0x7079546D726F4E74;
          if (!v26 || (unsigned __int16)v75 != 15973)
            goto LABEL_156;
          goto LABEL_133;
        default:
          if (HIBYTE(v75) != 25)
            goto LABEL_156;
          v23 = (_QWORD)v74 == 0x7463656A6F72503CLL
             && *((_QWORD *)&v74 + 1) == 0x6E7261654C6E6F69
             && v75 == 0x66656F4365746152
             && v76 == 62;
          v15 = (float *)(a1 + 468);
          if (v23)
            goto LABEL_127;
LABEL_84:
          if (HIBYTE(v75) != 9)
            goto LABEL_156;
LABEL_85:
          v29 = (_QWORD)v74 == 0x6D726F4E78614D3CLL && BYTE8(v74) == 62;
          v15 = (float *)(a1 + 472);
          if (v29)
            goto LABEL_127;
          if (HIBYTE(v75) == 8)
            goto LABEL_97;
          if (HIBYTE(v75) != 9)
            goto LABEL_156;
          v30 = (_QWORD)v74 == 0x6C6C654378614D3CLL && BYTE8(v74) == 62;
          v15 = (float *)(a1 + 476);
          if (!v30)
            goto LABEL_119;
          goto LABEL_127;
      }
    }
    v12 = *((_QWORD *)&v74 + 1);
    if (*((_QWORD *)&v74 + 1) == 10
      && (*(_QWORD *)v74 == 0x6C6C65436D754E3CLL ? (v13 = *(unsigned __int16 *)(v74 + 8) == 15987) : (v13 = 0), v13))
    {
LABEL_46:
      kaldi::ReadBasicType<int>(a2, a3, a1 + 176, v9, v10);
    }
    else
    {
      if (*((_QWORD *)&v74 + 1) == 15)
      {
        v14 = *(_QWORD *)v74 == 0x61526E7261654C3CLL && *(_QWORD *)(v74 + 7) == 0x3E66656F43657461;
        v15 = (float *)(a1 + 464);
        if (v14)
          goto LABEL_127;
        v12 = *((_QWORD *)&v74 + 1);
      }
      if (v12 == 25)
      {
        v18 = *(_QWORD *)v74 == 0x7463656A6F72503CLL
           && *(_QWORD *)(v74 + 8) == 0x6E7261654C6E6F69
           && *(_QWORD *)(v74 + 16) == 0x66656F4365746152
           && *(_BYTE *)(v74 + 24) == 62;
        v15 = (float *)(a1 + 468);
        if (v18)
          goto LABEL_127;
        v12 = *((_QWORD *)&v74 + 1);
      }
      if (v12 != 9)
        goto LABEL_47;
      v19 = *(_QWORD *)v74 == 0x6D726F4E78614D3CLL && *(_BYTE *)(v74 + 8) == 62;
      v15 = (float *)(a1 + 472);
      if (v19)
        goto LABEL_127;
      v12 = *((_QWORD *)&v74 + 1);
      if (*((_QWORD *)&v74 + 1) != 9)
        goto LABEL_47;
      v20 = *(_QWORD *)v74 == 0x6C6C654378614D3CLL && *(_BYTE *)(v74 + 8) == 62;
      v15 = (float *)(a1 + 476);
      if (v20)
        goto LABEL_127;
      if ((v75 & 0x8000000000000000) == 0)
      {
        if (HIBYTE(v75) == 9)
          goto LABEL_119;
        if (HIBYTE(v75) != 8)
          goto LABEL_156;
LABEL_97:
        if ((_QWORD)v74 != 0x3E706565506F4E3CLL)
        {
          if ((v75 & 0x8000000000000000) == 0)
            goto LABEL_156;
LABEL_100:
          v12 = *((_QWORD *)&v74 + 1);
          if (v12 != 18)
            goto LABEL_120;
LABEL_101:
          if (*(_QWORD *)v74 == 0x4374757074754F3CLL
            && *(_QWORD *)(v74 + 8) == 0x65756C61566C6C65
            && *(_WORD *)(v74 + 16) == 15987)
          {
LABEL_132:
            *(_BYTE *)(a1 + 209) = 1;
            goto LABEL_128;
          }
          v12 = *((_QWORD *)&v74 + 1);
          if (*((_QWORD *)&v74 + 1) != 18)
            goto LABEL_120;
          if (*(_QWORD *)v74 == 0x6E6569646172473CLL
            && *(_QWORD *)(v74 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v74 + 16) == 15973)
          {
LABEL_133:
            __p[0] = 0;
            __p[1] = 0;
            v73 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)__p, v9, v10);
            *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
            if (SHIBYTE(v73) < 0)
              operator delete(__p[0]);
            goto LABEL_128;
          }
          if ((v75 & 0x8000000000000000) == 0)
          {
            if (HIBYTE(v75) != 9)
              goto LABEL_156;
LABEL_119:
            v35 = &v74;
          }
          else
          {
LABEL_120:
            if (v12 != 9)
              goto LABEL_156;
            v35 = (__int128 *)v74;
          }
          v36 = *(_QWORD *)v35;
          v37 = *((unsigned __int8 *)v35 + 8);
          v38 = v36 == 0x6461724778614D3CLL && v37 == 62;
          v15 = (float *)(a1 + 152);
          if (!v38)
          {
LABEL_156:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 424);
            v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
            if (v75 >= 0)
              v67 = &v74;
            else
              v67 = (__int128 *)v74;
            if (v75 >= 0)
              v68 = HIBYTE(v75);
            else
              v68 = *((_QWORD *)&v74 + 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
          }
LABEL_127:
          kaldi::ReadBasicType<float>(a2, a3, v15, v9, v10);
          goto LABEL_128;
        }
      }
      else
      {
LABEL_47:
        if (v12 != 8)
          goto LABEL_101;
        if (*(_QWORD *)v74 != 0x3E706565506F4E3CLL)
          goto LABEL_100;
      }
      *(_BYTE *)(a1 + 208) = 0;
    }
LABEL_128:
    if (SHIBYTE(v75) < 0)
      operator delete((void *)v74);
  }
  v39 = *(_DWORD *)(a1 + 176);
  v40 = *(_QWORD *)a1;
  v41 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  if (v39 < v41)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 430);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# LSTM cells (", 14);
    v69 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)") should not be less than output dim (", 38);
    v70 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v70, ").");
    goto LABEL_169;
  }
  *(_BYTE *)(a1 + 224) = v39 > v41;
  if (*(_QWORD *)(a1 + 184))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 436);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_weights_ thougth to be un-initialized here");
    goto LABEL_169;
  }
  v42 = (4 * v39);
  v43 = a1 + *(_QWORD *)(v40 - 24);
  v44 = operator new();
  kaldi::CuMatrix<float>::CuMatrix(v44, v42, *(unsigned int *)(v43 + 8), 0, 0, 0);
  v45 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v44;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45);
  v46 = (void (***)(_QWORD, uint64_t *, uint64_t, uint64_t))kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  (**v46)(v46, a2, a3, a4);
  if (*(_QWORD *)(a1 + 192))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 443);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "recurrent_weights_ thougth to be un-initialized here");
    goto LABEL_169;
  }
  v47 = (4 * *(_DWORD *)(a1 + 176));
  v48 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v49 = operator new();
  kaldi::CuMatrix<float>::CuMatrix(v49, v47, *(unsigned int *)(v48 + 12), 0, 0, 0);
  v50 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v49;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
  v51 = (void (***)(_QWORD, uint64_t *, uint64_t, uint64_t))kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  (**v51)(v51, a2, a3, a4);
  if (*(_BYTE *)(a1 + 208))
  {
    if (*(_QWORD *)(a1 + 216))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 450);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "peephole_weights_ thougth to be un-initialized here");
      goto LABEL_169;
    }
    v52 = operator new();
    kaldi::CuMatrix<float>::CuMatrix(v52, 3, *(unsigned int *)(a1 + 176), 0, 0, 0);
    v53 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v52;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53);
    v54 = (void (***)(_QWORD, uint64_t *, uint64_t, uint64_t))kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    (**v54)(v54, a2, a3, a4);
  }
  if (*(_QWORD *)(a1 + 200))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 457);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "bias_ thougth to be un-initialized here");
    goto LABEL_169;
  }
  v55 = (_QWORD *)operator new();
  v55[2] = 0;
  v55[3] = 0;
  *v55 = &unk_1EA92DFD8;
  v55[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v55, 1, 0, v56, v57);
  v58 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v55;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 16))(v58);
  v59 = (void (***)(_QWORD, uint64_t *, uint64_t))kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  (**v59)(v59, a2, a3);
  if (*(_BYTE *)(a1 + 224))
  {
    if (!*(_QWORD *)(a1 + 232))
    {
      v60 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v61 = operator new();
      kaldi::CuMatrix<float>::CuMatrix(v61, *(unsigned int *)(v60 + 12), *(unsigned int *)(a1 + 176), 0, 0, 0);
      v62 = *(_QWORD *)(a1 + 232);
      *(_QWORD *)(a1 + 232) = v61;
      if (v62)
        (*(void (**)(uint64_t))(*(_QWORD *)v62 + 24))(v62);
      v63 = (void (***)(_QWORD, uint64_t *, uint64_t, uint64_t))kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      (**v63)(v63, a2, a3, a4);
      goto LABEL_155;
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 464);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "projection_weights_ thougth to be un-initialized here");
LABEL_169:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
LABEL_155:
  v64 = *(_QWORD *)a1;
  *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16) = 0;
  return (*(uint64_t (**)(uint64_t))(v64 + 128))(a1);
}

void sub_1DE495924()
{
  JUMPOUT(0x1DE49592CLL);
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ReadData((uint64_t)a1 + *(_QWORD *)(*a1 - 176), a2, a3, a4);
}

_QWORD *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  _QWORD *result;
  uint64_t v23;
  const char *v24;
  std::string __p;

  kaldi::WriteToken(a2, a3, (kaldi *)"<NumCells>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<ProjectionLearnRateCoef>", v10, v11);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v12, v13);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v14, v15);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v16, v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v18, v19);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxCell>", v20, v21);
  result = kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  if (!*(_BYTE *)(a1 + 208))
    result = kaldi::WriteToken(a2, a3, (kaldi *)"<NoPeep>", v23, v24);
  if (*(_BYTE *)(a1 + 209))
    return kaldi::WriteToken(a2, a3, (kaldi *)"<OutputCellValues>", v23, v24);
  return result;
}

void sub_1DE495AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteConfig(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteConfig((uint64_t)a1 + *(_QWORD *)(*a1 - 184), a2, a3, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteData(_BYTE *a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;

  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 128))(a1);
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 192))(a1, a2, a3);
  v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1);
  kaldi::CuMatrixBase<float>::Write(v8, a2, a3, a4);
  v9 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1);
  kaldi::CuMatrixBase<float>::Write(v9, a2, a3, a4);
  if (a1[208])
  {
    v10 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1);
    kaldi::CuMatrixBase<float>::Write(v10, a2, a3, a4);
  }
  v11 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1);
  kaldi::CuVectorBase<float>::Write(v11, a2, a3, v12, v13);
  if (a1[224])
  {
    v14 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1);
    kaldi::CuMatrixBase<float>::Write(v14, a2, a3, a4);
  }
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteData(_QWORD *a1, _QWORD *a2, uint64_t a3, int a4)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::WriteData((_BYTE *)a1 + *(_QWORD *)(*a1 - 120), a2, a3, a4);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NumParams(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 20);
  v3 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 16) * v2;
  v4 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 20);
  v5 = v3 + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 16) * v4;
  v6 = (v5 + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + 16));
  if (*(_BYTE *)(a1 + 208))
  {
    v7 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 20);
    v6 = (v6
                      + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 16)
                      * v7);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v8 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 20);
    return (v6
                        + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 16)
                        * v8);
  }
  return v6;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NumParams(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NumParams((uint64_t)a1 + *(_QWORD *)(*a1 - 192));
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetParams(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  int v7;
  int v8;
  int v9;
  const char *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  _DWORD *result;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;

  v4 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  v7 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 20);
  v8 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 16) * v7;
  v9 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 20);
  v11 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 16);
  v43 = 0;
  v44 = 0;
  if (v8 > *(_DWORD *)(a2 + 8))
    goto LABEL_11;
  v12 = v11 * v9;
  v42 = *(void **)a2;
  LODWORD(v43) = v8;
  v13 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v42, v13, v14, v15, v16);
  v43 = 0;
  v44 = 0;
  v17 = v12 + v8;
  if ((v12 + v8) > *(_DWORD *)(a2 + 8))
    goto LABEL_11;
  v42 = (void *)(*(_QWORD *)a2 + 4 * v8);
  LODWORD(v43) = v12;
  v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v42, v18, v19, v20, v21);
  if (a1[208])
  {
    v22 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 20);
    v23 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 16) * v22;
    v43 = 0;
    v44 = 0;
    v24 = v23 + v17;
    if ((v23 + v17) > *(_DWORD *)(a2 + 8))
      goto LABEL_11;
    v42 = (void *)(*(_QWORD *)a2 + 4 * v17);
    LODWORD(v43) = v23;
    v25 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1);
    kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v42, v25, v26, v27, v28);
    v17 = v24;
  }
  v29 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16);
  v43 = 0;
  v44 = 0;
  if ((v29 + v17) > *(_DWORD *)(a2 + 8))
    goto LABEL_11;
  v42 = (void *)(*(_QWORD *)a2 + 4 * v17);
  LODWORD(v43) = v29;
  v30 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1);
  result = kaldi::CuVectorBase<float>::CopyToVec<float>(v30, (uint64_t)&v42, v31, v32, v33);
  if (!a1[224])
    return result;
  v35 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16) + v17;
  v36 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 20);
  v37 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 16) * v36;
  v43 = 0;
  v44 = 0;
  if ((v37 + v35) > *(_DWORD *)(a2 + 8))
LABEL_11:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v10);
  v42 = (void *)(*(_QWORD *)a2 + 4 * v35);
  LODWORD(v43) = v37;
  v38 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1);
  return kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v42, v38, v39, v40, v41);
}

_DWORD *`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetParams(_QWORD *a1, uint64_t a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetParams((_BYTE *)a1 + *(_QWORD *)(*a1 - 200), a2);
}

void **kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetParams(_BYTE *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  const char *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void **result;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 208))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x222, "wei_src.Dim() == NumParams()", v5);
  v6 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 20);
  v7 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 16) * v6;
  v8 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 20);
  v9 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 16);
  v10 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1);
  v28 = 0;
  v29 = 0;
  if (v7 > *(_DWORD *)(a2 + 8))
    goto LABEL_12;
  v12 = v9 * v8;
  v27 = *(char **)a2;
  LODWORD(v28) = v7;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec(v10, &v27);
  v13 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1);
  v28 = 0;
  v29 = 0;
  v14 = v12 + v7;
  if ((v12 + v7) > *(_DWORD *)(a2 + 8))
    goto LABEL_12;
  v27 = (char *)(*(_QWORD *)a2 + 4 * v7);
  LODWORD(v28) = v12;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec(v13, &v27);
  if (a1[208])
  {
    v15 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 20);
    v16 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 16) * v15;
    v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1);
    v28 = 0;
    v29 = 0;
    if ((v16 + v14) > *(_DWORD *)(a2 + 8))
      goto LABEL_12;
    v27 = (char *)(*(_QWORD *)a2 + 4 * v14);
    LODWORD(v28) = v16;
    kaldi::CuMatrixBase<float>::CopyRowsFromVec(v17, &v27);
    v14 += v16;
  }
  v18 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1);
  v21 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16);
  v28 = 0;
  v29 = 0;
  if ((v21 + v14) > *(_DWORD *)(a2 + 8))
    goto LABEL_12;
  v27 = (char *)(*(_QWORD *)a2 + 4 * v14);
  LODWORD(v28) = v21;
  result = (void **)kaldi::CuVectorBase<float>::CopyFromVec<float>(v18, (uint64_t)&v27, v19, v20, v11);
  if (!a1[224])
    return result;
  v23 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16) + v14;
  v24 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 20);
  v25 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 16) * v24;
  v26 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1);
  v28 = 0;
  v29 = 0;
  if ((v25 + v23) > *(_DWORD *)(a2 + 8))
LABEL_12:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v11);
  v27 = (char *)(*(_QWORD *)a2 + 4 * v23);
  LODWORD(v28) = v25;
  return kaldi::CuMatrixBase<float>::CopyRowsFromVec(v26, &v27);
}

void **`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetParams(_QWORD *a1, uint64_t a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetParams((_BYTE *)a1 + *(_QWORD *)(*a1 - 208), a2);
}

float kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SumParams(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;

  v2 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  v7 = kaldi::CuMatrixBase<float>::Sum(v2, v3, v4, v5, v6);
  v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  v13 = v7 + kaldi::CuMatrixBase<float>::Sum(v8, v9, v10, v11, v12);
  if (*(_BYTE *)(a1 + 208))
  {
    v14 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    v13 = v13 + kaldi::CuMatrixBase<float>::Sum(v14, v15, v16, v17, v18);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v19 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    v13 = v13 + kaldi::CuMatrixBase<float>::Sum(v19, v20, v21, v22, v23);
  }
  v24 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  return v13 + kaldi::CuVectorBase<float>::Sum(v24);
}

float `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SumParams(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SumParams((uint64_t)a1 + *(_QWORD *)(*a1 - 224));
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PerturbParams(uint64_t a1, float a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  _QWORD v32[4];
  _BYTE v33[48];

  v4 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 20);
  v5 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v33, v4, *(unsigned int *)(v5 + 16), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v33);
  v6 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::CuMatrixBase<float>::AddMat(v6, (uint64_t)v33, 111, v7, v8, a2, 1.0);
  v9 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 20);
  v10 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  kaldi::CuMatrix<float>::Resize((uint64_t)v33, v9, *(unsigned int *)(v10 + 16), 1u, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v33);
  v11 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  kaldi::CuMatrixBase<float>::AddMat(v11, (uint64_t)v33, 111, v12, v13, a2, 1.0);
  if (*(_BYTE *)(a1 + 208))
  {
    v14 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 20);
    v15 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    kaldi::CuMatrix<float>::Resize((uint64_t)v33, v14, *(unsigned int *)(v15 + 16), 1u, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v33);
    v16 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    kaldi::CuMatrixBase<float>::AddMat(v16, (uint64_t)v33, 111, v17, v18, a2, 1.0);
  }
  v19 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + 16);
  v32[0] = &unk_1EA92DFD8;
  memset(&v32[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v32, v19, 1u, v20, v21);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v32);
  v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  kaldi::CuVectorBase<float>::AddVec(v22, (uint64_t)v32, v23, v24, v25, a2, 1.0);
  if (*(_BYTE *)(a1 + 224))
  {
    v26 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 20);
    v27 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    kaldi::CuMatrix<float>::Resize((uint64_t)v33, v26, *(unsigned int *)(v27 + 16), 1u, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v33);
    v28 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    kaldi::CuMatrixBase<float>::AddMat(v28, (uint64_t)v33, 111, v29, v30, a2, 1.0);
  }
  v32[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v32);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v33);
}

void sub_1DE4965CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PerturbParams(_QWORD *a1, float a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PerturbParams((uint64_t)a1 + *(_QWORD *)(*a1 - 232), a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetGradient(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  int v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;

  v8 = (const void *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 136))(a1);
  if (v8)
  else
    v9 = 0;
  (*(void (**)(void *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 336))(v9, a2, a3, 0, 0);
  v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v10, 0, v11, v12);
  v13 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 20);
  v14 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights((uint64_t)a1) + 16) * v13;
  v15 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 20);
  v17 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights((uint64_t)a1) + 16);
  v51 = 0;
  v52 = 0;
  if (v14 > *(_DWORD *)(a4 + 8))
    goto LABEL_14;
  v50 = *(char **)a4;
  LODWORD(v51) = v14;
  v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient((uint64_t)v9, 0);
  kaldi::Matrix<float>::Matrix<float>((uint64_t)&v47, v18, 111, v19, v20);
  kaldi::VectorBase<float>::CopyRowsFromMat(&v50, (uint64_t)&v47);
  v21 = v17 * v15;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v47);
  v48 = 0;
  v49 = 0;
  v22 = v21 + v14;
  if ((v21 + v14) > *(_DWORD *)(a4 + 8))
    goto LABEL_14;
  v47 = *(_QWORD *)a4 + 4 * v14;
  LODWORD(v48) = v21;
  v23 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient((uint64_t)v9, 0);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v47, v23, v24, v25, v26);
  if (a1[208])
  {
    v27 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 20);
    v28 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights((uint64_t)a1) + 16) * v27;
    v48 = 0;
    v49 = 0;
    v29 = v28 + v22;
    if ((v28 + v22) > *(_DWORD *)(a4 + 8))
      goto LABEL_14;
    v47 = *(_QWORD *)a4 + 4 * v22;
    LODWORD(v48) = v28;
    v30 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient((uint64_t)v9, 0);
    kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v47, v30, v31, v32, v33);
    v22 = v29;
  }
  v34 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16);
  v48 = 0;
  v49 = 0;
  if ((v34 + v22) > *(_DWORD *)(a4 + 8))
LABEL_14:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v16);
  v47 = *(_QWORD *)a4 + 4 * v22;
  LODWORD(v48) = v34;
  v35 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient((uint64_t)v9, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v35, (uint64_t)&v47, v36, v37, v38);
  if (a1[224])
  {
    v39 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias((uint64_t)a1) + 16) + v22;
    v40 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 20);
    v41 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights((uint64_t)a1) + 16)
        * v40;
    v48 = 0;
    v49 = 0;
    if ((v41 + v39) <= *(_DWORD *)(a4 + 8))
    {
      v47 = *(_QWORD *)a4 + 4 * v39;
      LODWORD(v48) = v41;
      v42 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient((uint64_t)v9, 0);
      kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v47, v42, v43, v44, v45);
      return (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 8))(v9);
    }
    goto LABEL_14;
  }
  return (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 8))(v9);
}

void sub_1DE4968C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetGradient((_BYTE *)a1 + *(_QWORD *)(*a1 - 240), a2, a3, a4);
}

float kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(_QWORD *a1, int a2)
{
  float *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;

  v2 = (float *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  if (!*((_BYTE *)v2 + 84))
    return v2[14];
  v3 = a1[63];
  v4 = a1[64] - v3;
  if (!v4)
    return NAN;
  v5 = v4 >> 2;
  if ((int)v5 <= a2)
    return NAN;
  v6 = v5 - 1;
  if (a2 >= 0)
    v6 = a2;
  return *(float *)(v3 + 4 * v6);
}

float `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(_QWORD *a1, int a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 216)), a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Info(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  int v27;
  void **v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  void **v36;
  uint64_t v37;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *__p[2];
  unsigned __int8 v44;
  void *v45[2];
  unsigned __int8 v46;
  void *v47[2];
  unsigned __int8 v48;
  void *v49[2];
  unsigned __int8 v50;
  _QWORD v51[11];
  char v52;
  uint64_t v53;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v51);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 192))(a1, v51, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"\n Input weights:", 16);
  v3 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::nnet1::MomentStatistics<float>(v3);
  if ((v50 & 0x80u) == 0)
    v4 = v49;
  else
    v4 = (void **)v49[0];
  if ((v50 & 0x80u) == 0)
    v5 = v50;
  else
    v5 = (uint64_t)v49[1];
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n Recurrent weights:", 20);
  v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  kaldi::nnet1::MomentStatistics<float>(v8);
  if ((v48 & 0x80u) == 0)
    v9 = v47;
  else
    v9 = (void **)v47[0];
  if ((v48 & 0x80u) == 0)
    v10 = v48;
  else
    v10 = (uint64_t)v47[1];
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n Bias:", 7);
  v13 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  kaldi::nnet1::MomentStatistics<float>(v13, v14, v15, v16, v17);
  if ((v46 & 0x80u) == 0)
    v18 = v45;
  else
    v18 = (void **)v45[0];
  if ((v46 & 0x80u) == 0)
    v19 = v46;
  else
    v19 = (uint64_t)v45[1];
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v18, v19);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n Forget gate bias:", 19);
  v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  v27 = *(_DWORD *)(a1 + 176);
  v41 = 0;
  v42 = 0;
  v39 = &unk_1EA926538;
  v40 = 0;
  if (*(_DWORD *)(v22 + 16) < (2 * v27))
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v26);
  v40 = *(_QWORD *)(v22 + 8) + 4 * v27;
  LODWORD(v41) = v27;
  v42 = *(_QWORD *)(v22 + 24);
  kaldi::nnet1::MomentStatistics<float>(&v39, v23, v24, v25, v26);
  if ((v44 & 0x80u) == 0)
    v28 = __p;
  else
    v28 = (void **)__p[0];
  if ((v44 & 0x80u) == 0)
    v29 = v44;
  else
    v29 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v28, v29);
  if ((char)v44 < 0)
    operator delete(__p[0]);
  if ((char)v46 < 0)
    operator delete(v45[0]);
  if ((char)v48 < 0)
    operator delete(v47[0]);
  if ((char)v50 < 0)
    operator delete(v49[0]);
  if (*(_BYTE *)(a1 + 208))
  {
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"\n Peephole weights:", 19);
    v31 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    kaldi::nnet1::MomentStatistics<float>(v31);
    v32 = v41 >= 0 ? &v39 : (void **)v39;
    v33 = v41 >= 0 ? HIBYTE(v41) : v40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v32, v33);
    if (SHIBYTE(v41) < 0)
      operator delete(v39);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"\n Projection weights:", 21);
    v35 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    kaldi::nnet1::MomentStatistics<float>(v35);
    v36 = v41 >= 0 ? &v39 : (void **)v39;
    v37 = v41 >= 0 ? HIBYTE(v41) : v40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
    if (SHIBYTE(v41) < 0)
      operator delete(v39);
  }
  std::stringbuf::str();
  v51[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v51 + *(_QWORD *)(v51[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v51[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v52 < 0)
    operator delete((void *)v51[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v53);
}

void sub_1DE4970B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Info(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Info((uint64_t)a1 + *(_QWORD *)(*a1 - 80));
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoGradient(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  void **v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  void **v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  uint64_t v32;
  void **v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  void **v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  void **v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  uint64_t v52;
  std::string *v53;
  std::string::size_type size;
  std::string *v55;
  __int128 v56;
  const std::string::value_type *v57;
  std::string::size_type v58;
  uint64_t v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  const std::string::value_type *v64;
  std::string::size_type v65;
  std::string *v66;
  std::string *v67;
  std::string::size_type v68;
  std::string *v69;
  __int128 v70;
  void *__p[2];
  unsigned __int8 v73;
  void *v74[2];
  unsigned __int8 v75;
  void *v76[2];
  unsigned __int8 v77;
  void *v78[2];
  unsigned __int8 v79;
  void *v80[2];
  unsigned __int8 v81;
  void *v82[2];
  unsigned __int8 v83;
  void *v84[2];
  unsigned __int8 v85;
  void *v86[2];
  unsigned __int8 v87;
  void *v88[2];
  unsigned __int8 v89;
  void *v90[2];
  unsigned __int8 v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  std::string v100;
  std::string v101;
  __int128 v102;
  int64_t v103;
  int v104;
  std::string v105;

  if (*(_BYTE *)(a1 + 528))
  {
    memset(&v105, 0, sizeof(v105));
    v104 = 0;
    if (*(int *)(a1 + 80) >= 1)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v92, "\n For batch ");
        kaldi::nnet1::ToString<int>();
        if ((v91 & 0x80u) == 0)
          v3 = v90;
        else
          v3 = (void **)v90[0];
        if ((v91 & 0x80u) == 0)
          v4 = v91;
        else
          v4 = (std::string::size_type)v90[1];
        v5 = std::string::append(&v92, (const std::string::value_type *)v3, v4);
        v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v88, ": ");
        if ((v89 & 0x80u) == 0)
          v7 = v88;
        else
          v7 = (void **)v88[0];
        if ((v89 & 0x80u) == 0)
          v8 = v89;
        else
          v8 = (std::string::size_type)v88[1];
        v9 = std::string::append(&v93, (const std::string::value_type *)v7, v8);
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v94.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v86, "\n  Number of cells : ");
        if ((v87 & 0x80u) == 0)
          v11 = v86;
        else
          v11 = (void **)v86[0];
        if ((v87 & 0x80u) == 0)
          v12 = v87;
        else
          v12 = (std::string::size_type)v86[1];
        v13 = std::string::append(&v94, (const std::string::value_type *)v11, v12);
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v95.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::ToString<int>();
        if ((v85 & 0x80u) == 0)
          v15 = v84;
        else
          v15 = (void **)v84[0];
        if ((v85 & 0x80u) == 0)
          v16 = v85;
        else
          v16 = (std::string::size_type)v84[1];
        v17 = std::string::append(&v95, (const std::string::value_type *)v15, v16);
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v96.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v82, "\n  Input weights gradient: ");
        if ((v83 & 0x80u) == 0)
          v19 = v82;
        else
          v19 = (void **)v82[0];
        if ((v83 & 0x80u) == 0)
          v20 = v83;
        else
          v20 = (std::string::size_type)v82[1];
        v21 = std::string::append(&v96, (const std::string::value_type *)v19, v20);
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        v23 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v23);
        if ((v81 & 0x80u) == 0)
          v24 = v80;
        else
          v24 = (void **)v80[0];
        if ((v81 & 0x80u) == 0)
          v25 = v81;
        else
          v25 = (std::string::size_type)v80[1];
        v26 = std::string::append(&v97, (const std::string::value_type *)v24, v25);
        v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v78, "\n  Recurrent weights gradient: ");
        if ((v79 & 0x80u) == 0)
          v28 = v78;
        else
          v28 = (void **)v78[0];
        if ((v79 & 0x80u) == 0)
          v29 = v79;
        else
          v29 = (std::string::size_type)v78[1];
        v30 = std::string::append(&v98, (const std::string::value_type *)v28, v29);
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v99.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v32 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v32);
        if ((v77 & 0x80u) == 0)
          v33 = v76;
        else
          v33 = (void **)v76[0];
        if ((v77 & 0x80u) == 0)
          v34 = v77;
        else
          v34 = (std::string::size_type)v76[1];
        v35 = std::string::append(&v99, (const std::string::value_type *)v33, v34);
        v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v100.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v74, "\n  Bias gradient: ");
        if ((v75 & 0x80u) == 0)
          v37 = v74;
        else
          v37 = (void **)v74[0];
        if ((v75 & 0x80u) == 0)
          v38 = v75;
        else
          v38 = (std::string::size_type)v74[1];
        v39 = std::string::append(&v100, (const std::string::value_type *)v37, v38);
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v101.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        v41 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v41, v42, v43, v44, v45);
        if ((v73 & 0x80u) == 0)
          v46 = __p;
        else
          v46 = (void **)__p[0];
        if ((v73 & 0x80u) == 0)
          v47 = v73;
        else
          v47 = (std::string::size_type)__p[1];
        v48 = std::string::append(&v101, (const std::string::value_type *)v46, v47);
        v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v103 = v48->__r_.__value_.__r.__words[2];
        v102 = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        if (v103 >= 0)
          v50 = (const std::string::value_type *)&v102;
        else
          v50 = (const std::string::value_type *)v102;
        if (v103 >= 0)
          v51 = HIBYTE(v103);
        else
          v51 = *((_QWORD *)&v102 + 1);
        std::string::append(&v105, v50, v51);
        if (SHIBYTE(v103) < 0)
          operator delete((void *)v102);
        if ((char)v73 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v101.__r_.__value_.__l.__data_);
        if ((char)v75 < 0)
          operator delete(v74[0]);
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v100.__r_.__value_.__l.__data_);
        if ((char)v77 < 0)
          operator delete(v76[0]);
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v99.__r_.__value_.__l.__data_);
        if ((char)v79 < 0)
          operator delete(v78[0]);
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v98.__r_.__value_.__l.__data_);
        if ((char)v81 < 0)
          operator delete(v80[0]);
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
        if ((char)v83 < 0)
          operator delete(v82[0]);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if ((char)v85 < 0)
          operator delete(v84[0]);
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v95.__r_.__value_.__l.__data_);
        if ((char)v87 < 0)
          operator delete(v86[0]);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94.__r_.__value_.__l.__data_);
        if ((char)v89 < 0)
          operator delete(v88[0]);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v93.__r_.__value_.__l.__data_);
        if ((char)v91 < 0)
          operator delete(v90[0]);
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v92.__r_.__value_.__l.__data_);
        if (*(_BYTE *)(a1 + 208))
        {
          std::string::basic_string[abi:ne180100]<0>(&v101, "\n  Peephole weights gradient: ");
          v52 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v104);
          kaldi::nnet1::MomentStatistics<float>(v52);
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v53 = &v100;
          else
            v53 = (std::string *)v100.__r_.__value_.__r.__words[0];
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v100.__r_.__value_.__r.__words[2]);
          else
            size = v100.__r_.__value_.__l.__size_;
          v55 = std::string::append(&v101, (const std::string::value_type *)v53, size);
          v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          v103 = v55->__r_.__value_.__r.__words[2];
          v102 = v56;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          if (v103 >= 0)
            v57 = (const std::string::value_type *)&v102;
          else
            v57 = (const std::string::value_type *)v102;
          if (v103 >= 0)
            v58 = HIBYTE(v103);
          else
            v58 = *((_QWORD *)&v102 + 1);
          std::string::append(&v105, v57, v58);
          if (SHIBYTE(v103) < 0)
            operator delete((void *)v102);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v100.__r_.__value_.__l.__data_);
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v101.__r_.__value_.__l.__data_);
        }
        if (*(_BYTE *)(a1 + 224))
        {
          std::string::basic_string[abi:ne180100]<0>(&v101, "\n  Projection weights gradient: ");
          v59 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v104);
          kaldi::nnet1::MomentStatistics<float>(v59);
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v60 = &v100;
          else
            v60 = (std::string *)v100.__r_.__value_.__r.__words[0];
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v61 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
          else
            v61 = v100.__r_.__value_.__l.__size_;
          v62 = std::string::append(&v101, (const std::string::value_type *)v60, v61);
          v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          v103 = v62->__r_.__value_.__r.__words[2];
          v102 = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          if (v103 >= 0)
            v64 = (const std::string::value_type *)&v102;
          else
            v64 = (const std::string::value_type *)v102;
          if (v103 >= 0)
            v65 = HIBYTE(v103);
          else
            v65 = *((_QWORD *)&v102 + 1);
          std::string::append(&v105, v64, v65);
          if (SHIBYTE(v103) < 0)
            operator delete((void *)v102);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v100.__r_.__value_.__l.__data_);
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v101.__r_.__value_.__l.__data_);
        }
        ++v104;
      }
      while (v104 < *(_DWORD *)(a1 + 80));
    }
    v66 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v102, "\n");
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v105;
    else
      v67 = (std::string *)v105.__r_.__value_.__r.__words[0];
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v68 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
    else
      v68 = v105.__r_.__value_.__l.__size_;
    v69 = std::string::insert(v66, 0, (const std::string::value_type *)v67, v68);
    v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v69->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v103) < 0)
      operator delete((void *)v102);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  Gradients are uninitialized");
  }
}

void sub_1DE497888(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoGradient(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoGradient((uint64_t)a1 + *(_QWORD *)(*a1 - 88), a2);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  void **v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  void **v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type size;
  std::string *v47;
  __int128 v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  void *__p[2];
  unsigned __int8 v57;
  void *v58[2];
  unsigned __int8 v59;
  void *v60[2];
  unsigned __int8 v61;
  void *v62[2];
  unsigned __int8 v63;
  void *v64[2];
  unsigned __int8 v65;
  void *v66[2];
  unsigned __int8 v67;
  void *v68[2];
  unsigned __int8 v69;
  void *v70[2];
  unsigned __int8 v71;
  void *v72[2];
  unsigned __int8 v73;
  void *v74[2];
  unsigned __int8 v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  __int128 v86;
  int64_t v87;
  int v88;
  std::string v89;

  memset(&v89, 0, sizeof(v89));
  v88 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v76, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v75 & 0x80u) == 0)
        v3 = v74;
      else
        v3 = (void **)v74[0];
      if ((v75 & 0x80u) == 0)
        v4 = v75;
      else
        v4 = (std::string::size_type)v74[1];
      v5 = std::string::append(&v76, (const std::string::value_type *)v3, v4);
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v72, ": ");
      if ((v73 & 0x80u) == 0)
        v7 = v72;
      else
        v7 = (void **)v72[0];
      if ((v73 & 0x80u) == 0)
        v8 = v73;
      else
        v8 = (std::string::size_type)v72[1];
      v9 = std::string::append(&v77, (const std::string::value_type *)v7, v8);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v70, "\n  Gates values: ");
      if ((v71 & 0x80u) == 0)
        v11 = v70;
      else
        v11 = (void **)v70[0];
      if ((v71 & 0x80u) == 0)
        v12 = v71;
      else
        v12 = (std::string::size_type)v70[1];
      v13 = std::string::append(&v78, (const std::string::value_type *)v11, v12);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 248) + 48 * v88);
      if ((v69 & 0x80u) == 0)
        v15 = v68;
      else
        v15 = (void **)v68[0];
      if ((v69 & 0x80u) == 0)
        v16 = v69;
      else
        v16 = (std::string::size_type)v68[1];
      v17 = std::string::append(&v79, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v66, "\n  Cell values: ");
      if ((v67 & 0x80u) == 0)
        v19 = v66;
      else
        v19 = (void **)v66[0];
      if ((v67 & 0x80u) == 0)
        v20 = v67;
      else
        v20 = (std::string::size_type)v66[1];
      v21 = std::string::append(&v80, (const std::string::value_type *)v19, v20);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 272) + 48 * v88);
      if ((v65 & 0x80u) == 0)
        v23 = v64;
      else
        v23 = (void **)v64[0];
      if ((v65 & 0x80u) == 0)
        v24 = v65;
      else
        v24 = (std::string::size_type)v64[1];
      v25 = std::string::append(&v81, (const std::string::value_type *)v23, v24);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v62, "\n  Cell outputs: ");
      if ((v63 & 0x80u) == 0)
        v27 = v62;
      else
        v27 = (void **)v62[0];
      if ((v63 & 0x80u) == 0)
        v28 = v63;
      else
        v28 = (std::string::size_type)v62[1];
      v29 = std::string::append(&v82, (const std::string::value_type *)v27, v28);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 296) + 48 * v88);
      if ((v61 & 0x80u) == 0)
        v31 = v60;
      else
        v31 = (void **)v60[0];
      if ((v61 & 0x80u) == 0)
        v32 = v61;
      else
        v32 = (std::string::size_type)v60[1];
      v33 = std::string::append(&v83, (const std::string::value_type *)v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Cell outputs gated: ");
      if ((v59 & 0x80u) == 0)
        v35 = v58;
      else
        v35 = (void **)v58[0];
      if ((v59 & 0x80u) == 0)
        v36 = v59;
      else
        v36 = (std::string::size_type)v58[1];
      v37 = std::string::append(&v84, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 320) + 48 * v88);
      if ((v57 & 0x80u) == 0)
        v39 = __p;
      else
        v39 = (void **)__p[0];
      if ((v57 & 0x80u) == 0)
        v40 = v57;
      else
        v40 = (std::string::size_type)__p[1];
      v41 = std::string::append(&v85, (const std::string::value_type *)v39, v40);
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v87 = v41->__r_.__value_.__r.__words[2];
      v86 = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if (v87 >= 0)
        v43 = (const std::string::value_type *)&v86;
      else
        v43 = (const std::string::value_type *)v86;
      if (v87 >= 0)
        v44 = HIBYTE(v87);
      else
        v44 = *((_QWORD *)&v86 + 1);
      std::string::append(&v89, v43, v44);
      if (SHIBYTE(v87) < 0)
        operator delete((void *)v86);
      if ((char)v57 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
      if ((char)v59 < 0)
        operator delete(v58[0]);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
      if ((char)v61 < 0)
        operator delete(v60[0]);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
      if ((char)v63 < 0)
        operator delete(v62[0]);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      if ((char)v65 < 0)
        operator delete(v64[0]);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
      if ((char)v67 < 0)
        operator delete(v66[0]);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      if ((char)v69 < 0)
        operator delete(v68[0]);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      if ((char)v71 < 0)
        operator delete(v70[0]);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      if ((char)v73 < 0)
        operator delete(v72[0]);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      if ((char)v75 < 0)
        operator delete(v74[0]);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      if (*(_BYTE *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v85, "\n  Output values: ");
        kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 344) + 48 * v88);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v45 = &v84;
        else
          v45 = (std::string *)v84.__r_.__value_.__r.__words[0];
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        else
          size = v84.__r_.__value_.__l.__size_;
        v47 = std::string::append(&v85, (const std::string::value_type *)v45, size);
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v87 = v47->__r_.__value_.__r.__words[2];
        v86 = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        if (v87 >= 0)
          v49 = (const std::string::value_type *)&v86;
        else
          v49 = (const std::string::value_type *)v86;
        if (v87 >= 0)
          v50 = HIBYTE(v87);
        else
          v50 = *((_QWORD *)&v86 + 1);
        std::string::append(&v89, v49, v50);
        if (SHIBYTE(v87) < 0)
          operator delete((void *)v86);
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v84.__r_.__value_.__l.__data_);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
      }
      ++v88;
    }
    while (v88 < *(_DWORD *)(a1 + 80));
  }
  v51 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v86, "\n");
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = &v89;
  else
    v52 = (std::string *)v89.__r_.__value_.__r.__words[0];
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  else
    v53 = v89.__r_.__value_.__l.__size_;
  v54 = std::string::insert(v51, 0, (const std::string::value_type *)v52, v53);
  *a2 = *v54;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v87) < 0)
    operator delete((void *)v86);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
}

void sub_1DE498158(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1DE498364()
{
  JUMPOUT(0x1DE49828CLL);
}

void sub_1DE49836C()
{
  JUMPOUT(0x1DE49829CLL);
}

void sub_1DE498374()
{
  JUMPOUT(0x1DE4982ACLL);
}

void sub_1DE49837C()
{
  JUMPOUT(0x1DE4982BCLL);
}

void sub_1DE498384()
{
  JUMPOUT(0x1DE4982CCLL);
}

void sub_1DE49838C()
{
  JUMPOUT(0x1DE4982DCLL);
}

void sub_1DE498394()
{
  JUMPOUT(0x1DE4982ECLL);
}

void sub_1DE49839C()
{
  JUMPOUT(0x1DE4982FCLL);
}

void sub_1DE4983A4()
{
  JUMPOUT(0x1DE49830CLL);
}

void sub_1DE4983AC()
{
  JUMPOUT(0x1DE49831CLL);
}

void sub_1DE4983B4()
{
  JUMPOUT(0x1DE49832CLL);
}

void sub_1DE4983BC()
{
  JUMPOUT(0x1DE49833CLL);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoPropagate(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoPropagate((uint64_t)a1 + *(_QWORD *)(*a1 - 96), a2);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoBackPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type size;
  std::string *v39;
  __int128 v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  std::string *v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  void *__p[2];
  unsigned __int8 v49;
  void *v50[2];
  unsigned __int8 v51;
  void *v52[2];
  unsigned __int8 v53;
  void *v54[2];
  unsigned __int8 v55;
  void *v56[2];
  unsigned __int8 v57;
  void *v58[2];
  unsigned __int8 v59;
  void *v60[2];
  unsigned __int8 v61;
  void *v62[2];
  unsigned __int8 v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  __int128 v72;
  int64_t v73;
  int v74;
  std::string v75;

  memset(&v75, 0, sizeof(v75));
  v74 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v64, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v63 & 0x80u) == 0)
        v3 = v62;
      else
        v3 = (void **)v62[0];
      if ((v63 & 0x80u) == 0)
        v4 = v63;
      else
        v4 = (std::string::size_type)v62[1];
      v5 = std::string::append(&v64, (const std::string::value_type *)v3, v4);
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v60, ": ");
      if ((v61 & 0x80u) == 0)
        v7 = v60;
      else
        v7 = (void **)v60[0];
      if ((v61 & 0x80u) == 0)
        v8 = v61;
      else
        v8 = (std::string::size_type)v60[1];
      v9 = std::string::append(&v65, (const std::string::value_type *)v7, v8);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Gates diff: ");
      if ((v59 & 0x80u) == 0)
        v11 = v58;
      else
        v11 = (void **)v58[0];
      if ((v59 & 0x80u) == 0)
        v12 = v59;
      else
        v12 = (std::string::size_type)v58[1];
      v13 = std::string::append(&v66, (const std::string::value_type *)v11, v12);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 440) + 48 * v74);
      if ((v57 & 0x80u) == 0)
        v15 = v56;
      else
        v15 = (void **)v56[0];
      if ((v57 & 0x80u) == 0)
        v16 = v57;
      else
        v16 = (std::string::size_type)v56[1];
      v17 = std::string::append(&v67, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, "\n  Cell diff: ");
      if ((v55 & 0x80u) == 0)
        v19 = v54;
      else
        v19 = (void **)v54[0];
      if ((v55 & 0x80u) == 0)
        v20 = v55;
      else
        v20 = (std::string::size_type)v54[1];
      v21 = std::string::append(&v68, (const std::string::value_type *)v19, v20);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 416) + 48 * v74);
      if ((v53 & 0x80u) == 0)
        v23 = v52;
      else
        v23 = (void **)v52[0];
      if ((v53 & 0x80u) == 0)
        v24 = v53;
      else
        v24 = (std::string::size_type)v52[1];
      v25 = std::string::append(&v69, (const std::string::value_type *)v23, v24);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v50, "\n  Cell out gated diff: ");
      if ((v51 & 0x80u) == 0)
        v27 = v50;
      else
        v27 = (void **)v50[0];
      if ((v51 & 0x80u) == 0)
        v28 = v51;
      else
        v28 = (std::string::size_type)v50[1];
      v29 = std::string::append(&v70, (const std::string::value_type *)v27, v28);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 392) + 48 * v74);
      if ((v49 & 0x80u) == 0)
        v31 = __p;
      else
        v31 = (void **)__p[0];
      if ((v49 & 0x80u) == 0)
        v32 = v49;
      else
        v32 = (std::string::size_type)__p[1];
      v33 = std::string::append(&v71, (const std::string::value_type *)v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v73 = v33->__r_.__value_.__r.__words[2];
      v72 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v73 >= 0)
        v35 = (const std::string::value_type *)&v72;
      else
        v35 = (const std::string::value_type *)v72;
      if (v73 >= 0)
        v36 = HIBYTE(v73);
      else
        v36 = *((_QWORD *)&v72 + 1);
      std::string::append(&v75, v35, v36);
      if (SHIBYTE(v73) < 0)
        operator delete((void *)v72);
      if ((char)v49 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      if ((char)v51 < 0)
        operator delete(v50[0]);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if ((char)v53 < 0)
        operator delete(v52[0]);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
      if ((char)v55 < 0)
        operator delete(v54[0]);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if ((char)v57 < 0)
        operator delete(v56[0]);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if ((char)v59 < 0)
        operator delete(v58[0]);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if ((char)v61 < 0)
        operator delete(v60[0]);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if ((char)v63 < 0)
        operator delete(v62[0]);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (*(_BYTE *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v71, "\n  Output diff: ");
        kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 368) + 48 * v74);
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &v70;
        else
          v37 = (std::string *)v70.__r_.__value_.__r.__words[0];
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
        else
          size = v70.__r_.__value_.__l.__size_;
        v39 = std::string::append(&v71, (const std::string::value_type *)v37, size);
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v73 = v39->__r_.__value_.__r.__words[2];
        v72 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v73 >= 0)
          v41 = (const std::string::value_type *)&v72;
        else
          v41 = (const std::string::value_type *)v72;
        if (v73 >= 0)
          v42 = HIBYTE(v73);
        else
          v42 = *((_QWORD *)&v72 + 1);
        std::string::append(&v75, v41, v42);
        if (SHIBYTE(v73) < 0)
          operator delete((void *)v72);
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v70.__r_.__value_.__l.__data_);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
      }
      ++v74;
    }
    while (v74 < *(_DWORD *)(a1 + 80));
  }
  v43 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v72, "\n");
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = &v75;
  else
    v44 = (std::string *)v75.__r_.__value_.__r.__words[0];
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
  else
    v45 = v75.__r_.__value_.__l.__size_;
  v46 = std::string::insert(v43, 0, (const std::string::value_type *)v44, v45);
  *a2 = *v46;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v73) < 0)
    operator delete((void *)v72);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
}

void sub_1DE498938(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1DE498B04()
{
  JUMPOUT(0x1DE498A6CLL);
}

void sub_1DE498B0C()
{
  JUMPOUT(0x1DE498A7CLL);
}

void sub_1DE498B14()
{
  JUMPOUT(0x1DE498A8CLL);
}

void sub_1DE498B1C()
{
  JUMPOUT(0x1DE498A9CLL);
}

void sub_1DE498B24()
{
  JUMPOUT(0x1DE498AACLL);
}

void sub_1DE498B2C()
{
  JUMPOUT(0x1DE498ABCLL);
}

void sub_1DE498B34()
{
  JUMPOUT(0x1DE498ACCLL);
}

void sub_1DE498B3C()
{
  JUMPOUT(0x1DE498ADCLL);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoBackPropagate(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InfoBackPropagate((uint64_t)a1 + *(_QWORD *)(*a1 - 104), a2);
}

double kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  __int128 v88;
  __int128 v89;
  void *v90;
  __int128 v91;
  __int128 v92;
  void *v93;
  __int128 v94;
  __int128 v95;
  void *v96;
  _QWORD v97[4];
  void *v98;
  _QWORD v99[4];
  void *v100;
  _QWORD v101[4];
  void *v102;
  __int128 v103;
  __int128 v104;
  void *v105;
  __int128 v106;
  __int128 v107;
  void *v108;
  __int128 v109;
  __int128 v110;
  void *v111;
  __int128 v112;
  __int128 v113;

  v5 = *(unsigned int *)(a2 + 20);
  v6 = *(unsigned int *)(a1 + 96);
  v84 = ((int)v5 / (int)v6);
  if ((int)v5 % (int)v6)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x2BB, "batch_size % num_utts == 0", a5);
  LODWORD(v7) = a4;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v111, "PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 701, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"Running forward propagation for batch size = ", 45);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v111);
  }
  v14 = *(_QWORD *)(a3 + 32);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateForwardBuffers(a1, v7, v5, v14);
  v16 = *(_QWORD *)(a1 + 104);
  v86 = (int)v7;
  v80 = v7;
  if (*(_QWORD *)(a1 + 112) == v16)
  {
    v81 = 0;
    v7 = (int)v7;
  }
  else
  {
    v17 = *(_DWORD *)(v16 + 32 * (int)v7 + 16);
    if (v17 < 1)
    {
      v81 = 0;
      v7 = (int)v7;
    }
    else
    {
      if (v17 != (_DWORD)v5)
        kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x2C5, "boundary_[batch_index].Dim() == batch_size", v15);
      v7 = (int)v7;
      v18 = *(_QWORD *)(a1 + 128) + 48 * (int)v7;
      *(_QWORD *)(v18 + 32) = v14;
      v81 = 1;
      kaldi::CuMatrix<float>::Resize(v18, v6, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 48 * (int)v7 + 16), 1u, 0);
    }
  }
  v19 = *(_QWORD *)(a1 + 248) + 48 * v7;
  v85 = *(_QWORD *)(a1 + 344) + 48 * v7;
  v20 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::CuMatrixBase<float>::AddMatMat(v19, a2, CblasNoTrans, v20, (const char *)0x70, 1.0, 0.0);
  v21 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  kaldi::CuMatrixBase<float>::AddVecToRows(v19, v21, v22, v23, v24, 1.0, 1.0);
  if ((int)v84 >= 1)
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v82 = a1 + 12;
    v83 = v19;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v111, v19, v28, v6, 0, *(_DWORD *)(a1 + 176));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v108, v19, v28, v6, (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v105, v19, v28, v6, (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
      v30 = *(_QWORD *)(a1 + 272) + 48 * (int)v7;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v102, v30, v28, v6, 0, *(_DWORD *)(v30 + 16));
      memset(v101, 0, sizeof(v101));
      v100 = &unk_1EA926508;
      memset(v99, 0, sizeof(v99));
      v98 = &unk_1EA926508;
      if (v29)
      {
        if (v81)
        {
          kaldi::CuMatrixBase<float>::SetZero(*(_QWORD *)(a1 + 128) + 48 * (int)v7);
          v31 = *(_QWORD *)(a1 + 128) + 48 * (int)v7;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v31, 0, *(_DWORD *)(v31 + 20), 0, *(_DWORD *)(a1 + 176));
          v99[0] = v97[0];
          *(_OWORD *)&v99[1] = *(_OWORD *)&v97[1];
          v99[3] = v97[3];
          v96 = &unk_1EA926508;
          memset(v97, 0, sizeof(v97));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
          v32 = *(_QWORD *)(a1 + 272) + 48 * (int)v7;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v32, v28 - v6, v6, 0, *(_DWORD *)(v32 + 16));
          v34 = *(_QWORD *)(a1 + 104) + 32 * v7;
          *(_QWORD *)&v95 = 0;
          v94 = 0uLL;
          v93 = &unk_1EA926538;
          if ((v6 + v28) > *(_DWORD *)(v34 + 16))
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v33);
          *(_QWORD *)&v94 = *(_QWORD *)(v34 + 8) + v27;
          DWORD2(v94) = v6;
          *(_QWORD *)&v95 = *(_QWORD *)(v34 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v98, (uint64_t)&v96, (uint64_t)&v93, 1, v33);
          v96 = &unk_1EA926508;
          memset(v97, 0, sizeof(v97));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
          v35 = *(_QWORD *)(a1 + 128) + 48 * (int)v86;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v35, 0, *(_DWORD *)(v35 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(v82 + *(_QWORD *)(*(_QWORD *)a1 - 24)));
          *(_OWORD *)&v101[1] = *(_OWORD *)&v97[1];
          v101[0] = v97[0];
          v101[3] = v97[3];
          v96 = &unk_1EA926508;
          memset(v97, 0, sizeof(v97));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v85, v28 - v6, v6, 0, *(_DWORD *)(v85 + 16));
          v37 = *(_QWORD *)(a1 + 104) + 32 * v86;
          *(_QWORD *)&v95 = 0;
          v94 = 0uLL;
          v93 = &unk_1EA926538;
          if ((v6 + v28) > *(_DWORD *)(v37 + 16))
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v36);
          *(_QWORD *)&v94 = *(_QWORD *)(v37 + 8) + v27;
          DWORD2(v94) = v6;
          *(_QWORD *)&v95 = *(_QWORD *)(v37 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v100, (uint64_t)&v96, (uint64_t)&v93, 1, v36);
          v96 = &unk_1EA926508;
          memset(v97, 0, sizeof(v97));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
        }
        else
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v85, v28 - v6, v6, 0, *(_DWORD *)(v85 + 16));
          *(_OWORD *)&v101[1] = *(_OWORD *)&v97[1];
          v101[0] = v97[0];
          v101[3] = v97[3];
          v96 = &unk_1EA926508;
          memset(v97, 0, sizeof(v97));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
          v40 = *(_QWORD *)(a1 + 272) + 48 * (int)v86;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v40, v28 - v6, v6, 0, *(_DWORD *)(v40 + 16));
          v99[0] = v97[0];
          *(_OWORD *)&v99[1] = *(_OWORD *)&v97[1];
          v99[3] = v97[3];
          v96 = &unk_1EA926508;
          memset(v97, 0, sizeof(v97));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
          v19 = v83;
        }
      }
      else
      {
        v38 = *(_QWORD *)(a1 + 8) + 48 * (int)v7;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v38, 0, *(_DWORD *)(v38 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(v82 + *(_QWORD *)(*(_QWORD *)a1 - 24)));
        *(_OWORD *)&v101[1] = *(_OWORD *)&v97[1];
        v101[0] = v97[0];
        v101[3] = v97[3];
        v96 = &unk_1EA926508;
        memset(v97, 0, sizeof(v97));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
        v39 = *(_QWORD *)(a1 + 8) + 48 * (int)v7;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v39, 0, *(_DWORD *)(v39 + 20), 0, *(_DWORD *)(a1 + 176));
        v99[0] = v97[0];
        *(_OWORD *)&v99[1] = *(_OWORD *)&v97[1];
        v99[3] = v97[3];
        v96 = &unk_1EA926508;
        memset(v97, 0, sizeof(v97));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
        v19 = v83;
        v29 = 0;
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v19, v28, v6, 0, *(_DWORD *)(v19 + 16));
      v41 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v96, (uint64_t)&v100, CblasNoTrans, v41, (const char *)0x70, 1.0, 1.0);
      v96 = &unk_1EA926508;
      memset(v97, 0, sizeof(v97));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
      if (*(_BYTE *)(a1 + 208))
      {
        v45 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
        if (!*(_DWORD *)(v45 + 20))
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v46);
        v47 = *(_QWORD *)(v45 + 8);
        v48 = *(_DWORD *)(v45 + 16);
        v49 = *(_QWORD *)(v45 + 32);
        v96 = &unk_1EA926538;
        v97[0] = v47;
        v97[2] = v49;
        v97[1] = v48;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v111, (uint64_t)&v98, 111, (uint64_t)&v96, v46, 1.0, 1.0);
        v50 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v50 + 20) <= 1u)
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v51);
        v52 = *(_QWORD *)(v50 + 8) + 4 * *(int *)(v50 + 24);
        v53 = *(_DWORD *)(v50 + 16);
        v54 = *(_QWORD *)(v50 + 32);
        v96 = &unk_1EA926538;
        v97[0] = v52;
        v97[2] = v54;
        v97[1] = v53;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v108, (uint64_t)&v98, 111, (uint64_t)&v96, v51, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v111, (uint64_t)&v111, v42, v43, v44);
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v108, (uint64_t)&v108, v55, v56, v57);
      kaldi::CuMatrixBase<float>::ApplyTanh((uint64_t)&v105, v58, v59, v60, v61);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v102, (uint64_t)&v111, 111, (uint64_t)&v105, (const char *)0x6F, 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v102, (uint64_t)&v108, 111, (uint64_t)&v98, (const char *)0x6F, 1.0, 1.0);
      v62 = *(float *)(a1 + 476);
      if (v62 > 0.0)
      {
        kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)&v102, v62);
        kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)&v102, -*(float *)(a1 + 476));
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v19, v28, v6, (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
      if (*(_BYTE *)(a1 + 208))
      {
        v66 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v66 + 20) <= 2u)
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v67);
        v68 = *(_QWORD *)(v66 + 8) + 8 * *(int *)(v66 + 24);
        v69 = *(_DWORD *)(v66 + 16);
        v70 = *(_QWORD *)(v66 + 32);
        v93 = &unk_1EA926538;
        *(_QWORD *)&v94 = v68;
        *(_QWORD *)&v95 = v70;
        *((_QWORD *)&v94 + 1) = v69;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v96, (uint64_t)&v102, 111, (uint64_t)&v93, v67, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v96, (uint64_t)&v96, v63, v64, v65);
      v71 = *(_QWORD *)(a1 + 296) + 48 * (int)v86;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v71, v28, v6, 0, *(_DWORD *)(v71 + 16));
      kaldi::CuMatrixBase<float>::Tanh((uint64_t)&v93, (uint64_t)&v102, v72, v73, v74);
      v75 = *(_QWORD *)(a1 + 320) + 48 * (int)v86;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v90, v75, v28, v6, 0, *(_DWORD *)(v75 + 16));
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v90, (uint64_t)&v96, 111, (uint64_t)&v93, (const char *)0x6F, 1.0, 0.0);
      if (*(_BYTE *)(a1 + 224))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v87, v85, v28, v6, 0, *(_DWORD *)(v85 + 16));
        v76 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
        kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v87, (uint64_t)&v90, CblasNoTrans, v76, (const char *)0x70, 1.0, 0.0);
      }
      else
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v87, v85, v28, v6, 0, *(_DWORD *)(v85 + 16));
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v87, (uint64_t)&v90, 111, v77, v78);
      }
      v87 = &unk_1EA926508;
      v88 = 0u;
      v89 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v87);
      v90 = &unk_1EA926508;
      v91 = 0u;
      v92 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v90);
      v93 = &unk_1EA926508;
      v94 = 0u;
      v95 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
      v96 = &unk_1EA926508;
      memset(v97, 0, sizeof(v97));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
      v98 = &unk_1EA926508;
      memset(v99, 0, sizeof(v99));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v98);
      v100 = &unk_1EA926508;
      memset(v101, 0, sizeof(v101));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v100);
      v102 = &unk_1EA926508;
      v103 = 0u;
      v104 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v102);
      v105 = &unk_1EA926508;
      v106 = 0u;
      v107 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v105);
      v108 = &unk_1EA926508;
      v109 = 0u;
      v110 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v108);
      v111 = &unk_1EA926508;
      v112 = 0u;
      v113 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v111);
      ++v29;
      v28 += v6;
      v27 += 4 * (int)v6;
      v7 = v86;
    }
    while (v84 != v29);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a3, v85, 111, v25, v26);
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SaveLastState(a1, v80);
}

void sub_1DE4997D0(_Unwind_Exception *a1)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&STACK[0x210]);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateForwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD v9[35];

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateForwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1397, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating forward buffers for batch ", 37);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 248) + 48 * a2, a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 272) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 296) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 320) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 344) + 48 * a2, a3, *(unsigned int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12), 0, 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 248) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 272) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 296) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 320) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 344) + 48 * a2 + 32) = a4;
}

void sub_1DE499BC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SaveLastState(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  double result;
  void *v13;
  __int128 v14;
  __int128 v15;
  void *v16;
  __int128 v17;
  __int128 v18;

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v16, "SaveLastState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1700, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Saving last output and cell state for batch ", 44);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v16);
  }
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 272) + 48 * a2 + 20) - *(_DWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 8) + 48 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v16, v5, 0, *(_DWORD *)(v5 + 20), 0, *(_DWORD *)(a1 + 176));
  v6 = *(_QWORD *)(a1 + 272) + 48 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v13, v6, v4, *(_DWORD *)(a1 + 96), 0, *(_DWORD *)(v6 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v16, (uint64_t)&v13, 111, v7, v8);
  v13 = &unk_1EA926508;
  v14 = 0u;
  v15 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v13);
  v16 = &unk_1EA926508;
  v17 = 0u;
  v18 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v16);
  v9 = 3 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v16, *(_QWORD *)(a1 + 8) + 16 * v9, 0, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 16 * v9 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v13, *(_QWORD *)(a1 + 344) + 16 * v9, v4, *(_DWORD *)(a1 + 96), 0, *(_DWORD *)(*(_QWORD *)(a1 + 344) + 16 * v9 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v16, (uint64_t)&v13, 111, v10, v11);
  v13 = &unk_1EA926508;
  v14 = 0u;
  v15 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v13);
  v16 = &unk_1EA926508;
  v17 = 0u;
  v18 = 0u;
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v16).n128_u64[0];
  return result;
}

void sub_1DE499D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 a10, __int128 a11, uint64_t a12, __int128 a13, __int128 a14)
{
  uint64_t v14;

  a9 = v14 + 16;
  a10 = 0u;
  a11 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a9);
  a12 = v14 + 16;
  a13 = 0u;
  a14 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a12);
  _Unwind_Resume(a1);
}

double `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 128), a2, a3, a4, a5);
}

double kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  float v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  _QWORD v84[2];
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD v119[2];
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if (*(_DWORD *)(a1 + 96) != 1)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x320, "ropts_.num_sequences == 1", v6);
  v7 = *(_QWORD *)(a3 + 24);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateForwardBuffers(a1, 0, 1, v7);
  v9 = *(_QWORD *)(a1 + 104);
  if (*(_QWORD *)(a1 + 112) != v9)
  {
    v10 = *(_DWORD *)(v9 + 16);
    if (v10 >= 1)
    {
      if (v10 != 1)
        kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x325, "boundary_[0].Dim() == 1", v8);
      v11 = *(_QWORD *)(a1 + 128);
      *(_QWORD *)(v11 + 32) = v7;
      kaldi::CuMatrix<float>::Resize(v11, 1, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 16), 1u, 0);
    }
  }
  v12 = *(_QWORD *)(a1 + 248);
  v124 = 0;
  v125 = 0;
  v122 = &unk_1EA926538;
  v123 = 0;
  v123 = *(_QWORD *)(v12 + 8);
  LODWORD(v124) = *(_DWORD *)(v12 + 16);
  v125 = *(_QWORD *)(v12 + 32);
  v13 = *(_QWORD *)(a1 + 344);
  v120 = 0;
  v14 = *(_QWORD *)(v13 + 8);
  v119[0] = &unk_1EA926538;
  v119[1] = v14;
  LODWORD(v120) = *(_DWORD *)(v13 + 16);
  v121 = *(_QWORD *)(v13 + 32);
  v15 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v122, v15, CblasNoTrans, a2, v16, 1.0, 0.0);
  v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  kaldi::CuVectorBase<float>::AddVec((uint64_t)&v122, v17, v18, v19, v20, 1.0, 1.0);
  v22 = *(_DWORD *)(a1 + 176);
  v117 = 0;
  v118 = 0;
  v115 = &unk_1EA926538;
  v116 = 0;
  if (v22 > v124)
    goto LABEL_28;
  v116 = v123;
  LODWORD(v117) = v22;
  v118 = v125;
  v113 = 0;
  v114 = 0;
  v111 = &unk_1EA926538;
  v112 = 0;
  if (v124 < 2 * v22)
    goto LABEL_28;
  v112 = v123 + 4 * (int)v22;
  LODWORD(v113) = v22;
  v114 = v125;
  v109 = 0;
  v110 = 0;
  v107 = &unk_1EA926538;
  v108 = 0;
  if (v124 < 4 * v22)
    goto LABEL_28;
  v108 = v123 + 4 * (int)(3 * v22);
  LODWORD(v109) = v22;
  v110 = v125;
  v23 = *(_QWORD *)(a1 + 272);
  v105 = 0;
  v106 = 0;
  v103 = &unk_1EA926538;
  v104 = 0;
  v104 = *(_QWORD *)(v23 + 8);
  LODWORD(v105) = *(_DWORD *)(v23 + 16);
  v106 = *(_QWORD *)(v23 + 32);
  v24 = *(_QWORD *)(a1 + 8);
  if (!*(_DWORD *)(v24 + 20))
    goto LABEL_29;
  v25 = *(_QWORD *)(v24 + 8);
  v26 = *(_DWORD *)(v24 + 16);
  v27 = *(_QWORD *)(v24 + 32);
  v28 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  v101 = 0;
  v102 = 0;
  v99 = &unk_1EA926538;
  v100 = 0;
  if (v28 + v22 > v26)
    goto LABEL_28;
  v100 = v25 + 4 * (int)v22;
  LODWORD(v101) = v28;
  v102 = v27;
  if (!*(_DWORD *)(v24 + 20))
LABEL_29:
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v21);
  v29 = *(_QWORD *)(v24 + 8);
  v30 = *(_DWORD *)(v24 + 16);
  v97 = 0;
  v98 = 0;
  v95 = &unk_1EA926538;
  v96 = 0;
  if (v22 > v30)
LABEL_28:
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v21);
  v96 = v29;
  LODWORD(v97) = v22;
  v98 = v27;
  v31 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v122, v31, CblasNoTrans, (uint64_t)&v99, v32, 1.0, 1.0);
  if (*(_BYTE *)(a1 + 208))
  {
    v36 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    if (!*(_DWORD *)(v36 + 20))
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v38);
    v39 = *(_QWORD *)(v36 + 8);
    v40 = *(_DWORD *)(v36 + 16);
    v41 = *(_QWORD *)(v36 + 32);
    v91 = &unk_1EA926538;
    v92 = v39;
    v94 = v41;
    v93 = v40;
    kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v115, (uint64_t)&v95, (uint64_t)&v91, v37, v38, 1.0, 1.0);
    v42 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    if (*(_DWORD *)(v42 + 20) <= 1u)
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v44);
    v45 = *(_QWORD *)(v42 + 8) + 4 * *(int *)(v42 + 24);
    v46 = *(_DWORD *)(v42 + 16);
    v47 = *(_QWORD *)(v42 + 32);
    v91 = &unk_1EA926538;
    v92 = v45;
    v94 = v47;
    v93 = v46;
    kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v111, (uint64_t)&v95, (uint64_t)&v91, v43, v44, 1.0, 1.0);
  }
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)&v115, (uint64_t)&v115, v33, v34, v35);
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)&v111, (uint64_t)&v111, v48, v49, v50);
  kaldi::CuVectorBase<float>::ApplyTanh((uint64_t)&v107);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v103, (uint64_t)&v115, (uint64_t)&v107, v51, v52, 1.0, 0.0);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v103, (uint64_t)&v95, (uint64_t)&v111, v53, v54, 1.0, 1.0);
  v58 = *(float *)(a1 + 476);
  if (v58 > 0.0)
  {
    kaldi::CuVectorBase<float>::ApplyCeiling((uint64_t)&v103, v58);
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)&v103, -*(float *)(a1 + 476));
  }
  v59 = *(_DWORD *)(a1 + 176);
  v93 = 0;
  v94 = 0;
  v91 = &unk_1EA926538;
  v92 = 0;
  if (3 * v59 > v124)
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v57);
  v92 = v123 + 8 * v59;
  LODWORD(v93) = v59;
  v94 = v125;
  if (*(_BYTE *)(a1 + 208))
  {
    v60 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    if (*(_DWORD *)(v60 + 20) <= 2u)
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v62);
    v63 = *(_QWORD *)(v60 + 8) + 8 * *(int *)(v60 + 24);
    v64 = *(_DWORD *)(v60 + 16);
    v65 = *(_QWORD *)(v60 + 32);
    v87 = &unk_1EA926538;
    v88 = v63;
    v90 = v65;
    v89 = v64;
    kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v91, (uint64_t)&v103, (uint64_t)&v87, v61, v62, 1.0, 1.0);
  }
  kaldi::CuVectorBase<float>::Sigmoid((uint64_t)&v91, (uint64_t)&v91, v55, v56, v57);
  v66 = *(_QWORD *)(a1 + 296);
  v89 = 0;
  v67 = *(_QWORD *)(v66 + 8);
  v87 = &unk_1EA926538;
  v88 = v67;
  LODWORD(v89) = *(_DWORD *)(v66 + 16);
  v90 = *(_QWORD *)(v66 + 32);
  kaldi::CuVectorBase<float>::Tanh((uint64_t)&v87, (uint64_t)&v103, v68, v69, v70);
  v71 = *(_QWORD *)(a1 + 320);
  v85 = 0;
  v72 = *(_QWORD *)(v71 + 8);
  v84[0] = &unk_1EA926538;
  v84[1] = v72;
  LODWORD(v85) = *(_DWORD *)(v71 + 16);
  v86 = *(_QWORD *)(v71 + 32);
  kaldi::CuVectorBase<float>::AddVecVec((uint64_t)v84, (uint64_t)&v91, (uint64_t)&v87, v73, v74, 1.0, 0.0);
  if (*(_BYTE *)(a1 + 224))
  {
    v78 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    kaldi::CuVectorBase<float>::AddMatVec((uint64_t)v119, v78, CblasNoTrans, (uint64_t)v84, v79, 1.0, 0.0);
  }
  else
  {
    kaldi::CuVectorBase<float>::CopyFromVec(v119, (uint64_t)v84, v75, v76, v77);
  }
  kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)a3, (uint64_t)v119, v80, v81, v82);
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SaveLastState(a1, 0);
}

double `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 136), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc()
{
  _QWORD *v0;
  _QWORD v1[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetUnitOutputFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 876);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

{
  _QWORD *v0;
  _QWORD v1[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetUnitOutputFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 881);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc()
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc();
}

{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetUnitOutputFnc();
}

double kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  double result;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  _QWORD v121[4];
  void *v122;
  _QWORD v123[4];
  void *v124;
  _QWORD v125[4];
  void *v126;
  _QWORD v127[4];
  void *v128;
  _QWORD v129[4];
  void *v130;
  _QWORD v131[4];
  void *v132;
  __int128 v133;
  __int128 v134;
  void *v135;
  __int128 v136;
  __int128 v137;
  void *v138;
  __int128 v139;
  __int128 v140;
  void *v141;
  __int128 v142;
  __int128 v143;
  void *v144;
  __int128 v145;
  __int128 v146;
  void *v147;
  __int128 v148;
  __int128 v149;
  void *v150;
  __int128 v151;
  __int128 v152;
  void *v153;
  __int128 v154;
  __int128 v155;
  void *v156;
  __int128 v157;
  __int128 v158;
  void *v159;
  __int128 v160;
  __int128 v161;
  void *v162;
  __int128 v163;
  __int128 v164;
  void *v165;
  __int128 v166;
  __int128 v167;

  v10 = *(unsigned int *)(a2 + 20);
  v11 = *(unsigned int *)(a1 + 96);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureTrainingBuffers((uint64_t *)a1);
  if ((int)v10 % (int)v11)
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x380, "batch_size % num_utts == 0", v12);
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v165, "BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 898, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v165, (uint64_t)"Running backward propagation for batch size = ", 46);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", which contains ", 17);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" frames each from ", 18);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v165);
  }
  v109 = ((int)v10 / (int)v11);
  if ((int)v10 / (int)v11 < 2)
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x384, "frames_in_batch > 1 && \"LSTM backprop will not work with batches of single frames.\"", v12);
  if (a5)
    v16 = a5;
  else
    v16 = a4;
  v17 = *(_QWORD *)(v16 + 32);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateBackwardBuffers(a1, a6, v10, v17);
  v20 = a6;
  v21 = *(_QWORD *)(a1 + 248);
  v22 = 3 * a6;
  v23 = *(_QWORD *)(a1 + 440) + 48 * a6;
  v24 = *(_QWORD *)(a1 + 368);
  v111 = *(_QWORD *)(a1 + 416);
  v112 = v22;
  v25 = *(_QWORD *)(a1 + 104);
  v115 = v20;
  if (*(_QWORD *)(a1 + 112) == v25 || (v26 = *(_DWORD *)(v25 + 32 * v20 + 16), v26 < 1))
  {
    v113 = 0;
  }
  else
  {
    if (v26 != (_DWORD)v10)
      kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x390, "boundary_[batch_index].Dim() == batch_size", v19);
    v27 = *(_QWORD *)(a1 + 128) + 48 * (int)v20;
    *(_QWORD *)(v27 + 32) = v17;
    v113 = 1;
    kaldi::CuMatrix<float>::Resize(v27, v11, *(unsigned int *)(v23 + 16), 1u, 0);
  }
  v28 = v21 + 16 * v112;
  v114 = v24 + 16 * v112;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)v114, a4, 111, v18, v19);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v165, v28, 0, *(_DWORD *)(v28 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v162, v28, 0, *(_DWORD *)(v28 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v159, v28, 0, *(_DWORD *)(v28 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v156, v28, 0, *(_DWORD *)(v28 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v153, v23, 0, *(_DWORD *)(v23 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v150, v23, 0, *(_DWORD *)(v23 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v147, v23, 0, *(_DWORD *)(v23 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v144, v23, 0, *(_DWORD *)(v23 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v153, (uint64_t)&v165, (uint64_t)&v156, v29, v30);
  v31 = v10 - v11;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v141, (uint64_t)&v150, v11, v31, 0, SDWORD2(v151));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v138, (uint64_t)&v162, v11, v31, 0, SDWORD2(v163));
  v32 = *(_QWORD *)(a1 + 272) + 48 * (int)v115;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v135, v32, 0, v31, 0, *(_DWORD *)(v32 + 16));
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v141, (uint64_t)&v138, (uint64_t)&v135, v33, v34);
  v135 = &unk_1EA926508;
  v136 = 0u;
  v137 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v135);
  v138 = &unk_1EA926508;
  v139 = 0u;
  v140 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v138);
  v141 = &unk_1EA926508;
  v142 = 0u;
  v143 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v141);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v141, (uint64_t)&v150, 0, v11, 0, SDWORD2(v151));
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v141);
  v141 = &unk_1EA926508;
  v142 = 0u;
  v143 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v141);
  v108 = v23;
  v107 = a5;
  if (v113)
  {
    v37 = *(_QWORD *)(a1 + 128) + 48 * (int)v115;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v141, v37, 0, *(_DWORD *)(v37 + 20), 0, *(_DWORD *)(a1 + 176));
    kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v141);
    v38 = v109 - 1;
    v39 = v11;
    v40 = 4 * (int)v11;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v138, (uint64_t)&v150, v39, v11, 0, SDWORD2(v151));
      v42 = *(_QWORD *)(a1 + 104) + 32 * v115;
      *(_QWORD *)&v137 = 0;
      v136 = 0uLL;
      v135 = &unk_1EA926538;
      v39 += v11;
      if (v39 > *(_DWORD *)(v42 + 16))
        kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v41);
      *(_QWORD *)&v136 = *(_QWORD *)(v42 + 8) + v40;
      DWORD2(v136) = v11;
      *(_QWORD *)&v137 = *(_QWORD *)(v42 + 24);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v138, (uint64_t)&v141, (uint64_t)&v135, 0, v41);
      v40 += 4 * (int)v11;
      v138 = &unk_1EA926508;
      --v38;
      v139 = 0u;
      v140 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v138);
    }
    while (v38);
    v141 = &unk_1EA926508;
    v142 = 0u;
    v143 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v141);
  }
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v147, (uint64_t)&v159, *(_QWORD *)(a1 + 296) + 48 * (int)v115, v35, v36);
  kaldi::CuMatrixBase<float>::DiffTanh((uint64_t)&v144, (uint64_t)&v156, (uint64_t)&v165, v43, v44);
  v45 = v111 + 16 * v112;
  kaldi::CuMatrixBase<float>::DiffTanh(v45, *(_QWORD *)(a1 + 296) + 48 * (int)v115, (uint64_t)&v159, v46, v47);
  v48 = (int)v109 - 1;
  v110 = (int)v109 - 1;
  do
  {
    v49 = v48 * (int)v11;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v141, v114, v48 * v11, v11, 0, *(_DWORD *)(v114 + 16));
    v50 = v115;
    v51 = *(_QWORD *)(a1 + 392) + 48 * (int)v115;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v138, v51, v48 * v11, v11, 0, *(_DWORD *)(v51 + 16));
    if (*(_BYTE *)(a1 + 224))
    {
      v54 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v138, (uint64_t)&v141, CblasNoTrans, v54, (const char *)0x6F, 1.0, 0.0);
    }
    else
    {
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v138, (uint64_t)&v141, 111, v52, v53);
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v135, (uint64_t)&v147, v49, v11, 0, SDWORD2(v148));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v135, (uint64_t)&v138, v55, v56, v57);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v132, v45, v49, v11, 0, *(_DWORD *)(v45 + 16));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v132, (uint64_t)&v138, v58, v59, v60);
    if (*(_BYTE *)(a1 + 208))
    {
      v61 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      if (*(_DWORD *)(v61 + 20) <= 2u)
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v62);
      v63 = *(_QWORD *)(v61 + 8) + 8 * *(int *)(v61 + 24);
      v64 = *(_DWORD *)(v61 + 16);
      v65 = *(_QWORD *)(v61 + 32);
      v130 = &unk_1EA926538;
      v131[0] = v63;
      v131[2] = v65;
      v131[1] = v64;
      kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v132, (uint64_t)&v135, 111, (uint64_t)&v130, v62, 1.0, 1.0);
    }
    if (v48 < v110)
    {
      v66 = (int)v11;
      v67 = v66 + v66 * v48;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v130, v45, v66 + v66 * v48, v11, 0, *(_DWORD *)(v45 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v128, (uint64_t)&v162, v67, v11, 0, SDWORD2(v163));
      if (v113)
      {
        v68 = *(_QWORD *)(a1 + 128) + 48 * (int)v115;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v126, v68, 0, *(_DWORD *)(v68 + 20), 0, *(_DWORD *)(a1 + 176));
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v126);
        v70 = *(_QWORD *)(a1 + 104) + 32 * v115;
        memset(v125, 0, 24);
        v124 = &unk_1EA926538;
        if ((v11 + v67) > *(_DWORD *)(v70 + 16))
          kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v69);
        v125[0] = *(_QWORD *)(v70 + 8) + 4 * v67;
        LODWORD(v125[1]) = v11;
        v125[2] = *(_QWORD *)(v70 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v126, (uint64_t)&v130, (uint64_t)&v124, 1, v69);
        *(_OWORD *)&v131[1] = *(_OWORD *)&v127[1];
        v131[0] = v127[0];
        v131[3] = v127[3];
        v71 = *(_QWORD *)(a1 + 128) + 48 * (int)v115;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, v71, 0, *(_DWORD *)(v71 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v124);
        v73 = *(_QWORD *)(a1 + 104) + 32 * v115;
        memset(v123, 0, 24);
        v122 = &unk_1EA926538;
        if ((v11 + v67) > *(_DWORD *)(v73 + 16))
          kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v72);
        v123[0] = *(_QWORD *)(v73 + 8) + 4 * v67;
        LODWORD(v123[1]) = v11;
        v123[2] = *(_QWORD *)(v73 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v124, (uint64_t)&v128, (uint64_t)&v122, 1, v72);
        v129[0] = v125[0];
        *(_OWORD *)&v129[1] = *(_OWORD *)&v125[1];
        v129[3] = v125[3];
        v124 = &unk_1EA926508;
        memset(v125, 0, sizeof(v125));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v124);
        v126 = &unk_1EA926508;
        memset(v127, 0, sizeof(v127));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v126);
        v50 = v115;
      }
      if (*(_BYTE *)(a1 + 208))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v126, (uint64_t)&v150, v67, v11, 0, SDWORD2(v151));
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, (uint64_t)&v153, v67, v11, 0, SDWORD2(v154));
        if (v113)
        {
          v74 = *(_QWORD *)(a1 + 128) + 48 * (int)v50;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v122, v74, 0, *(_DWORD *)(v74 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v122);
          v76 = *(_QWORD *)(a1 + 104) + 32 * v50;
          memset(v121, 0, 24);
          v120 = &unk_1EA926538;
          if ((v11 + v67) > *(_DWORD *)(v76 + 16))
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v75);
          v121[0] = *(_QWORD *)(v76 + 8) + 4 * v67;
          LODWORD(v121[1]) = v11;
          v121[2] = *(_QWORD *)(v76 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v122, (uint64_t)&v126, (uint64_t)&v120, 1, v75);
          *(_OWORD *)&v127[1] = *(_OWORD *)&v123[1];
          v127[0] = v123[0];
          v127[3] = v123[3];
          v77 = *(_QWORD *)(a1 + 128) + 48 * (int)v50;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v120, v77, 0, *(_DWORD *)(v77 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v120);
          v79 = *(_QWORD *)(a1 + 104) + 32 * v50;
          v118 = 0;
          v119 = 0;
          v117 = 0;
          v116 = &unk_1EA926538;
          if ((v11 + v67) > *(_DWORD *)(v79 + 16))
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v78);
          v117 = *(_QWORD *)(v79 + 8) + 4 * v67;
          LODWORD(v118) = v11;
          v119 = *(_QWORD *)(v79 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v120, (uint64_t)&v124, (uint64_t)&v116, 1, v78);
          v125[0] = v121[0];
          *(_OWORD *)&v125[1] = *(_OWORD *)&v121[1];
          v125[3] = v121[3];
          v120 = &unk_1EA926508;
          memset(v121, 0, sizeof(v121));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v120);
          v122 = &unk_1EA926508;
          memset(v123, 0, sizeof(v123));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v122);
        }
        v80 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v80 + 20) <= 1u)
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v81);
        v82 = *(_QWORD *)(v80 + 8) + 4 * *(int *)(v80 + 24);
        v83 = *(_DWORD *)(v80 + 16);
        v84 = *(_QWORD *)(v80 + 32);
        v122 = &unk_1EA926538;
        v123[0] = v82;
        v123[2] = v84;
        v123[1] = v83;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v132, (uint64_t)&v126, 111, (uint64_t)&v122, v81, 1.0, 1.0);
        v85 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
        if (!*(_DWORD *)(v85 + 20))
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v86);
        v87 = *(_QWORD *)(v85 + 8);
        v88 = *(_DWORD *)(v85 + 16);
        v89 = *(_QWORD *)(v85 + 32);
        v122 = &unk_1EA926538;
        v123[0] = v87;
        v123[2] = v89;
        v123[1] = v88;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v132, (uint64_t)&v124, 111, (uint64_t)&v122, v86, 1.0, 1.0);
        v124 = &unk_1EA926508;
        memset(v125, 0, sizeof(v125));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v124);
        v126 = &unk_1EA926508;
        memset(v127, 0, sizeof(v127));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v126);
      }
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v132, (uint64_t)&v130, 111, (uint64_t)&v128, (const char *)0x6F, 1.0, 1.0);
      v128 = &unk_1EA926508;
      memset(v129, 0, sizeof(v129));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v128);
      v130 = &unk_1EA926508;
      memset(v131, 0, sizeof(v131));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v130);
      v50 = v115;
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v130, (uint64_t)&v153, v49, v11, 0, SDWORD2(v154));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v130, (uint64_t)&v132, v90, v91, v92);
    v130 = &unk_1EA926508;
    memset(v131, 0, sizeof(v131));
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v130);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v130, (uint64_t)&v144, v49, v11, 0, SDWORD2(v145));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v130, (uint64_t)&v132, v93, v94, v95);
    v130 = &unk_1EA926508;
    memset(v131, 0, sizeof(v131));
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v130);
    if (v48 <= 0)
    {
      v102 = v48 - 1;
    }
    else
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v130, (uint64_t)&v150, v49, v11, 0, SDWORD2(v151));
      kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v130, (uint64_t)&v132, v96, v97, v98);
      v130 = &unk_1EA926508;
      memset(v131, 0, sizeof(v131));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v130);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v130, v108, v49, v11, 0, *(_DWORD *)(v108 + 16));
      if (v113)
      {
        v99 = *(_QWORD *)(a1 + 128) + 48 * (int)v50;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v128, v99, 0, *(_DWORD *)(v99 + 20), 0, v131[1]);
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v128);
        v101 = *(_QWORD *)(a1 + 104) + 32 * v50;
        memset(v127, 0, 24);
        v126 = &unk_1EA926538;
        if ((v11 + v49) > *(_DWORD *)(v101 + 16))
          kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v100);
        v127[0] = *(_QWORD *)(v101 + 8) + 4 * v49;
        LODWORD(v127[1]) = v11;
        v127[2] = *(_QWORD *)(v101 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v128, (uint64_t)&v130, (uint64_t)&v126, 1, v100);
        *(_OWORD *)&v131[1] = *(_OWORD *)&v129[1];
        v131[0] = v129[0];
        v131[3] = v129[3];
        v128 = &unk_1EA926508;
        memset(v129, 0, sizeof(v129));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v128);
      }
      v102 = v48 - 1;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v128, v114, v11 * (v48 - 1), v11, 0, *(_DWORD *)(v114 + 16));
      v103 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v128, (uint64_t)&v130, CblasNoTrans, v103, (const char *)0x6F, 1.0, 1.0);
      v128 = &unk_1EA926508;
      memset(v129, 0, sizeof(v129));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v128);
      v130 = &unk_1EA926508;
      memset(v131, 0, sizeof(v131));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v130);
    }
    v132 = &unk_1EA926508;
    v133 = 0u;
    v134 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v132);
    v135 = &unk_1EA926508;
    v136 = 0u;
    v137 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v135);
    v138 = &unk_1EA926508;
    v139 = 0u;
    v140 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v138);
    v141 = &unk_1EA926508;
    v142 = 0u;
    v143 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v141);
    v104 = v48 <= 0;
    v48 = v102;
  }
  while (!v104);
  if (v107)
  {
    v105 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    kaldi::CuMatrixBase<float>::AddMatMat(v107, v108, CblasNoTrans, v105, (const char *)0x6F, 1.0, 0.0);
  }
  v144 = &unk_1EA926508;
  v145 = 0u;
  v146 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v144);
  v147 = &unk_1EA926508;
  v148 = 0u;
  v149 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v147);
  v150 = &unk_1EA926508;
  v151 = 0u;
  v152 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v150);
  v153 = &unk_1EA926508;
  v154 = 0u;
  v155 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v153);
  v156 = &unk_1EA926508;
  v157 = 0u;
  v158 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v156);
  v159 = &unk_1EA926508;
  v160 = 0u;
  v161 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v159);
  v162 = &unk_1EA926508;
  v163 = 0u;
  v164 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v162);
  v165 = &unk_1EA926508;
  v166 = 0u;
  v167 = 0u;
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v165).n128_u64[0];
  return result;
}

void sub_1DE49B68C(_Unwind_Exception *a1)
{
  STACK[0x220] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x228] = 0u;
  *(_OWORD *)&STACK[0x238] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x220]);
  STACK[0x248] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x250] = 0u;
  *(_OWORD *)&STACK[0x260] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x248]);
  STACK[0x270] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x278] = 0u;
  *(_OWORD *)&STACK[0x288] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x270]);
  STACK[0x298] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x2A0] = 0u;
  *(_OWORD *)&STACK[0x2B0] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x298]);
  STACK[0x2C0] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x2C8] = 0u;
  *(_OWORD *)&STACK[0x2D8] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x2C0]);
  STACK[0x2E8] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x2F0] = 0u;
  *(_OWORD *)&STACK[0x300] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x2E8]);
  STACK[0x310] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x318] = 0u;
  *(_OWORD *)&STACK[0x328] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x310]);
  STACK[0x338] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x340] = 0u;
  *(_OWORD *)&STACK[0x350] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x338]);
  STACK[0x360] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x368] = 0u;
  *(_OWORD *)&STACK[0x378] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x360]);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureTrainingBuffers(uint64_t *result)
{
  uint64_t *v1;

  if (!*((_BYTE *)result + 241))
  {
    v1 = result;
    std::vector<kaldi::CuMatrix<float>>::resize(result + 46, *((int *)result + 20));
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 49, *((int *)v1 + 20));
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 52, *((int *)v1 + 20));
    result = std::vector<kaldi::CuMatrix<float>>::resize(v1 + 55, *((int *)v1 + 20));
    *((_BYTE *)v1 + 241) = 1;
  }
  return result;
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateBackwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD v9[35];

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateBackwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1413, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating backward buffers for batch ", 38);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 368) + 48 * a2, a3, *(unsigned int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 392) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 416) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 440) + 48 * a2, a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 368) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 392) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 416) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 440) + 48 * a2 + 32) = a4;
}

void sub_1DE49BDDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

double `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BackpropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 144), a2, a3, a4, a5, a6);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v7;
  int v8;
  int v9;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  __int128 v47;
  __int128 v48;
  void *v49;
  __int128 v50;
  __int128 v51;
  void *v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  __int128 v56;
  __int128 v57;
  void *v58;
  __int128 v59;
  __int128 v60;

  if (*(_DWORD *)(a1 + 80) <= (int)a5)
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x40D, "batch_index < ropts_.num_subbatches", a5);
  v7 = *(_DWORD *)(a1 + 96);
  v8 = *(_DWORD *)(a2 + 20);
  if (v8 % v7)
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x411, "batch_size % num_utts == 0", a5);
  v9 = (int)a5;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v58, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1043, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Accumulating gradients for batch id = ", 38);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v58);
  }
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(a1);
  v14 = *(_QWORD *)(a1 + 272);
  v15 = *(_QWORD *)(a1 + 440) + 48 * v9;
  v16 = *(float *)(a1 + 60);
  *(_DWORD *)(*(_QWORD *)(a1 + 480) + 4 * v9) = v8;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v58, v15, 0, *(_DWORD *)(v15 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v55, v15, 0, *(_DWORD *)(v15 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v52, v15, 0, *(_DWORD *)(v15 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v9) + 32) = a4;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v9) + 32) = a4;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v9) + 24) = a4;
  if (*(_BYTE *)(a1 + 208))
    *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v9) + 32) = a4;
  if (*(_BYTE *)(a1 + 224))
    *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v9) + 32) = a4;
  v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v9);
  kaldi::CuMatrixBase<float>::AddMatMat(v17, v15, CblasTrans, a2, (const char *)0x6F, 1.0, v16);
  v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v9);
  v19 = v8 - v7;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, v15, v7, v8 - v7, 0, *(_DWORD *)(v15 + 16));
  v20 = *(_QWORD *)(a1 + 344) + 48 * v9;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, v20, 0, v8 - v7, 0, *(_DWORD *)(v20 + 16));
  kaldi::CuMatrixBase<float>::AddMatMat(v18, (uint64_t)&v49, CblasTrans, (uint64_t)&v46, (const char *)0x6F, 1.0, v16);
  v46 = &unk_1EA926508;
  v47 = 0u;
  v48 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
  v49 = &unk_1EA926508;
  v50 = 0u;
  v51 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v49);
  v21 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v9);
  kaldi::CuVectorBase<float>::AddRowSumMat(v21, v15, 1.0, v16, v22, v23, v24);
  if (*(_BYTE *)(a1 + 208))
  {
    v25 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v9);
    if (!*(_DWORD *)(v25 + 20))
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v26);
    v27 = *(_QWORD *)(v25 + 8);
    v28 = *(_DWORD *)(v25 + 16);
    v29 = *(_QWORD *)(v25 + 32);
    v42 = &unk_1EA926538;
    v43 = v27;
    v45 = v29;
    v44 = v28;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, (uint64_t)&v58, v7, v19, 0, SDWORD2(v59));
    v30 = v14 + 48 * v9;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, v30, 0, v19, 0, *(_DWORD *)(v30 + 16));
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v42, (uint64_t)&v49, 112, (uint64_t)&v46, 111, 1.0, v16);
    v46 = &unk_1EA926508;
    v47 = 0u;
    v48 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
    v49 = &unk_1EA926508;
    v50 = 0u;
    v51 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v49);
    v31 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v9);
    if (*(_DWORD *)(v31 + 20) <= 1u)
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v32);
    v33 = *(_QWORD *)(v31 + 8) + 4 * *(int *)(v31 + 24);
    v34 = *(_DWORD *)(v31 + 16);
    v35 = *(_QWORD *)(v31 + 32);
    v42 = &unk_1EA926538;
    v43 = v33;
    v45 = v35;
    v44 = v34;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, (uint64_t)&v55, v7, v19, 0, SDWORD2(v56));
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, v14 + 48 * v9, 0, v19, 0, *(_DWORD *)(v30 + 16));
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v42, (uint64_t)&v49, 112, (uint64_t)&v46, 111, 1.0, v16);
    v46 = &unk_1EA926508;
    v47 = 0u;
    v48 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
    v49 = &unk_1EA926508;
    v50 = 0u;
    v51 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v49);
    v36 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v9);
    if (*(_DWORD *)(v36 + 20) <= 2u)
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v37);
    v38 = *(_QWORD *)(v36 + 8) + 8 * *(int *)(v36 + 24);
    v39 = *(_DWORD *)(v36 + 16);
    v40 = *(_QWORD *)(v36 + 32);
    v49 = &unk_1EA926538;
    *(_QWORD *)&v50 = v38;
    *(_QWORD *)&v51 = v40;
    *((_QWORD *)&v50 + 1) = v39;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v49, (uint64_t)&v52, 112, v14 + 48 * v9, 111, 1.0, v16);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v41 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v9);
    kaldi::CuMatrixBase<float>::AddMatMat(v41, *(_QWORD *)(a1 + 368) + 48 * v9, CblasTrans, *(_QWORD *)(a1 + 320) + 48 * v9, (const char *)0x6F, 1.0, v16);
  }
  v52 = &unk_1EA926508;
  v53 = 0u;
  v54 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v52);
  v55 = &unk_1EA926508;
  v56 = 0u;
  v57 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v55);
  v58 = &unk_1EA926508;
  v59 = 0u;
  v60 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v58);
}

void sub_1DE49C400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,__int128 a24,__int128 a25,void *a26,__int128 a27,__int128 a28,void *a29,__int128 a30,__int128 a31)
{
  a23 = &unk_1EA926508;
  a24 = 0u;
  a25 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a23);
  a26 = &unk_1EA926508;
  a27 = 0u;
  a28 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a26);
  a29 = &unk_1EA926508;
  a30 = 0u;
  a31 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a29);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  _QWORD *v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  _QWORD *v36;
  uint64_t j;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  _QWORD *v44;
  void **v45;
  uint64_t v46;
  int v47;
  _QWORD *v48;
  void *__p[2];
  unsigned __int8 v50;
  _QWORD v51[36];

  if (*(_BYTE *)(a1 + 528))
    return;
  v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1)
    v3 = (v2 + 1);
  else
    v3 = 1;
  if (*(_QWORD *)(a1 + 544) != *(_QWORD *)(a1 + 536))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v51, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1332);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v51, "input_weights_gradient_.size() == 0");
    goto LABEL_58;
  }
  if (*(_QWORD *)(a1 + 568) != *(_QWORD *)(a1 + 560))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v51, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1333);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v51, "recurrent_weights_gradient_.size() == 0");
    goto LABEL_58;
  }
  if (*(_QWORD *)(a1 + 616) != *(_QWORD *)(a1 + 608))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v51, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1334);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v51, "bias_gradient_.size() == 0");
    goto LABEL_58;
  }
  v47 = *(_DWORD *)(a1 + 156);
  if (*(_BYTE *)(a1 + 208) && *(_QWORD *)(a1 + 592) != *(_QWORD *)(a1 + 584))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v51, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1335);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v51, "peephole_weights_gradient_.size() == 0");
    goto LABEL_58;
  }
  if (*(_BYTE *)(a1 + 224) && *(_QWORD *)(a1 + 640) != *(_QWORD *)(a1 + 632))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v51, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1336);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v51, "projection_weights_gradient_.size() == 0");
LABEL_58:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v51);
  }
  v4 = (_QWORD *)(a1 + 560);
  v5 = (_QWORD *)(a1 + 608);
  v48 = (_QWORD *)(a1 + 536);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 536, (int)v3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 560, (int)v3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize(a1 + 608, (int)v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 656), (int)v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 680), (int)v3);
  std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 728), (int)v3);
  v6 = a1 + 12;
  if ((int)v3 >= 1)
  {
    v7 = 0;
    v8 = a1 + 8;
    do
    {
      v9 = operator new();
      kaldi::CuMatrix<float>::CuMatrix(v9, (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v8 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 0, 0, 0);
      v10 = *(_QWORD *)(*v48 + 8 * v7);
      *(_QWORD *)(*v48 + 8 * v7) = v9;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
      v11 = operator new();
      kaldi::CuMatrix<float>::CuMatrix(v11, (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 0, 0, 0);
      v12 = *(_QWORD *)(*v4 + 8 * v7);
      *(_QWORD *)(*v4 + 8 * v7) = v11;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      v13 = (_QWORD *)operator new();
      v14 = (4 * *(_DWORD *)(a1 + 176));
      v13[2] = 0;
      v13[3] = 0;
      *v13 = &unk_1EA92DFD8;
      v13[1] = 0;
      kaldi::CuVector<float>::Resize((uint64_t)v13, v14, 0, v15, v16);
      v17 = *(_QWORD *)(*v5 + 8 * v7);
      *(_QWORD *)(*v5 + 8 * v7) = v13;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      if ((v47 & 0xFFFFFFFE) == 2)
      {
        kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 656) + 48 * v7, (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v8 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 1u, 0);
        kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 680) + 48 * v7, (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 1u, 0);
        kaldi::CuVector<float>::Resize(*(_QWORD *)(a1 + 728) + 32 * v7, (4 * *(_DWORD *)(a1 + 176)), 1u, v18, v19);
        if (*(_DWORD *)(a1 + 156) == 3)
        {
          kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 656) + 48 * v7, v20, v21, v22, v23, 1.0);
          kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 680) + 48 * v7, v24, v25, v26, v27, 1.0);
          kaldi::CuVectorBase<float>::Set(*(_QWORD *)(a1 + 728) + 32 * v7, 1.0);
        }
      }
      ++v7;
    }
    while (v7 != v3);
  }
  if (*(_BYTE *)(a1 + 208))
  {
    v28 = (_QWORD *)(a1 + 584);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 584, (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 704), (int)v3);
    if ((int)v3 >= 1)
    {
      for (i = 0; i != v3; ++i)
      {
        v30 = operator new();
        kaldi::CuMatrix<float>::CuMatrix(v30, 3, *(unsigned int *)(a1 + 176), 0, 0, 0);
        v31 = *(_QWORD *)(*v28 + 8 * i);
        *(_QWORD *)(*v28 + 8 * i) = v30;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
        if ((v47 & 0xFFFFFFFE) == 2)
        {
          kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 704) + 48 * i, 3, *(unsigned int *)(a1 + 176), 1u, 0);
          if (*(_DWORD *)(a1 + 156) == 3)
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 704) + 48 * i, v32, v33, v34, v35, 1.0);
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v36 = (_QWORD *)(a1 + 632);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 632, (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 752), (int)v3);
    if ((int)v3 >= 1)
    {
      for (j = 0; j != v3; ++j)
      {
        v38 = operator new();
        kaldi::CuMatrix<float>::CuMatrix(v38, *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), *(unsigned int *)(a1 + 176), 0, 0, 0);
        v39 = *(_QWORD *)(*v36 + 8 * j);
        *(_QWORD *)(*v36 + 8 * j) = v38;
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
        if ((v47 & 0xFFFFFFFE) == 2)
        {
          kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 752) + 48 * j, *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), *(unsigned int *)(a1 + 176), 1u, 0);
          if (*(_DWORD *)(a1 + 156) == 3)
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 752) + 48 * j, v40, v41, v42, v43, 1.0);
        }
      }
    }
  }
  *(_BYTE *)(a1 + 528) = 1;
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v51, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1391, 2);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Allocated memory for the gradients: ", 36);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 272))(__p, a1);
    if ((v50 & 0x80u) == 0)
      v45 = __p;
    else
      v45 = (void **)__p[0];
    if ((v50 & 0x80u) == 0)
      v46 = v50;
    else
      v46 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
    if ((char)v50 < 0)
      operator delete(__p[0]);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v51);
  }
}

void sub_1DE49CCA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AccumGradients(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AccumGradients((uint64_t)a1 + *(_QWORD *)(*a1 - 248), a2, a3, a4, a5);
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  const char *v12;

  v7 = *(_QWORD *)(a1 + 104);
  v8 = (_QWORD *)(a1 + 104);
  if (v7 == *(_QWORD *)(a1 + 112))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 104), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 128), *(int *)(a1 + 80));
    v7 = *(_QWORD *)(a1 + 104);
  }
  kaldi::CuVector<float>::Resize(v7 + 32 * a3, *(unsigned int *)(a2 + 16), 1u, a4, a5);
  return kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)(*v8 + 32 * a3), a2, v10, v11, v12);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(a1, a2);
  *((_WORD *)a1 + 120) = 0;
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetTrainOptions(_QWORD *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent *v2;

  v2 = (kaldi::nnet1::RecurrentBaseComponent *)((char *)a1 + *(_QWORD *)(*a1 - 280));
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(v2, a2);
  *((_WORD *)v2 + 120) = 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::HistoryStateSize(uint64_t a1)
{
  return (*(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12) + *(_DWORD *)(a1 + 176));
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetHistoryState(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;

  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6AE, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  v8 = *(_QWORD *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(v8 + 20), *(unsigned int *)(v8 + 16), 1u, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, *(_QWORD *)(a1 + 8) + 48 * a3, 111, v9, v10);
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD v18[4];

  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (int)a4)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6B5, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  if ((a3 & 0x80000000) != 0
    || (v7 = *(_QWORD *)(a1 + 8) + 48 * a4, *(_DWORD *)(v7 + 20) <= (signed int)a3))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6B6, "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", a5);
  }
  v9 = a4;
  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(v7 + 16), 1u, a4, a5);
  v13 = *(_QWORD *)(a1 + 8) + 48 * v9;
  if (*(_DWORD *)(v13 + 20) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v12);
  v14 = *(_QWORD *)(v13 + 8) + 4 * (int)(*(_DWORD *)(v13 + 24) * a3);
  v15 = *(_DWORD *)(v13 + 16);
  v16 = *(_QWORD *)(v13 + 32);
  v18[0] = &unk_1EA926538;
  v18[1] = v14;
  v18[3] = v16;
  v18[2] = v15;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v18, v10, v11, v12);
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  const char *v7;
  unsigned int *v8;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3)
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6D5, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v7);
  v8 = (unsigned int *)(*(_QWORD *)(a1 + 8) + 48 * a3);
  if (*(_DWORD *)(a2 + 20) != v8[5])
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6D6, "history.NumRows() == history_state_[batch_index].NumRows()", v7);
  if (*(_DWORD *)(a2 + 16) != v8[4])
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6D7, "history.NumCols() == history_state_[batch_index].NumCols()", v7);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v8, a2, 111, v6, v7);
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetHistoryState(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4)
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6DE, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v10);
  if (a3 < 0 || (v11 = *(_QWORD *)(a1 + 8) + 48 * a4, *(_DWORD *)(v11 + 20) <= a3))
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6DF, "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", v10);
  v12 = *(_DWORD *)(a2 + 16);
  if (v12 != *(_DWORD *)(v11 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6E0, "history.Dim() == history_state_[batch_index].NumCols()", v10);
  v13 = *(_QWORD *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * a3;
  v14 = *(_QWORD *)(v11 + 32);
  v16[0] = &unk_1EA926538;
  v16[1] = v13;
  v16[3] = v14;
  v16[2] = v12;
  return kaldi::CuVectorBase<float>::CopyFromVec(v16, a2, v8, v9, v10);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ResetHistoryState(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  const char *v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void **v17;
  uint64_t v18;
  void *__p[2];
  unsigned __int8 v21;
  _QWORD v22[35];
  _QWORD v23[11];
  char v24;
  uint64_t v25;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4)
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6E7, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v8);
  if (a2[1] != *(_DWORD *)(*(_QWORD *)(a1 + 8) + 48 * a4 + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6E8, "sequence_idx.size() == history_state_[batch_index].NumRows()", v8);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48 * a4 + 32) = a3;
  if (a2[1])
  {
    v10 = 0;
    do
    {
      if (((*(_QWORD *)(*a2 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
      {
        v11 = *(_QWORD *)(a1 + 8) + 48 * a4;
        if (v10 >= *(unsigned int *)(v11 + 20))
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v9);
        v12 = *(_QWORD *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * (int)v10;
        v13 = *(_DWORD *)(v11 + 16);
        v14 = *(_QWORD *)(v11 + 32);
        v22[0] = &unk_1EA926538;
        v22[1] = v12;
        v22[3] = v14;
        v22[2] = v13;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v22);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          v15 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
        }
      }
      ++v10;
    }
    while (a2[1] > v10);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22, "ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1779, 3);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Reset previous states for utts ", 31);
    std::stringbuf::str();
    if ((v21 & 0x80u) == 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    if ((v21 & 0x80u) == 0)
      v18 = v21;
    else
      v18 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    if ((char)v21 < 0)
      operator delete(__p[0]);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22);
  }
  v23[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v23 + *(_QWORD *)(v23[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v23[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v24 < 0)
    operator delete((void *)v23[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v25);
}

void sub_1DE49D418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0)
    operator delete(__p);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ResetHistoryState(_QWORD *a1)
{
  uint64_t i;

  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  for (i = a1[1]; i != a1[2]; i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 152) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(_BYTE *)(result + 528) = 0;
  return result;
}

_QWORD *`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::SetGradientNormalization(_QWORD *result, int a2, float a3)
{
  float *v3;

  v3 = (float *)((char *)result + *(_QWORD *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((_BYTE *)v3 + 528) = 0;
  return result;
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NormalizeGradients(uint64_t a1, unsigned int a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;

  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a2)
    kaldi::KaldiAssertFailure_((kaldi *)"NormalizeGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x59A, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a6);
  v8 = a3;
  v9 = *(_DWORD *)(a1 + 156);
  if (v9 == 1)
  {
    if (a3 > 0.0)
    {
      if (*(_BYTE *)(a1 + 84))
        v8 = (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * a2) * a3;
      v18 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v18, v8);
      v19 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v19, v8);
      v20 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v20, v8);
      if (*(_BYTE *)(a1 + 208))
      {
        v21 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v21, v8);
      }
      if (*(_BYTE *)(a1 + 224))
      {
        v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v22, v8);
      }
    }
  }
  else if (v9 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      v10 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v10, *(_QWORD *)(a1 + 656) + 48 * a2, v8);
      v11 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v11, *(_QWORD *)(a1 + 680) + 48 * a2, v8);
      v12 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v12, *(_QWORD *)(a1 + 728) + 32 * a2, v8, v13, v14, v15);
      if (*(_BYTE *)(a1 + 208))
      {
        v16 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v16, *(_QWORD *)(a1 + 704) + 48 * a2, v8);
      }
      if (*(_BYTE *)(a1 + 224))
      {
        v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v17, *(_QWORD *)(a1 + 752) + 48 * a2, v8);
      }
    }
  }
  else if (a3 > 0.0 && v9 == 2)
  {
    v23 = a2;
    if (*(_BYTE *)(a1 + 84))
      v8 = (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * a2) * a3;
    v24 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v24, (unsigned int *)(*(_QWORD *)(a1 + 656) + 48 * v23), v8, v25, v26, v27);
    v28 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v28, (unsigned int *)(*(_QWORD *)(a1 + 680) + 48 * v23), v8, v29, v30, v31);
    v32 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v32, (_DWORD *)(*(_QWORD *)(a1 + 728) + 32 * v23), v33, v34, v35, v8);
    if (*(_BYTE *)(a1 + 208))
    {
      v36 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v36, (unsigned int *)(*(_QWORD *)(a1 + 704) + 48 * v23), v8, v37, v38, v39);
    }
    if (*(_BYTE *)(a1 + 224))
    {
      v40 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v40, (unsigned int *)(*(_QWORD *)(a1 + 752) + 48 * v23), v8, v41, v42, v43);
    }
  }
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NormalizeGradients(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::NormalizeGradients((uint64_t)a1 + *(_QWORD *)(*a1 - 264), a2, a6, a3, a4, a5);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  int v31;

  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(a1);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
  *a3 = result;
  if (*(_QWORD *)(a1 + 544) == *(_QWORD *)(a1 + 536) || *(_QWORD *)(a1 + 568) == *(_QWORD *)(a1 + 560))
  {
    v31 = 0;
    goto LABEL_11;
  }
  if (*(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80) == 1)
    v7 = 0;
  else
    v7 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80);
  v8 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v7);
  v13 = kaldi::CuMatrixBase<float>::CountZeros(v8, v9, v10, v11, v12);
  v14 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v7);
  v19 = kaldi::CuMatrixBase<float>::CountZeros(v14, v15, v16, v17, v18) + v13;
  v20 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v7);
  result = kaldi::CuVectorBase<float>::CountZeros(v20);
  *a2 = v19 + result;
  if (*(_BYTE *)(a1 + 208))
  {
    v21 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v7);
    result = kaldi::CuMatrixBase<float>::CountZeros(v21, v22, v23, v24, v25);
    *a2 += result;
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v26 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v7);
    result = kaldi::CuMatrixBase<float>::CountZeros(v26, v27, v28, v29, v30);
    v31 = *a2 + result;
LABEL_11:
    *a2 = v31;
  }
  return result;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr(_QWORD *a1, _DWORD *a2, _DWORD *a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr((uint64_t)a1 + *(_QWORD *)(*a1 - 56), a2, a3);
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetInternalMemory(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, *(_QWORD *)(a1 + 272) + 48 * a3, 111, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ApplyCorr(uint64_t a1, int a2, float a3)
{
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;

  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(a1);
  v6 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
  v7 = -a3;
  v8 = -(float)(a3 * *(float *)(a1 + 464));
  v9 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, a2);
  kaldi::CuMatrixBase<float>::AddMat(v6, v9, 111, v10, v11, v8, 1.0);
  v12 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
  v13 = -(float)(a3 * *(float *)(a1 + 464));
  v14 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, a2);
  kaldi::CuMatrixBase<float>::AddMat(v12, v14, 111, v15, v16, v13, 1.0);
  v17 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
  v18 = -(float)(a3 * *(float *)(a1 + 464));
  v19 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, a2);
  kaldi::CuVectorBase<float>::AddVec(v17, v19, v20, v21, v22, v18, 1.0);
  if (*(_BYTE *)(a1 + 208))
  {
    v23 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
    v24 = *(float *)(a1 + 464) * v7;
    v25 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, a2);
    kaldi::CuMatrixBase<float>::AddMat(v23, v25, 111, v26, v27, v24, 1.0);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v28 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
    v29 = *(float *)(a1 + 468) * v7;
    v30 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, a2);
    kaldi::CuMatrixBase<float>::AddMat(v28, v30, 111, v31, v32, v29, 1.0);
  }
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureBuffers(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  if (!*(_BYTE *)(a1 + 240))
  {
    v2 = *(int *)(a1 + 80);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 8), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 272), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 296), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 320), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 344), v2);
    if ((int)v2 >= 1)
    {
      v3 = 0;
      do
      {
        kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 8) + v3, *(unsigned int *)(a1 + 96), (*(_DWORD *)(a1 + 12 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + *(_DWORD *)(a1 + 176)), 0, 0);
        v3 += 48;
      }
      while (48 * v2 != v3);
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 480), v2);
    *(_BYTE *)(a1 + 240) = 1;
  }
}

float kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Check(uint64_t a1)
{
  float result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD v20[34];

  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 20) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1642);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Input weights #rows = ", 22);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    v3 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"; expecting ", 12);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 16) != *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1646);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Input weights #columns = ", 25);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"; expecting ", 12);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, " (same as input dim)");
    goto LABEL_28;
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 20) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1650);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Recurrent weights #rows = ", 26);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"; expecting ", 12);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 16) != *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1654);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Recurrent weights #columns = ", 29);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"; expecting ", 12);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, " (same as output dim)");
    goto LABEL_28;
  }
  if (*(_BYTE *)(a1 + 208))
  {
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 20) != 3)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1659);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Peephole weights #rows = ", 25);
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"; expecting ", 12);
      std::ostream::operator<<();
      goto LABEL_28;
    }
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 16) != *(_DWORD *)(a1 + 176))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1662);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Peephole weights #columns = ", 28);
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"; expecting ", 12);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, " (same as #cells)");
      goto LABEL_28;
    }
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + 16) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1667);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Bias dim = ", 11);
    kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; expecting ", 12);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(_BYTE *)(a1 + 224))
  {
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 20) == *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12))
    {
      if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 16) == *(_DWORD *)(a1 + 176))
        goto LABEL_12;
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1675);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Projection weights #columns = ", 30);
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      v18 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"; expecting ", 12);
      v19 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, " (same as #cells)");
    }
    else
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1671);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Projection weights #rows = ", 27);
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      v16 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"; expecting ", 12);
      v17 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, " (same as output dim)");
    }
LABEL_28:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
  }
LABEL_12:
  if (*(float *)(a1 + 464) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1681);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"learn_rate_coeff_ must not be negative; found: ",
      47);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 468) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1684);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"projection_learn_rate_coeff_ must not be negative; found: ",
      58);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 472) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1688);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"max_norm_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 152) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1691);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"max_grad_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  result = *(float *)(a1 + 476);
  if (result < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1694);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"max_cell_values_ must not be negative; found: ",
      46);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  return result;
}

void sub_1DE49E238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)(a1 + 856) = a2;
  *(_DWORD *)(a1 + 860) = a3;
  *(_WORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 896) = &off_1EA9284D0;
  *(_OWORD *)(a1 + 904) = xmmword_1DEC3D450;
  *(_QWORD *)(a1 + 920) = 0x3BF800000;
  *(_DWORD *)(a1 + 928) = 1;
  *(_WORD *)(a1 + 932) = 0;
  *(_BYTE *)(a1 + 934) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &unk_1EA927930;
  *(_DWORD *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 56) = xmmword_1DEC3D450;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)(a1 + 48) = &off_1EA92B868;
  *(_QWORD *)(a1 + 88) = &unk_1EA92B888;
  *(_QWORD *)(a1 + 96) = 0x100000001;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)a1 = &off_1EA926E08;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 848) = &off_1EA9270F8;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = &unk_1EA926F98;
  *(_QWORD *)(a1 + 168) = &unk_1EA926FC0;
  *(_DWORD *)(a1 + 176) = a3;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_WORD *)(a1 + 208) = 1;
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_WORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0x3DCCCCCD3F800000;
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 513) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 536);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 257);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 258);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 536);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 262);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 263);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 560);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 268);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 269);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 560);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 273);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 274);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 608);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 279);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 280);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 608);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 284);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 285);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 208))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 290);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 584);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 291);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 292);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 208))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 296);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 584);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 297);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 298);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 224))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 303);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 632);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 304);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 305);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 224))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 309);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 632);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 310);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 311);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  char v8;
  const char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v60;
  uint64_t v61;
  uint64_t v62[35];

  v4 = a2 + *(_QWORD *)(*(_QWORD *)a2 - 24);
  *(_QWORD *)(a1 + 848) = off_1EA92D6D8;
  v5 = *(_QWORD *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(_QWORD *)(a1 + 856) = v5;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 872), *(const void **)(v4 + 24), *(_QWORD *)(v4 + 32), (uint64_t)(*(_QWORD *)(v4 + 32) - *(_QWORD *)(v4 + 24)) >> 3);
  *(_QWORD *)(a1 + 848) = off_1EA929750;
  *(_QWORD *)(a1 + 896) = &off_1EA9284D0;
  v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1EA91BF78, a2);
  *(_QWORD *)(a1 + 160) = &unk_1EA926F98;
  *(_QWORD *)(a1 + 168) = &unk_1EA926FC0;
  *(_QWORD *)a1 = &off_1EA926E08;
  *(_QWORD *)(a1 + 848) = &off_1EA9270F8;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = 0;
  v7 = *(_BYTE *)(a2 + 240);
  v8 = *(_BYTE *)(a2 + 241);
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 240) = v7;
  *(_BYTE *)(a1 + 241) = v8;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 248), *(_QWORD *)(a2 + 248), *(_QWORD *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 256) - *(_QWORD *)(a2 + 248)) >> 4));
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 272), *(_QWORD *)(a2 + 272), *(_QWORD *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 4));
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 296), *(_QWORD *)(a2 + 296), *(_QWORD *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 4));
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 320), *(_QWORD *)(a2 + 320), *(_QWORD *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 4));
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 344), *(_QWORD *)(a2 + 344), *(_QWORD *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344)) >> 4));
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 368), *(_QWORD *)(a2 + 368), *(_QWORD *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 376) - *(_QWORD *)(a2 + 368)) >> 4));
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 392), *(_QWORD *)(a2 + 392), *(_QWORD *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 400) - *(_QWORD *)(a2 + 392)) >> 4));
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 416), *(_QWORD *)(a2 + 416), *(_QWORD *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 424) - *(_QWORD *)(a2 + 416)) >> 4));
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 440), *(_QWORD *)(a2 + 440), *(_QWORD *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 448) - *(_QWORD *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 480), *(const void **)(a2 + 480), *(_QWORD *)(a2 + 488), (uint64_t)(*(_QWORD *)(a2 + 488) - *(_QWORD *)(a2 + 480)) >> 2);
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 504), *(const void **)(a2 + 504), *(_QWORD *)(a2 + 512), (uint64_t)(*(_QWORD *)(a2 + 512) - *(_QWORD *)(a2 + 504)) >> 2);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 536), (uint64_t)(*(_QWORD *)(a2 + 544) - *(_QWORD *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 560), (uint64_t)(*(_QWORD *)(a2 + 568) - *(_QWORD *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 584), (uint64_t)(*(_QWORD *)(a2 + 592) - *(_QWORD *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 608), (uint64_t)(*(_QWORD *)(a2 + 616) - *(_QWORD *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 632), (uint64_t)(*(_QWORD *)(a2 + 640) - *(_QWORD *)(a2 + 632)) >> 3);
  *(_QWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 656), *(_QWORD *)(a2 + 656), *(_QWORD *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 664) - *(_QWORD *)(a2 + 656)) >> 4));
  *(_QWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 680), *(_QWORD *)(a2 + 680), *(_QWORD *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 688) - *(_QWORD *)(a2 + 680)) >> 4));
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 704), *(_QWORD *)(a2 + 704), *(_QWORD *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 712) - *(_QWORD *)(a2 + 704)) >> 4));
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 728), *(_QWORD *)(a2 + 728), *(_QWORD *)(a2 + 736), (uint64_t)(*(_QWORD *)(a2 + 736) - *(_QWORD *)(a2 + 728)) >> 5);
  *(_QWORD *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 752), *(_QWORD *)(a2 + 752), *(_QWORD *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 760) - *(_QWORD *)(a2 + 752)) >> 4));
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v62, "LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 151);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v62);
  }
  v10 = *(int **)(a2 + 184);
  if (v10)
  {
    kaldi::NewCuSubOrMat<signed char>(v10, v62);
    v11 = v62[0];
    v62[0] = 0;
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), v11);
    v12 = v62[0];
    v62[0] = 0;
    if (v12)
    {
      v13 = kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v12);
      MEMORY[0x1DF0ED014](v13, 0x10D0C4068EB0291);
    }
  }
  v14 = *(int **)(a2 + 192);
  if (v14)
  {
    kaldi::NewCuSubOrMat<signed char>(v14, v62);
    v15 = v62[0];
    v62[0] = 0;
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), v15);
    v16 = v62[0];
    v62[0] = 0;
    if (v16)
    {
      v17 = kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v16);
      MEMORY[0x1DF0ED014](v17, 0x10D0C4068EB0291);
    }
  }
  v18 = *(_QWORD **)(a2 + 200);
  if (v18)
  {
    kaldi::NewCuSubOrVec<float>(v18, 0, v62);
    v19 = v62[0];
    v62[0] = 0;
    v20 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v19;
    if (v20)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
      v21 = v62[0];
      v62[0] = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    }
  }
  v22 = *(_QWORD *)(a2 + 216);
  if (v22)
  {
    kaldi::NewCuSubOrMat<float>(v22, 0, v62);
    v23 = v62[0];
    v62[0] = 0;
    v24 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v23;
    if (v24)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
      v25 = v62[0];
      v62[0] = 0;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
    }
  }
  v26 = *(int **)(a2 + 232);
  if (v26)
  {
    kaldi::NewCuSubOrMat<signed char>(v26, v62);
    v27 = v62[0];
    v62[0] = 0;
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), v27);
    v28 = v62[0];
    v62[0] = 0;
    if (v28)
    {
      v29 = kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v28);
      MEMORY[0x1DF0ED014](v29, 0x10D0C4068EB0291);
    }
  }
  v30 = *(_QWORD *)(a1 + 544);
  v31 = *(_QWORD *)(a1 + 536);
  v32 = (v30 - v31) >> 3;
  if (v32 != (uint64_t)(*(_QWORD *)(a1 + 568) - *(_QWORD *)(a1 + 560)) >> 3)
  {
    v60 = "input_weights_gradient_.size() == recurrent_weights_gradient_.size()";
    v61 = 162;
    goto LABEL_63;
  }
  if (v32 != (uint64_t)(*(_QWORD *)(a1 + 616) - *(_QWORD *)(a1 + 608)) >> 3)
  {
    v60 = "input_weights_gradient_.size() == bias_gradient_.size()";
    v61 = 163;
    goto LABEL_63;
  }
  if (*(_BYTE *)(a1 + 208) && v32 != (uint64_t)(*(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584)) >> 3)
  {
    v60 = "input_weights_gradient_.size() == peephole_weights_gradient_.size()";
    v61 = 165;
    goto LABEL_63;
  }
  if (*(_BYTE *)(a1 + 224) && v32 != (uint64_t)(*(_QWORD *)(a1 + 640) - *(_QWORD *)(a1 + 632)) >> 3)
  {
    v60 = "input_weights_gradient_.size() == projection_weights_gradient_.size()";
    v61 = 168;
LABEL_63:
    kaldi::KaldiAssertFailure_((kaldi *)"LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)v61, v60, v9);
  }
  if (v30 != v31)
  {
    v33 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a2 + 536) + 8 * v33))
      {
        v34 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a2, v33);
        kaldi::NewCuSubOrMat<float>(v34, 0, v62);
        v35 = *(_QWORD *)(a1 + 536);
        v36 = v62[0];
        v62[0] = 0;
        v37 = *(_QWORD *)(v35 + 8 * v33);
        *(_QWORD *)(v35 + 8 * v33) = v36;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
        v38 = v62[0];
        v62[0] = 0;
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 560) + 8 * v33))
      {
        v39 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a2, v33);
        kaldi::NewCuSubOrMat<float>(v39, 0, v62);
        v40 = *(_QWORD *)(a1 + 560);
        v41 = v62[0];
        v62[0] = 0;
        v42 = *(_QWORD *)(v40 + 8 * v33);
        *(_QWORD *)(v40 + 8 * v33) = v41;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
        v43 = v62[0];
        v62[0] = 0;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 608) + 8 * v33))
      {
        v44 = (_QWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a2, v33);
        kaldi::NewCuSubOrVec<float>(v44, 0, v62);
        v45 = *(_QWORD *)(a1 + 608);
        v46 = v62[0];
        v62[0] = 0;
        v47 = *(_QWORD *)(v45 + 8 * v33);
        *(_QWORD *)(v45 + 8 * v33) = v46;
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
        v48 = v62[0];
        v62[0] = 0;
        if (v48)
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
      }
      if (*(_BYTE *)(a1 + 208) && *(_QWORD *)(*(_QWORD *)(a2 + 584) + 8 * v33))
      {
        v49 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a2, v33);
        kaldi::NewCuSubOrMat<float>(v49, 0, v62);
        v50 = *(_QWORD *)(a1 + 584);
        v51 = v62[0];
        v62[0] = 0;
        v52 = *(_QWORD *)(v50 + 8 * v33);
        *(_QWORD *)(v50 + 8 * v33) = v51;
        if (v52)
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52);
        v53 = v62[0];
        v62[0] = 0;
        if (v53)
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53);
      }
      if (*(_BYTE *)(a1 + 224) && *(_QWORD *)(*(_QWORD *)(a2 + 632) + 8 * v33))
      {
        v54 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a2, v33);
        kaldi::NewCuSubOrMat<float>(v54, 0, v62);
        v55 = *(_QWORD *)(a1 + 632);
        v56 = v62[0];
        v62[0] = 0;
        v57 = *(_QWORD *)(v55 + 8 * v33);
        *(_QWORD *)(v55 + 8 * v33) = v56;
        if (v57)
          (*(void (**)(uint64_t))(*(_QWORD *)v57 + 24))(v57);
        v58 = v62[0];
        v62[0] = 0;
        if (v58)
          (*(void (**)(uint64_t))(*(_QWORD *)v58 + 24))(v58);
      }
      ++v33;
    }
    while (v33 < (uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 3);
  }
  if (*(_QWORD *)(a2 + 784) != *(_QWORD *)(a2 + 776))
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  return a1;
}

void sub_1DE49F170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,uint64_t a30)
{
  _QWORD *v30;
  void **v31;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v31);
  a30 = a10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a11;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a14;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  v33 = *a15;
  if (*a15)
  {
    v30[64] = v33;
    operator delete(v33);
  }
  v34 = *a16;
  if (*a16)
  {
    v30[61] = v34;
    operator delete(v34);
  }
  a30 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a23;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a24;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a20;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a27, 0);
  v35 = v30[27];
  v30[27] = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
  v36 = v30[25];
  v30[25] = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a28, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a29, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a21);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a22);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v30, (uint64_t *)&off_1EA91BF78);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v30 + 106));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = a2[3];
  *(_QWORD *)(a1 + 160) = &unk_1EA926F98;
  v5 = a1 + 160;
  *(_QWORD *)(a1 + 168) = &unk_1EA926FC0;
  v6 = a1 + 168;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 776));
  v11 = (void **)(v5 + 592);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 568);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 544);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 520);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 496);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 472);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 448);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 424);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 400);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 376);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v7 = *(void **)(v5 + 344);
  if (v7)
  {
    *(_QWORD *)(a1 + 512) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 480);
  if (v8)
  {
    *(_QWORD *)(a1 + 488) = v8;
    operator delete(v8);
  }
  v11 = (void **)(a1 + 440);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 416);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 392);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 368);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 344);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 320);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 296);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 272);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), 0);
  v9 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  v10 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), 0);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v6);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v5);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, a2 + 1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(uint64_t a1)
{
  uint64_t v2;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v2 + 848));
  return a1;
}

void `non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 688));
}

{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 680));
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(a1 - 160);
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(a1 - 168);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(_QWORD *a1)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 848));
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::~LstmComponent(uint64_t a1)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 848));
  JUMPOUT(0x1DF0ED014);
}

char *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Copy(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_1DE49F7BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

char *`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Copy(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Copy((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

char *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_1DE49F83C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

char *`non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(a1 - 160);
}

char *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent<kaldi::QuantizedMatrix<signed char>>((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_1DE49F8B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  char v8;
  const char *v9;
  int *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v54;
  uint64_t v55;
  uint64_t v56[35];

  v4 = a2 + *(_QWORD *)(*(_QWORD *)a2 - 24);
  *(_QWORD *)(a1 + 848) = off_1EA92D6D8;
  v5 = *(_QWORD *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(_QWORD *)(a1 + 856) = v5;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 872), *(const void **)(v4 + 24), *(_QWORD *)(v4 + 32), (uint64_t)(*(_QWORD *)(v4 + 32) - *(_QWORD *)(v4 + 24)) >> 3);
  *(_QWORD *)(a1 + 848) = off_1EA929750;
  *(_QWORD *)(a1 + 896) = &off_1EA9284D0;
  v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1EA91BF98, a2);
  *(_QWORD *)(a1 + 160) = &unk_1EA9273B8;
  *(_QWORD *)(a1 + 168) = &unk_1EA9273E0;
  *(_QWORD *)a1 = &off_1EA927228;
  *(_QWORD *)(a1 + 848) = &off_1EA927518;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = 0;
  v7 = *(_BYTE *)(a2 + 240);
  v8 = *(_BYTE *)(a2 + 241);
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 240) = v7;
  *(_BYTE *)(a1 + 241) = v8;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 248), *(_QWORD *)(a2 + 248), *(_QWORD *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 256) - *(_QWORD *)(a2 + 248)) >> 4));
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 272), *(_QWORD *)(a2 + 272), *(_QWORD *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 4));
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 296), *(_QWORD *)(a2 + 296), *(_QWORD *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 4));
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 320), *(_QWORD *)(a2 + 320), *(_QWORD *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 4));
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 344), *(_QWORD *)(a2 + 344), *(_QWORD *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344)) >> 4));
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 368), *(_QWORD *)(a2 + 368), *(_QWORD *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 376) - *(_QWORD *)(a2 + 368)) >> 4));
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 392), *(_QWORD *)(a2 + 392), *(_QWORD *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 400) - *(_QWORD *)(a2 + 392)) >> 4));
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 416), *(_QWORD *)(a2 + 416), *(_QWORD *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 424) - *(_QWORD *)(a2 + 416)) >> 4));
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 440), *(_QWORD *)(a2 + 440), *(_QWORD *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 448) - *(_QWORD *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 480), *(const void **)(a2 + 480), *(_QWORD *)(a2 + 488), (uint64_t)(*(_QWORD *)(a2 + 488) - *(_QWORD *)(a2 + 480)) >> 2);
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 504), *(const void **)(a2 + 504), *(_QWORD *)(a2 + 512), (uint64_t)(*(_QWORD *)(a2 + 512) - *(_QWORD *)(a2 + 504)) >> 2);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 536), (uint64_t)(*(_QWORD *)(a2 + 544) - *(_QWORD *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 560), (uint64_t)(*(_QWORD *)(a2 + 568) - *(_QWORD *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 584), (uint64_t)(*(_QWORD *)(a2 + 592) - *(_QWORD *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 608), (uint64_t)(*(_QWORD *)(a2 + 616) - *(_QWORD *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 632), (uint64_t)(*(_QWORD *)(a2 + 640) - *(_QWORD *)(a2 + 632)) >> 3);
  *(_QWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 656), *(_QWORD *)(a2 + 656), *(_QWORD *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 664) - *(_QWORD *)(a2 + 656)) >> 4));
  *(_QWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 680), *(_QWORD *)(a2 + 680), *(_QWORD *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 688) - *(_QWORD *)(a2 + 680)) >> 4));
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 704), *(_QWORD *)(a2 + 704), *(_QWORD *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 712) - *(_QWORD *)(a2 + 704)) >> 4));
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 728), *(_QWORD *)(a2 + 728), *(_QWORD *)(a2 + 736), (uint64_t)(*(_QWORD *)(a2 + 736) - *(_QWORD *)(a2 + 728)) >> 5);
  *(_QWORD *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 752), *(_QWORD *)(a2 + 752), *(_QWORD *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 760) - *(_QWORD *)(a2 + 752)) >> 4));
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v56, "LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 248);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v56);
  }
  v10 = *(int **)(a2 + 184);
  if (v10)
  {
    v11 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix<signed char>(v11, v10);
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), v11);
  }
  v12 = *(int **)(a2 + 192);
  if (v12)
  {
    v13 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix<signed char>(v13, v12);
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), v13);
  }
  v14 = *(_QWORD **)(a2 + 200);
  if (v14)
  {
    kaldi::NewCuSubOrVec<float>(v14, 0, v56);
    v15 = v56[0];
    v56[0] = 0;
    v16 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v15;
    if (v16)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
      v17 = v56[0];
      v56[0] = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    }
  }
  v18 = *(_QWORD *)(a2 + 216);
  if (v18)
  {
    kaldi::NewCuSubOrMat<float>(v18, 0, v56);
    v19 = v56[0];
    v56[0] = 0;
    v20 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v19;
    if (v20)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
      v21 = v56[0];
      v56[0] = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
    }
  }
  v22 = *(int **)(a2 + 232);
  if (v22)
  {
    v23 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix<signed char>(v23, v22);
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), v23);
  }
  v24 = *(_QWORD *)(a1 + 544);
  v25 = *(_QWORD *)(a1 + 536);
  v26 = (v24 - v25) >> 3;
  if (v26 != (uint64_t)(*(_QWORD *)(a1 + 568) - *(_QWORD *)(a1 + 560)) >> 3)
  {
    v54 = "input_weights_gradient_.size() == recurrent_weights_gradient_.size()";
    v55 = 259;
    goto LABEL_60;
  }
  if (v26 != (uint64_t)(*(_QWORD *)(a1 + 616) - *(_QWORD *)(a1 + 608)) >> 3)
  {
    v54 = "input_weights_gradient_.size() == bias_gradient_.size()";
    v55 = 260;
    goto LABEL_60;
  }
  if (*(_BYTE *)(a1 + 208) && v26 != (uint64_t)(*(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584)) >> 3)
  {
    v54 = "input_weights_gradient_.size() == peephole_weights_gradient_.size()";
    v55 = 262;
    goto LABEL_60;
  }
  if (*(_BYTE *)(a1 + 224) && v26 != (uint64_t)(*(_QWORD *)(a1 + 640) - *(_QWORD *)(a1 + 632)) >> 3)
  {
    v54 = "input_weights_gradient_.size() == projection_weights_gradient_.size()";
    v55 = 265;
LABEL_60:
    kaldi::KaldiAssertFailure_((kaldi *)"LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)v55, v54, v9);
  }
  if (v24 != v25)
  {
    v27 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a2 + 536) + 8 * v27))
      {
        v28 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a2, v27);
        kaldi::NewCuSubOrMat<float>(v28, 0, v56);
        v29 = *(_QWORD *)(a1 + 536);
        v30 = v56[0];
        v56[0] = 0;
        v31 = *(_QWORD *)(v29 + 8 * v27);
        *(_QWORD *)(v29 + 8 * v27) = v30;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
        v32 = v56[0];
        v56[0] = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 560) + 8 * v27))
      {
        v33 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a2, v27);
        kaldi::NewCuSubOrMat<float>(v33, 0, v56);
        v34 = *(_QWORD *)(a1 + 560);
        v35 = v56[0];
        v56[0] = 0;
        v36 = *(_QWORD *)(v34 + 8 * v27);
        *(_QWORD *)(v34 + 8 * v27) = v35;
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
        v37 = v56[0];
        v56[0] = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 608) + 8 * v27))
      {
        v38 = (_QWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a2, v27);
        kaldi::NewCuSubOrVec<float>(v38, 0, v56);
        v39 = *(_QWORD *)(a1 + 608);
        v40 = v56[0];
        v56[0] = 0;
        v41 = *(_QWORD *)(v39 + 8 * v27);
        *(_QWORD *)(v39 + 8 * v27) = v40;
        if (v41)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
        v42 = v56[0];
        v56[0] = 0;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
      }
      if (*(_BYTE *)(a1 + 208) && *(_QWORD *)(*(_QWORD *)(a2 + 584) + 8 * v27))
      {
        v43 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a2, v27);
        kaldi::NewCuSubOrMat<float>(v43, 0, v56);
        v44 = *(_QWORD *)(a1 + 584);
        v45 = v56[0];
        v56[0] = 0;
        v46 = *(_QWORD *)(v44 + 8 * v27);
        *(_QWORD *)(v44 + 8 * v27) = v45;
        if (v46)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46);
        v47 = v56[0];
        v56[0] = 0;
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
      }
      if (*(_BYTE *)(a1 + 224) && *(_QWORD *)(*(_QWORD *)(a2 + 632) + 8 * v27))
      {
        v48 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a2, v27);
        kaldi::NewCuSubOrMat<float>(v48, 0, v56);
        v49 = *(_QWORD *)(a1 + 632);
        v50 = v56[0];
        v56[0] = 0;
        v51 = *(_QWORD *)(v49 + 8 * v27);
        *(_QWORD *)(v49 + 8 * v27) = v50;
        if (v51)
          (*(void (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51);
        v52 = v56[0];
        v56[0] = 0;
        if (v52)
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52);
      }
      ++v27;
    }
    while (v27 < (uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 3);
  }
  if (*(_QWORD *)(a2 + 784) != *(_QWORD *)(a2 + 776))
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  return a1;
}

void sub_1DE4A021C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, uint64_t a20,uint64_t a21,void **a22,void **a23,void **a24,void **a25,void **a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,void **a30)
{
  _QWORD *v30;
  void **v31;
  uint64_t v32;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;

  MEMORY[0x1DF0ED014](v32, 0x10D0C4068EB0291);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v31);
  a30 = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a10;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a11;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  v34 = *a14;
  if (*a14)
  {
    v30[64] = v34;
    operator delete(v34);
  }
  v35 = *a22;
  if (*a22)
  {
    v30[61] = v35;
    operator delete(v35);
  }
  a30 = a15;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a23;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a24;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a27, 0);
  v36 = v30[27];
  v30[27] = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
  v37 = v30[25];
  v30[25] = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a28, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a29, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a20);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a21);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v30, (uint64_t *)&off_1EA91BF98);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v30 + 106));
  _Unwind_Resume(a1);
}

char *`non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(a1 - 168);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  void **v11;
  void *v14;
  BOOL v23;
  float *v24;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  int *v30;
  BOOL v36;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  void *v43;
  void *v44;
  int v45;
  BOOL v48;
  std::string *v49;
  int inited;
  float v51;
  unsigned int *v52;
  float v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  unsigned int v61;
  unint64_t v62;
  float v63;
  float v64;
  float v65;
  float *v66;
  uint64_t v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  float v75;
  uint64_t v76;
  float v77;
  unsigned int *v78;
  _QWORD *v79;
  void **v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  float *v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE v88[16];
  uint64_t v89;
  void *__p;
  void *v91;
  void **v92[34];
  void *v93[3];
  std::string v94;
  std::string v95;
  float v96;
  int v97;
  int v98;
  float v99;
  int v100;
  int v101;
  unsigned int v102;

  v6 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  v101 = -1;
  v102 = v6;
  v99 = 2.0;
  *(float *)&v100 = -2.0;
  *(float *)&v97 = -2.0;
  v98 = 1036831949;
  v96 = 2.0;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v95);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &v94);
  memset(v93, 0, sizeof(v93));
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_170;
    kaldi::ReadToken(a2, 0, (uint64_t)v93, v7, v8);
    if ((SHIBYTE(v93[2]) & 0x80000000) == 0)
      break;
    v14 = v93[1];
    if (v93[1] == (void *)10)
    {
      if (*(_QWORD *)v93[0] == 0x6C6C65436D754E3CLL && *((_WORD *)v93[0] + 4) == 15987)
      {
LABEL_86:
        v30 = (int *)&v102;
LABEL_159:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v30, v9, v10);
        goto LABEL_168;
      }
      if (*(_QWORD *)v93[0] == 0x61654D736169423CLL && *((_WORD *)v93[0] + 4) == 15982)
      {
LABEL_145:
        v24 = (float *)&v100;
        goto LABEL_156;
      }
      v14 = v93[1];
    }
    if (v14 == (void *)11)
    {
      if (*(_QWORD *)v93[0] == 0x6E6152736169423CLL && *(_QWORD *)((char *)v93[0] + 3) == 0x3E65676E61527361)
      {
LABEL_121:
        v24 = &v99;
        goto LABEL_156;
      }
      v14 = v93[1];
    }
    if (v14 == (void *)20)
    {
      if (*(_QWORD *)v93[0] == 0x47746567726F463CLL
        && *((_QWORD *)v93[0] + 1) == 0x4D73616942657461
        && *((_DWORD *)v93[0] + 4) == 1047421285)
      {
LABEL_95:
        v24 = (float *)&v97;
LABEL_156:
        kaldi::ReadBasicType<float>(a2, 0, v24, v9, v10);
        goto LABEL_168;
      }
      v14 = v93[1];
    }
    if (v14 == (void *)21)
    {
      if (*(_QWORD *)v93[0] == 0x47746567726F463CLL
        && *((_QWORD *)v93[0] + 1) == 0x5273616942657461
        && *(_QWORD *)((char *)v93[0] + 13) == 0x3E65676E61527361)
      {
LABEL_146:
        v24 = &v96;
        goto LABEL_156;
      }
      v14 = v93[1];
    }
    if (v14 == (void *)13)
    {
      if (*(_QWORD *)v93[0] == 0x74536D617261503CLL && *(_QWORD *)((char *)v93[0] + 5) == 0x3E7665646474536DLL)
      {
LABEL_109:
        v24 = (float *)&v98;
        goto LABEL_156;
      }
      v14 = v93[1];
    }
    if (v14 == (void *)15)
    {
      v23 = *(_QWORD *)v93[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v93[0] + 7) == 0x3E66656F43657461;
      v24 = (float *)(a1 + 464);
      if (v23)
        goto LABEL_156;
      v14 = v93[1];
    }
    if (v14 == (void *)25)
    {
      v27 = *(_QWORD *)v93[0] == 0x7463656A6F72503CLL
         && *((_QWORD *)v93[0] + 1) == 0x6E7261654C6E6F69
         && *((_QWORD *)v93[0] + 2) == 0x66656F4365746152
         && *((_BYTE *)v93[0] + 24) == 62;
      v24 = (float *)(a1 + 468);
      if (v27)
        goto LABEL_156;
      v14 = v93[1];
    }
    if (v14 == (void *)9)
    {
      v28 = *(_QWORD *)v93[0] == 0x6D726F4E78614D3CLL && *((_BYTE *)v93[0] + 8) == 62;
      v24 = (float *)(a1 + 472);
      if (v28)
        goto LABEL_156;
      v14 = v93[1];
      if (v93[1] == (void *)9)
      {
        v29 = *(_QWORD *)v93[0] == 0x6461724778614D3CLL && *((_BYTE *)v93[0] + 8) == 62;
        v24 = (float *)(a1 + 152);
        if (v29)
          goto LABEL_156;
        if ((HIBYTE(v93[2]) & 0x80) == 0)
          goto LABEL_155;
      }
    }
    if (v14 != (void *)18)
      goto LABEL_155;
    v11 = (void **)v93[0];
LABEL_148:
    v43 = *v11;
    v44 = v11[1];
    v45 = *((unsigned __int16 *)v11 + 8);
    if (v43 != (void *)0x6E6569646172473CLL || v44 != (void *)0x7079546D726F4E74 || v45 != 15973)
      goto LABEL_155;
    v49 = &v94;
LABEL_167:
    kaldi::ReadToken(a2, 0, (uint64_t)v49, v9, v10);
LABEL_168:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v11 = v93;
  switch(HIBYTE(v93[2]))
  {
    case 9:
      goto LABEL_134;
    case 0xA:
      if (v93[0] == (void *)0x6C6C65436D754E3CLL && LOWORD(v93[1]) == 15987)
        goto LABEL_86;
      if (v93[0] != (void *)0x61654D736169423CLL || LOWORD(v93[1]) != 15982)
        goto LABEL_133;
      goto LABEL_145;
    case 0xB:
      if (v93[0] == (void *)0x6E6152736169423CLL && *(void **)((char *)v93 + 3) == (void *)0x3E65676E61527361)
        goto LABEL_121;
      goto LABEL_133;
    case 0xD:
LABEL_104:
      if (v93[0] == (void *)0x74536D617261503CLL && *(void **)((char *)v93 + 5) == (void *)0x3E7665646474536DLL)
        goto LABEL_109;
      goto LABEL_133;
    case 0xF:
LABEL_110:
      v36 = v93[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v93 + 7) == (void *)0x3E66656F43657461;
      v24 = (float *)(a1 + 464);
      if (v36)
        goto LABEL_156;
      goto LABEL_133;
    case 0x12:
      goto LABEL_148;
    case 0x14:
      if (v93[0] != (void *)0x47746567726F463CLL
        || v93[1] != (void *)0x4D73616942657461
        || LODWORD(v93[2]) != 1047421285)
      {
        v11 = v93;
        switch(HIBYTE(v93[2]))
        {
          case 9:
            goto LABEL_134;
          case 0xD:
            goto LABEL_104;
          case 0xF:
            goto LABEL_110;
          case 0x12:
            goto LABEL_148;
          default:
            goto LABEL_155;
        }
      }
      goto LABEL_95;
    case 0x15:
      if (v93[0] != (void *)0x47746567726F463CLL
        || v93[1] != (void *)0x5273616942657461
        || *(void **)((char *)&v93[1] + 5) != (void *)0x3E65676E61527361)
      {
        v11 = v93;
        switch(HIBYTE(v93[2]))
        {
          case 9:
            goto LABEL_134;
          case 0xD:
            goto LABEL_104;
          case 0xF:
            goto LABEL_110;
          case 0x12:
            goto LABEL_148;
          default:
            goto LABEL_155;
        }
      }
      goto LABEL_146;
    case 0x19:
      v40 = v93[0] == (void *)0x7463656A6F72503CLL
         && v93[1] == (void *)0x6E7261654C6E6F69
         && v93[2] == (void *)0x66656F4365746152
         && v94.__r_.__value_.__s.__data_[0] == 62;
      v24 = (float *)(a1 + 468);
      if (v40)
        goto LABEL_156;
      if (HIBYTE(v93[2]) == 18)
      {
        v11 = v93;
        goto LABEL_148;
      }
LABEL_133:
      if (HIBYTE(v93[2]) == 9)
      {
LABEL_134:
        v41 = v93[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v93[1]) == 62;
        v24 = (float *)(a1 + 472);
        if (v41)
          goto LABEL_156;
        if (HIBYTE(v93[2]) == 9)
        {
          v42 = v93[0] == (void *)0x6461724778614D3CLL && LOBYTE(v93[1]) == 62;
          v24 = (float *)(a1 + 152);
          if (v42)
            goto LABEL_156;
        }
      }
LABEL_155:
      v48 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<MaxCell>");
      v24 = (float *)(a1 + 476);
      if (v48)
        goto LABEL_156;
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<RandomSeed>"))
      {
        v30 = &v101;
        goto LABEL_159;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<NoPeep>"))
      {
        *(_BYTE *)(a1 + 208) = 0;
        goto LABEL_168;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<OutputCellValues>"))
      {
        *(_BYTE *)(a1 + 209) = 1;
        goto LABEL_168;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<InitTransformType>"))
      {
        v49 = &v95;
        goto LABEL_167;
      }
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "</Component>"))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v92, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 351);
        v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"Invalid token ", 14);
        if (SHIBYTE(v93[2]) >= 0)
          v80 = v93;
        else
          v80 = (void **)v93[0];
        if (SHIBYTE(v93[2]) >= 0)
          v81 = HIBYTE(v93[2]);
        else
          v81 = (uint64_t)v93[1];
        v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v80, v81);
        v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)". Allowed tokens: ", 18);
        v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"(NumCells|BiasMean|BiasRange|ForgetGateBiasMean|ForgetGateBiasRange|ParamStddev|LearnRateCoef|ProjectionLearnRateCoef|MaxNorm|", 126);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"MaxGrad|MaxCell|NoPeep|InitTransformType|GradientNormType|RandomSeed)", 69);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v92);
      }
LABEL_170:
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateParams((uint64_t *)a1, v102);
      inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v95);
      *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v94);
      if (v101 >= 1)
        kaldi::UniformRandomNumber::SetRandomSeeds(a3, v101);
      kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v88, a3);
      v51 = *(float *)&v98;
      v52 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
      kaldi::nnet1::RandMatrix<kaldi::QuantizedMatrix<signed char>>(a3, (kaldi::GaussRandomNumber *)v88, inited, v52, v51);
      v53 = *(float *)&v98;
      v54 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
      kaldi::nnet1::RandMatrix<kaldi::QuantizedMatrix<signed char>>(a3, (kaldi::GaussRandomNumber *)v88, inited, v54, v53);
      v55 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1) + 16);
      v86 = 0;
      v87 = 0;
      v85 = 0;
      kaldi::Vector<float>::Resize((void **)&v85, v55, 0, v56, v57);
      v61 = v86;
      if ((int)v86 >= 1)
      {
        v62 = 0;
        do
        {
          v63 = *(float *)&v100;
          v64 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v58, v59, v60);
          v61 = v86;
          if (v62 >= v86)
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v60);
          v65 = v63 + (v64 + -0.5) * v99;
          v85[v62++] = v65;
        }
        while ((uint64_t)v62 < (int)v61);
      }
      if (v61 < 2 * v102)
        kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v60);
      if ((int)v102 >= 1)
      {
        v66 = &v85[v102];
        v67 = v102;
        do
        {
          v68 = *(float *)&v97;
          v69 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v58, v59, v60);
          v70 = v68 + (v69 + -0.5) * v96;
          *v66++ = v70;
          --v67;
        }
        while (v67);
      }
      if (!*(_QWORD *)(a1 + 200))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v92, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 382);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"bias_ thought to be initialized here", 36);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v92);
      }
      v71 = operator new();
      kaldi::CuVector<float>::CuVector(v71, (uint64_t)&v85, 0, v72, v73);
      v74 = *(_QWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 200) = v71;
      if (v74)
        (*(void (**)(uint64_t))(*(_QWORD *)v74 + 16))(v74);
      if (*(_BYTE *)(a1 + 208))
      {
        v75 = *(float *)&v98;
        v76 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
        kaldi::nnet1::RandMatrix<kaldi::CuMatrixBase<float>>(a3, (kaldi::GaussRandomNumber *)v88, inited, v76, v75);
      }
      if (*(_BYTE *)(a1 + 224))
      {
        v77 = *(float *)&v98;
        v78 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
        kaldi::nnet1::RandMatrix<kaldi::QuantizedMatrix<signed char>>(a3, (kaldi::GaussRandomNumber *)v88, inited, v78, v77);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
      kaldi::Vector<float>::Destroy((uint64_t)&v85);
      if (__p)
      {
        v91 = __p;
        operator delete(__p);
      }
      v92[0] = (void **)&v89;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v92);
      if (SHIBYTE(v93[2]) < 0)
        operator delete(v93[0]);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v95.__r_.__value_.__l.__data_);
      return;
    default:
      goto LABEL_155;
  }
}

void sub_1DE4A1030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)va1);
  if (*(char *)(v5 - 185) < 0)
    operator delete(*(void **)(v5 - 208));
  if (*(char *)(v5 - 161) < 0)
    operator delete(*(void **)(v5 - 184));
  if (*(char *)(v5 - 137) < 0)
    operator delete(*(void **)(v5 - 160));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateParams(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void **v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *__p[2];
  unsigned __int8 v26;
  _QWORD v27[35];

  *((_DWORD *)a1 + 44) = a2;
  v3 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  if (*(_DWORD *)(v3 + 12) > a2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1249);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"# LSTM cells (", 14);
    v23 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)") should not be less than output dim (", 38);
    v24 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, ").");
    goto LABEL_32;
  }
  if (a1[23])
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1253);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "input_weights_ thought to be un-initialized here");
    goto LABEL_32;
  }
  v4 = (4 * a2);
  v5 = operator new();
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v5, v4, *(unsigned int *)(v3 + 8));
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a1 + 23, v5);
  if (a1[24])
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1260);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "recurrent_weights_ thought to be un-initialized here");
    goto LABEL_32;
  }
  v6 = (4 * *((_DWORD *)a1 + 44));
  v7 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  v8 = operator new();
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v8, v6, *(unsigned int *)(v7 + 12));
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a1 + 24, v8);
  if (a1[25])
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1265);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "bias_ thought to be un-initialized here");
    goto LABEL_32;
  }
  v9 = (4 * *((_DWORD *)a1 + 44));
  v10 = (_QWORD *)operator new();
  v10[2] = 0;
  v10[3] = 0;
  *v10 = &unk_1EA92DFD8;
  v10[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v10, v9, 0, v11, v12);
  v13 = a1[25];
  a1[25] = (uint64_t)v10;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  if (*((_BYTE *)a1 + 208))
  {
    if (a1[27])
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1271);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "peephole_weights_ thought to be un-initialized here");
      goto LABEL_32;
    }
    v14 = operator new();
    kaldi::CuMatrix<float>::CuMatrix(v14, 3, *((unsigned int *)a1 + 44), 0, 0, 0);
    v15 = a1[27];
    a1[27] = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  }
  v16 = *a1;
  if (*((_DWORD *)a1 + 44) == *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 12))
  {
    *((_BYTE *)a1 + 224) = 0;
    goto LABEL_15;
  }
  v17 = a1[29];
  *((_BYTE *)a1 + 224) = 1;
  if (v17)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1281);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "projection_weights_ thought to be un-initialized here");
LABEL_32:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  v18 = (uint64_t)a1 + *(_QWORD *)(v16 - 24);
  v19 = operator new();
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v19, *(unsigned int *)(v18 + 12), *((unsigned int *)a1 + 44));
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a1 + 29, v19);
LABEL_15:
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v27, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1285, 2);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Allocated memory for the parameters: ", 37);
    (*(void (**)(void **__return_ptr, uint64_t *))(*a1 + 264))(__p, a1);
    if ((v26 & 0x80u) == 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    if ((v26 & 0x80u) == 0)
      v22 = v26;
    else
      v22 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
    if ((char)v26 < 0)
      operator delete(__p[0]);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v27);
  }
}

void sub_1DE4A1560()
{
  JUMPOUT(0x1DE4A1570);
}

void sub_1DE4A157C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10D0C4068EB0291);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RandMatrix<kaldi::QuantizedMatrix<signed char>>(kaldi::UniformRandomNumber *a1, kaldi::GaussRandomNumber *a2, int a3, unsigned int *a4, float a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;

  v10 = kaldi::QuantizedMatrixBase<short>::NumRows(a4);
  v11 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a4);
  kaldi::Matrix<float>::Matrix((uint64_t)&v23, v10, v11, 0, 0);
  v12 = 0;
LABEL_2:
  if ((uint64_t)v12 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)&v23))
  {
    for (i = 0; ; ++i)
    {
      if ((uint64_t)i >= (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v23))
      {
        ++v12;
        goto LABEL_2;
      }
      if (a3)
      {
        if (a3 == 2)
        {
          kaldi::GaussRandomNumber::Rand(a2, 0, v14, v15, v16);
          if (v12 >= v25 || i >= v24)
            goto LABEL_25;
          v18 = v23 + 4 * (int)v12 * v26;
          v19 = v20 * a5;
        }
        else
        {
          if (a3 != 1)
            continue;
          v17 = kaldi::UniformRandomNumber::RandUniform(a1, 0, v14, v15, v16);
          if (v12 >= v25 || i >= v24)
            goto LABEL_25;
          v18 = v23 + 4 * (int)v12 * v26;
          v19 = (v17 + -0.5) * (float)(a5 + a5);
        }
      }
      else
      {
        if (v12 >= v25 || i >= v24)
LABEL_25:
          kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v16);
        v18 = v23 + 4 * (int)v12 * v26;
        if (v12 == i)
          v19 = 1.0;
        else
          v19 = 0.0;
      }
      *(float *)(v18 + 4 * i) = v19;
    }
  }
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat((uint64_t)a4, (uint64_t)&v23);
  return kaldi::Matrix<float>::~Matrix((uint64_t)&v23);
}

void sub_1DE4A1778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "InputWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 214);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "InputWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 210);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "RecurrentWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 223);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "RecurrentWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 219);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 232);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 228);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "PeepholeWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 241);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "PeepholeWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 237);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "ProjectionWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 250);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "ProjectionWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 246);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitData(_QWORD *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitData((uint64_t)a1 + *(_QWORD *)(*a1 - 112), a2, a3);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  float *v15;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v23;
  BOOL v26;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  __int128 *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  void (***v55)(_QWORD, uint64_t *, uint64_t, uint64_t);
  _QWORD *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  void (***v60)(_QWORD, uint64_t *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  int *v63;
  const char *v64;
  uint64_t v65;
  _QWORD *v67;
  __int128 *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  void *__p[2];
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  char v77;

  while (kaldi::Peek(a2, a3) == 60)
  {
    v75 = 0uLL;
    v76 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v75, v7, v8);
    if ((SHIBYTE(v76) & 0x80000000) == 0)
    {
      switch(HIBYTE(v76))
      {
        case 8:
          goto LABEL_97;
        case 9:
          goto LABEL_85;
        case 0xA:
          if ((_QWORD)v75 != 0x6C6C65436D754E3CLL || WORD4(v75) != 15987)
            goto LABEL_150;
          goto LABEL_46;
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0x10:
        case 0x11:
          goto LABEL_150;
        case 0xF:
          v28 = (_QWORD)v75 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v75 + 7) == 0x3E66656F43657461;
          v15 = (float *)(a1 + 464);
          if (v28)
            goto LABEL_127;
          if (HIBYTE(v76) != 8)
            goto LABEL_84;
          goto LABEL_97;
        case 0x12:
          if ((_QWORD)v75 == 0x4374757074754F3CLL
            && *((_QWORD *)&v75 + 1) == 0x65756C61566C6C65
            && (unsigned __int16)v76 == 15987)
          {
            goto LABEL_132;
          }
          if (HIBYTE(v76) == 9)
            goto LABEL_119;
          if (HIBYTE(v76) != 18)
            goto LABEL_150;
          v26 = (_QWORD)v75 == 0x6E6569646172473CLL && *((_QWORD *)&v75 + 1) == 0x7079546D726F4E74;
          if (!v26 || (unsigned __int16)v76 != 15973)
            goto LABEL_150;
          goto LABEL_133;
        default:
          if (HIBYTE(v76) != 25)
            goto LABEL_150;
          v23 = (_QWORD)v75 == 0x7463656A6F72503CLL
             && *((_QWORD *)&v75 + 1) == 0x6E7261654C6E6F69
             && v76 == 0x66656F4365746152
             && v77 == 62;
          v15 = (float *)(a1 + 468);
          if (v23)
            goto LABEL_127;
LABEL_84:
          if (HIBYTE(v76) != 9)
            goto LABEL_150;
LABEL_85:
          v29 = (_QWORD)v75 == 0x6D726F4E78614D3CLL && BYTE8(v75) == 62;
          v15 = (float *)(a1 + 472);
          if (v29)
            goto LABEL_127;
          if (HIBYTE(v76) == 8)
            goto LABEL_97;
          if (HIBYTE(v76) != 9)
            goto LABEL_150;
          v30 = (_QWORD)v75 == 0x6C6C654378614D3CLL && BYTE8(v75) == 62;
          v15 = (float *)(a1 + 476);
          if (!v30)
            goto LABEL_119;
          goto LABEL_127;
      }
    }
    v12 = *((_QWORD *)&v75 + 1);
    if (*((_QWORD *)&v75 + 1) == 10
      && (*(_QWORD *)v75 == 0x6C6C65436D754E3CLL ? (v13 = *(unsigned __int16 *)(v75 + 8) == 15987) : (v13 = 0), v13))
    {
LABEL_46:
      kaldi::ReadBasicType<int>(a2, a3, a1 + 176, v9, v10);
    }
    else
    {
      if (*((_QWORD *)&v75 + 1) == 15)
      {
        v14 = *(_QWORD *)v75 == 0x61526E7261654C3CLL && *(_QWORD *)(v75 + 7) == 0x3E66656F43657461;
        v15 = (float *)(a1 + 464);
        if (v14)
          goto LABEL_127;
        v12 = *((_QWORD *)&v75 + 1);
      }
      if (v12 == 25)
      {
        v18 = *(_QWORD *)v75 == 0x7463656A6F72503CLL
           && *(_QWORD *)(v75 + 8) == 0x6E7261654C6E6F69
           && *(_QWORD *)(v75 + 16) == 0x66656F4365746152
           && *(_BYTE *)(v75 + 24) == 62;
        v15 = (float *)(a1 + 468);
        if (v18)
          goto LABEL_127;
        v12 = *((_QWORD *)&v75 + 1);
      }
      if (v12 != 9)
        goto LABEL_47;
      v19 = *(_QWORD *)v75 == 0x6D726F4E78614D3CLL && *(_BYTE *)(v75 + 8) == 62;
      v15 = (float *)(a1 + 472);
      if (v19)
        goto LABEL_127;
      v12 = *((_QWORD *)&v75 + 1);
      if (*((_QWORD *)&v75 + 1) != 9)
        goto LABEL_47;
      v20 = *(_QWORD *)v75 == 0x6C6C654378614D3CLL && *(_BYTE *)(v75 + 8) == 62;
      v15 = (float *)(a1 + 476);
      if (v20)
        goto LABEL_127;
      if ((v76 & 0x8000000000000000) == 0)
      {
        if (HIBYTE(v76) == 9)
          goto LABEL_119;
        if (HIBYTE(v76) != 8)
          goto LABEL_150;
LABEL_97:
        if ((_QWORD)v75 != 0x3E706565506F4E3CLL)
        {
          if ((v76 & 0x8000000000000000) == 0)
            goto LABEL_150;
LABEL_100:
          v12 = *((_QWORD *)&v75 + 1);
          if (v12 != 18)
            goto LABEL_120;
LABEL_101:
          if (*(_QWORD *)v75 == 0x4374757074754F3CLL
            && *(_QWORD *)(v75 + 8) == 0x65756C61566C6C65
            && *(_WORD *)(v75 + 16) == 15987)
          {
LABEL_132:
            *(_BYTE *)(a1 + 209) = 1;
            goto LABEL_128;
          }
          v12 = *((_QWORD *)&v75 + 1);
          if (*((_QWORD *)&v75 + 1) != 18)
            goto LABEL_120;
          if (*(_QWORD *)v75 == 0x6E6569646172473CLL
            && *(_QWORD *)(v75 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v75 + 16) == 15973)
          {
LABEL_133:
            __p[0] = 0;
            __p[1] = 0;
            v74 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)__p, v9, v10);
            *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
            if (SHIBYTE(v74) < 0)
              operator delete(__p[0]);
            goto LABEL_128;
          }
          if ((v76 & 0x8000000000000000) == 0)
          {
            if (HIBYTE(v76) != 9)
              goto LABEL_150;
LABEL_119:
            v35 = &v75;
          }
          else
          {
LABEL_120:
            if (v12 != 9)
              goto LABEL_150;
            v35 = (__int128 *)v75;
          }
          v36 = *(_QWORD *)v35;
          v37 = *((unsigned __int8 *)v35 + 8);
          v38 = v36 == 0x6461724778614D3CLL && v37 == 62;
          v15 = (float *)(a1 + 152);
          if (!v38)
          {
LABEL_150:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 424);
            v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
            if (v76 >= 0)
              v68 = &v75;
            else
              v68 = (__int128 *)v75;
            if (v76 >= 0)
              v69 = HIBYTE(v76);
            else
              v69 = *((_QWORD *)&v75 + 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v68, v69);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
          }
LABEL_127:
          kaldi::ReadBasicType<float>(a2, a3, v15, v9, v10);
          goto LABEL_128;
        }
      }
      else
      {
LABEL_47:
        if (v12 != 8)
          goto LABEL_101;
        if (*(_QWORD *)v75 != 0x3E706565506F4E3CLL)
          goto LABEL_100;
      }
      *(_BYTE *)(a1 + 208) = 0;
    }
LABEL_128:
    if (SHIBYTE(v76) < 0)
      operator delete((void *)v75);
  }
  v39 = *(_DWORD *)(a1 + 176);
  v40 = *(_QWORD *)a1;
  v41 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  if (v39 < v41)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 430);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# LSTM cells (", 14);
    v70 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)") should not be less than output dim (", 38);
    v71 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v71, ").");
    goto LABEL_163;
  }
  v42 = *(_QWORD *)(a1 + 184);
  *(_BYTE *)(a1 + 224) = v39 > v41;
  if (v42)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 436);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_weights_ thougth to be un-initialized here");
    goto LABEL_163;
  }
  v43 = (4 * v39);
  v44 = a1 + *(_QWORD *)(v40 - 24);
  v45 = operator new();
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v45, v43, *(unsigned int *)(v44 + 8));
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), v45);
  v46 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  kaldi::QuantizedMatrix<signed char>::Read(v46, a2, a3, a4, v47);
  if (*(_QWORD *)(a1 + 192))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 443);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "recurrent_weights_ thougth to be un-initialized here");
    goto LABEL_163;
  }
  v48 = (4 * *(_DWORD *)(a1 + 176));
  v49 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v50 = operator new();
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v50, v48, *(unsigned int *)(v49 + 12));
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), v50);
  v51 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  kaldi::QuantizedMatrix<signed char>::Read(v51, a2, a3, a4, v52);
  if (*(_BYTE *)(a1 + 208))
  {
    if (*(_QWORD *)(a1 + 216))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 450);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "peephole_weights_ thougth to be un-initialized here");
      goto LABEL_163;
    }
    v53 = operator new();
    kaldi::CuMatrix<float>::CuMatrix(v53, 3, *(unsigned int *)(a1 + 176), 0, 0, 0);
    v54 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v53;
    if (v54)
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54);
    v55 = (void (***)(_QWORD, uint64_t *, uint64_t, uint64_t))kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
    (**v55)(v55, a2, a3, a4);
  }
  if (*(_QWORD *)(a1 + 200))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 457);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "bias_ thougth to be un-initialized here");
    goto LABEL_163;
  }
  v56 = (_QWORD *)operator new();
  v56[2] = 0;
  v56[3] = 0;
  *v56 = &unk_1EA92DFD8;
  v56[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v56, 1, 0, v57, v58);
  v59 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v56;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 16))(v59);
  v60 = (void (***)(_QWORD, uint64_t *, uint64_t))kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
  (**v60)(v60, a2, a3);
  if (*(_BYTE *)(a1 + 224))
  {
    if (!*(_QWORD *)(a1 + 232))
    {
      v61 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v62 = operator new();
      kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v62, *(unsigned int *)(v61 + 12), *(unsigned int *)(a1 + 176));
      std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), v62);
      v63 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
      kaldi::QuantizedMatrix<signed char>::Read(v63, a2, a3, a4, v64);
      goto LABEL_149;
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 464);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "projection_weights_ thougth to be un-initialized here");
LABEL_163:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
LABEL_149:
  v65 = *(_QWORD *)a1;
  *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16) = 0;
  return (*(uint64_t (**)(uint64_t))(v65 + 128))(a1);
}

void sub_1DE4A2448()
{
  JUMPOUT(0x1DE4A2450);
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ReadData((uint64_t)a1 + *(_QWORD *)(*a1 - 176), a2, a3, a4);
}

_QWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  _QWORD *result;
  uint64_t v23;
  const char *v24;
  std::string __p;

  kaldi::WriteToken(a2, a3, (kaldi *)"<NumCells>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<ProjectionLearnRateCoef>", v10, v11);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v12, v13);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v14, v15);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v16, v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v18, v19);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxCell>", v20, v21);
  result = kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  if (!*(_BYTE *)(a1 + 208))
    result = kaldi::WriteToken(a2, a3, (kaldi *)"<NoPeep>", v23, v24);
  if (*(_BYTE *)(a1 + 209))
    return kaldi::WriteToken(a2, a3, (kaldi *)"<OutputCellValues>", v23, v24);
  return result;
}

void sub_1DE4A25FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteConfig(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteConfig((uint64_t)a1 + *(_QWORD *)(*a1 - 184), a2, a3, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteData(_BYTE *a1, _QWORD *a2, uint64_t a3, int a4)
{
  int *v8;
  int *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  const char *v13;
  int *v14;

  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 128))(a1);
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 192))(a1, a2, a3);
  v8 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  kaldi::QuantizedMatrix<signed char>::Write(v8, a2, a3, a4);
  v9 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  kaldi::QuantizedMatrix<signed char>::Write(v9, a2, a3, a4);
  if (a1[208])
  {
    v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1);
    kaldi::CuMatrixBase<float>::Write(v10, a2, a3, a4);
  }
  v11 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1);
  kaldi::CuVectorBase<float>::Write(v11, a2, a3, v12, v13);
  if (a1[224])
  {
    v14 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    kaldi::QuantizedMatrix<signed char>::Write(v14, a2, a3, a4);
  }
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteData(_QWORD *a1, _QWORD *a2, uint64_t a3, int a4)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::WriteData((_BYTE *)a1 + *(_QWORD *)(*a1 - 120), a2, a3, a4);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NumParams(uint64_t a1)
{
  unsigned int *v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;

  v2 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  v3 = kaldi::QuantizedMatrixBase<short>::NumRows(v2);
  v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  v5 = kaldi::QuantizedMatrixBase<short>::NumCols(v4) * v3;
  v6 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
  v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  v9 = v5 + kaldi::QuantizedMatrixBase<short>::NumCols(v8) * v7;
  v10 = (v9 + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1) + 16));
  if (*(_BYTE *)(a1 + 208))
  {
    v11 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1) + 20);
    v10 = (v10
                       + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1)
                                   + 16)
                       * v11);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v12 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    v13 = kaldi::QuantizedMatrixBase<short>::NumRows(v12);
    v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    return v10 + kaldi::QuantizedMatrixBase<short>::NumCols(v14) * v13;
  }
  return v10;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NumParams(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NumParams((uint64_t)a1 + *(_QWORD *)(*a1 - 192));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetParams(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  unsigned int *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  int v14;
  const char *v15;
  int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  int v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  unsigned int v32;
  unsigned int *v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;

  v4 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  v7 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  v8 = kaldi::QuantizedMatrixBase<short>::NumRows(v7);
  v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  v10 = kaldi::QuantizedMatrixBase<short>::NumCols(v9) * v8;
  v11 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  v12 = kaldi::QuantizedMatrixBase<short>::NumRows(v11);
  v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  v14 = kaldi::QuantizedMatrixBase<short>::NumCols(v13);
  v39 = 0;
  v40 = 0;
  if (v10 > *(_DWORD *)(a2 + 8))
    goto LABEL_11;
  v16 = v14 * v12;
  v38 = *(void **)a2;
  LODWORD(v39) = v10;
  v17 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v38, v17);
  v39 = 0;
  v40 = 0;
  v18 = v16 + v10;
  if (v16 + v10 > *(_DWORD *)(a2 + 8))
    goto LABEL_11;
  v38 = (void *)(*(_QWORD *)a2 + 4 * (int)v10);
  LODWORD(v39) = v16;
  v19 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v38, v19);
  if (a1[208])
  {
    v20 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 20);
    v21 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 16)
        * v20;
    v39 = 0;
    v40 = 0;
    v22 = v21 + v18;
    if (v21 + v18 > *(_DWORD *)(a2 + 8))
      goto LABEL_11;
    v38 = (void *)(*(_QWORD *)a2 + 4 * (int)v18);
    LODWORD(v39) = v21;
    v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1);
    kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v38, v23, v24, v25, v26);
    v18 = v22;
  }
  v27 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16);
  v39 = 0;
  v40 = 0;
  if (v27 + v18 > *(_DWORD *)(a2 + 8))
    goto LABEL_11;
  v38 = (void *)(*(_QWORD *)a2 + 4 * (int)v18);
  LODWORD(v39) = v27;
  v28 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v28, (uint64_t)&v38, v29, v30, v31);
  if (!a1[224])
    return;
  v32 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16) + v18;
  v33 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
  v34 = kaldi::QuantizedMatrixBase<short>::NumRows(v33);
  v35 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
  v36 = kaldi::QuantizedMatrixBase<short>::NumCols(v35);
  v39 = 0;
  v40 = 0;
  if (v36 * v34 + v32 > *(_DWORD *)(a2 + 8))
LABEL_11:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v15);
  v38 = (void *)(*(_QWORD *)a2 + 4 * (int)v32);
  LODWORD(v39) = v36 * v34;
  v37 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v38, v37);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetParams(_QWORD *a1, uint64_t a2)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetParams((_BYTE *)a1 + *(_QWORD *)(*a1 - 200), a2);
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetParams(_BYTE *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  unsigned int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  const char *v15;
  int v16;
  unsigned int *v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _DWORD *result;
  unsigned int v27;
  unsigned int *v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned int *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 208))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x222, "wei_src.Dim() == NumParams()", v5);
  v6 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
  v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  v9 = kaldi::QuantizedMatrixBase<short>::NumCols(v8) * v7;
  v10 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  v11 = kaldi::QuantizedMatrixBase<short>::NumRows(v10);
  v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  v13 = kaldi::QuantizedMatrixBase<short>::NumCols(v12);
  v14 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  v34 = 0;
  v35 = 0;
  if (v9 > *(_DWORD *)(a2 + 8))
    goto LABEL_12;
  v16 = v13 * v11;
  v33 = *(char **)a2;
  LODWORD(v34) = v9;
  kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v14, &v33);
  v17 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  v34 = 0;
  v35 = 0;
  v18 = v16 + v9;
  if (v16 + v9 > *(_DWORD *)(a2 + 8))
    goto LABEL_12;
  v33 = (char *)(*(_QWORD *)a2 + 4 * (int)v9);
  LODWORD(v34) = v16;
  kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v17, &v33);
  if (a1[208])
  {
    v19 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 20);
    v20 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 16)
        * v19;
    v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1);
    v34 = 0;
    v35 = 0;
    if (v20 + v18 > *(_DWORD *)(a2 + 8))
      goto LABEL_12;
    v33 = (char *)(*(_QWORD *)a2 + 4 * (int)v18);
    LODWORD(v34) = v20;
    kaldi::CuMatrixBase<float>::CopyRowsFromVec(v21, &v33);
    v18 += v20;
  }
  v22 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1);
  v25 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16);
  v34 = 0;
  v35 = 0;
  if (v25 + v18 > *(_DWORD *)(a2 + 8))
    goto LABEL_12;
  v33 = (char *)(*(_QWORD *)a2 + 4 * (int)v18);
  LODWORD(v34) = v25;
  result = kaldi::CuVectorBase<float>::CopyFromVec<float>(v22, (uint64_t)&v33, v23, v24, v15);
  if (!a1[224])
    return result;
  v27 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16) + v18;
  v28 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
  v29 = kaldi::QuantizedMatrixBase<short>::NumRows(v28);
  v30 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
  v31 = kaldi::QuantizedMatrixBase<short>::NumCols(v30) * v29;
  v32 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
  v34 = 0;
  v35 = 0;
  if (v31 + v27 > *(_DWORD *)(a2 + 8))
LABEL_12:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v15);
  v33 = (char *)(*(_QWORD *)a2 + 4 * (int)v27);
  LODWORD(v34) = v31;
  return (_DWORD *)kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v32, &v33);
}

_DWORD *`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetParams(_QWORD *a1, uint64_t a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetParams((_BYTE *)a1 + *(_QWORD *)(*a1 - 208), a2);
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SumParams(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  float v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;

  v2 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  v7 = kaldi::QuantizedMatrixBase<signed char>::Sum(v2, v3, v4, v5, v6);
  v8 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  v13 = v7 + kaldi::QuantizedMatrixBase<signed char>::Sum(v8, v9, v10, v11, v12);
  if (*(_BYTE *)(a1 + 208))
  {
    v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
    v13 = v13 + kaldi::CuMatrixBase<float>::Sum(v14, v15, v16, v17, v18);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v19 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    v13 = v13 + kaldi::QuantizedMatrixBase<signed char>::Sum(v19, v20, v21, v22, v23);
  }
  v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
  return v13 + kaldi::CuVectorBase<float>::Sum(v24);
}

float `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SumParams(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SumParams((uint64_t)a1 + *(_QWORD *)(*a1 - 224));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PerturbParams(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[48];

  v2 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  v3 = kaldi::QuantizedMatrixBase<short>::NumRows(v2);
  v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  v5 = kaldi::QuantizedMatrixBase<short>::NumCols(v4);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v6, v3, v5, 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v6);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  kaldi::QuantizedMatrixBase<signed char>::AddMat();
}

void sub_1DE4A2FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a4);
  v5 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(v4);
  v6 = kaldi::QuantizedMatrixBase<short>::NumRows(v5);
  v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(v4);
  v8 = kaldi::QuantizedMatrixBase<short>::NumCols(v7);
  kaldi::CuMatrix<float>::Resize((uint64_t)va, v6, v8, 1u, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)va);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(v4);
  kaldi::QuantizedMatrixBase<signed char>::AddMat();
}

uint64_t sub_1DE4A2FF8()
{
  uint64_t v0;
  float v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[4];
  _BYTE v20[112];

  if (*(_BYTE *)(v0 + 208))
  {
    v2 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v0) + 20);
    v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v0);
    kaldi::CuMatrix<float>::Resize((uint64_t)v20, v2, *(unsigned int *)(v3 + 16), 1u, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v20);
    v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(v0);
    kaldi::CuMatrixBase<float>::AddMat(v4, (uint64_t)v20, 111, v5, v6, v1, 1.0);
  }
  v7 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(v0) + 16);
  v19[0] = &unk_1EA92DFD8;
  memset(&v19[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v19, v7, 1u, v8, v9);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v19);
  v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(v0);
  kaldi::CuVectorBase<float>::AddVec(v10, (uint64_t)v19, v11, v12, v13, v1, 1.0);
  if (*(_BYTE *)(v0 + 224))
  {
    v14 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(v0);
    v15 = kaldi::QuantizedMatrixBase<short>::NumRows(v14);
    v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(v0);
    v17 = kaldi::QuantizedMatrixBase<short>::NumCols(v16);
    kaldi::CuMatrix<float>::Resize((uint64_t)v20, v15, v17, 1u, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v20);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(v0);
    kaldi::QuantizedMatrixBase<signed char>::AddMat();
  }
  v19[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v19);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v20);
}

void sub_1DE4A3130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PerturbParams(_QWORD *a1)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PerturbParams((uint64_t)a1 + *(_QWORD *)(*a1 - 232));
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetGradient(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  unsigned int *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  int v18;
  uint64_t v19;
  int v20;
  const char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  int v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  unsigned int v44;
  unsigned int *v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;

  v8 = (const void *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 136))(a1);
  if (v8)
  else
    v9 = 0;
  (*(void (**)(void *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 336))(v9, a2, a3, 0, 0);
  v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v10, 0, v11, v12);
  v13 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  v14 = kaldi::QuantizedMatrixBase<short>::NumRows(v13);
  v15 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights((uint64_t)a1);
  v16 = kaldi::QuantizedMatrixBase<short>::NumCols(v15) * v14;
  v17 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  v18 = kaldi::QuantizedMatrixBase<short>::NumRows(v17);
  v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights((uint64_t)a1);
  v20 = kaldi::QuantizedMatrixBase<short>::NumCols(v19);
  v58 = 0;
  v59 = 0;
  if (v16 > *(_DWORD *)(a4 + 8))
    goto LABEL_14;
  v22 = v20;
  v57 = *(char **)a4;
  LODWORD(v58) = v16;
  v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient((uint64_t)v9, 0);
  kaldi::Matrix<float>::Matrix<float>((uint64_t)&v54, v23, 111, v24, v25);
  kaldi::VectorBase<float>::CopyRowsFromMat(&v57, (uint64_t)&v54);
  v26 = v22 * v18;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v54);
  v55 = 0;
  v56 = 0;
  v27 = v26 + v16;
  if (v26 + v16 > *(_DWORD *)(a4 + 8))
    goto LABEL_14;
  v54 = *(_QWORD *)a4 + 4 * (int)v16;
  LODWORD(v55) = v26;
  v28 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient((uint64_t)v9, 0);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v54, v28, v29, v30, v31);
  if (a1[208])
  {
    v32 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 20);
    v33 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights((uint64_t)a1) + 16)
        * v32;
    v55 = 0;
    v56 = 0;
    v34 = v33 + v27;
    if (v33 + v27 > *(_DWORD *)(a4 + 8))
      goto LABEL_14;
    v54 = *(_QWORD *)a4 + 4 * (int)v27;
    LODWORD(v55) = v33;
    v35 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient((uint64_t)v9, 0);
    kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v54, v35, v36, v37, v38);
    v27 = v34;
  }
  v39 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16);
  v55 = 0;
  v56 = 0;
  if (v39 + v27 > *(_DWORD *)(a4 + 8))
LABEL_14:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v21);
  v54 = *(_QWORD *)a4 + 4 * (int)v27;
  LODWORD(v55) = v39;
  v40 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient((uint64_t)v9, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v40, (uint64_t)&v54, v41, v42, v43);
  if (a1[224])
  {
    v44 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias((uint64_t)a1) + 16) + v27;
    v45 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    v46 = kaldi::QuantizedMatrixBase<short>::NumRows(v45);
    v47 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights((uint64_t)a1);
    v48 = kaldi::QuantizedMatrixBase<short>::NumCols(v47);
    v55 = 0;
    v56 = 0;
    if (v48 * v46 + v44 <= *(_DWORD *)(a4 + 8))
    {
      v54 = *(_QWORD *)a4 + 4 * (int)v44;
      LODWORD(v55) = v48 * v46;
      v49 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient((uint64_t)v9, 0);
      kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v54, v49, v50, v51, v52);
      return (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 8))(v9);
    }
    goto LABEL_14;
  }
  return (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 8))(v9);
}

void sub_1DE4A3434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetGradient((_BYTE *)a1 + *(_QWORD *)(*a1 - 240), a2, a3, a4);
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate(_QWORD *a1, int a2)
{
  float *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;

  v2 = (float *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  if (!*((_BYTE *)v2 + 84))
    return v2[14];
  v3 = a1[63];
  v4 = a1[64] - v3;
  if (!v4)
    return NAN;
  v5 = v4 >> 2;
  if ((int)v5 <= a2)
    return NAN;
  v6 = v5 - 1;
  if (a2 >= 0)
    v6 = a2;
  return *(float *)(v3 + 4 * v6);
}

float `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate(_QWORD *a1, int a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 216)), a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Info(uint64_t a1)
{
  _QWORD *v2;
  unsigned int *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  int v27;
  void **v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int *v35;
  void **v36;
  uint64_t v37;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *__p[2];
  unsigned __int8 v44;
  void *v45[2];
  unsigned __int8 v46;
  void *v47[2];
  unsigned __int8 v48;
  void *v49[2];
  unsigned __int8 v50;
  _QWORD v51[11];
  char v52;
  uint64_t v53;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v51);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 192))(a1, v51, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"\n Input weights:", 16);
  v3 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  kaldi::nnet1::MomentStatistics<signed char>(v3);
  if ((v50 & 0x80u) == 0)
    v4 = v49;
  else
    v4 = (void **)v49[0];
  if ((v50 & 0x80u) == 0)
    v5 = v50;
  else
    v5 = (uint64_t)v49[1];
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n Recurrent weights:", 20);
  v8 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  kaldi::nnet1::MomentStatistics<signed char>(v8);
  if ((v48 & 0x80u) == 0)
    v9 = v47;
  else
    v9 = (void **)v47[0];
  if ((v48 & 0x80u) == 0)
    v10 = v48;
  else
    v10 = (uint64_t)v47[1];
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n Bias:", 7);
  v13 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
  kaldi::nnet1::MomentStatistics<float>(v13, v14, v15, v16, v17);
  if ((v46 & 0x80u) == 0)
    v18 = v45;
  else
    v18 = (void **)v45[0];
  if ((v46 & 0x80u) == 0)
    v19 = v46;
  else
    v19 = (uint64_t)v45[1];
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v18, v19);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n Forget gate bias:", 19);
  v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
  v27 = *(_DWORD *)(a1 + 176);
  v41 = 0;
  v42 = 0;
  v39 = &unk_1EA926538;
  v40 = 0;
  if (*(_DWORD *)(v22 + 16) < (2 * v27))
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v26);
  v40 = *(_QWORD *)(v22 + 8) + 4 * v27;
  LODWORD(v41) = v27;
  v42 = *(_QWORD *)(v22 + 24);
  kaldi::nnet1::MomentStatistics<float>(&v39, v23, v24, v25, v26);
  if ((v44 & 0x80u) == 0)
    v28 = __p;
  else
    v28 = (void **)__p[0];
  if ((v44 & 0x80u) == 0)
    v29 = v44;
  else
    v29 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v28, v29);
  if ((char)v44 < 0)
    operator delete(__p[0]);
  if ((char)v46 < 0)
    operator delete(v45[0]);
  if ((char)v48 < 0)
    operator delete(v47[0]);
  if ((char)v50 < 0)
    operator delete(v49[0]);
  if (*(_BYTE *)(a1 + 208))
  {
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"\n Peephole weights:", 19);
    v31 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
    kaldi::nnet1::MomentStatistics<float>(v31);
    v32 = v41 >= 0 ? &v39 : (void **)v39;
    v33 = v41 >= 0 ? HIBYTE(v41) : v40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v32, v33);
    if (SHIBYTE(v41) < 0)
      operator delete(v39);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"\n Projection weights:", 21);
    v35 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    kaldi::nnet1::MomentStatistics<signed char>(v35);
    v36 = v41 >= 0 ? &v39 : (void **)v39;
    v37 = v41 >= 0 ? HIBYTE(v41) : v40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
    if (SHIBYTE(v41) < 0)
      operator delete(v39);
  }
  std::stringbuf::str();
  v51[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v51 + *(_QWORD *)(v51[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v51[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v52 < 0)
    operator delete((void *)v51[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v53);
}

void sub_1DE4A3C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Info(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Info((uint64_t)a1 + *(_QWORD *)(*a1 - 80));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoGradient(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  void **v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  void **v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  uint64_t v32;
  void **v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  void **v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  void **v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  uint64_t v52;
  std::string *v53;
  std::string::size_type size;
  std::string *v55;
  __int128 v56;
  const std::string::value_type *v57;
  std::string::size_type v58;
  uint64_t v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  const std::string::value_type *v64;
  std::string::size_type v65;
  std::string *v66;
  std::string *v67;
  std::string::size_type v68;
  std::string *v69;
  __int128 v70;
  void *__p[2];
  unsigned __int8 v73;
  void *v74[2];
  unsigned __int8 v75;
  void *v76[2];
  unsigned __int8 v77;
  void *v78[2];
  unsigned __int8 v79;
  void *v80[2];
  unsigned __int8 v81;
  void *v82[2];
  unsigned __int8 v83;
  void *v84[2];
  unsigned __int8 v85;
  void *v86[2];
  unsigned __int8 v87;
  void *v88[2];
  unsigned __int8 v89;
  void *v90[2];
  unsigned __int8 v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  std::string v100;
  std::string v101;
  __int128 v102;
  int64_t v103;
  int v104;
  std::string v105;

  if (*(_BYTE *)(a1 + 528))
  {
    memset(&v105, 0, sizeof(v105));
    v104 = 0;
    if (*(int *)(a1 + 80) >= 1)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v92, "\n For batch ");
        kaldi::nnet1::ToString<int>();
        if ((v91 & 0x80u) == 0)
          v3 = v90;
        else
          v3 = (void **)v90[0];
        if ((v91 & 0x80u) == 0)
          v4 = v91;
        else
          v4 = (std::string::size_type)v90[1];
        v5 = std::string::append(&v92, (const std::string::value_type *)v3, v4);
        v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v88, ": ");
        if ((v89 & 0x80u) == 0)
          v7 = v88;
        else
          v7 = (void **)v88[0];
        if ((v89 & 0x80u) == 0)
          v8 = v89;
        else
          v8 = (std::string::size_type)v88[1];
        v9 = std::string::append(&v93, (const std::string::value_type *)v7, v8);
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v94.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v86, "\n  Number of cells : ");
        if ((v87 & 0x80u) == 0)
          v11 = v86;
        else
          v11 = (void **)v86[0];
        if ((v87 & 0x80u) == 0)
          v12 = v87;
        else
          v12 = (std::string::size_type)v86[1];
        v13 = std::string::append(&v94, (const std::string::value_type *)v11, v12);
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v95.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::ToString<int>();
        if ((v85 & 0x80u) == 0)
          v15 = v84;
        else
          v15 = (void **)v84[0];
        if ((v85 & 0x80u) == 0)
          v16 = v85;
        else
          v16 = (std::string::size_type)v84[1];
        v17 = std::string::append(&v95, (const std::string::value_type *)v15, v16);
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v96.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v82, "\n  Input weights gradient: ");
        if ((v83 & 0x80u) == 0)
          v19 = v82;
        else
          v19 = (void **)v82[0];
        if ((v83 & 0x80u) == 0)
          v20 = v83;
        else
          v20 = (std::string::size_type)v82[1];
        v21 = std::string::append(&v96, (const std::string::value_type *)v19, v20);
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v23);
        if ((v81 & 0x80u) == 0)
          v24 = v80;
        else
          v24 = (void **)v80[0];
        if ((v81 & 0x80u) == 0)
          v25 = v81;
        else
          v25 = (std::string::size_type)v80[1];
        v26 = std::string::append(&v97, (const std::string::value_type *)v24, v25);
        v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v78, "\n  Recurrent weights gradient: ");
        if ((v79 & 0x80u) == 0)
          v28 = v78;
        else
          v28 = (void **)v78[0];
        if ((v79 & 0x80u) == 0)
          v29 = v79;
        else
          v29 = (std::string::size_type)v78[1];
        v30 = std::string::append(&v98, (const std::string::value_type *)v28, v29);
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v99.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v32 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v32);
        if ((v77 & 0x80u) == 0)
          v33 = v76;
        else
          v33 = (void **)v76[0];
        if ((v77 & 0x80u) == 0)
          v34 = v77;
        else
          v34 = (std::string::size_type)v76[1];
        v35 = std::string::append(&v99, (const std::string::value_type *)v33, v34);
        v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v100.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v74, "\n  Bias gradient: ");
        if ((v75 & 0x80u) == 0)
          v37 = v74;
        else
          v37 = (void **)v74[0];
        if ((v75 & 0x80u) == 0)
          v38 = v75;
        else
          v38 = (std::string::size_type)v74[1];
        v39 = std::string::append(&v100, (const std::string::value_type *)v37, v38);
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v101.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        v41 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v41, v42, v43, v44, v45);
        if ((v73 & 0x80u) == 0)
          v46 = __p;
        else
          v46 = (void **)__p[0];
        if ((v73 & 0x80u) == 0)
          v47 = v73;
        else
          v47 = (std::string::size_type)__p[1];
        v48 = std::string::append(&v101, (const std::string::value_type *)v46, v47);
        v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v103 = v48->__r_.__value_.__r.__words[2];
        v102 = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        if (v103 >= 0)
          v50 = (const std::string::value_type *)&v102;
        else
          v50 = (const std::string::value_type *)v102;
        if (v103 >= 0)
          v51 = HIBYTE(v103);
        else
          v51 = *((_QWORD *)&v102 + 1);
        std::string::append(&v105, v50, v51);
        if (SHIBYTE(v103) < 0)
          operator delete((void *)v102);
        if ((char)v73 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v101.__r_.__value_.__l.__data_);
        if ((char)v75 < 0)
          operator delete(v74[0]);
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v100.__r_.__value_.__l.__data_);
        if ((char)v77 < 0)
          operator delete(v76[0]);
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v99.__r_.__value_.__l.__data_);
        if ((char)v79 < 0)
          operator delete(v78[0]);
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v98.__r_.__value_.__l.__data_);
        if ((char)v81 < 0)
          operator delete(v80[0]);
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
        if ((char)v83 < 0)
          operator delete(v82[0]);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if ((char)v85 < 0)
          operator delete(v84[0]);
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v95.__r_.__value_.__l.__data_);
        if ((char)v87 < 0)
          operator delete(v86[0]);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94.__r_.__value_.__l.__data_);
        if ((char)v89 < 0)
          operator delete(v88[0]);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v93.__r_.__value_.__l.__data_);
        if ((char)v91 < 0)
          operator delete(v90[0]);
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v92.__r_.__value_.__l.__data_);
        if (*(_BYTE *)(a1 + 208))
        {
          std::string::basic_string[abi:ne180100]<0>(&v101, "\n  Peephole weights gradient: ");
          v52 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v104);
          kaldi::nnet1::MomentStatistics<float>(v52);
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v53 = &v100;
          else
            v53 = (std::string *)v100.__r_.__value_.__r.__words[0];
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v100.__r_.__value_.__r.__words[2]);
          else
            size = v100.__r_.__value_.__l.__size_;
          v55 = std::string::append(&v101, (const std::string::value_type *)v53, size);
          v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          v103 = v55->__r_.__value_.__r.__words[2];
          v102 = v56;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          if (v103 >= 0)
            v57 = (const std::string::value_type *)&v102;
          else
            v57 = (const std::string::value_type *)v102;
          if (v103 >= 0)
            v58 = HIBYTE(v103);
          else
            v58 = *((_QWORD *)&v102 + 1);
          std::string::append(&v105, v57, v58);
          if (SHIBYTE(v103) < 0)
            operator delete((void *)v102);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v100.__r_.__value_.__l.__data_);
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v101.__r_.__value_.__l.__data_);
        }
        if (*(_BYTE *)(a1 + 224))
        {
          std::string::basic_string[abi:ne180100]<0>(&v101, "\n  Projection weights gradient: ");
          v59 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, v104);
          kaldi::nnet1::MomentStatistics<float>(v59);
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v60 = &v100;
          else
            v60 = (std::string *)v100.__r_.__value_.__r.__words[0];
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v61 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
          else
            v61 = v100.__r_.__value_.__l.__size_;
          v62 = std::string::append(&v101, (const std::string::value_type *)v60, v61);
          v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          v103 = v62->__r_.__value_.__r.__words[2];
          v102 = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          if (v103 >= 0)
            v64 = (const std::string::value_type *)&v102;
          else
            v64 = (const std::string::value_type *)v102;
          if (v103 >= 0)
            v65 = HIBYTE(v103);
          else
            v65 = *((_QWORD *)&v102 + 1);
          std::string::append(&v105, v64, v65);
          if (SHIBYTE(v103) < 0)
            operator delete((void *)v102);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v100.__r_.__value_.__l.__data_);
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v101.__r_.__value_.__l.__data_);
        }
        ++v104;
      }
      while (v104 < *(_DWORD *)(a1 + 80));
    }
    v66 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v102, "\n");
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v105;
    else
      v67 = (std::string *)v105.__r_.__value_.__r.__words[0];
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v68 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
    else
      v68 = v105.__r_.__value_.__l.__size_;
    v69 = std::string::insert(v66, 0, (const std::string::value_type *)v67, v68);
    v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v69->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v103) < 0)
      operator delete((void *)v102);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  Gradients are uninitialized");
  }
}

void sub_1DE4A43FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoGradient(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoGradient((uint64_t)a1 + *(_QWORD *)(*a1 - 88), a2);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  void **v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  void **v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type size;
  std::string *v47;
  __int128 v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  void *__p[2];
  unsigned __int8 v57;
  void *v58[2];
  unsigned __int8 v59;
  void *v60[2];
  unsigned __int8 v61;
  void *v62[2];
  unsigned __int8 v63;
  void *v64[2];
  unsigned __int8 v65;
  void *v66[2];
  unsigned __int8 v67;
  void *v68[2];
  unsigned __int8 v69;
  void *v70[2];
  unsigned __int8 v71;
  void *v72[2];
  unsigned __int8 v73;
  void *v74[2];
  unsigned __int8 v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  __int128 v86;
  int64_t v87;
  int v88;
  std::string v89;

  memset(&v89, 0, sizeof(v89));
  v88 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v76, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v75 & 0x80u) == 0)
        v3 = v74;
      else
        v3 = (void **)v74[0];
      if ((v75 & 0x80u) == 0)
        v4 = v75;
      else
        v4 = (std::string::size_type)v74[1];
      v5 = std::string::append(&v76, (const std::string::value_type *)v3, v4);
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v72, ": ");
      if ((v73 & 0x80u) == 0)
        v7 = v72;
      else
        v7 = (void **)v72[0];
      if ((v73 & 0x80u) == 0)
        v8 = v73;
      else
        v8 = (std::string::size_type)v72[1];
      v9 = std::string::append(&v77, (const std::string::value_type *)v7, v8);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v70, "\n  Gates values: ");
      if ((v71 & 0x80u) == 0)
        v11 = v70;
      else
        v11 = (void **)v70[0];
      if ((v71 & 0x80u) == 0)
        v12 = v71;
      else
        v12 = (std::string::size_type)v70[1];
      v13 = std::string::append(&v78, (const std::string::value_type *)v11, v12);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 248) + 48 * v88);
      if ((v69 & 0x80u) == 0)
        v15 = v68;
      else
        v15 = (void **)v68[0];
      if ((v69 & 0x80u) == 0)
        v16 = v69;
      else
        v16 = (std::string::size_type)v68[1];
      v17 = std::string::append(&v79, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v66, "\n  Cell values: ");
      if ((v67 & 0x80u) == 0)
        v19 = v66;
      else
        v19 = (void **)v66[0];
      if ((v67 & 0x80u) == 0)
        v20 = v67;
      else
        v20 = (std::string::size_type)v66[1];
      v21 = std::string::append(&v80, (const std::string::value_type *)v19, v20);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 272) + 48 * v88);
      if ((v65 & 0x80u) == 0)
        v23 = v64;
      else
        v23 = (void **)v64[0];
      if ((v65 & 0x80u) == 0)
        v24 = v65;
      else
        v24 = (std::string::size_type)v64[1];
      v25 = std::string::append(&v81, (const std::string::value_type *)v23, v24);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v62, "\n  Cell outputs: ");
      if ((v63 & 0x80u) == 0)
        v27 = v62;
      else
        v27 = (void **)v62[0];
      if ((v63 & 0x80u) == 0)
        v28 = v63;
      else
        v28 = (std::string::size_type)v62[1];
      v29 = std::string::append(&v82, (const std::string::value_type *)v27, v28);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 296) + 48 * v88);
      if ((v61 & 0x80u) == 0)
        v31 = v60;
      else
        v31 = (void **)v60[0];
      if ((v61 & 0x80u) == 0)
        v32 = v61;
      else
        v32 = (std::string::size_type)v60[1];
      v33 = std::string::append(&v83, (const std::string::value_type *)v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Cell outputs gated: ");
      if ((v59 & 0x80u) == 0)
        v35 = v58;
      else
        v35 = (void **)v58[0];
      if ((v59 & 0x80u) == 0)
        v36 = v59;
      else
        v36 = (std::string::size_type)v58[1];
      v37 = std::string::append(&v84, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 320) + 48 * v88);
      if ((v57 & 0x80u) == 0)
        v39 = __p;
      else
        v39 = (void **)__p[0];
      if ((v57 & 0x80u) == 0)
        v40 = v57;
      else
        v40 = (std::string::size_type)__p[1];
      v41 = std::string::append(&v85, (const std::string::value_type *)v39, v40);
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v87 = v41->__r_.__value_.__r.__words[2];
      v86 = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if (v87 >= 0)
        v43 = (const std::string::value_type *)&v86;
      else
        v43 = (const std::string::value_type *)v86;
      if (v87 >= 0)
        v44 = HIBYTE(v87);
      else
        v44 = *((_QWORD *)&v86 + 1);
      std::string::append(&v89, v43, v44);
      if (SHIBYTE(v87) < 0)
        operator delete((void *)v86);
      if ((char)v57 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
      if ((char)v59 < 0)
        operator delete(v58[0]);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
      if ((char)v61 < 0)
        operator delete(v60[0]);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
      if ((char)v63 < 0)
        operator delete(v62[0]);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      if ((char)v65 < 0)
        operator delete(v64[0]);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
      if ((char)v67 < 0)
        operator delete(v66[0]);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      if ((char)v69 < 0)
        operator delete(v68[0]);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      if ((char)v71 < 0)
        operator delete(v70[0]);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      if ((char)v73 < 0)
        operator delete(v72[0]);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      if ((char)v75 < 0)
        operator delete(v74[0]);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      if (*(_BYTE *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v85, "\n  Output values: ");
        kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 344) + 48 * v88);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v45 = &v84;
        else
          v45 = (std::string *)v84.__r_.__value_.__r.__words[0];
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        else
          size = v84.__r_.__value_.__l.__size_;
        v47 = std::string::append(&v85, (const std::string::value_type *)v45, size);
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v87 = v47->__r_.__value_.__r.__words[2];
        v86 = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        if (v87 >= 0)
          v49 = (const std::string::value_type *)&v86;
        else
          v49 = (const std::string::value_type *)v86;
        if (v87 >= 0)
          v50 = HIBYTE(v87);
        else
          v50 = *((_QWORD *)&v86 + 1);
        std::string::append(&v89, v49, v50);
        if (SHIBYTE(v87) < 0)
          operator delete((void *)v86);
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v84.__r_.__value_.__l.__data_);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
      }
      ++v88;
    }
    while (v88 < *(_DWORD *)(a1 + 80));
  }
  v51 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v86, "\n");
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = &v89;
  else
    v52 = (std::string *)v89.__r_.__value_.__r.__words[0];
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  else
    v53 = v89.__r_.__value_.__l.__size_;
  v54 = std::string::insert(v51, 0, (const std::string::value_type *)v52, v53);
  *a2 = *v54;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v87) < 0)
    operator delete((void *)v86);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
}

void sub_1DE4A4CCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1DE4A4ED8()
{
  JUMPOUT(0x1DE4A4E00);
}

void sub_1DE4A4EE0()
{
  JUMPOUT(0x1DE4A4E10);
}

void sub_1DE4A4EE8()
{
  JUMPOUT(0x1DE4A4E20);
}

void sub_1DE4A4EF0()
{
  JUMPOUT(0x1DE4A4E30);
}

void sub_1DE4A4EF8()
{
  JUMPOUT(0x1DE4A4E40);
}

void sub_1DE4A4F00()
{
  JUMPOUT(0x1DE4A4E50);
}

void sub_1DE4A4F08()
{
  JUMPOUT(0x1DE4A4E60);
}

void sub_1DE4A4F10()
{
  JUMPOUT(0x1DE4A4E70);
}

void sub_1DE4A4F18()
{
  JUMPOUT(0x1DE4A4E80);
}

void sub_1DE4A4F20()
{
  JUMPOUT(0x1DE4A4E90);
}

void sub_1DE4A4F28()
{
  JUMPOUT(0x1DE4A4EA0);
}

void sub_1DE4A4F30()
{
  JUMPOUT(0x1DE4A4EB0);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoPropagate(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoPropagate((uint64_t)a1 + *(_QWORD *)(*a1 - 96), a2);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoBackPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type size;
  std::string *v39;
  __int128 v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  std::string *v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  void *__p[2];
  unsigned __int8 v49;
  void *v50[2];
  unsigned __int8 v51;
  void *v52[2];
  unsigned __int8 v53;
  void *v54[2];
  unsigned __int8 v55;
  void *v56[2];
  unsigned __int8 v57;
  void *v58[2];
  unsigned __int8 v59;
  void *v60[2];
  unsigned __int8 v61;
  void *v62[2];
  unsigned __int8 v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  __int128 v72;
  int64_t v73;
  int v74;
  std::string v75;

  memset(&v75, 0, sizeof(v75));
  v74 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v64, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v63 & 0x80u) == 0)
        v3 = v62;
      else
        v3 = (void **)v62[0];
      if ((v63 & 0x80u) == 0)
        v4 = v63;
      else
        v4 = (std::string::size_type)v62[1];
      v5 = std::string::append(&v64, (const std::string::value_type *)v3, v4);
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v60, ": ");
      if ((v61 & 0x80u) == 0)
        v7 = v60;
      else
        v7 = (void **)v60[0];
      if ((v61 & 0x80u) == 0)
        v8 = v61;
      else
        v8 = (std::string::size_type)v60[1];
      v9 = std::string::append(&v65, (const std::string::value_type *)v7, v8);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Gates diff: ");
      if ((v59 & 0x80u) == 0)
        v11 = v58;
      else
        v11 = (void **)v58[0];
      if ((v59 & 0x80u) == 0)
        v12 = v59;
      else
        v12 = (std::string::size_type)v58[1];
      v13 = std::string::append(&v66, (const std::string::value_type *)v11, v12);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 440) + 48 * v74);
      if ((v57 & 0x80u) == 0)
        v15 = v56;
      else
        v15 = (void **)v56[0];
      if ((v57 & 0x80u) == 0)
        v16 = v57;
      else
        v16 = (std::string::size_type)v56[1];
      v17 = std::string::append(&v67, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, "\n  Cell diff: ");
      if ((v55 & 0x80u) == 0)
        v19 = v54;
      else
        v19 = (void **)v54[0];
      if ((v55 & 0x80u) == 0)
        v20 = v55;
      else
        v20 = (std::string::size_type)v54[1];
      v21 = std::string::append(&v68, (const std::string::value_type *)v19, v20);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 416) + 48 * v74);
      if ((v53 & 0x80u) == 0)
        v23 = v52;
      else
        v23 = (void **)v52[0];
      if ((v53 & 0x80u) == 0)
        v24 = v53;
      else
        v24 = (std::string::size_type)v52[1];
      v25 = std::string::append(&v69, (const std::string::value_type *)v23, v24);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v50, "\n  Cell out gated diff: ");
      if ((v51 & 0x80u) == 0)
        v27 = v50;
      else
        v27 = (void **)v50[0];
      if ((v51 & 0x80u) == 0)
        v28 = v51;
      else
        v28 = (std::string::size_type)v50[1];
      v29 = std::string::append(&v70, (const std::string::value_type *)v27, v28);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 392) + 48 * v74);
      if ((v49 & 0x80u) == 0)
        v31 = __p;
      else
        v31 = (void **)__p[0];
      if ((v49 & 0x80u) == 0)
        v32 = v49;
      else
        v32 = (std::string::size_type)__p[1];
      v33 = std::string::append(&v71, (const std::string::value_type *)v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v73 = v33->__r_.__value_.__r.__words[2];
      v72 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v73 >= 0)
        v35 = (const std::string::value_type *)&v72;
      else
        v35 = (const std::string::value_type *)v72;
      if (v73 >= 0)
        v36 = HIBYTE(v73);
      else
        v36 = *((_QWORD *)&v72 + 1);
      std::string::append(&v75, v35, v36);
      if (SHIBYTE(v73) < 0)
        operator delete((void *)v72);
      if ((char)v49 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      if ((char)v51 < 0)
        operator delete(v50[0]);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if ((char)v53 < 0)
        operator delete(v52[0]);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
      if ((char)v55 < 0)
        operator delete(v54[0]);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if ((char)v57 < 0)
        operator delete(v56[0]);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if ((char)v59 < 0)
        operator delete(v58[0]);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if ((char)v61 < 0)
        operator delete(v60[0]);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if ((char)v63 < 0)
        operator delete(v62[0]);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (*(_BYTE *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v71, "\n  Output diff: ");
        kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 368) + 48 * v74);
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &v70;
        else
          v37 = (std::string *)v70.__r_.__value_.__r.__words[0];
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
        else
          size = v70.__r_.__value_.__l.__size_;
        v39 = std::string::append(&v71, (const std::string::value_type *)v37, size);
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v73 = v39->__r_.__value_.__r.__words[2];
        v72 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v73 >= 0)
          v41 = (const std::string::value_type *)&v72;
        else
          v41 = (const std::string::value_type *)v72;
        if (v73 >= 0)
          v42 = HIBYTE(v73);
        else
          v42 = *((_QWORD *)&v72 + 1);
        std::string::append(&v75, v41, v42);
        if (SHIBYTE(v73) < 0)
          operator delete((void *)v72);
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v70.__r_.__value_.__l.__data_);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
      }
      ++v74;
    }
    while (v74 < *(_DWORD *)(a1 + 80));
  }
  v43 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v72, "\n");
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = &v75;
  else
    v44 = (std::string *)v75.__r_.__value_.__r.__words[0];
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
  else
    v45 = v75.__r_.__value_.__l.__size_;
  v46 = std::string::insert(v43, 0, (const std::string::value_type *)v44, v45);
  *a2 = *v46;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v73) < 0)
    operator delete((void *)v72);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
}

void sub_1DE4A54AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1DE4A5678()
{
  JUMPOUT(0x1DE4A55E0);
}

void sub_1DE4A5680()
{
  JUMPOUT(0x1DE4A55F0);
}

void sub_1DE4A5688()
{
  JUMPOUT(0x1DE4A5600);
}

void sub_1DE4A5690()
{
  JUMPOUT(0x1DE4A5610);
}

void sub_1DE4A5698()
{
  JUMPOUT(0x1DE4A5620);
}

void sub_1DE4A56A0()
{
  JUMPOUT(0x1DE4A5630);
}

void sub_1DE4A56A8()
{
  JUMPOUT(0x1DE4A5640);
}

void sub_1DE4A56B0()
{
  JUMPOUT(0x1DE4A5650);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoBackPropagate(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InfoBackPropagate((uint64_t)a1 + *(_QWORD *)(*a1 - 104), a2);
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  const char *v78;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  __int128 v88;
  __int128 v89;
  void *v90;
  __int128 v91;
  __int128 v92;
  void *v93;
  __int128 v94;
  __int128 v95;
  void *v96;
  _QWORD v97[4];
  void *v98;
  _QWORD v99[4];
  void *v100;
  _QWORD v101[4];
  void *v102;
  __int128 v103;
  __int128 v104;
  void *v105;
  __int128 v106;
  __int128 v107;
  void *v108;
  __int128 v109;
  __int128 v110;
  void *v111;
  __int128 v112;
  __int128 v113;

  v5 = *(unsigned int *)(a2 + 20);
  v6 = *(unsigned int *)(a1 + 96);
  v84 = ((int)v5 / (int)v6);
  if ((int)v5 % (int)v6)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x2BB, "batch_size % num_utts == 0", a5);
  LODWORD(v7) = a4;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v111, "PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 701, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"Running forward propagation for batch size = ", 45);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v111);
  }
  v14 = *(_QWORD *)(a3 + 32);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateForwardBuffers(a1, v7, v5, v14);
  v16 = *(_QWORD *)(a1 + 104);
  v86 = (int)v7;
  v80 = v7;
  if (*(_QWORD *)(a1 + 112) == v16)
  {
    v81 = 0;
    v7 = (int)v7;
  }
  else
  {
    v17 = *(_DWORD *)(v16 + 32 * (int)v7 + 16);
    if (v17 < 1)
    {
      v81 = 0;
      v7 = (int)v7;
    }
    else
    {
      if (v17 != (_DWORD)v5)
        kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x2C5, "boundary_[batch_index].Dim() == batch_size", v15);
      v7 = (int)v7;
      v18 = *(_QWORD *)(a1 + 128) + 48 * (int)v7;
      *(_QWORD *)(v18 + 32) = v14;
      v81 = 1;
      kaldi::CuMatrix<float>::Resize(v18, v6, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 48 * (int)v7 + 16), 1u, 0);
    }
  }
  v19 = *(_QWORD *)(a1 + 248) + 48 * v7;
  v85 = *(_QWORD *)(a1 + 344) + 48 * v7;
  v20 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  kaldi::CuMatrixBase<float>::AddMatMat<signed char>(v19, a2, 111, v20, (const char *)0x70, 1.0, 0.0);
  v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
  kaldi::CuMatrixBase<float>::AddVecToRows(v19, v21, v22, v23, v24, 1.0, 1.0);
  if ((int)v84 >= 1)
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v82 = a1 + 12;
    v83 = v19;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v111, v19, v28, v6, 0, *(_DWORD *)(a1 + 176));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v108, v19, v28, v6, (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v105, v19, v28, v6, (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
      v30 = *(_QWORD *)(a1 + 272) + 48 * (int)v7;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v102, v30, v28, v6, 0, *(_DWORD *)(v30 + 16));
      memset(v101, 0, sizeof(v101));
      v100 = &unk_1EA926508;
      memset(v99, 0, sizeof(v99));
      v98 = &unk_1EA926508;
      if (v29)
      {
        if (v81)
        {
          kaldi::CuMatrixBase<float>::SetZero(*(_QWORD *)(a1 + 128) + 48 * (int)v7);
          v31 = *(_QWORD *)(a1 + 128) + 48 * (int)v7;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v31, 0, *(_DWORD *)(v31 + 20), 0, *(_DWORD *)(a1 + 176));
          v99[0] = v97[0];
          *(_OWORD *)&v99[1] = *(_OWORD *)&v97[1];
          v99[3] = v97[3];
          v96 = &unk_1EA926508;
          memset(v97, 0, sizeof(v97));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
          v32 = *(_QWORD *)(a1 + 272) + 48 * (int)v7;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v32, v28 - v6, v6, 0, *(_DWORD *)(v32 + 16));
          v34 = *(_QWORD *)(a1 + 104) + 32 * v7;
          *(_QWORD *)&v95 = 0;
          v94 = 0uLL;
          v93 = &unk_1EA926538;
          if ((v6 + v28) > *(_DWORD *)(v34 + 16))
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v33);
          *(_QWORD *)&v94 = *(_QWORD *)(v34 + 8) + v27;
          DWORD2(v94) = v6;
          *(_QWORD *)&v95 = *(_QWORD *)(v34 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v98, (uint64_t)&v96, (uint64_t)&v93, 1, v33);
          v96 = &unk_1EA926508;
          memset(v97, 0, sizeof(v97));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
          v35 = *(_QWORD *)(a1 + 128) + 48 * (int)v86;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v35, 0, *(_DWORD *)(v35 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(v82 + *(_QWORD *)(*(_QWORD *)a1 - 24)));
          *(_OWORD *)&v101[1] = *(_OWORD *)&v97[1];
          v101[0] = v97[0];
          v101[3] = v97[3];
          v96 = &unk_1EA926508;
          memset(v97, 0, sizeof(v97));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v85, v28 - v6, v6, 0, *(_DWORD *)(v85 + 16));
          v37 = *(_QWORD *)(a1 + 104) + 32 * v86;
          *(_QWORD *)&v95 = 0;
          v94 = 0uLL;
          v93 = &unk_1EA926538;
          if ((v6 + v28) > *(_DWORD *)(v37 + 16))
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v36);
          *(_QWORD *)&v94 = *(_QWORD *)(v37 + 8) + v27;
          DWORD2(v94) = v6;
          *(_QWORD *)&v95 = *(_QWORD *)(v37 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v100, (uint64_t)&v96, (uint64_t)&v93, 1, v36);
          v96 = &unk_1EA926508;
          memset(v97, 0, sizeof(v97));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
        }
        else
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v85, v28 - v6, v6, 0, *(_DWORD *)(v85 + 16));
          *(_OWORD *)&v101[1] = *(_OWORD *)&v97[1];
          v101[0] = v97[0];
          v101[3] = v97[3];
          v96 = &unk_1EA926508;
          memset(v97, 0, sizeof(v97));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
          v40 = *(_QWORD *)(a1 + 272) + 48 * (int)v86;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v40, v28 - v6, v6, 0, *(_DWORD *)(v40 + 16));
          v99[0] = v97[0];
          *(_OWORD *)&v99[1] = *(_OWORD *)&v97[1];
          v99[3] = v97[3];
          v96 = &unk_1EA926508;
          memset(v97, 0, sizeof(v97));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
          v19 = v83;
        }
      }
      else
      {
        v38 = *(_QWORD *)(a1 + 8) + 48 * (int)v7;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v38, 0, *(_DWORD *)(v38 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(v82 + *(_QWORD *)(*(_QWORD *)a1 - 24)));
        *(_OWORD *)&v101[1] = *(_OWORD *)&v97[1];
        v101[0] = v97[0];
        v101[3] = v97[3];
        v96 = &unk_1EA926508;
        memset(v97, 0, sizeof(v97));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
        v39 = *(_QWORD *)(a1 + 8) + 48 * (int)v7;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v39, 0, *(_DWORD *)(v39 + 20), 0, *(_DWORD *)(a1 + 176));
        v99[0] = v97[0];
        *(_OWORD *)&v99[1] = *(_OWORD *)&v97[1];
        v99[3] = v97[3];
        v96 = &unk_1EA926508;
        memset(v97, 0, sizeof(v97));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
        v19 = v83;
        v29 = 0;
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v19, v28, v6, 0, *(_DWORD *)(v19 + 16));
      v41 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v96, (uint64_t)&v100, 111, v41, (const char *)0x70, 1.0, 1.0);
      v96 = &unk_1EA926508;
      memset(v97, 0, sizeof(v97));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
      if (*(_BYTE *)(a1 + 208))
      {
        v45 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
        if (!*(_DWORD *)(v45 + 20))
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v46);
        v47 = *(_QWORD *)(v45 + 8);
        v48 = *(_DWORD *)(v45 + 16);
        v49 = *(_QWORD *)(v45 + 32);
        v96 = &unk_1EA926538;
        v97[0] = v47;
        v97[2] = v49;
        v97[1] = v48;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v111, (uint64_t)&v98, 111, (uint64_t)&v96, v46, 1.0, 1.0);
        v50 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v50 + 20) <= 1u)
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v51);
        v52 = *(_QWORD *)(v50 + 8) + 4 * *(int *)(v50 + 24);
        v53 = *(_DWORD *)(v50 + 16);
        v54 = *(_QWORD *)(v50 + 32);
        v96 = &unk_1EA926538;
        v97[0] = v52;
        v97[2] = v54;
        v97[1] = v53;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v108, (uint64_t)&v98, 111, (uint64_t)&v96, v51, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v111, (uint64_t)&v111, v42, v43, v44);
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v108, (uint64_t)&v108, v55, v56, v57);
      kaldi::CuMatrixBase<float>::ApplyTanh((uint64_t)&v105, v58, v59, v60, v61);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v102, (uint64_t)&v111, 111, (uint64_t)&v105, (const char *)0x6F, 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v102, (uint64_t)&v108, 111, (uint64_t)&v98, (const char *)0x6F, 1.0, 1.0);
      v62 = *(float *)(a1 + 476);
      if (v62 > 0.0)
      {
        kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)&v102, v62);
        kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)&v102, -*(float *)(a1 + 476));
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v19, v28, v6, (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
      if (*(_BYTE *)(a1 + 208))
      {
        v66 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v66 + 20) <= 2u)
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v67);
        v68 = *(_QWORD *)(v66 + 8) + 8 * *(int *)(v66 + 24);
        v69 = *(_DWORD *)(v66 + 16);
        v70 = *(_QWORD *)(v66 + 32);
        v93 = &unk_1EA926538;
        *(_QWORD *)&v94 = v68;
        *(_QWORD *)&v95 = v70;
        *((_QWORD *)&v94 + 1) = v69;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v96, (uint64_t)&v102, 111, (uint64_t)&v93, v67, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v96, (uint64_t)&v96, v63, v64, v65);
      v71 = *(_QWORD *)(a1 + 296) + 48 * (int)v86;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v71, v28, v6, 0, *(_DWORD *)(v71 + 16));
      kaldi::CuMatrixBase<float>::Tanh((uint64_t)&v93, (uint64_t)&v102, v72, v73, v74);
      v75 = *(_QWORD *)(a1 + 320) + 48 * (int)v86;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v90, v75, v28, v6, 0, *(_DWORD *)(v75 + 16));
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v90, (uint64_t)&v96, 111, (uint64_t)&v93, (const char *)0x6F, 1.0, 0.0);
      if (*(_BYTE *)(a1 + 224))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v87, v85, v28, v6, 0, *(_DWORD *)(v85 + 16));
        v76 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
        kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v87, (uint64_t)&v90, 111, v76, (const char *)0x70, 1.0, 0.0);
      }
      else
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v87, v85, v28, v6, 0, *(_DWORD *)(v85 + 16));
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v87, (uint64_t)&v90, 111, v77, v78);
      }
      v87 = &unk_1EA926508;
      v88 = 0u;
      v89 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v87);
      v90 = &unk_1EA926508;
      v91 = 0u;
      v92 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v90);
      v93 = &unk_1EA926508;
      v94 = 0u;
      v95 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
      v96 = &unk_1EA926508;
      memset(v97, 0, sizeof(v97));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
      v98 = &unk_1EA926508;
      memset(v99, 0, sizeof(v99));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v98);
      v100 = &unk_1EA926508;
      memset(v101, 0, sizeof(v101));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v100);
      v102 = &unk_1EA926508;
      v103 = 0u;
      v104 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v102);
      v105 = &unk_1EA926508;
      v106 = 0u;
      v107 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v105);
      v108 = &unk_1EA926508;
      v109 = 0u;
      v110 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v108);
      v111 = &unk_1EA926508;
      v112 = 0u;
      v113 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v111);
      ++v29;
      v28 += v6;
      v27 += 4 * (int)v6;
      v7 = v86;
    }
    while (v84 != v29);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a3, v85, 111, v25, v26);
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SaveLastState(a1, v80);
}

void sub_1DE4A6344(_Unwind_Exception *a1)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&STACK[0x210]);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateForwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD v9[35];

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateForwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1397, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating forward buffers for batch ", 37);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 248) + 48 * a2, a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 272) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 296) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 320) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 344) + 48 * a2, a3, *(unsigned int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12), 0, 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 248) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 272) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 296) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 320) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 344) + 48 * a2 + 32) = a4;
}

void sub_1DE4A6734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SaveLastState(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  double result;
  void *v13;
  __int128 v14;
  __int128 v15;
  void *v16;
  __int128 v17;
  __int128 v18;

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v16, "SaveLastState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1700, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Saving last output and cell state for batch ", 44);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v16);
  }
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 272) + 48 * a2 + 20) - *(_DWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 8) + 48 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v16, v5, 0, *(_DWORD *)(v5 + 20), 0, *(_DWORD *)(a1 + 176));
  v6 = *(_QWORD *)(a1 + 272) + 48 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v13, v6, v4, *(_DWORD *)(a1 + 96), 0, *(_DWORD *)(v6 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v16, (uint64_t)&v13, 111, v7, v8);
  v13 = &unk_1EA926508;
  v14 = 0u;
  v15 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v13);
  v16 = &unk_1EA926508;
  v17 = 0u;
  v18 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v16);
  v9 = 3 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v16, *(_QWORD *)(a1 + 8) + 16 * v9, 0, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 16 * v9 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v13, *(_QWORD *)(a1 + 344) + 16 * v9, v4, *(_DWORD *)(a1 + 96), 0, *(_DWORD *)(*(_QWORD *)(a1 + 344) + 16 * v9 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v16, (uint64_t)&v13, 111, v10, v11);
  v13 = &unk_1EA926508;
  v14 = 0u;
  v15 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v13);
  v16 = &unk_1EA926508;
  v17 = 0u;
  v18 = 0u;
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v16).n128_u64[0];
  return result;
}

void sub_1DE4A690C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 a10, __int128 a11, uint64_t a12, __int128 a13, __int128 a14)
{
  uint64_t v14;

  a9 = v14 + 16;
  a10 = 0u;
  a11 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a9);
  a12 = v14 + 16;
  a13 = 0u;
  a14 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a12);
  _Unwind_Resume(a1);
}

double `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 128), a2, a3, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if (*(_DWORD *)(a1 + 96) == 1)
  {
    v6 = *(_QWORD *)(a3 + 24);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateForwardBuffers(a1, 0, 1, v6);
    v8 = *(_QWORD *)(a1 + 104);
    if (*(_QWORD *)(a1 + 112) != v8)
    {
      v9 = *(_DWORD *)(v8 + 16);
      if (v9 >= 1)
      {
        if (v9 != 1)
          kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x325, "boundary_[0].Dim() == 1", v7);
        v10 = *(_QWORD *)(a1 + 128);
        *(_QWORD *)(v10 + 32) = v6;
        kaldi::CuMatrix<float>::Resize(v10, 1, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 16), 1u, 0);
      }
    }
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
    kaldi::CuVectorBase<float>::AddMatVec<signed char>();
  }
  kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x320, "ropts_.num_sequences == 1", v5);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 136), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc()
{
  _QWORD *v0;
  _QWORD v1[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetUnitOutputFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 876);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

{
  _QWORD *v0;
  _QWORD v1[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetUnitOutputFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 881);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc()
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc();
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetUnitOutputFnc();
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int *v103;
  BOOL v104;
  unsigned int *v105;
  double result;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  _QWORD v121[4];
  void *v122;
  _QWORD v123[4];
  void *v124;
  _QWORD v125[4];
  void *v126;
  _QWORD v127[4];
  void *v128;
  _QWORD v129[4];
  void *v130;
  _QWORD v131[4];
  void *v132;
  __int128 v133;
  __int128 v134;
  void *v135;
  __int128 v136;
  __int128 v137;
  void *v138;
  __int128 v139;
  __int128 v140;
  void *v141;
  __int128 v142;
  __int128 v143;
  void *v144;
  __int128 v145;
  __int128 v146;
  void *v147;
  __int128 v148;
  __int128 v149;
  void *v150;
  __int128 v151;
  __int128 v152;
  void *v153;
  __int128 v154;
  __int128 v155;
  void *v156;
  __int128 v157;
  __int128 v158;
  void *v159;
  __int128 v160;
  __int128 v161;
  void *v162;
  __int128 v163;
  __int128 v164;
  void *v165;
  __int128 v166;
  __int128 v167;

  v10 = *(unsigned int *)(a2 + 20);
  v11 = *(unsigned int *)(a1 + 96);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureTrainingBuffers((uint64_t *)a1);
  if ((int)v10 % (int)v11)
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x380, "batch_size % num_utts == 0", v12);
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v165, "BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 898, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v165, (uint64_t)"Running backward propagation for batch size = ", 46);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", which contains ", 17);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" frames each from ", 18);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v165);
  }
  v109 = ((int)v10 / (int)v11);
  if ((int)v10 / (int)v11 < 2)
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x384, "frames_in_batch > 1 && \"LSTM backprop will not work with batches of single frames.\"", v12);
  if (a5)
    v16 = a5;
  else
    v16 = a4;
  v17 = *(_QWORD *)(v16 + 32);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateBackwardBuffers(a1, a6, v10, v17);
  v20 = a6;
  v21 = *(_QWORD *)(a1 + 248);
  v22 = 3 * a6;
  v23 = *(_QWORD *)(a1 + 440) + 48 * a6;
  v24 = *(_QWORD *)(a1 + 368);
  v111 = *(_QWORD *)(a1 + 416);
  v112 = v22;
  v25 = *(_QWORD *)(a1 + 104);
  v115 = v20;
  if (*(_QWORD *)(a1 + 112) == v25 || (v26 = *(_DWORD *)(v25 + 32 * v20 + 16), v26 < 1))
  {
    v113 = 0;
  }
  else
  {
    if (v26 != (_DWORD)v10)
      kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x390, "boundary_[batch_index].Dim() == batch_size", v19);
    v27 = *(_QWORD *)(a1 + 128) + 48 * (int)v20;
    *(_QWORD *)(v27 + 32) = v17;
    v113 = 1;
    kaldi::CuMatrix<float>::Resize(v27, v11, *(unsigned int *)(v23 + 16), 1u, 0);
  }
  v28 = v21 + 16 * v112;
  v114 = v24 + 16 * v112;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)v114, a4, 111, v18, v19);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v165, v28, 0, *(_DWORD *)(v28 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v162, v28, 0, *(_DWORD *)(v28 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v159, v28, 0, *(_DWORD *)(v28 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v156, v28, 0, *(_DWORD *)(v28 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v153, v23, 0, *(_DWORD *)(v23 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v150, v23, 0, *(_DWORD *)(v23 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v147, v23, 0, *(_DWORD *)(v23 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v144, v23, 0, *(_DWORD *)(v23 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v153, (uint64_t)&v165, (uint64_t)&v156, v29, v30);
  v31 = v10 - v11;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v141, (uint64_t)&v150, v11, v31, 0, SDWORD2(v151));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v138, (uint64_t)&v162, v11, v31, 0, SDWORD2(v163));
  v32 = *(_QWORD *)(a1 + 272) + 48 * (int)v115;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v135, v32, 0, v31, 0, *(_DWORD *)(v32 + 16));
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v141, (uint64_t)&v138, (uint64_t)&v135, v33, v34);
  v135 = &unk_1EA926508;
  v136 = 0u;
  v137 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v135);
  v138 = &unk_1EA926508;
  v139 = 0u;
  v140 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v138);
  v141 = &unk_1EA926508;
  v142 = 0u;
  v143 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v141);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v141, (uint64_t)&v150, 0, v11, 0, SDWORD2(v151));
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v141);
  v141 = &unk_1EA926508;
  v142 = 0u;
  v143 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v141);
  v108 = v23;
  v107 = a5;
  if (v113)
  {
    v37 = *(_QWORD *)(a1 + 128) + 48 * (int)v115;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v141, v37, 0, *(_DWORD *)(v37 + 20), 0, *(_DWORD *)(a1 + 176));
    kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v141);
    v38 = v109 - 1;
    v39 = v11;
    v40 = 4 * (int)v11;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v138, (uint64_t)&v150, v39, v11, 0, SDWORD2(v151));
      v42 = *(_QWORD *)(a1 + 104) + 32 * v115;
      *(_QWORD *)&v137 = 0;
      v136 = 0uLL;
      v135 = &unk_1EA926538;
      v39 += v11;
      if (v39 > *(_DWORD *)(v42 + 16))
        kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v41);
      *(_QWORD *)&v136 = *(_QWORD *)(v42 + 8) + v40;
      DWORD2(v136) = v11;
      *(_QWORD *)&v137 = *(_QWORD *)(v42 + 24);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v138, (uint64_t)&v141, (uint64_t)&v135, 0, v41);
      v40 += 4 * (int)v11;
      v138 = &unk_1EA926508;
      --v38;
      v139 = 0u;
      v140 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v138);
    }
    while (v38);
    v141 = &unk_1EA926508;
    v142 = 0u;
    v143 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v141);
  }
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v147, (uint64_t)&v159, *(_QWORD *)(a1 + 296) + 48 * (int)v115, v35, v36);
  kaldi::CuMatrixBase<float>::DiffTanh((uint64_t)&v144, (uint64_t)&v156, (uint64_t)&v165, v43, v44);
  v45 = v111 + 16 * v112;
  kaldi::CuMatrixBase<float>::DiffTanh(v45, *(_QWORD *)(a1 + 296) + 48 * (int)v115, (uint64_t)&v159, v46, v47);
  v48 = (int)v109 - 1;
  v110 = (int)v109 - 1;
  do
  {
    v49 = v48 * (int)v11;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v141, v114, v48 * v11, v11, 0, *(_DWORD *)(v114 + 16));
    v50 = v115;
    v51 = *(_QWORD *)(a1 + 392) + 48 * (int)v115;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v138, v51, v48 * v11, v11, 0, *(_DWORD *)(v51 + 16));
    if (*(_BYTE *)(a1 + 224))
    {
      v54 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v138, (uint64_t)&v141, 111, v54, (const char *)0x6F, 1.0, 0.0);
    }
    else
    {
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v138, (uint64_t)&v141, 111, v52, v53);
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v135, (uint64_t)&v147, v49, v11, 0, SDWORD2(v148));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v135, (uint64_t)&v138, v55, v56, v57);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v132, v45, v49, v11, 0, *(_DWORD *)(v45 + 16));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v132, (uint64_t)&v138, v58, v59, v60);
    if (*(_BYTE *)(a1 + 208))
    {
      v61 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
      if (*(_DWORD *)(v61 + 20) <= 2u)
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v62);
      v63 = *(_QWORD *)(v61 + 8) + 8 * *(int *)(v61 + 24);
      v64 = *(_DWORD *)(v61 + 16);
      v65 = *(_QWORD *)(v61 + 32);
      v130 = &unk_1EA926538;
      v131[0] = v63;
      v131[2] = v65;
      v131[1] = v64;
      kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v132, (uint64_t)&v135, 111, (uint64_t)&v130, v62, 1.0, 1.0);
    }
    if (v48 < v110)
    {
      v66 = (int)v11;
      v67 = v66 + v66 * v48;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v130, v45, v66 + v66 * v48, v11, 0, *(_DWORD *)(v45 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v128, (uint64_t)&v162, v67, v11, 0, SDWORD2(v163));
      if (v113)
      {
        v68 = *(_QWORD *)(a1 + 128) + 48 * (int)v115;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v126, v68, 0, *(_DWORD *)(v68 + 20), 0, *(_DWORD *)(a1 + 176));
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v126);
        v70 = *(_QWORD *)(a1 + 104) + 32 * v115;
        memset(v125, 0, 24);
        v124 = &unk_1EA926538;
        if ((v11 + v67) > *(_DWORD *)(v70 + 16))
          kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v69);
        v125[0] = *(_QWORD *)(v70 + 8) + 4 * v67;
        LODWORD(v125[1]) = v11;
        v125[2] = *(_QWORD *)(v70 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v126, (uint64_t)&v130, (uint64_t)&v124, 1, v69);
        *(_OWORD *)&v131[1] = *(_OWORD *)&v127[1];
        v131[0] = v127[0];
        v131[3] = v127[3];
        v71 = *(_QWORD *)(a1 + 128) + 48 * (int)v115;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, v71, 0, *(_DWORD *)(v71 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v124);
        v73 = *(_QWORD *)(a1 + 104) + 32 * v115;
        memset(v123, 0, 24);
        v122 = &unk_1EA926538;
        if ((v11 + v67) > *(_DWORD *)(v73 + 16))
          kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v72);
        v123[0] = *(_QWORD *)(v73 + 8) + 4 * v67;
        LODWORD(v123[1]) = v11;
        v123[2] = *(_QWORD *)(v73 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v124, (uint64_t)&v128, (uint64_t)&v122, 1, v72);
        v129[0] = v125[0];
        *(_OWORD *)&v129[1] = *(_OWORD *)&v125[1];
        v129[3] = v125[3];
        v124 = &unk_1EA926508;
        memset(v125, 0, sizeof(v125));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v124);
        v126 = &unk_1EA926508;
        memset(v127, 0, sizeof(v127));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v126);
        v50 = v115;
      }
      if (*(_BYTE *)(a1 + 208))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v126, (uint64_t)&v150, v67, v11, 0, SDWORD2(v151));
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, (uint64_t)&v153, v67, v11, 0, SDWORD2(v154));
        if (v113)
        {
          v74 = *(_QWORD *)(a1 + 128) + 48 * (int)v50;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v122, v74, 0, *(_DWORD *)(v74 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v122);
          v76 = *(_QWORD *)(a1 + 104) + 32 * v50;
          memset(v121, 0, 24);
          v120 = &unk_1EA926538;
          if ((v11 + v67) > *(_DWORD *)(v76 + 16))
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v75);
          v121[0] = *(_QWORD *)(v76 + 8) + 4 * v67;
          LODWORD(v121[1]) = v11;
          v121[2] = *(_QWORD *)(v76 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v122, (uint64_t)&v126, (uint64_t)&v120, 1, v75);
          *(_OWORD *)&v127[1] = *(_OWORD *)&v123[1];
          v127[0] = v123[0];
          v127[3] = v123[3];
          v77 = *(_QWORD *)(a1 + 128) + 48 * (int)v50;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v120, v77, 0, *(_DWORD *)(v77 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v120);
          v79 = *(_QWORD *)(a1 + 104) + 32 * v50;
          v118 = 0;
          v119 = 0;
          v117 = 0;
          v116 = &unk_1EA926538;
          if ((v11 + v67) > *(_DWORD *)(v79 + 16))
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v78);
          v117 = *(_QWORD *)(v79 + 8) + 4 * v67;
          LODWORD(v118) = v11;
          v119 = *(_QWORD *)(v79 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v120, (uint64_t)&v124, (uint64_t)&v116, 1, v78);
          v125[0] = v121[0];
          *(_OWORD *)&v125[1] = *(_OWORD *)&v121[1];
          v125[3] = v121[3];
          v120 = &unk_1EA926508;
          memset(v121, 0, sizeof(v121));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v120);
          v122 = &unk_1EA926508;
          memset(v123, 0, sizeof(v123));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v122);
        }
        v80 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v80 + 20) <= 1u)
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v81);
        v82 = *(_QWORD *)(v80 + 8) + 4 * *(int *)(v80 + 24);
        v83 = *(_DWORD *)(v80 + 16);
        v84 = *(_QWORD *)(v80 + 32);
        v122 = &unk_1EA926538;
        v123[0] = v82;
        v123[2] = v84;
        v123[1] = v83;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v132, (uint64_t)&v126, 111, (uint64_t)&v122, v81, 1.0, 1.0);
        v85 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
        if (!*(_DWORD *)(v85 + 20))
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v86);
        v87 = *(_QWORD *)(v85 + 8);
        v88 = *(_DWORD *)(v85 + 16);
        v89 = *(_QWORD *)(v85 + 32);
        v122 = &unk_1EA926538;
        v123[0] = v87;
        v123[2] = v89;
        v123[1] = v88;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v132, (uint64_t)&v124, 111, (uint64_t)&v122, v86, 1.0, 1.0);
        v124 = &unk_1EA926508;
        memset(v125, 0, sizeof(v125));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v124);
        v126 = &unk_1EA926508;
        memset(v127, 0, sizeof(v127));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v126);
      }
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v132, (uint64_t)&v130, 111, (uint64_t)&v128, (const char *)0x6F, 1.0, 1.0);
      v128 = &unk_1EA926508;
      memset(v129, 0, sizeof(v129));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v128);
      v130 = &unk_1EA926508;
      memset(v131, 0, sizeof(v131));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v130);
      v50 = v115;
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v130, (uint64_t)&v153, v49, v11, 0, SDWORD2(v154));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v130, (uint64_t)&v132, v90, v91, v92);
    v130 = &unk_1EA926508;
    memset(v131, 0, sizeof(v131));
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v130);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v130, (uint64_t)&v144, v49, v11, 0, SDWORD2(v145));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v130, (uint64_t)&v132, v93, v94, v95);
    v130 = &unk_1EA926508;
    memset(v131, 0, sizeof(v131));
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v130);
    if (v48 <= 0)
    {
      v102 = v48 - 1;
    }
    else
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v130, (uint64_t)&v150, v49, v11, 0, SDWORD2(v151));
      kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v130, (uint64_t)&v132, v96, v97, v98);
      v130 = &unk_1EA926508;
      memset(v131, 0, sizeof(v131));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v130);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v130, v108, v49, v11, 0, *(_DWORD *)(v108 + 16));
      if (v113)
      {
        v99 = *(_QWORD *)(a1 + 128) + 48 * (int)v50;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v128, v99, 0, *(_DWORD *)(v99 + 20), 0, v131[1]);
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v128);
        v101 = *(_QWORD *)(a1 + 104) + 32 * v50;
        memset(v127, 0, 24);
        v126 = &unk_1EA926538;
        if ((v11 + v49) > *(_DWORD *)(v101 + 16))
          kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v100);
        v127[0] = *(_QWORD *)(v101 + 8) + 4 * v49;
        LODWORD(v127[1]) = v11;
        v127[2] = *(_QWORD *)(v101 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v128, (uint64_t)&v130, (uint64_t)&v126, 1, v100);
        *(_OWORD *)&v131[1] = *(_OWORD *)&v129[1];
        v131[0] = v129[0];
        v131[3] = v129[3];
        v128 = &unk_1EA926508;
        memset(v129, 0, sizeof(v129));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v128);
      }
      v102 = v48 - 1;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v128, v114, v11 * (v48 - 1), v11, 0, *(_DWORD *)(v114 + 16));
      v103 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)&v128, (uint64_t)&v130, 111, v103, (const char *)0x6F, 1.0, 1.0);
      v128 = &unk_1EA926508;
      memset(v129, 0, sizeof(v129));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v128);
      v130 = &unk_1EA926508;
      memset(v131, 0, sizeof(v131));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v130);
    }
    v132 = &unk_1EA926508;
    v133 = 0u;
    v134 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v132);
    v135 = &unk_1EA926508;
    v136 = 0u;
    v137 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v135);
    v138 = &unk_1EA926508;
    v139 = 0u;
    v140 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v138);
    v141 = &unk_1EA926508;
    v142 = 0u;
    v143 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v141);
    v104 = v48 <= 0;
    v48 = v102;
  }
  while (!v104);
  if (v107)
  {
    v105 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
    kaldi::CuMatrixBase<float>::AddMatMat<signed char>(v107, v108, 111, v105, (const char *)0x6F, 1.0, 0.0);
  }
  v144 = &unk_1EA926508;
  v145 = 0u;
  v146 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v144);
  v147 = &unk_1EA926508;
  v148 = 0u;
  v149 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v147);
  v150 = &unk_1EA926508;
  v151 = 0u;
  v152 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v150);
  v153 = &unk_1EA926508;
  v154 = 0u;
  v155 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v153);
  v156 = &unk_1EA926508;
  v157 = 0u;
  v158 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v156);
  v159 = &unk_1EA926508;
  v160 = 0u;
  v161 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v159);
  v162 = &unk_1EA926508;
  v163 = 0u;
  v164 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v162);
  v165 = &unk_1EA926508;
  v166 = 0u;
  v167 = 0u;
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v165).n128_u64[0];
  return result;
}

void sub_1DE4A8200(_Unwind_Exception *a1)
{
  STACK[0x220] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x228] = 0u;
  *(_OWORD *)&STACK[0x238] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x220]);
  STACK[0x248] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x250] = 0u;
  *(_OWORD *)&STACK[0x260] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x248]);
  STACK[0x270] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x278] = 0u;
  *(_OWORD *)&STACK[0x288] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x270]);
  STACK[0x298] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x2A0] = 0u;
  *(_OWORD *)&STACK[0x2B0] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x298]);
  STACK[0x2C0] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x2C8] = 0u;
  *(_OWORD *)&STACK[0x2D8] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x2C0]);
  STACK[0x2E8] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x2F0] = 0u;
  *(_OWORD *)&STACK[0x300] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x2E8]);
  STACK[0x310] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x318] = 0u;
  *(_OWORD *)&STACK[0x328] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x310]);
  STACK[0x338] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x340] = 0u;
  *(_OWORD *)&STACK[0x350] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x338]);
  STACK[0x360] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x368] = 0u;
  *(_OWORD *)&STACK[0x378] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x360]);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateBackwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD v9[35];

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateBackwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1413, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating backward buffers for batch ", 38);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 368) + 48 * a2, a3, *(unsigned int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 392) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 416) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 440) + 48 * a2, a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 368) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 392) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 416) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 440) + 48 * a2 + 32) = a4;
}

void sub_1DE4A88F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

double `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BackpropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 144), a2, a3, a4, a5, a6);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v7;
  int v8;
  int v9;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  __int128 v47;
  __int128 v48;
  void *v49;
  __int128 v50;
  __int128 v51;
  void *v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  __int128 v56;
  __int128 v57;
  void *v58;
  __int128 v59;
  __int128 v60;

  if (*(_DWORD *)(a1 + 80) <= (int)a5)
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x40D, "batch_index < ropts_.num_subbatches", a5);
  v7 = *(_DWORD *)(a1 + 96);
  v8 = *(_DWORD *)(a2 + 20);
  if (v8 % v7)
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x411, "batch_size % num_utts == 0", a5);
  v9 = (int)a5;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v58, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1043, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Accumulating gradients for batch id = ", 38);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v58);
  }
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateGradients(a1);
  v14 = *(_QWORD *)(a1 + 272);
  v15 = *(_QWORD *)(a1 + 440) + 48 * v9;
  v16 = *(float *)(a1 + 60);
  *(_DWORD *)(*(_QWORD *)(a1 + 480) + 4 * v9) = v8;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v58, v15, 0, *(_DWORD *)(v15 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v55, v15, 0, *(_DWORD *)(v15 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v52, v15, 0, *(_DWORD *)(v15 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, v9) + 32) = a4;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, v9) + 32) = a4;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, v9) + 24) = a4;
  if (*(_BYTE *)(a1 + 208))
    *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v9) + 32) = a4;
  if (*(_BYTE *)(a1 + 224))
    *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, v9) + 32) = a4;
  v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, v9);
  kaldi::CuMatrixBase<float>::AddMatMat(v17, v15, CblasTrans, a2, (const char *)0x6F, 1.0, v16);
  v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, v9);
  v19 = v8 - v7;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, v15, v7, v8 - v7, 0, *(_DWORD *)(v15 + 16));
  v20 = *(_QWORD *)(a1 + 344) + 48 * v9;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, v20, 0, v8 - v7, 0, *(_DWORD *)(v20 + 16));
  kaldi::CuMatrixBase<float>::AddMatMat(v18, (uint64_t)&v49, CblasTrans, (uint64_t)&v46, (const char *)0x6F, 1.0, v16);
  v46 = &unk_1EA926508;
  v47 = 0u;
  v48 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
  v49 = &unk_1EA926508;
  v50 = 0u;
  v51 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v49);
  v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, v9);
  kaldi::CuVectorBase<float>::AddRowSumMat(v21, v15, 1.0, v16, v22, v23, v24);
  if (*(_BYTE *)(a1 + 208))
  {
    v25 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v9);
    if (!*(_DWORD *)(v25 + 20))
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v26);
    v27 = *(_QWORD *)(v25 + 8);
    v28 = *(_DWORD *)(v25 + 16);
    v29 = *(_QWORD *)(v25 + 32);
    v42 = &unk_1EA926538;
    v43 = v27;
    v45 = v29;
    v44 = v28;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, (uint64_t)&v58, v7, v19, 0, SDWORD2(v59));
    v30 = v14 + 48 * v9;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, v30, 0, v19, 0, *(_DWORD *)(v30 + 16));
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v42, (uint64_t)&v49, 112, (uint64_t)&v46, 111, 1.0, v16);
    v46 = &unk_1EA926508;
    v47 = 0u;
    v48 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
    v49 = &unk_1EA926508;
    v50 = 0u;
    v51 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v49);
    v31 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v9);
    if (*(_DWORD *)(v31 + 20) <= 1u)
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v32);
    v33 = *(_QWORD *)(v31 + 8) + 4 * *(int *)(v31 + 24);
    v34 = *(_DWORD *)(v31 + 16);
    v35 = *(_QWORD *)(v31 + 32);
    v42 = &unk_1EA926538;
    v43 = v33;
    v45 = v35;
    v44 = v34;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, (uint64_t)&v55, v7, v19, 0, SDWORD2(v56));
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, v14 + 48 * v9, 0, v19, 0, *(_DWORD *)(v30 + 16));
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v42, (uint64_t)&v49, 112, (uint64_t)&v46, 111, 1.0, v16);
    v46 = &unk_1EA926508;
    v47 = 0u;
    v48 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
    v49 = &unk_1EA926508;
    v50 = 0u;
    v51 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v49);
    v36 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v9);
    if (*(_DWORD *)(v36 + 20) <= 2u)
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v37);
    v38 = *(_QWORD *)(v36 + 8) + 8 * *(int *)(v36 + 24);
    v39 = *(_DWORD *)(v36 + 16);
    v40 = *(_QWORD *)(v36 + 32);
    v49 = &unk_1EA926538;
    *(_QWORD *)&v50 = v38;
    *(_QWORD *)&v51 = v40;
    *((_QWORD *)&v50 + 1) = v39;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v49, (uint64_t)&v52, 112, v14 + 48 * v9, 111, 1.0, v16);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v41 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, v9);
    kaldi::CuMatrixBase<float>::AddMatMat(v41, *(_QWORD *)(a1 + 368) + 48 * v9, CblasTrans, *(_QWORD *)(a1 + 320) + 48 * v9, (const char *)0x6F, 1.0, v16);
  }
  v52 = &unk_1EA926508;
  v53 = 0u;
  v54 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v52);
  v55 = &unk_1EA926508;
  v56 = 0u;
  v57 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v55);
  v58 = &unk_1EA926508;
  v59 = 0u;
  v60 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v58);
}

void sub_1DE4A8F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,__int128 a24,__int128 a25,void *a26,__int128 a27,__int128 a28,void *a29,__int128 a30,__int128 a31)
{
  a23 = &unk_1EA926508;
  a24 = 0u;
  a25 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a23);
  a26 = &unk_1EA926508;
  a27 = 0u;
  a28 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a26);
  a29 = &unk_1EA926508;
  a30 = 0u;
  a31 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a29);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateGradients(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  _QWORD *v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  _QWORD *v36;
  uint64_t j;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  _QWORD *v44;
  void **v45;
  uint64_t v46;
  int v47;
  _QWORD *v48;
  void *__p[2];
  unsigned __int8 v50;
  _QWORD v51[36];

  if (*(_BYTE *)(a1 + 528))
    return;
  v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1)
    v3 = (v2 + 1);
  else
    v3 = 1;
  if (*(_QWORD *)(a1 + 544) != *(_QWORD *)(a1 + 536))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v51, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1332);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v51, "input_weights_gradient_.size() == 0");
    goto LABEL_58;
  }
  if (*(_QWORD *)(a1 + 568) != *(_QWORD *)(a1 + 560))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v51, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1333);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v51, "recurrent_weights_gradient_.size() == 0");
    goto LABEL_58;
  }
  if (*(_QWORD *)(a1 + 616) != *(_QWORD *)(a1 + 608))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v51, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1334);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v51, "bias_gradient_.size() == 0");
    goto LABEL_58;
  }
  v47 = *(_DWORD *)(a1 + 156);
  if (*(_BYTE *)(a1 + 208) && *(_QWORD *)(a1 + 592) != *(_QWORD *)(a1 + 584))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v51, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1335);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v51, "peephole_weights_gradient_.size() == 0");
    goto LABEL_58;
  }
  if (*(_BYTE *)(a1 + 224) && *(_QWORD *)(a1 + 640) != *(_QWORD *)(a1 + 632))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v51, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1336);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v51, "projection_weights_gradient_.size() == 0");
LABEL_58:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v51);
  }
  v4 = (_QWORD *)(a1 + 560);
  v5 = (_QWORD *)(a1 + 608);
  v48 = (_QWORD *)(a1 + 536);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 536, (int)v3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 560, (int)v3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize(a1 + 608, (int)v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 656), (int)v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 680), (int)v3);
  std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 728), (int)v3);
  v6 = a1 + 12;
  if ((int)v3 >= 1)
  {
    v7 = 0;
    v8 = a1 + 8;
    do
    {
      v9 = operator new();
      kaldi::CuMatrix<float>::CuMatrix(v9, (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v8 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 0, 0, 0);
      v10 = *(_QWORD *)(*v48 + 8 * v7);
      *(_QWORD *)(*v48 + 8 * v7) = v9;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
      v11 = operator new();
      kaldi::CuMatrix<float>::CuMatrix(v11, (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 0, 0, 0);
      v12 = *(_QWORD *)(*v4 + 8 * v7);
      *(_QWORD *)(*v4 + 8 * v7) = v11;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      v13 = (_QWORD *)operator new();
      v14 = (4 * *(_DWORD *)(a1 + 176));
      v13[2] = 0;
      v13[3] = 0;
      *v13 = &unk_1EA92DFD8;
      v13[1] = 0;
      kaldi::CuVector<float>::Resize((uint64_t)v13, v14, 0, v15, v16);
      v17 = *(_QWORD *)(*v5 + 8 * v7);
      *(_QWORD *)(*v5 + 8 * v7) = v13;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      if ((v47 & 0xFFFFFFFE) == 2)
      {
        kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 656) + 48 * v7, (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v8 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 1u, 0);
        kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 680) + 48 * v7, (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 1u, 0);
        kaldi::CuVector<float>::Resize(*(_QWORD *)(a1 + 728) + 32 * v7, (4 * *(_DWORD *)(a1 + 176)), 1u, v18, v19);
        if (*(_DWORD *)(a1 + 156) == 3)
        {
          kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 656) + 48 * v7, v20, v21, v22, v23, 1.0);
          kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 680) + 48 * v7, v24, v25, v26, v27, 1.0);
          kaldi::CuVectorBase<float>::Set(*(_QWORD *)(a1 + 728) + 32 * v7, 1.0);
        }
      }
      ++v7;
    }
    while (v7 != v3);
  }
  if (*(_BYTE *)(a1 + 208))
  {
    v28 = (_QWORD *)(a1 + 584);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 584, (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 704), (int)v3);
    if ((int)v3 >= 1)
    {
      for (i = 0; i != v3; ++i)
      {
        v30 = operator new();
        kaldi::CuMatrix<float>::CuMatrix(v30, 3, *(unsigned int *)(a1 + 176), 0, 0, 0);
        v31 = *(_QWORD *)(*v28 + 8 * i);
        *(_QWORD *)(*v28 + 8 * i) = v30;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
        if ((v47 & 0xFFFFFFFE) == 2)
        {
          kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 704) + 48 * i, 3, *(unsigned int *)(a1 + 176), 1u, 0);
          if (*(_DWORD *)(a1 + 156) == 3)
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 704) + 48 * i, v32, v33, v34, v35, 1.0);
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v36 = (_QWORD *)(a1 + 632);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 632, (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 752), (int)v3);
    if ((int)v3 >= 1)
    {
      for (j = 0; j != v3; ++j)
      {
        v38 = operator new();
        kaldi::CuMatrix<float>::CuMatrix(v38, *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), *(unsigned int *)(a1 + 176), 0, 0, 0);
        v39 = *(_QWORD *)(*v36 + 8 * j);
        *(_QWORD *)(*v36 + 8 * j) = v38;
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
        if ((v47 & 0xFFFFFFFE) == 2)
        {
          kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 752) + 48 * j, *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), *(unsigned int *)(a1 + 176), 1u, 0);
          if (*(_DWORD *)(a1 + 156) == 3)
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 752) + 48 * j, v40, v41, v42, v43, 1.0);
        }
      }
    }
  }
  *(_BYTE *)(a1 + 528) = 1;
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v51, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1391, 2);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Allocated memory for the gradients: ", 36);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 272))(__p, a1);
    if ((v50 & 0x80u) == 0)
      v45 = __p;
    else
      v45 = (void **)__p[0];
    if ((v50 & 0x80u) == 0)
      v46 = v50;
    else
      v46 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
    if ((char)v50 < 0)
      operator delete(__p[0]);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v51);
  }
}

void sub_1DE4A97BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradients(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradients((uint64_t)a1 + *(_QWORD *)(*a1 - 248), a2, a3, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::UpdateWeights()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1116);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::UpdateWeights()
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::UpdateWeights();
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  const char *v12;

  v7 = *(_QWORD *)(a1 + 104);
  v8 = (_QWORD *)(a1 + 104);
  if (v7 == *(_QWORD *)(a1 + 112))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 104), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 128), *(int *)(a1 + 80));
    v7 = *(_QWORD *)(a1 + 104);
  }
  kaldi::CuVector<float>::Resize(v7 + 32 * a3, *(unsigned int *)(a2 + 16), 1u, a4, a5);
  return kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)(*v8 + 32 * a3), a2, v10, v11, v12);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(a1, a2);
  *((_WORD *)a1 + 120) = 0;
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetTrainOptions(_QWORD *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent *v2;

  v2 = (kaldi::nnet1::RecurrentBaseComponent *)((char *)a1 + *(_QWORD *)(*a1 - 280));
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(v2, a2);
  *((_WORD *)v2 + 120) = 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::HistoryStateSize(uint64_t a1)
{
  return (*(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12) + *(_DWORD *)(a1 + 176));
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetHistoryState(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;

  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6AE, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  v8 = *(_QWORD *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(v8 + 20), *(unsigned int *)(v8 + 16), 1u, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, *(_QWORD *)(a1 + 8) + 48 * a3, 111, v9, v10);
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD v18[4];

  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (int)a4)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6B5, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  if ((a3 & 0x80000000) != 0
    || (v7 = *(_QWORD *)(a1 + 8) + 48 * a4, *(_DWORD *)(v7 + 20) <= (signed int)a3))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6B6, "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", a5);
  }
  v9 = a4;
  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(v7 + 16), 1u, a4, a5);
  v13 = *(_QWORD *)(a1 + 8) + 48 * v9;
  if (*(_DWORD *)(v13 + 20) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v12);
  v14 = *(_QWORD *)(v13 + 8) + 4 * (int)(*(_DWORD *)(v13 + 24) * a3);
  v15 = *(_DWORD *)(v13 + 16);
  v16 = *(_QWORD *)(v13 + 32);
  v18[0] = &unk_1EA926538;
  v18[1] = v14;
  v18[3] = v16;
  v18[2] = v15;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v18, v10, v11, v12);
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  const char *v7;
  unsigned int *v8;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3)
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6D5, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v7);
  v8 = (unsigned int *)(*(_QWORD *)(a1 + 8) + 48 * a3);
  if (*(_DWORD *)(a2 + 20) != v8[5])
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6D6, "history.NumRows() == history_state_[batch_index].NumRows()", v7);
  if (*(_DWORD *)(a2 + 16) != v8[4])
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6D7, "history.NumCols() == history_state_[batch_index].NumCols()", v7);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v8, a2, 111, v6, v7);
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetHistoryState(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4)
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6DE, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v10);
  if (a3 < 0 || (v11 = *(_QWORD *)(a1 + 8) + 48 * a4, *(_DWORD *)(v11 + 20) <= a3))
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6DF, "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", v10);
  v12 = *(_DWORD *)(a2 + 16);
  if (v12 != *(_DWORD *)(v11 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6E0, "history.Dim() == history_state_[batch_index].NumCols()", v10);
  v13 = *(_QWORD *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * a3;
  v14 = *(_QWORD *)(v11 + 32);
  v16[0] = &unk_1EA926538;
  v16[1] = v13;
  v16[3] = v14;
  v16[2] = v12;
  return kaldi::CuVectorBase<float>::CopyFromVec(v16, a2, v8, v9, v10);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ResetHistoryState(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  const char *v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void **v17;
  uint64_t v18;
  void *__p[2];
  unsigned __int8 v21;
  _QWORD v22[35];
  _QWORD v23[11];
  char v24;
  uint64_t v25;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4)
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6E7, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v8);
  if (a2[1] != *(_DWORD *)(*(_QWORD *)(a1 + 8) + 48 * a4 + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6E8, "sequence_idx.size() == history_state_[batch_index].NumRows()", v8);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48 * a4 + 32) = a3;
  if (a2[1])
  {
    v10 = 0;
    do
    {
      if (((*(_QWORD *)(*a2 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
      {
        v11 = *(_QWORD *)(a1 + 8) + 48 * a4;
        if (v10 >= *(unsigned int *)(v11 + 20))
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v9);
        v12 = *(_QWORD *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * (int)v10;
        v13 = *(_DWORD *)(v11 + 16);
        v14 = *(_QWORD *)(v11 + 32);
        v22[0] = &unk_1EA926538;
        v22[1] = v12;
        v22[3] = v14;
        v22[2] = v13;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v22);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          v15 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
        }
      }
      ++v10;
    }
    while (a2[1] > v10);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22, "ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1779, 3);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Reset previous states for utts ", 31);
    std::stringbuf::str();
    if ((v21 & 0x80u) == 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    if ((v21 & 0x80u) == 0)
      v18 = v21;
    else
      v18 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    if ((char)v21 < 0)
      operator delete(__p[0]);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22);
  }
  v23[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v23 + *(_QWORD *)(v23[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v23[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v24 < 0)
    operator delete((void *)v23[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v25);
}

void sub_1DE4A9F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0)
    operator delete(__p);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ResetHistoryState(_QWORD *a1)
{
  uint64_t i;

  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  for (i = a1[1]; i != a1[2]; i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 152) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(_BYTE *)(result + 528) = 0;
  return result;
}

_QWORD *`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::SetGradientNormalization(_QWORD *result, int a2, float a3)
{
  float *v3;

  v3 = (float *)((char *)result + *(_QWORD *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((_BYTE *)v3 + 528) = 0;
  return result;
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients(uint64_t a1, unsigned int a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;

  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a2)
    kaldi::KaldiAssertFailure_((kaldi *)"NormalizeGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x59A, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a6);
  v8 = a3;
  v9 = *(_DWORD *)(a1 + 156);
  if (v9 == 1)
  {
    if (a3 > 0.0)
    {
      if (*(_BYTE *)(a1 + 84))
        v8 = (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * a2) * a3;
      v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v18, v8);
      v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v19, v8);
      v20 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v20, v8);
      if (*(_BYTE *)(a1 + 208))
      {
        v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v21, v8);
      }
      if (*(_BYTE *)(a1 + 224))
      {
        v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v22, v8);
      }
    }
  }
  else if (v9 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v10, *(_QWORD *)(a1 + 656) + 48 * a2, v8);
      v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v11, *(_QWORD *)(a1 + 680) + 48 * a2, v8);
      v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v12, *(_QWORD *)(a1 + 728) + 32 * a2, v8, v13, v14, v15);
      if (*(_BYTE *)(a1 + 208))
      {
        v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v16, *(_QWORD *)(a1 + 704) + 48 * a2, v8);
      }
      if (*(_BYTE *)(a1 + 224))
      {
        v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v17, *(_QWORD *)(a1 + 752) + 48 * a2, v8);
      }
    }
  }
  else if (a3 > 0.0 && v9 == 2)
  {
    v23 = a2;
    if (*(_BYTE *)(a1 + 84))
      v8 = (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * a2) * a3;
    v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v24, (unsigned int *)(*(_QWORD *)(a1 + 656) + 48 * v23), v8, v25, v26, v27);
    v28 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v28, (unsigned int *)(*(_QWORD *)(a1 + 680) + 48 * v23), v8, v29, v30, v31);
    v32 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v32, (_DWORD *)(*(_QWORD *)(a1 + 728) + 32 * v23), v33, v34, v35, v8);
    if (*(_BYTE *)(a1 + 208))
    {
      v36 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v36, (unsigned int *)(*(_QWORD *)(a1 + 704) + 48 * v23), v8, v37, v38, v39);
    }
    if (*(_BYTE *)(a1 + 224))
    {
      v40 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v40, (unsigned int *)(*(_QWORD *)(a1 + 752) + 48 * v23), v8, v41, v42, v43);
    }
  }
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients((uint64_t)a1 + *(_QWORD *)(*a1 - 264), a2, a6, a3, a4, a5);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  int v31;

  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::AllocateGradients(a1);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
  *a3 = result;
  if (*(_QWORD *)(a1 + 544) == *(_QWORD *)(a1 + 536) || *(_QWORD *)(a1 + 568) == *(_QWORD *)(a1 + 560))
  {
    v31 = 0;
    goto LABEL_11;
  }
  if (*(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80) == 1)
    v7 = 0;
  else
    v7 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80);
  v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeightsGradient(a1, v7);
  v13 = kaldi::CuMatrixBase<float>::CountZeros(v8, v9, v10, v11, v12);
  v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeightsGradient(a1, v7);
  v19 = kaldi::CuMatrixBase<float>::CountZeros(v14, v15, v16, v17, v18) + v13;
  v20 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::BiasGradient(a1, v7);
  result = kaldi::CuVectorBase<float>::CountZeros(v20);
  *a2 = v19 + result;
  if (*(_BYTE *)(a1 + 208))
  {
    v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeightsGradient(a1, v7);
    result = kaldi::CuMatrixBase<float>::CountZeros(v21, v22, v23, v24, v25);
    *a2 += result;
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v26 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeightsGradient(a1, v7);
    result = kaldi::CuMatrixBase<float>::CountZeros(v26, v27, v28, v29, v30);
    v31 = *a2 + result;
LABEL_11:
    *a2 = v31;
  }
  return result;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr(_QWORD *a1, _DWORD *a2, _DWORD *a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr((uint64_t)a1 + *(_QWORD *)(*a1 - 56), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1532);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs()
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs();
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetInternalMemory(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, *(_QWORD *)(a1 + 272) + 48 * a3, 111, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::EnsureBuffers(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  if (!*(_BYTE *)(a1 + 240))
  {
    v2 = *(int *)(a1 + 80);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 8), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 272), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 296), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 320), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 344), v2);
    if ((int)v2 >= 1)
    {
      v3 = 0;
      do
      {
        kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 8) + v3, *(unsigned int *)(a1 + 96), (*(_DWORD *)(a1 + 12 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + *(_DWORD *)(a1 + 176)), 0, 0);
        v3 += 48;
      }
      while (48 * v2 != v3);
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 480), v2);
    *(_BYTE *)(a1 + 240) = 1;
  }
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Check(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  float result;
  unsigned int *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned int *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unsigned int *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD v32[34];

  v2 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumRows(v2) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1642);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Input weights #rows = ", 22);
    v9 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumRows(v9);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; expecting ", 12);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumCols(v3) != *(_DWORD *)(a1
                                                                                 + *(_QWORD *)(*(_QWORD *)a1 - 24)
                                                                                 + 8))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1646);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Input weights #columns = ", 25);
    v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InputWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumCols(v12);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"; expecting ", 12);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, " (same as input dim)");
    goto LABEL_28;
  }
  v4 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumRows(v4) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1650);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Recurrent weights #rows = ", 26);
    v15 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumRows(v15);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"; expecting ", 12);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  v5 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumCols(v5) != *(_DWORD *)(a1
                                                                                 + *(_QWORD *)(*(_QWORD *)a1 - 24)
                                                                                 + 12))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1654);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Recurrent weights #columns = ", 29);
    v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::RecurrentWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumCols(v18);
    v19 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"; expecting ", 12);
    v20 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, " (same as output dim)");
    goto LABEL_28;
  }
  if (*(_BYTE *)(a1 + 208))
  {
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1) + 20) != 3)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1659);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Peephole weights #rows = ", 25);
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
      v23 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"; expecting ", 12);
      std::ostream::operator<<();
      goto LABEL_28;
    }
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1) + 16) != *(_DWORD *)(a1 + 176))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1662);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Peephole weights #columns = ", 28);
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::PeepholeWeights(a1);
      v24 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"; expecting ", 12);
      v25 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, " (same as #cells)");
      goto LABEL_28;
    }
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1) + 16) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1667);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Bias dim = ", 11);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::Bias(a1);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"; expecting ", 12);
    v22 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v6 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
    if (kaldi::QuantizedMatrixBase<short>::NumRows(v6) == *(_DWORD *)(a1
                                                                                   + *(_QWORD *)(*(_QWORD *)a1 - 24)
                                                                                   + 12))
    {
      v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
      if (kaldi::QuantizedMatrixBase<short>::NumCols(v7) == *(_DWORD *)(a1 + 176))
        goto LABEL_12;
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1675);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Projection weights #columns = ", 30);
      v29 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
      kaldi::QuantizedMatrixBase<short>::NumCols(v29);
      v30 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"; expecting ", 12);
      v31 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, " (same as #cells)");
    }
    else
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1671);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Projection weights #rows = ", 27);
      v26 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::ProjectionWeights(a1);
      kaldi::QuantizedMatrixBase<short>::NumRows(v26);
      v27 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"; expecting ", 12);
      v28 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v28, " (same as output dim)");
    }
LABEL_28:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
  }
LABEL_12:
  if (*(float *)(a1 + 464) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1681);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"learn_rate_coeff_ must not be negative; found: ",
      47);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 468) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1684);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"projection_learn_rate_coeff_ must not be negative; found: ",
      58);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 472) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1688);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_norm_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 152) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1691);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_grad_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  result = *(float *)(a1 + 476);
  if (result < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1694);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_cell_values_ must not be negative; found: ",
      46);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  return result;
}

void sub_1DE4AACB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)(a1 + 856) = a2;
  *(_DWORD *)(a1 + 860) = a3;
  *(_WORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 896) = &off_1EA9284D0;
  *(_OWORD *)(a1 + 904) = xmmword_1DEC3D450;
  *(_QWORD *)(a1 + 920) = 0x3BF800000;
  *(_DWORD *)(a1 + 928) = 1;
  *(_WORD *)(a1 + 932) = 0;
  *(_BYTE *)(a1 + 934) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &unk_1EA927930;
  *(_DWORD *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 56) = xmmword_1DEC3D450;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)(a1 + 48) = &off_1EA92B868;
  *(_QWORD *)(a1 + 88) = &unk_1EA92B888;
  *(_QWORD *)(a1 + 96) = 0x100000001;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)a1 = &off_1EA927228;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 848) = &off_1EA927518;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = &unk_1EA9273B8;
  *(_QWORD *)(a1 + 168) = &unk_1EA9273E0;
  *(_DWORD *)(a1 + 176) = a3;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_WORD *)(a1 + 208) = 1;
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_WORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0x3DCCCCCD3F800000;
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 513) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 536);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 257);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 258);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 536);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 544) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 262);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "InputWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 263);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "input_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 560);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 268);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 269);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 560);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 568) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 273);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "RecurrentWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 274);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "recurrent_weights_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 608);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 279);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 280);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *(_QWORD *)(a1 + 608);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 616) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 284);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_.size() > ib");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "BiasGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 285);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_gradient_[ib]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 208))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 290);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 584);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 291);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 292);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 208))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 296);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_peepholes_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 584);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 592) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 297);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "PeepholeWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 298);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "peephole_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 224))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 303);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 632);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 304);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 305);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  if (!*(_BYTE *)(a1 + 224))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 309);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "has_projection_layer_");
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 632);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 640) - v2) >> 3))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 310);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_.size() > ib");
    goto LABEL_8;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "ProjectionWeightsGradient", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 311);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "projection_weights_gradient_[ib]");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  char v8;
  const char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v60;
  uint64_t v61;
  uint64_t v62[35];

  v4 = a2 + *(_QWORD *)(*(_QWORD *)a2 - 24);
  *(_QWORD *)(a1 + 848) = off_1EA92D6D8;
  v5 = *(_QWORD *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(_QWORD *)(a1 + 856) = v5;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 872), *(const void **)(v4 + 24), *(_QWORD *)(v4 + 32), (uint64_t)(*(_QWORD *)(v4 + 32) - *(_QWORD *)(v4 + 24)) >> 3);
  *(_QWORD *)(a1 + 848) = off_1EA929750;
  *(_QWORD *)(a1 + 896) = &off_1EA9284D0;
  v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1EA91BF98, a2);
  *(_QWORD *)(a1 + 160) = &unk_1EA9273B8;
  *(_QWORD *)(a1 + 168) = &unk_1EA9273E0;
  *(_QWORD *)a1 = &off_1EA927228;
  *(_QWORD *)(a1 + 848) = &off_1EA927518;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = 0;
  v7 = *(_BYTE *)(a2 + 240);
  v8 = *(_BYTE *)(a2 + 241);
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 240) = v7;
  *(_BYTE *)(a1 + 241) = v8;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 248), *(_QWORD *)(a2 + 248), *(_QWORD *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 256) - *(_QWORD *)(a2 + 248)) >> 4));
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 272), *(_QWORD *)(a2 + 272), *(_QWORD *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 4));
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 296), *(_QWORD *)(a2 + 296), *(_QWORD *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 4));
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 320), *(_QWORD *)(a2 + 320), *(_QWORD *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 4));
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 344), *(_QWORD *)(a2 + 344), *(_QWORD *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344)) >> 4));
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 368), *(_QWORD *)(a2 + 368), *(_QWORD *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 376) - *(_QWORD *)(a2 + 368)) >> 4));
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 392), *(_QWORD *)(a2 + 392), *(_QWORD *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 400) - *(_QWORD *)(a2 + 392)) >> 4));
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 416), *(_QWORD *)(a2 + 416), *(_QWORD *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 424) - *(_QWORD *)(a2 + 416)) >> 4));
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 440), *(_QWORD *)(a2 + 440), *(_QWORD *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 448) - *(_QWORD *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 480), *(const void **)(a2 + 480), *(_QWORD *)(a2 + 488), (uint64_t)(*(_QWORD *)(a2 + 488) - *(_QWORD *)(a2 + 480)) >> 2);
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 504), *(const void **)(a2 + 504), *(_QWORD *)(a2 + 512), (uint64_t)(*(_QWORD *)(a2 + 512) - *(_QWORD *)(a2 + 504)) >> 2);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 536), (uint64_t)(*(_QWORD *)(a2 + 544) - *(_QWORD *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 560), (uint64_t)(*(_QWORD *)(a2 + 568) - *(_QWORD *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 584), (uint64_t)(*(_QWORD *)(a2 + 592) - *(_QWORD *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 608), (uint64_t)(*(_QWORD *)(a2 + 616) - *(_QWORD *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 632), (uint64_t)(*(_QWORD *)(a2 + 640) - *(_QWORD *)(a2 + 632)) >> 3);
  *(_QWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 656), *(_QWORD *)(a2 + 656), *(_QWORD *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 664) - *(_QWORD *)(a2 + 656)) >> 4));
  *(_QWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 680), *(_QWORD *)(a2 + 680), *(_QWORD *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 688) - *(_QWORD *)(a2 + 680)) >> 4));
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 704), *(_QWORD *)(a2 + 704), *(_QWORD *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 712) - *(_QWORD *)(a2 + 704)) >> 4));
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 728), *(_QWORD *)(a2 + 728), *(_QWORD *)(a2 + 736), (uint64_t)(*(_QWORD *)(a2 + 736) - *(_QWORD *)(a2 + 728)) >> 5);
  *(_QWORD *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 752), *(_QWORD *)(a2 + 752), *(_QWORD *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 760) - *(_QWORD *)(a2 + 752)) >> 4));
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v62, "LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 151);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v62);
  }
  v10 = *(int **)(a2 + 184);
  if (v10)
  {
    kaldi::NewCuSubOrMat<short>(v10, v62);
    v11 = v62[0];
    v62[0] = 0;
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), v11);
    v12 = v62[0];
    v62[0] = 0;
    if (v12)
    {
      v13 = kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v12);
      MEMORY[0x1DF0ED014](v13, 0x10D0C4068EB0291);
    }
  }
  v14 = *(int **)(a2 + 192);
  if (v14)
  {
    kaldi::NewCuSubOrMat<short>(v14, v62);
    v15 = v62[0];
    v62[0] = 0;
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), v15);
    v16 = v62[0];
    v62[0] = 0;
    if (v16)
    {
      v17 = kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v16);
      MEMORY[0x1DF0ED014](v17, 0x10D0C4068EB0291);
    }
  }
  v18 = *(_QWORD **)(a2 + 200);
  if (v18)
  {
    kaldi::NewCuSubOrVec<float>(v18, 0, v62);
    v19 = v62[0];
    v62[0] = 0;
    v20 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v19;
    if (v20)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
      v21 = v62[0];
      v62[0] = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    }
  }
  v22 = *(_QWORD *)(a2 + 216);
  if (v22)
  {
    kaldi::NewCuSubOrMat<float>(v22, 0, v62);
    v23 = v62[0];
    v62[0] = 0;
    v24 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v23;
    if (v24)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
      v25 = v62[0];
      v62[0] = 0;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
    }
  }
  v26 = *(int **)(a2 + 232);
  if (v26)
  {
    kaldi::NewCuSubOrMat<short>(v26, v62);
    v27 = v62[0];
    v62[0] = 0;
    std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), v27);
    v28 = v62[0];
    v62[0] = 0;
    if (v28)
    {
      v29 = kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v28);
      MEMORY[0x1DF0ED014](v29, 0x10D0C4068EB0291);
    }
  }
  v30 = *(_QWORD *)(a1 + 544);
  v31 = *(_QWORD *)(a1 + 536);
  v32 = (v30 - v31) >> 3;
  if (v32 != (uint64_t)(*(_QWORD *)(a1 + 568) - *(_QWORD *)(a1 + 560)) >> 3)
  {
    v60 = "input_weights_gradient_.size() == recurrent_weights_gradient_.size()";
    v61 = 162;
    goto LABEL_63;
  }
  if (v32 != (uint64_t)(*(_QWORD *)(a1 + 616) - *(_QWORD *)(a1 + 608)) >> 3)
  {
    v60 = "input_weights_gradient_.size() == bias_gradient_.size()";
    v61 = 163;
    goto LABEL_63;
  }
  if (*(_BYTE *)(a1 + 208) && v32 != (uint64_t)(*(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584)) >> 3)
  {
    v60 = "input_weights_gradient_.size() == peephole_weights_gradient_.size()";
    v61 = 165;
    goto LABEL_63;
  }
  if (*(_BYTE *)(a1 + 224) && v32 != (uint64_t)(*(_QWORD *)(a1 + 640) - *(_QWORD *)(a1 + 632)) >> 3)
  {
    v60 = "input_weights_gradient_.size() == projection_weights_gradient_.size()";
    v61 = 168;
LABEL_63:
    kaldi::KaldiAssertFailure_((kaldi *)"LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)v61, v60, v9);
  }
  if (v30 != v31)
  {
    v33 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a2 + 536) + 8 * v33))
      {
        v34 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a2, v33);
        kaldi::NewCuSubOrMat<float>(v34, 0, v62);
        v35 = *(_QWORD *)(a1 + 536);
        v36 = v62[0];
        v62[0] = 0;
        v37 = *(_QWORD *)(v35 + 8 * v33);
        *(_QWORD *)(v35 + 8 * v33) = v36;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
        v38 = v62[0];
        v62[0] = 0;
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 560) + 8 * v33))
      {
        v39 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a2, v33);
        kaldi::NewCuSubOrMat<float>(v39, 0, v62);
        v40 = *(_QWORD *)(a1 + 560);
        v41 = v62[0];
        v62[0] = 0;
        v42 = *(_QWORD *)(v40 + 8 * v33);
        *(_QWORD *)(v40 + 8 * v33) = v41;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
        v43 = v62[0];
        v62[0] = 0;
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 608) + 8 * v33))
      {
        v44 = (_QWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a2, v33);
        kaldi::NewCuSubOrVec<float>(v44, 0, v62);
        v45 = *(_QWORD *)(a1 + 608);
        v46 = v62[0];
        v62[0] = 0;
        v47 = *(_QWORD *)(v45 + 8 * v33);
        *(_QWORD *)(v45 + 8 * v33) = v46;
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
        v48 = v62[0];
        v62[0] = 0;
        if (v48)
          (*(void (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
      }
      if (*(_BYTE *)(a1 + 208) && *(_QWORD *)(*(_QWORD *)(a2 + 584) + 8 * v33))
      {
        v49 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a2, v33);
        kaldi::NewCuSubOrMat<float>(v49, 0, v62);
        v50 = *(_QWORD *)(a1 + 584);
        v51 = v62[0];
        v62[0] = 0;
        v52 = *(_QWORD *)(v50 + 8 * v33);
        *(_QWORD *)(v50 + 8 * v33) = v51;
        if (v52)
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52);
        v53 = v62[0];
        v62[0] = 0;
        if (v53)
          (*(void (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53);
      }
      if (*(_BYTE *)(a1 + 224) && *(_QWORD *)(*(_QWORD *)(a2 + 632) + 8 * v33))
      {
        v54 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a2, v33);
        kaldi::NewCuSubOrMat<float>(v54, 0, v62);
        v55 = *(_QWORD *)(a1 + 632);
        v56 = v62[0];
        v62[0] = 0;
        v57 = *(_QWORD *)(v55 + 8 * v33);
        *(_QWORD *)(v55 + 8 * v33) = v56;
        if (v57)
          (*(void (**)(uint64_t))(*(_QWORD *)v57 + 24))(v57);
        v58 = v62[0];
        v62[0] = 0;
        if (v58)
          (*(void (**)(uint64_t))(*(_QWORD *)v58 + 24))(v58);
      }
      ++v33;
    }
    while (v33 < (uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 3);
  }
  if (*(_QWORD *)(a2 + 784) != *(_QWORD *)(a2 + 776))
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  return a1;
}

void sub_1DE4ABBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,uint64_t a30)
{
  _QWORD *v30;
  void **v31;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v31);
  a30 = a10;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a11;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a14;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  v33 = *a15;
  if (*a15)
  {
    v30[64] = v33;
    operator delete(v33);
  }
  v34 = *a16;
  if (*a16)
  {
    v30[61] = v34;
    operator delete(v34);
  }
  a30 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a23;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a24;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  a30 = a20;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a27, 0);
  v35 = v30[27];
  v30[27] = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
  v36 = v30[25];
  v30[25] = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a28, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a29, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a21);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a22);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v30, (uint64_t *)&off_1EA91BF98);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v30 + 106));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = a2[3];
  *(_QWORD *)(a1 + 160) = &unk_1EA9273B8;
  v5 = a1 + 160;
  *(_QWORD *)(a1 + 168) = &unk_1EA9273E0;
  v6 = a1 + 168;
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 776));
  v11 = (void **)(v5 + 592);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 568);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 544);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 520);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 496);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 472);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 448);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 424);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 400);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(v5 + 376);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v7 = *(void **)(v5 + 344);
  if (v7)
  {
    *(_QWORD *)(a1 + 512) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 480);
  if (v8)
  {
    *(_QWORD *)(a1 + 488) = v8;
    operator delete(v8);
  }
  v11 = (void **)(a1 + 440);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 416);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 392);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 368);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 344);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 320);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 296);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 272);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), 0);
  v9 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  v10 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), 0);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v6);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v5);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, a2 + 1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(uint64_t a1)
{
  uint64_t v2;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v2 + 848));
  return a1;
}

void `non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(uint64_t a1)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 688));
}

{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(a1 + 680));
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(a1 - 160);
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(a1 - 168);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(_QWORD *a1)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 848));
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::~LstmComponent(uint64_t a1)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 848));
  JUMPOUT(0x1DF0ED014);
}

char *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Copy(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_1DE4AC23C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

char *`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Copy(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Copy((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

char *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent<kaldi::QuantizedMatrix<short>>((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_1DE4AC2BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::LstmComponent<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  char v8;
  const char *v9;
  int *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v54;
  uint64_t v55;
  uint64_t v56[35];

  v4 = a2 + *(_QWORD *)(*(_QWORD *)a2 - 24);
  *(_QWORD *)(a1 + 848) = off_1EA92D6D8;
  v5 = *(_QWORD *)(v4 + 8);
  *(_WORD *)(a1 + 864) = *(_WORD *)(v4 + 16);
  *(_QWORD *)(a1 + 856) = v5;
  *(_QWORD *)(a1 + 872) = 0;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 872), *(const void **)(v4 + 24), *(_QWORD *)(v4 + 32), (uint64_t)(*(_QWORD *)(v4 + 32) - *(_QWORD *)(v4 + 24)) >> 3);
  *(_QWORD *)(a1 + 848) = off_1EA929750;
  *(_QWORD *)(a1 + 896) = &off_1EA9284D0;
  v6 = *(_OWORD *)(v4 + 56);
  *(_OWORD *)(a1 + 919) = *(_OWORD *)(v4 + 71);
  *(_OWORD *)(a1 + 904) = v6;
  kaldi::nnet1::RecurrentBaseComponent::RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)a1, (const kaldi::nnet1::RecurrentBaseComponent *)&off_1EA91BF78, a2);
  *(_QWORD *)(a1 + 160) = &unk_1EA926F98;
  *(_QWORD *)(a1 + 168) = &unk_1EA926FC0;
  *(_QWORD *)a1 = &off_1EA926E08;
  *(_QWORD *)(a1 + 848) = &off_1EA9270F8;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = 0;
  v7 = *(_BYTE *)(a2 + 240);
  v8 = *(_BYTE *)(a2 + 241);
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 240) = v7;
  *(_BYTE *)(a1 + 241) = v8;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 248), *(_QWORD *)(a2 + 248), *(_QWORD *)(a2 + 256), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 256) - *(_QWORD *)(a2 + 248)) >> 4));
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 272), *(_QWORD *)(a2 + 272), *(_QWORD *)(a2 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 4));
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 296), *(_QWORD *)(a2 + 296), *(_QWORD *)(a2 + 304), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 304) - *(_QWORD *)(a2 + 296)) >> 4));
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 320), *(_QWORD *)(a2 + 320), *(_QWORD *)(a2 + 328), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 4));
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 344), *(_QWORD *)(a2 + 344), *(_QWORD *)(a2 + 352), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 352) - *(_QWORD *)(a2 + 344)) >> 4));
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 368), *(_QWORD *)(a2 + 368), *(_QWORD *)(a2 + 376), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 376) - *(_QWORD *)(a2 + 368)) >> 4));
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 392), *(_QWORD *)(a2 + 392), *(_QWORD *)(a2 + 400), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 400) - *(_QWORD *)(a2 + 392)) >> 4));
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 416), *(_QWORD *)(a2 + 416), *(_QWORD *)(a2 + 424), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 424) - *(_QWORD *)(a2 + 416)) >> 4));
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 440), *(_QWORD *)(a2 + 440), *(_QWORD *)(a2 + 448), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 448) - *(_QWORD *)(a2 + 440)) >> 4));
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 480), *(const void **)(a2 + 480), *(_QWORD *)(a2 + 488), (uint64_t)(*(_QWORD *)(a2 + 488) - *(_QWORD *)(a2 + 480)) >> 2);
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 504), *(const void **)(a2 + 504), *(_QWORD *)(a2 + 512), (uint64_t)(*(_QWORD *)(a2 + 512) - *(_QWORD *)(a2 + 504)) >> 2);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 536), (uint64_t)(*(_QWORD *)(a2 + 544) - *(_QWORD *)(a2 + 536)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 560), (uint64_t)(*(_QWORD *)(a2 + 568) - *(_QWORD *)(a2 + 560)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 584), (uint64_t)(*(_QWORD *)(a2 + 592) - *(_QWORD *)(a2 + 584)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)(a1 + 608), (uint64_t)(*(_QWORD *)(a2 + 616) - *(_QWORD *)(a2 + 608)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)(a1 + 632), (uint64_t)(*(_QWORD *)(a2 + 640) - *(_QWORD *)(a2 + 632)) >> 3);
  *(_QWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 656), *(_QWORD *)(a2 + 656), *(_QWORD *)(a2 + 664), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 664) - *(_QWORD *)(a2 + 656)) >> 4));
  *(_QWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 680) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 680), *(_QWORD *)(a2 + 680), *(_QWORD *)(a2 + 688), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 688) - *(_QWORD *)(a2 + 680)) >> 4));
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 704), *(_QWORD *)(a2 + 704), *(_QWORD *)(a2 + 712), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 712) - *(_QWORD *)(a2 + 704)) >> 4));
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)(a1 + 728), *(_QWORD *)(a2 + 728), *(_QWORD *)(a2 + 736), (uint64_t)(*(_QWORD *)(a2 + 736) - *(_QWORD *)(a2 + 728)) >> 5);
  *(_QWORD *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 752), *(_QWORD *)(a2 + 752), *(_QWORD *)(a2 + 760), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 760) - *(_QWORD *)(a2 + 752)) >> 4));
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  if (*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v56, "LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 248);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v56);
  }
  v10 = *(int **)(a2 + 184);
  if (v10)
  {
    v11 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix<short>(v11, v10);
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), v11);
  }
  v12 = *(int **)(a2 + 192);
  if (v12)
  {
    v13 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix<short>(v13, v12);
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), v13);
  }
  v14 = *(_QWORD **)(a2 + 200);
  if (v14)
  {
    kaldi::NewCuSubOrVec<float>(v14, 0, v56);
    v15 = v56[0];
    v56[0] = 0;
    v16 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v15;
    if (v16)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
      v17 = v56[0];
      v56[0] = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    }
  }
  v18 = *(_QWORD *)(a2 + 216);
  if (v18)
  {
    kaldi::NewCuSubOrMat<float>(v18, 0, v56);
    v19 = v56[0];
    v56[0] = 0;
    v20 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v19;
    if (v20)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
      v21 = v56[0];
      v56[0] = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
    }
  }
  v22 = *(int **)(a2 + 232);
  if (v22)
  {
    v23 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix<short>(v23, v22);
    std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), v23);
  }
  v24 = *(_QWORD *)(a1 + 544);
  v25 = *(_QWORD *)(a1 + 536);
  v26 = (v24 - v25) >> 3;
  if (v26 != (uint64_t)(*(_QWORD *)(a1 + 568) - *(_QWORD *)(a1 + 560)) >> 3)
  {
    v54 = "input_weights_gradient_.size() == recurrent_weights_gradient_.size()";
    v55 = 259;
    goto LABEL_60;
  }
  if (v26 != (uint64_t)(*(_QWORD *)(a1 + 616) - *(_QWORD *)(a1 + 608)) >> 3)
  {
    v54 = "input_weights_gradient_.size() == bias_gradient_.size()";
    v55 = 260;
    goto LABEL_60;
  }
  if (*(_BYTE *)(a1 + 208) && v26 != (uint64_t)(*(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584)) >> 3)
  {
    v54 = "input_weights_gradient_.size() == peephole_weights_gradient_.size()";
    v55 = 262;
    goto LABEL_60;
  }
  if (*(_BYTE *)(a1 + 224) && v26 != (uint64_t)(*(_QWORD *)(a1 + 640) - *(_QWORD *)(a1 + 632)) >> 3)
  {
    v54 = "input_weights_gradient_.size() == projection_weights_gradient_.size()";
    v55 = 265;
LABEL_60:
    kaldi::KaldiAssertFailure_((kaldi *)"LstmComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)v55, v54, v9);
  }
  if (v24 != v25)
  {
    v27 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a2 + 536) + 8 * v27))
      {
        v28 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a2, v27);
        kaldi::NewCuSubOrMat<float>(v28, 0, v56);
        v29 = *(_QWORD *)(a1 + 536);
        v30 = v56[0];
        v56[0] = 0;
        v31 = *(_QWORD *)(v29 + 8 * v27);
        *(_QWORD *)(v29 + 8 * v27) = v30;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
        v32 = v56[0];
        v56[0] = 0;
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 560) + 8 * v27))
      {
        v33 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a2, v27);
        kaldi::NewCuSubOrMat<float>(v33, 0, v56);
        v34 = *(_QWORD *)(a1 + 560);
        v35 = v56[0];
        v56[0] = 0;
        v36 = *(_QWORD *)(v34 + 8 * v27);
        *(_QWORD *)(v34 + 8 * v27) = v35;
        if (v36)
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
        v37 = v56[0];
        v56[0] = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 24))(v37);
      }
      if (*(_QWORD *)(*(_QWORD *)(a2 + 608) + 8 * v27))
      {
        v38 = (_QWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a2, v27);
        kaldi::NewCuSubOrVec<float>(v38, 0, v56);
        v39 = *(_QWORD *)(a1 + 608);
        v40 = v56[0];
        v56[0] = 0;
        v41 = *(_QWORD *)(v39 + 8 * v27);
        *(_QWORD *)(v39 + 8 * v27) = v40;
        if (v41)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
        v42 = v56[0];
        v56[0] = 0;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
      }
      if (*(_BYTE *)(a1 + 208) && *(_QWORD *)(*(_QWORD *)(a2 + 584) + 8 * v27))
      {
        v43 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a2, v27);
        kaldi::NewCuSubOrMat<float>(v43, 0, v56);
        v44 = *(_QWORD *)(a1 + 584);
        v45 = v56[0];
        v56[0] = 0;
        v46 = *(_QWORD *)(v44 + 8 * v27);
        *(_QWORD *)(v44 + 8 * v27) = v45;
        if (v46)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 24))(v46);
        v47 = v56[0];
        v56[0] = 0;
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
      }
      if (*(_BYTE *)(a1 + 224) && *(_QWORD *)(*(_QWORD *)(a2 + 632) + 8 * v27))
      {
        v48 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a2, v27);
        kaldi::NewCuSubOrMat<float>(v48, 0, v56);
        v49 = *(_QWORD *)(a1 + 632);
        v50 = v56[0];
        v56[0] = 0;
        v51 = *(_QWORD *)(v49 + 8 * v27);
        *(_QWORD *)(v49 + 8 * v27) = v50;
        if (v51)
          (*(void (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51);
        v52 = v56[0];
        v56[0] = 0;
        if (v52)
          (*(void (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52);
      }
      ++v27;
    }
    while (v27 < (uint64_t)(*(_QWORD *)(a1 + 544) - *(_QWORD *)(a1 + 536)) >> 3);
  }
  if (*(_QWORD *)(a2 + 784) != *(_QWORD *)(a2 + 776))
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
  return a1;
}

void sub_1DE4ACC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, uint64_t a20,uint64_t a21,void **a22,void **a23,void **a24,void **a25,void **a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,void **a30)
{
  _QWORD *v30;
  void **v31;
  uint64_t v32;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;

  MEMORY[0x1DF0ED014](v32, 0x10D0C4068EB0291);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v31);
  a30 = a9;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a10;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a11;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a12;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a13;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a30);
  v34 = *a14;
  if (*a14)
  {
    v30[64] = v34;
    operator delete(v34);
  }
  v35 = *a22;
  if (*a22)
  {
    v30[61] = v35;
    operator delete(v35);
  }
  a30 = a15;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a23;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a24;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a25;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a26;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a16;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a17;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a18;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a19;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a27, 0);
  v36 = v30[27];
  v30[27] = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 24))(v36);
  v37 = v30[25];
  v30[25] = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a28, 0);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](a29, 0);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a20);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a21);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent((kaldi::nnet1::RecurrentBaseComponent *)v30, (uint64_t *)&off_1EA91BF78);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v30 + 106));
  _Unwind_Resume(a1);
}

char *`non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(a1 - 160);
}

char *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::LstmComponent((uint64_t)v2, a1);
  return (char *)v2 + *(_QWORD *)(*v2 - 24);
}

void sub_1DE4ACF5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40CC10D046);
  _Unwind_Resume(a1);
}

char *`non-virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(a1 - 168);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  void **v11;
  void *v14;
  BOOL v23;
  float *v24;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  int *v30;
  BOOL v36;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  void *v43;
  void *v44;
  int v45;
  BOOL v48;
  std::string *v49;
  int inited;
  float v51;
  unsigned int *v52;
  float v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  unsigned int v61;
  unint64_t v62;
  float v63;
  float v64;
  float v65;
  float *v66;
  uint64_t v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  float v75;
  uint64_t v76;
  float v77;
  unsigned int *v78;
  _QWORD *v79;
  void **v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  float *v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE v88[16];
  uint64_t v89;
  void *__p;
  void *v91;
  void **v92[34];
  void *v93[3];
  std::string v94;
  std::string v95;
  float v96;
  int v97;
  int v98;
  float v99;
  int v100;
  int v101;
  unsigned int v102;

  v6 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  v101 = -1;
  v102 = v6;
  v99 = 2.0;
  *(float *)&v100 = -2.0;
  *(float *)&v97 = -2.0;
  v98 = 1036831949;
  v96 = 2.0;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v95);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &v94);
  memset(v93, 0, sizeof(v93));
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_170;
    kaldi::ReadToken(a2, 0, (uint64_t)v93, v7, v8);
    if ((SHIBYTE(v93[2]) & 0x80000000) == 0)
      break;
    v14 = v93[1];
    if (v93[1] == (void *)10)
    {
      if (*(_QWORD *)v93[0] == 0x6C6C65436D754E3CLL && *((_WORD *)v93[0] + 4) == 15987)
      {
LABEL_86:
        v30 = (int *)&v102;
LABEL_159:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v30, v9, v10);
        goto LABEL_168;
      }
      if (*(_QWORD *)v93[0] == 0x61654D736169423CLL && *((_WORD *)v93[0] + 4) == 15982)
      {
LABEL_145:
        v24 = (float *)&v100;
        goto LABEL_156;
      }
      v14 = v93[1];
    }
    if (v14 == (void *)11)
    {
      if (*(_QWORD *)v93[0] == 0x6E6152736169423CLL && *(_QWORD *)((char *)v93[0] + 3) == 0x3E65676E61527361)
      {
LABEL_121:
        v24 = &v99;
        goto LABEL_156;
      }
      v14 = v93[1];
    }
    if (v14 == (void *)20)
    {
      if (*(_QWORD *)v93[0] == 0x47746567726F463CLL
        && *((_QWORD *)v93[0] + 1) == 0x4D73616942657461
        && *((_DWORD *)v93[0] + 4) == 1047421285)
      {
LABEL_95:
        v24 = (float *)&v97;
LABEL_156:
        kaldi::ReadBasicType<float>(a2, 0, v24, v9, v10);
        goto LABEL_168;
      }
      v14 = v93[1];
    }
    if (v14 == (void *)21)
    {
      if (*(_QWORD *)v93[0] == 0x47746567726F463CLL
        && *((_QWORD *)v93[0] + 1) == 0x5273616942657461
        && *(_QWORD *)((char *)v93[0] + 13) == 0x3E65676E61527361)
      {
LABEL_146:
        v24 = &v96;
        goto LABEL_156;
      }
      v14 = v93[1];
    }
    if (v14 == (void *)13)
    {
      if (*(_QWORD *)v93[0] == 0x74536D617261503CLL && *(_QWORD *)((char *)v93[0] + 5) == 0x3E7665646474536DLL)
      {
LABEL_109:
        v24 = (float *)&v98;
        goto LABEL_156;
      }
      v14 = v93[1];
    }
    if (v14 == (void *)15)
    {
      v23 = *(_QWORD *)v93[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v93[0] + 7) == 0x3E66656F43657461;
      v24 = (float *)(a1 + 464);
      if (v23)
        goto LABEL_156;
      v14 = v93[1];
    }
    if (v14 == (void *)25)
    {
      v27 = *(_QWORD *)v93[0] == 0x7463656A6F72503CLL
         && *((_QWORD *)v93[0] + 1) == 0x6E7261654C6E6F69
         && *((_QWORD *)v93[0] + 2) == 0x66656F4365746152
         && *((_BYTE *)v93[0] + 24) == 62;
      v24 = (float *)(a1 + 468);
      if (v27)
        goto LABEL_156;
      v14 = v93[1];
    }
    if (v14 == (void *)9)
    {
      v28 = *(_QWORD *)v93[0] == 0x6D726F4E78614D3CLL && *((_BYTE *)v93[0] + 8) == 62;
      v24 = (float *)(a1 + 472);
      if (v28)
        goto LABEL_156;
      v14 = v93[1];
      if (v93[1] == (void *)9)
      {
        v29 = *(_QWORD *)v93[0] == 0x6461724778614D3CLL && *((_BYTE *)v93[0] + 8) == 62;
        v24 = (float *)(a1 + 152);
        if (v29)
          goto LABEL_156;
        if ((HIBYTE(v93[2]) & 0x80) == 0)
          goto LABEL_155;
      }
    }
    if (v14 != (void *)18)
      goto LABEL_155;
    v11 = (void **)v93[0];
LABEL_148:
    v43 = *v11;
    v44 = v11[1];
    v45 = *((unsigned __int16 *)v11 + 8);
    if (v43 != (void *)0x6E6569646172473CLL || v44 != (void *)0x7079546D726F4E74 || v45 != 15973)
      goto LABEL_155;
    v49 = &v94;
LABEL_167:
    kaldi::ReadToken(a2, 0, (uint64_t)v49, v9, v10);
LABEL_168:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v11 = v93;
  switch(HIBYTE(v93[2]))
  {
    case 9:
      goto LABEL_134;
    case 0xA:
      if (v93[0] == (void *)0x6C6C65436D754E3CLL && LOWORD(v93[1]) == 15987)
        goto LABEL_86;
      if (v93[0] != (void *)0x61654D736169423CLL || LOWORD(v93[1]) != 15982)
        goto LABEL_133;
      goto LABEL_145;
    case 0xB:
      if (v93[0] == (void *)0x6E6152736169423CLL && *(void **)((char *)v93 + 3) == (void *)0x3E65676E61527361)
        goto LABEL_121;
      goto LABEL_133;
    case 0xD:
LABEL_104:
      if (v93[0] == (void *)0x74536D617261503CLL && *(void **)((char *)v93 + 5) == (void *)0x3E7665646474536DLL)
        goto LABEL_109;
      goto LABEL_133;
    case 0xF:
LABEL_110:
      v36 = v93[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v93 + 7) == (void *)0x3E66656F43657461;
      v24 = (float *)(a1 + 464);
      if (v36)
        goto LABEL_156;
      goto LABEL_133;
    case 0x12:
      goto LABEL_148;
    case 0x14:
      if (v93[0] != (void *)0x47746567726F463CLL
        || v93[1] != (void *)0x4D73616942657461
        || LODWORD(v93[2]) != 1047421285)
      {
        v11 = v93;
        switch(HIBYTE(v93[2]))
        {
          case 9:
            goto LABEL_134;
          case 0xD:
            goto LABEL_104;
          case 0xF:
            goto LABEL_110;
          case 0x12:
            goto LABEL_148;
          default:
            goto LABEL_155;
        }
      }
      goto LABEL_95;
    case 0x15:
      if (v93[0] != (void *)0x47746567726F463CLL
        || v93[1] != (void *)0x5273616942657461
        || *(void **)((char *)&v93[1] + 5) != (void *)0x3E65676E61527361)
      {
        v11 = v93;
        switch(HIBYTE(v93[2]))
        {
          case 9:
            goto LABEL_134;
          case 0xD:
            goto LABEL_104;
          case 0xF:
            goto LABEL_110;
          case 0x12:
            goto LABEL_148;
          default:
            goto LABEL_155;
        }
      }
      goto LABEL_146;
    case 0x19:
      v40 = v93[0] == (void *)0x7463656A6F72503CLL
         && v93[1] == (void *)0x6E7261654C6E6F69
         && v93[2] == (void *)0x66656F4365746152
         && v94.__r_.__value_.__s.__data_[0] == 62;
      v24 = (float *)(a1 + 468);
      if (v40)
        goto LABEL_156;
      if (HIBYTE(v93[2]) == 18)
      {
        v11 = v93;
        goto LABEL_148;
      }
LABEL_133:
      if (HIBYTE(v93[2]) == 9)
      {
LABEL_134:
        v41 = v93[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v93[1]) == 62;
        v24 = (float *)(a1 + 472);
        if (v41)
          goto LABEL_156;
        if (HIBYTE(v93[2]) == 9)
        {
          v42 = v93[0] == (void *)0x6461724778614D3CLL && LOBYTE(v93[1]) == 62;
          v24 = (float *)(a1 + 152);
          if (v42)
            goto LABEL_156;
        }
      }
LABEL_155:
      v48 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<MaxCell>");
      v24 = (float *)(a1 + 476);
      if (v48)
        goto LABEL_156;
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<RandomSeed>"))
      {
        v30 = &v101;
        goto LABEL_159;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<NoPeep>"))
      {
        *(_BYTE *)(a1 + 208) = 0;
        goto LABEL_168;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<OutputCellValues>"))
      {
        *(_BYTE *)(a1 + 209) = 1;
        goto LABEL_168;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "<InitTransformType>"))
      {
        v49 = &v95;
        goto LABEL_167;
      }
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "</Component>"))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v92, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 351);
        v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"Invalid token ", 14);
        if (SHIBYTE(v93[2]) >= 0)
          v80 = v93;
        else
          v80 = (void **)v93[0];
        if (SHIBYTE(v93[2]) >= 0)
          v81 = HIBYTE(v93[2]);
        else
          v81 = (uint64_t)v93[1];
        v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v80, v81);
        v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)". Allowed tokens: ", 18);
        v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"(NumCells|BiasMean|BiasRange|ForgetGateBiasMean|ForgetGateBiasRange|ParamStddev|LearnRateCoef|ProjectionLearnRateCoef|MaxNorm|", 126);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"MaxGrad|MaxCell|NoPeep|InitTransformType|GradientNormType|RandomSeed)", 69);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v92);
      }
LABEL_170:
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateParams((uint64_t *)a1, v102);
      inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v95);
      *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v94);
      if (v101 >= 1)
        kaldi::UniformRandomNumber::SetRandomSeeds(a3, v101);
      kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v88, a3);
      v51 = *(float *)&v98;
      v52 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
      kaldi::nnet1::RandMatrix<kaldi::QuantizedMatrix<short>>(a3, (kaldi::GaussRandomNumber *)v88, inited, v52, v51);
      v53 = *(float *)&v98;
      v54 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
      kaldi::nnet1::RandMatrix<kaldi::QuantizedMatrix<short>>(a3, (kaldi::GaussRandomNumber *)v88, inited, v54, v53);
      v55 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1) + 16);
      v86 = 0;
      v87 = 0;
      v85 = 0;
      kaldi::Vector<float>::Resize((void **)&v85, v55, 0, v56, v57);
      v61 = v86;
      if ((int)v86 >= 1)
      {
        v62 = 0;
        do
        {
          v63 = *(float *)&v100;
          v64 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v58, v59, v60);
          v61 = v86;
          if (v62 >= v86)
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x68, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v60);
          v65 = v63 + (v64 + -0.5) * v99;
          v85[v62++] = v65;
        }
        while ((uint64_t)v62 < (int)v61);
      }
      if (v61 < 2 * v102)
        kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v60);
      if ((int)v102 >= 1)
      {
        v66 = &v85[v102];
        v67 = v102;
        do
        {
          v68 = *(float *)&v97;
          v69 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v58, v59, v60);
          v70 = v68 + (v69 + -0.5) * v96;
          *v66++ = v70;
          --v67;
        }
        while (v67);
      }
      if (!*(_QWORD *)(a1 + 200))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v92, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 382);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"bias_ thought to be initialized here", 36);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v92);
      }
      v71 = operator new();
      kaldi::CuVector<float>::CuVector(v71, (uint64_t)&v85, 0, v72, v73);
      v74 = *(_QWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 200) = v71;
      if (v74)
        (*(void (**)(uint64_t))(*(_QWORD *)v74 + 16))(v74);
      if (*(_BYTE *)(a1 + 208))
      {
        v75 = *(float *)&v98;
        v76 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
        kaldi::nnet1::RandMatrix<kaldi::CuMatrixBase<float>>(a3, (kaldi::GaussRandomNumber *)v88, inited, v76, v75);
      }
      if (*(_BYTE *)(a1 + 224))
      {
        v77 = *(float *)&v98;
        v78 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
        kaldi::nnet1::RandMatrix<kaldi::QuantizedMatrix<short>>(a3, (kaldi::GaussRandomNumber *)v88, inited, v78, v77);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
      kaldi::Vector<float>::Destroy((uint64_t)&v85);
      if (__p)
      {
        v91 = __p;
        operator delete(__p);
      }
      v92[0] = (void **)&v89;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v92);
      if (SHIBYTE(v93[2]) < 0)
        operator delete(v93[0]);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v95.__r_.__value_.__l.__data_);
      return;
    default:
      goto LABEL_155;
  }
}

void sub_1DE4ADAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  kaldi::GaussRandomNumber::~GaussRandomNumber((kaldi::GaussRandomNumber *)va1);
  if (*(char *)(v5 - 185) < 0)
    operator delete(*(void **)(v5 - 208));
  if (*(char *)(v5 - 161) < 0)
    operator delete(*(void **)(v5 - 184));
  if (*(char *)(v5 - 137) < 0)
    operator delete(*(void **)(v5 - 160));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateParams(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void **v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *__p[2];
  unsigned __int8 v26;
  _QWORD v27[35];

  *((_DWORD *)a1 + 44) = a2;
  v3 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  if (*(_DWORD *)(v3 + 12) > a2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1249);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"# LSTM cells (", 14);
    v23 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)") should not be less than output dim (", 38);
    v24 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, ").");
    goto LABEL_32;
  }
  if (a1[23])
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1253);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "input_weights_ thought to be un-initialized here");
    goto LABEL_32;
  }
  v4 = (4 * a2);
  v5 = operator new();
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(v5, v4, *(unsigned int *)(v3 + 8));
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a1 + 23, v5);
  if (a1[24])
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1260);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "recurrent_weights_ thought to be un-initialized here");
    goto LABEL_32;
  }
  v6 = (4 * *((_DWORD *)a1 + 44));
  v7 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  v8 = operator new();
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(v8, v6, *(unsigned int *)(v7 + 12));
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a1 + 24, v8);
  if (a1[25])
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1265);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "bias_ thought to be un-initialized here");
    goto LABEL_32;
  }
  v9 = (4 * *((_DWORD *)a1 + 44));
  v10 = (_QWORD *)operator new();
  v10[2] = 0;
  v10[3] = 0;
  *v10 = &unk_1EA92DFD8;
  v10[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v10, v9, 0, v11, v12);
  v13 = a1[25];
  a1[25] = (uint64_t)v10;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  if (*((_BYTE *)a1 + 208))
  {
    if (a1[27])
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1271);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "peephole_weights_ thought to be un-initialized here");
      goto LABEL_32;
    }
    v14 = operator new();
    kaldi::CuMatrix<float>::CuMatrix(v14, 3, *((unsigned int *)a1 + 44), 0, 0, 0);
    v15 = a1[27];
    a1[27] = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  }
  v16 = *a1;
  if (*((_DWORD *)a1 + 44) == *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 12))
  {
    *((_BYTE *)a1 + 224) = 0;
    goto LABEL_15;
  }
  v17 = a1[29];
  *((_BYTE *)a1 + 224) = 1;
  if (v17)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1281);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "projection_weights_ thought to be un-initialized here");
LABEL_32:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  v18 = (uint64_t)a1 + *(_QWORD *)(v16 - 24);
  v19 = operator new();
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(v19, *(unsigned int *)(v18 + 12), *((unsigned int *)a1 + 44));
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](a1 + 29, v19);
LABEL_15:
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v27, "AllocateParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1285, 2);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Allocated memory for the parameters: ", 37);
    (*(void (**)(void **__return_ptr, uint64_t *))(*a1 + 264))(__p, a1);
    if ((v26 & 0x80u) == 0)
      v21 = __p;
    else
      v21 = (void **)__p[0];
    if ((v26 & 0x80u) == 0)
      v22 = v26;
    else
      v22 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
    if ((char)v26 < 0)
      operator delete(__p[0]);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v27);
  }
}

void sub_1DE4ADFE0()
{
  JUMPOUT(0x1DE4ADFF0);
}

void sub_1DE4ADFFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10D0C4068EB0291);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RandMatrix<kaldi::QuantizedMatrix<short>>(kaldi::UniformRandomNumber *a1, kaldi::GaussRandomNumber *a2, int a3, unsigned int *a4, float a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;

  v10 = kaldi::QuantizedMatrixBase<short>::NumRows(a4);
  v11 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a4);
  kaldi::Matrix<float>::Matrix((uint64_t)&v23, v10, v11, 0, 0);
  v12 = 0;
LABEL_2:
  if ((uint64_t)v12 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)&v23))
  {
    for (i = 0; ; ++i)
    {
      if ((uint64_t)i >= (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v23))
      {
        ++v12;
        goto LABEL_2;
      }
      if (a3)
      {
        if (a3 == 2)
        {
          kaldi::GaussRandomNumber::Rand(a2, 0, v14, v15, v16);
          if (v12 >= v25 || i >= v24)
            goto LABEL_25;
          v18 = v23 + 4 * (int)v12 * v26;
          v19 = v20 * a5;
        }
        else
        {
          if (a3 != 1)
            continue;
          v17 = kaldi::UniformRandomNumber::RandUniform(a1, 0, v14, v15, v16);
          if (v12 >= v25 || i >= v24)
            goto LABEL_25;
          v18 = v23 + 4 * (int)v12 * v26;
          v19 = (v17 + -0.5) * (float)(a5 + a5);
        }
      }
      else
      {
        if (v12 >= v25 || i >= v24)
LABEL_25:
          kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v16);
        v18 = v23 + 4 * (int)v12 * v26;
        if (v12 == i)
          v19 = 1.0;
        else
          v19 = 0.0;
      }
      *(float *)(v18 + 4 * i) = v19;
    }
  }
  kaldi::QuantizedMatrixBase<short>::CopyFromMat((uint64_t)a4, (uint64_t)&v23);
  return kaldi::Matrix<float>::~Matrix((uint64_t)&v23);
}

void sub_1DE4AE1F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "InputWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 214);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 184);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "InputWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 210);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "input_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "RecurrentWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 223);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 192);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "RecurrentWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 219);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "recurrent_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 232);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 200);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 228);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "bias_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "PeepholeWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 241);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 216);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "PeepholeWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 237);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "peephole_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "ProjectionWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 250);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

{
  uint64_t result;
  _QWORD v2[34];

  result = *(_QWORD *)(a1 + 232);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "ProjectionWeights", "../engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.h", 246);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "projection_weights_");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitData(_QWORD *a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InitData((uint64_t)a1 + *(_QWORD *)(*a1 - 112), a2, a3);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  float *v15;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v23;
  BOOL v26;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  __int128 *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  void (***v55)(_QWORD, uint64_t *, uint64_t, uint64_t);
  _QWORD *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  void (***v60)(_QWORD, uint64_t *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  int *v63;
  const char *v64;
  uint64_t v65;
  _QWORD *v67;
  __int128 *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  void *__p[2];
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  char v77;

  while (kaldi::Peek(a2, a3) == 60)
  {
    v75 = 0uLL;
    v76 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)&v75, v7, v8);
    if ((SHIBYTE(v76) & 0x80000000) == 0)
    {
      switch(HIBYTE(v76))
      {
        case 8:
          goto LABEL_97;
        case 9:
          goto LABEL_85;
        case 0xA:
          if ((_QWORD)v75 != 0x6C6C65436D754E3CLL || WORD4(v75) != 15987)
            goto LABEL_150;
          goto LABEL_46;
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0x10:
        case 0x11:
          goto LABEL_150;
        case 0xF:
          v28 = (_QWORD)v75 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v75 + 7) == 0x3E66656F43657461;
          v15 = (float *)(a1 + 464);
          if (v28)
            goto LABEL_127;
          if (HIBYTE(v76) != 8)
            goto LABEL_84;
          goto LABEL_97;
        case 0x12:
          if ((_QWORD)v75 == 0x4374757074754F3CLL
            && *((_QWORD *)&v75 + 1) == 0x65756C61566C6C65
            && (unsigned __int16)v76 == 15987)
          {
            goto LABEL_132;
          }
          if (HIBYTE(v76) == 9)
            goto LABEL_119;
          if (HIBYTE(v76) != 18)
            goto LABEL_150;
          v26 = (_QWORD)v75 == 0x6E6569646172473CLL && *((_QWORD *)&v75 + 1) == 0x7079546D726F4E74;
          if (!v26 || (unsigned __int16)v76 != 15973)
            goto LABEL_150;
          goto LABEL_133;
        default:
          if (HIBYTE(v76) != 25)
            goto LABEL_150;
          v23 = (_QWORD)v75 == 0x7463656A6F72503CLL
             && *((_QWORD *)&v75 + 1) == 0x6E7261654C6E6F69
             && v76 == 0x66656F4365746152
             && v77 == 62;
          v15 = (float *)(a1 + 468);
          if (v23)
            goto LABEL_127;
LABEL_84:
          if (HIBYTE(v76) != 9)
            goto LABEL_150;
LABEL_85:
          v29 = (_QWORD)v75 == 0x6D726F4E78614D3CLL && BYTE8(v75) == 62;
          v15 = (float *)(a1 + 472);
          if (v29)
            goto LABEL_127;
          if (HIBYTE(v76) == 8)
            goto LABEL_97;
          if (HIBYTE(v76) != 9)
            goto LABEL_150;
          v30 = (_QWORD)v75 == 0x6C6C654378614D3CLL && BYTE8(v75) == 62;
          v15 = (float *)(a1 + 476);
          if (!v30)
            goto LABEL_119;
          goto LABEL_127;
      }
    }
    v12 = *((_QWORD *)&v75 + 1);
    if (*((_QWORD *)&v75 + 1) == 10
      && (*(_QWORD *)v75 == 0x6C6C65436D754E3CLL ? (v13 = *(unsigned __int16 *)(v75 + 8) == 15987) : (v13 = 0), v13))
    {
LABEL_46:
      kaldi::ReadBasicType<int>(a2, a3, a1 + 176, v9, v10);
    }
    else
    {
      if (*((_QWORD *)&v75 + 1) == 15)
      {
        v14 = *(_QWORD *)v75 == 0x61526E7261654C3CLL && *(_QWORD *)(v75 + 7) == 0x3E66656F43657461;
        v15 = (float *)(a1 + 464);
        if (v14)
          goto LABEL_127;
        v12 = *((_QWORD *)&v75 + 1);
      }
      if (v12 == 25)
      {
        v18 = *(_QWORD *)v75 == 0x7463656A6F72503CLL
           && *(_QWORD *)(v75 + 8) == 0x6E7261654C6E6F69
           && *(_QWORD *)(v75 + 16) == 0x66656F4365746152
           && *(_BYTE *)(v75 + 24) == 62;
        v15 = (float *)(a1 + 468);
        if (v18)
          goto LABEL_127;
        v12 = *((_QWORD *)&v75 + 1);
      }
      if (v12 != 9)
        goto LABEL_47;
      v19 = *(_QWORD *)v75 == 0x6D726F4E78614D3CLL && *(_BYTE *)(v75 + 8) == 62;
      v15 = (float *)(a1 + 472);
      if (v19)
        goto LABEL_127;
      v12 = *((_QWORD *)&v75 + 1);
      if (*((_QWORD *)&v75 + 1) != 9)
        goto LABEL_47;
      v20 = *(_QWORD *)v75 == 0x6C6C654378614D3CLL && *(_BYTE *)(v75 + 8) == 62;
      v15 = (float *)(a1 + 476);
      if (v20)
        goto LABEL_127;
      if ((v76 & 0x8000000000000000) == 0)
      {
        if (HIBYTE(v76) == 9)
          goto LABEL_119;
        if (HIBYTE(v76) != 8)
          goto LABEL_150;
LABEL_97:
        if ((_QWORD)v75 != 0x3E706565506F4E3CLL)
        {
          if ((v76 & 0x8000000000000000) == 0)
            goto LABEL_150;
LABEL_100:
          v12 = *((_QWORD *)&v75 + 1);
          if (v12 != 18)
            goto LABEL_120;
LABEL_101:
          if (*(_QWORD *)v75 == 0x4374757074754F3CLL
            && *(_QWORD *)(v75 + 8) == 0x65756C61566C6C65
            && *(_WORD *)(v75 + 16) == 15987)
          {
LABEL_132:
            *(_BYTE *)(a1 + 209) = 1;
            goto LABEL_128;
          }
          v12 = *((_QWORD *)&v75 + 1);
          if (*((_QWORD *)&v75 + 1) != 18)
            goto LABEL_120;
          if (*(_QWORD *)v75 == 0x6E6569646172473CLL
            && *(_QWORD *)(v75 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v75 + 16) == 15973)
          {
LABEL_133:
            __p[0] = 0;
            __p[1] = 0;
            v74 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)__p, v9, v10);
            *(_DWORD *)(a1 + 156) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
            if (SHIBYTE(v74) < 0)
              operator delete(__p[0]);
            goto LABEL_128;
          }
          if ((v76 & 0x8000000000000000) == 0)
          {
            if (HIBYTE(v76) != 9)
              goto LABEL_150;
LABEL_119:
            v35 = &v75;
          }
          else
          {
LABEL_120:
            if (v12 != 9)
              goto LABEL_150;
            v35 = (__int128 *)v75;
          }
          v36 = *(_QWORD *)v35;
          v37 = *((unsigned __int8 *)v35 + 8);
          v38 = v36 == 0x6461724778614D3CLL && v37 == 62;
          v15 = (float *)(a1 + 152);
          if (!v38)
          {
LABEL_150:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 424);
            v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
            if (v76 >= 0)
              v68 = &v75;
            else
              v68 = (__int128 *)v75;
            if (v76 >= 0)
              v69 = HIBYTE(v76);
            else
              v69 = *((_QWORD *)&v75 + 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v68, v69);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
          }
LABEL_127:
          kaldi::ReadBasicType<float>(a2, a3, v15, v9, v10);
          goto LABEL_128;
        }
      }
      else
      {
LABEL_47:
        if (v12 != 8)
          goto LABEL_101;
        if (*(_QWORD *)v75 != 0x3E706565506F4E3CLL)
          goto LABEL_100;
      }
      *(_BYTE *)(a1 + 208) = 0;
    }
LABEL_128:
    if (SHIBYTE(v76) < 0)
      operator delete((void *)v75);
  }
  v39 = *(_DWORD *)(a1 + 176);
  v40 = *(_QWORD *)a1;
  v41 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12);
  if (v39 < v41)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 430);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# LSTM cells (", 14);
    v70 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)") should not be less than output dim (", 38);
    v71 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v71, ").");
    goto LABEL_163;
  }
  v42 = *(_QWORD *)(a1 + 184);
  *(_BYTE *)(a1 + 224) = v39 > v41;
  if (v42)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 436);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_weights_ thougth to be un-initialized here");
    goto LABEL_163;
  }
  v43 = (4 * v39);
  v44 = a1 + *(_QWORD *)(v40 - 24);
  v45 = operator new();
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(v45, v43, *(unsigned int *)(v44 + 8));
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), v45);
  v46 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  kaldi::QuantizedMatrix<short>::Read(v46, a2, a3, a4, v47);
  if (*(_QWORD *)(a1 + 192))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 443);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "recurrent_weights_ thougth to be un-initialized here");
    goto LABEL_163;
  }
  v48 = (4 * *(_DWORD *)(a1 + 176));
  v49 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v50 = operator new();
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(v50, v48, *(unsigned int *)(v49 + 12));
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 192), v50);
  v51 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  kaldi::QuantizedMatrix<short>::Read(v51, a2, a3, a4, v52);
  if (*(_BYTE *)(a1 + 208))
  {
    if (*(_QWORD *)(a1 + 216))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 450);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "peephole_weights_ thougth to be un-initialized here");
      goto LABEL_163;
    }
    v53 = operator new();
    kaldi::CuMatrix<float>::CuMatrix(v53, 3, *(unsigned int *)(a1 + 176), 0, 0, 0);
    v54 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v53;
    if (v54)
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54);
    v55 = (void (***)(_QWORD, uint64_t *, uint64_t, uint64_t))kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
    (**v55)(v55, a2, a3, a4);
  }
  if (*(_QWORD *)(a1 + 200))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 457);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "bias_ thougth to be un-initialized here");
    goto LABEL_163;
  }
  v56 = (_QWORD *)operator new();
  v56[2] = 0;
  v56[3] = 0;
  *v56 = &unk_1EA92DFD8;
  v56[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v56, 1, 0, v57, v58);
  v59 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v56;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 16))(v59);
  v60 = (void (***)(_QWORD, uint64_t *, uint64_t))kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
  (**v60)(v60, a2, a3);
  if (*(_BYTE *)(a1 + 224))
  {
    if (!*(_QWORD *)(a1 + 232))
    {
      v61 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v62 = operator new();
      kaldi::QuantizedMatrix<short>::QuantizedMatrix(v62, *(unsigned int *)(v61 + 12), *(unsigned int *)(a1 + 176));
      std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 232), v62);
      v63 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
      kaldi::QuantizedMatrix<short>::Read(v63, a2, a3, a4, v64);
      goto LABEL_149;
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 464);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "projection_weights_ thougth to be un-initialized here");
LABEL_163:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
LABEL_149:
  v65 = *(_QWORD *)a1;
  *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16) = 0;
  return (*(uint64_t (**)(uint64_t))(v65 + 128))(a1);
}

void sub_1DE4AEEC8()
{
  JUMPOUT(0x1DE4AEED0);
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ReadData((uint64_t)a1 + *(_QWORD *)(*a1 - 176), a2, a3, a4);
}

_QWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  _QWORD *result;
  uint64_t v23;
  const char *v24;
  std::string __p;

  kaldi::WriteToken(a2, a3, (kaldi *)"<NumCells>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v8, v9);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<ProjectionLearnRateCoef>", v10, v11);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxNorm>", v12, v13);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v14, v15);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 156), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v16, v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v18, v19);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxCell>", v20, v21);
  result = kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  if (!*(_BYTE *)(a1 + 208))
    result = kaldi::WriteToken(a2, a3, (kaldi *)"<NoPeep>", v23, v24);
  if (*(_BYTE *)(a1 + 209))
    return kaldi::WriteToken(a2, a3, (kaldi *)"<OutputCellValues>", v23, v24);
  return result;
}

void sub_1DE4AF07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteConfig(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteConfig((uint64_t)a1 + *(_QWORD *)(*a1 - 184), a2, a3, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteData(_BYTE *a1, _QWORD *a2, uint64_t a3, int a4)
{
  int *v8;
  int *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  const char *v13;
  int *v14;

  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 128))(a1);
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 192))(a1, a2, a3);
  v8 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  kaldi::QuantizedMatrix<short>::Write(v8, a2, a3, a4);
  v9 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  kaldi::QuantizedMatrix<short>::Write(v9, a2, a3, a4);
  if (a1[208])
  {
    v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1);
    kaldi::CuMatrixBase<float>::Write(v10, a2, a3, a4);
  }
  v11 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1);
  kaldi::CuVectorBase<float>::Write(v11, a2, a3, v12, v13);
  if (a1[224])
  {
    v14 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    kaldi::QuantizedMatrix<short>::Write(v14, a2, a3, a4);
  }
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteData(_QWORD *a1, _QWORD *a2, uint64_t a3, int a4)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::WriteData((_BYTE *)a1 + *(_QWORD *)(*a1 - 120), a2, a3, a4);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NumParams(uint64_t a1)
{
  unsigned int *v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;

  v2 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  v3 = kaldi::QuantizedMatrixBase<short>::NumRows(v2);
  v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  v5 = kaldi::QuantizedMatrixBase<short>::NumCols(v4) * v3;
  v6 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
  v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  v9 = v5 + kaldi::QuantizedMatrixBase<short>::NumCols(v8) * v7;
  v10 = (v9 + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1) + 16));
  if (*(_BYTE *)(a1 + 208))
  {
    v11 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1) + 20);
    v10 = (v10
                       + *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1) + 16)
                       * v11);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v12 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    v13 = kaldi::QuantizedMatrixBase<short>::NumRows(v12);
    v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    return v10 + kaldi::QuantizedMatrixBase<short>::NumCols(v14) * v13;
  }
  return v10;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NumParams(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NumParams((uint64_t)a1 + *(_QWORD *)(*a1 - 192));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetParams(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  unsigned int *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  int v14;
  const char *v15;
  int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  int v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  unsigned int v32;
  unsigned int *v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;

  v4 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  v7 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  v8 = kaldi::QuantizedMatrixBase<short>::NumRows(v7);
  v9 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  v10 = kaldi::QuantizedMatrixBase<short>::NumCols(v9) * v8;
  v11 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  v12 = kaldi::QuantizedMatrixBase<short>::NumRows(v11);
  v13 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  v14 = kaldi::QuantizedMatrixBase<short>::NumCols(v13);
  v39 = 0;
  v40 = 0;
  if (v10 > *(_DWORD *)(a2 + 8))
    goto LABEL_11;
  v16 = v14 * v12;
  v38 = *(void **)a2;
  LODWORD(v39) = v10;
  v17 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v38, v17);
  v39 = 0;
  v40 = 0;
  v18 = v16 + v10;
  if (v16 + v10 > *(_DWORD *)(a2 + 8))
    goto LABEL_11;
  v38 = (void *)(*(_QWORD *)a2 + 4 * (int)v10);
  LODWORD(v39) = v16;
  v19 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v38, v19);
  if (a1[208])
  {
    v20 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 20);
    v21 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 16)
        * v20;
    v39 = 0;
    v40 = 0;
    v22 = v21 + v18;
    if (v21 + v18 > *(_DWORD *)(a2 + 8))
      goto LABEL_11;
    v38 = (void *)(*(_QWORD *)a2 + 4 * (int)v18);
    LODWORD(v39) = v21;
    v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1);
    kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v38, v23, v24, v25, v26);
    v18 = v22;
  }
  v27 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16);
  v39 = 0;
  v40 = 0;
  if (v27 + v18 > *(_DWORD *)(a2 + 8))
    goto LABEL_11;
  v38 = (void *)(*(_QWORD *)a2 + 4 * (int)v18);
  LODWORD(v39) = v27;
  v28 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v28, (uint64_t)&v38, v29, v30, v31);
  if (!a1[224])
    return;
  v32 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16) + v18;
  v33 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
  v34 = kaldi::QuantizedMatrixBase<short>::NumRows(v33);
  v35 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
  v36 = kaldi::QuantizedMatrixBase<short>::NumCols(v35);
  v39 = 0;
  v40 = 0;
  if (v36 * v34 + v32 > *(_DWORD *)(a2 + 8))
LABEL_11:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v15);
  v38 = (void *)(*(_QWORD *)a2 + 4 * (int)v32);
  LODWORD(v39) = v36 * v34;
  v37 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v38, v37);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetParams(_QWORD *a1, uint64_t a2)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetParams((_BYTE *)a1 + *(_QWORD *)(*a1 - 200), a2);
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetParams(_BYTE *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  unsigned int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  const char *v15;
  int v16;
  unsigned int *v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _DWORD *result;
  unsigned int v27;
  unsigned int *v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned int *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 208))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x222, "wei_src.Dim() == NumParams()", v5);
  v6 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  v7 = kaldi::QuantizedMatrixBase<short>::NumRows(v6);
  v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  v9 = kaldi::QuantizedMatrixBase<short>::NumCols(v8) * v7;
  v10 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  v11 = kaldi::QuantizedMatrixBase<short>::NumRows(v10);
  v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  v13 = kaldi::QuantizedMatrixBase<short>::NumCols(v12);
  v14 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  v34 = 0;
  v35 = 0;
  if (v9 > *(_DWORD *)(a2 + 8))
    goto LABEL_12;
  v16 = v13 * v11;
  v33 = *(char **)a2;
  LODWORD(v34) = v9;
  kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v14, &v33);
  v17 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  v34 = 0;
  v35 = 0;
  v18 = v16 + v9;
  if (v16 + v9 > *(_DWORD *)(a2 + 8))
    goto LABEL_12;
  v33 = (char *)(*(_QWORD *)a2 + 4 * (int)v9);
  LODWORD(v34) = v16;
  kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v17, &v33);
  if (a1[208])
  {
    v19 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 20);
    v20 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 16)
        * v19;
    v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1);
    v34 = 0;
    v35 = 0;
    if (v20 + v18 > *(_DWORD *)(a2 + 8))
      goto LABEL_12;
    v33 = (char *)(*(_QWORD *)a2 + 4 * (int)v18);
    LODWORD(v34) = v20;
    kaldi::CuMatrixBase<float>::CopyRowsFromVec(v21, &v33);
    v18 += v20;
  }
  v22 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1);
  v25 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16);
  v34 = 0;
  v35 = 0;
  if (v25 + v18 > *(_DWORD *)(a2 + 8))
    goto LABEL_12;
  v33 = (char *)(*(_QWORD *)a2 + 4 * (int)v18);
  LODWORD(v34) = v25;
  result = kaldi::CuVectorBase<float>::CopyFromVec<float>(v22, (uint64_t)&v33, v23, v24, v15);
  if (!a1[224])
    return result;
  v27 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16) + v18;
  v28 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
  v29 = kaldi::QuantizedMatrixBase<short>::NumRows(v28);
  v30 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
  v31 = kaldi::QuantizedMatrixBase<short>::NumCols(v30) * v29;
  v32 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
  v34 = 0;
  v35 = 0;
  if (v31 + v27 > *(_DWORD *)(a2 + 8))
LABEL_12:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v15);
  v33 = (char *)(*(_QWORD *)a2 + 4 * (int)v27);
  LODWORD(v34) = v31;
  return (_DWORD *)kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v32, &v33);
}

_DWORD *`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetParams(_QWORD *a1, uint64_t a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetParams((_BYTE *)a1 + *(_QWORD *)(*a1 - 208), a2);
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SumParams(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  float v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;

  v2 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  v7 = kaldi::QuantizedMatrixBase<short>::Sum(v2, v3, v4, v5, v6);
  v8 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  v13 = v7 + kaldi::QuantizedMatrixBase<short>::Sum(v8, v9, v10, v11, v12);
  if (*(_BYTE *)(a1 + 208))
  {
    v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
    v13 = v13 + kaldi::CuMatrixBase<float>::Sum(v14, v15, v16, v17, v18);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v19 = (int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    v13 = v13 + kaldi::QuantizedMatrixBase<short>::Sum(v19, v20, v21, v22, v23);
  }
  v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
  return v13 + kaldi::CuVectorBase<float>::Sum(v24);
}

float `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SumParams(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SumParams((uint64_t)a1 + *(_QWORD *)(*a1 - 224));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PerturbParams(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[48];

  v2 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  v3 = kaldi::QuantizedMatrixBase<short>::NumRows(v2);
  v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  v5 = kaldi::QuantizedMatrixBase<short>::NumCols(v4);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v6, v3, v5, 1u, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v6);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  kaldi::QuantizedMatrixBase<short>::AddMat();
}

void sub_1DE4AFA20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a4);
  v5 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(v4);
  v6 = kaldi::QuantizedMatrixBase<short>::NumRows(v5);
  v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(v4);
  v8 = kaldi::QuantizedMatrixBase<short>::NumCols(v7);
  kaldi::CuMatrix<float>::Resize((uint64_t)va, v6, v8, 1u, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)va);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(v4);
  kaldi::QuantizedMatrixBase<short>::AddMat();
}

uint64_t sub_1DE4AFA78()
{
  uint64_t v0;
  float v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[4];
  _BYTE v20[112];

  if (*(_BYTE *)(v0 + 208))
  {
    v2 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v0) + 20);
    v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v0);
    kaldi::CuMatrix<float>::Resize((uint64_t)v20, v2, *(unsigned int *)(v3 + 16), 1u, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v20);
    v4 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(v0);
    kaldi::CuMatrixBase<float>::AddMat(v4, (uint64_t)v20, 111, v5, v6, v1, 1.0);
  }
  v7 = *(unsigned int *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(v0) + 16);
  v19[0] = &unk_1EA92DFD8;
  memset(&v19[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v19, v7, 1u, v8, v9);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v19);
  v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(v0);
  kaldi::CuVectorBase<float>::AddVec(v10, (uint64_t)v19, v11, v12, v13, v1, 1.0);
  if (*(_BYTE *)(v0 + 224))
  {
    v14 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(v0);
    v15 = kaldi::QuantizedMatrixBase<short>::NumRows(v14);
    v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(v0);
    v17 = kaldi::QuantizedMatrixBase<short>::NumCols(v16);
    kaldi::CuMatrix<float>::Resize((uint64_t)v20, v15, v17, 1u, 0);
    kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v20);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(v0);
    kaldi::QuantizedMatrixBase<short>::AddMat();
  }
  v19[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v19);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v20);
}

void sub_1DE4AFBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PerturbParams(_QWORD *a1)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PerturbParams((uint64_t)a1 + *(_QWORD *)(*a1 - 232));
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetGradient(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  unsigned int *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  int v18;
  uint64_t v19;
  int v20;
  const char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  int v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  unsigned int v44;
  unsigned int *v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;

  v8 = (const void *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 136))(a1);
  if (v8)
  else
    v9 = 0;
  (*(void (**)(void *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 336))(v9, a2, a3, 0, 0);
  v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 208))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v10, 0, v11, v12);
  v13 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  v14 = kaldi::QuantizedMatrixBase<short>::NumRows(v13);
  v15 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights((uint64_t)a1);
  v16 = kaldi::QuantizedMatrixBase<short>::NumCols(v15) * v14;
  v17 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  v18 = kaldi::QuantizedMatrixBase<short>::NumRows(v17);
  v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights((uint64_t)a1);
  v20 = kaldi::QuantizedMatrixBase<short>::NumCols(v19);
  v58 = 0;
  v59 = 0;
  if (v16 > *(_DWORD *)(a4 + 8))
    goto LABEL_14;
  v22 = v20;
  v57 = *(char **)a4;
  LODWORD(v58) = v16;
  v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient((uint64_t)v9, 0);
  kaldi::Matrix<float>::Matrix<float>((uint64_t)&v54, v23, 111, v24, v25);
  kaldi::VectorBase<float>::CopyRowsFromMat(&v57, (uint64_t)&v54);
  v26 = v22 * v18;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v54);
  v55 = 0;
  v56 = 0;
  v27 = v26 + v16;
  if (v26 + v16 > *(_DWORD *)(a4 + 8))
    goto LABEL_14;
  v54 = *(_QWORD *)a4 + 4 * (int)v16;
  LODWORD(v55) = v26;
  v28 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient((uint64_t)v9, 0);
  kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v54, v28, v29, v30, v31);
  if (a1[208])
  {
    v32 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 20);
    v33 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights((uint64_t)a1) + 16)
        * v32;
    v55 = 0;
    v56 = 0;
    v34 = v33 + v27;
    if (v33 + v27 > *(_DWORD *)(a4 + 8))
      goto LABEL_14;
    v54 = *(_QWORD *)a4 + 4 * (int)v27;
    LODWORD(v55) = v33;
    v35 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient((uint64_t)v9, 0);
    kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v54, v35, v36, v37, v38);
    v27 = v34;
  }
  v39 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16);
  v55 = 0;
  v56 = 0;
  if (v39 + v27 > *(_DWORD *)(a4 + 8))
LABEL_14:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v21);
  v54 = *(_QWORD *)a4 + 4 * (int)v27;
  LODWORD(v55) = v39;
  v40 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient((uint64_t)v9, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v40, (uint64_t)&v54, v41, v42, v43);
  if (a1[224])
  {
    v44 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias((uint64_t)a1) + 16) + v27;
    v45 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    v46 = kaldi::QuantizedMatrixBase<short>::NumRows(v45);
    v47 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights((uint64_t)a1);
    v48 = kaldi::QuantizedMatrixBase<short>::NumCols(v47);
    v55 = 0;
    v56 = 0;
    if (v48 * v46 + v44 <= *(_DWORD *)(a4 + 8))
    {
      v54 = *(_QWORD *)a4 + 4 * (int)v44;
      LODWORD(v55) = v48 * v46;
      v49 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient((uint64_t)v9, 0);
      kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v54, v49, v50, v51, v52);
      return (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 8))(v9);
    }
    goto LABEL_14;
  }
  return (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 8))(v9);
}

void sub_1DE4AFEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetGradient((_BYTE *)a1 + *(_QWORD *)(*a1 - 240), a2, a3, a4);
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate(_QWORD *a1, int a2)
{
  float *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;

  v2 = (float *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  if (!*((_BYTE *)v2 + 84))
    return v2[14];
  v3 = a1[63];
  v4 = a1[64] - v3;
  if (!v4)
    return NAN;
  v5 = v4 >> 2;
  if ((int)v5 <= a2)
    return NAN;
  v6 = v5 - 1;
  if (a2 >= 0)
    v6 = a2;
  return *(float *)(v3 + 4 * v6);
}

float `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate(_QWORD *a1, int a2)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 216)), a2);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Info(uint64_t a1)
{
  _QWORD *v2;
  unsigned int *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  int v27;
  void **v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int *v35;
  void **v36;
  uint64_t v37;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *__p[2];
  unsigned __int8 v44;
  void *v45[2];
  unsigned __int8 v46;
  void *v47[2];
  unsigned __int8 v48;
  void *v49[2];
  unsigned __int8 v50;
  _QWORD v51[11];
  char v52;
  uint64_t v53;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v51);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 192))(a1, v51, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"\n Input weights:", 16);
  v3 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  kaldi::nnet1::MomentStatistics<short>(v3);
  if ((v50 & 0x80u) == 0)
    v4 = v49;
  else
    v4 = (void **)v49[0];
  if ((v50 & 0x80u) == 0)
    v5 = v50;
  else
    v5 = (uint64_t)v49[1];
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n Recurrent weights:", 20);
  v8 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  kaldi::nnet1::MomentStatistics<short>(v8);
  if ((v48 & 0x80u) == 0)
    v9 = v47;
  else
    v9 = (void **)v47[0];
  if ((v48 & 0x80u) == 0)
    v10 = v48;
  else
    v10 = (uint64_t)v47[1];
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, v10);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n Bias:", 7);
  v13 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
  kaldi::nnet1::MomentStatistics<float>(v13, v14, v15, v16, v17);
  if ((v46 & 0x80u) == 0)
    v18 = v45;
  else
    v18 = (void **)v45[0];
  if ((v46 & 0x80u) == 0)
    v19 = v46;
  else
    v19 = (uint64_t)v45[1];
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v18, v19);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n Forget gate bias:", 19);
  v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
  v27 = *(_DWORD *)(a1 + 176);
  v41 = 0;
  v42 = 0;
  v39 = &unk_1EA926538;
  v40 = 0;
  if (*(_DWORD *)(v22 + 16) < (2 * v27))
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v26);
  v40 = *(_QWORD *)(v22 + 8) + 4 * v27;
  LODWORD(v41) = v27;
  v42 = *(_QWORD *)(v22 + 24);
  kaldi::nnet1::MomentStatistics<float>(&v39, v23, v24, v25, v26);
  if ((v44 & 0x80u) == 0)
    v28 = __p;
  else
    v28 = (void **)__p[0];
  if ((v44 & 0x80u) == 0)
    v29 = v44;
  else
    v29 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v28, v29);
  if ((char)v44 < 0)
    operator delete(__p[0]);
  if ((char)v46 < 0)
    operator delete(v45[0]);
  if ((char)v48 < 0)
    operator delete(v47[0]);
  if ((char)v50 < 0)
    operator delete(v49[0]);
  if (*(_BYTE *)(a1 + 208))
  {
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"\n Peephole weights:", 19);
    v31 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
    kaldi::nnet1::MomentStatistics<float>(v31);
    v32 = v41 >= 0 ? &v39 : (void **)v39;
    v33 = v41 >= 0 ? HIBYTE(v41) : v40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v32, v33);
    if (SHIBYTE(v41) < 0)
      operator delete(v39);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"\n Projection weights:", 21);
    v35 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    kaldi::nnet1::MomentStatistics<short>(v35);
    v36 = v41 >= 0 ? &v39 : (void **)v39;
    v37 = v41 >= 0 ? HIBYTE(v41) : v40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
    if (SHIBYTE(v41) < 0)
      operator delete(v39);
  }
  std::stringbuf::str();
  v51[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v51 + *(_QWORD *)(v51[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v51[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v52 < 0)
    operator delete((void *)v51[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v53);
}

void sub_1DE4B06A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Info(_QWORD *a1)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Info((uint64_t)a1 + *(_QWORD *)(*a1 - 80));
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoGradient(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  void **v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  void **v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  uint64_t v32;
  void **v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  void **v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  void **v46;
  std::string::size_type v47;
  std::string *v48;
  __int128 v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  uint64_t v52;
  std::string *v53;
  std::string::size_type size;
  std::string *v55;
  __int128 v56;
  const std::string::value_type *v57;
  std::string::size_type v58;
  uint64_t v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  const std::string::value_type *v64;
  std::string::size_type v65;
  std::string *v66;
  std::string *v67;
  std::string::size_type v68;
  std::string *v69;
  __int128 v70;
  void *__p[2];
  unsigned __int8 v73;
  void *v74[2];
  unsigned __int8 v75;
  void *v76[2];
  unsigned __int8 v77;
  void *v78[2];
  unsigned __int8 v79;
  void *v80[2];
  unsigned __int8 v81;
  void *v82[2];
  unsigned __int8 v83;
  void *v84[2];
  unsigned __int8 v85;
  void *v86[2];
  unsigned __int8 v87;
  void *v88[2];
  unsigned __int8 v89;
  void *v90[2];
  unsigned __int8 v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  std::string v100;
  std::string v101;
  __int128 v102;
  int64_t v103;
  int v104;
  std::string v105;

  if (*(_BYTE *)(a1 + 528))
  {
    memset(&v105, 0, sizeof(v105));
    v104 = 0;
    if (*(int *)(a1 + 80) >= 1)
    {
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&v92, "\n For batch ");
        kaldi::nnet1::ToString<int>();
        if ((v91 & 0x80u) == 0)
          v3 = v90;
        else
          v3 = (void **)v90[0];
        if ((v91 & 0x80u) == 0)
          v4 = v91;
        else
          v4 = (std::string::size_type)v90[1];
        v5 = std::string::append(&v92, (const std::string::value_type *)v3, v4);
        v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v88, ": ");
        if ((v89 & 0x80u) == 0)
          v7 = v88;
        else
          v7 = (void **)v88[0];
        if ((v89 & 0x80u) == 0)
          v8 = v89;
        else
          v8 = (std::string::size_type)v88[1];
        v9 = std::string::append(&v93, (const std::string::value_type *)v7, v8);
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v94.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v86, "\n  Number of cells : ");
        if ((v87 & 0x80u) == 0)
          v11 = v86;
        else
          v11 = (void **)v86[0];
        if ((v87 & 0x80u) == 0)
          v12 = v87;
        else
          v12 = (std::string::size_type)v86[1];
        v13 = std::string::append(&v94, (const std::string::value_type *)v11, v12);
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v95.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        kaldi::nnet1::ToString<int>();
        if ((v85 & 0x80u) == 0)
          v15 = v84;
        else
          v15 = (void **)v84[0];
        if ((v85 & 0x80u) == 0)
          v16 = v85;
        else
          v16 = (std::string::size_type)v84[1];
        v17 = std::string::append(&v95, (const std::string::value_type *)v15, v16);
        v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v96.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v82, "\n  Input weights gradient: ");
        if ((v83 & 0x80u) == 0)
          v19 = v82;
        else
          v19 = (void **)v82[0];
        if ((v83 & 0x80u) == 0)
          v20 = v83;
        else
          v20 = (std::string::size_type)v82[1];
        v21 = std::string::append(&v96, (const std::string::value_type *)v19, v20);
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v97.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        v23 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v23);
        if ((v81 & 0x80u) == 0)
          v24 = v80;
        else
          v24 = (void **)v80[0];
        if ((v81 & 0x80u) == 0)
          v25 = v81;
        else
          v25 = (std::string::size_type)v80[1];
        v26 = std::string::append(&v97, (const std::string::value_type *)v24, v25);
        v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v78, "\n  Recurrent weights gradient: ");
        if ((v79 & 0x80u) == 0)
          v28 = v78;
        else
          v28 = (void **)v78[0];
        if ((v79 & 0x80u) == 0)
          v29 = v79;
        else
          v29 = (std::string::size_type)v78[1];
        v30 = std::string::append(&v98, (const std::string::value_type *)v28, v29);
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v99.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v32 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v32);
        if ((v77 & 0x80u) == 0)
          v33 = v76;
        else
          v33 = (void **)v76[0];
        if ((v77 & 0x80u) == 0)
          v34 = v77;
        else
          v34 = (std::string::size_type)v76[1];
        v35 = std::string::append(&v99, (const std::string::value_type *)v33, v34);
        v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v100.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v74, "\n  Bias gradient: ");
        if ((v75 & 0x80u) == 0)
          v37 = v74;
        else
          v37 = (void **)v74[0];
        if ((v75 & 0x80u) == 0)
          v38 = v75;
        else
          v38 = (std::string::size_type)v74[1];
        v39 = std::string::append(&v100, (const std::string::value_type *)v37, v38);
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v101.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        v41 = (_DWORD *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, v104);
        kaldi::nnet1::MomentStatistics<float>(v41, v42, v43, v44, v45);
        if ((v73 & 0x80u) == 0)
          v46 = __p;
        else
          v46 = (void **)__p[0];
        if ((v73 & 0x80u) == 0)
          v47 = v73;
        else
          v47 = (std::string::size_type)__p[1];
        v48 = std::string::append(&v101, (const std::string::value_type *)v46, v47);
        v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v103 = v48->__r_.__value_.__r.__words[2];
        v102 = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        if (v103 >= 0)
          v50 = (const std::string::value_type *)&v102;
        else
          v50 = (const std::string::value_type *)v102;
        if (v103 >= 0)
          v51 = HIBYTE(v103);
        else
          v51 = *((_QWORD *)&v102 + 1);
        std::string::append(&v105, v50, v51);
        if (SHIBYTE(v103) < 0)
          operator delete((void *)v102);
        if ((char)v73 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v101.__r_.__value_.__l.__data_);
        if ((char)v75 < 0)
          operator delete(v74[0]);
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v100.__r_.__value_.__l.__data_);
        if ((char)v77 < 0)
          operator delete(v76[0]);
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v99.__r_.__value_.__l.__data_);
        if ((char)v79 < 0)
          operator delete(v78[0]);
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v98.__r_.__value_.__l.__data_);
        if ((char)v81 < 0)
          operator delete(v80[0]);
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
        if ((char)v83 < 0)
          operator delete(v82[0]);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        if ((char)v85 < 0)
          operator delete(v84[0]);
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v95.__r_.__value_.__l.__data_);
        if ((char)v87 < 0)
          operator delete(v86[0]);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94.__r_.__value_.__l.__data_);
        if ((char)v89 < 0)
          operator delete(v88[0]);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v93.__r_.__value_.__l.__data_);
        if ((char)v91 < 0)
          operator delete(v90[0]);
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v92.__r_.__value_.__l.__data_);
        if (*(_BYTE *)(a1 + 208))
        {
          std::string::basic_string[abi:ne180100]<0>(&v101, "\n  Peephole weights gradient: ");
          v52 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v104);
          kaldi::nnet1::MomentStatistics<float>(v52);
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v53 = &v100;
          else
            v53 = (std::string *)v100.__r_.__value_.__r.__words[0];
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v100.__r_.__value_.__r.__words[2]);
          else
            size = v100.__r_.__value_.__l.__size_;
          v55 = std::string::append(&v101, (const std::string::value_type *)v53, size);
          v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          v103 = v55->__r_.__value_.__r.__words[2];
          v102 = v56;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          if (v103 >= 0)
            v57 = (const std::string::value_type *)&v102;
          else
            v57 = (const std::string::value_type *)v102;
          if (v103 >= 0)
            v58 = HIBYTE(v103);
          else
            v58 = *((_QWORD *)&v102 + 1);
          std::string::append(&v105, v57, v58);
          if (SHIBYTE(v103) < 0)
            operator delete((void *)v102);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v100.__r_.__value_.__l.__data_);
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v101.__r_.__value_.__l.__data_);
        }
        if (*(_BYTE *)(a1 + 224))
        {
          std::string::basic_string[abi:ne180100]<0>(&v101, "\n  Projection weights gradient: ");
          v59 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, v104);
          kaldi::nnet1::MomentStatistics<float>(v59);
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v60 = &v100;
          else
            v60 = (std::string *)v100.__r_.__value_.__r.__words[0];
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v61 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
          else
            v61 = v100.__r_.__value_.__l.__size_;
          v62 = std::string::append(&v101, (const std::string::value_type *)v60, v61);
          v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
          v103 = v62->__r_.__value_.__r.__words[2];
          v102 = v63;
          v62->__r_.__value_.__l.__size_ = 0;
          v62->__r_.__value_.__r.__words[2] = 0;
          v62->__r_.__value_.__r.__words[0] = 0;
          if (v103 >= 0)
            v64 = (const std::string::value_type *)&v102;
          else
            v64 = (const std::string::value_type *)v102;
          if (v103 >= 0)
            v65 = HIBYTE(v103);
          else
            v65 = *((_QWORD *)&v102 + 1);
          std::string::append(&v105, v64, v65);
          if (SHIBYTE(v103) < 0)
            operator delete((void *)v102);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v100.__r_.__value_.__l.__data_);
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v101.__r_.__value_.__l.__data_);
        }
        ++v104;
      }
      while (v104 < *(_DWORD *)(a1 + 80));
    }
    v66 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v102, "\n");
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v105;
    else
      v67 = (std::string *)v105.__r_.__value_.__r.__words[0];
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v68 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
    else
      v68 = v105.__r_.__value_.__l.__size_;
    v69 = std::string::insert(v66, 0, (const std::string::value_type *)v67, v68);
    v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v69->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v103) < 0)
      operator delete((void *)v102);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  Gradients are uninitialized");
  }
}

void sub_1DE4B0E7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoGradient(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoGradient((uint64_t)a1 + *(_QWORD *)(*a1 - 88), a2);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  void **v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  void **v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type size;
  std::string *v47;
  __int128 v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  void *__p[2];
  unsigned __int8 v57;
  void *v58[2];
  unsigned __int8 v59;
  void *v60[2];
  unsigned __int8 v61;
  void *v62[2];
  unsigned __int8 v63;
  void *v64[2];
  unsigned __int8 v65;
  void *v66[2];
  unsigned __int8 v67;
  void *v68[2];
  unsigned __int8 v69;
  void *v70[2];
  unsigned __int8 v71;
  void *v72[2];
  unsigned __int8 v73;
  void *v74[2];
  unsigned __int8 v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  __int128 v86;
  int64_t v87;
  int v88;
  std::string v89;

  memset(&v89, 0, sizeof(v89));
  v88 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v76, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v75 & 0x80u) == 0)
        v3 = v74;
      else
        v3 = (void **)v74[0];
      if ((v75 & 0x80u) == 0)
        v4 = v75;
      else
        v4 = (std::string::size_type)v74[1];
      v5 = std::string::append(&v76, (const std::string::value_type *)v3, v4);
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v72, ": ");
      if ((v73 & 0x80u) == 0)
        v7 = v72;
      else
        v7 = (void **)v72[0];
      if ((v73 & 0x80u) == 0)
        v8 = v73;
      else
        v8 = (std::string::size_type)v72[1];
      v9 = std::string::append(&v77, (const std::string::value_type *)v7, v8);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v70, "\n  Gates values: ");
      if ((v71 & 0x80u) == 0)
        v11 = v70;
      else
        v11 = (void **)v70[0];
      if ((v71 & 0x80u) == 0)
        v12 = v71;
      else
        v12 = (std::string::size_type)v70[1];
      v13 = std::string::append(&v78, (const std::string::value_type *)v11, v12);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v79.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 248) + 48 * v88);
      if ((v69 & 0x80u) == 0)
        v15 = v68;
      else
        v15 = (void **)v68[0];
      if ((v69 & 0x80u) == 0)
        v16 = v69;
      else
        v16 = (std::string::size_type)v68[1];
      v17 = std::string::append(&v79, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v66, "\n  Cell values: ");
      if ((v67 & 0x80u) == 0)
        v19 = v66;
      else
        v19 = (void **)v66[0];
      if ((v67 & 0x80u) == 0)
        v20 = v67;
      else
        v20 = (std::string::size_type)v66[1];
      v21 = std::string::append(&v80, (const std::string::value_type *)v19, v20);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v81.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 272) + 48 * v88);
      if ((v65 & 0x80u) == 0)
        v23 = v64;
      else
        v23 = (void **)v64[0];
      if ((v65 & 0x80u) == 0)
        v24 = v65;
      else
        v24 = (std::string::size_type)v64[1];
      v25 = std::string::append(&v81, (const std::string::value_type *)v23, v24);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v82.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v62, "\n  Cell outputs: ");
      if ((v63 & 0x80u) == 0)
        v27 = v62;
      else
        v27 = (void **)v62[0];
      if ((v63 & 0x80u) == 0)
        v28 = v63;
      else
        v28 = (std::string::size_type)v62[1];
      v29 = std::string::append(&v82, (const std::string::value_type *)v27, v28);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 296) + 48 * v88);
      if ((v61 & 0x80u) == 0)
        v31 = v60;
      else
        v31 = (void **)v60[0];
      if ((v61 & 0x80u) == 0)
        v32 = v61;
      else
        v32 = (std::string::size_type)v60[1];
      v33 = std::string::append(&v83, (const std::string::value_type *)v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Cell outputs gated: ");
      if ((v59 & 0x80u) == 0)
        v35 = v58;
      else
        v35 = (void **)v58[0];
      if ((v59 & 0x80u) == 0)
        v36 = v59;
      else
        v36 = (std::string::size_type)v58[1];
      v37 = std::string::append(&v84, (const std::string::value_type *)v35, v36);
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 320) + 48 * v88);
      if ((v57 & 0x80u) == 0)
        v39 = __p;
      else
        v39 = (void **)__p[0];
      if ((v57 & 0x80u) == 0)
        v40 = v57;
      else
        v40 = (std::string::size_type)__p[1];
      v41 = std::string::append(&v85, (const std::string::value_type *)v39, v40);
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v87 = v41->__r_.__value_.__r.__words[2];
      v86 = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if (v87 >= 0)
        v43 = (const std::string::value_type *)&v86;
      else
        v43 = (const std::string::value_type *)v86;
      if (v87 >= 0)
        v44 = HIBYTE(v87);
      else
        v44 = *((_QWORD *)&v86 + 1);
      std::string::append(&v89, v43, v44);
      if (SHIBYTE(v87) < 0)
        operator delete((void *)v86);
      if ((char)v57 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
      if ((char)v59 < 0)
        operator delete(v58[0]);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
      if ((char)v61 < 0)
        operator delete(v60[0]);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
      if ((char)v63 < 0)
        operator delete(v62[0]);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      if ((char)v65 < 0)
        operator delete(v64[0]);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
      if ((char)v67 < 0)
        operator delete(v66[0]);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      if ((char)v69 < 0)
        operator delete(v68[0]);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      if ((char)v71 < 0)
        operator delete(v70[0]);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      if ((char)v73 < 0)
        operator delete(v72[0]);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      if ((char)v75 < 0)
        operator delete(v74[0]);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      if (*(_BYTE *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v85, "\n  Output values: ");
        kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 344) + 48 * v88);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v45 = &v84;
        else
          v45 = (std::string *)v84.__r_.__value_.__r.__words[0];
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        else
          size = v84.__r_.__value_.__l.__size_;
        v47 = std::string::append(&v85, (const std::string::value_type *)v45, size);
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v87 = v47->__r_.__value_.__r.__words[2];
        v86 = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        if (v87 >= 0)
          v49 = (const std::string::value_type *)&v86;
        else
          v49 = (const std::string::value_type *)v86;
        if (v87 >= 0)
          v50 = HIBYTE(v87);
        else
          v50 = *((_QWORD *)&v86 + 1);
        std::string::append(&v89, v49, v50);
        if (SHIBYTE(v87) < 0)
          operator delete((void *)v86);
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v84.__r_.__value_.__l.__data_);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
      }
      ++v88;
    }
    while (v88 < *(_DWORD *)(a1 + 80));
  }
  v51 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v86, "\n");
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = &v89;
  else
    v52 = (std::string *)v89.__r_.__value_.__r.__words[0];
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  else
    v53 = v89.__r_.__value_.__l.__size_;
  v54 = std::string::insert(v51, 0, (const std::string::value_type *)v52, v53);
  *a2 = *v54;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v87) < 0)
    operator delete((void *)v86);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
}

void sub_1DE4B174C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1DE4B1958()
{
  JUMPOUT(0x1DE4B1880);
}

void sub_1DE4B1960()
{
  JUMPOUT(0x1DE4B1890);
}

void sub_1DE4B1968()
{
  JUMPOUT(0x1DE4B18A0);
}

void sub_1DE4B1970()
{
  JUMPOUT(0x1DE4B18B0);
}

void sub_1DE4B1978()
{
  JUMPOUT(0x1DE4B18C0);
}

void sub_1DE4B1980()
{
  JUMPOUT(0x1DE4B18D0);
}

void sub_1DE4B1988()
{
  JUMPOUT(0x1DE4B18E0);
}

void sub_1DE4B1990()
{
  JUMPOUT(0x1DE4B18F0);
}

void sub_1DE4B1998()
{
  JUMPOUT(0x1DE4B1900);
}

void sub_1DE4B19A0()
{
  JUMPOUT(0x1DE4B1910);
}

void sub_1DE4B19A8()
{
  JUMPOUT(0x1DE4B1920);
}

void sub_1DE4B19B0()
{
  JUMPOUT(0x1DE4B1930);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoPropagate(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoPropagate((uint64_t)a1 + *(_QWORD *)(*a1 - 96), a2);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoBackPropagate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type size;
  std::string *v39;
  __int128 v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  std::string *v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  void *__p[2];
  unsigned __int8 v49;
  void *v50[2];
  unsigned __int8 v51;
  void *v52[2];
  unsigned __int8 v53;
  void *v54[2];
  unsigned __int8 v55;
  void *v56[2];
  unsigned __int8 v57;
  void *v58[2];
  unsigned __int8 v59;
  void *v60[2];
  unsigned __int8 v61;
  void *v62[2];
  unsigned __int8 v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  __int128 v72;
  int64_t v73;
  int v74;
  std::string v75;

  memset(&v75, 0, sizeof(v75));
  v74 = 0;
  if (*(int *)(a1 + 80) >= 1)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v64, "\n For batch ");
      kaldi::nnet1::ToString<int>();
      if ((v63 & 0x80u) == 0)
        v3 = v62;
      else
        v3 = (void **)v62[0];
      if ((v63 & 0x80u) == 0)
        v4 = v63;
      else
        v4 = (std::string::size_type)v62[1];
      v5 = std::string::append(&v64, (const std::string::value_type *)v3, v4);
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v60, ": ");
      if ((v61 & 0x80u) == 0)
        v7 = v60;
      else
        v7 = (void **)v60[0];
      if ((v61 & 0x80u) == 0)
        v8 = v61;
      else
        v8 = (std::string::size_type)v60[1];
      v9 = std::string::append(&v65, (const std::string::value_type *)v7, v8);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v58, "\n  Gates diff: ");
      if ((v59 & 0x80u) == 0)
        v11 = v58;
      else
        v11 = (void **)v58[0];
      if ((v59 & 0x80u) == 0)
        v12 = v59;
      else
        v12 = (std::string::size_type)v58[1];
      v13 = std::string::append(&v66, (const std::string::value_type *)v11, v12);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 440) + 48 * v74);
      if ((v57 & 0x80u) == 0)
        v15 = v56;
      else
        v15 = (void **)v56[0];
      if ((v57 & 0x80u) == 0)
        v16 = v57;
      else
        v16 = (std::string::size_type)v56[1];
      v17 = std::string::append(&v67, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v54, "\n  Cell diff: ");
      if ((v55 & 0x80u) == 0)
        v19 = v54;
      else
        v19 = (void **)v54[0];
      if ((v55 & 0x80u) == 0)
        v20 = v55;
      else
        v20 = (std::string::size_type)v54[1];
      v21 = std::string::append(&v68, (const std::string::value_type *)v19, v20);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 416) + 48 * v74);
      if ((v53 & 0x80u) == 0)
        v23 = v52;
      else
        v23 = (void **)v52[0];
      if ((v53 & 0x80u) == 0)
        v24 = v53;
      else
        v24 = (std::string::size_type)v52[1];
      v25 = std::string::append(&v69, (const std::string::value_type *)v23, v24);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100]<0>(v50, "\n  Cell out gated diff: ");
      if ((v51 & 0x80u) == 0)
        v27 = v50;
      else
        v27 = (void **)v50[0];
      if ((v51 & 0x80u) == 0)
        v28 = v51;
      else
        v28 = (std::string::size_type)v50[1];
      v29 = std::string::append(&v70, (const std::string::value_type *)v27, v28);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 392) + 48 * v74);
      if ((v49 & 0x80u) == 0)
        v31 = __p;
      else
        v31 = (void **)__p[0];
      if ((v49 & 0x80u) == 0)
        v32 = v49;
      else
        v32 = (std::string::size_type)__p[1];
      v33 = std::string::append(&v71, (const std::string::value_type *)v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v73 = v33->__r_.__value_.__r.__words[2];
      v72 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (v73 >= 0)
        v35 = (const std::string::value_type *)&v72;
      else
        v35 = (const std::string::value_type *)v72;
      if (v73 >= 0)
        v36 = HIBYTE(v73);
      else
        v36 = *((_QWORD *)&v72 + 1);
      std::string::append(&v75, v35, v36);
      if (SHIBYTE(v73) < 0)
        operator delete((void *)v72);
      if ((char)v49 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      if ((char)v51 < 0)
        operator delete(v50[0]);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if ((char)v53 < 0)
        operator delete(v52[0]);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
      if ((char)v55 < 0)
        operator delete(v54[0]);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if ((char)v57 < 0)
        operator delete(v56[0]);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if ((char)v59 < 0)
        operator delete(v58[0]);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if ((char)v61 < 0)
        operator delete(v60[0]);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if ((char)v63 < 0)
        operator delete(v62[0]);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (*(_BYTE *)(a1 + 224))
      {
        std::string::basic_string[abi:ne180100]<0>(&v71, "\n  Output diff: ");
        kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 368) + 48 * v74);
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &v70;
        else
          v37 = (std::string *)v70.__r_.__value_.__r.__words[0];
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
        else
          size = v70.__r_.__value_.__l.__size_;
        v39 = std::string::append(&v71, (const std::string::value_type *)v37, size);
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v73 = v39->__r_.__value_.__r.__words[2];
        v72 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v73 >= 0)
          v41 = (const std::string::value_type *)&v72;
        else
          v41 = (const std::string::value_type *)v72;
        if (v73 >= 0)
          v42 = HIBYTE(v73);
        else
          v42 = *((_QWORD *)&v72 + 1);
        std::string::append(&v75, v41, v42);
        if (SHIBYTE(v73) < 0)
          operator delete((void *)v72);
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v70.__r_.__value_.__l.__data_);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
      }
      ++v74;
    }
    while (v74 < *(_DWORD *)(a1 + 80));
  }
  v43 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v72, "\n");
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = &v75;
  else
    v44 = (std::string *)v75.__r_.__value_.__r.__words[0];
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
  else
    v45 = v75.__r_.__value_.__l.__size_;
  v46 = std::string::insert(v43, 0, (const std::string::value_type *)v44, v45);
  *a2 = *v46;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v73) < 0)
    operator delete((void *)v72);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
}

void sub_1DE4B1F2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1DE4B20F8()
{
  JUMPOUT(0x1DE4B2060);
}

void sub_1DE4B2100()
{
  JUMPOUT(0x1DE4B2070);
}

void sub_1DE4B2108()
{
  JUMPOUT(0x1DE4B2080);
}

void sub_1DE4B2110()
{
  JUMPOUT(0x1DE4B2090);
}

void sub_1DE4B2118()
{
  JUMPOUT(0x1DE4B20A0);
}

void sub_1DE4B2120()
{
  JUMPOUT(0x1DE4B20B0);
}

void sub_1DE4B2128()
{
  JUMPOUT(0x1DE4B20C0);
}

void sub_1DE4B2130()
{
  JUMPOUT(0x1DE4B20D0);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoBackPropagate(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InfoBackPropagate((uint64_t)a1 + *(_QWORD *)(*a1 - 104), a2);
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  const char *v78;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  __int128 v88;
  __int128 v89;
  void *v90;
  __int128 v91;
  __int128 v92;
  void *v93;
  __int128 v94;
  __int128 v95;
  void *v96;
  _QWORD v97[4];
  void *v98;
  _QWORD v99[4];
  void *v100;
  _QWORD v101[4];
  void *v102;
  __int128 v103;
  __int128 v104;
  void *v105;
  __int128 v106;
  __int128 v107;
  void *v108;
  __int128 v109;
  __int128 v110;
  void *v111;
  __int128 v112;
  __int128 v113;

  v5 = *(unsigned int *)(a2 + 20);
  v6 = *(unsigned int *)(a1 + 96);
  v84 = ((int)v5 / (int)v6);
  if ((int)v5 % (int)v6)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x2BB, "batch_size % num_utts == 0", a5);
  LODWORD(v7) = a4;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v111, "PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 701, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v111, (uint64_t)"Running forward propagation for batch size = ", 45);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v111);
  }
  v14 = *(_QWORD *)(a3 + 32);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateForwardBuffers(a1, v7, v5, v14);
  v16 = *(_QWORD *)(a1 + 104);
  v86 = (int)v7;
  v80 = v7;
  if (*(_QWORD *)(a1 + 112) == v16)
  {
    v81 = 0;
    v7 = (int)v7;
  }
  else
  {
    v17 = *(_DWORD *)(v16 + 32 * (int)v7 + 16);
    if (v17 < 1)
    {
      v81 = 0;
      v7 = (int)v7;
    }
    else
    {
      if (v17 != (_DWORD)v5)
        kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x2C5, "boundary_[batch_index].Dim() == batch_size", v15);
      v7 = (int)v7;
      v18 = *(_QWORD *)(a1 + 128) + 48 * (int)v7;
      *(_QWORD *)(v18 + 32) = v14;
      v81 = 1;
      kaldi::CuMatrix<float>::Resize(v18, v6, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 48 * (int)v7 + 16), 1u, 0);
    }
  }
  v19 = *(_QWORD *)(a1 + 248) + 48 * v7;
  v85 = *(_QWORD *)(a1 + 344) + 48 * v7;
  v20 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  kaldi::CuMatrixBase<float>::AddMatMat<short>(v19, a2, 111, v20, (const char *)0x70, 1.0, 0.0);
  v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
  kaldi::CuMatrixBase<float>::AddVecToRows(v19, v21, v22, v23, v24, 1.0, 1.0);
  if ((int)v84 >= 1)
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v82 = a1 + 12;
    v83 = v19;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v111, v19, v28, v6, 0, *(_DWORD *)(a1 + 176));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v108, v19, v28, v6, (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v105, v19, v28, v6, (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
      v30 = *(_QWORD *)(a1 + 272) + 48 * (int)v7;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v102, v30, v28, v6, 0, *(_DWORD *)(v30 + 16));
      memset(v101, 0, sizeof(v101));
      v100 = &unk_1EA926508;
      memset(v99, 0, sizeof(v99));
      v98 = &unk_1EA926508;
      if (v29)
      {
        if (v81)
        {
          kaldi::CuMatrixBase<float>::SetZero(*(_QWORD *)(a1 + 128) + 48 * (int)v7);
          v31 = *(_QWORD *)(a1 + 128) + 48 * (int)v7;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v31, 0, *(_DWORD *)(v31 + 20), 0, *(_DWORD *)(a1 + 176));
          v99[0] = v97[0];
          *(_OWORD *)&v99[1] = *(_OWORD *)&v97[1];
          v99[3] = v97[3];
          v96 = &unk_1EA926508;
          memset(v97, 0, sizeof(v97));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
          v32 = *(_QWORD *)(a1 + 272) + 48 * (int)v7;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v32, v28 - v6, v6, 0, *(_DWORD *)(v32 + 16));
          v34 = *(_QWORD *)(a1 + 104) + 32 * v7;
          *(_QWORD *)&v95 = 0;
          v94 = 0uLL;
          v93 = &unk_1EA926538;
          if ((v6 + v28) > *(_DWORD *)(v34 + 16))
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v33);
          *(_QWORD *)&v94 = *(_QWORD *)(v34 + 8) + v27;
          DWORD2(v94) = v6;
          *(_QWORD *)&v95 = *(_QWORD *)(v34 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v98, (uint64_t)&v96, (uint64_t)&v93, 1, v33);
          v96 = &unk_1EA926508;
          memset(v97, 0, sizeof(v97));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
          v35 = *(_QWORD *)(a1 + 128) + 48 * (int)v86;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v35, 0, *(_DWORD *)(v35 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(v82 + *(_QWORD *)(*(_QWORD *)a1 - 24)));
          *(_OWORD *)&v101[1] = *(_OWORD *)&v97[1];
          v101[0] = v97[0];
          v101[3] = v97[3];
          v96 = &unk_1EA926508;
          memset(v97, 0, sizeof(v97));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v85, v28 - v6, v6, 0, *(_DWORD *)(v85 + 16));
          v37 = *(_QWORD *)(a1 + 104) + 32 * v86;
          *(_QWORD *)&v95 = 0;
          v94 = 0uLL;
          v93 = &unk_1EA926538;
          if ((v6 + v28) > *(_DWORD *)(v37 + 16))
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v36);
          *(_QWORD *)&v94 = *(_QWORD *)(v37 + 8) + v27;
          DWORD2(v94) = v6;
          *(_QWORD *)&v95 = *(_QWORD *)(v37 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v100, (uint64_t)&v96, (uint64_t)&v93, 1, v36);
          v96 = &unk_1EA926508;
          memset(v97, 0, sizeof(v97));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
        }
        else
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v85, v28 - v6, v6, 0, *(_DWORD *)(v85 + 16));
          *(_OWORD *)&v101[1] = *(_OWORD *)&v97[1];
          v101[0] = v97[0];
          v101[3] = v97[3];
          v96 = &unk_1EA926508;
          memset(v97, 0, sizeof(v97));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
          v40 = *(_QWORD *)(a1 + 272) + 48 * (int)v86;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v40, v28 - v6, v6, 0, *(_DWORD *)(v40 + 16));
          v99[0] = v97[0];
          *(_OWORD *)&v99[1] = *(_OWORD *)&v97[1];
          v99[3] = v97[3];
          v96 = &unk_1EA926508;
          memset(v97, 0, sizeof(v97));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
          v19 = v83;
        }
      }
      else
      {
        v38 = *(_QWORD *)(a1 + 8) + 48 * (int)v7;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v38, 0, *(_DWORD *)(v38 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(v82 + *(_QWORD *)(*(_QWORD *)a1 - 24)));
        *(_OWORD *)&v101[1] = *(_OWORD *)&v97[1];
        v101[0] = v97[0];
        v101[3] = v97[3];
        v96 = &unk_1EA926508;
        memset(v97, 0, sizeof(v97));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
        v39 = *(_QWORD *)(a1 + 8) + 48 * (int)v7;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v39, 0, *(_DWORD *)(v39 + 20), 0, *(_DWORD *)(a1 + 176));
        v99[0] = v97[0];
        *(_OWORD *)&v99[1] = *(_OWORD *)&v97[1];
        v99[3] = v97[3];
        v96 = &unk_1EA926508;
        memset(v97, 0, sizeof(v97));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
        v19 = v83;
        v29 = 0;
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v19, v28, v6, 0, *(_DWORD *)(v19 + 16));
      v41 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v96, (uint64_t)&v100, 111, v41, (const char *)0x70, 1.0, 1.0);
      v96 = &unk_1EA926508;
      memset(v97, 0, sizeof(v97));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
      if (*(_BYTE *)(a1 + 208))
      {
        v45 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
        if (!*(_DWORD *)(v45 + 20))
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v46);
        v47 = *(_QWORD *)(v45 + 8);
        v48 = *(_DWORD *)(v45 + 16);
        v49 = *(_QWORD *)(v45 + 32);
        v96 = &unk_1EA926538;
        v97[0] = v47;
        v97[2] = v49;
        v97[1] = v48;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v111, (uint64_t)&v98, 111, (uint64_t)&v96, v46, 1.0, 1.0);
        v50 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v50 + 20) <= 1u)
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v51);
        v52 = *(_QWORD *)(v50 + 8) + 4 * *(int *)(v50 + 24);
        v53 = *(_DWORD *)(v50 + 16);
        v54 = *(_QWORD *)(v50 + 32);
        v96 = &unk_1EA926538;
        v97[0] = v52;
        v97[2] = v54;
        v97[1] = v53;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v108, (uint64_t)&v98, 111, (uint64_t)&v96, v51, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v111, (uint64_t)&v111, v42, v43, v44);
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v108, (uint64_t)&v108, v55, v56, v57);
      kaldi::CuMatrixBase<float>::ApplyTanh((uint64_t)&v105, v58, v59, v60, v61);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v102, (uint64_t)&v111, 111, (uint64_t)&v105, (const char *)0x6F, 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v102, (uint64_t)&v108, 111, (uint64_t)&v98, (const char *)0x6F, 1.0, 1.0);
      v62 = *(float *)(a1 + 476);
      if (v62 > 0.0)
      {
        kaldi::CuMatrixBase<float>::ApplyCeiling((uint64_t)&v102, v62);
        kaldi::CuMatrixBase<float>::ApplyFloor((uint64_t)&v102, -*(float *)(a1 + 476));
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v96, v19, v28, v6, (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
      if (*(_BYTE *)(a1 + 208))
      {
        v66 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v66 + 20) <= 2u)
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v67);
        v68 = *(_QWORD *)(v66 + 8) + 8 * *(int *)(v66 + 24);
        v69 = *(_DWORD *)(v66 + 16);
        v70 = *(_QWORD *)(v66 + 32);
        v93 = &unk_1EA926538;
        *(_QWORD *)&v94 = v68;
        *(_QWORD *)&v95 = v70;
        *((_QWORD *)&v94 + 1) = v69;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v96, (uint64_t)&v102, 111, (uint64_t)&v93, v67, 1.0, 1.0);
      }
      kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)&v96, (uint64_t)&v96, v63, v64, v65);
      v71 = *(_QWORD *)(a1 + 296) + 48 * (int)v86;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v93, v71, v28, v6, 0, *(_DWORD *)(v71 + 16));
      kaldi::CuMatrixBase<float>::Tanh((uint64_t)&v93, (uint64_t)&v102, v72, v73, v74);
      v75 = *(_QWORD *)(a1 + 320) + 48 * (int)v86;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v90, v75, v28, v6, 0, *(_DWORD *)(v75 + 16));
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v90, (uint64_t)&v96, 111, (uint64_t)&v93, (const char *)0x6F, 1.0, 0.0);
      if (*(_BYTE *)(a1 + 224))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v87, v85, v28, v6, 0, *(_DWORD *)(v85 + 16));
        v76 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
        kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v87, (uint64_t)&v90, 111, v76, (const char *)0x70, 1.0, 0.0);
      }
      else
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v87, v85, v28, v6, 0, *(_DWORD *)(v85 + 16));
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v87, (uint64_t)&v90, 111, v77, v78);
      }
      v87 = &unk_1EA926508;
      v88 = 0u;
      v89 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v87);
      v90 = &unk_1EA926508;
      v91 = 0u;
      v92 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v90);
      v93 = &unk_1EA926508;
      v94 = 0u;
      v95 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v93);
      v96 = &unk_1EA926508;
      memset(v97, 0, sizeof(v97));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v96);
      v98 = &unk_1EA926508;
      memset(v99, 0, sizeof(v99));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v98);
      v100 = &unk_1EA926508;
      memset(v101, 0, sizeof(v101));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v100);
      v102 = &unk_1EA926508;
      v103 = 0u;
      v104 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v102);
      v105 = &unk_1EA926508;
      v106 = 0u;
      v107 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v105);
      v108 = &unk_1EA926508;
      v109 = 0u;
      v110 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v108);
      v111 = &unk_1EA926508;
      v112 = 0u;
      v113 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v111);
      ++v29;
      v28 += v6;
      v27 += 4 * (int)v6;
      v7 = v86;
    }
    while (v84 != v29);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a3, v85, 111, v25, v26);
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SaveLastState(a1, v80);
}

void sub_1DE4B2DC4(_Unwind_Exception *a1)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&STACK[0x210]);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateForwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD v9[35];

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateForwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1397, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating forward buffers for batch ", 37);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 248) + 48 * a2, a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 272) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 296) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 320) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 344) + 48 * a2, a3, *(unsigned int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12), 0, 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 248) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 272) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 296) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 320) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 344) + 48 * a2 + 32) = a4;
}

void sub_1DE4B31B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SaveLastState(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  double result;
  void *v13;
  __int128 v14;
  __int128 v15;
  void *v16;
  __int128 v17;
  __int128 v18;

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v16, "SaveLastState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1700, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Saving last output and cell state for batch ", 44);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v16);
  }
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 272) + 48 * a2 + 20) - *(_DWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 8) + 48 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v16, v5, 0, *(_DWORD *)(v5 + 20), 0, *(_DWORD *)(a1 + 176));
  v6 = *(_QWORD *)(a1 + 272) + 48 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v13, v6, v4, *(_DWORD *)(a1 + 96), 0, *(_DWORD *)(v6 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v16, (uint64_t)&v13, 111, v7, v8);
  v13 = &unk_1EA926508;
  v14 = 0u;
  v15 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v13);
  v16 = &unk_1EA926508;
  v17 = 0u;
  v18 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v16);
  v9 = 3 * a2;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v16, *(_QWORD *)(a1 + 8) + 16 * v9, 0, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 16 * v9 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v13, *(_QWORD *)(a1 + 344) + 16 * v9, v4, *(_DWORD *)(a1 + 96), 0, *(_DWORD *)(*(_QWORD *)(a1 + 344) + 16 * v9 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v16, (uint64_t)&v13, 111, v10, v11);
  v13 = &unk_1EA926508;
  v14 = 0u;
  v15 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v13);
  v16 = &unk_1EA926508;
  v17 = 0u;
  v18 = 0u;
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v16).n128_u64[0];
  return result;
}

void sub_1DE4B338C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int128 a10, __int128 a11, uint64_t a12, __int128 a13, __int128 a14)
{
  uint64_t v14;

  a9 = v14 + 16;
  a10 = 0u;
  a11 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a9);
  a12 = v14 + 16;
  a13 = 0u;
  a14 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a12);
  _Unwind_Resume(a1);
}

double `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 128), a2, a3, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if (*(_DWORD *)(a1 + 96) == 1)
  {
    v6 = *(_QWORD *)(a3 + 24);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateForwardBuffers(a1, 0, 1, v6);
    v8 = *(_QWORD *)(a1 + 104);
    if (*(_QWORD *)(a1 + 112) != v8)
    {
      v9 = *(_DWORD *)(v8 + 16);
      if (v9 >= 1)
      {
        if (v9 != 1)
          kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x325, "boundary_[0].Dim() == 1", v7);
        v10 = *(_QWORD *)(a1 + 128);
        *(_QWORD *)(v10 + 32) = v6;
        kaldi::CuMatrix<float>::Resize(v10, 1, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 16), 1u, 0);
      }
    }
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
    kaldi::CuVectorBase<float>::AddMatVec<short>();
  }
  kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x320, "ropts_.num_sequences == 1", v5);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 136), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc()
{
  _QWORD *v0;
  _QWORD v1[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetUnitOutputFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 876);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

{
  _QWORD *v0;
  _QWORD v1[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "GetUnitOutputFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 881);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"GetUnitOutputFnc", 16);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, " Not implemented!");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc()
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc();
}

{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetUnitOutputFnc();
}

double kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int *v103;
  BOOL v104;
  unsigned int *v105;
  double result;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  _QWORD v121[4];
  void *v122;
  _QWORD v123[4];
  void *v124;
  _QWORD v125[4];
  void *v126;
  _QWORD v127[4];
  void *v128;
  _QWORD v129[4];
  void *v130;
  _QWORD v131[4];
  void *v132;
  __int128 v133;
  __int128 v134;
  void *v135;
  __int128 v136;
  __int128 v137;
  void *v138;
  __int128 v139;
  __int128 v140;
  void *v141;
  __int128 v142;
  __int128 v143;
  void *v144;
  __int128 v145;
  __int128 v146;
  void *v147;
  __int128 v148;
  __int128 v149;
  void *v150;
  __int128 v151;
  __int128 v152;
  void *v153;
  __int128 v154;
  __int128 v155;
  void *v156;
  __int128 v157;
  __int128 v158;
  void *v159;
  __int128 v160;
  __int128 v161;
  void *v162;
  __int128 v163;
  __int128 v164;
  void *v165;
  __int128 v166;
  __int128 v167;

  v10 = *(unsigned int *)(a2 + 20);
  v11 = *(unsigned int *)(a1 + 96);
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::EnsureTrainingBuffers((uint64_t *)a1);
  if ((int)v10 % (int)v11)
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x380, "batch_size % num_utts == 0", v12);
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v165, "BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 898, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v165, (uint64_t)"Running backward propagation for batch size = ", 46);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", which contains ", 17);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" frames each from ", 18);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v165);
  }
  v109 = ((int)v10 / (int)v11);
  if ((int)v10 / (int)v11 < 2)
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x384, "frames_in_batch > 1 && \"LSTM backprop will not work with batches of single frames.\"", v12);
  if (a5)
    v16 = a5;
  else
    v16 = a4;
  v17 = *(_QWORD *)(v16 + 32);
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateBackwardBuffers(a1, a6, v10, v17);
  v20 = a6;
  v21 = *(_QWORD *)(a1 + 248);
  v22 = 3 * a6;
  v23 = *(_QWORD *)(a1 + 440) + 48 * a6;
  v24 = *(_QWORD *)(a1 + 368);
  v111 = *(_QWORD *)(a1 + 416);
  v112 = v22;
  v25 = *(_QWORD *)(a1 + 104);
  v115 = v20;
  if (*(_QWORD *)(a1 + 112) == v25 || (v26 = *(_DWORD *)(v25 + 32 * v20 + 16), v26 < 1))
  {
    v113 = 0;
  }
  else
  {
    if (v26 != (_DWORD)v10)
      kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x390, "boundary_[batch_index].Dim() == batch_size", v19);
    v27 = *(_QWORD *)(a1 + 128) + 48 * (int)v20;
    *(_QWORD *)(v27 + 32) = v17;
    v113 = 1;
    kaldi::CuMatrix<float>::Resize(v27, v11, *(unsigned int *)(v23 + 16), 1u, 0);
  }
  v28 = v21 + 16 * v112;
  v114 = v24 + 16 * v112;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)v114, a4, 111, v18, v19);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v165, v28, 0, *(_DWORD *)(v28 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v162, v28, 0, *(_DWORD *)(v28 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v159, v28, 0, *(_DWORD *)(v28 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v156, v28, 0, *(_DWORD *)(v28 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v153, v23, 0, *(_DWORD *)(v23 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v150, v23, 0, *(_DWORD *)(v23 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v147, v23, 0, *(_DWORD *)(v23 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v144, v23, 0, *(_DWORD *)(v23 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v153, (uint64_t)&v165, (uint64_t)&v156, v29, v30);
  v31 = v10 - v11;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v141, (uint64_t)&v150, v11, v31, 0, SDWORD2(v151));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v138, (uint64_t)&v162, v11, v31, 0, SDWORD2(v163));
  v32 = *(_QWORD *)(a1 + 272) + 48 * (int)v115;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v135, v32, 0, v31, 0, *(_DWORD *)(v32 + 16));
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v141, (uint64_t)&v138, (uint64_t)&v135, v33, v34);
  v135 = &unk_1EA926508;
  v136 = 0u;
  v137 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v135);
  v138 = &unk_1EA926508;
  v139 = 0u;
  v140 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v138);
  v141 = &unk_1EA926508;
  v142 = 0u;
  v143 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v141);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v141, (uint64_t)&v150, 0, v11, 0, SDWORD2(v151));
  kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v141);
  v141 = &unk_1EA926508;
  v142 = 0u;
  v143 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v141);
  v108 = v23;
  v107 = a5;
  if (v113)
  {
    v37 = *(_QWORD *)(a1 + 128) + 48 * (int)v115;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v141, v37, 0, *(_DWORD *)(v37 + 20), 0, *(_DWORD *)(a1 + 176));
    kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v141);
    v38 = v109 - 1;
    v39 = v11;
    v40 = 4 * (int)v11;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v138, (uint64_t)&v150, v39, v11, 0, SDWORD2(v151));
      v42 = *(_QWORD *)(a1 + 104) + 32 * v115;
      *(_QWORD *)&v137 = 0;
      v136 = 0uLL;
      v135 = &unk_1EA926538;
      v39 += v11;
      if (v39 > *(_DWORD *)(v42 + 16))
        kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v41);
      *(_QWORD *)&v136 = *(_QWORD *)(v42 + 8) + v40;
      DWORD2(v136) = v11;
      *(_QWORD *)&v137 = *(_QWORD *)(v42 + 24);
      kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v138, (uint64_t)&v141, (uint64_t)&v135, 0, v41);
      v40 += 4 * (int)v11;
      v138 = &unk_1EA926508;
      --v38;
      v139 = 0u;
      v140 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v138);
    }
    while (v38);
    v141 = &unk_1EA926508;
    v142 = 0u;
    v143 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v141);
  }
  kaldi::CuMatrixBase<float>::DiffSigmoid((uint64_t)&v147, (uint64_t)&v159, *(_QWORD *)(a1 + 296) + 48 * (int)v115, v35, v36);
  kaldi::CuMatrixBase<float>::DiffTanh((uint64_t)&v144, (uint64_t)&v156, (uint64_t)&v165, v43, v44);
  v45 = v111 + 16 * v112;
  kaldi::CuMatrixBase<float>::DiffTanh(v45, *(_QWORD *)(a1 + 296) + 48 * (int)v115, (uint64_t)&v159, v46, v47);
  v48 = (int)v109 - 1;
  v110 = (int)v109 - 1;
  do
  {
    v49 = v48 * (int)v11;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v141, v114, v48 * v11, v11, 0, *(_DWORD *)(v114 + 16));
    v50 = v115;
    v51 = *(_QWORD *)(a1 + 392) + 48 * (int)v115;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v138, v51, v48 * v11, v11, 0, *(_DWORD *)(v51 + 16));
    if (*(_BYTE *)(a1 + 224))
    {
      v54 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v138, (uint64_t)&v141, 111, v54, (const char *)0x6F, 1.0, 0.0);
    }
    else
    {
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v138, (uint64_t)&v141, 111, v52, v53);
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v135, (uint64_t)&v147, v49, v11, 0, SDWORD2(v148));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v135, (uint64_t)&v138, v55, v56, v57);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v132, v45, v49, v11, 0, *(_DWORD *)(v45 + 16));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v132, (uint64_t)&v138, v58, v59, v60);
    if (*(_BYTE *)(a1 + 208))
    {
      v61 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
      if (*(_DWORD *)(v61 + 20) <= 2u)
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v62);
      v63 = *(_QWORD *)(v61 + 8) + 8 * *(int *)(v61 + 24);
      v64 = *(_DWORD *)(v61 + 16);
      v65 = *(_QWORD *)(v61 + 32);
      v130 = &unk_1EA926538;
      v131[0] = v63;
      v131[2] = v65;
      v131[1] = v64;
      kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v132, (uint64_t)&v135, 111, (uint64_t)&v130, v62, 1.0, 1.0);
    }
    if (v48 < v110)
    {
      v66 = (int)v11;
      v67 = v66 + v66 * v48;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v130, v45, v66 + v66 * v48, v11, 0, *(_DWORD *)(v45 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v128, (uint64_t)&v162, v67, v11, 0, SDWORD2(v163));
      if (v113)
      {
        v68 = *(_QWORD *)(a1 + 128) + 48 * (int)v115;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v126, v68, 0, *(_DWORD *)(v68 + 20), 0, *(_DWORD *)(a1 + 176));
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v126);
        v70 = *(_QWORD *)(a1 + 104) + 32 * v115;
        memset(v125, 0, 24);
        v124 = &unk_1EA926538;
        if ((v11 + v67) > *(_DWORD *)(v70 + 16))
          kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v69);
        v125[0] = *(_QWORD *)(v70 + 8) + 4 * v67;
        LODWORD(v125[1]) = v11;
        v125[2] = *(_QWORD *)(v70 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v126, (uint64_t)&v130, (uint64_t)&v124, 1, v69);
        *(_OWORD *)&v131[1] = *(_OWORD *)&v127[1];
        v131[0] = v127[0];
        v131[3] = v127[3];
        v71 = *(_QWORD *)(a1 + 128) + 48 * (int)v115;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, v71, 0, *(_DWORD *)(v71 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v124);
        v73 = *(_QWORD *)(a1 + 104) + 32 * v115;
        memset(v123, 0, 24);
        v122 = &unk_1EA926538;
        if ((v11 + v67) > *(_DWORD *)(v73 + 16))
          kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v72);
        v123[0] = *(_QWORD *)(v73 + 8) + 4 * v67;
        LODWORD(v123[1]) = v11;
        v123[2] = *(_QWORD *)(v73 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v124, (uint64_t)&v128, (uint64_t)&v122, 1, v72);
        v129[0] = v125[0];
        *(_OWORD *)&v129[1] = *(_OWORD *)&v125[1];
        v129[3] = v125[3];
        v124 = &unk_1EA926508;
        memset(v125, 0, sizeof(v125));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v124);
        v126 = &unk_1EA926508;
        memset(v127, 0, sizeof(v127));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v126);
        v50 = v115;
      }
      if (*(_BYTE *)(a1 + 208))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v126, (uint64_t)&v150, v67, v11, 0, SDWORD2(v151));
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v124, (uint64_t)&v153, v67, v11, 0, SDWORD2(v154));
        if (v113)
        {
          v74 = *(_QWORD *)(a1 + 128) + 48 * (int)v50;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v122, v74, 0, *(_DWORD *)(v74 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v122);
          v76 = *(_QWORD *)(a1 + 104) + 32 * v50;
          memset(v121, 0, 24);
          v120 = &unk_1EA926538;
          if ((v11 + v67) > *(_DWORD *)(v76 + 16))
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v75);
          v121[0] = *(_QWORD *)(v76 + 8) + 4 * v67;
          LODWORD(v121[1]) = v11;
          v121[2] = *(_QWORD *)(v76 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v122, (uint64_t)&v126, (uint64_t)&v120, 1, v75);
          *(_OWORD *)&v127[1] = *(_OWORD *)&v123[1];
          v127[0] = v123[0];
          v127[3] = v123[3];
          v77 = *(_QWORD *)(a1 + 128) + 48 * (int)v50;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v120, v77, 0, *(_DWORD *)(v77 + 20), (const char *)(3 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
          kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v120);
          v79 = *(_QWORD *)(a1 + 104) + 32 * v50;
          v118 = 0;
          v119 = 0;
          v117 = 0;
          v116 = &unk_1EA926538;
          if ((v11 + v67) > *(_DWORD *)(v79 + 16))
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v78);
          v117 = *(_QWORD *)(v79 + 8) + 4 * v67;
          LODWORD(v118) = v11;
          v119 = *(_QWORD *)(v79 + 24);
          kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v120, (uint64_t)&v124, (uint64_t)&v116, 1, v78);
          v125[0] = v121[0];
          *(_OWORD *)&v125[1] = *(_OWORD *)&v121[1];
          v125[3] = v121[3];
          v120 = &unk_1EA926508;
          memset(v121, 0, sizeof(v121));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v120);
          v122 = &unk_1EA926508;
          memset(v123, 0, sizeof(v123));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v122);
        }
        v80 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
        if (*(_DWORD *)(v80 + 20) <= 1u)
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v81);
        v82 = *(_QWORD *)(v80 + 8) + 4 * *(int *)(v80 + 24);
        v83 = *(_DWORD *)(v80 + 16);
        v84 = *(_QWORD *)(v80 + 32);
        v122 = &unk_1EA926538;
        v123[0] = v82;
        v123[2] = v84;
        v123[1] = v83;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v132, (uint64_t)&v126, 111, (uint64_t)&v122, v81, 1.0, 1.0);
        v85 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
        if (!*(_DWORD *)(v85 + 20))
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v86);
        v87 = *(_QWORD *)(v85 + 8);
        v88 = *(_DWORD *)(v85 + 16);
        v89 = *(_QWORD *)(v85 + 32);
        v122 = &unk_1EA926538;
        v123[0] = v87;
        v123[2] = v89;
        v123[1] = v88;
        kaldi::CuMatrixBase<float>::AddMatDiagVec((uint64_t)&v132, (uint64_t)&v124, 111, (uint64_t)&v122, v86, 1.0, 1.0);
        v124 = &unk_1EA926508;
        memset(v125, 0, sizeof(v125));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v124);
        v126 = &unk_1EA926508;
        memset(v127, 0, sizeof(v127));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v126);
      }
      kaldi::CuMatrixBase<float>::AddMatEwpMat((uint64_t)&v132, (uint64_t)&v130, 111, (uint64_t)&v128, (const char *)0x6F, 1.0, 1.0);
      v128 = &unk_1EA926508;
      memset(v129, 0, sizeof(v129));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v128);
      v130 = &unk_1EA926508;
      memset(v131, 0, sizeof(v131));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v130);
      v50 = v115;
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v130, (uint64_t)&v153, v49, v11, 0, SDWORD2(v154));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v130, (uint64_t)&v132, v90, v91, v92);
    v130 = &unk_1EA926508;
    memset(v131, 0, sizeof(v131));
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v130);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v130, (uint64_t)&v144, v49, v11, 0, SDWORD2(v145));
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v130, (uint64_t)&v132, v93, v94, v95);
    v130 = &unk_1EA926508;
    memset(v131, 0, sizeof(v131));
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v130);
    if (v48 <= 0)
    {
      v102 = v48 - 1;
    }
    else
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v130, (uint64_t)&v150, v49, v11, 0, SDWORD2(v151));
      kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v130, (uint64_t)&v132, v96, v97, v98);
      v130 = &unk_1EA926508;
      memset(v131, 0, sizeof(v131));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v130);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v130, v108, v49, v11, 0, *(_DWORD *)(v108 + 16));
      if (v113)
      {
        v99 = *(_QWORD *)(a1 + 128) + 48 * (int)v50;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v128, v99, 0, *(_DWORD *)(v99 + 20), 0, v131[1]);
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v128);
        v101 = *(_QWORD *)(a1 + 104) + 32 * v50;
        memset(v127, 0, 24);
        v126 = &unk_1EA926538;
        if ((v11 + v49) > *(_DWORD *)(v101 + 16))
          kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v100);
        v127[0] = *(_QWORD *)(v101 + 8) + 4 * v49;
        LODWORD(v127[1]) = v11;
        v127[2] = *(_QWORD *)(v101 + 24);
        kaldi::CuMatrixBase<float>::CopySelectedRows((uint64_t)&v128, (uint64_t)&v130, (uint64_t)&v126, 1, v100);
        *(_OWORD *)&v131[1] = *(_OWORD *)&v129[1];
        v131[0] = v129[0];
        v131[3] = v129[3];
        v128 = &unk_1EA926508;
        memset(v129, 0, sizeof(v129));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v128);
      }
      v102 = v48 - 1;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v128, v114, v11 * (v48 - 1), v11, 0, *(_DWORD *)(v114 + 16));
      v103 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
      kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)&v128, (uint64_t)&v130, 111, v103, (const char *)0x6F, 1.0, 1.0);
      v128 = &unk_1EA926508;
      memset(v129, 0, sizeof(v129));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v128);
      v130 = &unk_1EA926508;
      memset(v131, 0, sizeof(v131));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v130);
    }
    v132 = &unk_1EA926508;
    v133 = 0u;
    v134 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v132);
    v135 = &unk_1EA926508;
    v136 = 0u;
    v137 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v135);
    v138 = &unk_1EA926508;
    v139 = 0u;
    v140 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v138);
    v141 = &unk_1EA926508;
    v142 = 0u;
    v143 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v141);
    v104 = v48 <= 0;
    v48 = v102;
  }
  while (!v104);
  if (v107)
  {
    v105 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
    kaldi::CuMatrixBase<float>::AddMatMat<short>(v107, v108, 111, v105, (const char *)0x6F, 1.0, 0.0);
  }
  v144 = &unk_1EA926508;
  v145 = 0u;
  v146 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v144);
  v147 = &unk_1EA926508;
  v148 = 0u;
  v149 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v147);
  v150 = &unk_1EA926508;
  v151 = 0u;
  v152 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v150);
  v153 = &unk_1EA926508;
  v154 = 0u;
  v155 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v153);
  v156 = &unk_1EA926508;
  v157 = 0u;
  v158 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v156);
  v159 = &unk_1EA926508;
  v160 = 0u;
  v161 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v159);
  v162 = &unk_1EA926508;
  v163 = 0u;
  v164 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v162);
  v165 = &unk_1EA926508;
  v166 = 0u;
  v167 = 0u;
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v165).n128_u64[0];
  return result;
}

void sub_1DE4B4C80(_Unwind_Exception *a1)
{
  STACK[0x220] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x228] = 0u;
  *(_OWORD *)&STACK[0x238] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x220]);
  STACK[0x248] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x250] = 0u;
  *(_OWORD *)&STACK[0x260] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x248]);
  STACK[0x270] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x278] = 0u;
  *(_OWORD *)&STACK[0x288] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x270]);
  STACK[0x298] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x2A0] = 0u;
  *(_OWORD *)&STACK[0x2B0] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x298]);
  STACK[0x2C0] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x2C8] = 0u;
  *(_OWORD *)&STACK[0x2D8] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x2C0]);
  STACK[0x2E8] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x2F0] = 0u;
  *(_OWORD *)&STACK[0x300] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x2E8]);
  STACK[0x310] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x318] = 0u;
  *(_OWORD *)&STACK[0x328] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x310]);
  STACK[0x338] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x340] = 0u;
  *(_OWORD *)&STACK[0x350] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x338]);
  STACK[0x360] = (unint64_t)&unk_1EA926508;
  *(_OWORD *)&STACK[0x368] = 0u;
  *(_OWORD *)&STACK[0x378] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&STACK[0x360]);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateBackwardBuffers(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD v9[35];

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9, "AllocateBackwardBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1413, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Allocating backward buffers for batch ", 38);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; batch size = ", 15);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v9);
  }
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 368) + 48 * a2, a3, *(unsigned int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 392) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 416) + 48 * a2, a3, *(unsigned int *)(a1 + 176), 0, 0);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 440) + 48 * a2, a3, (4 * *(_DWORD *)(a1 + 176)), 0, 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 368) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 392) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 416) + 48 * a2 + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 440) + 48 * a2 + 32) = a4;
}

void sub_1DE4B5374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

double `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BackpropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 144), a2, a3, a4, a5, a6);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v7;
  int v8;
  int v9;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  __int128 v47;
  __int128 v48;
  void *v49;
  __int128 v50;
  __int128 v51;
  void *v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  __int128 v56;
  __int128 v57;
  void *v58;
  __int128 v59;
  __int128 v60;

  if (*(_DWORD *)(a1 + 80) <= (int)a5)
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x40D, "batch_index < ropts_.num_subbatches", a5);
  v7 = *(_DWORD *)(a1 + 96);
  v8 = *(_DWORD *)(a2 + 20);
  if (v8 % v7)
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x411, "batch_size % num_utts == 0", a5);
  v9 = (int)a5;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v58, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1043, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Accumulating gradients for batch id = ", 38);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v58);
  }
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateGradients(a1);
  v14 = *(_QWORD *)(a1 + 272);
  v15 = *(_QWORD *)(a1 + 440) + 48 * v9;
  v16 = *(float *)(a1 + 60);
  *(_DWORD *)(*(_QWORD *)(a1 + 480) + 4 * v9) = v8;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v58, v15, 0, *(_DWORD *)(v15 + 20), 0, *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v55, v15, 0, *(_DWORD *)(v15 + 20), (const char *)*(unsigned int *)(a1 + 176), *(_DWORD *)(a1 + 176));
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v52, v15, 0, *(_DWORD *)(v15 + 20), (const char *)(2 * *(_DWORD *)(a1 + 176)), *(_DWORD *)(a1 + 176));
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, v9) + 32) = a4;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, v9) + 32) = a4;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, v9) + 24) = a4;
  if (*(_BYTE *)(a1 + 208))
    *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v9) + 32) = a4;
  if (*(_BYTE *)(a1 + 224))
    *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, v9) + 32) = a4;
  v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, v9);
  kaldi::CuMatrixBase<float>::AddMatMat(v17, v15, CblasTrans, a2, (const char *)0x6F, 1.0, v16);
  v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, v9);
  v19 = v8 - v7;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, v15, v7, v8 - v7, 0, *(_DWORD *)(v15 + 16));
  v20 = *(_QWORD *)(a1 + 344) + 48 * v9;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, v20, 0, v8 - v7, 0, *(_DWORD *)(v20 + 16));
  kaldi::CuMatrixBase<float>::AddMatMat(v18, (uint64_t)&v49, CblasTrans, (uint64_t)&v46, (const char *)0x6F, 1.0, v16);
  v46 = &unk_1EA926508;
  v47 = 0u;
  v48 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
  v49 = &unk_1EA926508;
  v50 = 0u;
  v51 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v49);
  v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, v9);
  kaldi::CuVectorBase<float>::AddRowSumMat(v21, v15, 1.0, v16, v22, v23, v24);
  if (*(_BYTE *)(a1 + 208))
  {
    v25 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v9);
    if (!*(_DWORD *)(v25 + 20))
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v26);
    v27 = *(_QWORD *)(v25 + 8);
    v28 = *(_DWORD *)(v25 + 16);
    v29 = *(_QWORD *)(v25 + 32);
    v42 = &unk_1EA926538;
    v43 = v27;
    v45 = v29;
    v44 = v28;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, (uint64_t)&v58, v7, v19, 0, SDWORD2(v59));
    v30 = v14 + 48 * v9;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, v30, 0, v19, 0, *(_DWORD *)(v30 + 16));
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v42, (uint64_t)&v49, 112, (uint64_t)&v46, 111, 1.0, v16);
    v46 = &unk_1EA926508;
    v47 = 0u;
    v48 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
    v49 = &unk_1EA926508;
    v50 = 0u;
    v51 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v49);
    v31 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v9);
    if (*(_DWORD *)(v31 + 20) <= 1u)
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v32);
    v33 = *(_QWORD *)(v31 + 8) + 4 * *(int *)(v31 + 24);
    v34 = *(_DWORD *)(v31 + 16);
    v35 = *(_QWORD *)(v31 + 32);
    v42 = &unk_1EA926538;
    v43 = v33;
    v45 = v35;
    v44 = v34;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, (uint64_t)&v55, v7, v19, 0, SDWORD2(v56));
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, v14 + 48 * v9, 0, v19, 0, *(_DWORD *)(v30 + 16));
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v42, (uint64_t)&v49, 112, (uint64_t)&v46, 111, 1.0, v16);
    v46 = &unk_1EA926508;
    v47 = 0u;
    v48 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
    v49 = &unk_1EA926508;
    v50 = 0u;
    v51 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v49);
    v36 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v9);
    if (*(_DWORD *)(v36 + 20) <= 2u)
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v37);
    v38 = *(_QWORD *)(v36 + 8) + 8 * *(int *)(v36 + 24);
    v39 = *(_DWORD *)(v36 + 16);
    v40 = *(_QWORD *)(v36 + 32);
    v49 = &unk_1EA926538;
    *(_QWORD *)&v50 = v38;
    *(_QWORD *)&v51 = v40;
    *((_QWORD *)&v50 + 1) = v39;
    kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)&v49, (uint64_t)&v52, 112, v14 + 48 * v9, 111, 1.0, v16);
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v41 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, v9);
    kaldi::CuMatrixBase<float>::AddMatMat(v41, *(_QWORD *)(a1 + 368) + 48 * v9, CblasTrans, *(_QWORD *)(a1 + 320) + 48 * v9, (const char *)0x6F, 1.0, v16);
  }
  v52 = &unk_1EA926508;
  v53 = 0u;
  v54 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v52);
  v55 = &unk_1EA926508;
  v56 = 0u;
  v57 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v55);
  v58 = &unk_1EA926508;
  v59 = 0u;
  v60 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v58);
}

void sub_1DE4B5998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,__int128 a24,__int128 a25,void *a26,__int128 a27,__int128 a28,void *a29,__int128 a30,__int128 a31)
{
  a23 = &unk_1EA926508;
  a24 = 0u;
  a25 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a23);
  a26 = &unk_1EA926508;
  a27 = 0u;
  a28 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a26);
  a29 = &unk_1EA926508;
  a30 = 0u;
  a31 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a29);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateGradients(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  _QWORD *v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  _QWORD *v36;
  uint64_t j;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  _QWORD *v44;
  void **v45;
  uint64_t v46;
  int v47;
  _QWORD *v48;
  void *__p[2];
  unsigned __int8 v50;
  _QWORD v51[36];

  if (*(_BYTE *)(a1 + 528))
    return;
  v2 = *(_DWORD *)(a1 + 80);
  if (v2 > 1)
    v3 = (v2 + 1);
  else
    v3 = 1;
  if (*(_QWORD *)(a1 + 544) != *(_QWORD *)(a1 + 536))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v51, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1332);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v51, "input_weights_gradient_.size() == 0");
    goto LABEL_58;
  }
  if (*(_QWORD *)(a1 + 568) != *(_QWORD *)(a1 + 560))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v51, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1333);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v51, "recurrent_weights_gradient_.size() == 0");
    goto LABEL_58;
  }
  if (*(_QWORD *)(a1 + 616) != *(_QWORD *)(a1 + 608))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v51, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1334);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v51, "bias_gradient_.size() == 0");
    goto LABEL_58;
  }
  v47 = *(_DWORD *)(a1 + 156);
  if (*(_BYTE *)(a1 + 208) && *(_QWORD *)(a1 + 592) != *(_QWORD *)(a1 + 584))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v51, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1335);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v51, "peephole_weights_gradient_.size() == 0");
    goto LABEL_58;
  }
  if (*(_BYTE *)(a1 + 224) && *(_QWORD *)(a1 + 640) != *(_QWORD *)(a1 + 632))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v51, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1336);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v51, "projection_weights_gradient_.size() == 0");
LABEL_58:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v51);
  }
  v4 = (_QWORD *)(a1 + 560);
  v5 = (_QWORD *)(a1 + 608);
  v48 = (_QWORD *)(a1 + 536);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 536, (int)v3);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 560, (int)v3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize(a1 + 608, (int)v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 656), (int)v3);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 680), (int)v3);
  std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 728), (int)v3);
  v6 = a1 + 12;
  if ((int)v3 >= 1)
  {
    v7 = 0;
    v8 = a1 + 8;
    do
    {
      v9 = operator new();
      kaldi::CuMatrix<float>::CuMatrix(v9, (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v8 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 0, 0, 0);
      v10 = *(_QWORD *)(*v48 + 8 * v7);
      *(_QWORD *)(*v48 + 8 * v7) = v9;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
      v11 = operator new();
      kaldi::CuMatrix<float>::CuMatrix(v11, (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 0, 0, 0);
      v12 = *(_QWORD *)(*v4 + 8 * v7);
      *(_QWORD *)(*v4 + 8 * v7) = v11;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      v13 = (_QWORD *)operator new();
      v14 = (4 * *(_DWORD *)(a1 + 176));
      v13[2] = 0;
      v13[3] = 0;
      *v13 = &unk_1EA92DFD8;
      v13[1] = 0;
      kaldi::CuVector<float>::Resize((uint64_t)v13, v14, 0, v15, v16);
      v17 = *(_QWORD *)(*v5 + 8 * v7);
      *(_QWORD *)(*v5 + 8 * v7) = v13;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      if ((v47 & 0xFFFFFFFE) == 2)
      {
        kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 656) + 48 * v7, (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v8 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 1u, 0);
        kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 680) + 48 * v7, (4 * *(_DWORD *)(a1 + 176)), *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), 1u, 0);
        kaldi::CuVector<float>::Resize(*(_QWORD *)(a1 + 728) + 32 * v7, (4 * *(_DWORD *)(a1 + 176)), 1u, v18, v19);
        if (*(_DWORD *)(a1 + 156) == 3)
        {
          kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 656) + 48 * v7, v20, v21, v22, v23, 1.0);
          kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 680) + 48 * v7, v24, v25, v26, v27, 1.0);
          kaldi::CuVectorBase<float>::Set(*(_QWORD *)(a1 + 728) + 32 * v7, 1.0);
        }
      }
      ++v7;
    }
    while (v7 != v3);
  }
  if (*(_BYTE *)(a1 + 208))
  {
    v28 = (_QWORD *)(a1 + 584);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 584, (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 704), (int)v3);
    if ((int)v3 >= 1)
    {
      for (i = 0; i != v3; ++i)
      {
        v30 = operator new();
        kaldi::CuMatrix<float>::CuMatrix(v30, 3, *(unsigned int *)(a1 + 176), 0, 0, 0);
        v31 = *(_QWORD *)(*v28 + 8 * i);
        *(_QWORD *)(*v28 + 8 * i) = v30;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
        if ((v47 & 0xFFFFFFFE) == 2)
        {
          kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 704) + 48 * i, 3, *(unsigned int *)(a1 + 176), 1u, 0);
          if (*(_DWORD *)(a1 + 156) == 3)
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 704) + 48 * i, v32, v33, v34, v35, 1.0);
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v36 = (_QWORD *)(a1 + 632);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 632, (int)v3);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 752), (int)v3);
    if ((int)v3 >= 1)
    {
      for (j = 0; j != v3; ++j)
      {
        v38 = operator new();
        kaldi::CuMatrix<float>::CuMatrix(v38, *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), *(unsigned int *)(a1 + 176), 0, 0, 0);
        v39 = *(_QWORD *)(*v36 + 8 * j);
        *(_QWORD *)(*v36 + 8 * j) = v38;
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 24))(v39);
        if ((v47 & 0xFFFFFFFE) == 2)
        {
          kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 752) + 48 * j, *(unsigned int *)(v6 + *(_QWORD *)(*(_QWORD *)a1 - 24)), *(unsigned int *)(a1 + 176), 1u, 0);
          if (*(_DWORD *)(a1 + 156) == 3)
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 752) + 48 * j, v40, v41, v42, v43, 1.0);
        }
      }
    }
  }
  *(_BYTE *)(a1 + 528) = 1;
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v51, "AllocateGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1391, 2);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Allocated memory for the gradients: ", 36);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 272))(__p, a1);
    if ((v50 & 0x80u) == 0)
      v45 = __p;
    else
      v45 = (void **)__p[0];
    if ((v50 & 0x80u) == 0)
      v46 = v50;
    else
      v46 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
    if ((char)v50 < 0)
      operator delete(__p[0]);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v51);
  }
}

void sub_1DE4B623C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AccumGradients(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AccumGradients((uint64_t)a1 + *(_QWORD *)(*a1 - 248), a2, a3, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::UpdateWeights()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1116);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::UpdateWeights()
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::UpdateWeights();
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  const char *v12;

  v7 = *(_QWORD *)(a1 + 104);
  v8 = (_QWORD *)(a1 + 104);
  if (v7 == *(_QWORD *)(a1 + 112))
  {
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 104), *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 128), *(int *)(a1 + 80));
    v7 = *(_QWORD *)(a1 + 104);
  }
  kaldi::CuVector<float>::Resize(v7 + 32 * a3, *(unsigned int *)(a2 + 16), 1u, a4, a5);
  return kaldi::CuVectorBase<float>::CopyFromVec((_DWORD *)(*v8 + 32 * a3), a2, v10, v11, v12);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(a1, a2);
  *((_WORD *)a1 + 120) = 0;
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetTrainOptions(_QWORD *a1, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent *v2;

  v2 = (kaldi::nnet1::RecurrentBaseComponent *)((char *)a1 + *(_QWORD *)(*a1 - 280));
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(v2, a2);
  *((_WORD *)v2 + 120) = 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::HistoryStateSize(uint64_t a1)
{
  return (*(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 12) + *(_DWORD *)(a1 + 176));
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetHistoryState(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;

  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6AE, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  v8 = *(_QWORD *)(a1 + 8) + 48 * a3;
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(v8 + 20), *(unsigned int *)(v8 + 16), 1u, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, *(_QWORD *)(a1 + 8) + 48 * a3, 111, v9, v10);
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD v18[4];

  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (int)a4)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6B5, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a5);
  if ((a3 & 0x80000000) != 0
    || (v7 = *(_QWORD *)(a1 + 8) + 48 * a4, *(_DWORD *)(v7 + 20) <= (signed int)a3))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6B6, "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", a5);
  }
  v9 = a4;
  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(v7 + 16), 1u, a4, a5);
  v13 = *(_QWORD *)(a1 + 8) + 48 * v9;
  if (*(_DWORD *)(v13 + 20) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v12);
  v14 = *(_QWORD *)(v13 + 8) + 4 * (int)(*(_DWORD *)(v13 + 24) * a3);
  v15 = *(_DWORD *)(v13 + 16);
  v16 = *(_QWORD *)(v13 + 32);
  v18[0] = &unk_1EA926538;
  v18[1] = v14;
  v18[3] = v16;
  v18[2] = v15;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v18, v10, v11, v12);
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  const char *v7;
  unsigned int *v8;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a3)
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6D5, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v7);
  v8 = (unsigned int *)(*(_QWORD *)(a1 + 8) + 48 * a3);
  if (*(_DWORD *)(a2 + 20) != v8[5])
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6D6, "history.NumRows() == history_state_[batch_index].NumRows()", v7);
  if (*(_DWORD *)(a2 + 16) != v8[4])
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6D7, "history.NumCols() == history_state_[batch_index].NumCols()", v7);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(v8, a2, 111, v6, v7);
}

_DWORD *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetHistoryState(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4)
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6DE, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v10);
  if (a3 < 0 || (v11 = *(_QWORD *)(a1 + 8) + 48 * a4, *(_DWORD *)(v11 + 20) <= a3))
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6DF, "sequence_idx >= 0 && sequence_idx < history_state_[batch_index].NumRows()", v10);
  v12 = *(_DWORD *)(a2 + 16);
  if (v12 != *(_DWORD *)(v11 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6E0, "history.Dim() == history_state_[batch_index].NumCols()", v10);
  v13 = *(_QWORD *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * a3;
  v14 = *(_QWORD *)(v11 + 32);
  v16[0] = &unk_1EA926538;
  v16[1] = v13;
  v16[3] = v14;
  v16[2] = v12;
  return kaldi::CuVectorBase<float>::CopyFromVec(v16, a2, v8, v9, v10);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ResetHistoryState(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  const char *v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void **v17;
  uint64_t v18;
  void *__p[2];
  unsigned __int8 v21;
  _QWORD v22[35];
  _QWORD v23[11];
  char v24;
  uint64_t v25;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if ((a4 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a4)
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6E7, "batch_index >= 0 && batch_index < ropts_.num_subbatches", v8);
  if (a2[1] != *(_DWORD *)(*(_QWORD *)(a1 + 8) + 48 * a4 + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x6E8, "sequence_idx.size() == history_state_[batch_index].NumRows()", v8);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48 * a4 + 32) = a3;
  if (a2[1])
  {
    v10 = 0;
    do
    {
      if (((*(_QWORD *)(*a2 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
      {
        v11 = *(_QWORD *)(a1 + 8) + 48 * a4;
        if (v10 >= *(unsigned int *)(v11 + 20))
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v9);
        v12 = *(_QWORD *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * (int)v10;
        v13 = *(_DWORD *)(v11 + 16);
        v14 = *(_QWORD *)(v11 + 32);
        v22[0] = &unk_1EA926538;
        v22[1] = v12;
        v22[3] = v14;
        v22[2] = v13;
        kaldi::CuVectorBase<float>::SetZero((uint64_t)v22);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          v15 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
        }
      }
      ++v10;
    }
    while (a2[1] > v10);
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22, "ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1779, 3);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Reset previous states for utts ", 31);
    std::stringbuf::str();
    if ((v21 & 0x80u) == 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    if ((v21 & 0x80u) == 0)
      v18 = v21;
    else
      v18 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    if ((char)v21 < 0)
      operator delete(__p[0]);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v22);
  }
  v23[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v23 + *(_QWORD *)(v23[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v23[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v24 < 0)
    operator delete((void *)v23[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v25);
}

void sub_1DE4B6A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a15 < 0)
    operator delete(__p);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ResetHistoryState(_QWORD *a1)
{
  uint64_t i;

  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  for (i = a1[1]; i != a1[2]; i += 48)
    kaldi::CuMatrixBase<float>::SetZero(i);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 152) = a3;
  *(_DWORD *)(result + 156) = a2;
  *(_BYTE *)(result + 528) = 0;
  return result;
}

_QWORD *`virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::SetGradientNormalization(_QWORD *result, int a2, float a3)
{
  float *v3;

  v3 = (float *)((char *)result + *(_QWORD *)(*result - 256));
  v3[38] = a3;
  *((_DWORD *)v3 + 39) = a2;
  *((_BYTE *)v3 + 528) = 0;
  return result;
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NormalizeGradients(uint64_t a1, unsigned int a2, float a3, uint64_t a4, uint64_t a5, const char *a6)
{
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;

  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(a1 + 80) <= (signed int)a2)
    kaldi::KaldiAssertFailure_((kaldi *)"NormalizeGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x59A, "batch_index >= 0 && batch_index < ropts_.num_subbatches", a6);
  v8 = a3;
  v9 = *(_DWORD *)(a1 + 156);
  if (v9 == 1)
  {
    if (a3 > 0.0)
    {
      if (*(_BYTE *)(a1 + 84))
        v8 = (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * a2) * a3;
      v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v18, v8);
      v19 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v19, v8);
      v20 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::ClipGradient(v20, v8);
      if (*(_BYTE *)(a1 + 208))
      {
        v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v21, v8);
      }
      if (*(_BYTE *)(a1 + 224))
      {
        v22 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::ClipGradient(v22, v8);
      }
    }
  }
  else if (v9 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      v10 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v10, *(_QWORD *)(a1 + 656) + 48 * a2, v8);
      v11 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v11, *(_QWORD *)(a1 + 680) + 48 * a2, v8);
      v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v12, *(_QWORD *)(a1 + 728) + 32 * a2, v8, v13, v14, v15);
      if (*(_BYTE *)(a1 + 208))
      {
        v16 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v16, *(_QWORD *)(a1 + 704) + 48 * a2, v8);
      }
      if (*(_BYTE *)(a1 + 224))
      {
        v17 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, a2);
        kaldi::nnet1::UpdatableComponent::RmspropGradient(v17, *(_QWORD *)(a1 + 752) + 48 * a2, v8);
      }
    }
  }
  else if (a3 > 0.0 && v9 == 2)
  {
    v23 = a2;
    if (*(_BYTE *)(a1 + 84))
      v8 = (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * a2) * a3;
    v24 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v24, (unsigned int *)(*(_QWORD *)(a1 + 656) + 48 * v23), v8, v25, v26, v27);
    v28 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v28, (unsigned int *)(*(_QWORD *)(a1 + 680) + 48 * v23), v8, v29, v30, v31);
    v32 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, a2);
    kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v32, (_DWORD *)(*(_QWORD *)(a1 + 728) + 32 * v23), v33, v34, v35, v8);
    if (*(_BYTE *)(a1 + 208))
    {
      v36 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v36, (unsigned int *)(*(_QWORD *)(a1 + 704) + 48 * v23), v8, v37, v38, v39);
    }
    if (*(_BYTE *)(a1 + 224))
    {
      v40 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, a2);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v40, (unsigned int *)(*(_QWORD *)(a1 + 752) + 48 * v23), v8, v41, v42, v43);
    }
  }
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NormalizeGradients(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, const char *a5, float a6)
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::NormalizeGradients((uint64_t)a1 + *(_QWORD *)(*a1 - 264), a2, a6, a3, a4, a5);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  int v31;

  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::AllocateGradients(a1);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
  *a3 = result;
  if (*(_QWORD *)(a1 + 544) == *(_QWORD *)(a1 + 536) || *(_QWORD *)(a1 + 568) == *(_QWORD *)(a1 + 560))
  {
    v31 = 0;
    goto LABEL_11;
  }
  if (*(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80) == 1)
    v7 = 0;
  else
    v7 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80);
  v8 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeightsGradient(a1, v7);
  v13 = kaldi::CuMatrixBase<float>::CountZeros(v8, v9, v10, v11, v12);
  v14 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeightsGradient(a1, v7);
  v19 = kaldi::CuMatrixBase<float>::CountZeros(v14, v15, v16, v17, v18) + v13;
  v20 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::BiasGradient(a1, v7);
  result = kaldi::CuVectorBase<float>::CountZeros(v20);
  *a2 = v19 + result;
  if (*(_BYTE *)(a1 + 208))
  {
    v21 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeightsGradient(a1, v7);
    result = kaldi::CuMatrixBase<float>::CountZeros(v21, v22, v23, v24, v25);
    *a2 += result;
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v26 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeightsGradient(a1, v7);
    result = kaldi::CuMatrixBase<float>::CountZeros(v26, v27, v28, v29, v30);
    v31 = *a2 + result;
LABEL_11:
    *a2 = v31;
  }
  return result;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CountZeroCorr(_QWORD *a1, _DWORD *a2, _DWORD *a3)
{
  return kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::CountZeroCorr((uint64_t)a1 + *(_QWORD *)(*a1 - 56), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1532);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented except for BaseFloat weights");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs()
{
  kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs();
}

unsigned int *kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetInternalMemory(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, *(_QWORD *)(a1 + 272) + 48 * a3, 111, a4, a5);
}

void kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::EnsureBuffers(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  if (!*(_BYTE *)(a1 + 240))
  {
    v2 = *(int *)(a1 + 80);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 8), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 272), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 296), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 320), v2);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 344), v2);
    if ((int)v2 >= 1)
    {
      v3 = 0;
      do
      {
        kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 8) + v3, *(unsigned int *)(a1 + 96), (*(_DWORD *)(a1 + 12 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + *(_DWORD *)(a1 + 176)), 0, 0);
        v3 += 48;
      }
      while (48 * v2 != v3);
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 480), v2);
    *(_BYTE *)(a1 + 240) = 1;
  }
}

float kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Check(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  float result;
  unsigned int *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned int *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  unsigned int *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD v32[34];

  v2 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumRows(v2) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1642);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Input weights #rows = ", 22);
    v9 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumRows(v9);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; expecting ", 12);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  v3 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumCols(v3) != *(_DWORD *)(a1
                                                                                 + *(_QWORD *)(*(_QWORD *)a1 - 24)
                                                                                 + 8))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1646);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Input weights #columns = ", 25);
    v12 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::InputWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumCols(v12);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"; expecting ", 12);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, " (same as input dim)");
    goto LABEL_28;
  }
  v4 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumRows(v4) != 4 * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1650);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Recurrent weights #rows = ", 26);
    v15 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumRows(v15);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"; expecting ", 12);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  v5 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
  if (kaldi::QuantizedMatrixBase<short>::NumCols(v5) != *(_DWORD *)(a1
                                                                                 + *(_QWORD *)(*(_QWORD *)a1 - 24)
                                                                                 + 12))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1654);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Recurrent weights #columns = ", 29);
    v18 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::RecurrentWeights(a1);
    kaldi::QuantizedMatrixBase<short>::NumCols(v18);
    v19 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"; expecting ", 12);
    v20 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, " (same as output dim)");
    goto LABEL_28;
  }
  if (*(_BYTE *)(a1 + 208))
  {
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1) + 20) != 3)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1659);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Peephole weights #rows = ", 25);
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
      v23 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"; expecting ", 12);
      std::ostream::operator<<();
      goto LABEL_28;
    }
    if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1) + 16) != *(_DWORD *)(a1 + 176))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1662);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Peephole weights #columns = ", 28);
      kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::PeepholeWeights(a1);
      v24 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"; expecting ", 12);
      v25 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, " (same as #cells)");
      goto LABEL_28;
    }
  }
  if (*(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1) + 16) != 4
                                                                                               * *(_DWORD *)(a1 + 176))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1667);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Bias dim = ", 11);
    kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::Bias(a1);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"; expecting ", 12);
    v22 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"; #cells = ", 11);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v6 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
    if (kaldi::QuantizedMatrixBase<short>::NumRows(v6) == *(_DWORD *)(a1
                                                                                   + *(_QWORD *)(*(_QWORD *)a1 - 24)
                                                                                   + 12))
    {
      v7 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
      if (kaldi::QuantizedMatrixBase<short>::NumCols(v7) == *(_DWORD *)(a1 + 176))
        goto LABEL_12;
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1675);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Projection weights #columns = ", 30);
      v29 = kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
      kaldi::QuantizedMatrixBase<short>::NumCols(v29);
      v30 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"; expecting ", 12);
      v31 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, " (same as #cells)");
    }
    else
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1671);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Projection weights #rows = ", 27);
      v26 = (unsigned int *)kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::ProjectionWeights(a1);
      kaldi::QuantizedMatrixBase<short>::NumRows(v26);
      v27 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"; expecting ", 12);
      v28 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v28, " (same as output dim)");
    }
LABEL_28:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
  }
LABEL_12:
  if (*(float *)(a1 + 464) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1681);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"learn_rate_coeff_ must not be negative; found: ",
      47);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 468) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1684);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"projection_learn_rate_coeff_ must not be negative; found: ",
      58);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 472) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1688);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_norm_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  if (*(float *)(a1 + 152) < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1691);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_grad_ must not be negative; found: ",
      39);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  result = *(float *)(a1 + 476);
  if (result < 0.0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1694);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"max_cell_values_ must not be negative; found: ",
      46);
    std::ostream::operator<<();
    goto LABEL_28;
  }
  return result;
}

void sub_1DE4B7738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetType()
{
  return 274;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::GetType()
{
  return 274;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::IsUpdatable()
{
  return 1;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::IsUpdatable()
{
  return 1;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::IsUpdatable()
{
  return 0;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::IsUpdatable()
{
  return 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::IsUpdatable()
{
  return 0;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::IsUpdatable()
{
  return 0;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetType()
{
  return 275;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<signed char>>::GetType()
{
  return 275;
}

uint64_t kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetType()
{
  return 276;
}

uint64_t `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::QuantizedMatrix<short>>::GetType()
{
  return 276;
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::UpdateWeights(uint64_t a1, uint64_t a2, int a3)
{
  float v6;
  float v7;
  uint64_t v8;
  float v9;
  int v10;
  const char *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  int *v47;
  int v48;
  uint64_t v49;
  int *v50;
  int v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  float v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  float v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  _BYTE *v106;
  _QWORD v107[34];

  v6 = *(float *)(a1 + 64);
  v7 = *(float *)(a1 + 68);
  v8 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v9 = *(float *)(v8 + 72);
  v10 = *(_DWORD *)(v8 + 76);
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 32) = a2;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 32) = a2;
  if (*(_BYTE *)(a1 + 208))
    *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 32) = a2;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + 24) = a2;
  if (*(_BYTE *)(a1 + 224))
    *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 32) = a2;
  v12 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80);
  if (a3 >= 0)
    v13 = a3;
  else
    v13 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80);
  if (v12 == 1)
    v14 = 0;
  else
    v14 = v13;
  if ((int)v14 > v12)
    kaldi::KaldiAssertFailure_((kaldi *)"UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", (const char *)0x476, "batch_index <= opts_.num_subbatches", v11);
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v14) + 32) = a2;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v14) + 32) = a2;
  *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v14) + 24) = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 656) + 48 * (int)v14 + 32) = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 680) + 48 * (int)v14 + 32) = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 728) + 32 * (int)v14 + 24) = a2;
  if (*(_BYTE *)(a1 + 208))
  {
    *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v14) + 32) = a2;
    *(_QWORD *)(*(_QWORD *)(a1 + 704) + 48 * (int)v14 + 32) = a2;
  }
  if (*(_BYTE *)(a1 + 224))
  {
    *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v14) + 32) = a2;
    *(_QWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v14) + 32) = a2;
  }
  v18 = a1 + 80;
  if ((_DWORD)v14 == *(_DWORD *)(a1 + 80))
  {
    v19 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v14);
    kaldi::CuMatrixBase<float>::SetZero(v19);
    v20 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v14);
    kaldi::CuMatrixBase<float>::SetZero(v20);
    v21 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v14);
    kaldi::CuVectorBase<float>::SetZero(v21);
    if (*(_BYTE *)(a1 + 208))
    {
      v22 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v14);
      kaldi::CuMatrixBase<float>::SetZero(v22);
    }
    if (*(_BYTE *)(a1 + 224))
    {
      v23 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v14);
      kaldi::CuMatrixBase<float>::SetZero(v23);
    }
    v24 = *(_QWORD *)a1;
    if (*(int *)(v18 + *(_QWORD *)(*(_QWORD *)a1 - 24)) >= 1)
    {
      v25 = 0;
      do
      {
        v26 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v14);
        v27 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v25);
        kaldi::CuMatrixBase<float>::AddMat(v26, v27, 111, v28, v29, 1.0, 1.0);
        v30 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v14);
        v31 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v25);
        kaldi::CuMatrixBase<float>::AddMat(v30, v31, 111, v32, v33, 1.0, 1.0);
        v34 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v14);
        v35 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::BiasGradient(a1, v25);
        kaldi::CuVectorBase<float>::AddVec(v34, v35, v36, v37, v38, 1.0, 1.0);
        if (*(_BYTE *)(a1 + 208))
        {
          v39 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v14);
          v40 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeightsGradient(a1, v25);
          kaldi::CuMatrixBase<float>::AddMat(v39, v40, 111, v41, v42, 1.0, 1.0);
        }
        if (*(_BYTE *)(a1 + 224))
        {
          v43 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v14);
          v44 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v25);
          kaldi::CuMatrixBase<float>::AddMat(v43, v44, 111, v45, v46, 1.0, 1.0);
        }
        ++v25;
        v24 = *(_QWORD *)a1;
      }
      while (v25 < *(_DWORD *)(v18 + *(_QWORD *)(*(_QWORD *)a1 - 24)));
    }
    v47 = *(int **)(a1 + 480);
    v47[(int)v14] = 0;
    if ((int)v14 >= 1)
    {
      v48 = 0;
      v49 = v14;
      v50 = v47;
      do
      {
        v51 = *v50++;
        v48 += v51;
        v47[(int)v14] = v48;
        --v49;
      }
      while (v49);
    }
  }
  else
  {
    v24 = *(_QWORD *)a1;
  }
  v52 = a1 + *(_QWORD *)(v24 - 24);
  v53 = *(float *)(v52 + 56);
  if (*(_BYTE *)(v52 + 84))
    v53 = v53 / (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * (int)v14);
  v54 = *(_QWORD *)(a1 + 504);
  if ((int)v14 >= (unint64_t)((*(_QWORD *)(a1 + 512) - v54) >> 2))
  {
    LODWORD(v107[0]) = 2143289344;
    std::vector<float>::resize(a1 + 504, (int)v14 + 1, v107);
    v54 = *(_QWORD *)(a1 + 504);
  }
  *(float *)(v54 + 4 * (int)v14) = v53;
  if (*(float *)(a1 + 152) >= 0.0)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 360))(a1, v14);
  if (v6 != 0.0)
  {
    v55 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    v56 = -(float)(v53 * v6);
    v57 = v56 * (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * (int)v14);
    v58 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    kaldi::CuMatrixBase<float>::AddMat(v55, v58, 111, v59, v60, v57, 1.0);
    v61 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    v62 = v56 * (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * (int)v14);
    v63 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    kaldi::CuMatrixBase<float>::AddMat(v61, v63, 111, v64, v65, v62, 1.0);
    v66 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
    v67 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
    kaldi::CuVectorBase<float>::AddVec(v66, v67, v68, v69, v70, v56, 1.0);
    if (*(_BYTE *)(a1 + 208))
    {
      v71 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      v72 = v56 * (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * (int)v14);
      v73 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      kaldi::CuMatrixBase<float>::AddMat(v71, v73, 111, v74, v75, v72, 1.0);
    }
    if (*(_BYTE *)(a1 + 224))
    {
      v76 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      v77 = v56 * (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * (int)v14);
      v78 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      kaldi::CuMatrixBase<float>::AddMat(v76, v78, 111, v79, v80, v77, 1.0);
    }
  }
  if (v7 != 0.0)
  {
    v81 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    v82 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeightsGradient(a1, v14);
    kaldi::cu::RegularizeL1<float>(v81, v82, (float)(v7 * v53) * (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * (int)v14), v53, v83, v84, v85);
    v86 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    v87 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeightsGradient(a1, v14);
    kaldi::cu::RegularizeL1<float>(v86, v87, (float)(v7 * v53) * (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * (int)v14), v53, v88, v89, v90);
    if (*(_BYTE *)(a1 + 224))
    {
      v91 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      v92 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeightsGradient(a1, v14);
      kaldi::cu::RegularizeL1<float>(v91, v92, (float)(v7 * v53) * (float)*(int *)(*(_QWORD *)(a1 + 480) + 4 * (int)v14), v53, v93, v94, v95);
    }
  }
  if (v9 > 0.0)
  {
    if (*(int *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80) >= 2)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v107, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1208);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v107, "the multi batch gradient quantization does not work yet");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v107);
    }
    if (*(_QWORD *)(a1 + 784) == *(_QWORD *)(a1 + 776))
      kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 776));
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 776), v10, v9, v15, v16, v17);
  }
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ApplyCorr(a1, v14, v53);
  if (*(float *)(a1 + 472) > 0.0)
  {
    v96 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1);
    kaldi::CuMatrixBase<float>::ApplyMaxNorm(v96, 1, *(float *)(a1 + 472));
    v97 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1);
    kaldi::CuMatrixBase<float>::ApplyMaxNorm(v97, 1, *(float *)(a1 + 472));
    v98 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1);
    kaldi::CuVectorBase<float>::ApplyMaxNorm(v98, *(float *)(a1 + 472), v99, v100, v101, v102);
    if (*(_BYTE *)(a1 + 208))
    {
      v103 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1);
      kaldi::CuMatrixBase<float>::ApplyMaxNorm(v103, 1, *(float *)(a1 + 472));
    }
    if (*(_BYTE *)(a1 + 224))
    {
      v104 = kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1);
      kaldi::CuMatrixBase<float>::ApplyMaxNorm(v104, 1, *(float *)(a1 + 472));
    }
  }
  v105 = *(_BYTE **)(a1 + 480);
  if ((_DWORD)v14 == *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 80))
  {
    v106 = *(_BYTE **)(a1 + 488);
    if (v105 != v106)
      bzero(v105, ((v106 - v105 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  else
  {
    *(_DWORD *)&v105[4 * (int)v14] = 0;
  }
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::UpdateWeights(_QWORD *a1, uint64_t a2, int a3)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::UpdateWeights((uint64_t)a1 + *(_QWORD *)(*a1 - 272), a2, a3);
}

void kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  void *v8;
  uint64_t v9;
  void *v10;
  int v11;
  const char *v12;
  int v13;
  int v14;
  void *v15;
  uint64_t v16;
  void *v17;
  int v18;
  int v19;
  int v20;
  void *v21;
  uint64_t v22;
  void *v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  void *v27;
  uint64_t v28;
  void *v29;
  int v30;
  int v31;
  int v32;
  void *v33;
  uint64_t v34;
  void *v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  if (*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v70, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1542);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v70, "Weights are already vectorized");
    goto LABEL_73;
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v70, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1545);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"Performing  vectorization of lstm component", 43);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v70);
  }
  kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 184), a2, (uint64_t *)&v70);
  v8 = v70;
  v70 = 0;
  v9 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    v10 = v70;
    v70 = 0;
    if (v10)
      (*(void (**)(void *))(*(_QWORD *)v10 + 24))(v10);
  }
  v11 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 20);
  v13 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 16) * v11;
  v72 = 0;
  v73 = 0;
  v70 = &unk_1EA926538;
  v71 = 0;
  if (v13 > *(_DWORD *)(a3 + 16))
    goto LABEL_74;
  v71 = *(_QWORD *)(a3 + 8);
  LODWORD(v72) = v13;
  v73 = *(_QWORD *)(a3 + 24);
  kaldi::CuVectorBase<float>::Set((uint64_t)&v70, *(float *)(a1 + 464));
  v14 = *(_DWORD *)(a3 + 16) - v13;
  *(_QWORD *)(a3 + 8) += 4 * v13;
  *(_DWORD *)(a3 + 16) = v14;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 192), a2, (uint64_t *)&v70);
  v15 = v70;
  v70 = 0;
  v16 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
    v17 = v70;
    v70 = 0;
    if (v17)
      (*(void (**)(void *))(*(_QWORD *)v17 + 24))(v17);
  }
  v18 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 20);
  v19 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 16) * v18;
  v72 = 0;
  v73 = 0;
  v70 = &unk_1EA926538;
  v71 = 0;
  if (v19 > *(_DWORD *)(a3 + 16))
    goto LABEL_74;
  v71 = *(_QWORD *)(a3 + 8);
  LODWORD(v72) = v19;
  v73 = *(_QWORD *)(a3 + 24);
  kaldi::CuVectorBase<float>::Set((uint64_t)&v70, *(float *)(a1 + 464));
  v20 = *(_DWORD *)(a3 + 16) - v19;
  *(_QWORD *)(a3 + 8) += 4 * v19;
  *(_DWORD *)(a3 + 16) = v20;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 200), a2, (uint64_t *)&v70);
  v21 = v70;
  v70 = 0;
  v22 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v21;
  if (v22)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
    v23 = v70;
    v70 = 0;
    if (v23)
      (*(void (**)(void *))(*(_QWORD *)v23 + 16))(v23);
  }
  v24 = *(_DWORD *)(*(_QWORD *)(a1 + 200) + 16);
  v72 = 0;
  v73 = 0;
  v70 = &unk_1EA926538;
  v71 = 0;
  if (v24 > *(_DWORD *)(a3 + 16))
    goto LABEL_74;
  v71 = *(_QWORD *)(a3 + 8);
  LODWORD(v72) = v24;
  v73 = *(_QWORD *)(a3 + 24);
  kaldi::CuVectorBase<float>::Set((uint64_t)&v70, *(float *)(a1 + 464));
  v25 = *(int *)(*(_QWORD *)(a1 + 200) + 16);
  v26 = *(_DWORD *)(a3 + 16) - v25;
  *(_QWORD *)(a3 + 8) += 4 * v25;
  *(_DWORD *)(a3 + 16) = v26;
  *(_QWORD *)(a3 + 24) = 0;
  if (*(_BYTE *)(a1 + 208))
  {
    kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 216), a2, (uint64_t *)&v70);
    v27 = v70;
    v70 = 0;
    v28 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v27;
    if (v28)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
      v29 = v70;
      v70 = 0;
      if (v29)
        (*(void (**)(void *))(*(_QWORD *)v29 + 24))(v29);
    }
    v30 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 20);
    v31 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 16) * v30;
    v72 = 0;
    v73 = 0;
    v70 = &unk_1EA926538;
    v71 = 0;
    if (v31 > *(_DWORD *)(a3 + 16))
      goto LABEL_74;
    v71 = *(_QWORD *)(a3 + 8);
    LODWORD(v72) = v31;
    v73 = *(_QWORD *)(a3 + 24);
    kaldi::CuVectorBase<float>::Set((uint64_t)&v70, *(float *)(a1 + 464));
    v32 = *(_DWORD *)(a3 + 16) - v31;
    *(_QWORD *)(a3 + 8) += 4 * v31;
    *(_DWORD *)(a3 + 16) = v32;
    *(_QWORD *)(a3 + 24) = 0;
  }
  if (!*(_BYTE *)(a1 + 224))
    goto LABEL_28;
  kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 232), a2, (uint64_t *)&v70);
  v33 = v70;
  v70 = 0;
  v34 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v33;
  if (v34)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
    v35 = v70;
    v70 = 0;
    if (v35)
      (*(void (**)(void *))(*(_QWORD *)v35 + 24))(v35);
  }
  v36 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 20);
  v37 = *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 16) * v36;
  v72 = 0;
  v73 = 0;
  v70 = &unk_1EA926538;
  v71 = 0;
  if (v37 > *(_DWORD *)(a3 + 16))
LABEL_74:
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v12);
  v71 = *(_QWORD *)(a3 + 8);
  LODWORD(v72) = v37;
  v73 = *(_QWORD *)(a3 + 24);
  kaldi::CuVectorBase<float>::Set((uint64_t)&v70, *(float *)(a1 + 468));
  v38 = *(_DWORD *)(a3 + 16) - v37;
  *(_QWORD *)(a3 + 8) += 4 * v37;
  *(_DWORD *)(a3 + 16) = v38;
  *(_QWORD *)(a3 + 24) = 0;
LABEL_28:
  if (*(_BYTE *)(a1 + 528))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v70, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1591);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v70, "gradients_valid_ is thought to be false here");
    goto LABEL_73;
  }
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::AllocateGradients(a1);
  if (a4[1] != *a4)
  {
    v39 = 0;
    while (1)
    {
      v40 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 536) + 8 * v39) + 20);
      if (v40 != *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 20)
        || (v41 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 536) + 8 * v39) + 16),
            v41 != *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::InputWeights(a1) + 16)))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v70, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1600);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v70, "input_weights_gradient_[ic]->NumRows() == InputWeights().NumRows() && input_weights_gradient_[ic]->NumCols() == InputWeights().NumCols()");
        goto LABEL_73;
      }
      v42 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 560) + 8 * v39) + 20);
      if (v42 != *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 20)
        || (v43 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 560) + 8 * v39) + 16),
            v43 != *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::RecurrentWeights(a1) + 16)))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v70, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1602);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v70, "recurrent_weights_gradient_[ic]->NumRows() == RecurrentWeights().NumRows() && recurrent_weights_gradient_[ic]->NumCols() == RecurrentWeights().NumCols()");
        goto LABEL_73;
      }
      v44 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 608) + 8 * v39) + 16);
      if (v44 != *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::Bias(a1) + 16))
        break;
      if (*(_BYTE *)(a1 + 208))
      {
        v45 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 584) + 8 * v39) + 20);
        if (v45 != *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 20)
          || (v46 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 584) + 8 * v39) + 16),
              v46 != *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::PeepholeWeights(a1) + 16)))
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v70, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1606);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(&v70, "peephole_weights_gradient_[ic]->NumRows() == PeepholeWeights().NumRows() && peephole_weights_gradient_[ic]->NumCols() == PeepholeWeights().NumCols()");
          goto LABEL_73;
        }
      }
      if (*(_BYTE *)(a1 + 224))
      {
        v47 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 632) + 8 * v39) + 20);
        if (v47 != *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 20)
          || (v48 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 632) + 8 * v39) + 16),
              v48 != *(_DWORD *)(kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::ProjectionWeights(a1) + 16)))
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v70, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1609);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(&v70, "projection_weights_gradient_[ic]->NumRows() == ProjectionWeights().NumRows() && projection_weights_gradient_[ic]->NumCols() == ProjectionWeights().NumCols()");
          goto LABEL_73;
        }
      }
      v49 = *a4 + 32 * v39;
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 536) + 8 * v39), v49, (uint64_t *)&v70);
      v50 = *(_QWORD *)(a1 + 536);
      v51 = v70;
      v70 = 0;
      v52 = *(_QWORD *)(v50 + 8 * v39);
      *(_QWORD *)(v50 + 8 * v39) = v51;
      if (v52)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52);
      v53 = v70;
      v70 = 0;
      if (v53)
        (*(void (**)(void *))(*(_QWORD *)v53 + 24))(v53);
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 560) + 8 * v39), v49, (uint64_t *)&v70);
      v54 = *(_QWORD *)(a1 + 560);
      v55 = v70;
      v70 = 0;
      v56 = *(_QWORD *)(v54 + 8 * v39);
      *(_QWORD *)(v54 + 8 * v39) = v55;
      if (v56)
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 24))(v56);
      v57 = v70;
      v70 = 0;
      if (v57)
        (*(void (**)(void *))(*(_QWORD *)v57 + 24))(v57);
      kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 608) + 8 * v39), v49, (uint64_t *)&v70);
      v58 = *(_QWORD *)(a1 + 608);
      v59 = v70;
      v70 = 0;
      v60 = *(_QWORD *)(v58 + 8 * v39);
      *(_QWORD *)(v58 + 8 * v39) = v59;
      if (v60)
        (*(void (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60);
      v61 = v70;
      v70 = 0;
      if (v61)
        (*(void (**)(void *))(*(_QWORD *)v61 + 16))(v61);
      if (*(_BYTE *)(a1 + 208))
      {
        kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 584) + 8 * v39), v49, (uint64_t *)&v70);
        v62 = *(_QWORD *)(a1 + 584);
        v63 = v70;
        v70 = 0;
        v64 = *(_QWORD *)(v62 + 8 * v39);
        *(_QWORD *)(v62 + 8 * v39) = v63;
        if (v64)
          (*(void (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64);
        v65 = v70;
        v70 = 0;
        if (v65)
          (*(void (**)(void *))(*(_QWORD *)v65 + 24))(v65);
      }
      if (*(_BYTE *)(a1 + 224))
      {
        kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 632) + 8 * v39), v49, (uint64_t *)&v70);
        v66 = *(_QWORD *)(a1 + 632);
        v67 = v70;
        v70 = 0;
        v68 = *(_QWORD *)(v66 + 8 * v39);
        *(_QWORD *)(v66 + 8 * v39) = v67;
        if (v68)
          (*(void (**)(uint64_t))(*(_QWORD *)v68 + 24))(v68);
        v69 = v70;
        v70 = 0;
        if (v69)
          (*(void (**)(void *))(*(_QWORD *)v69 + 24))(v69);
      }
      if (++v39 >= (unint64_t)((uint64_t)(a4[1] - *a4) >> 5))
        goto LABEL_65;
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v70, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1603);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v70, "bias_gradient_[ic]->Dim() == Bias().Dim()");
LABEL_73:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v70);
  }
LABEL_65:
  *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 16) = 1;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&v70, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-lstm.cc", 1636);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"Done vectorization of lstm component", 36);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v70);
  }
}

void sub_1DE4B887C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void `virtual thunk to'kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  kaldi::nnet1::LstmComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs((uint64_t)a1 + *(_QWORD *)(*a1 - 64), a2, a3, a4);
}

double kaldi::nnet1::MovingAttentionComponent::MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this, int a2, int a3)
{
  double result;

  *((_DWORD *)this + 108) = a2;
  *((_DWORD *)this + 109) = a3;
  *((_WORD *)this + 220) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = &off_1EA9284D0;
  *((_OWORD *)this + 30) = xmmword_1DEC3D450;
  *((_QWORD *)this + 62) = 0x3BF800000;
  *((_DWORD *)this + 126) = 1;
  *((_WORD *)this + 254) = 0;
  *((_BYTE *)this + 510) = 0;
  *((_QWORD *)this + 1) = -1;
  *(_QWORD *)this = &off_1EA92B238;
  *((_QWORD *)this + 53) = &off_1EA92B440;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &unk_1EA92DFA8;
  *((_BYTE *)this + 64) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 9) = &unk_1EA92DFA8;
  *((_BYTE *)this + 112) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 15) = &unk_1EA92DFA8;
  *((_BYTE *)this + 160) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_QWORD *)this + 21) = &unk_1EA92DFA8;
  *((_BYTE *)this + 208) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 27) = &unk_1EA92DFA8;
  *((_BYTE *)this + 256) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = &unk_1EA92DFA8;
  *((_BYTE *)this + 376) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 48) = 0;
  *(_QWORD *)&result = 257;
  *((_DWORD *)this + 104) = 257;
  *((_BYTE *)this + 420) = 0;
  return result;
}

int *kaldi::CuArray<int>::operator=(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v7;

  if (a1 != (int *)a2)
  {
    if (!*((_QWORD *)a1 + 2))
      *((_QWORD *)a1 + 2) = *(_QWORD *)(a2 + 16);
    kaldi::CuArray<int>::Resize((uint64_t)a1, *(_DWORD *)a2, 1u, a4, a5);
    v7 = *a1;
    if ((_DWORD)v7)
      memcpy(*((void **)a1 + 1), *(const void **)(a2 + 8), 4 * v7);
  }
  return a1;
}

kaldi::nnet1::MovingAttentionComponent *kaldi::nnet1::MovingAttentionComponent::MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this, const kaldi::nnet1::MovingAttentionComponent *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  int *v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  char *v18;
  char *v19;
  char *v20;

  *((_QWORD *)this + 54) = *(_QWORD *)((char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24) + 8);
  *((_WORD *)this + 220) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = &off_1EA9284D0;
  *((_OWORD *)this + 30) = xmmword_1DEC3D450;
  *((_DWORD *)this + 124) = -1082130432;
  *(_QWORD *)((char *)this + 500) = 0x100000003;
  *((_WORD *)this + 254) = 0;
  *((_BYTE *)this + 510) = 0;
  *((_QWORD *)this + 1) = -1;
  *(_QWORD *)this = &off_1EA92B238;
  *((_QWORD *)this + 53) = &off_1EA92B440;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 3) = &unk_1EA92DFA8;
  v6 = (char *)this + 24;
  *((_BYTE *)this + 64) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 9) = &unk_1EA92DFA8;
  v7 = (char *)this + 72;
  *((_BYTE *)this + 112) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 15) = &unk_1EA92DFA8;
  v8 = (char *)this + 120;
  *((_BYTE *)this + 160) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_QWORD *)this + 21) = &unk_1EA92DFA8;
  v9 = (char *)this + 168;
  *((_BYTE *)this + 208) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 27) = &unk_1EA92DFA8;
  *((_BYTE *)this + 256) = 0;
  v19 = (char *)this + 288;
  v20 = (char *)this + 264;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  v10 = (int *)((char *)this + 312);
  v11 = (char *)this + 336;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = &unk_1EA92DFA8;
  *((_BYTE *)this + 376) = 0;
  v18 = (char *)this + 384;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  v12 = *((_QWORD *)a2 + 2);
  if (!v12)
    kaldi::KaldiAssertFailure_((kaldi *)"MovingAttentionComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x33, "src.component_", a5);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 51) = *((_QWORD *)a2 + 51);
  *((_QWORD *)this + 2) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  kaldi::CuMatrix<float>::operator=((uint64_t)v6, (uint64_t)a2 + 24);
  kaldi::CuMatrix<float>::operator=((uint64_t)v7, (uint64_t)a2 + 72);
  kaldi::CuMatrix<float>::operator=((uint64_t)v8, (uint64_t)a2 + 120);
  kaldi::CuMatrix<float>::operator=((uint64_t)v9, (uint64_t)a2 + 168);
  if (this != a2)
  {
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)v20, *((_QWORD *)a2 + 33), *((_QWORD *)a2 + 34), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 34) - *((_QWORD *)a2 + 33)) >> 3));
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)v19, *((_QWORD *)a2 + 36), *((_QWORD *)a2 + 37), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 37) - *((_QWORD *)a2 + 36)) >> 3));
  }
  kaldi::CuArray<int>::operator=(v10, (uint64_t)a2 + 312, v14, v15, v16);
  kaldi::CuMatrix<float>::operator=((uint64_t)v11, (uint64_t)a2 + 336);
  if (this != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v18, *((char **)a2 + 48), *((_QWORD *)a2 + 49), (uint64_t)(*((_QWORD *)a2 + 49) - *((_QWORD *)a2 + 48)) >> 2);
  *((_DWORD *)this + 104) = *((_DWORD *)a2 + 104);
  *((_BYTE *)this + 420) = *((_BYTE *)a2 + 420);
  return this;
}

void sub_1DE4B8C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, kaldi::nnet1::UpdatableComponent *a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v23;
  void *v24;

  v23 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v14 + 392) = v23;
    operator delete(v23);
  }
  kaldi::CuMatrix<float>::~CuMatrix(v21);
  v24 = *(void **)(v14 + 320);
  if (v24)
    free(v24);
  *v15 = 0;
  v15[1] = 0;
  v15[2] = 0;
  a14 = a12;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  a14 = a13;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  kaldi::CuMatrix<float>::~CuMatrix(v20);
  kaldi::CuMatrix<float>::~CuMatrix(v19);
  kaldi::CuMatrix<float>::~CuMatrix(v18);
  kaldi::CuMatrix<float>::~CuMatrix(v17);
  kaldi::CuMatrix<float>::~CuMatrix(v16);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v14);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MovingAttentionComponent::~MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void **v7;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[3];
  v4 = *((_QWORD *)this + 2);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 2) = 0;
  v5 = (void *)*((_QWORD *)this + 48);
  if (v5)
  {
    *((_QWORD *)this + 49) = v5;
    operator delete(v5);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 336);
  v6 = (void *)*((_QWORD *)this + 40);
  if (v6)
    free(v6);
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  v7 = (void **)((char *)this + 288);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 264);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 216);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 168);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 120);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 72);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 24);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
}

void kaldi::nnet1::MovingAttentionComponent::~MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 424));
}

{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 424));
  JUMPOUT(0x1DF0ED014);
}

void `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::~MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 424));
}

{
  kaldi::nnet1::MovingAttentionComponent::~MovingAttentionComponent((kaldi::nnet1::MovingAttentionComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t kaldi::nnet1::MovingAttentionComponent::Copy(kaldi::nnet1::MovingAttentionComponent *this)
{
  kaldi::nnet1::MovingAttentionComponent *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;

  v2 = (kaldi::nnet1::MovingAttentionComponent *)operator new();
  kaldi::nnet1::MovingAttentionComponent::MovingAttentionComponent(v2, this, v3, v4, v5);
  return (uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_1DE4B8EF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40F02A9525);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::Copy(kaldi::nnet1::MovingAttentionComponent *this)
{
  return kaldi::nnet1::MovingAttentionComponent::Copy((kaldi::nnet1::MovingAttentionComponent *)((char *)this
                                                                                               + *(_QWORD *)(*(_QWORD *)this - 32)));
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetType(kaldi::nnet1::MovingAttentionComponent *this)
{
  return 281;
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::GetType(kaldi::nnet1::MovingAttentionComponent *this)
{
  return 281;
}

void kaldi::nnet1::MovingAttentionComponent::InitData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  void **v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  void *v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v26;
  BOOL v28;
  void *v32;
  void *v33;
  int v34;
  BOOL v35;
  uint64_t v38;
  kaldi::nnet1::Component *v39;
  _QWORD *v40;
  void **v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  const void *v47;
  void *v48;
  _QWORD *v49;
  void **v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD v55[35];
  uint64_t v56;
  void **v57;
  uint64_t v58;
  uint64_t v59;
  void *v60[4];

  memset(v60, 0, 24);
  v7 = a2 + 4;
  v8 = a1 + 412;
  v9 = a1 + 408;
  v10 = a1 + 12;
  v11 = a1 + 8;
  while ((*((_BYTE *)v7 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)v60, a4, a5);
    if ((SHIBYTE(v60[2]) & 0x80000000) == 0)
    {
      v14 = v60;
      switch(HIBYTE(v60[2]))
      {
        case 0xD:
          goto LABEL_11;
        case 0xE:
          goto LABEL_56;
        case 0xF:
          v15 = v60[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v60 + 7) == (void *)0x3E736E6F69746E65;
          v16 = v10;
          if (v15)
            break;
          if (HIBYTE(v60[2]) == 14)
          {
LABEL_56:
            v26 = v60[0] == (void *)0x6F4374686769523CLL && *(void **)((char *)v60 + 6) == (void *)0x3E747865746E6F43;
            v16 = v8;
            if (!v26)
              goto LABEL_104;
          }
          else
          {
            if (HIBYTE(v60[2]) != 13)
              goto LABEL_104;
LABEL_11:
            v17 = v60[0] == (void *)0x6E6F437466654C3CLL && *(void **)((char *)v60 + 5) == (void *)0x3E747865746E6F43;
            v16 = v9;
            if (!v17)
              goto LABEL_104;
          }
          break;
        case 0x10:
          if (v60[0] == (void *)0x52656372756F533CLL && v60[1] == (void *)0x3E64657372657665)
            goto LABEL_95;
          if (HIBYTE(v60[2]) != 16)
            goto LABEL_104;
          if (v60[0] != (void *)0x65677261546F4E3CLL || v60[1] != (void *)0x3E7461636E6F4374)
            goto LABEL_79;
          goto LABEL_96;
        case 0x14:
          goto LABEL_86;
        case 0x16:
          v28 = v60[0] == (void *)0x53656372756F533CLL
             && v60[1] == (void *)0x656D694465746174
             && *(void **)((char *)&v60[1] + 6) == (void *)0x3E6E6F69736E656DLL;
          v16 = v11;
          if (!v28)
            goto LABEL_104;
          break;
        default:
          goto LABEL_104;
      }
LABEL_69:
      kaldi::ReadBasicType<int>(a2, 0, v16, v12, v13);
      goto LABEL_103;
    }
    v18 = v60[1];
    if (v60[1] == (void *)15)
    {
      v21 = *(_QWORD *)v60[0] == 0x6574744178614D3CLL && *(_QWORD *)((char *)v60[0] + 7) == 0x3E736E6F69746E65;
      v16 = v10;
      if (v21)
        goto LABEL_69;
      v18 = v60[1];
    }
    else if (v60[1] == (void *)22)
    {
      v19 = *(_QWORD *)v60[0] == 0x53656372756F533CLL && *((_QWORD *)v60[0] + 1) == 0x656D694465746174;
      v20 = v19 && *(_QWORD *)((char *)v60[0] + 14) == 0x3E6E6F69736E656DLL;
      v16 = v11;
      if (v20)
        goto LABEL_69;
    }
    if (v18 == (void *)13)
    {
      v22 = *(_QWORD *)v60[0] == 0x6E6F437466654C3CLL && *(_QWORD *)((char *)v60[0] + 5) == 0x3E747865746E6F43;
      v16 = v9;
      if (v22)
        goto LABEL_69;
      v18 = v60[1];
    }
    if (v18 == (void *)14)
    {
      v23 = *(_QWORD *)v60[0] == 0x6F4374686769523CLL && *(_QWORD *)((char *)v60[0] + 6) == 0x3E747865746E6F43;
      v16 = v8;
      if (v23)
        goto LABEL_69;
      v18 = v60[1];
    }
    if (v18 == (void *)16)
    {
      if (*(_QWORD *)v60[0] == 0x52656372756F533CLL && *((_QWORD *)v60[0] + 1) == 0x3E64657372657665)
      {
LABEL_95:
        *(_BYTE *)(a1 + 416) = 0;
        goto LABEL_103;
      }
      v18 = v60[1];
      if (v60[1] == (void *)16)
      {
        if (*(_QWORD *)v60[0] == 0x65677261546F4E3CLL && *((_QWORD *)v60[0] + 1) == 0x3E7461636E6F4374)
        {
LABEL_96:
          *(_BYTE *)(a1 + 417) = 0;
          goto LABEL_103;
        }
        if ((HIBYTE(v60[2]) & 0x80) == 0)
        {
          if (HIBYTE(v60[2]) != 16)
            goto LABEL_104;
LABEL_79:
          if (v60[0] != (void *)0x636174746165523CLL || v60[1] != (void *)0x3E74656772615468)
          {
LABEL_104:
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v60, "</Component>"))
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v55, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 133);
              v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Unknown token ", 14);
              if (SHIBYTE(v60[2]) >= 0)
                v50 = v60;
              else
                v50 = (void **)v60[0];
              if (SHIBYTE(v60[2]) >= 0)
                v51 = HIBYTE(v60[2]);
              else
                v51 = (uint64_t)v60[1];
              v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
              v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)", a typo in config?", 19);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" (SourceStateDimension|MaxAttentions|LeftContext|RightContext)", 62);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v55);
            }
            break;
          }
LABEL_102:
          *(_BYTE *)(a1 + 418) = 1;
          goto LABEL_103;
        }
        if (*(_QWORD *)v60[0] == 0x636174746165523CLL && *((_QWORD *)v60[0] + 1) == 0x3E74656772615468)
          goto LABEL_102;
        v18 = v60[1];
      }
    }
    if (v18 != (void *)20)
      goto LABEL_104;
    v14 = (void **)v60[0];
LABEL_86:
    v32 = *v14;
    v33 = v14[1];
    v34 = *((_DWORD *)v14 + 4);
    v35 = v32 == (void *)0x646F7250746F443CLL && v33 == (void *)0x74616C6552746375;
    if (!v35 || v34 != 1047424873)
      goto LABEL_104;
    *(_BYTE *)(a1 + 419) = 1;
LABEL_103:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v38 = *(_QWORD *)(a1 + 16);
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v57 = 0;
  v58 = 0;
  v59 = 0;
  kaldi::ReadToken(a2, 0, (uint64_t)&v57, a4, a5);
  v39 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v57);
  v56 = 0;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v55, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 143, 3);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Initializing component of type ", 31);
    if (v59 >= 0)
      v41 = (void **)&v57;
    else
      v41 = v57;
    if (v59 >= 0)
      v42 = HIBYTE(v59);
    else
      v42 = v58;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v55);
  }
  kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v56 + 4, v43, v44);
  kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v56, v45, v46);
  v47 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v39, HIDWORD(v56), v56);
  *(_QWORD *)(a1 + 16) = v48;
  (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v48 + 96))(v48, a2, a3);
  kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
  if (SHIBYTE(v59) < 0)
    operator delete(v57);
  if (SHIBYTE(v60[2]) < 0)
    operator delete(v60[0]);
}

void sub_1DE4B95EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;

  if (*(char *)(v10 - 89) < 0)
    operator delete(*(void **)(v10 - 112));
  _Unwind_Resume(exception_object);
}

void *kaldi::nnet1::MovingAttentionComponent::Check(void *this)
{
  uint64_t v1;
  _DWORD *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD v23[34];

  if (!*((_BYTE *)this + 420))
  {
    v1 = (uint64_t)this;
    v2 = (_DWORD *)*((_QWORD *)this + 2);
    if (v2)
    {
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 594);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "this is a non-recurrent version, cannot have a recurrent internal component");
        goto LABEL_32;
      }
      if (this)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 597);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "no recursive inclusion");
        goto LABEL_32;
      }
    }
    v3 = *(_DWORD *)(v1 + 12);
    if (v3 < 1 || (v4 = *(_DWORD *)(v1 + 8), v4 <= 0))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 600);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"component is not initialized, max attention is ", 47);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", source state dimension is ", 28);
      std::ostream::operator<<();
      goto LABEL_32;
    }
    v5 = *(_DWORD *)(v1 + 408);
    if (v5 < 1 || (v6 = *(_DWORD *)(v1 + 412), v6 <= 0))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 605);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"component is not initialized, left and right context is ", 56);
      v16 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
      std::ostream::operator<<();
      goto LABEL_32;
    }
    if (*(_BYTE *)(v1 + 417))
    {
      if (*(_DWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 8) + v4 * v3 != v2[2])
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 610);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"The target input is concatenated. component has input dim ", 58);
        v7 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", attentions ", 13);
        v8 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", source state dimension ", 25);
        v9 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", however, the internal training component has input dim ", 57);
        std::ostream::operator<<();
        goto LABEL_32;
      }
    }
    else if (v4 * v3 != v2[2])
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 616);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"The target input is not concatenated. component has input dim ", 62);
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", attentions ", 13);
      v20 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", source state dimension ", 25);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", however, the internal training component has input dim ", 57);
      std::ostream::operator<<();
      goto LABEL_32;
    }
    v10 = v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v11 = *(_DWORD *)(v10 + 12);
    if (*(_BYTE *)(v1 + 418))
    {
      if (v11 != v2[3] + *(_DWORD *)(v10 + 8))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 624);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"component has input dim ", 24);
        v12 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" , and output dim ", 18);
        v13 = (_QWORD *)std::ostream::operator<<();
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", and you requested to reattch the target, however, ", 52);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"the internal component has output dim ", 38);
        std::ostream::operator<<();
        goto LABEL_32;
      }
    }
    else if (v11 != v2[3])
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 629);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"component has output dim ", 25);
      v22 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" does not match the internal component's output dim ", 52);
      std::ostream::operator<<();
      goto LABEL_32;
    }
    if (v3 == v5 + v6 + 1)
    {
      if (*(_BYTE *)(v1 + 419))
      {
        if (*(_DWORD *)(v10 + 8) != v4)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 641);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "the source state must have the same dimension as the input dimension of the component if want to take the dot product between them");
          goto LABEL_32;
        }
        goto LABEL_22;
      }
      if (*(unsigned __int8 *)(v1 + 418) | *(unsigned __int8 *)(v1 + 417))
      {
LABEL_22:
        *(_BYTE *)(v1 + 420) = 1;
        return this;
      }
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 646);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "if not taking the dot production relation from the source and target, you must at least concatenate or reattach the target");
    }
    else
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 634);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"the maximum attention is ", 25);
      v17 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" , that does not match the left_context + 1 + right_context, you defined left/right context as ", 95);
      v18 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
      std::ostream::operator<<();
    }
LABEL_32:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  return this;
}

void `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::InitData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::MovingAttentionComponent::InitData((uint64_t)a1 + *(_QWORD *)(*a1 - 112), a2, a3, a4, a5);
}

void kaldi::nnet1::MovingAttentionComponent::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  void **v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  void *v19;
  BOOL v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v27;
  BOOL v29;
  void *v33;
  void *v34;
  int v35;
  BOOL v36;
  uint64_t v39;
  const void *v40;
  _QWORD *v41;
  void **v42;
  uint64_t v43;
  _QWORD v45[34];
  void *v46[4];

  memset(v46, 0, 24);
  v7 = a1 + 412;
  v8 = a1 + 408;
  v9 = a1 + 12;
  v10 = a1 + 8;
  while (kaldi::Peek(a2, a3) == 60)
  {
    kaldi::ReadToken(a2, a3, (uint64_t)v46, v11, v12);
    if (SHIBYTE(v46[2]) < 0)
    {
      v19 = v46[1];
      if (v46[1] == (void *)15)
      {
        v22 = *(_QWORD *)v46[0] == 0x6574744178614D3CLL && *(_QWORD *)((char *)v46[0] + 7) == 0x3E736E6F69746E65;
        v17 = v9;
        if (v22)
          goto LABEL_69;
        v19 = v46[1];
      }
      else if (v46[1] == (void *)22)
      {
        v20 = *(_QWORD *)v46[0] == 0x53656372756F533CLL && *((_QWORD *)v46[0] + 1) == 0x656D694465746174;
        v21 = v20 && *(_QWORD *)((char *)v46[0] + 14) == 0x3E6E6F69736E656DLL;
        v17 = v10;
        if (v21)
          goto LABEL_69;
      }
      if (v19 == (void *)13)
      {
        v23 = *(_QWORD *)v46[0] == 0x6E6F437466654C3CLL && *(_QWORD *)((char *)v46[0] + 5) == 0x3E747865746E6F43;
        v17 = v8;
        if (v23)
          goto LABEL_69;
        v19 = v46[1];
      }
      if (v19 == (void *)14)
      {
        v24 = *(_QWORD *)v46[0] == 0x6F4374686769523CLL && *(_QWORD *)((char *)v46[0] + 6) == 0x3E747865746E6F43;
        v17 = v7;
        if (v24)
          goto LABEL_69;
        v19 = v46[1];
      }
      if (v19 != (void *)16)
        goto LABEL_84;
      if (*(_QWORD *)v46[0] == 0x52656372756F533CLL && *((_QWORD *)v46[0] + 1) == 0x3E64657372657665)
      {
LABEL_95:
        *(_BYTE *)(a1 + 416) = 0;
      }
      else
      {
        v19 = v46[1];
        if (v46[1] != (void *)16)
          goto LABEL_84;
        if (*(_QWORD *)v46[0] == 0x65677261546F4E3CLL && *((_QWORD *)v46[0] + 1) == 0x3E7461636E6F4374)
        {
LABEL_96:
          *(_BYTE *)(a1 + 417) = 0;
        }
        else if ((HIBYTE(v46[2]) & 0x80) != 0)
        {
          if (*(_QWORD *)v46[0] == 0x636174746165523CLL && *((_QWORD *)v46[0] + 1) == 0x3E74656772615468)
            goto LABEL_102;
          v19 = v46[1];
LABEL_84:
          if (v19 != (void *)20)
            goto LABEL_103;
          v15 = (void **)v46[0];
LABEL_86:
          v33 = *v15;
          v34 = v15[1];
          v35 = *((_DWORD *)v15 + 4);
          v36 = v33 == (void *)0x646F7250746F443CLL && v34 == (void *)0x74616C6552746375;
          if (!v36 || v35 != 1047424873)
            goto LABEL_103;
          *(_BYTE *)(a1 + 419) = 1;
        }
        else
        {
          if (HIBYTE(v46[2]) != 16)
            goto LABEL_103;
LABEL_79:
          if (v46[0] != (void *)0x636174746165523CLL || v46[1] != (void *)0x3E74656772615468)
          {
LABEL_103:
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v46, "</Component>"))
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", 176);
              v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Unrecognized token ", 19);
              if (SHIBYTE(v46[2]) >= 0)
                v42 = v46;
              else
                v42 = (void **)v46[0];
              if (SHIBYTE(v46[2]) >= 0)
                v43 = HIBYTE(v46[2]);
              else
                v43 = (uint64_t)v46[1];
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
            }
            break;
          }
LABEL_102:
          *(_BYTE *)(a1 + 418) = 1;
        }
      }
    }
    else
    {
      v15 = v46;
      switch(HIBYTE(v46[2]))
      {
        case 0xD:
          goto LABEL_11;
        case 0xE:
          goto LABEL_56;
        case 0xF:
          v16 = v46[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v46 + 7) == (void *)0x3E736E6F69746E65;
          v17 = v9;
          if (v16)
            break;
          if (HIBYTE(v46[2]) == 14)
          {
LABEL_56:
            v27 = v46[0] == (void *)0x6F4374686769523CLL && *(void **)((char *)v46 + 6) == (void *)0x3E747865746E6F43;
            v17 = v7;
            if (!v27)
              goto LABEL_103;
          }
          else
          {
            if (HIBYTE(v46[2]) != 13)
              goto LABEL_103;
LABEL_11:
            v18 = v46[0] == (void *)0x6E6F437466654C3CLL && *(void **)((char *)v46 + 5) == (void *)0x3E747865746E6F43;
            v17 = v8;
            if (!v18)
              goto LABEL_103;
          }
          break;
        case 0x10:
          if (v46[0] == (void *)0x52656372756F533CLL && v46[1] == (void *)0x3E64657372657665)
            goto LABEL_95;
          if (HIBYTE(v46[2]) != 16)
            goto LABEL_103;
          if (v46[0] != (void *)0x65677261546F4E3CLL || v46[1] != (void *)0x3E7461636E6F4374)
            goto LABEL_79;
          goto LABEL_96;
        case 0x14:
          goto LABEL_86;
        case 0x16:
          v29 = v46[0] == (void *)0x53656372756F533CLL
             && v46[1] == (void *)0x656D694465746174
             && *(void **)((char *)&v46[1] + 6) == (void *)0x3E6E6F69736E656DLL;
          v17 = v10;
          if (!v29)
            goto LABEL_103;
          break;
        default:
          goto LABEL_103;
      }
LABEL_69:
      kaldi::ReadBasicType<int>(a2, a3, v17, v13, v14);
    }
  }
  v39 = *(_QWORD *)(a1 + 16);
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (v40)
  *(_QWORD *)(a1 + 16) = v40;
  kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
  if (SHIBYTE(v46[2]) < 0)
    operator delete(v46[0]);
}

void sub_1DE4BA16C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::MovingAttentionComponent::ReadData((uint64_t)a1 + *(_QWORD *)(*a1 - 176), a2, a3, a4);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  kaldi::nnet1::Component *v16;
  uint64_t v17;
  const char *v18;
  std::string __p;

  kaldi::WriteToken(a2, a3, (kaldi *)"<SourceStateDimension>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxAttentions>", v8, v9);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LeftContext>", v10, v11);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<RightContext>", v12, v13);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  if (!*(_BYTE *)(a1 + 416))
    kaldi::WriteToken(a2, a3, (kaldi *)"<SourceReversed>", v14, v15);
  if (!*(_BYTE *)(a1 + 417))
    kaldi::WriteToken(a2, a3, (kaldi *)"<NoTargetConcat>", v14, v15);
  if (*(_BYTE *)(a1 + 418))
    kaldi::WriteToken(a2, a3, (kaldi *)"<ReattachTarget>", v14, v15);
  if (*(_BYTE *)(a1 + 419))
    kaldi::WriteToken(a2, a3, (kaldi *)"<DotProductRelation>", v14, v15);
  kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v14, v15);
  v16 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  kaldi::nnet1::Component::TypeToMarker(v16, &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v17, v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  return kaldi::WriteBasicType<int>(a2, (int)a3);
}

void sub_1DE4BA348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::WriteConfig(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::MovingAttentionComponent::WriteConfig((uint64_t)a1 + *(_QWORD *)(*a1 - 184), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::WriteData(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ((void (*)(_QWORD **))(*a1)[12])(a1);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a1[2] + 104))(a1[2], a2, a3, a4);
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::WriteData(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD **v7;

  v7 = (_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 120));
  ((void (*)(_QWORD **))(*v7)[12])(v7);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v7[2] + 104))(v7[2], a2, a3, a4);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::NumParams(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 176))(*((_QWORD *)this + 2));
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::NumParams(kaldi::nnet1::MovingAttentionComponent *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 176))(v1);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetParams(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 184))(*(_QWORD *)(a1 + 16));
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::GetParams(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 200) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 184))(v1);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetParams(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 192))(*(_QWORD *)(a1 + 16));
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::SetParams(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 208) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 192))(v1);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SumParams(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 208))(*((_QWORD *)this + 2));
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::SumParams(kaldi::nnet1::MovingAttentionComponent *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 224) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 208))(v1);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::PerturbParams(kaldi::nnet1::MovingAttentionComponent *this, float a2)
{
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 2) + 216))(*((_QWORD *)this + 2), a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::PerturbParams(kaldi::nnet1::MovingAttentionComponent *this, float a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 232) + 16);
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v2 + 216))(v2, a2);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::Info(kaldi::nnet1::MovingAttentionComponent *this)
{
  void **v2;
  uint64_t v3;
  void *__p[2];
  unsigned __int8 v6;
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  (*(void (**)(kaldi::nnet1::MovingAttentionComponent *, _QWORD *, _QWORD))(*(_QWORD *)this + 96))(this, v7, 0);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 2) + 64))(__p);
  if ((v6 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v6 & 0x80u) == 0)
    v3 = v6;
  else
    v3 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v2, v3);
  if ((char)v6 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v9);
}

void sub_1DE4BA60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::Info(kaldi::nnet1::MovingAttentionComponent *this)
{
  return kaldi::nnet1::MovingAttentionComponent::Info((kaldi::nnet1::MovingAttentionComponent *)((char *)this
                                                                                               + *(_QWORD *)(*(_QWORD *)this - 80)));
}

uint64_t kaldi::nnet1::MovingAttentionComponent::InfoGradient(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::InfoGradient(kaldi::nnet1::MovingAttentionComponent *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetTrainOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;

  v2 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v2 + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(v2 + 56) = v3;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 264))(*(_QWORD *)(a1 + 16));
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::SetTrainOptions(_QWORD *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  __int128 v4;

  v2 = (char *)a1 + *(_QWORD *)(*a1 - 280);
  v3 = &v2[*(_QWORD *)(*(_QWORD *)v2 - 24)];
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v3 + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(v3 + 56) = v4;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 2) + 264))(*((_QWORD *)v2 + 2));
}

void kaldi::nnet1::MovingAttentionComponent::SetSourceStates(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const char *v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD **v27;
  unint64_t v28;
  _QWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int *v42;
  int **v43;
  unint64_t v44;
  _QWORD *v45;
  int *v46;
  int *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  int *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD v59[4];
  void *__p;
  __int128 v61;
  __int128 v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
  v7 = a3[1] - *a3;
  v8 = *(_DWORD *)(a2 + 20);
  v9 = v8 / (int)(v7 >> 2);
  v57 = v7 >> 2;
  v58 = a3;
  if (v9 * (v7 >> 2) != v8)
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0xED, "seq_size * num_seq == source.NumRows()", v6);
  v10 = *(_DWORD *)(a2 + 16);
  if (v10 != *(_DWORD *)(a1 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SetSourceStates", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0xEE, "source.NumCols() == source_vec_dim_", v6);
  kaldi::CuMatrix<float>::Resize(a1 + 24, v57, ((*(_DWORD *)(a1 + 408) + *(_DWORD *)(a1 + 412) + v9) * v10), 0, 0);
  v55 = v7;
  v56 = (v7 >> 2);
  if ((int)v57 >= 1)
  {
    v11 = 0;
    v12 = *(_DWORD *)(a1 + 8);
    v13 = *a3;
    do
    {
      if (*(int *)(v13 + 4 * v11) >= 1)
      {
        v14 = 0;
        v15 = (v12 * *(_DWORD *)(a1 + 408));
        v16 = v11;
        do
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, a1 + 24, 0, *(_DWORD *)(a1 + 44), (const char *)v15, v12);
          if (v11 >= HIDWORD(v61))
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v19);
          v63 = &unk_1EA926538;
          v64 = v61 + 4 * (int)v62 * (int)v11;
          v66 = *((_QWORD *)&v62 + 1);
          v65 = DWORD2(v61);
          if (*(_DWORD *)(a2 + 20) <= v16)
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v19);
          v20 = *(_QWORD *)(a2 + 8) + 4 * (int)(*(_DWORD *)(a2 + 24) * v16);
          v21 = *(_DWORD *)(a2 + 16);
          v22 = *(_QWORD *)(a2 + 32);
          v59[0] = &unk_1EA926538;
          v59[1] = v20;
          v59[3] = v22;
          v59[2] = v21;
          kaldi::CuVectorBase<float>::CopyFromVec(&v63, (uint64_t)v59, v17, v18, v19);
          v63 = &unk_1EA926538;
          v64 = 0;
          LODWORD(v65) = 0;
          v66 = 0;
          __p = &unk_1EA926508;
          v61 = 0u;
          v62 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
          v12 = *(_DWORD *)(a1 + 8);
          v15 = (v12 + v15);
          ++v14;
          v13 = *a3;
          v16 += v57;
        }
        while (v14 < *(_DWORD *)(*a3 + 4 * v11));
      }
      ++v11;
    }
    while (v11 != v56);
  }
  v23 = (int)(v55 >> 2);
  __p = 0;
  v61 = 0uLL;
  std::vector<std::vector<int>>::assign((uint64_t *)(a1 + 264), v23, (uint64_t)&__p);
  if (__p)
  {
    *(_QWORD *)&v61 = __p;
    operator delete(__p);
  }
  __p = 0;
  v61 = 0uLL;
  std::vector<std::vector<int>>::assign((uint64_t *)(a1 + 288), v23, (uint64_t)&__p);
  if (__p)
  {
    *(_QWORD *)&v61 = __p;
    operator delete(__p);
  }
  if (*(_BYTE *)(a1 + 416))
  {
    std::vector<int>::resize((std::vector<int> *)(a1 + 384), v23);
    if ((int)v57 >= 1)
    {
      v24 = 0;
      do
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 384) + 4 * v24) = *(_DWORD *)(*a3 + 4 * v24) + *(_DWORD *)(a1 + 408) - 1;
        v25 = *(_QWORD *)(a1 + 288) + 24 * v24;
        v27 = (_DWORD **)(v25 + 8);
        v26 = *(_DWORD **)(v25 + 8);
        v29 = (_QWORD *)(v25 + 16);
        v28 = *(_QWORD *)(v25 + 16);
        if ((unint64_t)v26 >= v28)
        {
          v31 = *(_DWORD **)v25;
          v32 = ((uint64_t)v26 - *(_QWORD *)v25) >> 2;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 62)
            goto LABEL_58;
          v34 = v28 - (_QWORD)v31;
          if (v34 >> 1 > v33)
            v33 = v34 >> 1;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
            v35 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v35 = v33;
          if (v35)
          {
            v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v29, v35);
            v26 = *v27;
            v31 = *(_DWORD **)v25;
          }
          else
          {
            v36 = 0;
          }
          v37 = &v36[4 * v32];
          *(_DWORD *)v37 = *(_DWORD *)(a1 + 408);
          v30 = v37 + 4;
          while (v26 != v31)
          {
            v38 = *--v26;
            *((_DWORD *)v37 - 1) = v38;
            v37 -= 4;
          }
          *(_QWORD *)v25 = v37;
          *v27 = v30;
          *v29 = &v36[4 * v35];
          if (v31)
            operator delete(v31);
        }
        else
        {
          *v26 = *(_DWORD *)(a1 + 408);
          v30 = v26 + 1;
        }
        *v27 = v30;
        ++v24;
      }
      while (v24 != v56);
    }
  }
  else if ((int)v57 >= 1)
  {
    v39 = 0;
    do
    {
      v40 = *(_QWORD *)(a1 + 288) + 24 * v39;
      v41 = *(_DWORD *)(*v58 + 4 * v39) + *(_DWORD *)(a1 + 408) - 1;
      v43 = (int **)(v40 + 8);
      v42 = *(int **)(v40 + 8);
      v45 = (_QWORD *)(v40 + 16);
      v44 = *(_QWORD *)(v40 + 16);
      if ((unint64_t)v42 >= v44)
      {
        v47 = *(int **)v40;
        v48 = ((uint64_t)v42 - *(_QWORD *)v40) >> 2;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 62)
LABEL_58:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v50 = v44 - (_QWORD)v47;
        if (v50 >> 1 > v49)
          v49 = v50 >> 1;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
          v51 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (v51)
        {
          v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v45, v51);
          v42 = *v43;
          v47 = *(int **)v40;
        }
        else
        {
          v52 = 0;
        }
        v53 = (int *)&v52[4 * v48];
        *v53 = v41;
        v46 = v53 + 1;
        while (v42 != v47)
        {
          v54 = *--v42;
          *--v53 = v54;
        }
        *(_QWORD *)v40 = v53;
        *v43 = v46;
        *v45 = &v52[4 * v51];
        if (v47)
          operator delete(v47);
      }
      else
      {
        *v42 = v41;
        v46 = v42 + 1;
      }
      *v43 = v46;
      ++v39;
    }
    while (v39 != v56);
  }
}

void sub_1DE4BABE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double kaldi::nnet1::MovingAttentionComponent::GetSourceDiffs(int *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  const char *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  unint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  double result;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[4];
  void *v38;
  __int128 v39;
  __int128 v40;

  kaldi::nnet1::MovingAttentionComponent::Check(a1);
  v28 = a3;
  v9 = a3[1] - *a3;
  v10 = v9 >> 2;
  v11 = *(_DWORD *)(a2 + 20);
  v12 = v11 / (int)(v9 >> 2);
  if (v12 * (v9 >> 2) != v11)
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x112, "seq_size * num_seq == source.NumRows()", v8);
  v13 = *(_DWORD *)(a2 + 16);
  if (v13 != a1[2])
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x113, "source.NumCols() == source_vec_dim_", v8);
  if (a1[35] != (_DWORD)v10)
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x114, "accumed_source_states_diff_.NumRows() == num_seq", v8);
  v14 = a1[102];
  if (a1[34] != (v14 + a1[103] + v12) * v13)
    kaldi::KaldiAssertFailure_((kaldi *)"GetSourceDiffs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x115, "accumed_source_states_diff_.NumCols() == (left_context_ + seq_size + right_context_) * source_vec_dim_", v8);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v38, (uint64_t)(a1 + 30), 0, v10, (const char *)(v14 * v13), v13 * v12);
  kaldi::CuMatrix<float>::Resize(a4, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  v29 = v9 >> 2;
  if ((int)v10 >= 1)
  {
    v16 = 0;
    v27 = (v9 >> 2);
    do
    {
      if (v16 >= (uint64_t)(v28[1] - *v28) >> 2)
        std::vector<int>::__throw_out_of_range[abi:ne180100]();
      v17 = *(_DWORD *)(*v28 + 4 * v16);
      if (v17 >= 1)
      {
        v18 = 0;
        v19 = v16;
        do
        {
          if (*(_DWORD *)(a4 + 20) <= v19)
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v15);
          v20 = *(_QWORD *)(a4 + 8) + 4 * (int)(*(_DWORD *)(a4 + 24) * v19);
          v21 = *(_DWORD *)(a4 + 16);
          v22 = *(_QWORD *)(a4 + 32);
          v37[0] = &unk_1EA926538;
          v37[1] = v20;
          v37[3] = v22;
          v37[2] = v21;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v30, (uint64_t)&v38, 0, SHIDWORD(v39), (const char *)(a1[2] * v18), a1[2]);
          if (v16 >= HIDWORD(v31))
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v25);
          v33 = &unk_1EA926538;
          v34 = v31 + 4 * (int)v32 * (int)v16;
          v36 = *((_QWORD *)&v32 + 1);
          v35 = DWORD2(v31);
          kaldi::CuVectorBase<float>::CopyFromVec(v37, (uint64_t)&v33, v23, v24, v25);
          v33 = &unk_1EA926538;
          v34 = 0;
          LODWORD(v35) = 0;
          v36 = 0;
          v30 = &unk_1EA926508;
          v31 = 0u;
          v32 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v30);
          ++v18;
          v19 += v29;
        }
        while (v17 != v18);
      }
      ++v16;
    }
    while (v16 != v27);
  }
  v38 = &unk_1EA926508;
  v39 = 0u;
  v40 = 0u;
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v38).n128_u64[0];
  return result;
}

void sub_1DE4BAF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,__int128 a26,__int128 a27)
{
  a25 = &unk_1EA926508;
  a26 = 0u;
  a27 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a25);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetCurrentAlignment(uint64_t a1, std::vector<int> *this)
{
  int v4;
  std::vector<int>::pointer begin;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = -1431655765 * ((uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 3);
  std::vector<int>::resize(this, v4);
  if (v4 >= 1)
  {
    begin = this->__begin_;
    v6 = v4;
    v7 = (uint64_t *)(*(_QWORD *)(a1 + 264) + 8);
    do
    {
      v8 = *v7;
      v7 += 3;
      *begin++ = *(_DWORD *)(v8 - 4) - *(_DWORD *)(a1 + 408);
      --v6;
    }
    while (v6);
  }
  return 1;
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetOverallAlignment(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD **v7;
  _DWORD *i;
  uint64_t v9;
  int v10;
  int *v11;
  int **v12;
  unint64_t v13;
  _QWORD *v14;
  int *v15;
  int *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  int *v22;
  int v23;
  uint64_t v25;

  v4 = -1431655765 * ((uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 3);
  std::vector<std::vector<int>>::resize(a2, v4);
  if (v4 >= 1)
  {
    v5 = 0;
    v25 = v4;
    v6 = *(_QWORD *)(a1 + 264);
    do
    {
      v7 = (_DWORD **)(v6 + 24 * v5);
      for (i = *v7; i != v7[1]; ++i)
      {
        v9 = *a2 + 24 * v5;
        v10 = *i - *(_DWORD *)(a1 + 408);
        v12 = (int **)(v9 + 8);
        v11 = *(int **)(v9 + 8);
        v14 = (_QWORD *)(v9 + 16);
        v13 = *(_QWORD *)(v9 + 16);
        if ((unint64_t)v11 >= v13)
        {
          v16 = *(int **)v9;
          v17 = ((uint64_t)v11 - *(_QWORD *)v9) >> 2;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v19 = v13 - (_QWORD)v16;
          if (v19 >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v14, v20);
            v11 = *v12;
            v16 = *(int **)v9;
          }
          else
          {
            v21 = 0;
          }
          v22 = (int *)&v21[4 * v17];
          *v22 = v10;
          v15 = v22 + 1;
          while (v11 != v16)
          {
            v23 = *--v11;
            *--v22 = v23;
          }
          *(_QWORD *)v9 = v22;
          *v12 = v15;
          *v14 = &v21[4 * v20];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *v11 = v10;
          v15 = v11 + 1;
        }
        *v12 = v15;
        v6 = *(_QWORD *)(a1 + 264);
        v7 = (_DWORD **)(v6 + 24 * v5);
      }
      ++v5;
    }
    while (v5 != v25);
  }
  return 1;
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetSourceVectorDimension(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 8) != a2)
  {
    *(_DWORD *)(this + 8) = a2;
    *(_BYTE *)(this + 420) = 0;
  }
  return this;
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetMaxAttentions(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 12) != a2)
  {
    *(_DWORD *)(this + 12) = a2;
    *(_BYTE *)(this + 420) = 0;
  }
  return this;
}

double kaldi::nnet1::MovingAttentionComponent::PropagateFnc(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const char *v11;
  int v12;
  __int128 v13;
  int v14;
  _OWORD *v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  __n128 v35;
  uint64_t v36;
  const char *v37;
  unsigned int *v38;
  uint64_t v39;
  const char *v40;
  int v42;
  uint64_t v44;
  int v45;
  void *v46;
  __int128 v47;
  __int128 v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  _QWORD v54[4];
  void *v55;
  _OWORD v56[2];

  kaldi::nnet1::MovingAttentionComponent::Check(a1);
  v44 = a2;
  v8 = *a1;
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x14A, "in.NumCols() == input_dim_", v7);
  if (a4)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x14C, "batch_idx == 0", v7);
  v9 = *((unsigned int *)a1 + 11);
  v10 = *(_DWORD *)(a2 + 20);
  v42 = v10 / (int)v9;
  if (v10 / (int)v9 * (_DWORD)v9 != v10)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x14F, "num_seq * seq_size == in.NumRows()", v7);
  v11 = (const char *)(*((_DWORD *)a1 + 2) * *((_DWORD *)a1 + 3));
  a1[13] = *(_QWORD *)(a3 + 32);
  if (*((_BYTE *)a1 + 417))
    v12 = *(_DWORD *)((char *)a1 + *(_QWORD *)(v8 - 24) + 8);
  else
    v12 = 0;
  kaldi::CuMatrix<float>::Resize((uint64_t)(a1 + 9), v9, (v12 + (_DWORD)v11), 1u, 0);
  if (v42 >= 1)
  {
    v14 = 0;
    v15 = v56;
    v13 = 0uLL;
    do
    {
      *v15 = v13;
      v15[1] = v13;
      v55 = &unk_1EA926508;
      v45 = v14;
      if (*((_BYTE *)a1 + 417))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v53, (uint64_t)(a1 + 9), 0, *((_DWORD *)a1 + 23), v11, *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8));
        *(_QWORD *)&v56[0] = v54[0];
        *(_OWORD *)((char *)v56 + 8) = *(_OWORD *)&v54[1];
        *((_QWORD *)&v56[1] + 1) = v54[3];
        v53 = &unk_1EA926508;
        memset(v54, 0, sizeof(v54));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v53);
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v53, v44, v14 * v9, v9, 0, *(_DWORD *)(v44 + 16));
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v55, (uint64_t)&v53, 111, v16, v17);
      }
      else
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v53, v44, v14 * v9, v9, 0, *(_DWORD *)(v44 + 16));
        *(_QWORD *)&v56[0] = v54[0];
        *(_OWORD *)((char *)v56 + 8) = *(_OWORD *)&v54[1];
        *((_QWORD *)&v56[1] + 1) = v54[3];
      }
      v53 = &unk_1EA926508;
      memset(v54, 0, sizeof(v54));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v53);
      if ((int)v9 >= 1)
      {
        v19 = 0;
        v20 = 8;
        do
        {
          v21 = v15;
          v22 = *(_DWORD *)(*(_QWORD *)(a1[36] + v20) - 4) - *((_DWORD *)a1 + 102);
          if (v22 < 0)
            kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x161, "begin >= 0", v18);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v53, (uint64_t)(a1 + 9), 0, *((_DWORD *)a1 + 23), 0, (int)v11);
          if (v19 >= HIDWORD(v54[1]))
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v25);
          v46 = &unk_1EA926538;
          *(_QWORD *)&v47 = v54[0] + 4 * LODWORD(v54[2]) * (int)v19;
          *(_QWORD *)&v48 = v54[3];
          *((_QWORD *)&v47 + 1) = LODWORD(v54[1]);
          if (v19 >= *((unsigned int *)a1 + 11))
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v25);
          v26 = a1[4];
          v27 = *((_DWORD *)a1 + 12);
          v28 = *((_DWORD *)a1 + 10);
          v29 = a1[7];
          v30 = *((_DWORD *)a1 + 2) * v22;
          v51 = 0;
          v52 = 0;
          v50 = 0;
          v49 = &unk_1EA926538;
          if (v30 + (int)v11 > v28)
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v25);
          v50 = v26 + 4 * v27 * (int)v19 + 4 * v30;
          LODWORD(v51) = (_DWORD)v11;
          v52 = v29;
          v15 = v21;
          kaldi::CuVectorBase<float>::CopyFromVec(&v46, (uint64_t)&v49, v23, v24, v25);
          v46 = &unk_1EA926538;
          *(_QWORD *)&v47 = 0;
          DWORD2(v47) = 0;
          *(_QWORD *)&v48 = 0;
          v53 = &unk_1EA926508;
          memset(v54, 0, sizeof(v54));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v53);
          ++v19;
          v20 += 24;
        }
        while (v9 != v19);
      }
      if (*((_BYTE *)a1 + 419) && *((int *)a1 + 3) >= 1)
      {
        v31 = 0;
        do
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v53, (uint64_t)(a1 + 9), 0, *((_DWORD *)a1 + 23), (const char *)(*((_DWORD *)a1 + 2) * v31), *((_DWORD *)a1 + 2));
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v53, (uint64_t)&v55, v32, v33, v34);
          v53 = &unk_1EA926508;
          memset(v54, 0, sizeof(v54));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v53);
          ++v31;
        }
        while (v31 < *((_DWORD *)a1 + 3));
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v46, a3, v45 * v9, v9, 0, *(_DWORD *)(a3 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v53, (uint64_t)&v46, 0, SHIDWORD(v47), 0, *(_DWORD *)(a1[2] + 12));
      v46 = &unk_1EA926508;
      v47 = 0u;
      v48 = 0u;
      v35 = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v46);
      (*(void (**)(uint64_t, uint64_t *, void **, _QWORD, __n128))(*(_QWORD *)a1[2] + 112))(a1[2], a1 + 9, &v53, 0, v35);
      kaldi::nnet1::MovingAttentionComponent::ComputeAlignments((uint64_t)a1, (uint64_t)(a1 + 9), (uint64_t)&v53, v36, v37);
      v53 = &unk_1EA926508;
      memset(v54, 0, sizeof(v54));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v53);
      v55 = &unk_1EA926508;
      *v15 = 0u;
      v15[1] = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v55);
      v13 = 0uLL;
      v14 = v45 + 1;
    }
    while (v45 + 1 != v42);
  }
  if (*((_BYTE *)a1 + 418))
  {
    v38 = (unsigned int *)kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v55, a3, 0, *(_DWORD *)(a3 + 20), (const char *)*(unsigned int *)(a1[2] + 12), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8));
    kaldi::CuMatrixBase<float>::CopyFromMat<float>(v38, v44, 111, v39, v40);
    v55 = &unk_1EA926508;
    memset(v56, 0, sizeof(v56));
    *(_QWORD *)&v13 = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v55).n128_u64[0];
  }
  return *(double *)&v13;
}

void sub_1DE4BB84C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = &unk_1EA926508;
  *(_OWORD *)(v2 - 120) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2 - 128);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MovingAttentionComponent::ComputeAlignments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  _QWORD *v10;
  const char *v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD **v24;
  unint64_t v25;
  _QWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  uint64_t v36;
  void **v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  _QWORD *v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  _DWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  int v69;
  unsigned int v70;
  const char *v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t i;
  int v79;
  uint64_t v80;
  int v81;
  int *v82;
  int **v83;
  unint64_t v84;
  _QWORD *v85;
  int *v86;
  int *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  int *v93;
  int v94;
  int v95;
  uint64_t v96;
  _DWORD *v97;
  int v98;
  uint64_t v99;
  void ***v100;
  char *v101;
  void **v102;
  unint64_t v103;
  uint64_t v104;
  void **v105;
  int v106;
  int v107;
  int v108;
  _DWORD **v109;
  unint64_t v110;
  _DWORD *v111;
  _DWORD *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  void **v118;
  void **v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  unint64_t v126;
  char **v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  void **v134;
  char *v135;
  int v136;
  char *v137;
  int v138;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  __int128 v143;
  __int128 v144;
  void *v145;
  __int128 v146;
  __int128 v147;
  std::vector<int> __p;
  __int128 v149;

  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 3);
  if (v5 != *(_DWORD *)(a2 + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"ComputeAlignments", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x177, "alignments_.size() == num_seq", a5);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 3) != v5)
    kaldi::KaldiAssertFailure_((kaldi *)"ComputeAlignments", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x178, "current_focal_points_.size() == num_seq", a5);
  v7 = *(unsigned int *)(a2 + 20);
  v8 = *(unsigned int **)(a1 + 16);
  v141 = v7;
  if (!v8)
  {
LABEL_13:
    if ((int)v7 < 1)
      return;
    v20 = 0;
    while (1)
    {
      v21 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 24 * v20 + 8) - 4);
      v22 = *(_QWORD *)(a1 + 264) + 24 * v20;
      v24 = (_DWORD **)(v22 + 8);
      v23 = *(_DWORD **)(v22 + 8);
      v26 = (_QWORD *)(v22 + 16);
      v25 = *(_QWORD *)(v22 + 16);
      if ((unint64_t)v23 >= v25)
      {
        v28 = *(_DWORD **)v22;
        v29 = ((uint64_t)v23 - *(_QWORD *)v22) >> 2;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 62)
          goto LABEL_168;
        v31 = v25 - (_QWORD)v28;
        if (v31 >> 1 > v30)
          v30 = v31 >> 1;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
          v32 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
        {
          v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v26, v32);
          v23 = *v24;
          v28 = *(_DWORD **)v22;
        }
        else
        {
          v33 = 0;
        }
        v34 = &v33[4 * v29];
        *(_DWORD *)v34 = v21;
        v27 = v34 + 4;
        while (v23 != v28)
        {
          v35 = *--v23;
          *((_DWORD *)v34 - 1) = v35;
          v34 -= 4;
        }
        *(_QWORD *)v22 = v34;
        *v24 = v27;
        *v26 = &v33[4 * v32];
        if (v28)
          operator delete(v28);
        v7 = v141;
      }
      else
      {
        *v23 = v21;
        v27 = v23 + 1;
      }
      *v24 = v27;
      v36 = *(_QWORD *)(a1 + 288);
      v37 = (void **)(v36 + 24 * v20);
      if (*(_BYTE *)(a1 + 416))
      {
        v38 = v21 + 1;
        v39 = *(_QWORD *)(a1 + 384);
        v40 = *(_DWORD *)(v39 + 4 * v20);
        v41 = v36 + 24 * v20;
        v44 = *(char **)(v41 + 8);
        v43 = v41 + 8;
        v42 = v44;
        v46 = (_QWORD *)(v43 + 8);
        v45 = *(_QWORD *)(v43 + 8);
        if ((unint64_t)v44 >= v45)
        {
          v54 = (char *)*v37;
          v55 = (v42 - (_BYTE *)*v37) >> 2;
          v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 62)
            goto LABEL_168;
          v57 = v45 - (_QWORD)v54;
          if (v57 >> 1 > v56)
            v56 = v57 >> 1;
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
            v58 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v58 = v56;
          if (v58)
          {
            v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v43 + 8, v58);
            v42 = *(char **)v43;
            v54 = (char *)*v37;
          }
          else
          {
            v59 = 0;
          }
          if (v40 <= v21)
            v38 = *(_DWORD *)(v39 + 4 * v20);
          v63 = &v59[4 * v55];
          *(_DWORD *)v63 = v38;
          v53 = v63 + 4;
          while (v42 != v54)
          {
            v64 = *((_DWORD *)v42 - 1);
            v42 -= 4;
            *((_DWORD *)v63 - 1) = v64;
            v63 -= 4;
          }
LABEL_70:
          *v37 = v63;
          *(_QWORD *)v43 = v53;
          *v46 = &v59[4 * v58];
          if (v54)
            operator delete(v54);
          v7 = v141;
          goto LABEL_73;
        }
        if (v40 <= v21)
          v47 = *(_DWORD *)(v39 + 4 * v20);
        else
          v47 = v21 + 1;
      }
      else
      {
        v48 = v21 - 1;
        v49 = *(_DWORD *)(a1 + 408);
        v50 = v36 + 24 * v20;
        v51 = *(char **)(v50 + 8);
        v43 = v50 + 8;
        v42 = v51;
        v46 = (_QWORD *)(v43 + 8);
        v52 = *(_QWORD *)(v43 + 8);
        if ((unint64_t)v51 >= v52)
        {
          v54 = (char *)*v37;
          v60 = (v42 - (_BYTE *)*v37) >> 2;
          v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 62)
LABEL_168:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v62 = v52 - (_QWORD)v54;
          if (v62 >> 1 > v61)
            v61 = v62 >> 1;
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
            v58 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v58 = v61;
          if (v58)
          {
            v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v43 + 8, v58);
            v42 = *(char **)v43;
            v54 = (char *)*v37;
          }
          else
          {
            v59 = 0;
          }
          if (v21 <= v49)
            v48 = *(_DWORD *)(a1 + 408);
          v63 = &v59[4 * v60];
          *(_DWORD *)v63 = v48;
          v53 = v63 + 4;
          while (v42 != v54)
          {
            v65 = *((_DWORD *)v42 - 1);
            v42 -= 4;
            *((_DWORD *)v63 - 1) = v65;
            v63 -= 4;
          }
          goto LABEL_70;
        }
        if (v21 <= v49)
          v47 = *(_DWORD *)(a1 + 408);
        else
          v47 = v21 - 1;
      }
      *(_DWORD *)v42 = v47;
      v53 = v42 + 4;
LABEL_73:
      *(_QWORD *)v43 = v53;
      if (++v20 == v7)
        return;
    }
  }
  if (!v10)
  {
    v7 = v141;
    if (v13)
    {
      v12 = v13[14];
      if (!v12)
        kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x251, "linearity_", v14);
      goto LABEL_9;
    }
    goto LABEL_13;
  }
  v12 = v10[13];
  LODWORD(v7) = v141;
  if (!v12)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x157, "linearity_", v11);
LABEL_9:
  v140 = a1 + 216;
  kaldi::CuMatrix<float>::Resize(a1 + 216, (v7 + v7 * *(_DWORD *)(a1 + 12)), v8[3], 1u, 0);
  v15 = *(unsigned int *)(a1 + 12);
  if ((int)v15 < 1)
  {
    v18 = v141;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    LODWORD(v18) = v141;
    do
    {
      v19 = (const char *)(*(_DWORD *)(a1 + 8) * v17);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, v140, v16, v18, 0, *(_DWORD *)(a1 + 232));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v145, a2, 0, *(_DWORD *)(a2 + 20), v19, *(_DWORD *)(a1 + 8));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v142, v12, 0, *(_DWORD *)(v12 + 20), v19, *(_DWORD *)(a1 + 8));
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&__p, (uint64_t)&v145, CblasNoTrans, (uint64_t)&v142, (const char *)0x70, 1.0, 0.0);
      v142 = &unk_1EA926508;
      v143 = 0u;
      v144 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v142);
      v145 = &unk_1EA926508;
      v146 = 0u;
      v147 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v145);
      __p.__begin_ = (std::vector<int>::pointer)&unk_1EA926508;
      *(_OWORD *)&__p.__end_ = 0u;
      v149 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
      ++v17;
      v15 = *(unsigned int *)(a1 + 12);
      v18 = v141;
      v16 += v141;
    }
    while (v17 < (int)v15);
  }
  kaldi::CuMatrix<float>::Resize(a1 + 336, v18, v15, 1u, 0);
  v69 = v141;
  if ((int)v141 >= 1)
  {
    v70 = 0;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, v140, v70, *(_DWORD *)(a1 + 12) * v69, 0, *(_DWORD *)(a1 + 232));
      if ((_DWORD)v141 != 1)
        kaldi::CuMatrixBase<float>::SetStride((uint64_t)&__p, *(_DWORD *)(a1 + 240) * v141);
      if (*(_DWORD *)(a1 + 356) <= v70)
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v71);
      v72 = *(_QWORD *)(a1 + 344) + 4 * (int)(*(_DWORD *)(a1 + 360) * v70);
      v73 = *(_DWORD *)(a1 + 352);
      v74 = *(_QWORD *)(a1 + 368);
      v145 = &unk_1EA926538;
      *(_QWORD *)&v146 = v72;
      *(_QWORD *)&v147 = v74;
      *((_QWORD *)&v146 + 1) = v73;
      if (*(_DWORD *)(a3 + 20) <= v70)
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v71);
      v75 = *(_QWORD *)(a3 + 8) + 4 * (int)(*(_DWORD *)(a3 + 24) * v70);
      v76 = *(_DWORD *)(a3 + 16);
      v77 = *(_QWORD *)(a3 + 32);
      v142 = &unk_1EA926538;
      *(_QWORD *)&v143 = v75;
      *(_QWORD *)&v144 = v77;
      *((_QWORD *)&v143 + 1) = v76;
      kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v145, (uint64_t)&__p, CblasNoTrans, (uint64_t)&v142, v71, 1.0, 0.0);
      __p.__begin_ = (std::vector<int>::pointer)&unk_1EA926508;
      *(_OWORD *)&__p.__end_ = 0u;
      v149 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
      ++v70;
      v69 = v141;
    }
    while ((_DWORD)v141 != v70);
  }
  kaldi::CuMatrixBase<float>::FindRowMaxId(a1 + 336, (int *)(a1 + 312), v66, v67, v68);
  memset(&__p, 0, sizeof(__p));
  kaldi::CuArray<int>::CopyToVec((const void **)(a1 + 312), &__p);
  if ((int)v141 >= 1)
  {
    for (i = 0; i != v141; ++i)
    {
      v79 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 24 * i + 8) - 4);
      v80 = *(_QWORD *)(a1 + 264) + 24 * i;
      v81 = __p.__begin_[i] + v79 - *(_DWORD *)(a1 + 408);
      v83 = (int **)(v80 + 8);
      v82 = *(int **)(v80 + 8);
      v85 = (_QWORD *)(v80 + 16);
      v84 = *(_QWORD *)(v80 + 16);
      if ((unint64_t)v82 >= v84)
      {
        v87 = *(int **)v80;
        v88 = ((uint64_t)v82 - *(_QWORD *)v80) >> 2;
        v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v90 = v84 - (_QWORD)v87;
        if (v90 >> 1 > v89)
          v89 = v90 >> 1;
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
          v91 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v91 = v89;
        if (v91)
        {
          v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v85, v91);
          v82 = *v83;
          v87 = *(int **)v80;
        }
        else
        {
          v92 = 0;
        }
        v93 = (int *)&v92[4 * v88];
        *v93 = v81;
        v86 = v93 + 1;
        while (v82 != v87)
        {
          v94 = *--v82;
          *--v93 = v94;
        }
        *(_QWORD *)v80 = v93;
        *v83 = v86;
        *v85 = &v92[4 * v91];
        if (v87)
          operator delete(v87);
      }
      else
      {
        *v82 = v81;
        v86 = v82 + 1;
      }
      *v83 = v86;
      if (*(_BYTE *)(a1 + 416))
      {
        v95 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 24 * i + 8) - 4);
        LODWORD(v145) = v95;
        v96 = *(_QWORD *)(a1 + 288);
        if (v95 == v79)
        {
          v97 = *(_DWORD **)(v96 + 24 * i + 8);
          if ((unint64_t)v97 - *(_QWORD *)(v96 + 24 * i) >= 5 && *(v97 - 2) == v79)
            LODWORD(v145) = ++v79;
        }
        else
        {
          v97 = *(_DWORD **)(v96 + 24 * i + 8);
          v79 = v95;
        }
        v104 = v96 + 24 * i;
        if (*(_DWORD *)(*(_QWORD *)(a1 + 384) + 4 * i) >= v79)
          v105 = &v145;
        else
          v105 = (void **)(*(_QWORD *)(a1 + 384) + 4 * i);
        v106 = *(_DWORD *)v105;
        v107 = *(_DWORD *)(a1 + 408);
        if (*(_DWORD *)v105 <= v107)
          v108 = *(_DWORD *)(a1 + 408);
        else
          v108 = *(_DWORD *)v105;
        v109 = (_DWORD **)(v104 + 8);
        v110 = *(_QWORD *)(v104 + 16);
        if ((unint64_t)v97 >= v110)
        {
          v112 = *(_DWORD **)v104;
          v113 = ((uint64_t)v97 - *(_QWORD *)v104) >> 2;
          v114 = v113 + 1;
          if ((unint64_t)(v113 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v115 = v110 - (_QWORD)v112;
          if (v115 >> 1 > v114)
            v114 = v115 >> 1;
          if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
            v116 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v116 = v114;
          if (v116)
          {
            v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v104 + 16, v116);
            v97 = *v109;
            v112 = *(_DWORD **)v104;
            v118 = (void **)(a1 + 408);
            if (v106 >= v107)
              v118 = v105;
            v108 = *(_DWORD *)v118;
          }
          else
          {
            v117 = 0;
          }
          v135 = &v117[4 * v113];
          *(_DWORD *)v135 = v108;
          v111 = v135 + 4;
          while (v97 != v112)
          {
            v136 = *--v97;
            *((_DWORD *)v135 - 1) = v136;
            v135 -= 4;
          }
          *(_QWORD *)v104 = v135;
          *v109 = v111;
          *(_QWORD *)(v104 + 16) = &v117[4 * v116];
          if (v112)
            operator delete(v112);
        }
        else
        {
          *v97 = v108;
          v111 = v97 + 1;
        }
        *v109 = v111;
      }
      else
      {
        v98 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 24 * i + 8) - 4);
        LODWORD(v145) = v98;
        v99 = *(_QWORD *)(a1 + 288);
        v100 = (void ***)(v99 + 24 * i);
        if (v98 == v79)
        {
          v101 = *(char **)(v99 + 24 * i + 8);
          v102 = *v100;
          v103 = v101 - (char *)*v100;
          if (v103 >= 5 && *(_DWORD *)((char *)v102 + v103 - 8) == v79)
            LODWORD(v145) = --v79;
        }
        else
        {
          v102 = *v100;
          v101 = *(char **)(v99 + 24 * i + 8);
          v79 = v98;
        }
        if (*(_DWORD *)v102 >= v79)
          v119 = &v145;
        else
          v119 = v102;
        v120 = *(_DWORD *)v119;
        v121 = *(_DWORD *)(a1 + 408);
        if (*(_DWORD *)v119 <= v121)
          v122 = *(_DWORD *)(a1 + 408);
        else
          v122 = *(_DWORD *)v119;
        v123 = v99 + 24 * i;
        v126 = *(_QWORD *)(v123 + 16);
        v125 = (_QWORD *)(v123 + 16);
        v124 = v126;
        v127 = (char **)(v125 - 1);
        if ((unint64_t)v101 >= v126)
        {
          v129 = (v101 - (char *)v102) >> 2;
          v130 = v129 + 1;
          if ((unint64_t)(v129 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v131 = v124 - (_QWORD)v102;
          if (v131 >> 1 > v130)
            v130 = v131 >> 1;
          if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFFCLL)
            v132 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v132 = v130;
          if (v132)
          {
            v133 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v125, v132);
            v101 = *v127;
            v102 = *v100;
            v134 = (void **)(a1 + 408);
            if (v120 >= v121)
              v134 = v119;
            v122 = *(_DWORD *)v134;
          }
          else
          {
            v133 = 0;
          }
          v137 = &v133[4 * v129];
          *(_DWORD *)v137 = v122;
          v128 = v137 + 4;
          while (v101 != (char *)v102)
          {
            v138 = *((_DWORD *)v101 - 1);
            v101 -= 4;
            *((_DWORD *)v137 - 1) = v138;
            v137 -= 4;
          }
          *v100 = (void **)v137;
          *v127 = v128;
          *v125 = &v133[4 * v132];
          if (v102)
            operator delete(v102);
        }
        else
        {
          *(_DWORD *)v101 = v122;
          v128 = v101 + 4;
        }
        *v127 = v128;
      }
    }
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_1DE4BC420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  return kaldi::nnet1::MovingAttentionComponent::PropagateFnc((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 128)), a2, a3, a4);
}

double kaldi::nnet1::MovingAttentionComponent::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  const char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  double result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  unint64_t i;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  unint64_t j;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v61;
  uint64_t v63;
  unsigned int v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  __int128 v70;
  __int128 v71;
  void *v72;
  __int128 v73;
  __int128 v74;
  void *v75;
  __int128 v76;
  __int128 v77;
  void *v78;
  __int128 v79;
  __int128 v80;
  void *v81;
  __int128 v82;
  __int128 v83;

  kaldi::nnet1::MovingAttentionComponent::Check(a1);
  v61 = a2;
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x1CB, "in.NumCols() == input_dim_", v9);
  if (a6)
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x1CC, "batch_idx == 0", v9);
  v10 = *((unsigned int *)a1 + 11);
  v11 = *(_DWORD *)(a2 + 20);
  v12 = (v11 / (int)v10);
  if ((_DWORD)v12 * (_DWORD)v10 != v11)
    kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x1CF, "num_seq * seq_size == in.NumRows()", v9);
  v13 = *((_DWORD *)a1 + 2);
  v14 = *((_DWORD *)a1 + 3);
  v15 = *(_QWORD *)(a5 + 32);
  a1[19] = v15;
  a1[25] = v15;
  kaldi::CuMatrix<float>::Resize((uint64_t)(a1 + 15), v10, *((unsigned int *)a1 + 10), 0, 0);
  v63 = (uint64_t)(a1 + 21);
  kaldi::CuMatrix<float>::Resize((uint64_t)(a1 + 21), v10, *(unsigned int *)(a1[2] + 8), 0, 0);
  if ((int)v12 >= 1)
  {
    v17 = 0;
    v64 = v13 * v14;
    v58 = v12;
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v81, v61, v10 * v17, v10, 0, *(_DWORD *)(v61 + 16));
      v18 = a1[2];
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v75, a3, v10 * v17, v10, 0, *(_DWORD *)(a3 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v78, (uint64_t)&v75, 0, SHIDWORD(v76), 0, *(_DWORD *)(a1[2] + 12));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v69, a4, v10 * v17, v10, 0, *(_DWORD *)(a4 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v72, (uint64_t)&v69, 0, SHIDWORD(v70), 0, *(_DWORD *)(a1[2] + 12));
      (*(void (**)(uint64_t, void **, void **, void **, uint64_t, _QWORD))(*(_QWORD *)v18 + 128))(v18, &v81, &v78, &v72, v63, 0);
      v72 = &unk_1EA926508;
      v73 = 0u;
      v74 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v72);
      v69 = &unk_1EA926508;
      v70 = 0u;
      v71 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v69);
      v78 = &unk_1EA926508;
      v79 = 0u;
      v80 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v78);
      v75 = &unk_1EA926508;
      v76 = 0u;
      v77 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v75);
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v78, a5, v10 * v17, v10, 0, *(_DWORD *)(a5 + 16));
      if (*((_BYTE *)a1 + 419) && (int)v10 >= 1)
      {
        for (i = 0; i != v10; ++i)
        {
          v22 = (*(_DWORD *)(*(_QWORD *)(a1[36] + 24 * i) + 4 * v17) - *((_DWORD *)a1 + 102)) * *((_DWORD *)a1 + 2);
          if (v22 < 0)
            kaldi::KaldiAssertFailure_((kaldi *)"BackpropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x1E9, "begin >= 0", v20);
          if (*((int *)a1 + 3) >= 1)
          {
            v23 = 0;
            do
            {
              if (i >= HIDWORD(v79))
                kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v20);
              v75 = &unk_1EA926538;
              *(_QWORD *)&v76 = v79 + 4 * (int)v80 * (int)i;
              *(_QWORD *)&v77 = *((_QWORD *)&v80 + 1);
              *((_QWORD *)&v76 + 1) = DWORD2(v79);
              if (i >= *((unsigned int *)a1 + 11))
                kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v20);
              v24 = a1[4];
              v25 = *((_DWORD *)a1 + 12);
              v26 = *((_DWORD *)a1 + 10);
              v27 = a1[7];
              v28 = *((_DWORD *)a1 + 2);
              v29 = v28 * v23;
              v30 = v28 * v23 + v22;
              *(_QWORD *)&v74 = 0;
              v73 = 0uLL;
              v72 = &unk_1EA926538;
              if (v30 + v28 > v26)
                kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v20);
              *(_QWORD *)&v73 = v24 + 4 * v25 * (int)i + 4 * v30;
              DWORD2(v73) = v28;
              *(_QWORD *)&v74 = v27;
              if (i >= *((unsigned int *)a1 + 47))
                kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v20);
              v31 = a1[22];
              v32 = *((_DWORD *)a1 + 48);
              v33 = *((_DWORD *)a1 + 46);
              v34 = a1[25];
              *(_QWORD *)&v71 = 0;
              v70 = 0uLL;
              v69 = &unk_1EA926538;
              if (v29 + v28 > v33)
                kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v20);
              *(_QWORD *)&v70 = v31 + 4 * v32 * (int)i + 4 * v29;
              DWORD2(v70) = v28;
              *(_QWORD *)&v71 = v34;
              kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v75, (uint64_t)&v72, (uint64_t)&v69, v19, v20, 1.0, 1.0);
              ++v23;
            }
            while (v23 < *((_DWORD *)a1 + 3));
          }
        }
      }
      if (*((_BYTE *)a1 + 417))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v75, v63, 0, *((_DWORD *)a1 + 47), (const char *)v64, *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8));
        kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v78, (uint64_t)&v75, 111, v35, v36, 1.0, 1.0);
        v75 = &unk_1EA926508;
        v76 = 0u;
        v77 = 0u;
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v75);
      }
      if ((int)v10 >= 1)
      {
        for (j = 0; j != v10; ++j)
        {
          v38 = *((_DWORD *)a1 + 2);
          v39 = (*(_DWORD *)(*(_QWORD *)(a1[36] + 24 * j) + 4 * v17) - *((_DWORD *)a1 + 102)) * v38;
          if (*((_BYTE *)a1 + 419))
          {
            if (*((int *)a1 + 3) >= 1)
            {
              v40 = 0;
              do
              {
                if (j >= *((unsigned int *)a1 + 35))
                  kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v20);
                v41 = a1[16];
                v42 = *((_DWORD *)a1 + 36);
                v43 = *((_DWORD *)a1 + 34);
                v44 = a1[19];
                v45 = *((_DWORD *)a1 + 2);
                v46 = v45 * v40;
                v47 = v45 * v40 + v39;
                *(_QWORD *)&v77 = 0;
                v76 = 0uLL;
                v75 = &unk_1EA926538;
                if (v47 + v45 > v43)
                  kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v20);
                *(_QWORD *)&v76 = v41 + 4 * v42 * (int)j + 4 * v47;
                DWORD2(v76) = v45;
                *(_QWORD *)&v77 = v44;
                if (j >= HIDWORD(v82))
                  kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v20);
                v72 = &unk_1EA926538;
                *(_QWORD *)&v73 = v82 + 4 * (int)v83 * (int)j;
                *(_QWORD *)&v74 = *((_QWORD *)&v83 + 1);
                *((_QWORD *)&v73 + 1) = DWORD2(v82);
                if (j >= *((unsigned int *)a1 + 47))
                  kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v20);
                v48 = a1[22];
                v49 = *((_DWORD *)a1 + 48);
                v50 = *((_DWORD *)a1 + 46);
                v51 = a1[25];
                *(_QWORD *)&v71 = 0;
                v70 = 0uLL;
                v69 = &unk_1EA926538;
                if (v46 + v45 > v50)
                  kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v20);
                *(_QWORD *)&v70 = v48 + 4 * v49 * (int)j + 4 * v46;
                DWORD2(v70) = v45;
                *(_QWORD *)&v71 = v51;
                kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v75, (uint64_t)&v72, (uint64_t)&v69, v19, v20, 1.0, 1.0);
                ++v40;
              }
              while (v40 < *((_DWORD *)a1 + 3));
            }
          }
          else
          {
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v75, (uint64_t)(a1 + 15), 0, *((_DWORD *)a1 + 35), (const char *)((*(_DWORD *)(*(_QWORD *)(a1[36] + 24 * j) + 4 * v17) - *((_DWORD *)a1 + 102))* v38), v64);
            if (j >= HIDWORD(v76))
              kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v52);
            v69 = &unk_1EA926538;
            *(_QWORD *)&v70 = v76 + 4 * (int)v77 * (int)j;
            *(_QWORD *)&v71 = *((_QWORD *)&v77 + 1);
            *((_QWORD *)&v70 + 1) = DWORD2(v76);
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v72, v63, 0, *((_DWORD *)a1 + 47), 0, v64);
            if (j >= HIDWORD(v73))
              kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v55);
            v65 = &unk_1EA926538;
            v66 = v73 + 4 * (int)v74 * (int)j;
            v68 = *((_QWORD *)&v74 + 1);
            v67 = DWORD2(v73);
            kaldi::CuVectorBase<float>::AddVec((uint64_t)&v69, (uint64_t)&v65, v53, v54, v55, 1.0, 1.0);
            v65 = &unk_1EA926538;
            v66 = 0;
            LODWORD(v67) = 0;
            v68 = 0;
            v72 = &unk_1EA926508;
            v73 = 0u;
            v74 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v72);
            v69 = &unk_1EA926538;
            *(_QWORD *)&v70 = 0;
            DWORD2(v70) = 0;
            *(_QWORD *)&v71 = 0;
            v75 = &unk_1EA926508;
            v76 = 0u;
            v77 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v75);
          }
        }
      }
      v78 = &unk_1EA926508;
      v79 = 0u;
      v80 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v78);
      v81 = &unk_1EA926508;
      v82 = 0u;
      v83 = 0u;
      *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v81).n128_u64[0];
      ++v17;
    }
    while (v17 != v58);
  }
  if (*((_BYTE *)a1 + 418))
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v81, a4, 0, *(_DWORD *)(a4 + 20), (const char *)*(unsigned int *)(a1[2] + 12), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8));
    kaldi::CuMatrixBase<float>::AddMat(a5, (uint64_t)&v81, 111, v56, v57, 1.0, 1.0);
    v81 = &unk_1EA926508;
    v82 = 0u;
    v83 = 0u;
    *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v81).n128_u64[0];
  }
  return result;
}

void sub_1DE4BCEAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = &unk_1EA926508;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2 - 128);
  _Unwind_Resume(a1);
}

double `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return kaldi::nnet1::MovingAttentionComponent::BackpropagateFnc((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 144)), a2, a3, a4, a5, a6);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetGradientNormalization(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 240))(*(_QWORD *)(a1 + 16));
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::SetGradientNormalization(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 256) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 240))(v1);
}

void kaldi::nnet1::MovingAttentionComponent::AccumGradients(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  const char *v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  unint64_t i;
  int v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  _QWORD v50[4];
  void *v51;
  _QWORD v52[4];
  void (**v53)(kaldi::nnet1::NnetTrainOptions *__hidden);
  float v54[10];

  kaldi::nnet1::MovingAttentionComponent::Check(a1);
  v41 = a2;
  v10 = *a1;
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x218, "input.NumCols() == input_dim_", v9);
  if (a5)
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x219, "batch_idx == 0", v9);
  v11 = *((unsigned int *)a1 + 11);
  v12 = *(_DWORD *)(a2 + 20);
  v13 = (v12 / (int)v11);
  if ((_DWORD)v13 * (_DWORD)v11 != v12)
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x21C, "num_seq * seq_size == input.NumRows()", v9);
  v14 = (const char *)(*((_DWORD *)a1 + 2) * *((_DWORD *)a1 + 3));
  a1[13] = a4;
  if (*((_BYTE *)a1 + 417))
    v15 = *(_DWORD *)((char *)a1 + *(_QWORD *)(v10 - 24) + 8);
  else
    v15 = 0;
  kaldi::CuMatrix<float>::Resize((uint64_t)(a1 + 9), v11, (v15 + (_DWORD)v14), 1u, 0);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[2] + 272))(a1[2]);
  v53 = &off_1EA9284D0;
  v17 = *(_OWORD *)(v16 + 23);
  *(_OWORD *)v54 = *(_OWORD *)(v16 + 8);
  *(_OWORD *)((char *)&v54[3] + 3) = v17;
  v18 = v54[0];
  v54[0] = v54[0] / (float)(int)v13;
  (*(void (**)(uint64_t, void (***)(kaldi::nnet1::NnetTrainOptions *__hidden)))(*(_QWORD *)a1[2] + 264))(a1[2], &v53);
  v39 = v13;
  if ((int)v13 >= 1)
  {
    v19 = 0;
    do
    {
      memset(v52, 0, sizeof(v52));
      v51 = &unk_1EA926508;
      if (*((_BYTE *)a1 + 417))
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, (uint64_t)(a1 + 9), 0, *((_DWORD *)a1 + 23), v14, *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8));
        v52[0] = v50[0];
        *(_OWORD *)&v52[1] = *(_OWORD *)&v50[1];
        v52[3] = v50[3];
        v49 = &unk_1EA926508;
        memset(v50, 0, sizeof(v50));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v49);
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, v41, v11 * v19, v11, 0, *(_DWORD *)(v41 + 16));
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v51, (uint64_t)&v49, 111, v20, v21);
      }
      else
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, v41, v11 * v19, v11, 0, *(_DWORD *)(v41 + 16));
        v52[0] = v50[0];
        *(_OWORD *)&v52[1] = *(_OWORD *)&v50[1];
        v52[3] = v50[3];
      }
      v49 = &unk_1EA926508;
      memset(v50, 0, sizeof(v50));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v49);
      if ((int)v11 >= 1)
      {
        for (i = 0; i != v11; ++i)
        {
          v24 = *(_DWORD *)(*(_QWORD *)(a1[36] + 24 * i) + 4 * v19) - *((_DWORD *)a1 + 102);
          if (v24 < 0)
            kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-moving-attention-component.cc", (const char *)0x231, "begin >= 0", v22);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, (uint64_t)(a1 + 9), 0, *((_DWORD *)a1 + 23), 0, (int)v14);
          if (i >= HIDWORD(v50[1]))
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v27);
          v42 = &unk_1EA926538;
          *(_QWORD *)&v43 = v50[0] + 4 * LODWORD(v50[2]) * (int)i;
          *(_QWORD *)&v44 = v50[3];
          *((_QWORD *)&v43 + 1) = LODWORD(v50[1]);
          if (i >= *((unsigned int *)a1 + 11))
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v27);
          v28 = a1[4];
          v29 = *((_DWORD *)a1 + 12);
          v30 = *((_DWORD *)a1 + 10);
          v31 = a1[7];
          v32 = *((_DWORD *)a1 + 2) * v24;
          v47 = 0;
          v48 = 0;
          v46 = 0;
          v45 = &unk_1EA926538;
          if (v32 + (int)v14 > v30)
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v27);
          v46 = v28 + 4 * v29 * (int)i + 4 * v32;
          LODWORD(v47) = (_DWORD)v14;
          v48 = v31;
          kaldi::CuVectorBase<float>::CopyFromVec(&v42, (uint64_t)&v45, v25, v26, v27);
          v42 = &unk_1EA926538;
          *(_QWORD *)&v43 = 0;
          DWORD2(v43) = 0;
          *(_QWORD *)&v44 = 0;
          v49 = &unk_1EA926508;
          memset(v50, 0, sizeof(v50));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v49);
        }
      }
      if (*((_BYTE *)a1 + 419) && *((int *)a1 + 3) >= 1)
      {
        v33 = 0;
        do
        {
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, (uint64_t)(a1 + 9), 0, *((_DWORD *)a1 + 23), (const char *)(*((_DWORD *)a1 + 2) * v33), *((_DWORD *)a1 + 2));
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v49, (uint64_t)&v51, v34, v35, v36);
          v49 = &unk_1EA926508;
          memset(v50, 0, sizeof(v50));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v49);
          ++v33;
        }
        while (v33 < *((_DWORD *)a1 + 3));
      }
      v37 = a1[2];
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v42, a3, v11 * v19, v11, 0, *(_DWORD *)(a3 + 16));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v49, (uint64_t)&v42, 0, SHIDWORD(v43), 0, *(_DWORD *)(a1[2] + 12));
      (*(void (**)(uint64_t, uint64_t *, void **, uint64_t, _QWORD))(*(_QWORD *)v37 + 232))(v37, a1 + 9, &v49, a4, 0);
      v49 = &unk_1EA926508;
      memset(v50, 0, sizeof(v50));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v49);
      v42 = &unk_1EA926508;
      v43 = 0u;
      v44 = 0u;
      v38 = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v42);
      (*(void (**)(uint64_t, uint64_t, _QWORD, __n128))(*(_QWORD *)a1[2] + 256))(a1[2], a4, 0, v38);
      v51 = &unk_1EA926508;
      memset(v52, 0, sizeof(v52));
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v51);
      ++v19;
    }
    while (v19 != v39);
  }
  v54[0] = v18;
  (*(void (**)(uint64_t, void (***)(kaldi::nnet1::NnetTrainOptions *__hidden)))(*(_QWORD *)a1[2] + 264))(a1[2], &v53);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)&v53);
}

void sub_1DE4BD6F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)(v1 - 144));
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::AccumGradients(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::MovingAttentionComponent::AccumGradients((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 248)), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetGradient(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 224))(*(_QWORD *)(a1 + 16));
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::GetGradient(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 240) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 224))(v1);
}

void std::vector<int>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

uint64_t std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t *kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable8BitComponentItf>(const void ***this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  const void **i;
  kaldi::nnet1::Quantizable8BitComponentItf *v7;
  kaldi::nnet1::Quantizable8BitComponentItf *v8;
  uint64_t v9;
  const void *v10;
  void *v11;

  for (i = *this; i != this[1]; ++i)
  {
    if (*i)
    {
      if (v7)
      {
        v8 = v7;
        v9 = kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(v7);
        if (v9)
        {
          v10 = (const void *)v9;
          kaldi::nnet1::Component::Delete(v11, (kaldi::nnet1::Component *)1);
          *i = v10;
        }
      }
    }
  }
  return kaldi::nnet1::Nnet::CheckDimensions((uint64_t *)this, a2, a3, a4, a5);
}

uint64_t *kaldi::nnet1::Nnet::CheckDimensions(uint64_t *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  kaldi::nnet1::Component *v11;
  std::string *v12;
  std::string::size_type size;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  kaldi::nnet1::Component *v17;
  std::string *v18;
  std::string::size_type v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  std::string v23;
  std::string v24;
  _QWORD v25[34];

  v6 = *this;
  v5 = this[1];
  if ((unint64_t)(v5 - *this) >= 9)
  {
    v7 = this;
    v8 = 0;
    while (1)
    {
      this = *(uint64_t **)(v6 + 8 * v8);
      if (!this)
        kaldi::KaldiAssertFailure_((kaldi *)"CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x57A, "components_[i] != NULL", a5);
      if (*((_DWORD *)this + 3) != *(_DWORD *)(*(_QWORD *)(v6 + 8 * v8 + 8) + 8))
        break;
      if (v8)
      {
        this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 24))(this);
        switch((_DWORD)this)
        {
          case 0x10C:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1414);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "The word vec component can only be the first component");
            goto LABEL_33;
          case 0x10E:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1416);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "The word multivec component can only be the first component");
            goto LABEL_33;
          case 0x10F:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1418);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "The compressed word vec component can only be the first component");
            goto LABEL_33;
        }
        v6 = *v7;
        v5 = v7[1];
      }
      v9 = v8 + 2;
      ++v8;
      if (v9 >= (v5 - v6) >> 3)
      {
        if ((unint64_t)(v5 - v6) <= 8)
          return this;
        this = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 - 8) + 24))(*(_QWORD *)(v5 - 8));
        switch((_DWORD)this)
        {
          case 0x10F:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1429);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "The compressed word vec component can only be the first component");
            break;
          case 0x10E:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1427);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "The word multivec component can only be the first component");
            break;
          case 0x10C:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1425);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "The word vec component can only be the first component");
            break;
          default:
            return this;
        }
LABEL_33:
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
      }
    }
    v22 = v8;
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "CheckDimensions", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1406);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Dimension mismatch between output/input of components ", 54);
    v11 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v7 + 8 * v22) + 24))(*(_QWORD *)(*v7 + 8 * v22));
    kaldi::nnet1::Component::TypeToMarker(v11, &v24);
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v24;
    else
      v12 = (std::string *)v24.__r_.__value_.__r.__words[0];
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    else
      size = v24.__r_.__value_.__l.__size_;
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, size);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" and ", 5);
    v16 = *(_QWORD *)(*v7 + 8 * v22 + 8);
    v17 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
    kaldi::nnet1::Component::TypeToMarker(v17, &v23);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v23;
    else
      v18 = (std::string *)v23.__r_.__value_.__r.__words[0];
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    else
      v19 = v23.__r_.__value_.__l.__size_;
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", ", 2);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" <--> ", 6);
    std::ostream::operator<<();
    std::string::~string(&v23);
    std::string::~string(&v24);
    goto LABEL_33;
  }
  return this;
}

void sub_1DE4BDCA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a23);
}

uint64_t *kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable16BitComponentItf>(const void ***this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  const void **i;
  kaldi::nnet1::Quantizable8BitComponentItf *v7;
  kaldi::nnet1::Quantizable8BitComponentItf *v8;
  uint64_t v9;
  const void *v10;
  void *v11;

  for (i = *this; i != this[1]; ++i)
  {
    if (*i)
    {
      if (v7)
      {
        v8 = v7;
        v9 = kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(v7);
        if (v9)
        {
          v10 = (const void *)v9;
          kaldi::nnet1::Component::Delete(v11, (kaldi::nnet1::Component *)1);
          *i = v10;
        }
      }
    }
  }
  return kaldi::nnet1::Nnet::CheckDimensions((uint64_t *)this, a2, a3, a4, a5);
}

void kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions(kaldi::nnet1::NnetTrainOptions *this)
{
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::HistoryOptions::~HistoryOptions(kaldi::nnet1::HistoryOptions *this)
{
  JUMPOUT(0x1DF0ED014);
}

void kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions(kaldi::nnet1::RecurrentNnetTrainOptions *this)
{
  JUMPOUT(0x1DF0ED014);
}

void `non-virtual thunk to'kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions(kaldi::nnet1::RecurrentNnetTrainOptions *this)
{
  JUMPOUT(0x1DF0ED014);
}

double kaldi::nnet1::NnetCorrPacker::NnetCorrPacker(kaldi::nnet1::NnetCorrPacker *this)
{
  double result;

  *(_DWORD *)this = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = -1082130432;
  return result;
}

uint64_t kaldi::nnet1::Nnet::GetComponent(kaldi::nnet1::Nnet *this, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (a2 >= (unint64_t)((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3))
    kaldi::KaldiAssertFailure_((kaldi *)"GetComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x384, "static_cast<size_t>(component) < components_.size()", a5);
  return *(_QWORD *)(*(_QWORD *)this + 8 * a2);
}

{
  if (a2 >= (unint64_t)((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3))
    kaldi::KaldiAssertFailure_((kaldi *)"GetComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x37F, "static_cast<size_t>(component) < components_.size()", a5);
  return *(_QWORD *)(*(_QWORD *)this + 8 * a2);
}

kaldi::nnet1::Nnet *kaldi::nnet1::Nnet::Nnet(kaldi::nnet1::Nnet *this, const kaldi::nnet1::NnetTrainOptions **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  int v8;
  uint64_t Component;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;

  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v4 = operator new();
  *(_QWORD *)v4 = &off_1EA9284D0;
  *(_OWORD *)(v4 + 8) = xmmword_1DEC3D450;
  *(_DWORD *)(v4 + 24) = -1082130432;
  *(_QWORD *)(v4 + 28) = 0x100000003;
  *(_WORD *)(v4 + 36) = 0;
  *(_BYTE *)(v4 + 38) = 0;
  *((_QWORD *)this + 24) = &unk_1EA92DFD8;
  *((_QWORD *)this + 18) = v4;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_QWORD *)this + 28) = &unk_1EA92DFD8;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_DWORD *)this + 76) = 0;
  *((_QWORD *)this + 43) = -1082130432;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  if ((int)((unint64_t)(a2[1] - *a2) >> 3) >= 1)
  {
    v8 = 0;
    do
    {
      Component = kaldi::nnet1::Nnet::GetComponent((kaldi::nnet1::Nnet *)a2, v8, v5, v6, v7);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Component + 16))(Component);
      v11 = v10;
      v13 = (uint64_t *)*((_QWORD *)this + 1);
      v12 = *((_QWORD *)this + 2);
      if ((unint64_t)v13 >= v12)
      {
        v15 = ((uint64_t)v13 - *(_QWORD *)this) >> 3;
        if ((unint64_t)(v15 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v16 = v12 - *(_QWORD *)this;
        v17 = v16 >> 2;
        if (v16 >> 2 <= (unint64_t)(v15 + 1))
          v17 = v15 + 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 16, v18);
        else
          v19 = 0;
        v20 = (uint64_t *)&v19[8 * v15];
        *v20 = v11;
        v14 = v20 + 1;
        v22 = *(char **)this;
        v21 = (char *)*((_QWORD *)this + 1);
        if (v21 != *(char **)this)
        {
          do
          {
            v23 = *((_QWORD *)v21 - 1);
            v21 -= 8;
            *--v20 = v23;
          }
          while (v21 != v22);
          v21 = *(char **)this;
        }
        *(_QWORD *)this = v20;
        *((_QWORD *)this + 1) = v14;
        *((_QWORD *)this + 2) = &v19[8 * v18];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v13 = v10;
        v14 = v13 + 1;
      }
      *((_QWORD *)this + 1) = v14;
      ++v8;
    }
    while (v8 < (int)((unint64_t)(a2[1] - *a2) >> 3));
  }
  kaldi::nnet1::Nnet::SetTrainOptions(this, a2[18], 1, v6, v7);
  kaldi::nnet1::Nnet::ResetInternalBuffers(this, v24, v25, v26, v27);
  kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
  return this;
}

void sub_1DE4BE0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12)
{
  uint64_t v12;
  void *v14;
  void *v15;
  void *v16;

  a12 = (void **)(v12 + 120);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = a11;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = (void **)(v12 + 72);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  v14 = *(void **)(v12 + 48);
  if (v14)
  {
    *(_QWORD *)(v12 + 56) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v12 + 24);
  if (v15)
  {
    *(_QWORD *)(v12 + 32) = v15;
    operator delete(v15);
  }
  v16 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    *(_QWORD *)(v12 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet::SetTrainOptions(kaldi::nnet1::Nnet *this, const kaldi::nnet1::NnetTrainOptions *lpsrc, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  int v8;
  uint64_t Component;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  _QWORD *v19;
  void *v20;
  __int128 v21;
  _QWORD *v22;
  _QWORD v23[35];

  v5 = a3;
  if ((int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) >= 1)
  {
    v8 = 0;
    do
    {
      Component = kaldi::nnet1::Nnet::GetComponent(this, v8, a3, a4, a5);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)Component + 32))(Component))
      {
        v10 = kaldi::nnet1::Nnet::GetComponent(this, v8, a3, a4, a5);
        (*(void (**)(uint64_t, const kaldi::nnet1::NnetTrainOptions *))(*(_QWORD *)v10 + 264))(v10, lpsrc);
      }
      ++v8;
    }
    while (v8 < (int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3));
  }
  v16 = *((_QWORD *)this + 18);
  if (!v15)
  {
    v21 = *(_OWORD *)((char *)lpsrc + 8);
    *(_OWORD *)(v16 + 23) = *(_OWORD *)((char *)lpsrc + 23);
    *(_OWORD *)(v16 + 8) = v21;
    if (!v5 || kaldi::g_kaldi_verbose_level < 2)
      goto LABEL_16;
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v23, "SetTrainOptions", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1536, 2);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"a regular trainer option. ", 26);
    kaldi::nnet1::operator<<(v22, *((_QWORD *)this + 18));
    goto LABEL_15;
  }
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = operator new();
  v18 = *(_OWORD *)(v15 + 23);
  *(_OWORD *)(v17 + 8) = *(_OWORD *)(v15 + 8);
  *(_OWORD *)(v17 + 23) = v18;
  *(_QWORD *)v17 = &off_1EA92B868;
  *(_QWORD *)(v17 + 40) = &unk_1EA92B888;
  *(_QWORD *)(v17 + 48) = *((_QWORD *)v15 + 6);
  *((_QWORD *)this + 18) = v17;
  if (v5 && kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v23, "SetTrainOptions", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1531, 2);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"a recurrent trainer option. ", 28);
    kaldi::nnet1::operator<<(v19, (uint64_t)v20);
LABEL_15:
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v23);
  }
LABEL_16:
  if (v5)
  {
    kaldi::nnet1::Nnet::ResetInternalBuffers(this, v11, v12, v13, v14);
    kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
  }
}

void sub_1DE4BE3F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet::ResetBuffersAndStates(kaldi::nnet1::Nnet *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::nnet1::Nnet::ResetInternalBuffers(this, a2, a3, a4, a5);
  kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
}

void kaldi::nnet1::Nnet::Read(uint64_t a1, uint64_t a2)
{
  kaldi::Input *v4;
  uint64_t *v5;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD v12[34];
  _BYTE v13[15];
  unsigned __int8 v14;

  v14 = 0;
  v4 = (kaldi::Input *)kaldi::Input::Input(v13, a2, &v14);
  v5 = (uint64_t *)kaldi::Input::Stream(v4);
  kaldi::nnet1::Nnet::Read((uint64_t **)a1, v5, v14, 0);
  kaldi::Input::Close((kaldi::Input *)v13);
  if (((*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) & 0x7FFFFFFF8) == 0 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1241);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"The network '", 13);
    v8 = *(char *)(a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *(_QWORD *)a2;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a2 + 23);
    else
      v10 = *(_QWORD *)(a2 + 8);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"' is empty.", 11);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
  }
  kaldi::Input::~Input((kaldi::Input *)v13);
}

void sub_1DE4BE524(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::Input::~Input((kaldi::Input *)(v1 - 48));
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::Nnet::SetGradientNormalization(_QWORD *result, uint64_t a2, int a3, int a4, float a5)
{
  _QWORD *v7;
  const void **v8;
  char *v9;
  void *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v7 = result;
  if (a3)
  {
    v8 = (const void **)result[3];
    if (v8 != (const void **)result[4])
    {
      do
      {
        v9 = (char *)*v8;
        if (*v8
        {
          result = (_QWORD *)kaldi::nnet1::ParallelComponent::SetGradientNormalization((uint64_t)v10, a2, 1, a5);
        }
        else
        {
          result = (_QWORD *)(*(uint64_t (**)(char *, uint64_t, float))(*(_QWORD *)&v9[*(_QWORD *)(*(_QWORD *)v9 - 24)]
                                                                               + 240))(&v9[*(_QWORD *)(*(_QWORD *)v9 - 24)], a2, a5);
        }
        ++v8;
      }
      while (v8 != (const void **)v7[4]);
    }
  }
  else
  {
    if (a4)
      v11 = -2;
    else
      v11 = -1;
    v12 = v11 + ((result[1] - *result) >> 3);
    if (v12 >= 0)
    {
      v13 = 0;
      v14 = (v12 + 1);
      do
      {
        result = *(_QWORD **)(*v7 + 8 * v13);
        if (result)
        {
          if (result)
            result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, float))(*result + 240))(result, a2, a5);
        }
        ++v13;
      }
      while (v14 != v13);
    }
  }
  return result;
}

kaldi::nnet1::Nnet *kaldi::nnet1::Nnet::operator=(kaldi::nnet1::Nnet *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  int v7;
  uint64_t Component;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;

  if ((kaldi::nnet1::Nnet *)a2 != this)
  {
    kaldi::nnet1::Nnet::Destroy(this);
    if ((int)((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3) < 1)
    {
      *((_QWORD *)this + 1) = *(_QWORD *)this;
    }
    else
    {
      v7 = 0;
      do
      {
        Component = kaldi::nnet1::Nnet::GetComponent((kaldi::nnet1::Nnet *)a2, v7, v4, v5, v6);
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Component + 16))(Component);
        v10 = v9;
        v12 = (uint64_t *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        if ((unint64_t)v12 >= v11)
        {
          v14 = ((uint64_t)v12 - *(_QWORD *)this) >> 3;
          if ((unint64_t)(v14 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v15 = v11 - *(_QWORD *)this;
          v16 = v15 >> 2;
          if (v15 >> 2 <= (unint64_t)(v14 + 1))
            v16 = v14 + 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v16;
          if (v17)
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 16, v17);
          else
            v18 = 0;
          v19 = (uint64_t *)&v18[8 * v14];
          *v19 = v10;
          v13 = v19 + 1;
          v21 = *(char **)this;
          v20 = (char *)*((_QWORD *)this + 1);
          if (v20 != *(char **)this)
          {
            do
            {
              v22 = *((_QWORD *)v20 - 1);
              v20 -= 8;
              *--v19 = v22;
            }
            while (v20 != v21);
            v20 = *(char **)this;
          }
          *(_QWORD *)this = v19;
          *((_QWORD *)this + 1) = v13;
          *((_QWORD *)this + 2) = &v18[8 * v17];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *v12 = v9;
          v13 = v12 + 1;
        }
        *((_QWORD *)this + 1) = v13;
        ++v7;
      }
      while (v7 < (int)((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    }
    kaldi::nnet1::Nnet::SetTrainOptions(this, *(const kaldi::nnet1::NnetTrainOptions **)(a2 + 144), 1, v5, v6);
    kaldi::nnet1::Nnet::ResetInternalBuffers(this, v23, v24, v25, v26);
    kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
  }
  return this;
}

uint64_t kaldi::nnet1::Nnet::Destroy(kaldi::nnet1::Nnet *this)
{
  uint64_t v2;
  uint64_t v3;
  kaldi::CuWorkspace **v4;
  kaldi::CuWorkspace **v5;
  uint64_t result;

  v2 = *(_QWORD *)this;
  if ((int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) >= 1)
  {
    v3 = 0;
    do
    {
      kaldi::nnet1::Component::Delete(*(void **)(v2 + 8 * v3++), (kaldi::nnet1::Component *)1);
      v2 = *(_QWORD *)this;
    }
    while (v3 < (int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3));
  }
  v4 = (kaldi::CuWorkspace **)*((_QWORD *)this + 44);
  v5 = (kaldi::CuWorkspace **)*((_QWORD *)this + 45);
  while (v4 != v5)
  {
    if (*v4)
    {
      kaldi::CuWorkspace::~CuWorkspace(*v4);
      MEMORY[0x1DF0ED014]();
    }
    ++v4;
  }
  std::vector<kaldi::nnet1::Component *>::resize((uint64_t)this, 0);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::resize((uint64_t *)this + 9, 0);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::resize((uint64_t *)this + 15, 0);
  std::vector<kaldi::nnet1::Component *>::resize((uint64_t)this + 352, 0);
  result = *((_QWORD *)this + 20);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *((_QWORD *)this + 20) = 0;
  }
  return result;
}

void kaldi::nnet1::Nnet::~Nnet(kaldi::nnet1::Nnet *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;

  kaldi::nnet1::Nnet::Destroy(this);
  v2 = *((_QWORD *)this + 18);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 44);
  if (v3)
  {
    *((_QWORD *)this + 45) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 40);
  if (v4)
    free(v4);
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  v5 = (void *)*((_QWORD *)this + 35);
  if (v5)
  {
    *((_QWORD *)this + 36) = v5;
    operator delete(v5);
  }
  v10 = (void **)((char *)this + 256);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  *((_QWORD *)this + 28) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 224);
  *((_QWORD *)this + 24) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 192);
  v6 = (void *)*((_QWORD *)this + 21);
  if (v6)
    operator delete(v6);
  v10 = (void **)((char *)this + 120);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)((char *)this + 96);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)((char *)this + 72);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v7 = (void *)*((_QWORD *)this + 6);
  if (v7)
  {
    *((_QWORD *)this + 7) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 3);
  if (v8)
  {
    *((_QWORD *)this + 4) = v8;
    operator delete(v8);
  }
  v9 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v9;
    operator delete(v9);
  }
}

_QWORD *kaldi::nnet1::Nnet::ResetHistoryStateIfExists(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v10;

  if ((a4 & 0x80000000) != 0 || (v6 = result, *(_DWORD *)(result[18] + 32) <= (int)a4))
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryStateIfExists", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x19B, "batch_idx >= 0 && batch_idx < opts_->num_subbatches", a5);
  v7 = (uint64_t *)result[6];
  if (v7 != (uint64_t *)result[7])
  {
    do
    {
      v10 = *v7++;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v10, a2, a3, a4);
    }
    while (v7 != (uint64_t *)v6[7]);
  }
  return result;
}

uint64_t kaldi::nnet1::Nnet::ResetHistoryStateIfExists(uint64_t this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 48);
  if (v1 != *(uint64_t **)(this + 56))
  {
    v2 = this;
    do
    {
      v3 = *v1++;
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    }
    while (v1 != *(uint64_t **)(v2 + 56));
  }
  return this;
}

uint64_t kaldi::nnet1::Nnet::HistoryStateSize(kaldi::nnet1::Nnet *this)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v1 = (uint64_t *)*((_QWORD *)this + 6);
  if (v1 == *((uint64_t **)this + 7))
    return 0;
  LODWORD(v3) = 0;
  do
  {
    v4 = *v1++;
    v3 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4) + v3;
  }
  while (v1 != *((uint64_t **)this + 7));
  return v3;
}

uint64_t kaldi::nnet1::Nnet::GetHistoryState(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _QWORD *v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  char v23;

  v4 = *(char **)(result + 48);
  v3 = *(char **)(result + 56);
  if (v4 != v3)
  {
    if (v3 - v4 == 8)
    {
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)v4 + 40))(*(_QWORD *)v4, a2, a3);
    }
    else
    {
      v7 = result;
      LODWORD(v8) = 0;
      do
      {
        v10 = *(_QWORD *)v4;
        v4 += 8;
        v8 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10) + v8;
      }
      while (v4 != *(char **)(v7 + 56));
      kaldi::CuMatrix<float>::Resize(a2, v9, v8, 1u, 0);
      v22 = 0u;
      v21 = 0u;
      v20 = &unk_1EA92DFA8;
      v23 = 0;
      v12 = *(_QWORD **)(v7 + 48);
      if (v12 == *(_QWORD **)(v7 + 56))
      {
        LODWORD(v13) = 0;
      }
      else
      {
        v13 = 0;
        do
        {
          (*(void (**)(_QWORD, void **, uint64_t))(*(_QWORD *)*v12 + 40))(*v12, &v20, a3);
          if (HIDWORD(v21) != (_DWORD)v9)
            kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x1C5, "comp_history.NumRows() == num_seq", v14);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, a2, 0, *(_DWORD *)(a2 + 20), v13, SDWORD2(v21));
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v17, (uint64_t)&v20, 111, v15, v16);
          v17 = &unk_1EA926508;
          v18 = 0u;
          v19 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v17);
          v13 = (const char *)(DWORD2(v21) + (_DWORD)v13);
          ++v12;
        }
        while (v12 != *(_QWORD **)(v7 + 56));
      }
      if ((_DWORD)v13 != (_DWORD)v8)
        kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x1C9, "count == history_size", v11);
      return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v20);
    }
  }
  return result;
}

void sub_1DE4BED60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet::GetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  v6 = *(uint64_t **)(a1 + 48);
  v5 = *(uint64_t **)(a1 + 56);
  v7 = v5 - v6;
  if (v7)
  {
    if (v7 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v6 + 48))(*v6, a2, a3, a4);
    }
    else
    {
      if (v6 == v5)
      {
        v12 = 0;
      }
      else
      {
        LODWORD(v12) = 0;
        do
        {
          v13 = *v6++;
          v12 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13) + v12;
        }
        while (v6 != *(uint64_t **)(a1 + 56));
      }
      kaldi::CuVector<float>::Resize(a2, v12, 1u, a4, a5);
      v25 = 0;
      v26 = 0;
      v24[0] = &unk_1EA92DFD8;
      v24[1] = 0;
      v15 = *(_QWORD **)(a1 + 48);
      if (v15 == *(_QWORD **)(a1 + 56))
      {
        v16 = 0;
      }
      else
      {
        v16 = 0;
        do
        {
          (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)*v15 + 48))(*v15, v24, a3, a4);
          v22 = 0;
          v23 = 0;
          v21 = 0;
          v20 = &unk_1EA926538;
          if ((v25 + v16) > *(_DWORD *)(a2 + 16))
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v19);
          v21 = *(_QWORD *)(a2 + 8) + 4 * v16;
          LODWORD(v22) = v25;
          v23 = *(_QWORD *)(a2 + 24);
          kaldi::CuVectorBase<float>::CopyFromVec(&v20, (uint64_t)v24, v17, v18, v19);
          v16 += v25;
          ++v15;
        }
        while (v15 != *(_QWORD **)(a1 + 56));
      }
      if (v16 != (_DWORD)v12)
        kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x1DE, "count == history_size", v14);
      v24[0] = &unk_1EA92DFD8;
      kaldi::CuVector<float>::Destroy((uint64_t)v24);
    }
  }
}

void sub_1DE4BEFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Nnet::SetHistoryState(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  __int128 v19;
  __int128 v20;

  v6 = *(uint64_t **)(result + 48);
  v5 = *(uint64_t **)(result + 56);
  v7 = v5 - v6;
  if (v7)
  {
    if (v7 == 1)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v6 + 56))(*v6, a2, a3);
    }
    else
    {
      v10 = result;
      if (v6 == v5)
      {
        v11 = 0;
        v6 = *(uint64_t **)(result + 56);
      }
      else
      {
        v11 = 0;
        do
        {
          v12 = *v6++;
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          v11 += result;
        }
        while (v6 != *(uint64_t **)(v10 + 56));
      }
      if (*(_DWORD *)(a2 + 16) != v11)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v18, "SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 490);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"the network has history size ", 29);
        v17 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" , but the input history data has dimension ", 44);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v18);
      }
      v13 = *(uint64_t **)(v10 + 48);
      if (v13 == v6)
      {
        LODWORD(v14) = 0;
      }
      else
      {
        v14 = 0;
        do
        {
          v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v13 + 16))(*v13);
          v16 = *v13;
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v18, a2, 0, *(_DWORD *)(a2 + 20), v14, v15);
          (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v16 + 56))(v16, &v18, a3);
          v18 = &unk_1EA926508;
          v19 = 0u;
          v20 = 0u;
          result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v18);
          v14 = (const char *)(v15 + (_DWORD)v14);
          ++v13;
        }
        while (v13 != *(uint64_t **)(v10 + 56));
      }
      if ((_DWORD)v14 != v11)
        kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x1F6, "count == history_size", a5);
    }
  }
  return result;
}

{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  const char *v16;
  int v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(uint64_t **)(result + 48);
  v5 = *(uint64_t **)(result + 56);
  v7 = v5 - v6;
  if (v7)
  {
    if (v7 == 1)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v6 + 64))(*v6, a2, a3, a4);
    }
    else
    {
      v11 = result;
      if (v6 == v5)
      {
        v12 = 0;
        v6 = *(uint64_t **)(result + 56);
      }
      else
      {
        v12 = 0;
        do
        {
          v13 = *v6++;
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
          v12 += result;
        }
        while (v6 != *(uint64_t **)(v11 + 56));
      }
      if (*(_DWORD *)(a2 + 16) != v12)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v21, "SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 514);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"the network has history size ", 29);
        v20 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" , but the input history data has dimension ", 44);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v21);
      }
      v14 = *(uint64_t **)(v11 + 48);
      if (v14 == v6)
      {
        v19 = 0;
      }
      else
      {
        v15 = 0;
        do
        {
          v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v14 + 16))(*v14);
          v18 = *v14;
          v22 = 0;
          v23 = 0;
          v24 = 0;
          v21 = &unk_1EA926538;
          v19 = v17 + v15;
          if ((v17 + v15) > *(_DWORD *)(a2 + 16))
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v16);
          v22 = *(_QWORD *)(a2 + 8) + 4 * v15;
          LODWORD(v23) = v17;
          v24 = *(_QWORD *)(a2 + 24);
          result = (*(uint64_t (**)(uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v18 + 64))(v18, &v21, a3, a4);
          ++v14;
          v15 = v19;
        }
        while (v14 != *(uint64_t **)(v11 + 56));
      }
      if (v19 != v12)
        kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x20E, "count == history_size", a5);
    }
  }
  return result;
}

void sub_1DE4BF1BC(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void sub_1DE4BF1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _OWORD *v10;

  a10 = &unk_1EA926508;
  *v10 = 0u;
  v10[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a10);
  _Unwind_Resume(a1);
}

void sub_1DE4BF420(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::nnet1::Nnet::SetInternalBoundary(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;

  v3 = *(uint64_t **)(result + 24);
  if (v3 != *(uint64_t **)(result + 32))
  {
    v6 = result;
    do
    {
      v7 = *v3++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, a3);
    }
    while (v3 != *(uint64_t **)(v6 + 32));
  }
  return result;
}

uint64_t kaldi::nnet1::ParallelComponent::SetGradientNormalization(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4;
  uint64_t v8;

  v4 = *(_QWORD *)(result + 184);
  if (v4 != *(_QWORD *)(result + 192))
  {
    v8 = result;
    do
    {
      result = kaldi::nnet1::Nnet::SetGradientNormalization(v4, a2, a3, 0, a4);
      v4 += 376;
    }
    while (v4 != *(_QWORD *)(v8 + 192));
  }
  return result;
}

const void ***kaldi::nnet1::Nnet::Backpropagate(const void ***result, uint64_t a2, char *a3, uint64_t a4, const char *a5)
{
  const void ***v6;
  const void **v8;
  const void **v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void **v19;
  _BYTE *v20;
  _BYTE *v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t (*v32)(void);

  if ((a4 & 0x80000000) != 0 || (v6 = result, *((_DWORD *)result[18] + 8) <= (int)a4))
    kaldi::KaldiAssertFailure_((kaldi *)"Backpropagate", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x233, "batch_idx >= 0 && batch_idx < opts_->num_subbatches", a5);
  v9 = *result;
  v8 = result[1];
  v10 = (char *)v8 - (char *)*result;
  v11 = v10 >> 3;
  if ((v10 >> 3))
  {
    if (a3)
      v12 = a3;
    else
      v12 = (char *)a2;
    v13 = *((_QWORD *)v12 + 4);
    v14 = a4;
    v15 = (uint64_t *)&result[9][3 * a4];
    v16 = *v15;
    v17 = v15[1];
    if (*v15 != v17)
    {
      v18 = *v15;
      do
      {
        *(_QWORD *)(v18 + 32) = v13;
        v18 += 48;
      }
      while (v18 != v17);
    }
    v19 = &result[15][3 * a4];
    v20 = *v19;
    v21 = v19[1];
    if (v20 != v21)
    {
      v22 = v20;
      do
      {
        v22[4] = v13;
        v22 += 6;
      }
      while (v22 != (_QWORD *)v21);
    }
    if ((int)v11 >= (int)(-1431655765 * ((unint64_t)(v17 - v16) >> 4)))
      kaldi::KaldiAssertFailure_((kaldi *)"Backpropagate", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x24F, "(int32)propagate_buf_[batch_idx].size() >= NumComponents() + 1", a3);
    if ((int)v11 - 1 > (int)(-1431655765 * ((unint64_t)(v21 - v20) >> 4)))
      kaldi::KaldiAssertFailure_((kaldi *)"Backpropagate", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x251, "(int32)backpropagate_buf_[batch_idx].size() >= NumComponents() - 1", a3);
    if ((_DWORD)v11 == 1)
    {
      kaldi::nnet1::Component::Backpropagate(*v9, v16, v16 + 48, a2, (uint64_t)a3, a4);
      result = (const void ***)(*(uint64_t (**)(const void *))(*(_QWORD *)**v6 + 32))(**v6);
      if ((_DWORD)result)
      {
LABEL_28:
        return (const void ***)v32();
      }
    }
    else
    {
      v23 = (v10 << 29) - 0x100000000;
      kaldi::nnet1::Component::Backpropagate(*(v8 - 1), v16 + 48 * SHIDWORD(v23), v16 + 48 * (int)v11, a2, (uint64_t)&v20[48 * (((v10 << 29) - 0x200000000) >> 32)], a4);
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)((char *)*v6 + (v23 >> 29)) + 32))(*(const void **)((char *)*v6 + (v23 >> 29))))
      {
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24 + 232))(v24, (uint64_t)v6[9][3 * v14] + 48 * SHIDWORD(v23), a2, v13, a4);
      }
      v25 = (v11 - 2);
      if ((int)v25 >= 1)
      {
        v26 = 48 * (v11 - 2);
        do
        {
          v27 = (uint64_t)v6[9][3 * a4] + v26;
          v28 = v6[15][3 * a4];
          v29 = v25 - 1;
          kaldi::nnet1::Component::Backpropagate((*v6)[v25], v27, v27 + 48, (uint64_t)v28 + v26, (uint64_t)v28 + 48 * (v25 - 1), a4);
          if ((*(unsigned int (**)(const void *))(*(_QWORD *)(*v6)[v25] + 32))((*v6)[v25]))
          {
            (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 232))(v30, (uint64_t)v6[9][3 * a4] + v26, (uint64_t)v6[15][3 * a4] + v26, v13, a4);
          }
          v26 -= 48;
          --v25;
        }
        while ((unint64_t)(v29 + 1) > 1);
      }
      v31 = (uint64_t)v6[9][3 * a4];
      kaldi::nnet1::Component::Backpropagate(**v6, v31, v31 + 48, (uint64_t)v6[15][3 * a4], (uint64_t)a3, a4);
      result = (const void ***)(*(uint64_t (**)(const void *))(*(_QWORD *)**v6 + 32))(**v6);
      if ((_DWORD)result)
        goto LABEL_28;
    }
  }
  else if (a3)
  {
    return (const void ***)kaldi::CuMatrix<float>::operator=((uint64_t)a3, a2);
  }
  return result;
}

void kaldi::nnet1::Nnet::Update(const void ***this, void *a2, uint64_t a3)
{
  const void **v3;
  const void **v4;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  _QWORD v11[36];

  v4 = *this;
  v3 = this[1];
  if (*this != v3)
  {
    v8 = 0;
    do
    {
      if (this[22] == (const void **)(v3 - *this)
        && ((*(unint64_t *)((char *)this[21] + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
      {
        if (kaldi::g_kaldi_verbose_level >= 2)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11, "Update", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 652, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"freezing component ", 19);
          v9 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" (1-based) in this Update", 25);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11);
        }
      }
      else if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v4 + 32))(*v4))
      {
        (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)v10 + 256))(v10, a2, a3);
      }
      ++v4;
      ++v8;
      v3 = this[1];
    }
    while (v4 != v3);
  }
}

void sub_1DE4BFA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet::Feedforward(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  BOOL v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  _DWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD v30[34];
  void **v31;

  if (!a3)
    kaldi::KaldiAssertFailure_((kaldi *)"Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x326, "NULL != out", a5);
  if (*(_DWORD *)(a1[18] + 32) != 1)
    kaldi::KaldiAssertFailure_((kaldi *)"Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x327, "opts_->num_subbatches == 1", a5);
  v6 = (int)a5;
  v7 = (unint64_t)(a1[1] - *a1) >> 3;
  if (a4 == -1)
    v8 = (unint64_t)(a1[1] - *a1) >> 3;
  else
    v8 = a4;
  v9 = v8 + (_DWORD)a5;
  if (v8 + (int)a5 > (int)v7)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 812);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Components to propagate (startCompIdx=", 38);
    v26 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", num_comps=", 12);
    v27 = (_QWORD *)std::ostream::operator<<();
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)") must not be greater than ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"#components in the network (", 28);
    v29 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v29, ").");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30);
  }
  if (v8)
    v12 = (_DWORD)v7 == 0;
  else
    v12 = 1;
  if (v12)
  {
    kaldi::CuMatrix<float>::Resize(a3, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 1u, 0);
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a3, a2, 111, v13, v14);
  }
  else if (v8 == 1)
  {
    kaldi::nnet1::Component::Propagate(*(_DWORD **)(*a1 + 8 * (int)a5), a2, a3, 0);
  }
  else
  {
    std::vector<kaldi::CuMatrix<float>>::vector(v30, 2uLL);
    v15 = *(_QWORD *)(a3 + 32);
    v16 = v30[0];
    *(_QWORD *)(v30[0] + 32) = v15;
    *(_QWORD *)(v16 + 80) = v15;
    kaldi::nnet1::Component::Propagate(*(_DWORD **)(*a1 + 8 * v6), a2, v16, 0);
    v17 = 0;
    v18 = v6;
    v19 = v9 - 2;
    if (v6 > v9 - 2)
      v19 = v6;
    v20 = v19;
    for (i = ((uint64_t)v6 << 32) + 0x100000000; ; i += 0x100000000)
    {
      v22 = *a1;
      v23 = v30[0] + 48 * v17;
      if (v20 == v18)
        break;
      v24 = ~v17;
      v17 = !v17;
      v25 = *(_DWORD **)(v22 + 8 * v18++ + 8);
      kaldi::nnet1::Component::Propagate(v25, v23, v30[0] + 48 * v24, 0);
    }
    kaldi::nnet1::Component::Propagate(*(_DWORD **)(v22 + (i >> 29)), v23, a3, 0);
    v31 = (void **)v30;
    std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v31);
  }
}

uint64_t kaldi::nnet1::Nnet::OutputDim(kaldi::nnet1::Nnet *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;

  v5 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this == v5)
    kaldi::KaldiAssertFailure_((kaldi *)"OutputDim", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x371, "!components_.empty()", a5);
  return *(unsigned int *)(*(_QWORD *)(v5 - 8) + 12);
}

uint64_t kaldi::nnet1::Nnet::InputDim(kaldi::nnet1::Nnet *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_QWORD *)this == *((_QWORD *)this + 1))
    kaldi::KaldiAssertFailure_((kaldi *)"InputDim", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x376, "!components_.empty()", a5);
  return *(unsigned int *)(**(_QWORD **)this + 8);
}

_QWORD *kaldi::nnet1::Nnet::GetHistoricalComponents@<X0>(kaldi::nnet1::Nnet *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a2, *((const void **)this + 6), *((_QWORD *)this + 7), (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3);
}

void std::vector<BOOL>::insert(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, _BYTE *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t *v21;
  char v22;
  unint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  char *v35;
  __int128 v36;
  char *v37;
  int v38;

  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  if (v10 >= v11 << 6)
  {
    v35 = 0;
    v36 = 0uLL;
    if ((uint64_t)(v10 + 1) < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v16 = v11 << 6;
    v17 = v11 << 7;
    v18 = (v10 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v17 > v18)
      v18 = v17;
    if (v16 <= 0x3FFFFFFFFFFFFFFELL)
      v19 = v18;
    else
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve(&v35, v19);
    v20 = *(unint64_t **)a1;
    *(_QWORD *)&v36 = *(_QWORD *)(a1 + 8) + 1;
    v37 = v35;
    v38 = 0;
    std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v20, 0, a2, a3, (uint64_t)&v37, (uint64_t)&v33);
    v21 = v33;
    *(_QWORD *)a5 = v33;
    v22 = v34;
    *(_DWORD *)(a5 + 8) = v34;
    v23 = *(_QWORD *)(a1 + 8);
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v23 >> 6));
    v25 = v23 & 0x3F;
    v37 = &v35[8 * ((unint64_t)v36 >> 6)];
    v38 = v36 & 0x3F;
    if (v38 == v25)
      std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v24, v25, (uint64_t)&v37, (uint64_t)&v33);
    else
      std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v24, v25, (uint64_t)&v37, (uint64_t)&v33);
    v28 = *(char **)a1;
    *(_QWORD *)a1 = v35;
    v35 = v28;
    v29 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v36;
    v36 = v29;
    if (v28)
      operator delete(v28);
  }
  else
  {
    v12 = *(unint64_t **)a1;
    v13 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v10 >> 6));
    v14 = *(_QWORD *)(a1 + 8) & 0x3FLL;
    v15 = v10 & 0x3F;
    *(_QWORD *)(a1 + 8) = v10 + 1;
    v35 = (char *)&v12[(v10 + 1) >> 6];
    if ((((_BYTE)v10 + 1) & 0x3F) == (_DWORD)v14)
    {
      LODWORD(v36) = v14;
      std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v13, v15, (uint64_t)&v35, (uint64_t)&v37);
    }
    else
    {
      LODWORD(v36) = ((_BYTE)v10 + 1) & 0x3F;
      std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>(a2, a3, v13, v15, (uint64_t)&v35, (uint64_t)&v37);
    }
    v26 = 8 * (a2 - *(_QWORD *)a1) + a3;
    if (v26 < 0)
    {
      v30 = v26 - 63;
      if (v26 - 63 < 0)
        v30 = 8 * (a2 - *(_QWORD *)a1) + a3;
      v27 = v30 >> 6;
    }
    else
    {
      v27 = (unint64_t)v26 >> 6;
    }
    v21 = (uint64_t *)(*(_QWORD *)a1 + 8 * v27);
    v22 = v26 & 0x3F;
    *(_QWORD *)a5 = v21;
    *(_DWORD *)(a5 + 8) = v26 & 0x3F;
  }
  v31 = 1 << v22;
  if (*a4)
    v32 = *v21 | v31;
  else
    v32 = *v21 & ~v31;
  *v21 = v32;
}

void sub_1DE4C0050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Nnet::AppendComponent(kaldi::nnet1::Nnet *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char v19;

  v5 = a2;
  v7 = (uint64_t *)*((_QWORD *)this + 1);
  if (*((_QWORD *)this + 22) == ((uint64_t)v7 - *(_QWORD *)this) >> 3)
  {
    v19 = 0;
    std::vector<BOOL>::push_back((uint64_t)this + 168, &v19);
    v7 = (uint64_t *)*((_QWORD *)this + 1);
  }
  v8 = *((_QWORD *)this + 2);
  if ((unint64_t)v7 >= v8)
  {
    v10 = ((uint64_t)v7 - *(_QWORD *)this) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v8 - *(_QWORD *)this;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      a2 = 0x1FFFFFFFFFFFFFFFLL;
    else
      a2 = v12;
    if (a2)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 16, a2);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v10];
    v15 = &v13[8 * a2];
    *v14 = v5;
    v9 = v14 + 1;
    v17 = *(char **)this;
    v16 = (char *)*((_QWORD *)this + 1);
    if (v16 != *(char **)this)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = *(char **)this;
    }
    *(_QWORD *)this = v14;
    *((_QWORD *)this + 1) = v9;
    *((_QWORD *)this + 2) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = v5;
    v9 = v7 + 1;
  }
  *((_QWORD *)this + 1) = v9;
  kaldi::nnet1::Nnet::ResetInternalBuffers(this, a2, a3, a4, a5);
  kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
}

void std::vector<BOOL>::push_back(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((char **)a1, v7);
    v4 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v4 + 1;
  v8 = *(char **)a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)&v8[8 * v9] | v10;
  else
    v11 = *(_QWORD *)&v8[8 * v9] & ~v10;
  *(_QWORD *)&v8[8 * v9] = v11;
}

{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::__throw_length_error[abi:ne180100]();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    std::vector<BOOL>::reserve((char **)a1, v7);
    v4 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v4 + 1;
  v8 = *(char **)a1;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)&v8[8 * v9] | v10;
  else
    v11 = *(_QWORD *)&v8[8 * v9] & ~v10;
  *(_QWORD *)&v8[8 * v9] = v11;
}

uint64_t kaldi::nnet1::Nnet::ReleaseComponent(kaldi::nnet1::Nnet *this, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  const void *v24;
  uint64_t v25;
  int64_t v26;
  _BYTE v28[16];
  uint64_t v29;
  int v30;

  v6 = *(_QWORD *)this;
  v5 = (char *)*((_QWORD *)this + 1);
  v7 = (uint64_t)&v5[-*(_QWORD *)this];
  if ((int)((unint64_t)v7 >> 3) <= a2)
    kaldi::KaldiAssertFailure_((kaldi *)"ReleaseComponent", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x3B5, "component < NumComponents()", a5);
  v10 = *((_QWORD *)this + 22);
  if (v10 == v7 >> 3)
  {
    v11 = *((_QWORD *)this + 21);
    v12 = a2 >> 6;
    if (a2 < 0)
      v12 = -(uint64_t)((63 - a2) >> 6);
    v13 = v11 + 8 * v12;
    v14 = a2 & 0x3F;
    v15 = v14 | (v12 << 6);
    v16 = v15 - 63;
    if (v15 < 63)
      v16 = v14 | (v12 << 6);
    v17 = v16 >> 6;
    v18 = v12 & 0x3FFFFFFFFFFFFFFLL;
    if (v15 < 0)
      v18 = v17;
    v19 = (unint64_t *)(v13 + (((unint64_t)(v14 + 1) >> 3) & 8));
    v20 = (v14 + 1) & 0x3F;
    v21 = v11 + 8 * (v10 >> 6);
    v22 = v10 & 0x3F;
    v29 = v11 + 8 * v18;
    v30 = v14;
    if ((_DWORD)v14 == v20)
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v19, v20, v21, v22, (uint64_t)&v29, (uint64_t)v28);
    else
      std::__copy_unaligned[abi:ne180100]<std::vector<BOOL>,true>(v19, v20, v21, v22, (uint64_t)&v29, (uint64_t)v28);
    --*((_QWORD *)this + 22);
    v6 = *(_QWORD *)this;
    v5 = (char *)*((_QWORD *)this + 1);
  }
  v23 = (uint64_t *)(v6 + 8 * a2);
  v24 = v23 + 1;
  v25 = *v23;
  v26 = v5 - (char *)(v23 + 1);
  if (v5 != (char *)(v23 + 1))
    memmove(v23, v24, v5 - (_BYTE *)v24);
  *((_QWORD *)this + 1) = (char *)v23 + v26;
  kaldi::nnet1::Nnet::ResetInternalBuffers(this, (uint64_t)v24, a3, a4, a5);
  kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
  return v25;
}

uint64_t kaldi::nnet1::Nnet::GetParams(kaldi::nnet1::Nnet *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  int v14;
  uint64_t result;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = kaldi::nnet1::Nnet::NumParams(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 0, v5, v6);
  v7 = *(_QWORD *)a1;
  if (*((_QWORD *)a1 + 1) == *(_QWORD *)a1)
  {
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    do
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v7 + 8 * v8) + 32))(*(_QWORD *)(v7 + 8 * v8)))
      {
        if (!v10)
          __cxa_bad_cast();
        v20 = 0;
        v21 = 0;
        v22 = 0;
        (*(void (**)(void *, uint64_t *))(*(_QWORD *)v10 + 184))(v10, &v20);
        v18 = 0;
        v19 = 0;
        v17 = 0;
        if ((v21 + v9) > *(_DWORD *)(a2 + 8))
          kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v13);
        v17 = *(_QWORD *)a2 + 4 * v9;
        LODWORD(v18) = v21;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v17, (uint64_t)&v20, v11, v12, v13);
        v14 = v21;
        kaldi::Vector<float>::Destroy((uint64_t)&v20);
        v9 += v14;
      }
      ++v8;
      v7 = *(_QWORD *)a1;
    }
    while (v8 < (uint64_t)(*((_QWORD *)a1 + 1) - *(_QWORD *)a1) >> 3);
  }
  result = kaldi::nnet1::Nnet::NumParams(a1);
  if (v9 != (_DWORD)result)
    kaldi::KaldiAssertFailure_((kaldi *)"GetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x40B, "pos == NumParams()", v16);
  return result;
}

void sub_1DE4C04FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Nnet::NumParams(kaldi::nnet1::Nnet *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) == *(_QWORD *)this)
    return 0;
  v3 = 0;
  v4 = 0;
  do
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 32))(*(_QWORD *)(v1 + 8 * v3)))
    {
      v4 = (*(unsigned int (**)(void *))(*(_QWORD *)v5 + 176))(v5) + v4;
    }
    ++v3;
    v1 = *(_QWORD *)this;
  }
  while (v3 < (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  return v4;
}

uint64_t kaldi::nnet1::Nnet::SetParams(kaldi::nnet1::Nnet *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  void *v9;
  void *v10;
  int v11;
  const char *v12;
  int v13;
  uint64_t result;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != kaldi::nnet1::Nnet::NumParams(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x40F, "wei_src.Dim() == NumParams()", v5);
  v6 = *(_QWORD *)a1;
  if (*((_QWORD *)a1 + 1) == *(_QWORD *)a1)
  {
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    do
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v6 + 8 * v7) + 32))(*(_QWORD *)(v6 + 8 * v7)))
      {
        if (!v9)
          __cxa_bad_cast();
        v10 = v9;
        v11 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 176))(v9);
        v17 = 0;
        v18 = 0;
        v13 = v11 + v8;
        if ((v11 + v8) > *(_DWORD *)(a2 + 8))
          kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v12);
        v16 = *(_QWORD *)a2 + 4 * v8;
        LODWORD(v17) = v11;
        (*(void (**)(void *, uint64_t *))(*(_QWORD *)v10 + 192))(v10, &v16);
        v8 = v13;
      }
      ++v7;
      v6 = *(_QWORD *)a1;
    }
    while (v7 < (uint64_t)(*((_QWORD *)a1 + 1) - *(_QWORD *)a1) >> 3);
  }
  result = kaldi::nnet1::Nnet::NumParams(a1);
  if (v8 != (_DWORD)result)
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x419, "pos == NumParams()", v15);
  return result;
}

float kaldi::nnet1::Nnet::SumParams(kaldi::nnet1::Nnet *this)
{
  uint64_t v1;
  unint64_t v3;
  float v4;
  void *v5;

  v1 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) == *(_QWORD *)this)
    return 0.0;
  v3 = 0;
  v4 = 0.0;
  do
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 32))(*(_QWORD *)(v1 + 8 * v3)))
    {
      if (!v5)
        __cxa_bad_cast();
      v4 = v4 + (*(float (**)(void *))(*(_QWORD *)v5 + 208))(v5);
    }
    ++v3;
    v1 = *(_QWORD *)this;
  }
  while (v3 < (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  return v4;
}

void kaldi::nnet1::Nnet::ResetInternalBuffers(kaldi::nnet1::Nnet *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  unint64_t v5;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;

  v5 = *(unsigned int *)(*((_QWORD *)this + 18) + 32);
  if ((int)v5 <= 0)
    kaldi::KaldiAssertFailure_((kaldi *)"ResetInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x434, "opts_->num_subbatches > 0", a5);
  v7 = (_QWORD *)((char *)this + 72);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::resize((uint64_t *)this + 9, v5);
  v8 = (_QWORD *)((char *)this + 120);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::resize((uint64_t *)this + 15, *(int *)(*((_QWORD *)this + 18) + 32));
  v9 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  v10 = *(_DWORD *)(*((_QWORD *)this + 18) + 32);
  if ((int)(v9 >> 3) <= 0)
  {
    if (v10 >= 1)
    {
      v29 = 0;
      do
      {
        v30 = *v7 + 24 * v29;
        v33 = *(_QWORD **)(v30 + 8);
        v32 = (_QWORD *)(v30 + 8);
        v31 = v33;
        v34 = *(_QWORD **)(*v7 + 24 * v29);
        if (v33 != v34)
        {
          v35 = v31 - 6;
          v36 = v31 - 6;
          do
          {
            v37 = *v36;
            v36 -= 6;
            (*(void (**)(_QWORD *))(v37 + 16))(v35);
            v20 = v35 == v34;
            v35 = v36;
          }
          while (!v20);
        }
        *v32 = v34;
        v38 = *v8 + 24 * v29;
        v41 = *(_QWORD **)(v38 + 8);
        v40 = (_QWORD *)(v38 + 8);
        v39 = v41;
        v42 = *(_QWORD **)(*v8 + 24 * v29);
        if (v41 != v42)
        {
          v43 = v39 - 6;
          v44 = v39 - 6;
          do
          {
            v45 = *v44;
            v44 -= 6;
            (*(void (**)(_QWORD *))(v45 + 16))(v43);
            v20 = v43 == v42;
            v43 = v44;
          }
          while (!v20);
        }
        *v40 = v42;
        ++v29;
      }
      while (v29 < *(int *)(*((_QWORD *)this + 18) + 32));
    }
    v47 = (_QWORD *)*((_QWORD *)this + 12);
    v46 = (_QWORD *)*((_QWORD *)this + 13);
    if (v46 != v47)
    {
      v48 = v46 - 4;
      v49 = v46 - 4;
      do
      {
        v50 = *v49;
        v49 -= 4;
        (*(void (**)(_QWORD *))(v50 + 8))(v48);
        v20 = v48 == v47;
        v48 = v49;
      }
      while (!v20);
    }
    *((_QWORD *)this + 13) = v47;
  }
  else
  {
    if (v10 >= 1)
    {
      v11 = 0;
      do
      {
        v12 = *v7 + 24 * v11;
        v15 = *(_QWORD **)(v12 + 8);
        v14 = (_QWORD *)(v12 + 8);
        v13 = v15;
        v16 = *(_QWORD **)(*v7 + 24 * v11);
        if (v15 != v16)
        {
          v17 = v13 - 6;
          v18 = v13 - 6;
          do
          {
            v19 = *v18;
            v18 -= 6;
            (*(void (**)(_QWORD *))(v19 + 16))(v17);
            v20 = v17 == v16;
            v17 = v18;
          }
          while (!v20);
        }
        *v14 = v16;
        v21 = *v8 + 24 * v11;
        v24 = *(_QWORD **)(v21 + 8);
        v23 = (_QWORD *)(v21 + 8);
        v22 = v24;
        v25 = *(_QWORD **)(*v8 + 24 * v11);
        if (v24 != v25)
        {
          v26 = v22 - 6;
          v27 = v22 - 6;
          do
          {
            v28 = *v27;
            v27 -= 6;
            (*(void (**)(_QWORD *))(v28 + 16))(v26);
            v20 = v26 == v25;
            v26 = v27;
          }
          while (!v20);
        }
        *v23 = v25;
        std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(*((_QWORD *)this + 9) + 24 * v11), (((*((_QWORD *)this + 1) - *(_QWORD *)this) << 29) + 0x100000000) >> 32);
        std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(*((_QWORD *)this + 15) + 24 * v11++), (((*((_QWORD *)this + 1) - *(_QWORD *)this) << 29) - 0x100000000) >> 32);
      }
      while (v11 < *(int *)(*((_QWORD *)this + 18) + 32));
      v9 = *((_QWORD *)this + 1) - *(_QWORD *)this;
    }
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 12, (uint64_t)((v9 << 29) + 0x100000000) >> 32);
  }
}

_QWORD *kaldi::nnet1::Nnet::CheckInternalBuffers(_QWORD *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  v5 = *(unsigned int *)(this[18] + 32);
  if ((int)v5 <= 0)
    kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x44C, "opts_->num_subbatches > 0", a5);
  v6 = this[9];
  v7 = 0xAAAAAAAAAAAAAAABLL * ((this[10] - v6) >> 3);
  if (v7 != v5)
    kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x44D, "propagate_buf_.size() == opts_->num_subbatches", a5);
  v8 = this[15];
  if (0xAAAAAAAAAAAAAAABLL * ((this[16] - v8) >> 3) != v7)
    kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x44E, "backpropagate_buf_.size() == opts_->num_subbatches", a5);
  v9 = this[1] - *this;
  if ((int)(v9 >> 3) <= 0)
  {
    v14 = (_QWORD *)(v6 + 8);
    v15 = (_QWORD *)(v8 + 8);
    do
    {
      if (*v14 != *(v14 - 1))
        kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x457, "propagate_buf_[i].size() == 0", a5);
      if (*v15 != *(v15 - 1))
        kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x458, "backpropagate_buf_[i].size() == 0", a5);
      v14 += 3;
      v15 += 3;
      --v7;
    }
    while (v7);
    if (this[13] != this[12])
      kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x45A, "propagate_vec_buf_.size() == 0", a5);
  }
  else
  {
    v10 = (v9 << 29) - 0x100000000;
    v11 = (uint64_t)((v9 << 29) + 0x100000000) >> 32;
    v12 = (_QWORD *)(v6 + 8);
    v13 = (_QWORD *)(v8 + 8);
    do
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v12 - *(v12 - 1)) >> 4) != v11)
        kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x451, "propagate_buf_[i].size() == NumComponents() + 1", a5);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v13 - *(v13 - 1)) >> 4) != v10 >> 32)
        kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x452, "backpropagate_buf_[i].size() == NumComponents() - 1", a5);
      v12 += 3;
      v13 += 3;
      --v7;
    }
    while (v7);
    if (v11 != (uint64_t)(this[13] - this[12]) >> 5)
      kaldi::KaldiAssertFailure_((kaldi *)"CheckInternalBuffers", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x454, "propagate_vec_buf_.size() == NumComponents() + 1", a5);
  }
  return this;
}

uint64_t kaldi::nnet1::Nnet::IsComponentFrozen(kaldi::nnet1::Nnet *this, int a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if ((int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) <= a2)
    kaldi::KaldiAssertFailure_((kaldi *)"IsComponentFrozen", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x479, "index < NumComponents()", a5);
  if (*((_QWORD *)this + 22) <= (unint64_t)a2)
    return 0;
  else
    return (*(_QWORD *)(*((_QWORD *)this + 21) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1;
}

void kaldi::nnet1::Nnet::Init(kaldi::nnet1::Nnet *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  _BYTE v6[8];

  kaldi::Input::Input(v6, a2, 0);
  v5 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v6);
  kaldi::nnet1::Nnet::Init(a1, v5, a3);
  kaldi::Input::Close((kaldi::Input *)v6);
  kaldi::Input::~Input((kaldi::Input *)v6);
}

void sub_1DE4C0DCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Input::~Input((kaldi::Input *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet::Init(kaldi::nnet1::Nnet *a1, uint64_t *a2, uint64_t a3)
{
  const char *v6;
  int v7;
  std::locale::id *v8;
  const std::locale::facet *v9;
  unsigned __int8 v10;
  void **v11;
  uint64_t v12;
  size_t v13;
  std::string *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  std::string __p[11];
  void **v25;
  size_t v26;
  uint64_t v27;

  kaldi::ExpectToken(a2, 0, (kaldi *)"<NnetProto>");
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v7 = *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32);
  if ((v7 & 2) != 0)
  {
LABEL_27:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1221);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Missing </NnetProto> at the end.", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  v8 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    if (v7)
      kaldi::KaldiAssertFailure_((kaldi *)"Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)0x4C6, "is.good()", v6);
    if (kaldi::PeekToken(a2, 0) == 47)
      break;
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v9 = std::locale::use_facet((const std::locale *)__p, v8);
    v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale((std::locale *)__p);
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v25, v10);
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "Init", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1228, 1);
      if (v27 >= 0)
        v11 = (void **)&v25;
      else
        v11 = v25;
      if (v27 >= 0)
        v12 = HIBYTE(v27);
      else
        v12 = v26;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v11, v12);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    if (v27 >= 0)
      v13 = HIBYTE(v27);
    else
      v13 = v26;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v13 + 1);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = __p;
    else
      v14 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    if (v13)
    {
      if (v27 >= 0)
        v15 = (void **)&v25;
      else
        v15 = v25;
      memmove(v14, v15, v13);
    }
    *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 10;
    v16 = kaldi::nnet1::Component::Init(__p, a3);
    kaldi::nnet1::Nnet::AppendComponent(a1, v16, v17, v18, v19);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v7 = *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32);
    if ((v7 & 2) != 0)
      goto LABEL_27;
  }
  kaldi::ExpectToken(a2, 0, (kaldi *)"</NnetProto>");
  kaldi::nnet1::Nnet::ResetInternalBuffers(a1, v20, v21, v22, v23);
  kaldi::nnet1::Nnet::ResetRecurrentFlag(a1);
  if (SHIBYTE(v27) < 0)
    operator delete(v25);
}

void sub_1DE4C1064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 - 97) < 0)
    operator delete(*(void **)(v14 - 120));
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Nnet::Read(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD v29[34];

  v8 = kaldi::nnet1::Component::Read(a2, a3, a4);
  if (v8)
  {
    v13 = v8;
    v14 = a1 + 2;
    while (1)
    {
      v15 = a1[1];
      v16 = (char *)v15 - (char *)*a1;
      if ((int)((unint64_t)v16 >> 3) >= 1 && *(_DWORD *)(*(v15 - 1) + 12) != *(_DWORD *)(v13 + 8))
        break;
      if ((unint64_t)v15 >= *v14)
      {
        v18 = v16 >> 3;
        v19 = (v16 >> 3) + 1;
        if (v19 >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v20 = *v14 - (_QWORD)*a1;
        if (v20 >> 2 > v19)
          v19 = v20 >> 2;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), v21);
        else
          v22 = 0;
        v23 = (uint64_t *)&v22[8 * v18];
        *v23 = v13;
        v17 = v23 + 1;
        v25 = (char *)*a1;
        v24 = (char *)a1[1];
        if (v24 != (char *)*a1)
        {
          do
          {
            v26 = *((_QWORD *)v24 - 1);
            v24 -= 8;
            *--v23 = v26;
          }
          while (v24 != v25);
          v24 = (char *)*a1;
        }
        *a1 = v23;
        a1[1] = v17;
        a1[2] = (uint64_t *)&v22[8 * v21];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *v15 = v13;
        v17 = v15 + 1;
      }
      a1[1] = v17;
      v13 = kaldi::nnet1::Component::Read(a2, a3, a4);
      if (!v13)
        goto LABEL_22;
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1260);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Dimensionality mismatch!", 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" Previous layer output:", 23);
    v28 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" Current layer input:", 21);
    std::ostream::operator<<();
LABEL_27:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
LABEL_22:
  if ((int)((unint64_t)((char *)a1[1] - (char *)*a1) >> 3) <= 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1267);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v29, "Could not read any components");
    goto LABEL_27;
  }
  *((_DWORD *)a1[18] + 2) = 0;
  kaldi::nnet1::Nnet::ResetInternalBuffers((kaldi::nnet1::Nnet *)a1, v9, v10, v11, v12);
  kaldi::nnet1::Nnet::ResetRecurrentFlag((kaldi::nnet1::Nnet *)a1);
}

_QWORD *kaldi::nnet1::Nnet::Write(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  const std::locale::facet *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  const std::locale::facet *v17;
  std::locale v18;

  kaldi::nnet1::Nnet::CheckDimensions(a1, (uint64_t)a2, a3, a4, a5);
  kaldi::WriteToken(a2, (const char *)a3, (kaldi *)"<Nnet>", v9, v10);
  if ((a3 & 1) == 0)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v13 = std::locale::use_facet(&v18, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v18);
    std::ostream::put();
    std::ostream::flush();
  }
  v14 = *a1;
  if ((int)((unint64_t)(a1[1] - *a1) >> 3) >= 1)
  {
    v15 = 0;
    do
    {
      kaldi::nnet1::Component::Write(*(_QWORD *)(v14 + 8 * v15++), a2, a3, a4);
      v14 = *a1;
    }
    while (v15 < (int)((unint64_t)(a1[1] - *a1) >> 3));
  }
  result = kaldi::WriteToken(a2, (const char *)a3, (kaldi *)"</Nnet>", v11, v12);
  if ((a3 & 1) == 0)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v17 = std::locale::use_facet(&v18, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v18);
    std::ostream::put();
    return (_QWORD *)std::ostream::flush();
  }
  return result;
}

void sub_1DE4C1458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Nnet::Info(kaldi::nnet1::Nnet *this)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  const char *v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  _QWORD *v7;
  const std::locale::facet *v8;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  uint64_t v12;
  std::locale::id *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  kaldi::nnet1::Component *v17;
  std::string *v18;
  std::string::size_type size;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  void **v24;
  uint64_t v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  uint64_t v29;
  char *v30;
  void *__p[2];
  unsigned __int8 v32;
  std::string v33;
  _QWORD v34[11];
  char v35;
  uint64_t v36;
  std::locale v37;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"num-components ", 15);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v3 = std::locale::use_facet((const std::locale *)&v33, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale((std::locale *)&v33);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"input-dim ", 10);
  if (*(_QWORD *)this == *((_QWORD *)this + 1))
  {
    v29 = 886;
    v30 = "InputDim";
    goto LABEL_27;
  }
  v5 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
  v6 = std::locale::use_facet((const std::locale *)&v33, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale((std::locale *)&v33);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"output-dim ", 11);
  if (*(_QWORD *)this == *((_QWORD *)this + 1))
  {
    v29 = 881;
    v30 = "OutputDim";
LABEL_27:
    kaldi::KaldiAssertFailure_((kaldi *)v30, "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", (const char *)v29, "!components_.empty()", v4);
  }
  v7 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
  v8 = std::locale::use_facet((const std::locale *)&v33, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale((std::locale *)&v33);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"number-of-parameters ", 21);
  kaldi::nnet1::Nnet::NumParams(this);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" millions", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
  v11 = std::locale::use_facet((const std::locale *)&v33, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale((std::locale *)&v33);
  std::ostream::put();
  std::ostream::flush();
  if ((int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) >= 1)
  {
    v12 = 0;
    v13 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"component ", 10);
      v14 = v12 + 1;
      v15 = (_QWORD *)std::ostream::operator<<();
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" : ", 3);
      v17 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 8 * v12)
                                                                         + 24))(*(_QWORD *)(*(_QWORD *)this + 8 * v12));
      kaldi::nnet1::Component::TypeToMarker(v17, &v33);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &v33;
      else
        v18 = (std::string *)v33.__r_.__value_.__r.__words[0];
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
      else
        size = v33.__r_.__value_.__l.__size_;
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", input-dim ", 12);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", output-dim ", 13);
      v22 = (_QWORD *)std::ostream::operator<<();
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(*(_QWORD *)this + 8 * v12) + 64))(__p);
      if ((v32 & 0x80u) == 0)
        v24 = __p;
      else
        v24 = (void **)__p[0];
      if ((v32 & 0x80u) == 0)
        v25 = v32;
      else
        v25 = (uint64_t)__p[1];
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
      std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
      v27 = std::locale::use_facet(&v37, v13);
      ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
      std::locale::~locale(&v37);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v32 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      ++v12;
    }
    while (v14 < (int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3));
  }
  std::stringbuf::str();
  v34[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v34[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v35 < 0)
    operator delete((void *)v34[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v36);
}

void sub_1DE4C1948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  std::locale::~locale(&a16);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::Nnet::InfoGradient@<X0>(kaldi::nnet1::Nnet *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  std::locale::id *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  kaldi::nnet1::Component *v11;
  std::string *v12;
  std::string::size_type size;
  _QWORD *v14;
  _QWORD *v15;
  void **v16;
  uint64_t v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  void *__p[2];
  unsigned __int8 v22;
  std::string v23;
  _QWORD v24[11];
  char v25;
  uint64_t v26;
  std::locale v27;

  v3 = (uint64_t *)*((_QWORD *)this + 15);
  if (*((uint64_t **)this + 16) == v3)
    return std::string::basic_string[abi:ne180100]<0>(a2, "### No gradient info");
  v4 = *v3;
  if (*(_QWORD *)(*((_QWORD *)this + 15) + 8) == v4 || !(4 * *(_DWORD *)(v4 + 20) * *(_DWORD *)(v4 + 24)))
    return std::string::basic_string[abi:ne180100]<0>(a2, "### No gradient info");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"### Gradient stats :\n", 21);
  if ((int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) >= 1)
  {
    v6 = 0;
    v7 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Component ", 10);
      v8 = v6 + 1;
      v9 = (_QWORD *)std::ostream::operator<<();
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" : ", 3);
      v11 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 8 * v6) + 24))(*(_QWORD *)(*(_QWORD *)this + 8 * v6));
      kaldi::nnet1::Component::TypeToMarker(v11, &v23);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v23;
      else
        v12 = (std::string *)v23.__r_.__value_.__r.__words[0];
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      else
        size = v23.__r_.__value_.__l.__size_;
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, size);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", ", 2);
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(*(_QWORD *)this + 8 * v6) + 72))(__p);
      if ((v22 & 0x80u) == 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      if ((v22 & 0x80u) == 0)
        v17 = v22;
      else
        v17 = (uint64_t)__p[1];
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
      std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
      v19 = std::locale::use_facet(&v27, v7);
      ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
      std::locale::~locale(&v27);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v22 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      ++v6;
    }
    while (v8 < (int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3));
  }
  std::stringbuf::str();
  v24[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v24 + *(_QWORD *)(v24[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v24[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v25 < 0)
    operator delete((void *)v24[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x1DF0ECF6C](&v26);
}

void sub_1DE4C1C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::Nnet::InfoPropagate@<X0>(kaldi::nnet1::Nnet *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v5;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v8;
  const std::locale::facet *v9;
  uint64_t v10;
  uint64_t v11;
  std::locale::id *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  kaldi::nnet1::Component *v16;
  std::string *v17;
  std::string::size_type v18;
  _QWORD *v19;
  void *locale;
  uint64_t v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  void *v24;
  std::string *v25;
  uint64_t v26;
  void *v27;
  std::string *v28;
  uint64_t v29;
  std::locale v32;
  uint64_t v33;
  unsigned __int8 v34;
  std::string __p;
  _QWORD v36[11];
  char v37;
  uint64_t v38;
  std::locale v39;

  v2 = (uint64_t *)*((_QWORD *)this + 9);
  if (*((uint64_t **)this + 10) == v2)
    return std::string::basic_string[abi:ne180100]<0>(a2, "### Forward propagation buffers not initialized");
  v3 = *v2;
  if (*(_QWORD *)(*((_QWORD *)this + 9) + 8) == v3 || !(4 * *(_DWORD *)(v3 + 20) * *(_DWORD *)(v3 + 24)))
    return std::string::basic_string[abi:ne180100]<0>(a2, "### Forward propagation buffers not initialized");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"### Forward propagation buffer content, note in the parallel GPU training, this only includes the first subbatch content :\n", 123);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"[0] output of <Input> ", 22);
  kaldi::nnet1::MomentStatistics<float>(**((_QWORD **)this + 9));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
  v9 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) >= 1)
  {
    v10 = 0;
    v11 = 48;
    v12 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"[", 1);
      v13 = v10 + 1;
      v14 = (_QWORD *)std::ostream::operator<<();
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"] output of ", 12);
      v16 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 8 * v10)
                                                                         + 24))(*(_QWORD *)(*(_QWORD *)this + 8 * v10));
      kaldi::nnet1::Component::TypeToMarker(v16, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &__p;
      else
        v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v18 = __p.__r_.__value_.__l.__size_;
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
      kaldi::nnet1::MomentStatistics<float>(**((_QWORD **)this + 9) + v11);
      if ((v34 & 0x80u) == 0)
        locale = &v32;
      else
        locale = v32.__locale_;
      if ((v34 & 0x80u) == 0)
        v21 = v34;
      else
        v21 = v33;
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)locale, v21);
      std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
      v23 = std::locale::use_facet(&v39, v12);
      ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
      std::locale::~locale(&v39);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v34 < 0)
        operator delete(v32.__locale_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 8 * v10) + 24))(*(_QWORD *)(*(_QWORD *)this + 8 * v10)) == 2055)
      {
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v24 + 248))(&__p);
        v25 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        v26 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v25, v26);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 8 * v10) + 24))(*(_QWORD *)(*(_QWORD *)this + 8 * v10)) == 274)
      {
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v27 + 280))(&__p);
        v28 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        v29 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v28, v29);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v11 += 48;
      ++v10;
    }
    while (v13 < (int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3));
  }
  std::stringbuf::str();
  v36[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v36 + *(_QWORD *)(v36[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v36[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v37 < 0)
    operator delete((void *)v36[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x1DF0ECF6C](&v38);
}

void sub_1DE4C2108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::Nnet::InfoBackPropagate@<X0>(kaldi::nnet1::Nnet *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v5;
  std::string *v6;
  uint64_t v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  uint64_t v10;
  uint64_t v11;
  std::locale::id *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  kaldi::nnet1::Component *v16;
  std::string *p_p;
  std::string::size_type size;
  std::string *v19;
  uint64_t v20;
  const std::locale::facet *v21;
  void *v22;
  std::string *v23;
  uint64_t v24;
  void *v25;
  std::string *v26;
  uint64_t v27;
  std::string __p;
  _QWORD v31[11];
  char v32;
  uint64_t v33;
  std::locale v34;

  v2 = (uint64_t *)*((_QWORD *)this + 15);
  if (*((uint64_t **)this + 16) == v2)
    return std::string::basic_string[abi:ne180100]<0>(a2, "### Backward propagation buffers not initialized");
  v3 = *v2;
  if (*(_QWORD *)(*((_QWORD *)this + 15) + 8) == v3 || !(4 * *(_DWORD *)(v3 + 20) * *(_DWORD *)(v3 + 24)))
    return std::string::basic_string[abi:ne180100]<0>(a2, "### Backward propagation buffers not initialized");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"### Backward propagation buffer content, Note in multi subbatch case, only the first subbatch is reported :\n", 108);
  if (*(_QWORD *)(*((_QWORD *)this + 15) + 8) != **((_QWORD **)this + 15))
  {
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"[0] diff of <Input> ", 20);
    kaldi::nnet1::MomentStatistics<float>(**((_QWORD **)this + 15));
    v6 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(__p.__r_.__value_.__r.__words[2])
       : __p.__r_.__value_.__l.__size_;
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
    v9 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale(&v34);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"[", 1);
      v13 = v11 + 1;
      v14 = (_QWORD *)std::ostream::operator<<();
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"] diff-output of ", 17);
      v16 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 8 * v11)
                                                                         + 24))(*(_QWORD *)(*(_QWORD *)this + 8 * v11));
      kaldi::nnet1::Component::TypeToMarker(v16, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v11 < (((*((_QWORD *)this + 1) - *(_QWORD *)this) << 29) - 0x100000000) >> 32)
      {
        kaldi::nnet1::MomentStatistics<float>(**((_QWORD **)this + 15) + v10);
        v19 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        v20 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v19, v20);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(_QWORD *)(v31[0] - 24)));
      v21 = std::locale::use_facet((const std::locale *)&__p, v12);
      ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
      std::locale::~locale((std::locale *)&__p);
      std::ostream::put();
      std::ostream::flush();
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 8 * v11) + 24))(*(_QWORD *)(*(_QWORD *)this + 8 * v11)) == 2055)
      {
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v22 + 256))(&__p);
        v23 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        v24 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v23, v24);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 8 * v11) + 24))(*(_QWORD *)(*(_QWORD *)this + 8 * v11)) == 274)
      {
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v25 + 288))(&__p);
        v26 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        v27 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v26, v27);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v10 += 48;
      ++v11;
    }
    while (v13 < (int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3));
  }
  std::stringbuf::str();
  v31[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v31 + *(_QWORD *)(v31[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v31[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v32 < 0)
    operator delete((void *)v31[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x1DF0ECF6C](&v33);
}

void sub_1DE4C25EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Nnet::IsRnn(kaldi::nnet1::Nnet *this)
{
  return *((unsigned __int8 *)this + 152);
}

BOOL kaldi::nnet1::Nnet::HasHistory(kaldi::nnet1::Nnet *this)
{
  return *((_QWORD *)this + 6) != *((_QWORD *)this + 7);
}

uint64_t kaldi::nnet1::Nnet::IsBidirectionalRnn(kaldi::nnet1::Nnet *this)
{
  return *((unsigned __int8 *)this + 153);
}

void kaldi::nnet1::Nnet::CheckWeights(kaldi::nnet1::Nnet *this)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) - *(_QWORD *)this >= 9uLL)
  {
    v3 = 0;
    do
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 32))(*(_QWORD *)(v1 + 8 * v3)))
        kaldi::nnet1::UpdatableComponent::CheckParams(*(kaldi::nnet1::UpdatableComponent **)(*(_QWORD *)this + 8 * v3));
      v1 = *(_QWORD *)this;
      v4 = v3 + 2;
      ++v3;
    }
    while (v4 < (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  }
}

float kaldi::nnet1::UpdatableComponent::CheckParams(kaldi::nnet1::UpdatableComponent *this)
{
  float result;
  _QWORD v2[34];

  result = (*(float (**)(kaldi::nnet1::UpdatableComponent *))(*(_QWORD *)this + 208))(this);
  if (fabsf(result) == INFINITY)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "CheckParams", "../engine/common/libquasar/libkaldi/src/nnet/nnet-component.h", 427);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "'inf' in component parameters (weight explosion, try lower learning rate?)");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

void kaldi::nnet1::Nnet::ResetRecurrentFlag(kaldi::nnet1::Nnet *this)
{
  char **v1;
  uint64_t v2;
  char **v3;
  uint64_t v4;
  unint64_t v6;
  const void *v7;
  kaldi::nnet1::ParallelComponent *v8;
  kaldi::nnet1::ParallelComponent *v9;
  BOOL v10;
  void *v11;
  void *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  const void *v27;
  void *v28;
  const void *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void *__p;
  char *v45;
  void *v46;
  char *v47;

  v1 = (char **)((char *)this + 24);
  v3 = (char **)((char *)this + 48);
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
  *((_QWORD *)this + 7) = v2;
  *((_WORD *)this + 76) = 0;
  v4 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) != *(_QWORD *)this)
  {
    v6 = 0;
    v42 = (char *)this + 64;
    v43 = (char *)this + 40;
    while (1)
    {
      v7 = *(const void **)(v4 + 8 * v6);
      if (!v7)
        goto LABEL_38;
      if (!v8)
        break;
      v9 = v8;
      kaldi::nnet1::ParallelComponent::GetHistoricalComponents(v8, &v46);
      std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>((uint64_t)v3, *((_QWORD *)this + 7), (char *)v46, v47, (v47 - (_BYTE *)v46) >> 3);
      if (*((_BYTE *)this + 153))
      {
        v10 = 1;
      }
      else
      {
        v16 = *((_QWORD *)v9 + 23);
        v17 = *((_QWORD *)v9 + 24);
        if (v16 == v17)
        {
          v10 = 0;
        }
        else
        {
          v10 = 0;
          do
          {
            v10 = v10 || *(_BYTE *)(v16 + 153) != 0;
            v16 += 376;
          }
          while (v16 != v17);
        }
      }
      *((_BYTE *)this + 153) = v10;
      kaldi::nnet1::ParallelComponent::GetRecurrentComponents(v9, &__p);
      std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>((uint64_t)v1, *((_QWORD *)this + 4), (char *)__p, v45, (v45 - (_BYTE *)__p) >> 3);
      if (__p)
      {
        v45 = (char *)__p;
        operator delete(__p);
      }
      if (v46)
      {
        v47 = (char *)v46;
        operator delete(v46);
      }
LABEL_59:
      ++v6;
      v4 = *(_QWORD *)this;
      if (v6 >= (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3)
      {
        if (*((_QWORD *)this + 3) != *((_QWORD *)this + 4))
          *((_BYTE *)this + 152) = 1;
        return;
      }
    }
    if (v11)
    {
      v12 = v11;
      if ((*(int (**)(void *))(*(_QWORD *)v11 + 16))(v11) >= 1)
      {
        v14 = (_QWORD *)*((_QWORD *)this + 7);
        v13 = *((_QWORD *)this + 8);
        if ((unint64_t)v14 >= v13)
        {
          v18 = ((char *)v14 - *v3) >> 3;
          if ((unint64_t)(v18 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v19 = v13 - (_QWORD)*v3;
          v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1))
            v20 = v18 + 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v20;
          if (v21)
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v42, v21);
          else
            v22 = 0;
          v23 = &v22[8 * v18];
          *(_QWORD *)v23 = v12;
          v15 = v23 + 8;
          v25 = (char *)*((_QWORD *)this + 6);
          v24 = (char *)*((_QWORD *)this + 7);
          if (v24 != v25)
          {
            do
            {
              v26 = *((_QWORD *)v24 - 1);
              v24 -= 8;
              *((_QWORD *)v23 - 1) = v26;
              v23 -= 8;
            }
            while (v24 != v25);
            v24 = *v3;
          }
          *((_QWORD *)this + 6) = v23;
          *((_QWORD *)this + 7) = v15;
          *((_QWORD *)this + 8) = &v22[8 * v21];
          if (v24)
            operator delete(v24);
        }
        else
        {
          *v14 = v12;
          v15 = v14 + 1;
        }
        *((_QWORD *)this + 7) = v15;
      }
    }
LABEL_38:
    v27 = *(const void **)(*(_QWORD *)this + 8 * v6);
    if (v27)
    {
      if (v28)
      {
        v29 = v28;
        if ((*(int (**)(void *))(*(_QWORD *)v28 + 16))(v28) >= 1)
        {
          v31 = (_QWORD *)*((_QWORD *)this + 4);
          v30 = *((_QWORD *)this + 5);
          if ((unint64_t)v31 >= v30)
          {
            v33 = ((char *)v31 - *v1) >> 3;
            if ((unint64_t)(v33 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v34 = v30 - (_QWORD)*v1;
            v35 = v34 >> 2;
            if (v34 >> 2 <= (unint64_t)(v33 + 1))
              v35 = v33 + 1;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
              v36 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v36 = v35;
            if (v36)
              v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v43, v36);
            else
              v37 = 0;
            v38 = &v37[8 * v33];
            *(_QWORD *)v38 = v29;
            v32 = v38 + 8;
            v40 = (char *)*((_QWORD *)this + 3);
            v39 = (char *)*((_QWORD *)this + 4);
            if (v39 != v40)
            {
              do
              {
                v41 = *((_QWORD *)v39 - 1);
                v39 -= 8;
                *((_QWORD *)v38 - 1) = v41;
                v38 -= 8;
              }
              while (v39 != v40);
              v39 = *v1;
            }
            *((_QWORD *)this + 3) = v38;
            *((_QWORD *)this + 4) = v32;
            *((_QWORD *)this + 5) = &v37[8 * v36];
            if (v39)
              operator delete(v39);
          }
          else
          {
            *v31 = v29;
            v32 = v31 + 1;
          }
          *((_QWORD *)this + 4) = v32;
          {
            *((_BYTE *)this + 153) = 1;
          }
        }
      }
    }
    goto LABEL_59;
  }
}

void sub_1DE4C2B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ParallelComponent::GetHistoricalComponents(kaldi::nnet1::ParallelComponent *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t i;
  void *__p;
  char *v6;
  uint64_t v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *((_QWORD *)this + 23);
  for (i = *((_QWORD *)this + 24); v2 != i; v2 += 376)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&__p, *(const void **)(v2 + 48), *(_QWORD *)(v2 + 56), (uint64_t)(*(_QWORD *)(v2 + 56) - *(_QWORD *)(v2 + 48)) >> 3);
    std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>((uint64_t)a2, a2[1], (char *)__p, v6, (v6 - (_BYTE *)__p) >> 3);
    if (__p)
    {
      v6 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_1DE4C2C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ParallelComponent::GetRecurrentComponents(kaldi::nnet1::ParallelComponent *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t i;
  void *__p;
  char *v6;
  uint64_t v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *((_QWORD *)this + 23);
  for (i = *((_QWORD *)this + 24); v2 != i; v2 += 376)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&__p, *(const void **)(v2 + 24), *(_QWORD *)(v2 + 32), (uint64_t)(*(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24)) >> 3);
    std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>((uint64_t)a2, a2[1], (char *)__p, v6, (v6 - (_BYTE *)__p) >> 3);
    if (__p)
    {
      v6 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_1DE4C2CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::nnet1::Nnet::ValidateNnet(kaldi::nnet1::Nnet *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  kaldi::nnet1::Nnet::CheckDimensions((uint64_t *)this, a2, a3, a4, a5);
  kaldi::nnet1::Nnet::CheckWeights(this);
  return kaldi::nnet1::Nnet::CheckInternalBuffers(this, v6, v7, v8, v9);
}

void std::vector<kaldi::nnet1::Component *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<kaldi::nnet1::Component *>::__append((void **)a1, a2 - v2);
  }
}

void kaldi::nnet1::Nnet::SetHistoryOptions(kaldi::nnet1::Nnet *this, const kaldi::nnet1::HistoryOptions *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  const char *v11;
  __int128 v12;
  int v13;
  void (**v14)(kaldi::nnet1::RecurrentNnetTrainOptions *__hidden);
  _BYTE v15[31];
  void *v16;
  int v17;
  int v18;

  v6 = (uint64_t *)*((_QWORD *)this + 6);
  v7 = (uint64_t *)*((_QWORD *)this + 7);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, const kaldi::nnet1::HistoryOptions *))(*(_QWORD *)v8 + 80))(v8, a2);
  }
  if (v9)
  {
    v12 = *(_OWORD *)(v9 + 8);
    *(_OWORD *)&v15[15] = *(_OWORD *)(v9 + 23);
    *(_OWORD *)v15 = v12;
    v14 = &off_1EA92B868;
    v16 = &unk_1EA92B888;
    v13 = *((_DWORD *)v9 + 13);
    v17 = *((_DWORD *)a2 + 2);
    v18 = v13;
    kaldi::nnet1::Nnet::SetTrainOptions(this, (const kaldi::nnet1::NnetTrainOptions *)&v14, a3, v10, v11);
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14, "SetHistoryOptions", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-nnet.cc", 1509);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Inconsistent return type: RecurrentBaseComponent::GetTrainOptions() can not be cast to RecurrentNnetTrainOptions", 112);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
  }
}

void sub_1DE4C2E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Nnet::GetTrainOptions(kaldi::nnet1::Nnet *this)
{
  return *((_QWORD *)this + 18);
}

_QWORD *kaldi::nnet1::operator<<(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v3 = kaldi::nnet1::operator<<(a1, a2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", and Recurrent style components have additional configurations ", 64);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"num_sequences ", 14);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"bptt_steps ", 11);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  return a1;
}

{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  const char *v25;
  uint64_t v26;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"NnetTrainOptions : ", 19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"learn_rate ", 11);
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"momentum ", 9);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"l2_penalty ", 11);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"l1_penalty ", 11);
  v11 = (_QWORD *)std::ostream::operator<<();
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"qtype_compact_grad ", 19);
  v13 = (_QWORD *)std::ostream::operator<<();
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"step_compact_grad ", 18);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"num_subbatches ", 15);
  v17 = (_QWORD *)std::ostream::operator<<();
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", ", 2);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"average_gradients ", 18);
  if (*(_BYTE *)(a2 + 36))
    v20 = "true";
  else
    v20 = "false";
  if (*(_BYTE *)(a2 + 36))
    v21 = 4;
  else
    v21 = 5;
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"vectorize_weights ", 18);
  if (*(_BYTE *)(a2 + 37))
    v25 = "true";
  else
    v25 = "false";
  if (*(_BYTE *)(a2 + 37))
    v26 = 4;
  else
    v26 = 5;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
  return a1;
}

void kaldi::Timer::Reset(kaldi::Timer *this, clockid_t a2)
{
  clockid_t v3;

  *(double *)this = kaldi::Timer::GetSeconds((kaldi::Timer *)5, a2);
  if (*((_BYTE *)this + 24))
    *((double *)this + 1) = kaldi::Timer::GetSeconds((kaldi::Timer *)0xC, v3);
  *((double *)this + 2) = kaldi::Timer::GetSeconds((kaldi::Timer *)0x10, v3);
}

double kaldi::Timer::GetSeconds(kaldi::Timer *this, clockid_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int *v4;
  char *v5;
  size_t v6;
  _QWORD v8[34];
  timespec __tp;

  if (clock_gettime((clockid_t)this, &__tp) && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8, "GetSeconds", "../engine/common/libquasar/libkaldi/src/base/timer.h", 111);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Could not read clock ", 21);
    v2 = (_QWORD *)std::ostream::operator<<();
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)": ", 2);
    v4 = __error();
    v5 = strerror(*v4);
    v6 = strlen(v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, v6);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
  }
  return (double)__tp.tv_nsec / 1000000000.0 + (double)__tp.tv_sec;
}

void sub_1DE4C31E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

char *std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1DE4C33D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

_QWORD *std::vector<kaldi::CuMatrix<float>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuMatrix<float>>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 48 * a2;
    v6 = 48 * a2;
    do
    {
      *(_OWORD *)(v4 + 24) = 0uLL;
      *(_OWORD *)(v4 + 8) = 0uLL;
      *(_QWORD *)v4 = &unk_1EA92DFA8;
      *(_BYTE *)(v4 + 40) = 0;
      v4 += 48;
      v6 -= 48;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_1DE4C3554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8;
  _QWORD *result;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = a4 - (unint64_t)a2 + 8 * ((_QWORD)a3 - a1);
  result = *(_QWORD **)a5;
  if (v8 >= 1)
  {
    if (a4)
    {
      if (v8 >= (unint64_t)a4)
        v10 = a4;
      else
        v10 = v8;
      v8 -= v10;
      v11 = (-1 << (a4 - v10)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)a4);
      *result = *result & ~v11 | *a3 & v11;
      *(_DWORD *)(a5 + 8) = (*(_DWORD *)(a5 + 8) - (_BYTE)v10) & 0x3F;
    }
    if (v8 >= 0)
      v12 = v8;
    else
      v12 = v8 + 63;
    v13 = v12 >> 6;
    result -= v12 >> 6;
    *(_QWORD *)a5 = result;
    v14 = &a3[-(v12 >> 6)];
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(result, v14, 8 * v13);
      result = *(_QWORD **)a5;
    }
    if (v8 - (v13 << 6) >= 1)
    {
      v15 = -1 << (((_BYTE)v13 << 6) - v8);
      v16 = *(v14 - 1) & v15;
      v17 = *--result;
      *(_QWORD *)a5 = result;
      *result = v17 & ~v15 | v16;
      *(_DWORD *)(a5 + 8) = -(int)v8 & 0x3F;
    }
  }
  *(_QWORD *)a6 = result;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return result;
}

unint64_t std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t result@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;

  v6 = a4 - (unint64_t)a2 + 8 * ((_QWORD)a3 - result);
  if (v6 <= 0)
  {
    v11 = *(unint64_t **)a5;
    LODWORD(v9) = *(_DWORD *)(a5 + 8);
  }
  else
  {
    if (a4)
    {
      if (v6 >= (unint64_t)a4)
        v7 = a4;
      else
        v7 = a4 - (unint64_t)a2 + 8 * ((_QWORD)a3 - result);
      v6 -= v7;
      v8 = (-1 << (a4 - v7)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)a4) & *a3;
      v9 = *(unsigned int *)(a5 + 8);
      if (v7 >= v9)
        v10 = *(unsigned int *)(a5 + 8);
      else
        v10 = v7;
      v11 = *(unint64_t **)a5;
      if (v10)
      {
        v12 = v8 >> (a4 - v9);
        if (v9 > a4)
          v12 = v8 << (v9 - a4);
        *v11 = *v11 & ~((-1 << (v9 - v10)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v9)) | v12;
        LODWORD(v9) = ((_BYTE)v9 - (_BYTE)v10) & 0x3F;
        *(_DWORD *)(a5 + 8) = v9;
        v7 -= v10;
      }
      if (v7 >= 1)
      {
        v13 = *--v11;
        *(_QWORD *)a5 = v11;
        LODWORD(v9) = -(int)v7 & 0x3F;
        *(_DWORD *)(a5 + 8) = v9;
        *v11 = v13 & ~(-1 << -(char)v7) | (v8 << (v7 + v10 - a4 + (-(char)v7 & 0x3F)));
      }
    }
    else
    {
      LODWORD(v9) = *(_DWORD *)(a5 + 8);
      v11 = *(unint64_t **)a5;
    }
    v14 = 64 - v9;
    v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
    if (v6 >= 64)
    {
      v16 = *v11;
      do
      {
        v17 = v6;
        v19 = *--a3;
        v18 = v19;
        result = v19 >> v14;
        *v11 = v16 & ~v15 | (v19 >> v14);
        v20 = *--v11;
        v16 = v20 & v15 | (v18 << v9);
        *v11 = v16;
        v6 = v17 - 64;
      }
      while (v17 > 0x7F);
      *(_QWORD *)a5 = v11;
    }
    if (v6 >= 1)
    {
      v21 = *(a3 - 1) & (-1 << -(char)v6);
      if (v6 >= (unint64_t)v9)
        v22 = v9;
      else
        v22 = v6;
      *v11 = *v11 & ~((-1 << (v9 - v22)) & v15) | (v21 >> v14);
      LODWORD(v9) = ((_BYTE)v9 - (_BYTE)v22) & 0x3F;
      *(_DWORD *)(a5 + 8) = v9;
      if (v6 - v22 >= 1)
      {
        v23 = *--v11;
        *(_QWORD *)a5 = v11;
        *(_DWORD *)(a5 + 8) = (v22 - v6) & 0x3F;
        *v11 = v23 & ~(-1 << (v22 - v6)) | (v21 << (v6 + ((v22 - v6) & 0x3F)));
        LODWORD(v9) = (v22 - v6) & 0x3F;
      }
    }
  }
  *(_QWORD *)a6 = v11;
  *(_DWORD *)(a6 + 8) = v9;
  return result;
}

unint64_t *std::__copy_unaligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  BOOL v14;
  BOOL v15;
  int v16;
  unint64_t v17;
  unint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;

  v6 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)result);
  if (v6 <= 0)
  {
    v18 = *(unint64_t **)a5;
    v19 = *(_DWORD *)(a5 + 8);
  }
  else
  {
    if (a2)
    {
      v7 = a2;
      if (v6 >= (unint64_t)(64 - a2))
        v8 = 64 - a2;
      else
        v8 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)result);
      v6 -= v8;
      v9 = (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v8)) & (-1 << a2) & *result;
      v10 = *(unsigned int *)(a5 + 8);
      if (v8 >= (64 - v10))
        v11 = (64 - v10);
      else
        v11 = v8;
      v12 = *(unint64_t **)a5;
      v13 = v9 >> (a2 - v10);
      v14 = v10 >= a2;
      v16 = v10 - a2;
      v15 = v16 != 0 && v14;
      v17 = v9 << v16;
      if (!v15)
        v17 = v13;
      *v12 = **(_QWORD **)a5 & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v10 - v11)) & (-1 << v10)) | v17;
      v18 = (unint64_t *)((char *)v12 + (((v11 + v10) >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = v18;
      v19 = ((_BYTE)v10 + (_BYTE)v11) & 0x3F;
      *(_DWORD *)(a5 + 8) = v19;
      v20 = v8 - v11;
      if (v20 >= 1)
      {
        *v18 = *v18 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v20) | (v9 >> (v11 + v7));
        *(_DWORD *)(a5 + 8) = v20;
        v19 = v20;
      }
      ++result;
    }
    else
    {
      v19 = *(_DWORD *)(a5 + 8);
      v18 = *(unint64_t **)a5;
    }
    v21 = 64 - v19;
    v22 = -1 << v19;
    if (v6 >= 64)
    {
      v23 = *v18;
      do
      {
        v24 = v6;
        v26 = *result++;
        v25 = v26;
        *v18 = v23 & ~v22 | (v26 << v19);
        v27 = v18[1];
        ++v18;
        v23 = v27 & v22 | (v25 >> v21);
        *v18 = v23;
        v6 = v24 - 64;
      }
      while (v24 > 0x7F);
      *(_QWORD *)a5 = v18;
    }
    if (v6 >= 1)
    {
      v28 = *result & (0xFFFFFFFFFFFFFFFFLL >> -(char)v6);
      if (v6 >= (unint64_t)v21)
        v29 = 64 - v19;
      else
        v29 = v6;
      *v18 = *v18 & ~((0xFFFFFFFFFFFFFFFFLL >> (v21 - v29)) & v22) | (v28 << v19);
      v18 = (unint64_t *)((char *)v18 + (((v29 + (unint64_t)v19) >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = v18;
      v19 = ((_BYTE)v19 + (_BYTE)v29) & 0x3F;
      *(_DWORD *)(a5 + 8) = v19;
      v30 = v6 - v29;
      if (v30 >= 1)
      {
        *v18 = *v18 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v30) | (v28 >> v29);
        *(_DWORD *)(a5 + 8) = v30;
        v19 = v30;
      }
    }
  }
  *(_QWORD *)a6 = v18;
  *(_DWORD *)(a6 + 8) = v19;
  return result;
}

void std::vector<kaldi::nnet1::Component *>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

_QWORD *std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1DE4C3BCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1DE4C3CD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t kaldi::InitKaldiInputStream(uint64_t a1, _BYTE *a2)
{
  uint64_t result;
  _QWORD *v4;
  _QWORD v5[34];

  if (std::istream::peek())
  {
    *a2 = 0;
    return 1;
  }
  else
  {
    std::istream::get();
    if (std::istream::peek() << 24 == 1107296256)
    {
      std::istream::get();
      result = 1;
      *a2 = 1;
    }
    else
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5, "InitKaldiInputStream", "../engine/common/libquasar/libkaldi/src/base/io-funcs-inl.h", 402);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Was looking for B, but got ", 27);
        v4 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\n", 1);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
      }
      return 0;
    }
  }
  return result;
}

void sub_1DE4C3F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_DWORD *)v6 + 14) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1DE4C4044(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void kaldi::nnet1::NormalizeComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  _QWORD v14[3];
  uint64_t v15;

  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)a3, a2, 111, a4, a5);
  v7 = *(unsigned int *)(a2 + 20);
  v14[2] = 0;
  v15 = 0;
  v14[0] = &unk_1EA92DFD8;
  v14[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v14, v7, 0, v8, v9);
  v15 = *(_QWORD *)(a3 + 32);
  v10 = 1.0 / (double)*(int *)(a2 + 16);
  kaldi::CuVectorBase<float>::AddDiagMat2((uint64_t)v14, a2, 111, v10, 0.0);
  kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v14, 1.3553e-20);
  kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v14, -0.5);
  kaldi::CuMatrixBase<float>::MulRowsVec(a3, (uint64_t)v14, v11, v12, v13);
  v14[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v14);
}

void sub_1DE4C4280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuVector<float>::~CuVector(&a9);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::NormalizeComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  float v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  float v18;
  const char *v19;
  _QWORD v20[3];
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;

  v8 = *(unsigned int *)(a2 + 20);
  v22[2] = 0;
  v23 = 0;
  v22[0] = &unk_1EA92DFD8;
  v22[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v22, v8, 0, a4, (const char *)a5);
  v23 = *(_QWORD *)(a5 + 32);
  v9 = v23;
  v10 = 1.0 / (double)*(int *)(a2 + 16);
  kaldi::CuVectorBase<float>::AddDiagMat2((uint64_t)v22, a2, 111, v10, 0.0);
  kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v22, 1.3553e-20);
  kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v22, -0.5);
  kaldi::CuMatrixBase<float>::AddDiagVecMat(a5, (uint64_t)v22, a4, 111, v11, 1.0, 0.0);
  kaldi::CuVectorBase<float>::ReplaceValue((uint64_t)v22, 8589900000.0, 0.0);
  kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v22, 3.0);
  v12 = *(unsigned int *)(a5 + 20);
  v20[2] = 0;
  v21 = 0;
  v20[0] = &unk_1EA92DFD8;
  v20[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v20, v12, 0, v13, v14);
  v21 = v9;
  kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)v20, a4, 111, a2, 112, 1.0, 0.0);
  kaldi::CuVectorBase<float>::MulElements((uint64_t)v20, (uint64_t)v22, v15, v16, v17);
  v18 = -1.0 / (double)*(int *)(a2 + 16);
  kaldi::CuMatrixBase<float>::AddDiagVecMat(a5, (uint64_t)v20, a2, 111, v19, v18, 1.0);
  v20[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v20);
  v22[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v22);
}

void sub_1DE4C4414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::NormalizeComponent::~NormalizeComponent(kaldi::nnet1::NormalizeComponent *this)
{
  kaldi::nnet1::Component::~Component(this);
  JUMPOUT(0x1DF0ED014);
}

double kaldi::nnet1::NormalizeComponent::Copy(kaldi::nnet1::NormalizeComponent *this)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = *((double *)this + 1);
  *(double *)(v2 + 8) = result;
  *(_WORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_1EA929258;
  return result;
}

uint64_t kaldi::nnet1::NormalizeComponent::GetType(kaldi::nnet1::NormalizeComponent *this)
{
  return 1034;
}

double kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WordMultiVecComponent(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  *(_OWORD *)(a1 + 56) = xmmword_1DEC3D450;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)a1 = &unk_1EA929DA8;
  *(_QWORD *)(a1 + 88) = &unk_1EA929ED8;
  *(_DWORD *)(a1 + 96) = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_QWORD *)(a1 + 352) = &unk_1EA92DFA8;
  *(_BYTE *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_QWORD *)(a1 + 400) = &unk_1EA92DFA8;
  *(_BYTE *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 1065353216;
  *(_BYTE *)(a1 + 460) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 529) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  return result;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WordMultiVecComponent(uint64_t a1, uint64_t a2)
{
  int v4;
  char **v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  *(_OWORD *)(a1 + 56) = xmmword_1DEC3D450;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)(a1 + 88) = &unk_1EA929ED8;
  *(_QWORD *)a1 = &unk_1EA929DA8;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 104), *(const void **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 128), *(const void **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 2);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 152), *(const void **)(a2 + 152), *(_QWORD *)(a2 + 160), (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 176), *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 2);
  v4 = *(_DWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 200) = v4;
  v5 = (char **)(a1 + 256);
  *(_QWORD *)(a1 + 352) = &unk_1EA92DFA8;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_QWORD *)(a1 + 400) = &unk_1EA92DFA8;
  *(_BYTE *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_BYTE *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  v6 = *(unsigned __int8 *)(a2 + 460);
  *(_BYTE *)(a1 + 460) = v6;
  if (v6 && *(int *)(a1 + 96) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 256) + 8 * v7);
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      v10 = v9;
      v12 = *(uint64_t **)(a1 + 264);
      v11 = *(_QWORD *)(a1 + 272);
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v5) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v5;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 272, v17);
        else
          v18 = 0;
        v19 = (uint64_t *)&v18[8 * v14];
        *v19 = v10;
        v13 = v19 + 1;
        v21 = *(char **)(a1 + 256);
        v20 = *(char **)(a1 + 264);
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v19 = v22;
          }
          while (v20 != v21);
          v20 = *v5;
        }
        *(_QWORD *)(a1 + 256) = v19;
        *(_QWORD *)(a1 + 264) = v13;
        *(_QWORD *)(a1 + 272) = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v9;
        v13 = v12 + 1;
      }
      *(_QWORD *)(a1 + 264) = v13;
      ++v7;
    }
    while (v7 < *(int *)(a1 + 96));
  }
  if (a1 != a2)
  {
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 280, *(_QWORD *)(a2 + 280), *(_QWORD *)(a2 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 4));
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 304, *(_QWORD *)(a2 + 304), *(_QWORD *)(a2 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 312) - *(_QWORD *)(a2 + 304)) >> 4));
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 328, *(_QWORD *)(a2 + 328), *(_QWORD *)(a2 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 336) - *(_QWORD *)(a2 + 328)) >> 4));
  }
  kaldi::CuMatrix<float>::operator=(a1 + 352, a2 + 352);
  kaldi::CuMatrix<float>::operator=(a1 + 400, a2 + 400);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  *(_DWORD *)(a1 + 452) = *(_DWORD *)(a2 + 452);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 464);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 208, (uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 3);
  if (*(_QWORD *)(a1 + 216) != *(_QWORD *)(a1 + 208))
  {
    v23 = 0;
    do
    {
      kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ConstructMatrixObject<kaldi::CuMatrixBase<float>>(*(_QWORD *)(*(_QWORD *)(a2 + 208) + 8 * v23), &v29);
      v24 = *(_QWORD *)(a1 + 208);
      v25 = v29;
      v29 = 0;
      v26 = *(_QWORD *)(v24 + 8 * v23);
      *(_QWORD *)(v24 + 8 * v23) = v25;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
      v27 = v29;
      v29 = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
      ++v23;
    }
    while (v23 < (uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3);
  }
  if (*(_QWORD *)(a2 + 480) != *(_QWORD *)(a2 + 472))
    kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 472));
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  return a1;
}

void sub_1DE4C49C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, kaldi::nnet1::QuantizerResidualAggregator *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  kaldi::nnet1::UpdatableComponent *v20;
  void *v22;
  void *v23;
  void *v24;

  v22 = *a10;
  if (*a10)
  {
    *((_QWORD *)v20 + 20) = v22;
    operator delete(v22);
  }
  v23 = *a11;
  if (*a11)
  {
    *((_QWORD *)v20 + 17) = v23;
    operator delete(v23);
  }
  v24 = *a12;
  if (*a12)
  {
    *((_QWORD *)v20 + 14) = v24;
    operator delete(v24);
  }
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a13);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v20);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ConstructMatrixObject<kaldi::CuMatrixBase<float>>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  v4 = operator new();
  kaldi::CuMatrix<float>::CuMatrix(v4, a1, 111);
  *a2 = v4;
}

void sub_1DE4C4B20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  _QWORD v5[34];

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((_QWORD *)a1);
  if (*(_BYTE *)(a1 + 460))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5, "InitResidualAggregator", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 939);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "Not implemented yet when transforms are used");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  if (*(_QWORD *)(a1 + 216) != *(_QWORD *)(a1 + 208))
  {
    v4 = 0;
    do
      kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * v4++));
    while (v4 < (uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::~WordMultiVecComponent(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;

  *(_QWORD *)a1 = &unk_1EA929DA8;
  *(_QWORD *)(a1 + 88) = &unk_1EA929ED8;
  v2 = a1 + 88;
  v3 = *(_QWORD **)(a1 + 256);
  v4 = *(_QWORD **)(a1 + 264);
  while (v3 != v4)
  {
    if (*v3)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      *v3 = 0;
    }
    ++v3;
  }
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 472));
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 400);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 352);
  v10 = (void **)(a1 + 328);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)(a1 + 304);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)(a1 + 280);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v5 = *(void **)(a1 + 256);
  if (v5)
  {
    *(_QWORD *)(a1 + 264) = v5;
    operator delete(v5);
  }
  v10 = (void **)(a1 + 232);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)(a1 + 208);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v6 = *(void **)(a1 + 176);
  if (v6)
  {
    *(_QWORD *)(a1 + 184) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 152);
  if (v7)
  {
    *(_QWORD *)(a1 + 160) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 128);
  if (v8)
  {
    *(_QWORD *)(a1 + 136) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 104);
  if (v9)
  {
    *(_QWORD *)(a1 + 112) = v9;
    operator delete(v9);
  }
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::~WordMultiVecComponent(a1);
  JUMPOUT(0x1DF0ED014);
}

void `non-virtual thunk to'kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::~WordMultiVecComponent(uint64_t a1)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::~WordMultiVecComponent(a1 - 88);
}

{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::~WordMultiVecComponent(a1 - 88);
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WordMultiVecComponent(v2, a1);
  return v2;
}

void sub_1DE4C4DD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C404CB298AFLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::CopyCompressed(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WordMultiVecComponent<kaldi::CuMatrixBase<float>>(v2, a1);
  return v2;
}

void sub_1DE4C4E38(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C404CB298AFLL);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::CopyCompressed(uint64_t a1)
{
  return kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::CopyCompressed(a1 - 88);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  uint64_t v6;
  const char *v7;
  int *v8;
  uint64_t v9;
  const char *v10;
  void **v11;
  BOOL v12;
  float *v13;
  void *v14;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  int *v24;
  BOOL v25;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  std::string *v37;
  void *v40;
  void *v41;
  int v42;
  BOOL v43;
  uint64_t v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  const char *v50;
  const char *v51;
  const char *v52;
  _QWORD *v53;
  _QWORD *v54;
  char **v55;
  int v56;
  uint64_t v57;
  const char *v58;
  kaldi::nnet1::Component *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  const void *v64;
  void *v65;
  void *v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  const void **v79;
  const void **v80;
  int v81;
  const void **v82;
  uint64_t v83;
  uint64_t v84;
  const void *v85;
  unsigned int *v86;
  unsigned int *v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  unsigned int v91;
  unsigned int *v92;
  uint64_t v93;
  _QWORD *v94;
  int inited;
  const char *v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  uint64_t **v101;
  unint64_t v102;
  uint64_t **v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  unsigned int v109;
  unint64_t v110;
  float v111;
  float v112;
  char *v114;
  float v115;
  float v116;
  float v117;
  uint64_t v119;
  _DWORD *v120;
  uint64_t v121;
  _DWORD *v122;
  _QWORD *v123;
  void *v124;
  uint64_t v125;
  _QWORD *v126;
  void **v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  char v131;
  std::vector<int> *v132;
  std::vector<int> *v133;
  std::vector<int> *v134;
  int *v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  _QWORD **v140;
  _QWORD *v141;
  unint64_t v142;
  void *__p;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  void *v147;
  void *v148[3];
  int v149;
  std::string v150;
  std::string v151;
  int v152;
  _DWORD *v153[2];

  v152 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v151);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 448), &v150);
  v131 = 0;
  v149 = -1;
  *(_BYTE *)(a1 + 460) = 1;
  memset(v148, 0, sizeof(v148));
  v133 = (std::vector<int> *)(a1 + 152);
  v134 = (std::vector<int> *)(a1 + 176);
  v135 = (int *)(a1 + 200);
  v8 = (int *)(a1 + 96);
  v132 = (std::vector<int> *)(a1 + 104);
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_161;
    kaldi::ReadToken(a2, 0, (uint64_t)v148, v6, v7);
    if ((SHIBYTE(v148[2]) & 0x80000000) == 0)
      break;
    v14 = v148[1];
    if (v148[1] == (void *)12)
    {
      if (*(_QWORD *)v148[0] == 0x536D6F646E61523CLL && *((_DWORD *)v148[0] + 2) == 1046766949)
      {
LABEL_88:
        v24 = &v149;
LABEL_123:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v24, v9, v10);
        goto LABEL_159;
      }
      v14 = v148[1];
    }
    else if (v148[1] == (void *)13
           && *(_QWORD *)v148[0] == 0x74536D617261503CLL
           && *(_QWORD *)((char *)v148[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_82:
      v13 = (float *)&v152;
LABEL_124:
      kaldi::ReadBasicType<float>(a2, 0, v13, v9, v10);
      goto LABEL_159;
    }
    if (v14 == (void *)19)
    {
      if (*(_QWORD *)v148[0] == 0x61725474696E493CLL
        && *((_QWORD *)v148[0] + 1) == 0x79546D726F66736ELL
        && *(_QWORD *)((char *)v148[0] + 11) == 0x3E657079546D726FLL)
      {
LABEL_125:
        v37 = &v151;
LABEL_127:
        kaldi::ReadToken(a2, 0, (uint64_t)v37, v9, v10);
        goto LABEL_159;
      }
      v14 = v148[1];
    }
    if (v14 == (void *)18)
    {
      if (*(_QWORD *)v148[0] == 0x6E6569646172473CLL
        && *((_QWORD *)v148[0] + 1) == 0x7079546D726F4E74
        && *((_WORD *)v148[0] + 8) == 15973)
      {
LABEL_126:
        v37 = &v150;
        goto LABEL_127;
      }
      v14 = v148[1];
    }
    if (v14 == (void *)9)
    {
      v21 = *(_QWORD *)v148[0] == 0x6461724778614D3CLL && *((_BYTE *)v148[0] + 8) == 62;
      v13 = (float *)(a1 + 452);
      if (v21)
        goto LABEL_124;
      v14 = v148[1];
    }
    if (v14 == (void *)15)
    {
      v22 = *(_QWORD *)v148[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v148[0] + 7) == 0x3E66656F43657461;
      v13 = (float *)(a1 + 456);
      if (v22)
        goto LABEL_124;
      v14 = v148[1];
    }
    if (v14 == (void *)11)
    {
      v23 = *(_QWORD *)v148[0] == 0x756F72476D754E3CLL && *(_QWORD *)((char *)v148[0] + 3) == 0x3E7370756F72476DLL;
      v24 = (int *)(a1 + 96);
      if (v23)
        goto LABEL_123;
      v14 = v148[1];
      if (v148[1] == (void *)11)
      {
        v25 = *(_QWORD *)v148[0] == 0x6C6261546D754E3CLL && *(_QWORD *)((char *)v148[0] + 3) == 0x3E73656C6261546DLL;
        v24 = (int *)(a1 + 200);
        if (v25)
          goto LABEL_123;
        if ((HIBYTE(v148[2]) & 0x80) == 0)
          goto LABEL_132;
      }
    }
    if (v14 == (void *)12)
    {
      if (*(_QWORD *)v148[0] == 0x69536261636F563CLL && *((_DWORD *)v148[0] + 2) == 1047750010)
      {
LABEL_156:
        __p = 0;
        v144 = 0;
        v145 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p, v9, v10);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v132, v52);
        goto LABEL_157;
      }
      v14 = v148[1];
    }
    if (v14 == (void *)10)
    {
      if (*(_QWORD *)v148[0] == 0x6D65744978614D3CLL && *((_WORD *)v148[0] + 4) == 15987)
      {
LABEL_154:
        __p = 0;
        v144 = 0;
        v145 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p, v9, v10);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, (std::vector<int> *)(a1 + 128), v50);
        goto LABEL_157;
      }
      goto LABEL_138;
    }
LABEL_139:
    if (v14 != (void *)17)
      goto LABEL_148;
    v11 = (void **)v148[0];
LABEL_141:
    v40 = *v11;
    v41 = v11[1];
    v42 = *((unsigned __int8 *)v11 + 16);
    v43 = v40 == (void *)0x69446465626D453CLL && v41 == (void *)0x736E6F69736E656DLL;
    if (!v43 || v42 != 62)
      goto LABEL_148;
    __p = 0;
    v144 = 0;
    v145 = 0;
    kaldi::ReadToken(a2, 0, (uint64_t)&__p, v9, v10);
    kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v133, v51);
LABEL_157:
    if (SHIBYTE(v145) < 0)
      operator delete(__p);
LABEL_159:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v11 = v148;
  switch(HIBYTE(v148[2]))
  {
    case 9:
LABEL_5:
      v12 = v148[0] == (void *)0x6461724778614D3CLL && LOBYTE(v148[1]) == 62;
      v13 = (float *)(a1 + 452);
      if (!v12)
        goto LABEL_148;
      goto LABEL_124;
    case 0xA:
      goto LABEL_133;
    case 0xB:
      goto LABEL_112;
    case 0xC:
      if (v148[0] != (void *)0x536D6F646E61523CLL || LODWORD(v148[1]) != 1046766949)
      {
        switch(HIBYTE(v148[2]))
        {
          case 9:
            goto LABEL_5;
          case 0xA:
            goto LABEL_133;
          case 0xB:
            goto LABEL_112;
          case 0xC:
            goto LABEL_128;
          default:
            goto LABEL_148;
        }
      }
      goto LABEL_88;
    case 0xD:
      if (v148[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v148 + 5) != (void *)0x3E7665646474536DLL)
        goto LABEL_148;
      goto LABEL_82;
    case 0xF:
LABEL_105:
      v34 = v148[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v148 + 7) == (void *)0x3E66656F43657461;
      v13 = (float *)(a1 + 456);
      if (v34)
        goto LABEL_124;
      if (HIBYTE(v148[2]) == 10)
        goto LABEL_133;
      if (HIBYTE(v148[2]) == 12)
      {
LABEL_128:
        if (v148[0] == (void *)0x69536261636F563CLL && LODWORD(v148[1]) == 1047750010)
          goto LABEL_156;
LABEL_132:
        if (HIBYTE(v148[2]) != 10)
          goto LABEL_148;
        goto LABEL_133;
      }
      if (HIBYTE(v148[2]) != 11)
        goto LABEL_148;
LABEL_112:
      v35 = v148[0] == (void *)0x756F72476D754E3CLL && *(void **)((char *)v148 + 3) == (void *)0x3E7370756F72476DLL;
      v24 = (int *)(a1 + 96);
      if (v35)
        goto LABEL_123;
      if (HIBYTE(v148[2]) == 10)
      {
LABEL_133:
        if (v148[0] == (void *)0x6D65744978614D3CLL && LOWORD(v148[1]) == 15987)
          goto LABEL_154;
        if ((HIBYTE(v148[2]) & 0x80) == 0)
          goto LABEL_148;
LABEL_138:
        v14 = v148[1];
        goto LABEL_139;
      }
      if (HIBYTE(v148[2]) == 11)
      {
        v36 = v148[0] == (void *)0x6C6261546D754E3CLL && *(void **)((char *)v148 + 3) == (void *)0x3E73656C6261546DLL;
        v24 = (int *)(a1 + 200);
        if (v36)
          goto LABEL_123;
      }
LABEL_148:
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v148, "<AssignedTable>"))
      {
        __p = 0;
        v144 = 0;
        v145 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p, v45, v46);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v134, v47);
        goto LABEL_157;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v148, "<InitializeToConcat>"))
      {
        v131 = 1;
        goto LABEL_159;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v148, "<UseTransform>"))
      {
        kaldi::ReadBasicType<BOOL>(a2, 0, (char *)(a1 + 460), v48, v49);
        goto LABEL_159;
      }
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v148, "</Component>"))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 271);
        v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
        if (SHIBYTE(v148[2]) >= 0)
          v127 = v148;
        else
          v127 = (void **)v148[0];
        if (SHIBYTE(v148[2]) >= 0)
          v128 = HIBYTE(v148[2]);
        else
          v128 = (uint64_t)v148[1];
        v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)v127, v128);
        v130 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)", a typo in config? ", 20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)"(NumGroups|VocabSizes|MaxDimensions|EmbedDimensions|LearnRateCoef|ParamStddev|RandomSeed|InitTransformType|GradientNormType|MaxGrad)", 132);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
LABEL_161:
      v53 = *(_QWORD **)(a1 + 256);
      v54 = *(_QWORD **)(a1 + 264);
      while (v53 != v54)
      {
        if (*v53)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)*v53 + 8))(*v53);
          *v53 = 0;
        }
        ++v53;
      }
      if (!*(_BYTE *)(a1 + 460))
        goto LABEL_210;
      v55 = (char **)(a1 + 256);
      if (*v8 >= 1)
      {
        v56 = 0;
        do
        {
          v136 = 0;
          v137 = 0;
          v138 = 0;
          LODWORD(v140) = 0;
          LODWORD(v153[0]) = 0;
          kaldi::ExpectToken(a2, 0, (kaldi *)"<FeatureTransform>");
          kaldi::ReadToken(a2, 0, (uint64_t)&v136, v57, v58);
          v59 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v136);
          kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v140, v60, v61);
          kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v153, v62, v63);
          v64 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v59, v140, LODWORD(v153[0]));
          if (!v64
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 293);
            v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"require an updatable component, you used ", 41);
            if (v138 >= 0)
              v124 = &v136;
            else
              v124 = v136;
            if (v138 >= 0)
              v125 = HIBYTE(v138);
            else
              v125 = v137;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)v124, v125);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
          }
          v66 = v65;
          (*(void (**)(void *, uint64_t *, kaldi::UniformRandomNumber *))(*(_QWORD *)v65 + 96))(v65, a2, a3);
          v68 = *(_QWORD **)(a1 + 264);
          v67 = *(_QWORD *)(a1 + 272);
          if ((unint64_t)v68 >= v67)
          {
            v70 = ((char *)v68 - *v55) >> 3;
            if ((unint64_t)(v70 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v71 = v67 - (_QWORD)*v55;
            v72 = v71 >> 2;
            if (v71 >> 2 <= (unint64_t)(v70 + 1))
              v72 = v70 + 1;
            if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
              v73 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v73 = v72;
            if (v73)
              v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 272, v73);
            else
              v74 = 0;
            v75 = &v74[8 * v70];
            *(_QWORD *)v75 = v66;
            v69 = v75 + 8;
            v77 = *(char **)(a1 + 256);
            v76 = *(char **)(a1 + 264);
            if (v76 != v77)
            {
              do
              {
                v78 = *((_QWORD *)v76 - 1);
                v76 -= 8;
                *((_QWORD *)v75 - 1) = v78;
                v75 -= 8;
              }
              while (v76 != v77);
              v76 = *v55;
            }
            *(_QWORD *)(a1 + 256) = v75;
            *(_QWORD *)(a1 + 264) = v69;
            *(_QWORD *)(a1 + 272) = &v74[8 * v73];
            if (v76)
              operator delete(v76);
          }
          else
          {
            *v68 = v66;
            v69 = v68 + 1;
          }
          *(_QWORD *)(a1 + 264) = v69;
          if (SHIBYTE(v138) < 0)
            operator delete(v136);
          ++v56;
        }
        while (v56 < *v8);
      }
      if ((v131 & 1) == 0)
        goto LABEL_210;
      v79 = *(const void ***)(a1 + 256);
      v80 = *(const void ***)(a1 + 264);
      if (v79 == v80)
      {
        if (!*((_DWORD *)*v79 + 3))
          goto LABEL_208;
LABEL_205:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 304);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"dimension mismatch, cannot initialize to concatenation, expected dim is ", 72);
        v94 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)" actual dim is ", 15);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      v81 = 0;
      v82 = *(const void ***)(a1 + 256);
      do
      {
        v83 = (uint64_t)*v82++;
        v81 += *(_DWORD *)(v83 + 8);
      }
      while (v82 != v80);
      if (v81 != *((_DWORD *)*v79 + 3))
        goto LABEL_205;
      if (v79 == v80)
      {
        LODWORD(v84) = 0;
      }
      else
      {
        v84 = 0;
        do
        {
          v85 = *v79;
          if (!*v79)
          {
LABEL_265:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 326);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"cannot initialize to concatenation for this transform", 53);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
          }
          if (v86)
          {
            v87 = v86;
            kaldi::Matrix<float>::Matrix((uint64_t)&__p, v86[3], v86[2], 0, 0);
            v88 = v87[3];
            v140 = 0;
            v141 = 0;
            v142 = 0;
            kaldi::Vector<float>::Resize((void **)&v140, v88, 0, v89, v90);
            kaldi::SubMatrix<float>::SubMatrix(&v136, &__p, v84, v87[2], 0, v144);
            kaldi::MatrixBase<float>::AddToDiag((uint64_t)&v136, 1.0);
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v136);
            kaldi::nnet1::AffineTransform::SetLinearity((kaldi::nnet1::AffineTransform *)v87, (uint64_t)&__p);
            kaldi::nnet1::AffineTransform::SetBias((kaldi::nnet1::AffineTransform *)v87, (uint64_t)&v140);
            v91 = v87[2];
            kaldi::Vector<float>::Destroy((uint64_t)&v140);
          }
          else
          {
            if (!v92)
              goto LABEL_265;
            v93 = (uint64_t)v92;
            kaldi::Matrix<float>::Matrix((uint64_t)&__p, v92[3], v92[2], 0, 0);
            kaldi::SubMatrix<float>::SubMatrix(&v136, &__p, v84, *(unsigned int *)(v93 + 8), 0, v144);
            kaldi::MatrixBase<float>::AddToDiag((uint64_t)&v136, 1.0);
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v136);
            kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetLinearity(v93, (uint64_t)&__p);
            v91 = *(_DWORD *)(v93 + 8);
          }
          kaldi::Matrix<float>::~Matrix((uint64_t)&__p);
          v84 = v91 + v84;
          ++v79;
        }
        while (v79 != v80);
      }
      if ((_DWORD)v84 != v81)
        kaldi::KaldiAssertFailure_((kaldi *)"InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x14B, "shift == total_dim", v7);
LABEL_208:
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 332);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"initialized the transform for concatenation", 43);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
      }
LABEL_210:
      inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v151);
      *(_DWORD *)(a1 + 448) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v150);
      if (!inited)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 339);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"it doesn't make sense to initialize the embedding table as an identify matrix", 77);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      v141 = 0;
      v142 = 0;
      v140 = &v141;
      if (*v8 < 1)
      {
        v102 = 0;
      }
      else
      {
        v97 = 0;
        do
        {
          LODWORD(v136) = 0;
          v98 = v134->__begin_[v97];
          LODWORD(v136) = v98;
          if (v98 < 0 || v98 >= *v135)
            kaldi::KaldiAssertFailure_((kaldi *)"InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x159, "table_idx >= 0 && table_idx < num_tables_", v96);
          v99 = v132->__begin_[v97];
          v100 = v133->__begin_[v97];
          __p = &v136;
          v101 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v140, (int *)&v136, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
          *((_DWORD *)v101 + 8) = v99;
          *((_DWORD *)v101 + 9) = v100;
          ++v97;
        }
        while (v97 < *v8);
        v102 = v142;
      }
      if (v102 != *v135)
        kaldi::KaldiAssertFailure_((kaldi *)"InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x15C, "table_dims.size() == num_tables_", v96);
      std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 208, v102);
      if (v149 >= 1)
        kaldi::UniformRandomNumber::SetRandomSeeds(a3, v149);
      kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)&__p, a3);
      v139 = 0;
      if (*v135 >= 1)
      {
        while (1)
        {
          v153[0] = &v139;
          v103 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v140, &v139, (uint64_t)&std::piecewise_construct, v153);
          v104 = *((unsigned int *)v103 + 8);
          v105 = *((unsigned int *)v103 + 9);
          kaldi::Matrix<float>::Matrix((uint64_t)&v136, v104, v105, 0, 0);
          if ((int)v104 >= 1)
            break;
LABEL_241:
          kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ConstructMatrixObject<kaldi::Matrix<float>>((uint64_t)&v136, (uint64_t *)v153);
          v119 = *(_QWORD *)(a1 + 208);
          v120 = v153[0];
          v153[0] = 0;
          v121 = *(_QWORD *)(v119 + 8 * v139);
          *(_QWORD *)(v119 + 8 * v139) = v120;
          if (v121)
            (*(void (**)(uint64_t))(*(_QWORD *)v121 + 24))(v121);
          v122 = v153[0];
          v153[0] = 0;
          if (v122)
            (*(void (**)(_DWORD *))(*(_QWORD *)v122 + 24))(v122);
          kaldi::Matrix<float>::~Matrix((uint64_t)&v136);
          if (++v139 >= *v135)
            goto LABEL_246;
        }
        v109 = 0;
        while ((int)v105 < 1)
        {
LABEL_240:
          if (++v109 == (_DWORD)v104)
            goto LABEL_241;
        }
        v110 = 0;
        while (2)
        {
          if (inited == 2)
          {
            v116 = *(float *)&v152;
            kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)&__p, 0, v106, v107, v108);
            if (HIDWORD(v137) <= v109 || v110 >= v137)
LABEL_255:
              kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v108);
            v114 = (char *)v136 + 4 * (int)(v109 * v138);
            v115 = v116 * v117;
LABEL_238:
            *(float *)&v114[4 * v110] = v115;
          }
          else if (inited == 1)
          {
            v111 = *(float *)&v152;
            v112 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v106, v107, v108);
            if (HIDWORD(v137) <= v109 || v110 >= v137)
              goto LABEL_255;
            v114 = (char *)v136 + 4 * (int)(v109 * v138);
            v115 = (v112 + -0.5) * (float)(v111 + v111);
            goto LABEL_238;
          }
          if (v105 == ++v110)
            goto LABEL_240;
          continue;
        }
      }
LABEL_246:
      kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
      if (v146)
      {
        v147 = v146;
        operator delete(v146);
      }
      v136 = &v145;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
      std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy((uint64_t)&v140, v141);
      if (SHIBYTE(v148[2]) < 0)
        operator delete(v148[0]);
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v150.__r_.__value_.__l.__data_);
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v151.__r_.__value_.__l.__data_);
      return;
    case 0x11:
      goto LABEL_141;
    case 0x12:
LABEL_97:
      if (v148[0] != (void *)0x6E6569646172473CLL
        || v148[1] != (void *)0x7079546D726F4E74
        || LOWORD(v148[2]) != 15973)
      {
        v11 = v148;
        switch(HIBYTE(v148[2]))
        {
          case 9:
            goto LABEL_5;
          case 0xA:
            goto LABEL_133;
          case 0xB:
            goto LABEL_112;
          case 0xC:
            goto LABEL_128;
          case 0xF:
            goto LABEL_105;
          case 0x11:
            goto LABEL_141;
          default:
            goto LABEL_148;
        }
      }
      goto LABEL_126;
    case 0x13:
      if (v148[0] != (void *)0x61725474696E493CLL
        || v148[1] != (void *)0x79546D726F66736ELL
        || *(void **)((char *)&v148[1] + 3) != (void *)0x3E657079546D726FLL)
      {
        v11 = v148;
        switch(HIBYTE(v148[2]))
        {
          case 9:
            goto LABEL_5;
          case 0xA:
            goto LABEL_133;
          case 0xB:
            goto LABEL_112;
          case 0xC:
            goto LABEL_128;
          case 0xF:
            goto LABEL_105;
          case 0x11:
            goto LABEL_141;
          case 0x12:
            goto LABEL_97;
          default:
            goto LABEL_148;
        }
      }
      goto LABEL_125;
    default:
      goto LABEL_148;
  }
}

void sub_1DE4C60F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,_QWORD *a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  uint64_t v32;

  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }
  a17 = &a28;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy((uint64_t)&a23, a24);
  if (*(char *)(v32 - 177) < 0)
    operator delete(*(void **)(v32 - 200));
  if (*(char *)(v32 - 145) < 0)
    operator delete(*(void **)(v32 - 168));
  if (*(char *)(v32 - 121) < 0)
    operator delete(*(void **)(v32 - 144));
  _Unwind_Resume(a1);
}

void sub_1DE4C610C()
{
  JUMPOUT(0x1DE4C6168);
}

void sub_1DE4C6114(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  JUMPOUT(0x1DE4C6174);
}

void sub_1DE4C6138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  JUMPOUT(0x1DE4C6144);
}

unsigned int *kaldi::nnet1::AffineTransform::SetLinearity(kaldi::nnet1::AffineTransform *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  int v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;

  v4 = kaldi::MatrixBase<float>::NumRows(a2);
  if (v4 != *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity(a1) + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"SetLinearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x26A, "linearity.NumRows() == Linearity().NumRows()", v5);
  v6 = kaldi::MatrixBase<float>::NumCols(a2);
  if (v6 != *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity(a1) + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"SetLinearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x26B, "linearity.NumCols() == Linearity().NumCols()", v7);
  v8 = kaldi::nnet1::AffineTransform::Linearity(a1);
  return kaldi::CuMatrixBase<float>::CopyFromMat(v8, a2, 111, v9, v10);
}

_DWORD *kaldi::nnet1::AffineTransform::SetBias(kaldi::nnet1::AffineTransform *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != *(_DWORD *)(kaldi::nnet1::AffineTransform::Bias(a1) + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"SetBias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x25F, "bias.Dim() == Bias().Dim()", v5);
  v6 = (_DWORD *)kaldi::nnet1::AffineTransform::Bias(a1);
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v6, a2, v7, v8, v9);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ConstructMatrixObject<kaldi::Matrix<float>>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = kaldi::CuMatrix<float>::CuMatrix<float>(v4, a1, 111, 0);
  *a2 = v4;
  return result;
}

void sub_1DE4C6324(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD v43[34];

  if (!*(_BYTE *)(result + 544))
  {
    v1 = *(unsigned int *)(result + 96);
    if ((int)v1 <= 0)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 503);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"must have at least one group, you used ", 39);
      std::ostream::operator<<();
    }
    else
    {
      v2 = *(unsigned int *)(result + 200);
      if ((int)v2 <= 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 506);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"must have at least one embedding table, you used ", 49);
        std::ostream::operator<<();
      }
      else if (v1 < v2)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 509);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are only ", 15);
        v31 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" groups, but you set ", 21);
        v32 = (_QWORD *)std::ostream::operator<<();
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v32, " embedding tables");
      }
      else
      {
        v3 = *(_QWORD *)(result + 104);
        v4 = (*(_QWORD *)(result + 112) - v3) >> 2;
        if (v4 == v1)
        {
          v5 = *(_QWORD *)(result + 128);
          if (v4 == (*(_QWORD *)(result + 136) - v5) >> 2)
          {
            v6 = *(_QWORD *)(result + 152);
            if (v4 == (*(_QWORD *)(result + 160) - v6) >> 2)
            {
              v7 = *(_QWORD *)(result + 176);
              if (v4 == (*(_QWORD *)(result + 184) - v7) >> 2)
              {
                v8 = *(_QWORD *)(result + 208);
                if (v2 == (*(_QWORD *)(result + 216) - v8) >> 3)
                {
                  if (*(_BYTE *)(result + 460)
                    && v4 != (uint64_t)(*(_QWORD *)(result + 264) - *(_QWORD *)(result + 256)) >> 3)
                  {
                    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 528);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
                    v40 = (_QWORD *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" groups, but the number of feature transforms is ", 49);
                    std::ostream::operator<<();
                  }
                  else
                  {
                    v9 = 0;
                    v10 = 0;
                    v11 = 0;
                    do
                    {
                      v12 = *(unsigned int *)(v7 + 4 * v9);
                      if ((v12 & 0x80000000) != 0 || (int)v12 >= (int)v2)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 537);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v22 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"-th group has assigned table index ", 35);
                        v23 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" , the number of tables is ", 27);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      v13 = *(_DWORD *)(v3 + 4 * v9);
                      if (v13 <= 0)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 542);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v25 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"-th group has invalid vocab size ", 33);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      v14 = *(_DWORD *)(v5 + 4 * v9);
                      if (v14 <= 0)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 545);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v26 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"-th group has invalid max item value ", 37);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      v15 = *(_DWORD *)(v6 + 4 * v9);
                      if (v15 <= 0)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 548);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v24 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"-th group has invalid embedding dimension value ", 48);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      v16 = *(_QWORD *)(v8 + 8 * v12);
                      if (*(_DWORD *)(v16 + 20) != v13)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 553);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v20 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"-th group has mismatched embedding table and vocab size ", 56);
                        v21 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" vs ", 4);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      if (*(_DWORD *)(v16 + 16) != v15)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 557);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v18 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"-th group has mismatched embedding table and embedding dim ", 59);
                        v19 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" vs ", 4);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      if (*(_BYTE *)(result + 460))
                      {
                        v17 = *(_QWORD *)(*(_QWORD *)(result + 256) + 8 * v9);
                        if (v15 != *(_DWORD *)(v17 + 8))
                        {
                          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 561);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                          v29 = (_QWORD *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"-th group has mismatched embedding table and feature transform ", 63);
                          v30 = (_QWORD *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" vs ", 4);
                          std::ostream::operator<<();
                          goto LABEL_35;
                        }
                        if (*(_DWORD *)(result + 12) != *(_DWORD *)(v17 + 12))
                        {
                          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 565);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                          v27 = (_QWORD *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"-th group has feature transform output dim ", 43);
                          v28 = (_QWORD *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" does not match component output dim ", 37);
                          std::ostream::operator<<();
                          goto LABEL_35;
                        }
                      }
                      v10 += v15;
                      v11 += v14;
                      ++v9;
                    }
                    while (v4 != v9);
                    if (*(_DWORD *)(result + 8) == v11)
                    {
                      if (*(_BYTE *)(result + 460) || v10 == *(_DWORD *)(result + 12))
                      {
                        *(_BYTE *)(result + 544) = 1;
                        return result;
                      }
                      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 575);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Total embedding size of ", 24);
                      v41 = (_QWORD *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" doesn't match the component output size of ", 44);
                      v42 = (_QWORD *)std::ostream::operator<<();
                      std::operator<<[abi:ne180100]<std::char_traits<char>>(v42, " when transforms are not used");
                    }
                    else
                    {
                      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 571);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"input dim of the component is ", 30);
                      v39 = (_QWORD *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" , while the input dim defined in max items is ", 47);
                      std::ostream::operator<<();
                    }
                  }
                }
                else
                {
                  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 524);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the actual number of embedding tables is ", 41);
                  v38 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" and different than ", 20);
                  std::ostream::operator<<();
                }
              }
              else
              {
                kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 521);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
                v36 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" groups, but ", 13);
                v37 = (_QWORD *)std::ostream::operator<<();
                std::operator<<[abi:ne180100]<std::char_traits<char>>(v37, " groups have assigned tables");
              }
            }
            else
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 518);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
              v35 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" groups, but the embedding dim list size is ", 44);
              std::ostream::operator<<();
            }
          }
          else
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 515);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
            v34 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" groups, but the max item list size is ", 39);
            std::ostream::operator<<();
          }
        }
        else
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 512);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
          v33 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" groups, but the number vocab list size is ", 43);
          std::ostream::operator<<();
        }
      }
    }
LABEL_35:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43);
  }
  return result;
}

void sub_1DE4C6CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  float *v9;
  int *v10;
  int *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  BOOL v30;
  float *v31;
  BOOL v32;
  BOOL v35;
  const char *v36;
  const char *v37;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  const char *v47;
  const char *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  int v55;
  char **v56;
  const void *v57;
  void *v58;
  void *v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  __int128 *v73;
  uint64_t v74;
  _QWORD *v75;
  std::vector<int> *v76;
  std::vector<int> *v77;
  float *v78;
  std::vector<int> *v79;
  std::vector<int> *v80;
  void *__p;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;

  v84 = 0uLL;
  v85 = 0;
  v8 = (char *)(a1 + 460);
  *(_BYTE *)(a1 + 460) = 1;
  v9 = (float *)(a1 + 452);
  v77 = (std::vector<int> *)(a1 + 176);
  v78 = (float *)(a1 + 456);
  v76 = (std::vector<int> *)(a1 + 152);
  v79 = (std::vector<int> *)(a1 + 104);
  v80 = (std::vector<int> *)(a1 + 128);
  v10 = (int *)(a1 + 200);
  v11 = (int *)(a1 + 96);
  while (kaldi::Peek(a2, a3) == 60)
  {
    kaldi::ReadToken(a2, a3, (uint64_t)&v84, v12, v13);
    if (SHIBYTE(v85) < 0)
    {
      v20 = *((_QWORD *)&v84 + 1);
      if (*((_QWORD *)&v84 + 1) != 11)
        goto LABEL_25;
      v21 = *(_QWORD *)v84 == 0x756F72476D754E3CLL && *(_QWORD *)(v84 + 3) == 0x3E7370756F72476DLL;
      v18 = (uint64_t)v11;
      if (v21
        || (*(_QWORD *)v84 == 0x6C6261546D754E3CLL ? (v22 = *(_QWORD *)(v84 + 3) == 0x3E73656C6261546DLL) : (v22 = 0),
            v18 = (uint64_t)v10,
            v22))
      {
LABEL_75:
        kaldi::ReadBasicType<int>(a2, a3, v18, v14, v15);
      }
      else
      {
        v20 = *((_QWORD *)&v84 + 1);
LABEL_25:
        if (v20 == 12)
        {
          if (*(_QWORD *)v84 == 0x69536261636F563CLL && *(_DWORD *)(v84 + 8) == 1047750010)
          {
LABEL_94:
            __p = 0;
            v82 = 0;
            v83 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v79, v37);
            goto LABEL_137;
          }
          v20 = *((_QWORD *)&v84 + 1);
        }
        if (v20 != 10)
          goto LABEL_37;
        if (*(_QWORD *)v84 == 0x6D65744978614D3CLL && *(_WORD *)(v84 + 8) == 15987)
        {
LABEL_93:
          __p = 0;
          v82 = 0;
          v83 = 0;
          kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
          kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v80, v36);
LABEL_137:
          if (SHIBYTE(v83) < 0)
            operator delete(__p);
        }
        else
        {
          v20 = *((_QWORD *)&v84 + 1);
LABEL_37:
          if (v20 == 17)
          {
            if (*(_QWORD *)v84 == 0x69446465626D453CLL
              && *(_QWORD *)(v84 + 8) == 0x736E6F69736E656DLL
              && *(_BYTE *)(v84 + 16) == 62)
            {
LABEL_135:
              __p = 0;
              v82 = 0;
              v83 = 0;
              kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
              kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v76, v48);
              goto LABEL_137;
            }
            v20 = *((_QWORD *)&v84 + 1);
          }
          if (v20 != 15)
            goto LABEL_52;
          if (*(_QWORD *)v84 == 0x656E67697373413CLL && *(_QWORD *)(v84 + 7) == 0x3E656C6261546465)
          {
LABEL_134:
            __p = 0;
            v82 = 0;
            v83 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v77, v47);
            goto LABEL_137;
          }
          v20 = *((_QWORD *)&v84 + 1);
LABEL_52:
          if (v20 != 18)
            goto LABEL_61;
          if (*(_QWORD *)v84 == 0x6E6569646172473CLL
            && *(_QWORD *)(v84 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v84 + 16) == 15973)
          {
LABEL_136:
            __p = 0;
            v82 = 0;
            v83 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
            *(_DWORD *)(a1 + 448) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&__p);
            goto LABEL_137;
          }
          v20 = *((_QWORD *)&v84 + 1);
LABEL_61:
          if (v20 == 9)
          {
            v30 = *(_QWORD *)v84 == 0x6461724778614D3CLL && *(_BYTE *)(v84 + 8) == 62;
            v31 = v9;
            if (v30)
              goto LABEL_92;
            v20 = *((_QWORD *)&v84 + 1);
          }
          if (v20 == 15)
          {
            v32 = *(_QWORD *)v84 == 0x61526E7261654C3CLL && *(_QWORD *)(v84 + 7) == 0x3E66656F43657461;
            v31 = v78;
            if (v32)
              goto LABEL_92;
            v20 = *((_QWORD *)&v84 + 1);
          }
          if (v20 != 14)
            goto LABEL_175;
          v16 = (uint64_t *)v84;
LABEL_128:
          v44 = *v16;
          v45 = *(uint64_t *)((char *)v16 + 6);
          if (v44 != 0x6E6172546573553CLL || v45 != 0x3E6D726F66736E61)
            goto LABEL_175;
          kaldi::ReadBasicType<BOOL>(a2, a3, v8, v14, v15);
        }
      }
    }
    else
    {
      v16 = (uint64_t *)&v84;
      switch(HIBYTE(v85))
      {
        case 9:
          goto LABEL_87;
        case 0xA:
          goto LABEL_82;
        case 0xB:
          v17 = (_QWORD)v84 == 0x756F72476D754E3CLL && *(_QWORD *)((char *)&v84 + 3) == 0x3E7370756F72476DLL;
          v18 = (uint64_t)v11;
          if (!v17)
          {
            v19 = (_QWORD)v84 == 0x6C6261546D754E3CLL && *(_QWORD *)((char *)&v84 + 3) == 0x3E73656C6261546DLL;
            v18 = (uint64_t)v10;
            if (!v19)
              goto LABEL_80;
          }
          goto LABEL_75;
        case 0xC:
          if ((_QWORD)v84 == 0x69536261636F563CLL && DWORD2(v84) == 1047750010)
            goto LABEL_94;
LABEL_80:
          if (HIBYTE(v85) == 9)
            goto LABEL_87;
          if (HIBYTE(v85) != 10)
            goto LABEL_175;
LABEL_82:
          if ((_QWORD)v84 == 0x6D65744978614D3CLL && WORD4(v84) == 15987)
            goto LABEL_93;
LABEL_86:
          if (HIBYTE(v85) == 9)
            goto LABEL_87;
          goto LABEL_175;
        case 0xE:
          goto LABEL_128;
        case 0xF:
          goto LABEL_115;
        case 0x11:
          if ((_QWORD)v84 == 0x69446465626D453CLL
            && *((_QWORD *)&v84 + 1) == 0x736E6F69736E656DLL
            && v85 == 62)
          {
            goto LABEL_135;
          }
          if (HIBYTE(v85) == 9)
            goto LABEL_87;
          if (HIBYTE(v85) == 14)
            goto LABEL_127;
          if (HIBYTE(v85) != 15)
            goto LABEL_175;
LABEL_115:
          if ((_QWORD)v84 == 0x656E67697373413CLL && *(_QWORD *)((char *)&v84 + 7) == 0x3E656C6261546465)
            goto LABEL_134;
          switch(HIBYTE(v85))
          {
            case 9u:
LABEL_87:
              v35 = (_QWORD)v84 == 0x6461724778614D3CLL && BYTE8(v84) == 62;
              v31 = v9;
              if (!v35)
                goto LABEL_175;
              break;
            case 0xEu:
LABEL_127:
              v16 = (uint64_t *)&v84;
              goto LABEL_128;
            case 0xFu:
LABEL_122:
              v43 = (_QWORD)v84 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v84 + 7) == 0x3E66656F43657461;
              v31 = v78;
              if (!v43)
              {
LABEL_175:
                kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 408);
                v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
                if (v85 >= 0)
                  v73 = &v84;
                else
                  v73 = (__int128 *)v84;
                if (v85 >= 0)
                  v74 = HIBYTE(v85);
                else
                  v74 = *((_QWORD *)&v84 + 1);
                v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v73, v74);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)", a typo in config? (NumGroups|VocabSizes|MaxDimensions|EmbedDimensions|LearnRateCoef)", 86);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
              }
              break;
            default:
              goto LABEL_175;
          }
          return;
        case 0x12:
          if ((_QWORD)v84 == 0x6E6569646172473CLL
            && *((_QWORD *)&v84 + 1) == 0x7079546D726F4E74
            && (unsigned __int16)v85 == 15973)
          {
            goto LABEL_136;
          }
          if (HIBYTE(v85) == 15)
            goto LABEL_122;
          if (HIBYTE(v85) == 14)
            goto LABEL_127;
          goto LABEL_86;
        default:
          goto LABEL_175;
      }
LABEL_92:
      kaldi::ReadBasicType<float>(a2, a3, v31, v14, v15);
    }
  }
  v49 = (_QWORD *)(a1 + 208);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 208, *(int *)(a1 + 200));
  if (*v10 >= 1)
  {
    v50 = 0;
    do
    {
      v51 = operator new();
      *(_OWORD *)(v51 + 24) = 0u;
      *(_OWORD *)(v51 + 8) = 0u;
      *(_QWORD *)v51 = &unk_1EA92DFA8;
      *(_BYTE *)(v51 + 40) = 0;
      v52 = *(_QWORD *)(*v49 + 8 * v50);
      *(_QWORD *)(*v49 + 8 * v50) = v51;
      if (v52)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52);
      (***(void (****)(_QWORD, uint64_t *, uint64_t, uint64_t))(*v49 + 8 * v50))(*(_QWORD *)(*v49 + 8 * v50), a2, a3, a4);
      ++v50;
    }
    while (v50 < *v10);
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
  v53 = *(_QWORD **)(a1 + 256);
  v54 = *(_QWORD **)(a1 + 264);
  while (v53 != v54)
  {
    if (*v53)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v53 + 8))(*v53);
      *v53 = 0;
    }
    ++v53;
  }
  if (*v8 && *v11 >= 1)
  {
    v55 = 0;
    v56 = (char **)(a1 + 256);
    do
    {
      kaldi::ExpectToken(a2, a3, (kaldi *)"<FeatureTransform>");
      v57 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
      if (!v57
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 425);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"failed to read feature transform", 32);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      v59 = v58;
      kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
      v61 = *(_QWORD **)(a1 + 264);
      v60 = *(_QWORD *)(a1 + 272);
      if ((unint64_t)v61 >= v60)
      {
        v63 = ((char *)v61 - *v56) >> 3;
        if ((unint64_t)(v63 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v64 = v60 - (_QWORD)*v56;
        v65 = v64 >> 2;
        if (v64 >> 2 <= (unint64_t)(v63 + 1))
          v65 = v63 + 1;
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
          v66 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v66 = v65;
        if (v66)
          v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 272, v66);
        else
          v67 = 0;
        v68 = &v67[8 * v63];
        *(_QWORD *)v68 = v59;
        v62 = v68 + 8;
        v70 = *(char **)(a1 + 256);
        v69 = *(char **)(a1 + 264);
        if (v69 != v70)
        {
          do
          {
            v71 = *((_QWORD *)v69 - 1);
            v69 -= 8;
            *((_QWORD *)v68 - 1) = v71;
            v68 -= 8;
          }
          while (v69 != v70);
          v69 = *v56;
        }
        *(_QWORD *)(a1 + 256) = v68;
        *(_QWORD *)(a1 + 264) = v62;
        *(_QWORD *)(a1 + 272) = &v67[8 * v66];
        if (v69)
          operator delete(v69);
      }
      else
      {
        *v61 = v59;
        v62 = v61 + 1;
      }
      *(_QWORD *)(a1 + 264) = v62;
      ++v55;
    }
    while (v55 < *(_DWORD *)(a1 + 96));
  }
  *(_BYTE *)(a1 + 16) = 0;
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  if (SHIBYTE(v85) < 0)
    operator delete((void *)v84);
}

void sub_1DE4C777C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  std::string __p;
  void *v37[2];
  uint64_t v38;

  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  kaldi::WriteToken(a2, a3, (kaldi *)"<NumGroups>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<NumTables>", v8, v9);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<VocabSizes>", v10, v11);
  kaldi::JoinVectorToString<int>((_QWORD *)(a1 + 104), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v12, v13);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxItems>", v14, v15);
  kaldi::JoinVectorToString<int>((_QWORD *)(a1 + 128), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v16, v17);
  kaldi::WriteToken(a2, a3, (kaldi *)"<EmbedDimensions>", v18, v19);
  kaldi::JoinVectorToString<int>((_QWORD *)(a1 + 152), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v20, v21);
  kaldi::WriteToken(a2, a3, (kaldi *)"<AssignedTable>", v22, v23);
  kaldi::JoinVectorToString<int>((_QWORD *)(a1 + 176), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v24, v25);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v26, v27);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v28, v29);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 448), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v30, v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v32, v33);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<UseTransform>", v34, v35);
  kaldi::WriteBasicType<BOOL>(a2, (char)a3, *(unsigned __int8 *)(a1 + 460));
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
}

void sub_1DE4C79B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::JoinVectorToString<int>(_QWORD *a1, const char *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[11];
  char v15;
  uint64_t v16;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v13);
  if (a1[1] != *a1)
  {
    v6 = 0;
    do
    {
      std::ostream::operator<<();
      ++v6;
      v7 = a1[1] - *a1;
      if (v6 < v7 >> 2)
      {
        v8 = strlen(a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)a2, v8);
        v7 = a1[1] - *a1;
      }
    }
    while (v6 < v7 >> 2);
  }
  std::stringbuf::str();
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = v11;
  *(_QWORD *)(a3 + 16) = v12;
  v13[0] = *MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v14[0] = v9;
  v14[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v15 < 0)
    operator delete((void *)v14[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1DF0ECF6C](&v16);
}

void sub_1DE4C7B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WriteData(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4)
{
  uint64_t v8;
  const char *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  const char *v15;
  uint64_t *v16;
  uint64_t *i;
  uint64_t v18;
  uint64_t v19;
  const char *v20;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)a1 + 168))(a1, a2, a3);
  v10 = *(uint64_t **)(a1 + 208);
  v11 = *(uint64_t **)(a1 + 216);
  while (v10 != v11)
  {
    v12 = *v10++;
    kaldi::CuMatrixBase<float>::Write(v12, a2, (int)a3, a4);
  }
  result = kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v8, v9);
  if (*(_BYTE *)(a1 + 460))
  {
    v16 = *(uint64_t **)(a1 + 256);
    for (i = *(uint64_t **)(a1 + 264); v16 != i; result = kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v19, v20))
    {
      kaldi::WriteToken(a2, a3, (kaldi *)"<FeatureTransform>", v14, v15);
      v18 = *v16++;
      kaldi::nnet1::Component::Write(v18, a2, (uint64_t)a3, a4);
    }
  }
  return result;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::NumParams(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  v1 = (uint64_t *)a1[26];
  v2 = (uint64_t *)a1[27];
  if (v1 == v2)
  {
    v3 = 0;
  }
  else
  {
    LODWORD(v3) = 0;
    do
    {
      v4 = *v1++;
      v3 = (v3 + *(_DWORD *)(v4 + 16) * *(_DWORD *)(v4 + 20));
    }
    while (v1 != v2);
  }
  v5 = (uint64_t *)a1[32];
  v6 = (uint64_t *)a1[33];
  while (v5 != v6)
  {
    v7 = *v5++;
    v3 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7) + v3;
  }
  return v3;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::GetParams(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 1, v5, v6);
  v10 = (uint64_t *)a1[26];
  v11 = (uint64_t *)a1[27];
  if (v10 == v11)
  {
    v15 = 0;
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = *v10;
      v14 = *(_DWORD *)(*v10 + 16) * *(_DWORD *)(*v10 + 20);
      v25 = 0;
      v26 = 0;
      v15 = v14 + v12;
      if ((v14 + v12) > *(_DWORD *)(a2 + 8))
        kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
      v24 = *(_QWORD *)a2 + 4 * v12;
      LODWORD(v25) = v14;
      kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v24, v13, v7, v8, v9);
      ++v10;
      v12 = v15;
    }
    while (v10 != v11);
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v17 = (_QWORD *)a1[32];
  v16 = (_QWORD *)a1[33];
  while (v17 != v16)
  {
    (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*v17 + 184))(*v17, &v24);
    v22 = 0;
    v23 = 0;
    v21 = 0;
    if ((v25 + v15) > *(_DWORD *)(a2 + 8))
      kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v20);
    v21 = *(_QWORD *)a2 + 4 * v15;
    LODWORD(v22) = v25;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v21, (uint64_t)&v24, v18, v19, v20);
    v15 += v25;
    ++v17;
  }
  if (v15 != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"GetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x27E, "shift == wei_copy->Dim()", v9);
  kaldi::Vector<float>::Destroy((uint64_t)&v24);
}

void sub_1DE4C7E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void **kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::SetParams(_QWORD *a1, uint64_t a2)
{
  int v4;
  void **result;
  const char *v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check((uint64_t)a1);
  v4 = *(_DWORD *)(a2 + 8);
  result = (void **)(*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  if (v4 != (_DWORD)result)
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x284, "wei_src.Dim() == NumParams()", v6);
  v7 = (uint64_t *)a1[26];
  v8 = (uint64_t *)a1[27];
  if (v7 != v8)
  {
    v9 = 0;
    while (1)
    {
      v10 = *v7;
      v11 = *(_DWORD *)(*v7 + 16) * *(_DWORD *)(*v7 + 20);
      v19 = 0;
      v20 = 0;
      v12 = v11 + v9;
      if ((v11 + v9) > *(_DWORD *)(a2 + 8))
        break;
      v18 = (char *)(*(_QWORD *)a2 + 4 * v9);
      LODWORD(v19) = v11;
      result = kaldi::CuMatrixBase<float>::CopyRowsFromVec(v10, &v18);
      ++v7;
      v9 = v12;
      if (v7 == v8)
        goto LABEL_8;
    }
LABEL_15:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v6);
  }
  v12 = 0;
LABEL_8:
  v14 = (_QWORD *)a1[32];
  v13 = (_QWORD *)a1[33];
  if (v14 != v13)
  {
    while (1)
    {
      v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v14 + 176))(*v14);
      v16 = *v14;
      v19 = 0;
      v20 = 0;
      v17 = v15 + v12;
      if ((v15 + v12) > *(_DWORD *)(a2 + 8))
        goto LABEL_15;
      v18 = (char *)(*(_QWORD *)a2 + 4 * v12);
      LODWORD(v19) = v15;
      result = (void **)(*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v16 + 192))(v16, &v18);
      ++v14;
      v12 = v17;
      if (v14 == v13)
        goto LABEL_13;
    }
  }
  v17 = v12;
LABEL_13:
  if (v17 != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x290, "shift == wei_src.Dim()", v6);
  return result;
}

float kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::SumParams(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t *v6;
  uint64_t *v7;
  float v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;

  v6 = (uint64_t *)a1[26];
  v7 = (uint64_t *)a1[27];
  v8 = 0.0;
  while (v6 != v7)
  {
    v9 = *v6++;
    v8 = v8 + kaldi::CuMatrixBase<float>::Sum(v9, a2, a3, a4, a5);
  }
  v11 = (uint64_t *)a1[32];
  v10 = (uint64_t *)a1[33];
  while (v11 != v10)
  {
    v12 = *v11++;
    v8 = v8 + (*(float (**)(uint64_t))(*(_QWORD *)v12 + 208))(v12);
  }
  return v8;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Info(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  _QWORD *v4;
  void *p_p;
  uint64_t v6;
  uint64_t v7;
  uint64_t j;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  void *__p;
  uint64_t v16;
  unsigned __int8 v17;
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  (*(void (**)(_QWORD *, _QWORD *, _QWORD))(*a1 + 168))(a1, v18, 0);
  v2 = (uint64_t *)a1[26];
  for (i = (uint64_t *)a1[27]; v2 != i; ++v2)
  {
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n## Embedding Table: ", 21);
    kaldi::nnet1::MomentStatistics<float>(*v2);
    if ((v17 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v17 & 0x80u) == 0)
      v6 = v17;
    else
      v6 = v16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, v6);
    if ((char)v17 < 0)
      operator delete(__p);
  }
  v7 = a1[32];
  for (j = a1[33]; v7 != j; v7 += 8)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n## Feature Transform: input-dim ", 33);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", output-dim ", 13);
    v10 = (_QWORD *)std::ostream::operator<<();
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n", 1);
    (*(void (**)(void **__return_ptr))(**(_QWORD **)v7 + 64))(&__p);
    if ((v17 & 0x80u) == 0)
      v12 = &__p;
    else
      v12 = __p;
    if ((v17 & 0x80u) == 0)
      v13 = v17;
    else
      v13 = v16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    if ((char)v17 < 0)
      operator delete(__p);
  }
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v20);
}

void sub_1DE4C829C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InfoGradient(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"No intermediate gradients for embedding tables, here is the gradient info for the transforms: ", 94);
  v2 = *(_QWORD *)(a1 + 256);
  for (i = *(_QWORD *)(a1 + 264); v2 != i; v2 += 8)
  {
    (*(void (**)(void **__return_ptr))(**(_QWORD **)v2 + 72))(__p);
    if ((v9 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v9 & 0x80u) == 0)
      v5 = v9;
    else
      v5 = (uint64_t)__p[1];
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n", 1);
    if ((char)v9 < 0)
      operator delete(__p[0]);
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v12);
}

void sub_1DE4C8414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::SetTrainOptions(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v6;

  v2 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(result + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(result + 56) = v2;
  v3 = *(uint64_t **)(result + 256);
  for (i = *(uint64_t **)(result + 264);
        v3 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 264))(v6, a2))
  {
    v6 = *v3++;
  }
  return result;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  unsigned int v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  __int128 v39;
  __int128 v40;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x2AC, "in.NumCols() == input_dim_", v8);
  if (a4)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x2AE, "batch_idx == 0", v8);
  v9 = *(_QWORD *)(a3 + 32);
  v34 = *(_DWORD *)(a2 + 20);
  kaldi::CuMatrixBase<float>::SetZero(a3);
  v33 = a3;
  if (*(_BYTE *)(a1 + 460))
  {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 280), *(int *)(a1 + 96));
    LODWORD(v11) = *(_DWORD *)(a1 + 96);
    if ((int)v11 < 1)
    {
      LODWORD(v14) = 0;
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        v15 = *(_QWORD *)(a1 + 280) + v12;
        *(_QWORD *)(v15 + 32) = v9;
        kaldi::CuMatrix<float>::Resize(v15, v34, *(unsigned int *)(*(_QWORD *)(a1 + 152) + 4 * v13), 0, 0);
        v16 = *(_QWORD *)(a1 + 280) + v12;
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * *(int *)(*(_QWORD *)(a1 + 176) + 4 * v13));
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v38, a2, 0, *(_DWORD *)(a2 + 20), v14, *(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v13));
        kaldi::CuMatrixBase<float>::SummarizeVec(v16, v17, (uint64_t)&v38, v18, v19);
        v38 = &unk_1EA926508;
        v39 = 0u;
        v40 = 0u;
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v38);
        v14 = (const char *)(*(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v13++) + (_DWORD)v14);
        v11 = *(int *)(a1 + 96);
        v12 += 48;
      }
      while (v13 < v11);
    }
    if ((_DWORD)v14 != *(_DWORD *)(a1 + 8))
      kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x2BC, "shift == input_dim_", v10);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 304), (int)v11);
    if (*(int *)(a1 + 96) >= 1)
    {
      v28 = 0;
      v29 = 0;
      do
      {
        v30 = *(_QWORD *)(a1 + 304) + v28;
        *(_QWORD *)(v30 + 32) = v9;
        kaldi::nnet1::Component::Propagate(*(_DWORD **)(*(_QWORD *)(a1 + 256) + 8 * v29), *(_QWORD *)(a1 + 280) + v28, v30, 0);
        kaldi::CuMatrixBase<float>::AddMat(v33, *(_QWORD *)(a1 + 304) + v28, 111, v31, v32, 1.0, 1.0);
        ++v29;
        v28 += 48;
      }
      while (v29 < *(int *)(a1 + 96));
    }
  }
  else if (*(int *)(a1 + 96) >= 1)
  {
    v20 = a3;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = *(_QWORD *)(a1 + 152);
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v38, v20, 0, *(_DWORD *)(v20 + 20), v22, *(_DWORD *)(v24 + 4 * v21));
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * *(int *)(*(_QWORD *)(a1 + 176) + 4 * v21));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v35, a2, 0, *(_DWORD *)(a2 + 20), v23, *(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v21));
      kaldi::CuMatrixBase<float>::SummarizeVec((uint64_t)&v38, v25, (uint64_t)&v35, v26, v27);
      v35 = &unk_1EA926508;
      v36 = 0u;
      v37 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v35);
      v38 = &unk_1EA926508;
      v39 = 0u;
      v40 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v38);
      v24 = *(_QWORD *)(a1 + 152);
      v22 = (const char *)(*(_DWORD *)(v24 + 4 * v21) + (_DWORD)v22);
      v23 = (const char *)(*(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v21++) + (_DWORD)v23);
      v20 = a3;
    }
    while (v21 < *(int *)(a1 + 96));
  }
}

void sub_1DE4C87DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;

  a11 = v16 + 16;
  *v18 = 0u;
  v18[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a11);
  a16 = v16 + 16;
  *v17 = 0u;
  v17[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a16);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::SetGradientNormalization(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD v9[34];

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  v6 = *(uint64_t **)(a1 + 256);
  v7 = *(uint64_t **)(a1 + 264);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v8 + 240))(v8, a2, a3);
  }
  if ((_DWORD)a2 == 3)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9, "SetGradientNormalization", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 735);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"RMSPROP is not implemented in word multi embedding yet", 54);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    }
  }
  else
  {
    *(float *)(a1 + 452) = a3;
    *(_DWORD *)(a1 + 448) = a2;
  }
}

void sub_1DE4C8914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

float kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(uint64_t a1)
{
  int v1;

  if (!*(_BYTE *)(a1 + 84))
    return *(float *)(a1 + 56);
  v1 = *(_DWORD *)(a1 + 464);
  if (v1 < 1)
    return NAN;
  else
    return *(float *)(a1 + 56) / (float)v1;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  int v18;
  int v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  char v38;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v8, 1, v9, v10);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v37 = 0u;
  v36 = 0u;
  v35 = &unk_1EA92DFA8;
  v38 = 0;
  kaldi::nnet1::Component::Propagate((_DWORD *)v11, a2, (uint64_t)&v35, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 232))(v11, a2, a3, 0, 0);
  v15 = *(uint64_t **)(v11 + 232);
  v16 = *(uint64_t **)(v11 + 240);
  if (v15 == v16)
  {
    v19 = 0;
  }
  else
  {
    v17 = 0;
    do
    {
      v18 = *(_DWORD *)(*v15 + 16) * *(_DWORD *)(*v15 + 20);
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v19 = v18 + v17;
      if ((v18 + v17) > *(_DWORD *)(a4 + 8))
        kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v14);
      v32 = *(_QWORD *)a4 + 4 * v17;
      LODWORD(v33) = v18;
      kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v32, *v15++, v12, v13, v14);
      v17 = v19;
    }
    while (v15 != v16);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (*(_BYTE *)(a1 + 460))
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    kaldi::nnet1::Component::Propagate((_DWORD *)v21, a2, (uint64_t)&v35, 0);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    if (*(int *)(a1 + 96) < 1)
    {
      if (!v21)
      {
LABEL_15:
        kaldi::Vector<float>::Destroy((uint64_t)&v32);
        goto LABEL_16;
      }
    }
    else
    {
      v22 = 0;
      v23 = 0;
      do
      {
        v24 = *(_QWORD *)(*(_QWORD *)(v21 + 256) + 8 * v23);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v24 + 224))(v24, *(_QWORD *)(v21 + 280) + v22, a3, &v32);
        v30 = 0;
        v31 = 0;
        v29 = 0;
        if ((v33 + v19) > *(_DWORD *)(a4 + 8))
          kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v27);
        v29 = *(_QWORD *)a4 + 4 * v19;
        LODWORD(v30) = v33;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v29, (uint64_t)&v32, v25, v26, v27);
        v19 += v33;
        ++v23;
        v22 += 48;
      }
      while (v23 < *(int *)(a1 + 96));
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    goto LABEL_15;
  }
LABEL_16:
  if (v19 != *(_DWORD *)(a4 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"GetGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x392, "shift == gradient_out->Dim()", v20);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v35);
}

void sub_1DE4C8C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[34];

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((_QWORD *)a1);
  if (*(_BYTE *)(a1 + 460))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "CountZeroCorr", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 920);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "Not implemented yet when transforms are used");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  *a3 = 0;
  v10 = *(char **)(a1 + 208);
  v11 = *(char **)(a1 + 216);
  v12 = v11 - v10;
  if (v11 != v10)
  {
    v13 = 0;
    v14 = v12 >> 3;
    if (v14 <= 1)
      v14 = 1;
    do
    {
      v15 = *(_QWORD *)v10;
      v10 += 8;
      v13 += *(_DWORD *)(v15 + 16) * *(_DWORD *)(v15 + 20);
      *a3 = v13;
      --v14;
    }
    while (v14);
  }
  v16 = *(_QWORD *)(a1 + 232);
  v17 = *(_QWORD *)(a1 + 240);
  *a2 = 0;
  if (v17 != v16)
  {
    v18 = 0;
    do
    {
      *a3 += kaldi::CuMatrixBase<float>::CountZeros(*(_QWORD *)(v16 + 8 * v18++), v6, v7, v8, v9);
      v16 = *(_QWORD *)(a1 + 232);
    }
    while (v18 < (*(_QWORD *)(a1 + 240) - v16) >> 3);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = a1 + 29;
  v2 = (uint64_t)(a1[27] - a1[26]) >> 3;
  if (v2 != (uint64_t)(a1[30] - a1[29]) >> 3)
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t)(a1 + 29), v2);
    if (a1[27] != a1[26])
    {
      v4 = 0;
      do
      {
        v5 = operator new();
        v6 = *(_QWORD *)(a1[26] + 8 * v4);
        kaldi::CuMatrix<float>::CuMatrix(v5, *(unsigned int *)(v6 + 20), *(unsigned int *)(v6 + 16), 0, 0, 0);
        v7 = *(_QWORD *)(*v1 + 8 * v4);
        *(_QWORD *)(*v1 + 8 * v4) = v5;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
        ++v4;
      }
      while (v4 < (uint64_t)(a1[27] - a1[26]) >> 3);
    }
  }
}

void sub_1DE4C8E10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WordMultiVecComponent(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  *(_OWORD *)(a1 + 56) = xmmword_1DEC3D450;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)a1 = &unk_1EA929F00;
  *(_QWORD *)(a1 + 88) = &unk_1EA92A030;
  *(_DWORD *)(a1 + 96) = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_QWORD *)(a1 + 352) = &unk_1EA92DFA8;
  *(_BYTE *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_QWORD *)(a1 + 400) = &unk_1EA92DFA8;
  *(_BYTE *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 1065353216;
  *(_BYTE *)(a1 + 460) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 529) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  return result;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WordMultiVecComponent(uint64_t a1, uint64_t a2)
{
  int v4;
  char **v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  kaldi::CompressedMatrix **v25;
  kaldi::CompressedMatrix *v26;
  kaldi::CompressedMatrix *v27;
  kaldi::CompressedMatrix *v28;
  kaldi::CompressedMatrix *v30;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  *(_OWORD *)(a1 + 56) = xmmword_1DEC3D450;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)(a1 + 88) = &unk_1EA92A030;
  *(_QWORD *)a1 = &unk_1EA929F00;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 104), *(const void **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 128), *(const void **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 2);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 152), *(const void **)(a2 + 152), *(_QWORD *)(a2 + 160), (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 176), *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 2);
  v4 = *(_DWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 200) = v4;
  v5 = (char **)(a1 + 256);
  *(_QWORD *)(a1 + 352) = &unk_1EA92DFA8;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_QWORD *)(a1 + 400) = &unk_1EA92DFA8;
  *(_BYTE *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_BYTE *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  v6 = *(unsigned __int8 *)(a2 + 460);
  *(_BYTE *)(a1 + 460) = v6;
  if (v6 && *(int *)(a1 + 96) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 256) + 8 * v7);
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      v10 = v9;
      v12 = *(uint64_t **)(a1 + 264);
      v11 = *(_QWORD *)(a1 + 272);
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v5) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v5;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 272, v17);
        else
          v18 = 0;
        v19 = (uint64_t *)&v18[8 * v14];
        *v19 = v10;
        v13 = v19 + 1;
        v21 = *(char **)(a1 + 256);
        v20 = *(char **)(a1 + 264);
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v19 = v22;
          }
          while (v20 != v21);
          v20 = *v5;
        }
        *(_QWORD *)(a1 + 256) = v19;
        *(_QWORD *)(a1 + 264) = v13;
        *(_QWORD *)(a1 + 272) = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v9;
        v13 = v12 + 1;
      }
      *(_QWORD *)(a1 + 264) = v13;
      ++v7;
    }
    while (v7 < *(int *)(a1 + 96));
  }
  if (a1 != a2)
  {
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 280, *(_QWORD *)(a2 + 280), *(_QWORD *)(a2 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 4));
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 304, *(_QWORD *)(a2 + 304), *(_QWORD *)(a2 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 312) - *(_QWORD *)(a2 + 304)) >> 4));
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 328, *(_QWORD *)(a2 + 328), *(_QWORD *)(a2 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 336) - *(_QWORD *)(a2 + 328)) >> 4));
  }
  kaldi::CuMatrix<float>::operator=(a1 + 352, a2 + 352);
  kaldi::CuMatrix<float>::operator=(a1 + 400, a2 + 400);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  *(_DWORD *)(a1 + 452) = *(_DWORD *)(a2 + 452);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 464);
  std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize((uint64_t *)(a1 + 208), (uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 3);
  if (*(_QWORD *)(a1 + 216) != *(_QWORD *)(a1 + 208))
  {
    v23 = 0;
    v24 = 0;
    do
    {
      kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::CompressedMatrix>(*(const void ***)(*(_QWORD *)(a2 + 208) + v23), (uint64_t *)&v30);
      v25 = (kaldi::CompressedMatrix **)(*(_QWORD *)(a1 + 208) + v23);
      v26 = v30;
      v30 = 0;
      v27 = *v25;
      *v25 = v26;
      if (v27)
        std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)v25, v27);
      v28 = v30;
      v30 = 0;
      if (v28)
        std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)&v30, v28);
      ++v24;
      v23 += 8;
    }
    while (v24 < (uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3);
  }
  if (*(_QWORD *)(a2 + 480) != *(_QWORD *)(a2 + 472))
    kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InitResidualAggregator(a1, (uint64_t *)(a1 + 472));
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  return a1;
}

void sub_1DE4C9338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, kaldi::nnet1::QuantizerResidualAggregator *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  kaldi::nnet1::UpdatableComponent *v20;
  void *v22;
  void *v23;
  void *v24;

  v22 = *a10;
  if (*a10)
  {
    *((_QWORD *)v20 + 20) = v22;
    operator delete(v22);
  }
  v23 = *a11;
  if (*a11)
  {
    *((_QWORD *)v20 + 17) = v23;
    operator delete(v23);
  }
  v24 = *a12;
  if (*a12)
  {
    *((_QWORD *)v20 + 14) = v24;
    operator delete(v24);
  }
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a13);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v20);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (a1[1] - *a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (kaldi::CompressedMatrix **)(*a1 + 8 * a2));
  }
  else
  {
    std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__append(a1, a2 - v2);
  }
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::CompressedMatrix>@<X0>(const void **a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t result;

  v4 = operator new();
  result = kaldi::CompressedMatrix::CompressedMatrix(v4, a1, v5, v6, v7);
  *a2 = v4;
  return result;
}

void sub_1DE4C94C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10C0C40E6EFC850);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  _QWORD v5[34];

  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::EnsureCorrs((_QWORD *)a1);
  if (*(_BYTE *)(a1 + 460))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5, "InitResidualAggregator", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 939);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "Not implemented yet when transforms are used");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  if (*(_QWORD *)(a1 + 216) != *(_QWORD *)(a1 + 208))
  {
    v4 = 0;
    do
      kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * v4++));
    while (v4 < (uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::~WordMultiVecComponent(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;

  *(_QWORD *)a1 = &unk_1EA929F00;
  *(_QWORD *)(a1 + 88) = &unk_1EA92A030;
  v2 = a1 + 88;
  v3 = *(_QWORD **)(a1 + 256);
  v4 = *(_QWORD **)(a1 + 264);
  while (v3 != v4)
  {
    if (*v3)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      *v3 = 0;
    }
    ++v3;
  }
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 472));
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 400);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 352);
  v10 = (void **)(a1 + 328);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)(a1 + 304);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)(a1 + 280);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v5 = *(void **)(a1 + 256);
  if (v5)
  {
    *(_QWORD *)(a1 + 264) = v5;
    operator delete(v5);
  }
  v10 = (void **)(a1 + 232);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)(a1 + 208);
  std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v6 = *(void **)(a1 + 176);
  if (v6)
  {
    *(_QWORD *)(a1 + 184) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 152);
  if (v7)
  {
    *(_QWORD *)(a1 + 160) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 128);
  if (v8)
  {
    *(_QWORD *)(a1 + 136) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 104);
  if (v9)
  {
    *(_QWORD *)(a1 + 112) = v9;
    operator delete(v9);
  }
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::~WordMultiVecComponent(a1);
  JUMPOUT(0x1DF0ED014);
}

void `non-virtual thunk to'kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::~WordMultiVecComponent(uint64_t a1)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::~WordMultiVecComponent(a1 - 88);
}

{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::~WordMultiVecComponent(a1 - 88);
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WordMultiVecComponent(v2, a1);
  return v2;
}

void sub_1DE4C9774(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C404CB298AFLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::CopyCompressed(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WordMultiVecComponent(v2, a1);
  return v2;
}

void sub_1DE4C97DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C404CB298AFLL);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::CopyCompressed(uint64_t a1)
{
  return kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::CopyCompressed(a1 - 88);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  uint64_t v6;
  const char *v7;
  int *v8;
  uint64_t v9;
  const char *v10;
  void **v11;
  BOOL v12;
  float *v13;
  void *v14;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  int *v24;
  BOOL v25;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  std::string *v37;
  void *v40;
  void *v41;
  int v42;
  BOOL v43;
  uint64_t v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  const char *v50;
  const char *v51;
  const char *v52;
  _QWORD *v53;
  _QWORD *v54;
  char **v55;
  int v56;
  uint64_t v57;
  const char *v58;
  kaldi::nnet1::Component *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  const void *v64;
  void *v65;
  void *v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  const void **v79;
  const void **v80;
  int v81;
  const void **v82;
  uint64_t v83;
  uint64_t v84;
  const void *v85;
  unsigned int *v86;
  unsigned int *v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  unsigned int v91;
  unsigned int *v92;
  uint64_t v93;
  _QWORD *v94;
  int inited;
  const char *v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  uint64_t **v101;
  unint64_t v102;
  uint64_t **v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  unsigned int v109;
  unint64_t v110;
  float v111;
  float v112;
  char *v114;
  float v115;
  float v116;
  float v117;
  kaldi::CompressedMatrix **v119;
  kaldi::CompressedMatrix *v120;
  kaldi::CompressedMatrix *v121;
  kaldi::CompressedMatrix *v122;
  _QWORD *v123;
  void *v124;
  uint64_t v125;
  _QWORD *v126;
  void **v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  char v131;
  std::vector<int> *v132;
  std::vector<int> *v133;
  std::vector<int> *v134;
  int *v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  _QWORD **v140;
  _QWORD *v141;
  unint64_t v142;
  void *__p;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  void *v147;
  void *v148[3];
  int v149;
  std::string v150;
  std::string v151;
  int v152;
  _DWORD *v153[2];

  v152 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v151);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 448), &v150);
  v131 = 0;
  v149 = -1;
  *(_BYTE *)(a1 + 460) = 1;
  memset(v148, 0, sizeof(v148));
  v133 = (std::vector<int> *)(a1 + 152);
  v134 = (std::vector<int> *)(a1 + 176);
  v135 = (int *)(a1 + 200);
  v8 = (int *)(a1 + 96);
  v132 = (std::vector<int> *)(a1 + 104);
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_161;
    kaldi::ReadToken(a2, 0, (uint64_t)v148, v6, v7);
    if ((SHIBYTE(v148[2]) & 0x80000000) == 0)
      break;
    v14 = v148[1];
    if (v148[1] == (void *)12)
    {
      if (*(_QWORD *)v148[0] == 0x536D6F646E61523CLL && *((_DWORD *)v148[0] + 2) == 1046766949)
      {
LABEL_88:
        v24 = &v149;
LABEL_123:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v24, v9, v10);
        goto LABEL_159;
      }
      v14 = v148[1];
    }
    else if (v148[1] == (void *)13
           && *(_QWORD *)v148[0] == 0x74536D617261503CLL
           && *(_QWORD *)((char *)v148[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_82:
      v13 = (float *)&v152;
LABEL_124:
      kaldi::ReadBasicType<float>(a2, 0, v13, v9, v10);
      goto LABEL_159;
    }
    if (v14 == (void *)19)
    {
      if (*(_QWORD *)v148[0] == 0x61725474696E493CLL
        && *((_QWORD *)v148[0] + 1) == 0x79546D726F66736ELL
        && *(_QWORD *)((char *)v148[0] + 11) == 0x3E657079546D726FLL)
      {
LABEL_125:
        v37 = &v151;
LABEL_127:
        kaldi::ReadToken(a2, 0, (uint64_t)v37, v9, v10);
        goto LABEL_159;
      }
      v14 = v148[1];
    }
    if (v14 == (void *)18)
    {
      if (*(_QWORD *)v148[0] == 0x6E6569646172473CLL
        && *((_QWORD *)v148[0] + 1) == 0x7079546D726F4E74
        && *((_WORD *)v148[0] + 8) == 15973)
      {
LABEL_126:
        v37 = &v150;
        goto LABEL_127;
      }
      v14 = v148[1];
    }
    if (v14 == (void *)9)
    {
      v21 = *(_QWORD *)v148[0] == 0x6461724778614D3CLL && *((_BYTE *)v148[0] + 8) == 62;
      v13 = (float *)(a1 + 452);
      if (v21)
        goto LABEL_124;
      v14 = v148[1];
    }
    if (v14 == (void *)15)
    {
      v22 = *(_QWORD *)v148[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v148[0] + 7) == 0x3E66656F43657461;
      v13 = (float *)(a1 + 456);
      if (v22)
        goto LABEL_124;
      v14 = v148[1];
    }
    if (v14 == (void *)11)
    {
      v23 = *(_QWORD *)v148[0] == 0x756F72476D754E3CLL && *(_QWORD *)((char *)v148[0] + 3) == 0x3E7370756F72476DLL;
      v24 = (int *)(a1 + 96);
      if (v23)
        goto LABEL_123;
      v14 = v148[1];
      if (v148[1] == (void *)11)
      {
        v25 = *(_QWORD *)v148[0] == 0x6C6261546D754E3CLL && *(_QWORD *)((char *)v148[0] + 3) == 0x3E73656C6261546DLL;
        v24 = (int *)(a1 + 200);
        if (v25)
          goto LABEL_123;
        if ((HIBYTE(v148[2]) & 0x80) == 0)
          goto LABEL_132;
      }
    }
    if (v14 == (void *)12)
    {
      if (*(_QWORD *)v148[0] == 0x69536261636F563CLL && *((_DWORD *)v148[0] + 2) == 1047750010)
      {
LABEL_156:
        __p = 0;
        v144 = 0;
        v145 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p, v9, v10);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v132, v52);
        goto LABEL_157;
      }
      v14 = v148[1];
    }
    if (v14 == (void *)10)
    {
      if (*(_QWORD *)v148[0] == 0x6D65744978614D3CLL && *((_WORD *)v148[0] + 4) == 15987)
      {
LABEL_154:
        __p = 0;
        v144 = 0;
        v145 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p, v9, v10);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, (std::vector<int> *)(a1 + 128), v50);
        goto LABEL_157;
      }
      goto LABEL_138;
    }
LABEL_139:
    if (v14 != (void *)17)
      goto LABEL_148;
    v11 = (void **)v148[0];
LABEL_141:
    v40 = *v11;
    v41 = v11[1];
    v42 = *((unsigned __int8 *)v11 + 16);
    v43 = v40 == (void *)0x69446465626D453CLL && v41 == (void *)0x736E6F69736E656DLL;
    if (!v43 || v42 != 62)
      goto LABEL_148;
    __p = 0;
    v144 = 0;
    v145 = 0;
    kaldi::ReadToken(a2, 0, (uint64_t)&__p, v9, v10);
    kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v133, v51);
LABEL_157:
    if (SHIBYTE(v145) < 0)
      operator delete(__p);
LABEL_159:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v11 = v148;
  switch(HIBYTE(v148[2]))
  {
    case 9:
LABEL_5:
      v12 = v148[0] == (void *)0x6461724778614D3CLL && LOBYTE(v148[1]) == 62;
      v13 = (float *)(a1 + 452);
      if (!v12)
        goto LABEL_148;
      goto LABEL_124;
    case 0xA:
      goto LABEL_133;
    case 0xB:
      goto LABEL_112;
    case 0xC:
      if (v148[0] != (void *)0x536D6F646E61523CLL || LODWORD(v148[1]) != 1046766949)
      {
        switch(HIBYTE(v148[2]))
        {
          case 9:
            goto LABEL_5;
          case 0xA:
            goto LABEL_133;
          case 0xB:
            goto LABEL_112;
          case 0xC:
            goto LABEL_128;
          default:
            goto LABEL_148;
        }
      }
      goto LABEL_88;
    case 0xD:
      if (v148[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v148 + 5) != (void *)0x3E7665646474536DLL)
        goto LABEL_148;
      goto LABEL_82;
    case 0xF:
LABEL_105:
      v34 = v148[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v148 + 7) == (void *)0x3E66656F43657461;
      v13 = (float *)(a1 + 456);
      if (v34)
        goto LABEL_124;
      if (HIBYTE(v148[2]) == 10)
        goto LABEL_133;
      if (HIBYTE(v148[2]) == 12)
      {
LABEL_128:
        if (v148[0] == (void *)0x69536261636F563CLL && LODWORD(v148[1]) == 1047750010)
          goto LABEL_156;
LABEL_132:
        if (HIBYTE(v148[2]) != 10)
          goto LABEL_148;
        goto LABEL_133;
      }
      if (HIBYTE(v148[2]) != 11)
        goto LABEL_148;
LABEL_112:
      v35 = v148[0] == (void *)0x756F72476D754E3CLL && *(void **)((char *)v148 + 3) == (void *)0x3E7370756F72476DLL;
      v24 = (int *)(a1 + 96);
      if (v35)
        goto LABEL_123;
      if (HIBYTE(v148[2]) == 10)
      {
LABEL_133:
        if (v148[0] == (void *)0x6D65744978614D3CLL && LOWORD(v148[1]) == 15987)
          goto LABEL_154;
        if ((HIBYTE(v148[2]) & 0x80) == 0)
          goto LABEL_148;
LABEL_138:
        v14 = v148[1];
        goto LABEL_139;
      }
      if (HIBYTE(v148[2]) == 11)
      {
        v36 = v148[0] == (void *)0x6C6261546D754E3CLL && *(void **)((char *)v148 + 3) == (void *)0x3E73656C6261546DLL;
        v24 = (int *)(a1 + 200);
        if (v36)
          goto LABEL_123;
      }
LABEL_148:
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v148, "<AssignedTable>"))
      {
        __p = 0;
        v144 = 0;
        v145 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p, v45, v46);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v134, v47);
        goto LABEL_157;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v148, "<InitializeToConcat>"))
      {
        v131 = 1;
        goto LABEL_159;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v148, "<UseTransform>"))
      {
        kaldi::ReadBasicType<BOOL>(a2, 0, (char *)(a1 + 460), v48, v49);
        goto LABEL_159;
      }
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v148, "</Component>"))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 271);
        v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
        if (SHIBYTE(v148[2]) >= 0)
          v127 = v148;
        else
          v127 = (void **)v148[0];
        if (SHIBYTE(v148[2]) >= 0)
          v128 = HIBYTE(v148[2]);
        else
          v128 = (uint64_t)v148[1];
        v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)v127, v128);
        v130 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)", a typo in config? ", 20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)"(NumGroups|VocabSizes|MaxDimensions|EmbedDimensions|LearnRateCoef|ParamStddev|RandomSeed|InitTransformType|GradientNormType|MaxGrad)", 132);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
LABEL_161:
      v53 = *(_QWORD **)(a1 + 256);
      v54 = *(_QWORD **)(a1 + 264);
      while (v53 != v54)
      {
        if (*v53)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)*v53 + 8))(*v53);
          *v53 = 0;
        }
        ++v53;
      }
      if (!*(_BYTE *)(a1 + 460))
        goto LABEL_210;
      v55 = (char **)(a1 + 256);
      if (*v8 >= 1)
      {
        v56 = 0;
        do
        {
          v136 = 0;
          v137 = 0;
          v138 = 0;
          LODWORD(v140) = 0;
          LODWORD(v153[0]) = 0;
          kaldi::ExpectToken(a2, 0, (kaldi *)"<FeatureTransform>");
          kaldi::ReadToken(a2, 0, (uint64_t)&v136, v57, v58);
          v59 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v136);
          kaldi::ExpectToken(a2, 0, (kaldi *)"<InputDim>");
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v140, v60, v61);
          kaldi::ExpectToken(a2, 0, (kaldi *)"<OutputDim>");
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v153, v62, v63);
          v64 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v59, v140, LODWORD(v153[0]));
          if (!v64
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 293);
            v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"require an updatable component, you used ", 41);
            if (v138 >= 0)
              v124 = &v136;
            else
              v124 = v136;
            if (v138 >= 0)
              v125 = HIBYTE(v138);
            else
              v125 = v137;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)v124, v125);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
          }
          v66 = v65;
          (*(void (**)(void *, uint64_t *, kaldi::UniformRandomNumber *))(*(_QWORD *)v65 + 96))(v65, a2, a3);
          v68 = *(_QWORD **)(a1 + 264);
          v67 = *(_QWORD *)(a1 + 272);
          if ((unint64_t)v68 >= v67)
          {
            v70 = ((char *)v68 - *v55) >> 3;
            if ((unint64_t)(v70 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v71 = v67 - (_QWORD)*v55;
            v72 = v71 >> 2;
            if (v71 >> 2 <= (unint64_t)(v70 + 1))
              v72 = v70 + 1;
            if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
              v73 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v73 = v72;
            if (v73)
              v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 272, v73);
            else
              v74 = 0;
            v75 = &v74[8 * v70];
            *(_QWORD *)v75 = v66;
            v69 = v75 + 8;
            v77 = *(char **)(a1 + 256);
            v76 = *(char **)(a1 + 264);
            if (v76 != v77)
            {
              do
              {
                v78 = *((_QWORD *)v76 - 1);
                v76 -= 8;
                *((_QWORD *)v75 - 1) = v78;
                v75 -= 8;
              }
              while (v76 != v77);
              v76 = *v55;
            }
            *(_QWORD *)(a1 + 256) = v75;
            *(_QWORD *)(a1 + 264) = v69;
            *(_QWORD *)(a1 + 272) = &v74[8 * v73];
            if (v76)
              operator delete(v76);
          }
          else
          {
            *v68 = v66;
            v69 = v68 + 1;
          }
          *(_QWORD *)(a1 + 264) = v69;
          if (SHIBYTE(v138) < 0)
            operator delete(v136);
          ++v56;
        }
        while (v56 < *v8);
      }
      if ((v131 & 1) == 0)
        goto LABEL_210;
      v79 = *(const void ***)(a1 + 256);
      v80 = *(const void ***)(a1 + 264);
      if (v79 == v80)
      {
        if (!*((_DWORD *)*v79 + 3))
          goto LABEL_208;
LABEL_205:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 304);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"dimension mismatch, cannot initialize to concatenation, expected dim is ", 72);
        v94 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)" actual dim is ", 15);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      v81 = 0;
      v82 = *(const void ***)(a1 + 256);
      do
      {
        v83 = (uint64_t)*v82++;
        v81 += *(_DWORD *)(v83 + 8);
      }
      while (v82 != v80);
      if (v81 != *((_DWORD *)*v79 + 3))
        goto LABEL_205;
      if (v79 == v80)
      {
        LODWORD(v84) = 0;
      }
      else
      {
        v84 = 0;
        do
        {
          v85 = *v79;
          if (!*v79)
          {
LABEL_265:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 326);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"cannot initialize to concatenation for this transform", 53);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
          }
          if (v86)
          {
            v87 = v86;
            kaldi::Matrix<float>::Matrix((uint64_t)&__p, v86[3], v86[2], 0, 0);
            v88 = v87[3];
            v140 = 0;
            v141 = 0;
            v142 = 0;
            kaldi::Vector<float>::Resize((void **)&v140, v88, 0, v89, v90);
            kaldi::SubMatrix<float>::SubMatrix(&v136, &__p, v84, v87[2], 0, v144);
            kaldi::MatrixBase<float>::AddToDiag((uint64_t)&v136, 1.0);
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v136);
            kaldi::nnet1::AffineTransform::SetLinearity((kaldi::nnet1::AffineTransform *)v87, (uint64_t)&__p);
            kaldi::nnet1::AffineTransform::SetBias((kaldi::nnet1::AffineTransform *)v87, (uint64_t)&v140);
            v91 = v87[2];
            kaldi::Vector<float>::Destroy((uint64_t)&v140);
          }
          else
          {
            if (!v92)
              goto LABEL_265;
            v93 = (uint64_t)v92;
            kaldi::Matrix<float>::Matrix((uint64_t)&__p, v92[3], v92[2], 0, 0);
            kaldi::SubMatrix<float>::SubMatrix(&v136, &__p, v84, *(unsigned int *)(v93 + 8), 0, v144);
            kaldi::MatrixBase<float>::AddToDiag((uint64_t)&v136, 1.0);
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v136);
            kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetLinearity(v93, (uint64_t)&__p);
            v91 = *(_DWORD *)(v93 + 8);
          }
          kaldi::Matrix<float>::~Matrix((uint64_t)&__p);
          v84 = v91 + v84;
          ++v79;
        }
        while (v79 != v80);
      }
      if ((_DWORD)v84 != v81)
        kaldi::KaldiAssertFailure_((kaldi *)"InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x14B, "shift == total_dim", v7);
LABEL_208:
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 332);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"initialized the transform for concatenation", 43);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
      }
LABEL_210:
      inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v151);
      *(_DWORD *)(a1 + 448) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v150);
      if (!inited)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 339);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"it doesn't make sense to initialize the embedding table as an identify matrix", 77);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      v141 = 0;
      v142 = 0;
      v140 = &v141;
      if (*v8 < 1)
      {
        v102 = 0;
      }
      else
      {
        v97 = 0;
        do
        {
          LODWORD(v136) = 0;
          v98 = v134->__begin_[v97];
          LODWORD(v136) = v98;
          if (v98 < 0 || v98 >= *v135)
            kaldi::KaldiAssertFailure_((kaldi *)"InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x159, "table_idx >= 0 && table_idx < num_tables_", v96);
          v99 = v132->__begin_[v97];
          v100 = v133->__begin_[v97];
          __p = &v136;
          v101 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v140, (int *)&v136, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
          *((_DWORD *)v101 + 8) = v99;
          *((_DWORD *)v101 + 9) = v100;
          ++v97;
        }
        while (v97 < *v8);
        v102 = v142;
      }
      if (v102 != *v135)
        kaldi::KaldiAssertFailure_((kaldi *)"InitData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x15C, "table_dims.size() == num_tables_", v96);
      std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize((uint64_t *)(a1 + 208), v102);
      if (v149 >= 1)
        kaldi::UniformRandomNumber::SetRandomSeeds(a3, v149);
      kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)&__p, a3);
      v139 = 0;
      if (*v135 >= 1)
      {
        while (1)
        {
          v153[0] = &v139;
          v103 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v140, &v139, (uint64_t)&std::piecewise_construct, v153);
          v104 = *((unsigned int *)v103 + 8);
          v105 = *((unsigned int *)v103 + 9);
          kaldi::Matrix<float>::Matrix((uint64_t)&v136, v104, v105, 0, 0);
          if ((int)v104 >= 1)
            break;
LABEL_241:
          kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::Matrix<float>>((float **)&v136, (uint64_t *)v153);
          v119 = (kaldi::CompressedMatrix **)(*(_QWORD *)(a1 + 208) + 8 * v139);
          v120 = (kaldi::CompressedMatrix *)v153[0];
          v153[0] = 0;
          v121 = *v119;
          *v119 = v120;
          if (v121)
            std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)v119, v121);
          v122 = (kaldi::CompressedMatrix *)v153[0];
          v153[0] = 0;
          if (v122)
            std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)v153, v122);
          kaldi::Matrix<float>::~Matrix((uint64_t)&v136);
          if (++v139 >= *v135)
            goto LABEL_246;
        }
        v109 = 0;
        while ((int)v105 < 1)
        {
LABEL_240:
          if (++v109 == (_DWORD)v104)
            goto LABEL_241;
        }
        v110 = 0;
        while (2)
        {
          if (inited == 2)
          {
            v116 = *(float *)&v152;
            kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)&__p, 0, v106, v107, v108);
            if (HIDWORD(v137) <= v109 || v110 >= v137)
LABEL_255:
              kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v108);
            v114 = (char *)v136 + 4 * (int)(v109 * v138);
            v115 = v116 * v117;
LABEL_238:
            *(float *)&v114[4 * v110] = v115;
          }
          else if (inited == 1)
          {
            v111 = *(float *)&v152;
            v112 = kaldi::UniformRandomNumber::RandUniform(a3, 0, v106, v107, v108);
            if (HIDWORD(v137) <= v109 || v110 >= v137)
              goto LABEL_255;
            v114 = (char *)v136 + 4 * (int)(v109 * v138);
            v115 = (v112 + -0.5) * (float)(v111 + v111);
            goto LABEL_238;
          }
          if (v105 == ++v110)
            goto LABEL_240;
          continue;
        }
      }
LABEL_246:
      kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
      if (v146)
      {
        v147 = v146;
        operator delete(v146);
      }
      v136 = &v145;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v136);
      std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy((uint64_t)&v140, v141);
      if (SHIBYTE(v148[2]) < 0)
        operator delete(v148[0]);
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v150.__r_.__value_.__l.__data_);
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v151.__r_.__value_.__l.__data_);
      return;
    case 0x11:
      goto LABEL_141;
    case 0x12:
LABEL_97:
      if (v148[0] != (void *)0x6E6569646172473CLL
        || v148[1] != (void *)0x7079546D726F4E74
        || LOWORD(v148[2]) != 15973)
      {
        v11 = v148;
        switch(HIBYTE(v148[2]))
        {
          case 9:
            goto LABEL_5;
          case 0xA:
            goto LABEL_133;
          case 0xB:
            goto LABEL_112;
          case 0xC:
            goto LABEL_128;
          case 0xF:
            goto LABEL_105;
          case 0x11:
            goto LABEL_141;
          default:
            goto LABEL_148;
        }
      }
      goto LABEL_126;
    case 0x13:
      if (v148[0] != (void *)0x61725474696E493CLL
        || v148[1] != (void *)0x79546D726F66736ELL
        || *(void **)((char *)&v148[1] + 3) != (void *)0x3E657079546D726FLL)
      {
        v11 = v148;
        switch(HIBYTE(v148[2]))
        {
          case 9:
            goto LABEL_5;
          case 0xA:
            goto LABEL_133;
          case 0xB:
            goto LABEL_112;
          case 0xC:
            goto LABEL_128;
          case 0xF:
            goto LABEL_105;
          case 0x11:
            goto LABEL_141;
          case 0x12:
            goto LABEL_97;
          default:
            goto LABEL_148;
        }
      }
      goto LABEL_125;
    default:
      goto LABEL_148;
  }
}

void sub_1DE4CAA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,_QWORD *a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  uint64_t v32;

  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }
  a17 = &a28;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy((uint64_t)&a23, a24);
  if (*(char *)(v32 - 177) < 0)
    operator delete(*(void **)(v32 - 200));
  if (*(char *)(v32 - 145) < 0)
    operator delete(*(void **)(v32 - 168));
  if (*(char *)(v32 - 121) < 0)
    operator delete(*(void **)(v32 - 144));
  _Unwind_Resume(a1);
}

void sub_1DE4CAAA8()
{
  JUMPOUT(0x1DE4CAB04);
}

void sub_1DE4CAAB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  JUMPOUT(0x1DE4CAB10);
}

void sub_1DE4CAAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  JUMPOUT(0x1DE4CAAE0);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::Matrix<float>>(float **a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 0;
  kaldi::CompressedMatrix::CopyFromMat<float>(v4, a1);
  *a2 = v4;
}

void sub_1DE4CABA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10C0C40E6EFC850);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD v43[34];

  if (!*(_BYTE *)(result + 544))
  {
    v1 = *(unsigned int *)(result + 96);
    if ((int)v1 <= 0)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 503);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"must have at least one group, you used ", 39);
      std::ostream::operator<<();
    }
    else
    {
      v2 = *(unsigned int *)(result + 200);
      if ((int)v2 <= 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 506);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"must have at least one embedding table, you used ", 49);
        std::ostream::operator<<();
      }
      else if (v1 < v2)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 509);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are only ", 15);
        v31 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" groups, but you set ", 21);
        v32 = (_QWORD *)std::ostream::operator<<();
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v32, " embedding tables");
      }
      else
      {
        v3 = *(_QWORD *)(result + 104);
        v4 = (*(_QWORD *)(result + 112) - v3) >> 2;
        if (v4 == v1)
        {
          v5 = *(_QWORD *)(result + 128);
          if (v4 == (*(_QWORD *)(result + 136) - v5) >> 2)
          {
            v6 = *(_QWORD *)(result + 152);
            if (v4 == (*(_QWORD *)(result + 160) - v6) >> 2)
            {
              v7 = *(_QWORD *)(result + 176);
              if (v4 == (*(_QWORD *)(result + 184) - v7) >> 2)
              {
                v8 = *(_QWORD *)(result + 208);
                if (v2 == (*(_QWORD *)(result + 216) - v8) >> 3)
                {
                  if (*(_BYTE *)(result + 460)
                    && v4 != (uint64_t)(*(_QWORD *)(result + 264) - *(_QWORD *)(result + 256)) >> 3)
                  {
                    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 528);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
                    v40 = (_QWORD *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" groups, but the number of feature transforms is ", 49);
                    std::ostream::operator<<();
                  }
                  else
                  {
                    v9 = 0;
                    v10 = 0;
                    v11 = 0;
                    do
                    {
                      v12 = *(unsigned int *)(v7 + 4 * v9);
                      if ((v12 & 0x80000000) != 0 || (int)v12 >= (int)v2)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 537);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v23 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"-th group has assigned table index ", 35);
                        v24 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" , the number of tables is ", 27);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      v13 = *(_DWORD *)(v3 + 4 * v9);
                      if (v13 <= 0)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 542);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v20 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"-th group has invalid vocab size ", 33);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      v14 = *(_DWORD *)(v5 + 4 * v9);
                      if (v14 <= 0)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 545);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v21 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"-th group has invalid max item value ", 37);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      v15 = *(_DWORD *)(v6 + 4 * v9);
                      if (v15 <= 0)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 548);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v19 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"-th group has invalid embedding dimension value ", 48);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      v16 = **(_QWORD **)(v8 + 8 * v12);
                      if (!v16 || *(_DWORD *)(v16 + 8) != v13)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 553);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v18 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"-th group has mismatched embedding table and vocab size ", 56);
                        v29 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" vs ", 4);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      if (*(_DWORD *)(v16 + 12) != v15)
                      {
                        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 557);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v22 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"-th group has mismatched embedding table and embedding dim ", 59);
                        v30 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" vs ", 4);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      if (*(_BYTE *)(result + 460))
                      {
                        v17 = *(_QWORD *)(*(_QWORD *)(result + 256) + 8 * v9);
                        if (v15 != *(_DWORD *)(v17 + 8))
                        {
                          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 561);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                          v25 = (_QWORD *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"-th group has mismatched embedding table and feature transform ", 63);
                          v26 = (_QWORD *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" vs ", 4);
                          std::ostream::operator<<();
                          goto LABEL_40;
                        }
                        if (*(_DWORD *)(result + 12) != *(_DWORD *)(v17 + 12))
                        {
                          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 565);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                          v27 = (_QWORD *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"-th group has feature transform output dim ", 43);
                          v28 = (_QWORD *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" does not match component output dim ", 37);
                          std::ostream::operator<<();
                          goto LABEL_40;
                        }
                      }
                      v10 += v15;
                      v11 += v14;
                      ++v9;
                    }
                    while (v4 != v9);
                    if (*(_DWORD *)(result + 8) == v11)
                    {
                      if (*(_BYTE *)(result + 460) || v10 == *(_DWORD *)(result + 12))
                      {
                        *(_BYTE *)(result + 544) = 1;
                        return result;
                      }
                      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 575);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Total embedding size of ", 24);
                      v41 = (_QWORD *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" doesn't match the component output size of ", 44);
                      v42 = (_QWORD *)std::ostream::operator<<();
                      std::operator<<[abi:ne180100]<std::char_traits<char>>(v42, " when transforms are not used");
                    }
                    else
                    {
                      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 571);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"input dim of the component is ", 30);
                      v39 = (_QWORD *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" , while the input dim defined in max items is ", 47);
                      std::ostream::operator<<();
                    }
                  }
                }
                else
                {
                  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 524);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the actual number of embedding tables is ", 41);
                  v38 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" and different than ", 20);
                  std::ostream::operator<<();
                }
              }
              else
              {
                kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 521);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
                v36 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" groups, but ", 13);
                v37 = (_QWORD *)std::ostream::operator<<();
                std::operator<<[abi:ne180100]<std::char_traits<char>>(v37, " groups have assigned tables");
              }
            }
            else
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 518);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
              v35 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" groups, but the embedding dim list size is ", 44);
              std::ostream::operator<<();
            }
          }
          else
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 515);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
            v34 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" groups, but the max item list size is ", 39);
            std::ostream::operator<<();
          }
        }
        else
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43, "Check", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 512);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
          v33 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" groups, but the number vocab list size is ", 43);
          std::ostream::operator<<();
        }
      }
    }
LABEL_40:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43);
  }
  return result;
}

void sub_1DE4CB570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  float *v9;
  int *v10;
  int *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  BOOL v30;
  float *v31;
  BOOL v32;
  BOOL v35;
  const char *v36;
  const char *v37;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  const char *v47;
  const char *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  kaldi::CompressedMatrix **v53;
  kaldi::CompressedMatrix *v54;
  kaldi::CompressedMatrix *v55;
  _QWORD *v56;
  _QWORD *v57;
  int v58;
  char **v59;
  const void *v60;
  void *v61;
  void *v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  _QWORD *v75;
  __int128 *v76;
  uint64_t v77;
  _QWORD *v78;
  std::vector<int> *v79;
  std::vector<int> *v80;
  float *v81;
  std::vector<int> *v82;
  std::vector<int> *v83;
  void *__p;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;

  v87 = 0uLL;
  v88 = 0;
  v8 = (char *)(a1 + 460);
  *(_BYTE *)(a1 + 460) = 1;
  v9 = (float *)(a1 + 452);
  v80 = (std::vector<int> *)(a1 + 176);
  v81 = (float *)(a1 + 456);
  v79 = (std::vector<int> *)(a1 + 152);
  v82 = (std::vector<int> *)(a1 + 104);
  v83 = (std::vector<int> *)(a1 + 128);
  v10 = (int *)(a1 + 200);
  v11 = (int *)(a1 + 96);
  while (kaldi::Peek(a2, a3) == 60)
  {
    kaldi::ReadToken(a2, a3, (uint64_t)&v87, v12, v13);
    if (SHIBYTE(v88) < 0)
    {
      v20 = *((_QWORD *)&v87 + 1);
      if (*((_QWORD *)&v87 + 1) != 11)
        goto LABEL_25;
      v21 = *(_QWORD *)v87 == 0x756F72476D754E3CLL && *(_QWORD *)(v87 + 3) == 0x3E7370756F72476DLL;
      v18 = (uint64_t)v11;
      if (v21
        || (*(_QWORD *)v87 == 0x6C6261546D754E3CLL ? (v22 = *(_QWORD *)(v87 + 3) == 0x3E73656C6261546DLL) : (v22 = 0),
            v18 = (uint64_t)v10,
            v22))
      {
LABEL_75:
        kaldi::ReadBasicType<int>(a2, a3, v18, v14, v15);
      }
      else
      {
        v20 = *((_QWORD *)&v87 + 1);
LABEL_25:
        if (v20 == 12)
        {
          if (*(_QWORD *)v87 == 0x69536261636F563CLL && *(_DWORD *)(v87 + 8) == 1047750010)
          {
LABEL_94:
            __p = 0;
            v85 = 0;
            v86 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v82, v37);
            goto LABEL_137;
          }
          v20 = *((_QWORD *)&v87 + 1);
        }
        if (v20 != 10)
          goto LABEL_37;
        if (*(_QWORD *)v87 == 0x6D65744978614D3CLL && *(_WORD *)(v87 + 8) == 15987)
        {
LABEL_93:
          __p = 0;
          v85 = 0;
          v86 = 0;
          kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
          kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v83, v36);
LABEL_137:
          if (SHIBYTE(v86) < 0)
            operator delete(__p);
        }
        else
        {
          v20 = *((_QWORD *)&v87 + 1);
LABEL_37:
          if (v20 == 17)
          {
            if (*(_QWORD *)v87 == 0x69446465626D453CLL
              && *(_QWORD *)(v87 + 8) == 0x736E6F69736E656DLL
              && *(_BYTE *)(v87 + 16) == 62)
            {
LABEL_135:
              __p = 0;
              v85 = 0;
              v86 = 0;
              kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
              kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v79, v48);
              goto LABEL_137;
            }
            v20 = *((_QWORD *)&v87 + 1);
          }
          if (v20 != 15)
            goto LABEL_52;
          if (*(_QWORD *)v87 == 0x656E67697373413CLL && *(_QWORD *)(v87 + 7) == 0x3E656C6261546465)
          {
LABEL_134:
            __p = 0;
            v85 = 0;
            v86 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v80, v47);
            goto LABEL_137;
          }
          v20 = *((_QWORD *)&v87 + 1);
LABEL_52:
          if (v20 != 18)
            goto LABEL_61;
          if (*(_QWORD *)v87 == 0x6E6569646172473CLL
            && *(_QWORD *)(v87 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v87 + 16) == 15973)
          {
LABEL_136:
            __p = 0;
            v85 = 0;
            v86 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p, v14, v15);
            *(_DWORD *)(a1 + 448) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&__p);
            goto LABEL_137;
          }
          v20 = *((_QWORD *)&v87 + 1);
LABEL_61:
          if (v20 == 9)
          {
            v30 = *(_QWORD *)v87 == 0x6461724778614D3CLL && *(_BYTE *)(v87 + 8) == 62;
            v31 = v9;
            if (v30)
              goto LABEL_92;
            v20 = *((_QWORD *)&v87 + 1);
          }
          if (v20 == 15)
          {
            v32 = *(_QWORD *)v87 == 0x61526E7261654C3CLL && *(_QWORD *)(v87 + 7) == 0x3E66656F43657461;
            v31 = v81;
            if (v32)
              goto LABEL_92;
            v20 = *((_QWORD *)&v87 + 1);
          }
          if (v20 != 14)
            goto LABEL_177;
          v16 = (uint64_t *)v87;
LABEL_128:
          v44 = *v16;
          v45 = *(uint64_t *)((char *)v16 + 6);
          if (v44 != 0x6E6172546573553CLL || v45 != 0x3E6D726F66736E61)
            goto LABEL_177;
          kaldi::ReadBasicType<BOOL>(a2, a3, v8, v14, v15);
        }
      }
    }
    else
    {
      v16 = (uint64_t *)&v87;
      switch(HIBYTE(v88))
      {
        case 9:
          goto LABEL_87;
        case 0xA:
          goto LABEL_82;
        case 0xB:
          v17 = (_QWORD)v87 == 0x756F72476D754E3CLL && *(_QWORD *)((char *)&v87 + 3) == 0x3E7370756F72476DLL;
          v18 = (uint64_t)v11;
          if (!v17)
          {
            v19 = (_QWORD)v87 == 0x6C6261546D754E3CLL && *(_QWORD *)((char *)&v87 + 3) == 0x3E73656C6261546DLL;
            v18 = (uint64_t)v10;
            if (!v19)
              goto LABEL_80;
          }
          goto LABEL_75;
        case 0xC:
          if ((_QWORD)v87 == 0x69536261636F563CLL && DWORD2(v87) == 1047750010)
            goto LABEL_94;
LABEL_80:
          if (HIBYTE(v88) == 9)
            goto LABEL_87;
          if (HIBYTE(v88) != 10)
            goto LABEL_177;
LABEL_82:
          if ((_QWORD)v87 == 0x6D65744978614D3CLL && WORD4(v87) == 15987)
            goto LABEL_93;
LABEL_86:
          if (HIBYTE(v88) == 9)
            goto LABEL_87;
          goto LABEL_177;
        case 0xE:
          goto LABEL_128;
        case 0xF:
          goto LABEL_115;
        case 0x11:
          if ((_QWORD)v87 == 0x69446465626D453CLL
            && *((_QWORD *)&v87 + 1) == 0x736E6F69736E656DLL
            && v88 == 62)
          {
            goto LABEL_135;
          }
          if (HIBYTE(v88) == 9)
            goto LABEL_87;
          if (HIBYTE(v88) == 14)
            goto LABEL_127;
          if (HIBYTE(v88) != 15)
            goto LABEL_177;
LABEL_115:
          if ((_QWORD)v87 == 0x656E67697373413CLL && *(_QWORD *)((char *)&v87 + 7) == 0x3E656C6261546465)
            goto LABEL_134;
          switch(HIBYTE(v88))
          {
            case 9u:
LABEL_87:
              v35 = (_QWORD)v87 == 0x6461724778614D3CLL && BYTE8(v87) == 62;
              v31 = v9;
              if (!v35)
                goto LABEL_177;
              break;
            case 0xEu:
LABEL_127:
              v16 = (uint64_t *)&v87;
              goto LABEL_128;
            case 0xFu:
LABEL_122:
              v43 = (_QWORD)v87 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v87 + 7) == 0x3E66656F43657461;
              v31 = v81;
              if (!v43)
              {
LABEL_177:
                kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 408);
                v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
                if (v88 >= 0)
                  v76 = &v87;
                else
                  v76 = (__int128 *)v87;
                if (v88 >= 0)
                  v77 = HIBYTE(v88);
                else
                  v77 = *((_QWORD *)&v87 + 1);
                v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v76, v77);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)", a typo in config? (NumGroups|VocabSizes|MaxDimensions|EmbedDimensions|LearnRateCoef)", 86);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
              }
              break;
            default:
              goto LABEL_177;
          }
          return;
        case 0x12:
          if ((_QWORD)v87 == 0x6E6569646172473CLL
            && *((_QWORD *)&v87 + 1) == 0x7079546D726F4E74
            && (unsigned __int16)v88 == 15973)
          {
            goto LABEL_136;
          }
          if (HIBYTE(v88) == 15)
            goto LABEL_122;
          if (HIBYTE(v88) == 14)
            goto LABEL_127;
          goto LABEL_86;
        default:
          goto LABEL_177;
      }
LABEL_92:
      kaldi::ReadBasicType<float>(a2, a3, v31, v14, v15);
    }
  }
  v49 = (_QWORD *)(a1 + 208);
  std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize((uint64_t *)(a1 + 208), *(int *)(a1 + 200));
  if (*v10 >= 1)
  {
    v50 = 0;
    v51 = 0;
    do
    {
      v52 = operator new();
      *(_QWORD *)v52 = 0;
      *(_BYTE *)(v52 + 8) = 0;
      v53 = (kaldi::CompressedMatrix **)(*v49 + v50);
      __p = 0;
      v54 = *v53;
      *v53 = (kaldi::CompressedMatrix *)v52;
      if (v54)
        std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)v53, v54);
      v55 = (kaldi::CompressedMatrix *)__p;
      __p = 0;
      if (v55)
        std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)&__p, v55);
      kaldi::CompressedMatrix::Read(*(_QWORD *)(*v49 + v50), a2, a3, a4);
      ++v51;
      v50 += 8;
    }
    while (v51 < *v10);
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
  v56 = *(_QWORD **)(a1 + 256);
  v57 = *(_QWORD **)(a1 + 264);
  while (v56 != v57)
  {
    if (*v56)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v56 + 8))(*v56);
      *v56 = 0;
    }
    ++v56;
  }
  if (*v8 && *v11 >= 1)
  {
    v58 = 0;
    v59 = (char **)(a1 + 256);
    do
    {
      kaldi::ExpectToken(a2, a3, (kaldi *)"<FeatureTransform>");
      v60 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
      if (!v60
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 425);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"failed to read feature transform", 32);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      v62 = v61;
      kaldi::ExpectToken(a2, a3, (kaldi *)"</Component>");
      v64 = *(_QWORD **)(a1 + 264);
      v63 = *(_QWORD *)(a1 + 272);
      if ((unint64_t)v64 >= v63)
      {
        v66 = ((char *)v64 - *v59) >> 3;
        if ((unint64_t)(v66 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v67 = v63 - (_QWORD)*v59;
        v68 = v67 >> 2;
        if (v67 >> 2 <= (unint64_t)(v66 + 1))
          v68 = v66 + 1;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
          v69 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v69 = v68;
        if (v69)
          v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 272, v69);
        else
          v70 = 0;
        v71 = &v70[8 * v66];
        *(_QWORD *)v71 = v62;
        v65 = v71 + 8;
        v73 = *(char **)(a1 + 256);
        v72 = *(char **)(a1 + 264);
        if (v72 != v73)
        {
          do
          {
            v74 = *((_QWORD *)v72 - 1);
            v72 -= 8;
            *((_QWORD *)v71 - 1) = v74;
            v71 -= 8;
          }
          while (v72 != v73);
          v72 = *v59;
        }
        *(_QWORD *)(a1 + 256) = v71;
        *(_QWORD *)(a1 + 264) = v65;
        *(_QWORD *)(a1 + 272) = &v70[8 * v69];
        if (v72)
          operator delete(v72);
      }
      else
      {
        *v64 = v62;
        v65 = v64 + 1;
      }
      *(_QWORD *)(a1 + 264) = v65;
      ++v58;
    }
    while (v58 < *(_DWORD *)(a1 + 96));
  }
  *(_BYTE *)(a1 + 16) = 0;
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  if (SHIBYTE(v88) < 0)
    operator delete((void *)v87);
}

void sub_1DE4CC01C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WriteConfig(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  std::string __p;
  void *v37[2];
  uint64_t v38;

  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  kaldi::WriteToken(a2, a3, (kaldi *)"<NumGroups>", a4, a5);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<NumTables>", v8, v9);
  kaldi::WriteBasicType<int>(a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<VocabSizes>", v10, v11);
  kaldi::JoinVectorToString<int>((_QWORD *)(a1 + 104), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v12, v13);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxItems>", v14, v15);
  kaldi::JoinVectorToString<int>((_QWORD *)(a1 + 128), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v16, v17);
  kaldi::WriteToken(a2, a3, (kaldi *)"<EmbedDimensions>", v18, v19);
  kaldi::JoinVectorToString<int>((_QWORD *)(a1 + 152), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v20, v21);
  kaldi::WriteToken(a2, a3, (kaldi *)"<AssignedTable>", v22, v23);
  kaldi::JoinVectorToString<int>((_QWORD *)(a1 + 176), ",", (uint64_t)v37);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)v37, v24, v25);
  kaldi::WriteToken(a2, a3, (kaldi *)"<LearnRateCoef>", v26, v27);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<GradientNormType>", v28, v29);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 448), &__p);
  kaldi::WriteToken(a2, (uint64_t)a3, (char *)&__p, v30, v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, (kaldi *)"<MaxGrad>", v32, v33);
  kaldi::WriteBasicType<float>((uint64_t)a2, (int)a3);
  kaldi::WriteToken(a2, a3, (kaldi *)"<UseTransform>", v34, v35);
  kaldi::WriteBasicType<BOOL>(a2, (char)a3, *(unsigned __int8 *)(a1 + 460));
  if (SHIBYTE(v38) < 0)
    operator delete(v37[0]);
}

void sub_1DE4CC258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WriteData(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4)
{
  uint64_t v8;
  const char *v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t *v12;
  _QWORD *result;
  uint64_t v14;
  const char *v15;
  uint64_t *v16;
  uint64_t *i;
  uint64_t v18;
  uint64_t v19;
  const char *v20;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  (*(void (**)(uint64_t, _QWORD *, const char *))(*(_QWORD *)a1 + 168))(a1, a2, a3);
  v10 = *(uint64_t ***)(a1 + 208);
  v11 = *(uint64_t ***)(a1 + 216);
  while (v10 != v11)
  {
    v12 = *v10++;
    kaldi::CompressedMatrix::Write(v12, a2, (int)a3, a4, v9);
  }
  result = kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v8, v9);
  if (*(_BYTE *)(a1 + 460))
  {
    v16 = *(uint64_t **)(a1 + 256);
    for (i = *(uint64_t **)(a1 + 264); v16 != i; result = kaldi::WriteToken(a2, a3, (kaldi *)"</Component>", v19, v20))
    {
      kaldi::WriteToken(a2, a3, (kaldi *)"<FeatureTransform>", v14, v15);
      v18 = *v16++;
      kaldi::nnet1::Component::Write(v18, a2, (uint64_t)a3, a4);
    }
  }
  return result;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::NumParams(_QWORD *a1)
{
  uint64_t **v1;
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  v1 = (uint64_t **)a1[26];
  v2 = (uint64_t **)a1[27];
  if (v1 == v2)
  {
    v3 = 0;
  }
  else
  {
    LODWORD(v3) = 0;
    do
    {
      v4 = **v1;
      if (v4)
        LODWORD(v4) = *(_DWORD *)(v4 + 12) * *(_DWORD *)(v4 + 8);
      v3 = (v4 + v3);
      ++v1;
    }
    while (v1 != v2);
  }
  v5 = (uint64_t *)a1[32];
  v6 = (uint64_t *)a1[33];
  while (v5 != v6)
  {
    v7 = *v5++;
    v3 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7) + v3;
  }
  return v3;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::GetParams(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  __n128 v10;
  uint64_t **v11;
  uint64_t **v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a2, v4, 1, v5, v6);
  v11 = (uint64_t **)a1[26];
  v12 = (uint64_t **)a1[27];
  if (v11 == v12)
  {
    v16 = 0;
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = *v11;
      v15 = **v11;
      if (v15)
        LODWORD(v15) = *(_DWORD *)(v15 + 12) * *(_DWORD *)(v15 + 8);
      v26 = 0;
      v27 = 0;
      v16 = v15 + v13;
      if ((v15 + v13) > *(_DWORD *)(a2 + 8))
        kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v9);
      v25 = *(_QWORD *)a2 + 4 * v13;
      LODWORD(v26) = v15;
      v10.n128_f64[0] = kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v25, v14, v7, v8, v9);
      ++v11;
      v13 = v16;
    }
    while (v11 != v12);
  }
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v18 = (_QWORD *)a1[32];
  v17 = (_QWORD *)a1[33];
  while (v18 != v17)
  {
    (*(void (**)(_QWORD, uint64_t *, __n128))(*(_QWORD *)*v18 + 184))(*v18, &v25, v10);
    v23 = 0;
    v24 = 0;
    v22 = 0;
    if ((v26 + v16) > *(_DWORD *)(a2 + 8))
      kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v21);
    v22 = *(_QWORD *)a2 + 4 * v16;
    LODWORD(v23) = v26;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v22, (uint64_t)&v25, v19, v20, v21);
    v16 += v26;
    ++v18;
  }
  if (v16 != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"GetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x27E, "shift == wei_copy->Dim()", v9);
  kaldi::Vector<float>::Destroy((uint64_t)&v25);
}

void sub_1DE4CC5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::SetParams(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  const char *v6;
  uint64_t **v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check((uint64_t)a1);
  v4 = *(_DWORD *)(a2 + 8);
  result = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  if (v4 != (_DWORD)result)
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x284, "wei_src.Dim() == NumParams()", v6);
  v7 = (uint64_t **)a1[26];
  v8 = (uint64_t **)a1[27];
  if (v7 != v8)
  {
    v9 = 0;
    while (1)
    {
      v10 = *v7;
      v11 = **v7;
      if (v11)
        LODWORD(v11) = *(_DWORD *)(v11 + 12) * *(_DWORD *)(v11 + 8);
      v19 = 0;
      v20 = 0;
      v12 = v11 + v9;
      if ((v11 + v9) > *(_DWORD *)(a2 + 8))
        break;
      v18 = (char *)(*(_QWORD *)a2 + 4 * v9);
      LODWORD(v19) = v11;
      result = kaldi::CompressedMatrix::CopyRowsFromVec<float>(v10, &v18);
      ++v7;
      v9 = v12;
      if (v7 == v8)
        goto LABEL_10;
    }
LABEL_17:
    kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v6);
  }
  v12 = 0;
LABEL_10:
  v14 = (_QWORD *)a1[32];
  v13 = (_QWORD *)a1[33];
  if (v14 != v13)
  {
    while (1)
    {
      v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v14 + 176))(*v14);
      v16 = *v14;
      v19 = 0;
      v20 = 0;
      v17 = v15 + v12;
      if ((v15 + v12) > *(_DWORD *)(a2 + 8))
        goto LABEL_17;
      v18 = (char *)(*(_QWORD *)a2 + 4 * v12);
      LODWORD(v19) = v15;
      result = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v16 + 192))(v16, &v18);
      ++v14;
      v12 = v17;
      if (v14 == v13)
        goto LABEL_15;
    }
  }
  v17 = v12;
LABEL_15:
  if (v17 != *(_DWORD *)(a2 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"SetParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x290, "shift == wei_src.Dim()", v6);
  return result;
}

float kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::SumParams(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  kaldi::CompressedMatrix **v6;
  kaldi::CompressedMatrix **v7;
  float v8;
  kaldi::CompressedMatrix *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;

  v6 = (kaldi::CompressedMatrix **)a1[26];
  v7 = (kaldi::CompressedMatrix **)a1[27];
  v8 = 0.0;
  while (v6 != v7)
  {
    v9 = *v6++;
    v8 = v8 + kaldi::CompressedMatrix::Sum(v9, a2, a3, a4, a5);
  }
  v11 = (uint64_t *)a1[32];
  v10 = (uint64_t *)a1[33];
  while (v11 != v10)
  {
    v12 = *v11++;
    v8 = v8 + (*(float (**)(uint64_t))(*(_QWORD *)v12 + 208))(v12);
  }
  return v8;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::PerturbParams()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "PerturbParams", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 661);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Info(_QWORD *a1)
{
  kaldi::nnet1 **v2;
  kaldi::nnet1 **i;
  _QWORD *v4;
  const kaldi::CompressedMatrix *v5;
  void *p_p;
  uint64_t v7;
  uint64_t v8;
  uint64_t j;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  void *__p;
  uint64_t v17;
  unsigned __int8 v18;
  _QWORD v19[11];
  char v20;
  uint64_t v21;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  (*(void (**)(_QWORD *, _QWORD *, _QWORD))(*a1 + 168))(a1, v19, 0);
  v2 = (kaldi::nnet1 **)a1[26];
  for (i = (kaldi::nnet1 **)a1[27]; v2 != i; ++v2)
  {
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n## Embedding Table: ", 21);
    kaldi::nnet1::MomentStatistics((uint64_t *)&__p, *v2, v5);
    if ((v18 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v18 & 0x80u) == 0)
      v7 = v18;
    else
      v7 = v17;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, v7);
    if ((char)v18 < 0)
      operator delete(__p);
  }
  v8 = a1[32];
  for (j = a1[33]; v8 != j; v8 += 8)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n## Feature Transform: input-dim ", 33);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", output-dim ", 13);
    v11 = (_QWORD *)std::ostream::operator<<();
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
    (*(void (**)(void **__return_ptr))(**(_QWORD **)v8 + 64))(&__p);
    if ((v18 & 0x80u) == 0)
      v13 = &__p;
    else
      v13 = __p;
    if ((v18 & 0x80u) == 0)
      v14 = v18;
    else
      v14 = v17;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    if ((char)v18 < 0)
      operator delete(__p);
  }
  std::stringbuf::str();
  v19[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v19[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v20 < 0)
    operator delete((void *)v19[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v21);
}

void sub_1DE4CCA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MomentStatistics(kaldi::nnet1 *this, const kaldi::CompressedMatrix *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  char *v11[3];
  _BYTE v12[40];

  kaldi::Matrix<float>::Matrix(v12, this);
  v2 = kaldi::MatrixBase<float>::NumRows((uint64_t)v12);
  v3 = kaldi::MatrixBase<float>::NumCols((uint64_t)v12);
  memset(v11, 0, sizeof(v11));
  kaldi::Vector<float>::Resize((void **)v11, (v3 * v2), 0, v4, v5);
  kaldi::VectorBase<float>::CopyRowsFromMat(v11, (uint64_t)v12);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v11, v6, v7, v8, v9);
  kaldi::Vector<float>::Destroy((uint64_t)v11);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v12);
}

void sub_1DE4CCB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  kaldi::Vector<float>::Destroy((uint64_t)&a9);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InfoGradient(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"No intermediate gradients for embedding tables, here is the gradient info for the transforms: ", 94);
  v2 = *(_QWORD *)(a1 + 256);
  for (i = *(_QWORD *)(a1 + 264); v2 != i; v2 += 8)
  {
    (*(void (**)(void **__return_ptr))(**(_QWORD **)v2 + 72))(__p);
    if ((v9 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v9 & 0x80u) == 0)
      v5 = v9;
    else
      v5 = (uint64_t)__p[1];
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n", 1);
    if ((char)v9 < 0)
      operator delete(__p[0]);
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1DF0ECF6C](&v12);
}

void sub_1DE4CCC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::SetTrainOptions(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v6;

  v2 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(result + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(result + 56) = v2;
  v3 = *(uint64_t **)(result + 256);
  for (i = *(uint64_t **)(result + 264);
        v3 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 264))(v6, a2))
  {
    v6 = *v3++;
  }
  return result;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  unsigned int v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  void *v38;
  __int128 v39;
  __int128 v40;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x2AC, "in.NumCols() == input_dim_", v8);
  if (a4)
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x2AE, "batch_idx == 0", v8);
  v9 = *(_QWORD *)(a3 + 32);
  v34 = *(_DWORD *)(a2 + 20);
  kaldi::CuMatrixBase<float>::SetZero(a3);
  v33 = a3;
  if (*(_BYTE *)(a1 + 460))
  {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 280), *(int *)(a1 + 96));
    LODWORD(v11) = *(_DWORD *)(a1 + 96);
    if ((int)v11 < 1)
    {
      LODWORD(v14) = 0;
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        v15 = *(_QWORD *)(a1 + 280) + v12;
        *(_QWORD *)(v15 + 32) = v9;
        kaldi::CuMatrix<float>::Resize(v15, v34, *(unsigned int *)(*(_QWORD *)(a1 + 152) + 4 * v13), 0, 0);
        v16 = *(_QWORD *)(a1 + 280) + v12;
        v17 = *(uint64_t **)(*(_QWORD *)(a1 + 208) + 8 * *(int *)(*(_QWORD *)(a1 + 176) + 4 * v13));
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v38, a2, 0, *(_DWORD *)(a2 + 20), v14, *(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v13));
        kaldi::CuMatrixBase<float>::SummarizeVec(v16, v17, (uint64_t)&v38, v18, v19);
        v38 = &unk_1EA926508;
        v39 = 0u;
        v40 = 0u;
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v38);
        v14 = (const char *)(*(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v13++) + (_DWORD)v14);
        v11 = *(int *)(a1 + 96);
        v12 += 48;
      }
      while (v13 < v11);
    }
    if ((_DWORD)v14 != *(_DWORD *)(a1 + 8))
      kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x2BC, "shift == input_dim_", v10);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 304), (int)v11);
    if (*(int *)(a1 + 96) >= 1)
    {
      v28 = 0;
      v29 = 0;
      do
      {
        v30 = *(_QWORD *)(a1 + 304) + v28;
        *(_QWORD *)(v30 + 32) = v9;
        kaldi::nnet1::Component::Propagate(*(_DWORD **)(*(_QWORD *)(a1 + 256) + 8 * v29), *(_QWORD *)(a1 + 280) + v28, v30, 0);
        kaldi::CuMatrixBase<float>::AddMat(v33, *(_QWORD *)(a1 + 304) + v28, 111, v31, v32, 1.0, 1.0);
        ++v29;
        v28 += 48;
      }
      while (v29 < *(int *)(a1 + 96));
    }
  }
  else if (*(int *)(a1 + 96) >= 1)
  {
    v20 = a3;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = *(_QWORD *)(a1 + 152);
    do
    {
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v38, v20, 0, *(_DWORD *)(v20 + 20), v22, *(_DWORD *)(v24 + 4 * v21));
      v25 = *(uint64_t **)(*(_QWORD *)(a1 + 208) + 8 * *(int *)(*(_QWORD *)(a1 + 176) + 4 * v21));
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v35, a2, 0, *(_DWORD *)(a2 + 20), v23, *(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v21));
      kaldi::CuMatrixBase<float>::SummarizeVec((uint64_t)&v38, v25, (uint64_t)&v35, v26, v27);
      v35 = &unk_1EA926508;
      v36 = 0u;
      v37 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v35);
      v38 = &unk_1EA926508;
      v39 = 0u;
      v40 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&v38);
      v24 = *(_QWORD *)(a1 + 152);
      v22 = (const char *)(*(_DWORD *)(v24 + 4 * v21) + (_DWORD)v22);
      v23 = (const char *)(*(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v21++) + (_DWORD)v23);
      v20 = a3;
    }
    while (v21 < *(int *)(a1 + 96));
  }
}

void sub_1DE4CD04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;

  a11 = v16 + 16;
  *v18 = 0u;
  v18[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a11);
  a16 = v16 + 16;
  *v17 = 0u;
  v17[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a16);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::SetGradientNormalization(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD v9[34];

  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  v6 = *(uint64_t **)(a1 + 256);
  v7 = *(uint64_t **)(a1 + 264);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v8 + 240))(v8, a2, a3);
  }
  if ((_DWORD)a2 == 3)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9, "SetGradientNormalization", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 735);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"RMSPROP is not implemented in word multi embedding yet", 54);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    }
  }
  else
  {
    *(float *)(a1 + 452) = a3;
    *(_DWORD *)(a1 + 448) = a2;
  }
}

void sub_1DE4CD184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

float kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::GetNormalizedLearningRate(uint64_t a1)
{
  int v1;

  if (!*(_BYTE *)(a1 + 84))
    return *(float *)(a1 + 56);
  v1 = *(_DWORD *)(a1 + 464);
  if (v1 < 1)
    return NAN;
  else
    return *(float *)(a1 + 56) / (float)v1;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::AccumGradients()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 762);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::UpdateWeights()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 846);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  int v18;
  int v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  char v38;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize((void **)a4, v8, 1, v9, v10);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v37 = 0u;
  v36 = 0u;
  v35 = &unk_1EA92DFA8;
  v38 = 0;
  kaldi::nnet1::Component::Propagate((_DWORD *)v11, a2, (uint64_t)&v35, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 232))(v11, a2, a3, 0, 0);
  v15 = *(uint64_t **)(v11 + 232);
  v16 = *(uint64_t **)(v11 + 240);
  if (v15 == v16)
  {
    v19 = 0;
  }
  else
  {
    v17 = 0;
    do
    {
      v18 = *(_DWORD *)(*v15 + 16) * *(_DWORD *)(*v15 + 20);
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v19 = v18 + v17;
      if ((v18 + v17) > *(_DWORD *)(a4 + 8))
        kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v14);
      v32 = *(_QWORD *)a4 + 4 * v17;
      LODWORD(v33) = v18;
      kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v32, *v15++, v12, v13, v14);
      v17 = v19;
    }
    while (v15 != v16);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (*(_BYTE *)(a1 + 460))
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    kaldi::nnet1::Component::Propagate((_DWORD *)v21, a2, (uint64_t)&v35, 0);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    if (*(int *)(a1 + 96) < 1)
    {
      if (!v21)
      {
LABEL_15:
        kaldi::Vector<float>::Destroy((uint64_t)&v32);
        goto LABEL_16;
      }
    }
    else
    {
      v22 = 0;
      v23 = 0;
      do
      {
        v24 = *(_QWORD *)(*(_QWORD *)(v21 + 256) + 8 * v23);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v24 + 224))(v24, *(_QWORD *)(v21 + 280) + v22, a3, &v32);
        v30 = 0;
        v31 = 0;
        v29 = 0;
        if ((v33 + v19) > *(_DWORD *)(a4 + 8))
          kaldi::KaldiAssertFailure_((kaldi *)"SubVector", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h", (const char *)0x226, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v27);
        v29 = *(_QWORD *)a4 + 4 * v19;
        LODWORD(v30) = v33;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v29, (uint64_t)&v32, v25, v26, v27);
        v19 += v33;
        ++v23;
        v22 += 48;
      }
      while (v23 < *(int *)(a1 + 96));
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    goto LABEL_15;
  }
LABEL_16:
  if (v19 != *(_DWORD *)(a4 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"GetGradient", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x392, "shift == gradient_out->Dim()", v20);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v35);
}

void sub_1DE4CD52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[34];

  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::EnsureCorrs((_QWORD *)a1);
  if (*(_BYTE *)(a1 + 460))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19, "CountZeroCorr", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 920);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "Not implemented yet when transforms are used");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  *a3 = 0;
  v10 = *(char **)(a1 + 208);
  v11 = *(char **)(a1 + 216);
  v12 = v11 - v10;
  if (v11 != v10)
  {
    v13 = 0;
    v14 = v12 >> 3;
    if (v14 <= 1)
      v14 = 1;
    do
    {
      v15 = **(_QWORD **)v10;
      if (v15)
        LODWORD(v15) = *(_DWORD *)(v15 + 12) * *(_DWORD *)(v15 + 8);
      v13 += v15;
      *a3 = v13;
      v10 += 8;
      --v14;
    }
    while (v14);
  }
  v16 = *(_QWORD *)(a1 + 232);
  v17 = *(_QWORD *)(a1 + 240);
  *a2 = 0;
  if (v17 != v16)
  {
    v18 = 0;
    do
    {
      *a3 += kaldi::CuMatrixBase<float>::CountZeros(*(_QWORD *)(v16 + 8 * v18++), v6, v7, v8, v9);
      v16 = *(_QWORD *)(a1 + 232);
    }
    while (v18 < (*(_QWORD *)(a1 + 240) - v16) >> 3);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::EnsureCorrs(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = a1 + 29;
  v2 = (uint64_t)(a1[27] - a1[26]) >> 3;
  if (v2 != (uint64_t)(a1[30] - a1[29]) >> 3)
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t)(a1 + 29), v2);
    if (a1[27] != a1[26])
    {
      v4 = 0;
      do
      {
        v5 = operator new();
        v6 = v5;
        v7 = **(_QWORD **)(a1[26] + 8 * v4);
        if (v7)
        {
          v8 = *(unsigned int *)(v7 + 8);
          v9 = *(unsigned int *)(v7 + 12);
        }
        else
        {
          v8 = 0;
          v9 = 0;
        }
        kaldi::CuMatrix<float>::CuMatrix(v5, v8, v9, 0, 0, 0);
        v10 = *(_QWORD *)(*v1 + 8 * v4);
        *(_QWORD *)(*v1 + 8 * v4) = v6;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
        ++v4;
      }
      while (v4 < (uint64_t)(a1[27] - a1[26]) >> 3);
    }
  }
}

void sub_1DE4CD750(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::VectorizeWeightsCorrs()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 949);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::IsUpdatable()
{
  return 0;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::GetType()
{
  return 272;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::GetType()
{
  return 270;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::PerturbParams(_QWORD *a1, float a2)
{
  uint64_t v4;
  const char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t i;
  int v9;
  uint64_t *v10;
  uint64_t *j;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  int v20;
  char v21;
  int v22;
  uint64_t v23;
  _QWORD v24[4];

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check((uint64_t)a1);
  v24[0] = &unk_1EA92DFD8;
  memset(&v24[1], 0, 24);
  v20 = 1729;
  v6 = 5489;
  v21 = 0;
  v22 = 5489;
  v7 = 1;
  for (i = 3; i != 626; ++i)
  {
    v9 = 1812433253 * (v6 ^ (v6 >> 30));
    v6 = v9 + v7;
    *(&v20 + i) = i + v9 - 2;
    ++v7;
  }
  v23 = 0;
  v10 = (uint64_t *)a1[26];
  for (j = (uint64_t *)a1[27]; v10 != j; ++v10)
  {
    kaldi::CuVector<float>::Resize((uint64_t)v24, (*(_DWORD *)(*v10 + 16) * *(_DWORD *)(*v10 + 20)), 1u, v4, v5);
    kaldi::CuRandom::RandGauss<float>(&v20, (uint64_t)v24, 0.0, 1.0);
    v12 = *v10;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v17, (uint64_t)v24, *(_DWORD *)(*v10 + 20));
    kaldi::CuMatrixBase<float>::AddMat(v12, (uint64_t)&v17, 111, v13, v14, a2, 1.0);
    v17 = &unk_1EA926508;
    v18 = 0u;
    v19 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v17);
  }
  v16 = (_QWORD *)a1[32];
  v15 = (_QWORD *)a1[33];
  while (v16 != v15)
  {
    (*(void (**)(_QWORD, float))(*(_QWORD *)*v16 + 216))(*v16, a2);
    ++v16;
  }
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v20);
  v24[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v24);
}

void sub_1DE4CD978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(va);
  kaldi::CuVector<float>::~CuVector((_QWORD *)(v7 - 128));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v10;
  int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  float v21;
  void **v22;
  float v23;
  int v24;
  float v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  float v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  unsigned int *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  _QWORD v41[4];
  void *v42;
  _OWORD v43[2];

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((_QWORD *)a1);
  v11 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 464) = v11;
  if (*(_DWORD *)(a2 + 16) != *(_DWORD *)(a1 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x306, "input.NumCols() == input_dim_", v10);
  if (*(_DWORD *)(a3 + 20) != v11)
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x307, "diff.NumRows() == batch_size", v10);
  if (*(_DWORD *)(a3 + 16) != *(_DWORD *)(a1 + 12))
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x308, "diff.NumCols() == output_dim_", v10);
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 328), *(int *)(a1 + 96));
  if (*(_BYTE *)(a1 + 460) && *(int *)(a1 + 96) >= 1)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(a1 + 328) + v13;
      *(_QWORD *)(v15 + 32) = a4;
      kaldi::nnet1::Component::Backpropagate(*(_DWORD **)(*(_QWORD *)(a1 + 256) + 8 * v14), *(_QWORD *)(a1 + 280) + v13, *(_QWORD *)(a1 + 304) + v13, a3, v15, a5);
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8 * v14);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 232))(v16, *(_QWORD *)(a1 + 280) + v13, a3, a4, a5);
      ++v14;
      v13 += 48;
    }
    while (v14 < *(int *)(a1 + 96));
  }
  v37 = a3;
  if (*(int *)(a1 + 80) > 1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v42, "AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 787);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v42, "WordMultiVecComponent doesn't support multi-batches yet");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v42);
  }
  memset(v43, 0, sizeof(v43));
  v42 = &unk_1EA926508;
  v17 = *(_QWORD *)(a1 + 232);
  if (*(_QWORD *)(a1 + 240) != v17)
  {
    v18 = 0;
    do
    {
      kaldi::CuMatrixBase<float>::SetZero(*(_QWORD *)(v17 + 8 * v18++));
      v17 = *(_QWORD *)(a1 + 232);
    }
    while (v18 < (*(_QWORD *)(a1 + 240) - v17) >> 3);
  }
  if (*(int *)(a1 + 96) < 1)
  {
    v20 = 0;
  }
  else
  {
    v19 = 0;
    v38 = 0;
    v20 = 0;
    v39 = a1 + 352;
    v21 = (float)v11;
    v36 = (unsigned int *)(a1 + 400);
    do
    {
      if (*(_BYTE *)(a1 + 460))
      {
        v22 = (void **)(*(_QWORD *)(a1 + 328) + 48 * v19);
      }
      else
      {
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v40, v37, 0, *(_DWORD *)(v37 + 20), (const char *)v38, *(_DWORD *)(*(_QWORD *)(a1 + 152) + 4 * v19));
        *(_QWORD *)&v43[0] = v41[0];
        *(_OWORD *)((char *)v43 + 8) = *(_OWORD *)&v41[1];
        *((_QWORD *)&v43[1] + 1) = v41[3];
        v40 = &unk_1EA926508;
        memset(v41, 0, sizeof(v41));
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v40);
        v38 += *(_DWORD *)(*(_QWORD *)(a1 + 152) + 4 * v19);
        v22 = &v42;
      }
      v23 = *(float *)(a1 + 452);
      if (v23 > 0.0)
      {
        *(_QWORD *)(a1 + 384) = a4;
        kaldi::CuMatrix<float>::operator=(v39, (uint64_t)v22);
        v24 = *(_DWORD *)(a1 + 448);
        if (v24 == 2)
        {
          v26 = *(unsigned __int8 *)(a1 + 84);
          *(_QWORD *)(a1 + 432) = a4;
          kaldi::CuMatrix<float>::Resize((uint64_t)v36, *(unsigned int *)(a1 + 372), *(unsigned int *)(a1 + 368), 1u, 0);
          if (v26)
            v30 = v21;
          else
            v30 = 1.0;
          v22 = (void **)(a1 + 352);
          kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v39, v36, v23 * v30, v27, v28, v29);
        }
        else
        {
          v22 = (void **)(a1 + 352);
          if (v24 == 1)
          {
            if (*(_BYTE *)(a1 + 84))
              v25 = v21;
            else
              v25 = 1.0;
            v22 = (void **)(a1 + 352);
            kaldi::nnet1::UpdatableComponent::ClipGradient(v39, v23 * v25);
          }
        }
      }
      v31 = *(int *)(*(_QWORD *)(a1 + 176) + 4 * v19);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * v31) + 32) = a4;
      if (*(int *)(*(_QWORD *)(a1 + 128) + 4 * v19) >= 1)
      {
        v32 = 0;
        do
        {
          v33 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * v31);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v40, a2, 0, *(_DWORD *)(a2 + 20), (const char *)(v20 + v32), 1);
          kaldi::CuMatrixBase<float>::AddIndexedRows(v33, (uint64_t)&v40, (uint64_t)v22, v34, v35, 1.0);
          v40 = &unk_1EA926508;
          memset(v41, 0, sizeof(v41));
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v40);
          ++v32;
        }
        while (v32 < *(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v19));
        v20 += v32;
      }
      ++v19;
    }
    while (v19 < *(int *)(a1 + 96));
  }
  if (v20 != *(_DWORD *)(a1 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"AccumGradients", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", (const char *)0x33E, "shift == input_dim_", v12);
  v42 = &unk_1EA926508;
  memset(v43, 0, sizeof(v43));
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v42);
}

void sub_1DE4CDE3C()
{
  __break(1u);
}

void sub_1DE4CDE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _OWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  a22 = v22 + 16;
  *a9 = 0u;
  a9[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a22);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::UpdateWeights(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  float v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v17[34];

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((_QWORD *)a1);
  v9 = *(float *)(a1 + 72);
  v10 = *(_DWORD *)(a1 + 76);
  if (v9 > 0.0 && *(_BYTE *)(a1 + 460))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 857);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "Using transform with gradient compression is not supported yet");
    goto LABEL_19;
  }
  v11 = *(uint64_t **)(a1 + 256);
  v12 = *(uint64_t **)(a1 + 264);
  while (v11 != v12)
  {
    v13 = *v11++;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 256))(v13, a2, a3);
  }
  v14 = *(float *)(a1 + 56);
  if (*(_BYTE *)(a1 + 84))
    v14 = v14 / (float)*(int *)(a1 + 464);
  if (v9 > 0.0)
  {
    if (*(int *)(a1 + 80) < 2)
    {
      if (*(_QWORD *)(a1 + 480) == *(_QWORD *)(a1 + 472))
        kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 472));
      kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 472), v10, v9, v6, v7, v8);
      goto LABEL_13;
    }
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17, "UpdateWeights", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 868);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "the multi batch gradient quantization does not work yet");
LABEL_19:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
LABEL_13:
  v15 = *(_QWORD *)(a1 + 208);
  if (*(_QWORD *)(a1 + 216) != v15)
  {
    v16 = 0;
    do
    {
      kaldi::CuMatrixBase<float>::AddMat(*(_QWORD *)(v15 + 8 * v16), *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * v16), 111, v7, v8, *(float *)(a1 + 456) * (float)-v14, 1.0);
      ++v16;
      v15 = *(_QWORD *)(a1 + 208);
    }
    while (v16 < (*(_QWORD *)(a1 + 216) - v15) >> 3);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  const char *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[2];
  uint64_t v26;
  uint64_t v27;

  if (*(_BYTE *)(a1 + 460))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 957);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "Not implemented yet when transforms are used");
    goto LABEL_25;
  }
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 960);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "Weights are already vectorized");
LABEL_25:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v25, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 963);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Performing vectorization of WordMultiVecComponent", 49);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v25);
  }
  v8 = *(_QWORD *)(a1 + 208);
  if (*(_QWORD *)(a1 + 216) != v8)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(v8 + v9), a2, v25);
      v11 = *(_QWORD *)(a1 + 208);
      v12 = v25[0];
      v25[0] = 0;
      v13 = *(_QWORD *)(v11 + v9);
      *(_QWORD *)(v11 + v9) = v12;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      v14 = v25[0];
      v25[0] = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
      ++v10;
      v8 = *(_QWORD *)(a1 + 208);
      v9 += 8;
    }
    while (v10 < (*(_QWORD *)(a1 + 216) - v8) >> 3);
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  v26 = 0;
  v25[0] = (uint64_t)&unk_1EA926538;
  if (v15 > *(_DWORD *)(a3 + 16))
    kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v16);
  v17 = v15;
  v25[1] = *(_QWORD *)(a3 + 8);
  LODWORD(v26) = v15;
  v27 = *(_QWORD *)(a3 + 24);
  kaldi::CuVectorBase<float>::Set((uint64_t)v25, *(float *)(a1 + 456));
  v18 = *(_DWORD *)(a3 + 16) - v17;
  *(_QWORD *)(a3 + 8) += 4 * (int)v17;
  *(_DWORD *)(a3 + 16) = v18;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((_QWORD *)a1);
  if (a4[1] - *a4 != 32)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 983);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "veccorrs->size() == 1");
    goto LABEL_25;
  }
  if (*(_QWORD *)(a1 + 216) != *(_QWORD *)(a1 + 208))
  {
    v19 = 0;
    v20 = 0;
    do
    {
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 232) + v19), *a4, v25);
      v21 = *(_QWORD *)(a1 + 232);
      v22 = v25[0];
      v25[0] = 0;
      v23 = *(_QWORD *)(v21 + v19);
      *(_QWORD *)(v21 + v19) = v22;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
      v24 = v25[0];
      v25[0] = 0;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
      ++v20;
      v19 += 8;
    }
    while (v20 < (uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3);
  }
  *(_BYTE *)(a1 + 16) = 1;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v25, "VectorizeWeightsCorrs", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-word-multivec-component.cc", 994);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Done  vectorization of WordMultiVecComponent", 44);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v25);
  }
}

void sub_1DE4CE368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::IsUpdatable()
{
  return 1;
}

uint64_t std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    std::vector<kaldi::CuMatrix<float>>::__vdeallocate((void **)a1);
    if (a4 > 0x555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v10;
    std::vector<kaldi::CuMatrix<float>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = a2 + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,0>(a2, v13, (uint64_t)v9);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,0>(a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD **)(a1 + 8);
  if (v16 != v14)
  {
    v17 = v16 - 6;
    v18 = v16 - 6;
    do
    {
      v19 = *v18;
      v18 -= 6;
      result = (*(uint64_t (**)(_QWORD *))(v19 + 16))(v17);
      v20 = v17 == v15;
      v17 = v18;
    }
    while (!v20);
  }
  *(_QWORD *)(a1 + 8) = v15;
  return result;
}

void sub_1DE4CE50C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DE4CE514(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<kaldi::CuMatrix<float>>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  BOOL v8;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      v5 = v3 - 48;
      v6 = v3 - 48;
      do
      {
        v7 = *(_QWORD *)v6;
        v6 -= 48;
        (*(void (**)(char *))(v7 + 16))(v5);
        v8 = v5 == v1;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      kaldi::CuMatrix<float>::operator=(a3, v4);
      v4 += 48;
      a3 += 48;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WordMultiVecComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  int v4;
  char **v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  kaldi::CompressedMatrix **v25;
  kaldi::CompressedMatrix *v26;
  kaldi::CompressedMatrix *v27;
  kaldi::CompressedMatrix *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  kaldi::CompressedMatrix *v33;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1EA9284D0;
  *(_OWORD *)(a1 + 56) = xmmword_1DEC3D450;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)(a1 + 88) = &unk_1EA92A030;
  *(_QWORD *)a1 = &unk_1EA929F00;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 104), *(const void **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 128), *(const void **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 2);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 152), *(const void **)(a2 + 152), *(_QWORD *)(a2 + 160), (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 176), *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 2);
  v4 = *(_DWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 200) = v4;
  v5 = (char **)(a1 + 256);
  v32 = a1 + 280;
  *(_QWORD *)(a1 + 352) = &unk_1EA92DFA8;
  v30 = a1 + 328;
  v31 = a1 + 304;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_QWORD *)(a1 + 400) = &unk_1EA92DFA8;
  *(_BYTE *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_BYTE *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  v6 = *(unsigned __int8 *)(a2 + 460);
  *(_BYTE *)(a1 + 460) = v6;
  if (v6 && *(int *)(a1 + 96) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 256) + 8 * v7);
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      v10 = v9;
      v12 = *(uint64_t **)(a1 + 264);
      v11 = *(_QWORD *)(a1 + 272);
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v5) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v5;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 272, v17);
        else
          v18 = 0;
        v19 = (uint64_t *)&v18[8 * v14];
        *v19 = v10;
        v13 = v19 + 1;
        v21 = *(char **)(a1 + 256);
        v20 = *(char **)(a1 + 264);
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v19 = v22;
          }
          while (v20 != v21);
          v20 = *v5;
        }
        *(_QWORD *)(a1 + 256) = v19;
        *(_QWORD *)(a1 + 264) = v13;
        *(_QWORD *)(a1 + 272) = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v9;
        v13 = v12 + 1;
      }
      *(_QWORD *)(a1 + 264) = v13;
      ++v7;
    }
    while (v7 < *(int *)(a1 + 96));
  }
  if (v32 != a2 + 280)
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v32, *(_QWORD *)(a2 + 280), *(_QWORD *)(a2 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 4));
  if (v31 != a2 + 304)
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v31, *(_QWORD *)(a2 + 304), *(_QWORD *)(a2 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 312) - *(_QWORD *)(a2 + 304)) >> 4));
  if (v30 != a2 + 328)
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v30, *(_QWORD *)(a2 + 328), *(_QWORD *)(a2 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 336) - *(_QWORD *)(a2 + 328)) >> 4));
  kaldi::CuMatrix<float>::operator=(a1 + 352, a2 + 352);
  kaldi::CuMatrix<float>::operator=(a1 + 400, a2 + 400);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  *(_DWORD *)(a1 + 452) = *(_DWORD *)(a2 + 452);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 464);
  std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize((uint64_t *)(a1 + 208), (uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 3);
  if (*(_QWORD *)(a1 + 216) != *(_QWORD *)(a1 + 208))
  {
    v23 = 0;
    v24 = 0;
    do
    {
      kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::CuMatrixBase<float>>(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v23), (uint64_t *)&v33);
      v25 = (kaldi::CompressedMatrix **)(*(_QWORD *)(a1 + 208) + v23);
      v26 = v33;
      v33 = 0;
      v27 = *v25;
      *v25 = v26;
      if (v27)
        std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)v25, v27);
      v28 = v33;
      v33 = 0;
      if (v28)
        std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)&v33, v28);
      ++v24;
      v23 += 8;
    }
    while (v24 < (uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3);
  }
  if (*(_QWORD *)(a2 + 480) != *(_QWORD *)(a2 + 472))
    kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InitResidualAggregator(a1, (uint64_t *)(a1 + 472));
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  return a1;
}

void sub_1DE4CEA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, kaldi::nnet1::QuantizerResidualAggregator *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  kaldi::nnet1::UpdatableComponent *v20;
  void *v22;
  void *v23;
  void *v24;

  v22 = *a10;
  if (*a10)
  {
    *((_QWORD *)v20 + 20) = v22;
    operator delete(v22);
  }
  v23 = *a11;
  if (*a11)
  {
    *((_QWORD *)v20 + 17) = v23;
    operator delete(v23);
  }
  v24 = *a12;
  if (*a12)
  {
    *((_QWORD *)v20 + 14) = v24;
    operator delete(v24);
  }
  kaldi::CuMatrixBase<float>::~CuMatrixBase(a13);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v20);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::CuMatrixBase<float>>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t result;

  v4 = operator new();
  result = kaldi::CompressedMatrix::CompressedMatrix<float>(v4, a1, v5, v6, v7);
  *a2 = v4;
  return result;
}

void sub_1DE4CEB7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10C0C40E6EFC850);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CompressedMatrix::CompressedMatrix<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  float *v7[5];

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  kaldi::Matrix<float>::Matrix<float>((uint64_t)v7, a2, 111, a4, a5);
  kaldi::CompressedMatrix::CopyFromMat<float>(a1, v7);
  kaldi::Matrix<float>::~Matrix((uint64_t)v7);
  return a1;
}

void sub_1DE4CEBF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((_QWORD *)v11 + 4) = 0;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (kaldi::CompressedMatrix **)*v2);
    operator delete(**a1);
  }
}

void std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, kaldi::CompressedMatrix **a2)
{
  kaldi::CompressedMatrix **v4;
  kaldi::CompressedMatrix **v5;
  kaldi::CompressedMatrix *v6;

  v4 = *(kaldi::CompressedMatrix ***)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 1;
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
        std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)v5, v6);
    }
    while (v5-- != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - *a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[8 * v10];
    v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    v16 = &v15[8 * a2];
    std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::unique_ptr<kaldi::CompressedMatrix>>::~__split_buffer((uint64_t)&v14);
  }
}

void sub_1DE4CEE90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<kaldi::CompressedMatrix>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = (_QWORD *)(a7 - 8);
    v9 = (_QWORD *)(a7 - 8);
    do
    {
      v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((_QWORD *)&v16 + 1) = v8;
      v7 -= 8;
      v8 = v9;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>::operator()[abi:ne180100](uint64_t a1)
{
  kaldi::CompressedMatrix **v1;
  kaldi::CompressedMatrix **v2;
  kaldi::CompressedMatrix *v3;

  v1 = *(kaldi::CompressedMatrix ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(kaldi::CompressedMatrix ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *v1;
    *v1 = 0;
    if (v3)
      std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)v1, v3);
    ++v1;
  }
}

uint64_t std::__split_buffer<std::unique_ptr<kaldi::CompressedMatrix>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::unique_ptr<kaldi::CompressedMatrix>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::unique_ptr<kaldi::CompressedMatrix>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  kaldi::CompressedMatrix *v5;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v5 = *(kaldi::CompressedMatrix **)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v5)
      std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100](i - 8, v5);
  }
}

void std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100](int a1, kaldi::CompressedMatrix *this)
{
  if (this)
  {
    kaldi::CompressedMatrix::Destroy(this);
    JUMPOUT(0x1DF0ED014);
  }
}

kaldi::nnet1::SimplerSimpleRecurrentUnit *kaldi::nnet1::SimplerSimpleRecurrentUnit::SimplerSimpleRecurrentUnit(kaldi::nnet1::SimplerSimpleRecurrentUnit *this, const kaldi::nnet1::Nnet **a2)
{
  uint64_t v4;
  kaldi::nnet1::Nnet **v5;
  char *v6;
  kaldi::nnet1::Nnet *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;

  v4 = *((_QWORD *)*a2 - 5);
  *((_QWORD *)this + 6) = &off_1EA92BCD0;
  *((_QWORD *)this + 7) = *(const kaldi::nnet1::Nnet **)((char *)a2 + v4 + 8);
  *((_WORD *)this + 32) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 12) = &off_1EA92BDA0;
  *((_QWORD *)this + 13) = &off_1EA92BE20;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = &unk_1EA927930;
  *((_DWORD *)this + 36) = 1;
  *(_QWORD *)this = &off_1EA92BB80;
  *((_QWORD *)this + 1) = 0;
  v5 = (kaldi::nnet1::Nnet **)((char *)this + 8);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = &unk_1EA92DFD8;
  v6 = (char *)this + 16;
  v7 = (kaldi::nnet1::Nnet *)operator new();
  kaldi::nnet1::Nnet::Nnet(v7, a2[1]);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](v5, v7);
  kaldi::CuVector<float>::operator=((uint64_t)v6, (uint64_t)(a2 + 2), v8, v9, v10);
  return this;
}

void sub_1DE4CF200(_Unwind_Exception *a1)
{
  uint64_t v1;
  kaldi::nnet1::Component *v2;
  uint64_t v3;
  kaldi::nnet1::HistoricalComponent *v4;
  kaldi::nnet1::Nnet **v5;
  _QWORD *v6;

  kaldi::CuVector<float>::~CuVector(v6);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](v5, 0);
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent(v4);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v3);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SimplerSimpleRecurrentUnit::PropagateFnc(uint64_t **a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  void *v37;
  __int128 v38;
  __int128 v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[48];
  void *v44;
  __int128 v45;
  __int128 v46;
  char v47;

  v5 = *(unsigned int *)(a2 + 20);
  v6 = *a1;
  if ((_DWORD)v5 != *(_DWORD *)((char *)a1 + *(*a1 - 8) + 40))
    kaldi::KaldiAssertFailure_((kaldi *)"PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)0x15, "batch_size == num_utts", a5);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v44, "PropagateFnc", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", 23, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"Running forward propagation for batch size = ", 45);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", which contains ", 17);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" frames each from ", 18);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v44);
    v6 = *a1;
  }
  ((void (*)(uint64_t **))v6[18])(a1);
  v15 = (uint64_t)&(*(uint64_t **)((char *)a1 + *(*a1 - 8) + 8))[6 * (int)a4];
  if (!*(_DWORD *)(v15 + 20))
  {
    v16 = ((uint64_t (*)(uint64_t **))(*a1)[9])(a1);
    kaldi::CuMatrix<float>::Resize(v15, v5, v16, 0, 0);
    kaldi::CuMatrixBase<float>::CopyRowsFromVec(v15, (uint64_t)(a1 + 2));
  }
  v46 = 0u;
  v45 = 0u;
  v44 = &unk_1EA92DFA8;
  v47 = 0;
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(a1[1], a2, (uint64_t)&v44, a4, v14);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v43, v5, *(unsigned int *)((char *)a1 + *(*a1 - 5) + 12), 1u, 0, 0);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v37, (uint64_t)&v44, 0, SHIDWORD(v45), 0, *(_DWORD *)((char *)a1 + *(*a1 - 5) + 12));
  kaldi::CuMatrixBase<float>::Sigmoid((uint64_t)v43, (uint64_t)&v37, v17, v18, v19);
  v37 = &unk_1EA926508;
  v38 = 0u;
  v39 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v37);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v40, (uint64_t)&v44, 0, SHIDWORD(v45), (const char *)*(unsigned int *)((char *)a1 + *(*a1 - 5) + 12), *(_DWORD *)((char *)a1 + *(*a1 - 5) + 12));
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)&v37, v5, *(unsigned int *)((char *)a1 + *(*a1 - 5) + 12), 1u, 0, 0);
  kaldi::CuMatrixBase<float>::Set((uint64_t)&v37, v20, v21, v22, v23, 1.0);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v37, (uint64_t)v43, 111, v24, v25, -1.0, 1.0);
  kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v37, (uint64_t)&v40, v26, v27, v28);
  kaldi::CuMatrixBase<float>::MulElements(v15, (uint64_t)v43, v29, v30, v31);
  kaldi::CuMatrixBase<float>::AddMat(v15, (uint64_t)&v37, 111, v32, v33, 1.0, 1.0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, v15, 111, v34, v35);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v37);
  v40 = &unk_1EA926508;
  v41 = 0u;
  v42 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v40);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v43);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v44);
}

void sub_1DE4CF580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int128 a16, __int128 a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  a15 = v24 + 16;
  a16 = 0u;
  a17 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a15);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a18);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::PropagateFnc(_QWORD *a1, uint64_t a2, unsigned int *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::SimplerSimpleRecurrentUnit::PropagateFnc((uint64_t **)((char *)a1 + *(_QWORD *)(*a1 - 128)), a2, a3, a4, a5);
}

uint64_t *kaldi::nnet1::SimplerSimpleRecurrentUnit::Info@<X0>(kaldi::nnet1::Nnet **this@<X0>, uint64_t *a2@<X8>)
{
  return kaldi::nnet1::Nnet::Info(a2, this[1]);
}

uint64_t *`virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::Info@<X0>(kaldi::nnet1::SimplerSimpleRecurrentUnit *this@<X0>, uint64_t *a2@<X8>)
{
  return kaldi::nnet1::Nnet::Info(a2, *(kaldi::nnet1::Nnet **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 80) + 8));
}

uint64_t kaldi::nnet1::SimplerSimpleRecurrentUnit::CopyQuantized8Bit(const kaldi::nnet1::Nnet **this)
{
  const void ****v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;

  v2 = (const void ****)operator new();
  kaldi::nnet1::SimplerSimpleRecurrentUnit::SimplerSimpleRecurrentUnit((kaldi::nnet1::SimplerSimpleRecurrentUnit *)v2, this);
  kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable8BitComponentItf>(v2[1], v3, v4, v5, v6);
  return (uint64_t)*(*v2 - 5) + (_QWORD)v2;
}

void sub_1DE4CF698(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10A1C4082FA86A8);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SimplerSimpleRecurrentUnit::CopyQuantized16Bit(const kaldi::nnet1::Nnet **this)
{
  const void ****v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;

  v2 = (const void ****)operator new();
  kaldi::nnet1::SimplerSimpleRecurrentUnit::SimplerSimpleRecurrentUnit((kaldi::nnet1::SimplerSimpleRecurrentUnit *)v2, this);
  kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable16BitComponentItf>(v2[1], v3, v4, v5, v6);
  return (uint64_t)*(*v2 - 5) + (_QWORD)v2;
}

void sub_1DE4CF710(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10A1C4082FA86A8);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::CopyQuantized16Bit(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  return kaldi::nnet1::SimplerSimpleRecurrentUnit::CopyQuantized16Bit((const kaldi::nnet1::Nnet **)((char *)this
                                                                                                  + *(_QWORD *)(*(_QWORD *)this - 32)));
}

void kaldi::nnet1::SimplerSimpleRecurrentUnit::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t ***v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  kaldi::nnet1::Nnet *v13;
  uint64_t v14;
  uint64_t *p_p;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  void *v30;
  void *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  void *__p;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;

  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v45, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", 70, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"Reading SimplerSimpleRecurrentUnit component", 44);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v45);
  }
  __p = 0;
  v43 = 0;
  v8 = (uint64_t ***)(a1 + 8);
  v44 = 0;
  while (1)
  {
    while (1)
    {
      if (kaldi::Peek(a2, a3) != 60)
        goto LABEL_49;
      kaldi::ReadToken(a2, a3, (uint64_t)&__p, v9, v10);
      if (SHIBYTE(v44) < 0)
        break;
      if (HIBYTE(v44) == 5)
      {
        if ((_DWORD)__p != 811557692 || BYTE4(__p) != 62)
          goto LABEL_61;
        goto LABEL_33;
      }
      if (HIBYTE(v44) != 16)
      {
        if (HIBYTE(v44) == 29)
        {
          p_p = (uint64_t *)&__p;
          goto LABEL_38;
        }
        goto LABEL_61;
      }
      if (__p != (void *)0x72547475706E493CLL || v43 != 0x3E6D726F66736E61)
        goto LABEL_61;
LABEL_13:
      v13 = (kaldi::nnet1::Nnet *)operator new();
      kaldi::nnet1::Nnet::Nnet(v13);
      std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)(a1 + 8), v13);
      kaldi::nnet1::Nnet::Read(*v8, a2, a3, a4);
      if (!*v8)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v45, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", 79);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"reading input transform network failed", 38);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v45);
      }
      if (kaldi::g_kaldi_verbose_level >= 2)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v45, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", 81, 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"done", 4);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v45);
      }
    }
    v14 = v43;
    if (v43 != 5)
    {
      if (v43 != 16)
        goto LABEL_36;
      if (*(_QWORD *)__p != 0x72547475706E493CLL || *((_QWORD *)__p + 1) != 0x3E6D726F66736E61)
        goto LABEL_36;
      goto LABEL_13;
    }
    if (*(_DWORD *)__p != 811557692 || *((_BYTE *)__p + 4) != 62)
      break;
LABEL_33:
    kaldi::CuVector<float>::Read(a1 + 16, a2, a3, v11, v10);
  }
  v14 = v43;
LABEL_36:
  if (v14 != 29)
    goto LABEL_61;
  p_p = (uint64_t *)__p;
LABEL_38:
  v19 = *p_p;
  v20 = p_p[1];
  v21 = p_p[2];
  v22 = *(uint64_t *)((char *)p_p + 21);
  v23 = v19 == 0x656C706D69532F3CLL && v20 == 0x52656C706D695372;
  v24 = v23 && v21 == 0x746E657272756365;
  if (!v24 || v22 != 0x3E74696E55746E65)
  {
LABEL_61:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v45, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", 87);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"Unrecognized token ", 19);
    if (v44 >= 0)
      v38 = &__p;
    else
      v38 = __p;
    if (v44 >= 0)
      v39 = HIBYTE(v44);
    else
      v39 = v43;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, v39);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v45);
  }
LABEL_49:
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v45, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", 90, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"done", 4);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v45);
  }
  if (!*v8)
  {
    v40 = "input_transform_";
    v41 = 92;
    goto LABEL_74;
  }
  kaldi::nnet1::Nnet::GetHistoricalComponents((kaldi::nnet1::Nnet *)*v8, &v45);
  v30 = v45;
  v31 = v46;
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (v30 != v31)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v45, "ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", 94);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"Another recurrent neural networks are not supported inside SSRU component.", 74);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v45);
  }
  v32 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 40) + 12);
  if (kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 8), v26, v27, v28, v29) != 2 * v32)
  {
    v40 = "OutputDim()*2 == input_transform_->OutputDim()";
    v41 = 97;
    goto LABEL_74;
  }
  v36 = *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 40) + 8);
  if (v36 != kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(a1 + 8), v33, v34, v35, v10))
  {
    v40 = "InputDim() == input_transform_->InputDim()";
    v41 = 98;
    goto LABEL_74;
  }
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 40) + 12))
  {
    v40 = "hidden_init_.Dim() == OutputDim()";
    v41 = 99;
LABEL_74:
    kaldi::KaldiAssertFailure_((kaldi *)"ReadData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)v41, v40, v10);
  }
  if (SHIBYTE(v44) < 0)
    operator delete(__p);
}

void sub_1DE4CFC68()
{
  uint64_t v0;

  MEMORY[0x1DF0ED014](v0, 0x10B0C4082B712C9);
  JUMPOUT(0x1DE4CFC98);
}

void sub_1DE4CFC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::SimplerSimpleRecurrentUnit::ReadData((uint64_t)a1 + *(_QWORD *)(*a1 - 176), a2, a3, a4);
}

_QWORD *kaldi::nnet1::SimplerSimpleRecurrentUnit::WriteData(uint64_t a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;

  if (!*(_QWORD *)(a1 + 8))
    kaldi::KaldiAssertFailure_((kaldi *)"WriteData", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)0x67, "input_transform_", a5);
  kaldi::WriteToken(a2, a3, (kaldi *)"<InputTransform>", a4, a5);
  kaldi::nnet1::Nnet::Write(*(uint64_t **)(a1 + 8), a2, (uint64_t)a3, a4, v9);
  kaldi::WriteToken(a2, a3, (kaldi *)"<c_0>", v10, v11);
  kaldi::CuVectorBase<float>::Write((_DWORD *)(a1 + 16), a2, (int)a3, v12, v13);
  return kaldi::WriteToken(a2, a3, (kaldi *)"</SimplerSimpleRecurrentUnit>", v14, v15);
}

_QWORD *`virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::WriteData(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::SimplerSimpleRecurrentUnit::WriteData((uint64_t)a1 + *(_QWORD *)(*a1 - 120), a2, a3, a4, a5);
}

uint64_t *kaldi::nnet1::SimplerSimpleRecurrentUnit::EnsureBuffers(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 64) + 8), 1uLL);
}

uint64_t *`virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::EnsureBuffers(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)((char *)this+ *(_QWORD *)(*(_QWORD *)this - 104)+ *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 104)) - 64)+ 8), 1uLL);
}

uint64_t kaldi::nnet1::SimplerSimpleRecurrentUnit::HistoryStateSize(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  return *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40) + 12);
}

uint64_t `virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::HistoryStateSize(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  return *(unsigned int *)((char *)this
                         + *(_QWORD *)(*(_QWORD *)this - 32)
                         + *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)) - 40)
                         + 12);
}

uint64_t kaldi::nnet1::SimplerSimpleRecurrentUnit::ResetHistoryState(uint64_t *a1, _QWORD *a2, uint64_t a3, int a4)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void *v14;
  __int128 v15;
  __int128 v16;
  char v17;

  (*(void (**)(uint64_t *))(*a1 + 144))(a1);
  if (a4)
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)0x75, "batch_idx == 0", v8);
  v9 = a2[1];
  v10 = *a1;
  v11 = (uint64_t)a1 + *(_QWORD *)(*a1 - 64);
  if (v9 != *(_DWORD *)(v11 + 40))
    kaldi::KaldiAssertFailure_((kaldi *)"ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)0x76, "sequence_idx.size() == hopts_.num_sequences", v8);
  *(_QWORD *)(*(_QWORD *)(v11 + 8) + 32) = a3;
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      if (((*(_QWORD *)(*a2 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v14, "ResetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", 123);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v14, "ResetHistoryState for SimplerSimpleRecurrentUnit makes only sense if all utterances get reset at the same time");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v14);
      }
    }
  }
  v16 = 0u;
  v15 = 0u;
  v14 = &unk_1EA92DFA8;
  v17 = 0;
  kaldi::CuMatrix<float>::operator=(*(uint64_t *)((char *)a1 + *(_QWORD *)(v10 - 64) + 8), (uint64_t)&v14);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v14);
}

void sub_1DE4CFF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1DE4CFF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t `virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::ResetHistoryState(_QWORD *a1, _QWORD *a2, uint64_t a3, int a4)
{
  return kaldi::nnet1::SimplerSimpleRecurrentUnit::ResetHistoryState((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 40)), a2, a3, a4);
}

uint64_t kaldi::nnet1::SimplerSimpleRecurrentUnit::ResetHistoryState(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  uint64_t v2;
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;

  v2 = *(_QWORD *)this;
  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 64);
  v5 = (_QWORD *)*((_QWORD *)v3 + 1);
  v4 = (_QWORD *)*((_QWORD *)v3 + 2);
  if (v4 != v5)
  {
    v6 = v4 - 6;
    v7 = v4 - 6;
    do
    {
      v8 = *v7;
      v7 -= 6;
      (*(void (**)(_QWORD *))(v8 + 16))(v6);
      v9 = v6 == v5;
      v6 = v7;
    }
    while (!v9);
    v2 = *(_QWORD *)this;
  }
  *((_QWORD *)v3 + 2) = v5;
  return (*(uint64_t (**)(kaldi::nnet1::SimplerSimpleRecurrentUnit *))(v2 + 144))(this);
}

uint64_t `virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::ResetHistoryState(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  return kaldi::nnet1::SimplerSimpleRecurrentUnit::ResetHistoryState((kaldi::nnet1::SimplerSimpleRecurrentUnit *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)));
}

unsigned int *kaldi::nnet1::SimplerSimpleRecurrentUnit::GetHistoryState(_QWORD *a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  if (a3)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)0x88, "batch_idx == 0", a5);
  v7 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 64) + 8);
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(v7 + 20), *(unsigned int *)(v7 + 16), 0, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 64) + 8), 111, v8, v9);
}

unsigned int *`virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::GetHistoryState(_QWORD *a1, unsigned int *a2, int a3, uint64_t a4, const char *a5)
{
  return kaldi::nnet1::SimplerSimpleRecurrentUnit::GetHistoryState((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 56)), a2, a3, a4, a5);
}

_DWORD *kaldi::nnet1::SimplerSimpleRecurrentUnit::GetHistoryState(uint64_t a1, _DWORD *a2, unsigned int a3, int a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD v20[4];

  if (a4)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)0x8E, "batch_idx == 0", a5);
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 64) + 40) <= (signed int)a3)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)0x8F, "sequence_idx >= 0 && sequence_idx < hopts_.num_sequences", a5);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  kaldi::CuVector<float>::Resize((uint64_t)a2, v8, 0, v9, v10);
  v14 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 64) + 8);
  v15 = *(_DWORD *)(v14 + 20);
  if (v15 < 1)
    return kaldi::CuVectorBase<float>::CopyFromVec(a2, a1 + 16, v11, v12, v13);
  if (v15 <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v13);
  v16 = *(_QWORD *)(v14 + 8) + 4 * (int)(*(_DWORD *)(v14 + 24) * a3);
  v17 = *(_DWORD *)(v14 + 16);
  v18 = *(_QWORD *)(v14 + 32);
  v20[0] = &unk_1EA926538;
  v20[1] = v16;
  v20[3] = v18;
  v20[2] = v17;
  return kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v20, v11, v12, v13);
}

_DWORD *`virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::GetHistoryState(_QWORD *a1, _DWORD *a2, unsigned int a3, int a4, const char *a5)
{
  return kaldi::nnet1::SimplerSimpleRecurrentUnit::GetHistoryState((uint64_t)a1 + *(_QWORD *)(*a1 - 64), a2, a3, a4, a5);
}

unsigned int *kaldi::nnet1::SimplerSimpleRecurrentUnit::SetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
  const char *v6;
  uint64_t v7;
  const char *v8;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  if (a3)
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)0x9A, "batch_idx == 0", v6);
  kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 64) + 8), *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(*(unsigned int **)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 64) + 8), a2, 111, v7, v8);
}

unsigned int *`virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::SetHistoryState(_QWORD *a1, uint64_t a2, int a3)
{
  return kaldi::nnet1::SimplerSimpleRecurrentUnit::SetHistoryState((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2, a3);
}

void kaldi::nnet1::SimplerSimpleRecurrentUnit::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  const char *v8;
  int v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD v21[4];

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  if (a4)
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)0xA1, "batch_idx == 0", v8);
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 64) + 40) <= (signed int)a3)
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)0xA2, "sequence_idx >= 0 && sequence_idx < hopts_.num_sequences", v8);
  v9 = *(_DWORD *)(a2 + 16);
  if (v9 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
    kaldi::KaldiAssertFailure_((kaldi *)"SetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.cc", (const char *)0xA3, "history.Dim() == HistoryStateSize()", v10);
  v11 = *(unsigned int *)(a2 + 16);
  v12 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 64);
  v13 = *(_QWORD *)(v12 + 8);
  if ((int)v11 < 1)
  {
    kaldi::CuMatrix<float>::Resize(v13, 0, 0, 0, 0);
  }
  else
  {
    kaldi::CuMatrix<float>::Resize(v13, *(unsigned int *)(v12 + 40), v11, 2u, 0);
    v17 = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 64) + 8);
    if (*(_DWORD *)(v17 + 20) <= a3)
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v16);
    v18 = *(_QWORD *)(v17 + 8) + 4 * (int)(*(_DWORD *)(v17 + 24) * a3);
    v19 = *(_DWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 32);
    v21[0] = &unk_1EA926538;
    v21[1] = v18;
    v21[3] = v20;
    v21[2] = v19;
    kaldi::CuVectorBase<float>::CopyFromVec(v21, a2, v14, v15, v16);
  }
}

void `virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::SetHistoryState(_QWORD *a1, uint64_t a2, unsigned int a3, int a4)
{
  kaldi::nnet1::SimplerSimpleRecurrentUnit::SetHistoryState((uint64_t)a1 + *(_QWORD *)(*a1 - 80), a2, a3, a4);
}

void kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  uint64_t v2;

  kaldi::nnet1::HistoricalComponent::~HistoricalComponent((kaldi::nnet1::HistoricalComponent *)(v2 + 104));
  kaldi::CuMatrixBase<float>::~CuMatrixBase((char *)this + 96);
  kaldi::CuMatrixBase<float>::~CuMatrixBase(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::SimplerSimpleRecurrentUnit *)((char *)this + 48));
}

{
  kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit(this);
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::nnet1::SimplerSimpleRecurrentUnit::Copy(const kaldi::nnet1::Nnet **this)
{
  kaldi::nnet1::SimplerSimpleRecurrentUnit *v2;

  v2 = (kaldi::nnet1::SimplerSimpleRecurrentUnit *)operator new();
  kaldi::nnet1::SimplerSimpleRecurrentUnit::SimplerSimpleRecurrentUnit(v2, this);
  return (uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 40);
}

void sub_1DE4D0500(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10A1C4082FA86A8);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SimplerSimpleRecurrentUnit::GetType(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  return 278;
}

void kaldi::nnet1::SimplerSimpleRecurrentUnit::BackpropagateFnc()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "BackpropagateFnc", "../engine/common/libquasar/libkaldi/src/nnet/nnet-ssru.h", 54);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void `virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit((kaldi::nnet1::SimplerSimpleRecurrentUnit *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit((kaldi::nnet1::SimplerSimpleRecurrentUnit *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1DF0ED014);
}

uint64_t `virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::Copy(kaldi::nnet1::SimplerSimpleRecurrentUnit *this)
{
  return kaldi::nnet1::SimplerSimpleRecurrentUnit::Copy((const kaldi::nnet1::Nnet **)((char *)this
                                                                                    + *(_QWORD *)(*(_QWORD *)this - 32)));
}

void `virtual thunk to'kaldi::nnet1::SimplerSimpleRecurrentUnit::BackpropagateFnc()
{
  kaldi::nnet1::SimplerSimpleRecurrentUnit::BackpropagateFnc();
}

void kaldi::nnet1::SimplerSimpleRecurrentUnit::~SimplerSimpleRecurrentUnit(kaldi::nnet1::SimplerSimpleRecurrentUnit *this, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 40)) = a2[1];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)) = a2[2];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[3];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 64)) = a2[4];
  *((_QWORD *)this + 2) = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 16);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 1, 0);
}

void kaldi::PrintableRxfilename(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  _BYTE *v2;
  uint64_t v3;

  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 23))
    {
      v2 = (_BYTE *)a1;
      if (*(_BYTE *)(a1 + 23) != 1)
        goto LABEL_10;
      goto LABEL_8;
    }
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(a2, "standard input");
    return;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    goto LABEL_9;
  if (v3 != 1)
    goto LABEL_10;
  v2 = *(_BYTE **)a1;
LABEL_8:
  if (*v2 == 45)
    goto LABEL_9;
LABEL_10:
  kaldi::ParseOptions::Escape((unsigned __int8 *)a1, a2);
}

uint64_t kaldi::ClassifyRxfilename(uint64_t a1)
{
  char *v1;
  int v2;
  unsigned int v4;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  char *v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD v30[34];

  if (*(char *)(a1 + 23) >= 0)
    v1 = (char *)a1;
  else
    v1 = *(char **)a1;
  v2 = *v1;
  if (!*v1)
    return 2;
  if (v2 == 124)
    return 0;
  if (v2 == 45)
  {
    if (v1[1])
    {
      v4 = 45;
      goto LABEL_11;
    }
    return 2;
  }
  v4 = (char)v2;
  if (((char)v2 & 0x80000000) == 0)
  {
LABEL_11:
    if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v4 + 60) & 0x4000) != 0)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__maskrune((char)v2, 0x4000uLL))
    goto LABEL_18;
LABEL_14:
  v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 8);
  v7 = v1[v6 - 1];
  if ((v7 & 0x80000000) != 0)
  {
    if (__maskrune(v7, 0x4000uLL))
    {
LABEL_18:
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30, "ClassifyRxfilename", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 123);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Cannot have leading or trailing space in filename \"", 51);
        v9 = *(char *)(a1 + 23);
        if (v9 >= 0)
          v10 = a1;
        else
          v10 = *(_QWORD *)a1;
        if (v9 >= 0)
          v11 = *(unsigned __int8 *)(a1 + 23);
        else
          v11 = *(_QWORD *)(a1 + 8);
LABEL_25:
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\".", 2);
LABEL_26:
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
      }
      return 0;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v7 + 60) & 0x4000) != 0)
  {
    goto LABEL_18;
  }
  v13 = *v1;
  if (v13 == 98 || v13 == 116)
  {
    if (v1[1] == 44)
    {
      if (kaldi::g_kaldi_verbose_level < -1)
        return 0;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30, "ClassifyRxfilename", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 131);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Found what looks like an rspecifier instead of a filename \"", 59);
      v19 = *(char *)(a1 + 23);
      if (v19 >= 0)
        v10 = a1;
      else
        v10 = *(_QWORD *)a1;
      if (v19 >= 0)
        v11 = *(unsigned __int8 *)(a1 + 23);
      else
        v11 = *(_QWORD *)(a1 + 8);
      goto LABEL_25;
    }
  }
  else if (v13 == 126)
  {
    if (kaldi::g_kaldi_verbose_level < -1)
      return 0;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30, "ClassifyRxfilename", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 134);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Found ~ at the beginning of filename \"", 38);
    v15 = *(char *)(a1 + 23);
    if (v15 >= 0)
      v16 = a1;
    else
      v16 = *(_QWORD *)a1;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a1 + 23);
    else
      v17 = *(_QWORD *)(a1 + 8);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\". Shell like path expansions not supported.", 44);
    goto LABEL_26;
  }
  v20 = v1 - 1;
  do
  {
    v21 = v20[2];
    ++v20;
  }
  while (v21);
  v22 = *v20;
  if (v22 == 124)
    return 4;
  if ((v22 & 0x80000000) != 0)
    v23 = __maskrune(v22, 0x4000uLL);
  else
    v23 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v22 + 60) & 0x4000;
  if (v23)
    return 0;
  if ((*v20 & 0x80000000) == 0
    && (v24 = *v20, (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v24 + 60) & 0x400) != 0))
  {
    do
    {
      if (v20 <= v1)
        break;
      if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v24 + 60) & 0x400) == 0)
        break;
      v29 = *--v20;
      v24 = v29;
    }
    while ((v29 & 0x80000000) == 0);
    if (v24 == 58)
      return 3;
    else
      return 1;
  }
  else
  {
    if (strchr(v1, 124))
    {
      if (kaldi::g_kaldi_verbose_level < -1)
        return 0;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30, "ClassifyRxfilename", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 153);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Trying to classify rxfilename with pipe symbol in the wrong place (pipe without | at the end?): ", 96);
      v26 = *(char *)(a1 + 23);
      if (v26 >= 0)
        v27 = a1;
      else
        v27 = *(_QWORD *)a1;
      if (v26 >= 0)
        v28 = *(unsigned __int8 *)(a1 + 23);
      else
        v28 = *(_QWORD *)(a1 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
      goto LABEL_26;
    }
    return 1;
  }
}

void sub_1DE4D0A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::FileInputImpl::~FileInputImpl(kaldi::FileInputImpl *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1EA926560;
  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *((_QWORD *)this + 1) = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 8) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1DF0ECB94]((char *)this + 24);
  std::istream::~istream();
  MEMORY[0x1DF0ECF6C]((char *)this + 432);
}

{
  kaldi::FileInputImpl::~FileInputImpl(this);
  JUMPOUT(0x1DF0ED014);
}

void kaldi::StandardInputImpl::~StandardInputImpl(kaldi::StandardInputImpl *this)
{
  JUMPOUT(0x1DF0ED014);
}

void kaldi::PipeInputImpl::~PipeInputImpl(void **this)
{
  *this = &off_1EA9265A0;
  if (this[6])
    kaldi::PipeInputImpl::Close((kaldi::PipeInputImpl *)this);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  kaldi::PipeInputImpl::~PipeInputImpl(this);
  JUMPOUT(0x1DF0ED014);
}

void kaldi::OffsetFileInputImpl::~OffsetFileInputImpl(kaldi::OffsetFileInputImpl *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *((_QWORD *)this + 5) = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)this = &off_1EA9266A0;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 40) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1DF0ECB94]((char *)this + 56);
  std::istream::~istream();
  MEMORY[0x1DF0ECF6C]((char *)this + 464);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  kaldi::OffsetFileInputImpl::~OffsetFileInputImpl(this);
  JUMPOUT(0x1DF0ED014);
}

_QWORD *kaldi::Input::Input(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  _QWORD *v6;
  std::string __p;
  std::string v8;
  _QWORD v9[34];

  *a1 = 0;
  if ((kaldi::Input::OpenInternal(a1, a2, 1, a3) & 1) == 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9, "Input", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 711);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Error opening input stream ", 27);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    kaldi::PrintableRxfilename((uint64_t)&__p, &v8);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v6, (uint64_t)&v8);
    std::string::~string(&v8);
    std::string::~string(&__p);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  return a1;
}

uint64_t kaldi::Input::Close(kaldi::Input *this)
{
  uint64_t result;

  result = *(_QWORD *)this;
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)this = 0;
  }
  return result;
}

uint64_t kaldi::Input::OpenInternal(_QWORD *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::ios_base *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::ios_base *v22;
  _QWORD *v23;
  uint64_t v24;
  std::string *p_p;
  std::string::size_type size;
  _BYTE *v27;
  std::string v28;
  std::string __p;
  _QWORD v30[35];

  v8 = kaldi::ClassifyRxfilename(a2);
  v9 = *a1;
  if (*a1)
  {
    if (v8 == 3)
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      v9 = *a1;
      if (v10 == 3)
      {
        if (((**(uint64_t (***)(uint64_t, uint64_t, uint64_t))v9)(v9, a2, a3) & 1) != 0)
        {
          if (!a4)
            return 1;
          goto LABEL_20;
        }
LABEL_21:
        if (*a1)
          (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
        result = 0;
        *a1 = 0;
        return result;
      }
      if (!v9)
      {
LABEL_11:
        v27 = a4;
        v12 = (_QWORD *)operator new();
        bzero(v12 + 4, 0x248uLL);
        *v12 = &off_1EA9266A0;
        v12[1] = 0;
        v12[2] = 0;
        v12[3] = 0;
        v18 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
        v19 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
        v12[5] = v18;
        v20 = MEMORY[0x1E0DE4FA8];
        v21 = MEMORY[0x1E0DE4FA8] + 64;
        v12[58] = MEMORY[0x1E0DE4FA8] + 64;
        *(_QWORD *)((char *)v12 + *(_QWORD *)(v18 - 24) + 40) = v19;
        v12[6] = 0;
        v22 = (std::ios_base *)((char *)v12 + *(_QWORD *)(v12[5] - 24) + 40);
        std::ios_base::init(v22, v12 + 7);
        v22[1].__vftable = 0;
        v22[1].__fmtflags_ = -1;
        v12[5] = v20 + 24;
        v12[58] = v21;
        MEMORY[0x1DF0ECB88](v12 + 7);
LABEL_12:
        a4 = v27;
LABEL_18:
        *a1 = v12;
        if (((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))*v12)(v12, a2, a3) & 1) != 0)
        {
          if (!a4)
            return 1;
LABEL_20:
          v24 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
          return kaldi::InitKaldiInputStream(v24, a4);
        }
        goto LABEL_21;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    *a1 = 0;
  }
  switch(v8)
  {
    case 1:
      v27 = a4;
      v12 = (_QWORD *)operator new();
      bzero(v12 + 2, 0x238uLL);
      *v12 = &off_1EA926560;
      v13 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
      v14 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
      v12[1] = v13;
      v15 = MEMORY[0x1E0DE4FA8];
      v16 = MEMORY[0x1E0DE4FA8] + 64;
      v12[54] = MEMORY[0x1E0DE4FA8] + 64;
      *(_QWORD *)((char *)v12 + *(_QWORD *)(v13 - 24) + 8) = v14;
      v12[2] = 0;
      v17 = (std::ios_base *)((char *)v12 + *(_QWORD *)(v12[1] - 24) + 8);
      std::ios_base::init(v17, v12 + 3);
      v17[1].__vftable = 0;
      v17[1].__fmtflags_ = -1;
      v12[1] = v15 + 24;
      v12[54] = v16;
      MEMORY[0x1DF0ECB88](v12 + 3);
      goto LABEL_12;
    case 2:
      v12 = (_QWORD *)operator new();
      *v12 = &off_1EA926660;
      *((_BYTE *)v12 + 8) = 0;
      goto LABEL_18;
    case 3:
      goto LABEL_11;
    case 4:
      v12 = (_QWORD *)operator new();
      *v12 = &off_1EA9265A0;
      v12[6] = 0;
      *(_OWORD *)(v12 + 1) = 0u;
      *(_OWORD *)(v12 + 3) = 0u;
      goto LABEL_18;
    default:
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30, "OpenInternal", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 755);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Invalid input filename format ", 30);
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          v28 = *(std::string *)a2;
        kaldi::PrintableRxfilename((uint64_t)&v28, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
      }
      result = 0;
      break;
  }
  return result;
}

void sub_1DE4D1194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a24);
  _Unwind_Resume(a1);
}

void kaldi::Input::~Input(kaldi::Input *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)this = 0;
  }
}

uint64_t kaldi::Input::Stream(kaldi::Input *this)
{
  uint64_t v1;
  _QWORD v3[34];

  v1 = *(_QWORD *)this;
  if (!v1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3, "Stream", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 774);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Input::Stream(), not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

BOOL kaldi::FileInputImpl::Open(uint64_t a1)
{
  _QWORD *v3;
  _QWORD v4[34];

  if (*(_QWORD *)(a1 + 144))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4, "Open", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 355);
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"FileInputImpl::Open(), ", 23);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "open called on already open file.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  std::ifstream::open();
  return *(_QWORD *)(a1 + 144) != 0;
}

uint64_t kaldi::FileInputImpl::Stream(kaldi::FileInputImpl *this)
{
  _QWORD v2[34];

  if (!*((_QWORD *)this + 18))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Stream", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 363);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "FileInputImpl::Stream(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return (uint64_t)this + 8;
}

void kaldi::FileInputImpl::Close(kaldi::FileInputImpl *this)
{
  std::ios_base *v2;
  _QWORD v3[34];

  if (!*((_QWORD *)this + 18))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3, "Close", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 369);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "FileInputImpl::Close(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  if (!std::filebuf::close())
  {
    v2 = (std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 1) - 24) + 8);
    std::ios_base::clear(v2, v2->__rdstate_ | 4);
  }
}

uint64_t kaldi::StandardInputImpl::Open(uint64_t a1)
{
  _QWORD v2[34];

  if (*(_BYTE *)(a1 + 8))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Open", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 392);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "StandardInputImpl::Open(), open called on already open file.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  *(_BYTE *)(a1 + 8) = 1;
  return 1;
}

uint64_t kaldi::StandardInputImpl::Stream(kaldi::StandardInputImpl *this)
{
  _QWORD v2[34];

  if (!*((_BYTE *)this + 8))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Stream", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 403);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "StandardInputImpl::Stream(), object not initialized.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return fst::cin(this);
}

uint64_t kaldi::StandardInputImpl::Close(uint64_t this)
{
  _QWORD v1[34];

  if (!*(_BYTE *)(this + 8))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "Close", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 411);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "StandardInputImpl::Close(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
  }
  *(_BYTE *)(this + 8) = 0;
  return this;
}

uint64_t kaldi::StandardInputImpl::MyType(kaldi::StandardInputImpl *this)
{
  return 2;
}

uint64_t kaldi::PipeInputImpl::Open(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  FILE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  std::string *v19;
  std::string::size_type size;
  _QWORD *v21;
  _QWORD *v22;
  int *v23;
  char *v24;
  size_t v25;
  std::string *p_p;
  std::string::size_type v28;
  _QWORD *v29;
  std::string v30;
  std::string __p;
  _QWORD v32[34];
  std::string v33;

  std::string::operator=((std::string *)(a1 + 8), (const std::string *)a2);
  if (*(_QWORD *)(a1 + 32))
    kaldi::KaldiAssertFailure_((kaldi *)"Open", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", (const char *)0x1AB, "f_ == NULL", v4);
  v5 = *(unsigned __int8 *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0)
  {
    v6 = *(_QWORD *)(a2 + 8);
    if (!v6)
      goto LABEL_44;
  }
  else
  {
    if (!*(_BYTE *)(a2 + 23))
      goto LABEL_44;
    v6 = *(unsigned __int8 *)(a2 + 23);
  }
  v7 = v6 - 1;
  if ((v5 & 0x80) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)a2 + v7) != 124)
      goto LABEL_44;
    v5 = *(_QWORD *)(a2 + 8);
  }
  else if (*(_BYTE *)(a2 + v7) != 124)
  {
LABEL_44:
    kaldi::KaldiAssertFailure_((kaldi *)"Open", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", (const char *)0x1AD, "rxfilename.length() != 0 && rxfilename[rxfilename.length()-1] == '|'", v4);
  }
  std::string::basic_string(&v33, (const std::string *)a2, 0, v5 - 1, (std::allocator<char> *)v32);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v33;
  else
    v8 = (std::string *)v33.__r_.__value_.__r.__words[0];
  v9 = popen((const char *)v8, "r");
  *(_QWORD *)(a1 + 32) = v9;
  if (!v9)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32, "Open", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 438);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Failed opening pipe for reading, command is: ", 45);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &v33;
      else
        v19 = (std::string *)v33.__r_.__value_.__r.__words[0];
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
      else
        size = v33.__r_.__value_.__l.__size_;
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, size);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", errno is ", 11);
      v23 = __error();
      v24 = strerror(*v23);
      v25 = strlen(v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v24, v25);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    }
    goto LABEL_28;
  }
  v10 = operator new();
  v11 = *(_QWORD *)(a1 + 32);
  std::streambuf::basic_streambuf();
  *(_QWORD *)v10 = &unk_1EA9265E0;
  *(_QWORD *)(v10 + 64) = v11;
  *(_DWORD *)(v10 + 72) = -1;
  *(_BYTE *)(v10 + 76) = 0;
  *(_QWORD *)(a1 + 40) = v10;
  v12 = operator new();
  v13 = *(void **)(a1 + 40);
  v14 = MEMORY[0x1E0DE4F98];
  *(_QWORD *)(v12 + 16) = MEMORY[0x1E0DE4F98] + 64;
  *(_QWORD *)v12 = v14 + 24;
  *(_QWORD *)(v12 + 8) = 0;
  std::ios_base::init((std::ios_base *)(v12 + 16), v13);
  *(_QWORD *)(v12 + 152) = 0;
  *(_DWORD *)(v12 + 160) = -1;
  *(_QWORD *)(a1 + 48) = v12;
  v15 = *(_DWORD *)(v12 + *(_QWORD *)(*(_QWORD *)v12 - 24) + 32);
  if ((v15 & 5) != 0)
  {
LABEL_28:
    v16 = 0;
    goto LABEL_29;
  }
  v16 = 1;
  if ((v15 & 2) != 0 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32, "Open", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 454);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Pipe opened with command ", 25);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v30 = *(std::string *)a2;
    kaldi::PrintableRxfilename((uint64_t)&v30, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v28 = __p.__r_.__value_.__l.__size_;
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)p_p, v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" is empty.", 10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    v16 = 1;
  }
LABEL_29:
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  return v16;
}

void sub_1DE4D19B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;

  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a22);
  if (*(char *)(v22 - 49) < 0)
    operator delete(*(void **)(v22 - 72));
  _Unwind_Resume(a1);
}

uint64_t kaldi::PipeInputImpl::Stream(kaldi::PipeInputImpl *this)
{
  uint64_t result;
  _QWORD v2[34];

  result = *((_QWORD *)this + 6);
  if (!result)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Stream", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 464);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "PipeInputImpl::Stream(), object not initialized.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

uint64_t kaldi::PipeInputImpl::Close(kaldi::PipeInputImpl *this)
{
  uint64_t v2;
  BOOL v3;
  _QWORD *v4;
  int v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD v10[34];

  v2 = *((_QWORD *)this + 6);
  if (!v2)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "Close", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 470);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "PipeInputImpl::Close(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 6) = 0;
  if (pclose(*((FILE **)this + 4)))
    v3 = kaldi::g_kaldi_verbose_level < -1;
  else
    v3 = 1;
  if (!v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10, "Close", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 480);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Pipe ", 5);
    v5 = *((char *)this + 31);
    if (v5 >= 0)
      v6 = (char *)this + 8;
    else
      v6 = (char *)*((_QWORD *)this + 1);
    if (v5 >= 0)
      v7 = *((unsigned __int8 *)this + 31);
    else
      v7 = *((_QWORD *)this + 2);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" had nonzero return status ", 27);
    std::ostream::operator<<();
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
  }
  *((_QWORD *)this + 4) = 0;
  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

void sub_1DE4D1C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::PipeInputImpl::MyType(kaldi::PipeInputImpl *this)
{
  return 4;
}

BOOL kaldi::OffsetFileInputImpl::Open(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;
  std::string::size_type size;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  std::string *p_s1;
  _BOOL8 v12;
  unint64_t v14;
  std::string __s1;

  v5 = (_QWORD *)(a1 + 40);
  if (!*(_QWORD *)(a1 + 176))
  {
    __s1.__r_.__value_.__r.__words[0] = 0;
    kaldi::OffsetFileInputImpl::SplitFilename(a2, a1 + 8, (uint64_t *)&__s1);
    *(_BYTE *)(a1 + 32) = a3;
    std::ifstream::open();
    return *(_QWORD *)(a1 + 176)
        && kaldi::OffsetFileInputImpl::Seek((kaldi::OffsetFileInputImpl *)a1, __s1.__r_.__value_.__r.__words[0]);
  }
  memset(&__s1, 0, sizeof(__s1));
  v14 = 0;
  kaldi::OffsetFileInputImpl::SplitFilename(a2, (uint64_t)&__s1, (uint64_t *)&v14);
  v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    size = __s1.__r_.__value_.__l.__size_;
  v8 = *(unsigned __int8 *)(a1 + 31);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 16);
  if (size == v8)
  {
    if (v9 >= 0)
      v10 = (unsigned __int8 *)(a1 + 8);
    else
      v10 = *(unsigned __int8 **)(a1 + 8);
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(__s1.__r_.__value_.__l.__data_, v10, __s1.__r_.__value_.__l.__size_))
        goto LABEL_23;
    }
    else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      while (p_s1->__r_.__value_.__s.__data_[0] == *v10)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v10;
        if (!--v6)
          goto LABEL_21;
      }
      goto LABEL_23;
    }
LABEL_21:
    if (*(unsigned __int8 *)(a1 + 32) == a3)
    {
      std::ios_base::clear((std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)), 0);
LABEL_26:
      v12 = kaldi::OffsetFileInputImpl::Seek((kaldi::OffsetFileInputImpl *)a1, v14);
      goto LABEL_28;
    }
  }
LABEL_23:
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)), *(_DWORD *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 32) | 4);
  std::string::operator=((std::string *)(a1 + 8), &__s1);
  std::ifstream::open();
  if (*(_QWORD *)(a1 + 176))
    goto LABEL_26;
  v12 = 0;
LABEL_28:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  return v12;
}

void sub_1DE4D1E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::OffsetFileInputImpl::Stream(kaldi::OffsetFileInputImpl *this)
{
  _QWORD v2[34];

  if (!*((_QWORD *)this + 22))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "Stream", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 598);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "FileInputImpl::Stream(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return (uint64_t)this + 40;
}

void kaldi::OffsetFileInputImpl::Close(kaldi::OffsetFileInputImpl *this)
{
  std::ios_base *v2;
  _QWORD v3[34];

  if (!*((_QWORD *)this + 22))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3, "Close", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 604);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "FileInputImpl::Close(), file is not open.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  if (!std::filebuf::close())
  {
    v2 = (std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 5) - 24) + 40);
    std::ios_base::clear(v2, v2->__rdstate_ | 4);
  }
}

uint64_t kaldi::OffsetFileInputImpl::MyType(kaldi::OffsetFileInputImpl *this)
{
  return 3;
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, uint64_t *a2, unint64_t a3)
{
  uint64_t *v4;
  unint64_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2;
  if (*((char *)a2 + 23) < 0)
  {
    v6 = a2[1];
    if (v6 < a3)
      goto LABEL_15;
    v4 = (uint64_t *)*a2;
  }
  else
  {
    v6 = *((unsigned __int8 *)a2 + 23);
    if (v6 < a3)
LABEL_15:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  v7 = v6 - a3;
  if (v6 - a3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7 >= 0x17)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    __dst[1] = v7;
    __dst[2] = v10 | 0x8000000000000000;
    *__dst = v8;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v7;
    v8 = __dst;
    if (v6 == a3)
      goto LABEL_14;
  }
  memmove(v8, (char *)v4 + a3, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  return __dst;
}

void kaldi::basic_pipebuf<char>::~basic_pipebuf()
{
  std::streambuf::~streambuf();
  JUMPOUT(0x1DF0ED014);
}

uint64_t kaldi::basic_pipebuf<char>::sync(uint64_t a1)
{
  if (fflush(*(FILE **)(a1 + 64)))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t kaldi::basic_pipebuf<char>::underflow(uint64_t a1)
{
  return kaldi::basic_pipebuf<char>::__getchar(a1, 0);
}

uint64_t kaldi::basic_pipebuf<char>::uflow(uint64_t a1)
{
  return kaldi::basic_pipebuf<char>::__getchar(a1, 1);
}

uint64_t kaldi::basic_pipebuf<char>::pbackfail(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  BOOL v6;
  char v8;
  _BYTE v9[15];

  *(_QWORD *)&v9[7] = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2 != -1)
  {
    v3 = a2;
    if (*(_BYTE *)(a1 + 76))
    {
      v8 = *(_DWORD *)(a1 + 72);
      v4 = v9;
      while (v4 > &v8)
      {
        v5 = *--v4;
        if (ungetc(v5, *(FILE **)(a1 + 64)) == -1)
          return 0xFFFFFFFFLL;
      }
    }
    *(_DWORD *)(a1 + 72) = v3;
    v6 = 1;
    goto LABEL_11;
  }
  if (!*(_BYTE *)(a1 + 76))
  {
    v3 = *(unsigned int *)(a1 + 72);
    v6 = (_DWORD)v3 != -1;
LABEL_11:
    *(_BYTE *)(a1 + 76) = v6;
    return v3;
  }
  return 0xFFFFFFFFLL;
}

uint64_t kaldi::basic_pipebuf<char>::overflow(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  char __ptr;
  uint64_t v6;

  if ((_DWORD)a2 == -1)
    return 0;
  v2 = a2;
  *(_QWORD *)(a1 + 40) = &__ptr;
  v3 = (_QWORD *)(a1 + 40);
  __ptr = a2;
  *(_QWORD *)(a1 + 48) = &v6;
  *(_QWORD *)(a1 + 56) = &v6;
  if (fwrite(&__ptr, 1uLL, 1uLL, *(FILE **)(a1 + 64)) != 1)
    return 0xFFFFFFFFLL;
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  return v2;
}

uint64_t kaldi::basic_pipebuf<char>::__getchar(uint64_t a1, int a2)
{
  char v2;
  uint64_t v4;
  int v5;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 76))
  {
    v5 = getc(*(FILE **)(a1 + 64));
    if (v5 != -1)
    {
      v4 = v5;
      if ((v2 & 1) != 0)
      {
        *(_DWORD *)(a1 + 72) = v5;
        return v4;
      }
      if (ungetc(v5, *(FILE **)(a1 + 64)) != -1)
        return v4;
    }
    return 0xFFFFFFFFLL;
  }
  v4 = *(unsigned int *)(a1 + 72);
  if (a2)
  {
    *(_DWORD *)(a1 + 72) = -1;
    *(_BYTE *)(a1 + 76) = 0;
  }
  return v4;
}

void kaldi::OffsetFileInputImpl::SplitFilename(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::string::size_type v6;
  const char *v7;
  std::string::size_type v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  std::string v16;
  void *__dst[2];
  char v18;

  v6 = std::string::rfind((const std::string *)a1, 58, 0xFFFFFFFFFFFFFFFFLL);
  if (v6 == -1)
    kaldi::KaldiAssertFailure_((kaldi *)"SplitFilename", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", (const char *)0x213, "pos != std::string::npos", v7);
  v8 = v6;
  std::string::basic_string(&v16, (const std::string *)a1, 0, v6, (std::allocator<char> *)__dst);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(std::string *)a2 = v16;
  v9 = std::string::basic_string[abi:ne180100](__dst, (uint64_t *)a1, v8 + 1);
  if ((kaldi::ConvertStringToInteger<unsigned long>((uint64_t)v9, a3) & 1) == 0)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v16, "SplitFilename", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/util/kaldi-io.cc", 538);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v16, (uint64_t)"Cannot get offset from filename ", 32);
    v11 = *(char *)(a1 + 23);
    if (v11 >= 0)
      v12 = a1;
    else
      v12 = *(_QWORD *)a1;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a1 + 23);
    else
      v13 = *(_QWORD *)(a1 + 8);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" (possibly you compiled in 32-bit and have a >32-bit", 52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" byte offset into a file; you'll have to compile 64-bit.",
      56);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v16);
  }
  if (v18 < 0)
    operator delete(__dst[0]);
}

void sub_1DE4D23BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 49) < 0)
    operator delete(*(void **)(v1 - 72));
  _Unwind_Resume(exception_object);
}

BOOL kaldi::OffsetFileInputImpl::Seek(kaldi::OffsetFileInputImpl *this, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  std::ios_base *v7;
  unint64_t v8;

  v3 = (_QWORD *)((char *)this + 40);
  std::istream::tellg();
  v4 = v8;
  if (v8 == a2)
    return 1;
  if (v8 < a2 && v8 + 100 > a2)
  {
    do
    {
      std::istream::get();
      ++v4;
    }
    while (a2 != v4);
    std::istream::tellg();
    return v8 == a2;
  }
  else
  {
    std::istream::seekg();
    v7 = (std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24));
    if ((v7->__rdstate_ & 5) == 0)
    {
      std::ios_base::clear(v7, 0);
      return 1;
    }
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32) | 4);
    return 0;
  }
}

uint64_t kaldi::ConvertStringToInteger<unsigned long>(uint64_t a1, uint64_t *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t result;
  int *v11;
  char *__endptr;

  if (*(char *)(a1 + 23) >= 0)
    v3 = (const char *)a1;
  else
    v3 = *(const char **)a1;
  __endptr = 0;
  *__error() = 0;
  v4 = strtoll(v3, &__endptr, 10);
  if (__endptr == v3)
    return 0;
  v5 = v4;
  v6 = __endptr - 1;
  v7 = MEMORY[0x1E0C80978];
  do
  {
    v8 = v6[1];
    if ((v8 & 0x80000000) != 0)
      v9 = __maskrune(v8, 0x4000uLL);
    else
      v9 = *(_DWORD *)(v7 + 4 * v8 + 60) & 0x4000;
    ++v6;
  }
  while (v9);
  if (v6 == v3 || *v6)
    return 0;
  v11 = __error();
  result = 0;
  if (!*v11 && (v5 & 0x8000000000000000) == 0)
  {
    *a2 = v5;
    return 1;
  }
  return result;
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  std::pair<std::string, std::string> *v4;
  std::pair<std::string, std::string> *begin;
  std::pair<std::string, std::string> *end;
  std::pair<std::string, std::string> *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v11 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v9;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](this);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  size_t v5;
  uint64_t result;
  char *v7;
  const void *v8;
  char *v9;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  result = std::string::basic_string[abi:ne180100](a3, v5 + 1);
  if (*(char *)(result + 23) >= 0)
    v7 = (char *)result;
  else
    v7 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    result = (uint64_t)memmove(v7, v8, v5);
  }
  v9 = &v7[v5];
  *v9 = a2;
  v9[1] = 0;
  return result;
}

void kaldi::ParseOptions::Escape(unsigned __int8 *a1@<X0>, std::string *a2@<X8>)
{
  int v4;
  const std::string::value_type *v5;
  char *v6;
  char v7;
  uint64_t v8;
  int v9;
  unsigned __int8 v10;
  uint64_t v11;
  char *v12;
  int v13;
  const char *v14;
  const std::string::value_type *v15;
  int v16;
  unsigned __int8 *v17;
  std::string::value_type *v18;
  int v19;
  std::string::value_type __s[2];

  v4 = (char)a1[23];
  v5 = *(const std::string::value_type **)a1;
  if (v4 >= 0)
    v6 = (char *)a1;
  else
    v6 = *(char **)a1;
  v7 = *v6;
  if (*v6)
  {
    v8 = MEMORY[0x1E0C80978];
    while (1)
    {
      if (v7 < 0)
      {
        if (!__maskrune(v7, 0x500uLL))
        {
LABEL_12:
          v10 = 91;
          v11 = 1u;
          while (*v6 != v10)
          {
            v10 = asc_1DEBE6075[v11++];
            if (v11 == 14)
            {
              LOBYTE(v4) = a1[23];
              v5 = *(const std::string::value_type **)a1;
              goto LABEL_16;
            }
          }
        }
      }
      else if ((*(_DWORD *)(v8 + 4 * v7 + 60) & 0x500) == 0)
      {
        goto LABEL_12;
      }
      v9 = *++v6;
      v7 = v9;
      if (!v9)
      {
        if ((char)a1[23] < 0)
        {
          std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *((_QWORD *)a1 + 1));
        }
        else
        {
          *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
          a2->__r_.__value_.__r.__words[2] = *((_QWORD *)a1 + 2);
        }
        return;
      }
    }
  }
LABEL_16:
  if ((v4 & 0x80u) == 0)
    v12 = (char *)a1;
  else
    v12 = (char *)v5;
  v13 = 39;
  v14 = "'\\''";
  if (strchr(v12, 39))
  {
    {
      v13 = 39;
    }
    else
    {
      v14 = "\\\"";
      v13 = 34;
    }
  }
  __s[1] = 0;
  __s[0] = v13;
  std::string::basic_string[abi:ne180100]<0>(a2, __s);
  v15 = *(const std::string::value_type **)a1;
  if ((a1[23] & 0x80u) == 0)
    v15 = (const std::string::value_type *)a1;
  v16 = *(unsigned __int8 *)v15;
  if (*v15)
  {
    v17 = (unsigned __int8 *)(v15 + 1);
    do
    {
      v18 = (std::string::value_type *)v14;
      if (v16 != v13)
      {
        __s[0] = v16;
        v18 = __s;
      }
      std::string::append(a2, v18);
      v19 = *v17++;
      v16 = v19;
    }
    while (v19);
  }
  __s[0] = v13;
  std::string::append(a2, __s);
}

void sub_1DE4D2A38(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1DF0ECB88](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1DF0ECB88](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_1DE4D2B2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1DF0ECF6C](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1DF0ECB94](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1DF0ECF6C](a1 + 53);
  return a1;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void kaldi::SplitStringToVector(const std::string *a1, const char *a2, int a3, uint64_t a4)
{
  std::string::size_type size;
  std::string::size_type v9;
  int v10;
  std::string::size_type v11;
  std::string::size_type v12;
  size_t v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  size_t v18;
  const char *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::string *v27;
  std::string *v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  std::string::size_type v32;
  std::string v33;
  std::__split_buffer<std::string> __v;

  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  v32 = size;
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a4);
  v9 = 0;
  do
  {
    v10 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (v10 >= 0)
      v11 = (std::string::size_type)a1;
    else
      v11 = a1->__r_.__value_.__r.__words[0];
    if (v10 >= 0)
      v12 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    else
      v12 = a1->__r_.__value_.__l.__size_;
    v13 = strlen(a2);
    if (v12 <= v9 || v13 == 0)
    {
      v15 = -1;
      if (a3)
        goto LABEL_26;
    }
    else
    {
      v16 = (unsigned __int8 *)(v11 + v9);
      v17 = (unsigned __int8 *)(v11 + v12);
LABEL_17:
      v18 = v13;
      v19 = a2;
      while (*v16 != *(unsigned __int8 *)v19)
      {
        ++v19;
        if (!--v18)
        {
          if (++v16 != v17)
            goto LABEL_17;
          v16 = (unsigned __int8 *)(v11 + v12);
          break;
        }
      }
      if (v16 == v17)
        v15 = -1;
      else
        v15 = (uint64_t)&v16[-v11];
      if (a3)
      {
LABEL_26:
        if (v15 == v9 || v9 == v32)
          goto LABEL_41;
      }
    }
    std::string::basic_string(&v33, a1, v9, v15 - v9, (std::allocator<char> *)&__v);
    v21 = *(_QWORD *)(a4 + 8);
    v20 = *(_QWORD *)(a4 + 16);
    if (v21 >= v20)
    {
      v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *(_QWORD *)a4) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *(_QWORD *)a4) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x555555555555555)
        v26 = 0xAAAAAAAAAAAAAAALL;
      else
        v26 = v24;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
      if (v26)
        v27 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a4 + 16, v26);
      else
        v27 = 0;
      v28 = v27 + v23;
      __v.__first_ = v27;
      __v.__begin_ = v28;
      __v.__end_cap_.__value_ = &v27[v26];
      v29 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
      v28->__r_.__value_.__r.__words[2] = v33.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
      memset(&v33, 0, sizeof(v33));
      __v.__end_ = v28 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__v);
      v30 = *(_QWORD *)(a4 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v31 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(a4 + 8) = v30;
      if (v31 < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
    }
    else
    {
      v22 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
      *(_QWORD *)(v21 + 16) = *((_QWORD *)&v33.__r_.__value_.__l + 2);
      *(_OWORD *)v21 = v22;
      *(_QWORD *)(a4 + 8) = v21 + 24;
    }
LABEL_41:
    v9 = v15 + 1;
  }
  while (v15 != -1);
}

void sub_1DE4D3174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::__split_buffer<std::string> *a17)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::SplitStringOnString(uint64_t a1, char *a2, uint64_t *a3)
{
  int64_t size;
  std::string *p_str;
  int v8;
  char *v9;
  int64_t v10;
  char *v11;
  int v12;
  std::string *v13;
  int64_t v14;
  char *v15;
  char *v16;
  std::string::size_type v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  int64_t v23;
  std::string *v24;
  int v25;
  char *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::string::size_type v30;
  char v31;
  unint64_t v32;
  __int128 v33;
  int v34;
  std::string *v35;
  int64_t v36;
  char *v37;
  uint64_t v38;
  std::string v39;
  std::string __str;
  char v41;

  std::vector<std::string>::__clear[abi:ne180100](a3);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __str = *(std::string *)a1;
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  v8 = a2[23];
  if (v8 >= 0)
    v9 = a2;
  else
    v9 = *(char **)a2;
  if (v8 >= 0)
    v10 = a2[23];
  else
    v10 = *((_QWORD *)a2 + 1);
  if (!v10)
  {
    v17 = 0;
    goto LABEL_26;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size >= v10)
  {
    v11 = (char *)p_str + size;
    v12 = *v9;
    v13 = p_str;
    do
    {
      v14 = size - v10;
      if (v14 == -1)
        break;
      v15 = (char *)memchr(v13, v12, v14 + 1);
      if (!v15)
        break;
      v16 = v15;
      if (!memcmp(v15, v9, v10))
      {
        if (v16 != v11)
        {
          v17 = v16 - (char *)p_str;
          while (v17 != -1)
          {
LABEL_26:
            std::string::basic_string(&v39, &__str, 0, v17, (std::allocator<char> *)&v41);
            kaldi::Trim(&v39);
            v18 = a3[1];
            if (v18 >= a3[2])
            {
              v20 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (__int128 *)&v39);
            }
            else
            {
              if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)a3[1], v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
              }
              else
              {
                v19 = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
                *(_QWORD *)(v18 + 16) = *((_QWORD *)&v39.__r_.__value_.__l + 2);
                *(_OWORD *)v18 = v19;
              }
              v20 = v18 + 24;
              a3[1] = v18 + 24;
            }
            a3[1] = v20;
            v21 = a2[23];
            if ((v21 & 0x80u) != 0)
              v21 = *((_QWORD *)a2 + 1);
            v22 = std::string::erase(&__str, 0, v21 + v17);
            std::string::operator=(&__str, v22);
            v23 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v24 = &__str;
            else
              v24 = (std::string *)__str.__r_.__value_.__r.__words[0];
            v25 = a2[23];
            if (v25 >= 0)
              v26 = a2;
            else
              v26 = *(char **)a2;
            if (v25 >= 0)
              v27 = a2[23];
            else
              v27 = *((_QWORD *)a2 + 1);
            if (v27)
            {
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v23 = __str.__r_.__value_.__l.__size_;
              v28 = (char *)v24 + v23;
              if (v23 >= v27)
              {
                v34 = *v26;
                v35 = v24;
                do
                {
                  v36 = v23 - v27;
                  if (v36 == -1)
                    break;
                  v37 = (char *)memchr(v35, v34, v36 + 1);
                  if (!v37)
                    break;
                  v29 = v37;
                  if (!memcmp(v37, v26, v27))
                    goto LABEL_48;
                  v35 = (std::string *)(v29 + 1);
                  v23 = v28 - (v29 + 1);
                }
                while (v23 >= v27);
              }
              v29 = v28;
LABEL_48:
              if (v29 == v28)
                v17 = -1;
              else
                v17 = v29 - (char *)v24;
            }
            else
            {
              v17 = 0;
            }
            if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v39.__r_.__value_.__l.__data_);
          }
        }
        break;
      }
      v13 = (std::string *)(v16 + 1);
      size = v11 - (v16 + 1);
    }
    while (size >= v10);
  }
  kaldi::Trim(&__str);
  v30 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  v31 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v30 = __str.__r_.__value_.__l.__size_;
  if (v30)
  {
    v32 = a3[1];
    if (v32 >= a3[2])
    {
      v38 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (__int128 *)&__str);
    }
    else
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3[1], __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        v33 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *(_QWORD *)(v32 + 16) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
        *(_OWORD *)v32 = v33;
      }
      v38 = v32 + 24;
      a3[1] = v32 + 24;
    }
    a3[1] = v38;
    v31 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v31 < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1DE4D34B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v21 + 8) = v22;
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *kaldi::Trim(std::string *this)
{
  uint64_t v2;
  std::string *v3;
  std::string::size_type size;
  char *v5;
  std::string *result;
  std::string::size_type v8;
  std::string *v9;
  char *v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;

  v2 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v3 = (std::string *)this->__r_.__value_.__r.__words[0];
    size = this->__r_.__value_.__l.__size_;
  }
  else
  {
    v3 = this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  v5 = (char *)&v3[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size)
      goto LABEL_11;
  }
  while (memchr(" \t\n\r\f\v", v5[size--], 6uLL));
  if (size == -1)
  {
LABEL_11:
    if ((v2 & 0x80) != 0)
    {
      v11 = (std::string *)this->__r_.__value_.__r.__words[0];
      v10 = (char *)(this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_);
    }
    else
    {
      v10 = (char *)this + v2;
      v11 = this;
    }
    v12 = v10 - (char *)v11;
    v13 = this;
    return std::string::erase(v13, 0, v12);
  }
  result = std::string::erase(this, size + 1, 0xFFFFFFFFFFFFFFFFLL);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = (std::string *)this->__r_.__value_.__r.__words[0];
    v8 = this->__r_.__value_.__l.__size_;
    if (!v8)
      return result;
  }
  else
  {
    v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = this;
    if (!*((_BYTE *)&this->__r_.__value_.__s + 23))
      return result;
  }
  v14 = 0;
  while (1)
  {
    result = (std::string *)memchr(" \t\n\r\f\v", v9->__r_.__value_.__s.__data_[v14], 6uLL);
    if (!result)
      break;
    if (v8 == ++v14)
      return result;
  }
  if (v14 != -1)
  {
    v13 = this;
    v12 = v14;
    return std::string::erase(v13, 0, v12);
  }
  return result;
}

uint64_t kaldi::quasar::Vocab::Vocab(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  int v23;
  uint64_t v24;
  const char *v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  double v29;
  double v30;
  unint64_t v31;
  double *v32;
  double *v33;
  unint64_t v34;
  double *v35;
  double *v36;
  double *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  long double *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  const char *v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  uint64_t v56;
  void **v57;
  long double __x;
  void *__p[2];
  uint64_t v60;
  void **v61;

  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  v8 = a1 + 8;
  v9 = a1 + 32;
  *(_OWORD *)(a1 + 56) = 0u;
  v10 = a1 + 56;
  v11 = (_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  v12 = (uint64_t *)(a1 + 120);
  v57 = (void **)(a1 + 144);
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  v54 = (unsigned __int8 *)(a1 + 32);
  v55 = (unsigned __int8 *)(a1 + 8);
  v53 = (unsigned __int8 *)(a1 + 56);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<VocabSize>");
  kaldi::ReadBasicType<int>(a2, a3, a1, v13, v14);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<UnknownWord>");
  kaldi::ReadToken(a2, a3, v8, v15, v16);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<BeginOfSentenceWord>");
  kaldi::ReadToken(a2, a3, v9, v17, v18);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<EndOfSentenceWord>");
  kaldi::ReadToken(a2, a3, v10, v19, v20);
  if (*(int *)a1 >= 1)
  {
    v23 = 0;
    v56 = a1 + 160;
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      v60 = 0;
      __x = 0.0;
      kaldi::ReadToken(a2, a3, (uint64_t)__p, v21, v22);
      kaldi::ReadBasicType<double>(a2, a3, &__x, v24, v25);
      v61 = __p;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v11, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v61)+ 10) = v23;
      v26 = *(_QWORD *)(a1 + 128);
      if (v26 >= *(_QWORD *)(a1 + 136))
      {
        v28 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v12, (__int128 *)__p);
      }
      else
      {
        if (SHIBYTE(v60) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a1 + 128), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v27 = *(_OWORD *)__p;
          *(_QWORD *)(v26 + 16) = v60;
          *(_OWORD *)v26 = v27;
        }
        v28 = v26 + 24;
        *(_QWORD *)(a1 + 128) = v26 + 24;
      }
      *(_QWORD *)(a1 + 128) = v28;
      if (a4)
      {
        v29 = log(__x);
        v30 = v29;
        v32 = *(double **)(a1 + 152);
        v31 = *(_QWORD *)(a1 + 160);
        if ((unint64_t)v32 >= v31)
        {
          v37 = (double *)*v57;
          v38 = ((char *)v32 - (_BYTE *)*v57) >> 3;
          v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v40 = v31 - (_QWORD)v37;
          if (v40 >> 2 > v39)
            v39 = v40 >> 2;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
            v41 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v41 = v39;
          if (v41)
          {
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v56, v41);
            v37 = *(double **)(a1 + 144);
            v32 = *(double **)(a1 + 152);
          }
          else
          {
            v42 = 0;
          }
          v46 = (long double *)&v42[8 * v38];
          *v46 = v30;
          v36 = v46 + 1;
          while (v32 != v37)
          {
            v47 = *((_QWORD *)v32-- - 1);
            *((_QWORD *)v46-- - 1) = v47;
          }
LABEL_39:
          *(_QWORD *)(a1 + 144) = v46;
          *(_QWORD *)(a1 + 152) = v36;
          *(_QWORD *)(a1 + 160) = &v42[8 * v41];
          if (v37)
            operator delete(v37);
          goto LABEL_41;
        }
        *v32 = v29;
        v33 = v32 + 1;
      }
      else
      {
        v35 = *(double **)(a1 + 152);
        v34 = *(_QWORD *)(a1 + 160);
        if ((unint64_t)v35 >= v34)
        {
          v37 = (double *)*v57;
          v43 = ((char *)v35 - (_BYTE *)*v57) >> 3;
          v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v45 = v34 - (_QWORD)v37;
          if (v45 >> 2 > v44)
            v44 = v45 >> 2;
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
            v41 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v41 = v44;
          if (v41)
          {
            v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v56, v41);
            v37 = *(double **)(a1 + 144);
            v35 = *(double **)(a1 + 152);
          }
          else
          {
            v42 = 0;
          }
          v46 = (long double *)&v42[8 * v43];
          *v46 = __x;
          v36 = v46 + 1;
          while (v35 != v37)
          {
            v48 = *((_QWORD *)v35-- - 1);
            *((_QWORD *)v46-- - 1) = v48;
          }
          goto LABEL_39;
        }
        *v35 = __x;
        v33 = v35 + 1;
      }
      v36 = v33;
LABEL_41:
      *(_QWORD *)(a1 + 152) = v36;
      if (SHIBYTE(v60) < 0)
        operator delete(__p[0]);
      ++v23;
    }
    while (v23 < *(_DWORD *)a1);
  }
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v11, v55))
  {
    v51 = "all_words_and_indices_.count(oov_word_) > 0";
    v52 = 212;
    goto LABEL_53;
  }
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v11, v54))
  {
    v51 = "all_words_and_indices_.count(bos_word_) > 0";
    v52 = 213;
    goto LABEL_53;
  }
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v11, v53))
  {
    v51 = "all_words_and_indices_.count(eos_word_) > 0";
    v52 = 214;
LABEL_53:
    kaldi::KaldiAssertFailure_((kaldi *)"Vocab", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnlm/vocab.cc", (const char *)v52, v51, v49);
  }
  v61 = (void **)v55;
  *(_DWORD *)(a1 + 168) = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v11, v55, (uint64_t)&std::piecewise_construct, (__int128 **)&v61)+ 10);
  return a1;
}

void sub_1DE4D3A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, void **a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  void *v24;

  if (a21 < 0)
    operator delete(__p);
  v24 = *a14;
  if (*a14)
  {
    *(_QWORD *)(v21 + 152) = v24;
    operator delete(v24);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v22);
  if (*(char *)(v21 + 79) < 0)
    operator delete(*a10);
  if (*(char *)(v21 + 55) < 0)
    operator delete(*a11);
  if (*(char *)(v21 + 31) < 0)
    operator delete(*a12);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Vocab::OOvWord(kaldi::quasar::Vocab *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
}

void kaldi::quasar::Vocab::BosWord(kaldi::quasar::Vocab *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
  }
}

void kaldi::quasar::Vocab::EosWord(kaldi::quasar::Vocab *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 7), *((_QWORD *)this + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 56);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 9);
  }
}

uint64_t kaldi::quasar::Vocab::GetWordId(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  unsigned int *v4;

  v3 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)(a1 + 80), a2);
  v4 = (unsigned int *)(v3 + 40);
  if (!v3)
    v4 = (unsigned int *)(a1 + 168);
  return *v4;
}

uint64_t kaldi::quasar::Vocab::GetWord(kaldi::quasar::Vocab *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)this <= (signed int)a2)
    return (uint64_t)this + 8;
  else
    return *((_QWORD *)this + 15) + 24 * a2;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_1DE4D3E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1DE4D3F00(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_1DE4D3F70(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1DE4D42D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = operator new(0x28uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1DE4D4378(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_1DE4D4604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  *((_DWORD *)v8 + 10) = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1DE4D46B4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,float>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<int>::__emplace_unique_key_args<int,int const&>(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void kaldi::quasar::TranslationUtil::ComputeBackwardAlignments(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  char *v15;
  char **v16;
  char *v17;
  void **v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  _QWORD *v27;

  v1 = *(_QWORD **)a1;
  v27 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v27)
  {
    do
    {
      if (v1[1] != *v1)
      {
        v2 = *(_QWORD *)(*v1 + 144) - *(_QWORD *)(*v1 + 136);
        if ((int)(v2 >> 2) >= 1)
        {
          v3 = 0;
          v4 = (v2 >> 2);
          do
          {
            v5 = v1[1];
            if (*v1 == v5)
            {
              v6 = 0;
            }
            else
            {
              v6 = 0;
              v7 = 0;
              v8 = 0.0;
              v9 = *v1;
              do
              {
                v10 = *(_QWORD *)(v9 + 136);
                if (*(float *)(v10 + 4 * v3) > v8)
                {
                  v6 = v7;
                  v8 = *(float *)(v10 + 4 * v3);
                }
                ++v7;
                v9 += 240;
              }
              while (v9 != v5);
            }
            v11 = *v1 + 240 * v6;
            v14 = *(_QWORD *)(v11 + 128);
            v13 = (_QWORD *)(v11 + 128);
            v12 = v14;
            v16 = (char **)(v13 - 1);
            v15 = (char *)*(v13 - 1);
            if ((unint64_t)v15 >= v14)
            {
              v18 = (void **)(v13 - 2);
              v19 = (char *)*(v13 - 2);
              v20 = (v15 - v19) >> 2;
              v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v22 = v12 - (_QWORD)v19;
              if (v22 >> 1 > v21)
                v21 = v22 >> 1;
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
                v23 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v23 = v21;
              if (v23)
              {
                v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v13, v23);
                v15 = *v16;
                v19 = (char *)*v18;
              }
              else
              {
                v24 = 0;
              }
              v25 = &v24[4 * v20];
              *(_DWORD *)v25 = v3;
              v17 = v25 + 4;
              while (v15 != v19)
              {
                v26 = *((_DWORD *)v15 - 1);
                v15 -= 4;
                *((_DWORD *)v25 - 1) = v26;
                v25 -= 4;
              }
              *v18 = v25;
              *v16 = v17;
              *v13 = &v24[4 * v23];
              if (v19)
                operator delete(v19);
            }
            else
            {
              *(_DWORD *)v15 = v3;
              v17 = v15 + 4;
            }
            *v16 = v17;
            ++v3;
          }
          while (v3 != v4);
        }
      }
      v1 += 34;
    }
    while (v1 != v27);
  }
}

void kaldi::quasar::TranslationUtil::MergeAlignments(uint64_t a1)
{
  _QWORD *v1;
  char *v2;
  char *v3;
  char *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  unsigned int v9;
  char *v10;
  int *v11;
  int *v12;
  int *i;
  int *v14;
  int *v15;
  int *j;
  int *v17;
  int *v18;
  int v19;
  int *v20;
  int v21;
  int v22;
  BOOL v23;
  int *v24;
  int *v25;
  int v26;
  int *v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  int v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  int *v37;
  int *v38;
  unint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  int *v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  char *v73;
  char **v74;
  char *v75;
  void **v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  int v84;
  _QWORD *v85;
  _QWORD *v86;
  int v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  void *__p[2];
  __int128 v93;
  __int128 v94;
  void *v95;
  void *v96[3];
  unsigned __int8 v97[24];
  _QWORD v98[4];

  v1 = *(_QWORD **)a1;
  v85 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v85)
  {
    while (1)
    {
      v86 = v1;
      v3 = (char *)*v1;
      v2 = (char *)v1[1];
      if ((char *)*v1 != v2)
        break;
LABEL_65:
      v9 = 0;
LABEL_66:
      v32 = -286331153 * ((v2 - v3) >> 4);
      v33 = v9;
      v97[0] = 0;
      std::vector<BOOL>::vector(__p, v32, v97);
      std::vector<std::vector<BOOL>>::vector(v98, v9, (uint64_t)__p);
      if (__p[0])
        operator delete(__p[0]);
      LOBYTE(v96[0]) = 0;
      std::vector<BOOL>::vector(__p, v32, (unsigned __int8 *)v96);
      std::vector<std::vector<BOOL>>::vector(v97, v9, (uint64_t)__p);
      if (__p[0])
        operator delete(__p[0]);
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::vector(v96, v9, (unsigned __int8 *)__p);
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::vector(&v95, v32, (unsigned __int8 *)__p);
      v93 = 0u;
      v94 = 0u;
      *(_OWORD *)__p = 0u;
      v89 = 0;
      v90 = 0;
      v91 = 0;
      v34 = (_QWORD *)*v86;
      v35 = (_QWORD *)v86[1];
      if ((_QWORD *)*v86 != v35)
      {
        v36 = 0;
        do
        {
          v37 = (int *)v34[11];
          v38 = (int *)v34[12];
          v39 = v36 >> 6;
          if (v37 != v38)
          {
            v40 = v98[0];
            v41 = (int *)v34[11];
            do
            {
              v42 = *v41++;
              *(_QWORD *)(*(_QWORD *)(v40 + 24 * v42) + 8 * v39) |= 1 << v36;
            }
            while (v41 != v38);
          }
          v43 = (int *)v34[14];
          v44 = (int *)v34[15];
          if (v43 != v44)
          {
            v45 = 1 << v36;
            do
            {
              v46 = *v43;
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v97 + 24 * v46) + 8 * v39) |= v45;
              if ((*(_QWORD *)(*(_QWORD *)(v98[0] + 24 * v46) + 8 * v39) & v45) != 0)
              {
                v88 = __PAIR64__(v36, v46);
                std::deque<std::pair<int,int>>::push_back(__p, &v88);
                *(_QWORD *)((char *)v96[0] + (((unint64_t)*v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *v43;
                *((_QWORD *)v95 + v39) |= v45;
              }
              ++v43;
            }
            while (v43 != v44);
            v37 = (int *)v34[11];
            v43 = (int *)v34[14];
          }
          v34[12] = v37;
          v34[15] = v43;
          ++v36;
          v34 += 30;
        }
        while (v34 != v35);
        while (*((_QWORD *)&v94 + 1))
        {
          v47 = *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)v94 >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * (v94 & 0x1FF));
          *(_QWORD *)&v94 = v94 + 1;
          --*((_QWORD *)&v94 + 1);
          if ((unint64_t)v94 >= 0x400)
          {
            operator delete(*(void **)__p[1]);
            __p[1] = (char *)__p[1] + 8;
            *(_QWORD *)&v94 = v94 - 512;
          }
          v48 = v90;
          if (v90 >= v91)
          {
            v50 = (v90 - v89) >> 3;
            if ((unint64_t)(v50 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v51 = (v91 - v89) >> 2;
            if (v51 <= v50 + 1)
              v51 = v50 + 1;
            if ((unint64_t)(v91 - v89) >= 0x7FFFFFFFFFFFFFF8)
              v52 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v52 = v51;
            if (v52)
              v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v91, v52);
            else
              v53 = 0;
            v54 = &v53[8 * v50];
            *(_QWORD *)v54 = v47;
            v49 = v54 + 8;
            v56 = v89;
            v55 = v90;
            if (v90 != v89)
            {
              do
              {
                v57 = *((_QWORD *)v55 - 1);
                v55 -= 8;
                *((_QWORD *)v54 - 1) = v57;
                v54 -= 8;
              }
              while (v55 != v56);
              v55 = v89;
            }
            v89 = v54;
            v90 = v49;
            v91 = &v53[8 * v52];
            if (v55)
              operator delete(v55);
          }
          else
          {
            *(_QWORD *)v90 = v47;
            v49 = v48 + 8;
          }
          v58 = HIDWORD(v47);
          v90 = v49;
          v59 = -1;
          v87 = v47;
          do
          {
            v60 = (v59 + v47);
            v61 = 1 << (v59 + v47);
            v62 = -3;
            do
            {
              if ((v60 & 0x80000000) == 0 && (int)v60 < v33)
              {
                v63 = (v58 + v62 + 2);
                if ((v63 & 0x80000000) == 0 && (int)v63 < v32)
                {
                  v64 = v63 >> 6;
                  v65 = 1 << (v58 + v62 + 2);
                  if ((*((_QWORD *)v95 + (v63 >> 6)) & v65) == 0
                    && ((*(_QWORD *)(*(_QWORD *)(v98[0] + 24 * v60) + 8 * v64) & v65) != 0
                     || (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v97 + 24 * v60) + 8 * v64) & v65) != 0))
                  {
                    LODWORD(v88) = v60;
                    HIDWORD(v88) = v58 + v62 + 2;
                    std::deque<std::pair<int,int>>::push_back(__p, &v88);
                    *((_QWORD *)v96[0] + (v60 >> 6)) |= v61;
                    *((_QWORD *)v95 + v64) |= v65;
                  }
                }
              }
              v62 += 2;
            }
            while (v62 < 0);
            ++v59;
            LODWORD(v47) = v87;
          }
          while (v59 != 2);
        }
      }
      v67 = v89;
      v66 = v90;
      v68 = v86;
      if (v89 != v90)
      {
        do
        {
          v69 = *v68 + 240 * *((int *)v67 + 1);
          v72 = *(_QWORD *)(v69 + 104);
          v71 = (_QWORD *)(v69 + 104);
          v70 = v72;
          v74 = (char **)(v71 - 1);
          v73 = (char *)*(v71 - 1);
          if ((unint64_t)v73 >= v72)
          {
            v76 = (void **)(v71 - 2);
            v77 = (char *)*(v71 - 2);
            v78 = (v73 - v77) >> 2;
            v79 = v78 + 1;
            if ((unint64_t)(v78 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v80 = v70 - (_QWORD)v77;
            if (v80 >> 1 > v79)
              v79 = v80 >> 1;
            if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL)
              v81 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v81 = v79;
            if (v81)
            {
              v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v71, v81);
              v73 = *v74;
              v77 = (char *)*v76;
            }
            else
            {
              v82 = 0;
            }
            v83 = &v82[4 * v78];
            *(_DWORD *)v83 = *(_DWORD *)v67;
            v75 = v83 + 4;
            while (v73 != v77)
            {
              v84 = *((_DWORD *)v73 - 1);
              v73 -= 4;
              *((_DWORD *)v83 - 1) = v84;
              v83 -= 4;
            }
            *v76 = v83;
            *v74 = v75;
            *v71 = &v82[4 * v81];
            if (v77)
              operator delete(v77);
            v68 = v86;
          }
          else
          {
            *(_DWORD *)v73 = *(_DWORD *)v67;
            v75 = v73 + 4;
          }
          *v74 = v75;
          v67 += 8;
        }
        while (v67 != v66);
        v67 = v89;
      }
      if (v67)
      {
        v90 = v67;
        operator delete(v67);
      }
      std::deque<char *>::~deque[abi:ne180100](__p);
      if (v95)
        operator delete(v95);
      if (v96[0])
        operator delete(v96[0]);
      __p[0] = v97;
      std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = v98;
      std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v1 = v68 + 34;
      if (v1 == v85)
        return;
    }
    v4 = (char *)*v1;
    while (1)
    {
      v5 = (_DWORD *)*((_QWORD *)v4 + 11);
      v6 = (_DWORD *)*((_QWORD *)v4 + 12);
      if (v5 != v6)
      {
        while ((*v5 & 0x80000000) == 0)
        {
          if (++v5 == v6)
            goto LABEL_9;
        }
      }
      if (v5 != v6)
        break;
LABEL_9:
      v7 = (_DWORD *)*((_QWORD *)v4 + 14);
      v8 = (_DWORD *)*((_QWORD *)v4 + 15);
      if (v7 != v8)
      {
        while ((*v7 & 0x80000000) == 0)
        {
          if (++v7 == v8)
            goto LABEL_14;
        }
      }
      if (v7 != v8)
        return;
LABEL_14:
      v4 += 240;
      if (v4 == v2)
      {
        if (v3 == v2)
          goto LABEL_65;
        v9 = 0;
        v10 = (char *)*v1;
        do
        {
          v12 = (int *)*((_QWORD *)v10 + 11);
          v11 = (int *)*((_QWORD *)v10 + 12);
          if (v12 == v11)
          {
            v11 = (int *)*((_QWORD *)v10 + 11);
          }
          else
          {
            while ((*v12 & 0x80000000) == 0)
            {
              if (++v12 == v11)
                goto LABEL_30;
            }
            if (v12 != v11)
            {
              for (i = v12 + 1; i != v11; ++i)
              {
                if ((*i & 0x80000000) == 0)
                  *v12++ = *i;
              }
            }
            if (v12 != v11)
            {
              v11 = v12;
              *((_QWORD *)v10 + 12) = v12;
            }
          }
LABEL_30:
          v15 = (int *)*((_QWORD *)v10 + 14);
          v14 = (int *)*((_QWORD *)v10 + 15);
          if (v15 != v14)
          {
            while ((*v15 & 0x80000000) == 0)
            {
              if (++v15 == v14)
                goto LABEL_42;
            }
            if (v15 != v14)
            {
              for (j = v15 + 1; j != v14; ++j)
              {
                if ((*j & 0x80000000) == 0)
                  *v15++ = *j;
              }
            }
            if (v15 != v14)
            {
              *((_QWORD *)v10 + 15) = v15;
              goto LABEL_43;
            }
LABEL_42:
            v15 = v14;
          }
LABEL_43:
          v17 = (int *)*((_QWORD *)v10 + 11);
          if (v17 != v11)
          {
            v18 = v17 + 1;
            if (v17 + 1 != v11)
            {
              v19 = *v17;
              v20 = v17 + 1;
              do
              {
                v22 = *v20++;
                v21 = v22;
                v23 = v19 < v22;
                if (v19 <= v22)
                  v19 = v21;
                if (v23)
                  v17 = v18;
                v18 = v20;
              }
              while (v20 != v11);
            }
            if ((int)v9 <= *v17 + 1)
              v9 = *v17 + 1;
          }
          v24 = (int *)*((_QWORD *)v10 + 14);
          if (v24 != v15)
          {
            v25 = v24 + 1;
            if (v24 + 1 != v15)
            {
              v26 = *v24;
              v27 = v24 + 1;
              do
              {
                v29 = *v27++;
                v28 = v29;
                v30 = v26 < v29;
                if (v26 <= v29)
                  v26 = v28;
                if (v30)
                  v24 = v25;
                v25 = v27;
              }
              while (v27 != v15);
            }
            v31 = *v24;
            if ((int)v9 <= v31 + 1)
              v9 = v31 + 1;
          }
          v10 += 240;
        }
        while (v10 != v2);
        goto LABEL_66;
      }
    }
  }
}

void sub_1DE4D50D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p)
{
  uint64_t v27;

  if (__p)
    operator delete(__p);
  a17 = (void *)(v27 - 136);
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = (void *)(v27 - 112);
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

_QWORD *std::vector<std::vector<BOOL>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      std::vector<BOOL>::vector(v6, a3);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1DE4D52E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(a1, *(_QWORD **)a2, 0, (_QWORD *)(*(_QWORD *)a2 + 8 * (*(_QWORD *)(a2 + 8) >> 6)), *(_QWORD *)(a2 + 8) & 0x3F, *(_QWORD *)(a2 + 8));
  }
  return a1;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(_QWORD *a1, _QWORD *a2, unint64_t a3, _QWORD *a4, int a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE v11[32];

  v6 = a1[1];
  v7 = v6 + a6;
  a1[1] = v6 + a6;
  if (!v6 || ((v7 - 1) ^ (v6 - 1)) >= 0x40)
  {
    if (v7 >= 0x41)
      v8 = (v7 - 1) >> 6;
    else
      v8 = 0;
    *(_QWORD *)(*a1 + 8 * v8) = 0;
  }
  v9 = *a1 + 8 * (v6 >> 6);
  v10 = v6 & 0x3F;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(a2, a3, a4, a5, (uint64_t)&v9, (uint64_t)v11);
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(_QWORD *a1@<X1>, unint64_t a2@<X2>, _QWORD *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _BOOL4 v12;

  LODWORD(v6) = a2;
  v7 = *(uint64_t **)a5;
  v8 = *(_DWORD *)(a5 + 8);
  if (a1 != a3 || (_DWORD)a2 != a4)
  {
    do
    {
      v9 = 1 << v8;
      if (((*a1 >> a2) & 1) != 0)
        v10 = *v7 | v9;
      else
        v10 = *v7 & ~v9;
      *v7 = v10;
      v11 = (_DWORD)v6 == 63;
      v12 = v6 == 63;
      v6 = (a2 + 1);
      if (v11)
        v6 = 0;
      if (v8 == 63)
      {
        v8 = 0;
        *(_QWORD *)a5 = ++v7;
      }
      else
      {
        ++v8;
      }
      a1 += v12;
      a2 = v6 | a2 & 0xFFFFFFFF00000000;
      *(_DWORD *)(a5 + 8) = v8;
    }
    while (a1 != a3 || (_DWORD)v6 != a4);
    a1 = a3;
  }
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = v7;
  *(_DWORD *)(a6 + 24) = v8;
}

void std::vector<std::vector<BOOL>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<BOOL>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<BOOL>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    v5 = *(void **)(i - 24);
    v4 = v5;
    if (v5)
      operator delete(v4);
  }
  a1[1] = v2;
}

void std::deque<std::pair<int,int>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::pair<int,int>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<std::pair<int,int>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<char **>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<char **>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<char **>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<char **>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1DE4D5850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Shortlist::Clear(kaldi::quasar::Shortlist *this)
{
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 11);
  std::vector<kaldi::MappableVector<int>>::__base_destruct_at_end[abi:ne180100]((uint64_t)this, *(_QWORD *)this);
  std::vector<kaldi::MappableVector<int>>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + 64, *((_QWORD *)this + 8));
  std::vector<kaldi::MappableVector<int>>::resize((uint64_t *)this, 3uLL);
  std::vector<kaldi::MappableVector<int>>::resize((uint64_t *)this + 8, 2uLL);
  kaldi::Matrix<float>::Resize((uint64_t)this + 24, 0, 0, 0, 0);
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void sub_1DE4D5A88(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1DF0ECF6C](v1 + 424);
  _Unwind_Resume(a1);
}

uint64_t kaldi::MappableVector<int>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (*(_BYTE *)(a1 + 16) && *(_QWORD *)a1)
    MEMORY[0x1DF0ECFFC]();
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return a1;
}

uint64_t kaldi::quasar::Shortlist::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  std::vector<int>::pointer begin;
  size_t v19;
  void *v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  unint64_t v24;
  std::vector<int>::pointer v25;
  size_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  void *v33;
  int64_t v34;
  char v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  void *v40;
  std::vector<int> __p;

  kaldi::quasar::Shortlist::Clear((kaldi::quasar::Shortlist *)a1);
  kaldi::ExpectToken(a2, a3, (kaldi *)"<ShortlistTable>");
  v36 = 0;
  v37 = 0;
  v38 = 0;
  while (kaldi::Peek(a2, a3) == 60)
  {
    kaldi::ReadToken(a2, a3, (uint64_t)&v36, v8, v9);
    if (SHIBYTE(v38) < 0)
    {
      if (v37 == 16)
      {
        v12 = (uint64_t *)v36;
LABEL_8:
        v14 = *v12;
        v13 = v12[1];
        if (v14 == 0x6853746F7669503CLL && v13 == 0x3E7473696C74726FLL)
          kaldi::ReadBasicType<BOOL>(a2, a3, (char *)(a1 + 520), v10, v11);
      }
    }
    else if (SHIBYTE(v38) == 16)
    {
      v12 = (uint64_t *)&v36;
      goto LABEL_8;
    }
  }
  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1)
  {
    v16 = 0;
    v17 = 0;
    do
    {
      memset(&__p, 0, sizeof(__p));
      v39 = 0;
      v40 = 0;
      kaldi::ReadIntegerVector<int>(a2, a3, &__p, a4, 0, &v40, &v39);
      begin = __p.__begin_;
      if (__p.__begin_ == __p.__end_)
      {
        v20 = v40;
        v34 = v39;
        v35 = 0;
      }
      else
      {
        v19 = (char *)__p.__end_ - (char *)__p.__begin_;
        v34 = __p.__end_ - __p.__begin_;
        v35 = 1;
        v20 = (void *)operator new[]();
        memcpy(v20, begin, v19);
        begin = __p.__begin_;
      }
      v33 = v20;
      if (begin)
      {
        __p.__end_ = begin;
        operator delete(begin);
      }
      kaldi::MappableVector<int>::operator=(*(_QWORD *)a1 + v16, (uint64_t)&v33);
      if (v35 && v33)
        MEMORY[0x1DF0ECFFC](v33, 0x1000C8077774924);
      if (!*(_QWORD *)(*(_QWORD *)a1 + v16 + 8))
        kaldi::KaldiAssertFailure_((kaldi *)"Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/shortlist.cc", (const char *)0x88, "!shortlist_cond_table_flat_[i].empty()", v21);
      ++v17;
      v16 += 24;
    }
    while (v17 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3));
  }
  if (*(_BYTE *)(a1 + 520))
  {
    kaldi::Matrix<float>::Read(a1 + 24, a2, a3, 0, a4);
    if (!(4 * *(int *)(a1 + 36) * (uint64_t)*(int *)(a1 + 40)))
      kaldi::KaldiAssertFailure_((kaldi *)"Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/shortlist.cc", (const char *)0x8D, "shortlist_cond_probs_flat_.SizeInBytes() != 0", v22);
  }
  if (*(_QWORD *)(a1 + 72) != *(_QWORD *)(a1 + 64))
  {
    v23 = 0;
    v24 = 0;
    do
    {
      memset(&__p, 0, sizeof(__p));
      v39 = 0;
      v40 = 0;
      kaldi::ReadIntegerVector<int>(a2, a3, &__p, a4, 0, &v40, &v39);
      v25 = __p.__begin_;
      if (__p.__begin_ == __p.__end_)
      {
        v27 = v40;
        v34 = v39;
        v35 = 0;
      }
      else
      {
        v26 = (char *)__p.__end_ - (char *)__p.__begin_;
        v34 = __p.__end_ - __p.__begin_;
        v35 = 1;
        v27 = (void *)operator new[]();
        memcpy(v27, v25, v26);
        v25 = __p.__begin_;
      }
      v33 = v27;
      if (v25)
      {
        __p.__end_ = v25;
        operator delete(v25);
      }
      kaldi::MappableVector<int>::operator=(*(_QWORD *)(a1 + 64) + v23, (uint64_t)&v33);
      if (v35 && v33)
        MEMORY[0x1DF0ECFFC](v33, 0x1000C8077774924);
      v29 = *(_QWORD *)(a1 + 64);
      if (!*(_QWORD *)(v29 + v23 + 8))
        kaldi::KaldiAssertFailure_((kaldi *)"Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/shortlist.cc", (const char *)0x92, "!shortlist_freq_word_flat_[i].empty()", v28);
      ++v24;
      v23 += 24;
    }
    while (v24 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 72) - v29) >> 3));
  }
  kaldi::ExpectToken(a2, a3, (kaldi *)"<ShortlistLangPairs>");
  memset(&__p, 0, sizeof(__p));
  kaldi::ReadToken(a2, a3, (uint64_t)&__p, v30, v31);
  kaldi::SplitStringToVector((const std::string *)&__p, ",", 0, a1 + 88);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0)
    operator delete(__p.__begin_);
  if (SHIBYTE(v38) < 0)
    operator delete(v36);
  return 1;
}

void sub_1DE4D5F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::Shortlist::GetConstrainedIdxFromPivotShortlist(_QWORD *a1, uint64_t a2, int **a3, int a4, int a5, int a6, int a7)
{
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  const char *v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  float v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  double v30;
  float v31;
  uint64_t *v32;
  double v33;
  unint64_t v34;
  _QWORD *v35;
  double *v36;
  double *v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  double *v41;
  double *v42;
  int v43;
  double v44;
  double v45;
  unint64_t v46;
  double *v47;
  double v48;
  int v49;
  double *v50;
  double *v51;
  double v52;
  double *v53;
  double v54;
  double v55;
  int v56;
  double v57;
  double v58;
  int v59;
  double *v60;
  double v61;
  double v62;
  double *v63;
  double v64;
  double v65;
  double *v66;
  double v67;
  double v68;
  int v69;
  double v70;
  double v71;
  double v72;
  int v73;
  double v74;
  double v75;
  int v76;
  double *v77;
  double *v78;
  double *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v85;
  int v87;
  uint64_t *v88;
  void *__p;
  double *v90;
  uint64_t v91;
  int v92;
  __int128 v93;
  __int128 v94;
  int v95;
  int v96[4];
  uint64_t v97;

  v12 = (uint64_t *)a1[8];
  if (v12[1] <= (unint64_t)(a5 + 1))
  {
    v14 = *((_DWORD *)v12 + 8);
    v13 = *v12;
  }
  else
  {
    v13 = *v12;
    v14 = *(_DWORD *)(v13 + 4 * (a5 + 1));
  }
  v15 = v14 - *(_DWORD *)(v13 + 4 * a5);
  if (v15 >= a7)
    v15 = a7;
  if (v15)
  {
    v16 = 0;
    v17 = v15;
    do
    {
      v96[0] = *(_DWORD *)(*(_QWORD *)(a1[8] + 24) + 4 * ((int)v16 + *(_DWORD *)(*(_QWORD *)a1[8] + 4 * a5)));
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>(a2, v96, v96);
      ++v16;
    }
    while (v17 != v16);
  }
  std::unordered_set<int>::unordered_set<std::__wrap_iter<int const*>>((uint64_t)v96, *a3, a3[1]);
  v18 = v97;
  if (v97)
  {
    v85 = a6;
    do
    {
      v19 = *(_DWORD *)(v18 + 16);
      v20 = kaldi::flatVec3Size<std::vector<kaldi::MappableVector<int>>>((uint64_t)a1, a4, v19);
      v88 = (uint64_t *)v18;
      v93 = 0u;
      v94 = 0u;
      v95 = 1065353216;
      std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>((uint64_t)&v93, v20 * a6);
      if (v20 >= 1)
      {
        v23 = *(int *)(*(_QWORD *)(*a1 + 24) + 4 * (*(_DWORD *)(*(_QWORD *)*a1 + 4 * a4) + v19));
        if (v23 < (int)v23 + v20)
        {
          v24 = (int)v23 + v20;
          do
          {
            v25 = *(_DWORD *)(*(_QWORD *)(*a1 + 48) + 4 * v23);
            v26 = *(float *)kaldi::MatrixBase<float>::operator()((uint64_t)(a1 + 3), v23, 0, v21, v22);
            v27 = kaldi::flatVec3Size<std::vector<kaldi::MappableVector<int>>>((uint64_t)a1, a5, v25);
            if (v27 >= 1)
            {
              v28 = *(int *)(*(_QWORD *)(*a1 + 24) + 4 * (*(_DWORD *)(*(_QWORD *)*a1 + 4 * a5) + v25));
              if (v28 < (int)v28 + v27)
              {
                v29 = (int)v28 + v27;
                v30 = v26;
                do
                {
                  v92 = 0;
                  v92 = *(_DWORD *)(*(_QWORD *)(*a1 + 48) + 4 * v28);
                  v31 = *(float *)kaldi::MatrixBase<float>::operator()((uint64_t)(a1 + 3), v28, 0, v21, v22);
                  v32 = std::__hash_table<std::__hash_value_type<int,double>,std::__unordered_map_hasher<int,std::__hash_value_type<int,double>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,double>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,double>>>::find<int>(&v93, &v92);
                  v33 = v30 * v31;
                  if (v32)
                  {
                    *((double *)v32 + 3) = v33 + *((double *)v32 + 3);
                  }
                  else
                  {
                    __p = &v92;
                    *((double *)std::__hash_table<std::__hash_value_type<int,double>,std::__unordered_map_hasher<int,std::__hash_value_type<int,double>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,double>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,double>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v93, &v92, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 3) = v33;
                  }
                  ++v28;
                }
                while (v28 < v29);
              }
            }
            ++v23;
          }
          while (v23 < v24);
        }
      }
      v90 = 0;
      v91 = 0;
      __p = 0;
      v34 = 0;
      if ((_QWORD)v94)
      {
        v35 = (_QWORD *)v94;
        do
        {
          ++v34;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
      std::vector<std::pair<int,double>>::__init_with_size[abi:ne180100]<std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<int,double>,void *> *>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<int,double>,void *> *>>>((char *)&__p, (uint64_t *)v94, 0, v34);
      v37 = (double *)__p;
      v36 = v90;
      v38 = (unint64_t)((char *)v90 - (_BYTE *)__p) >> 4;
      if ((int)v38 >= a6)
        LODWORD(v38) = a6;
      v87 = v38;
      v39 = (char *)__p + 16 * (int)v38;
      if (v39 != (char *)v90)
      {
        do
        {
          v40 = ((char *)v36 - (char *)v37) >> 4;
          if (v40 < 2)
            break;
          if (v40 == 3)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Shortlist::GetConstrainedIdxFromPivotShortlist(std::unordered_set<int> &,std::vector<int> const&,int,int,int,int)::$_0 &,std::__wrap_iter<std::pair<int,double> *>>(v37, v37 + 2, v36 - 2);
            break;
          }
          if (v40 == 2)
          {
            v74 = *(v36 - 1);
            v75 = v37[1];
            if (v74 > v75)
            {
              v76 = *(_DWORD *)v37;
              *(_DWORD *)v37 = *((_DWORD *)v36 - 4);
              *((_DWORD *)v36 - 4) = v76;
              v37[1] = v74;
              *(v36 - 1) = v75;
            }
            break;
          }
          if ((char *)v36 - (char *)v37 <= 127)
          {
            while (v37 != v36 - 2)
            {
              v77 = v37;
              v37 += 2;
              if (v77 != v36 && v37 != v36)
              {
                v78 = v37;
                v79 = v77;
                do
                {
                  if (v78[1] > v79[1])
                    v79 = v78;
                  v78 += 2;
                }
                while (v78 != v36);
                if (v79 != v77)
                {
                  v80 = *(_DWORD *)v77;
                  *(_DWORD *)v77 = *(_DWORD *)v79;
                  *(_DWORD *)v79 = v80;
                  v81 = *((_QWORD *)v77 + 1);
                  v77[1] = v79[1];
                  *((_QWORD *)v79 + 1) = v81;
                }
              }
            }
            break;
          }
          v41 = &v37[2 * (v40 >> 1)];
          v42 = v36 - 2;
          v43 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Shortlist::GetConstrainedIdxFromPivotShortlist(std::unordered_set<int> &,std::vector<int> const&,int,int,int,int)::$_0 &,std::__wrap_iter<std::pair<int,double> *>>(v37, v41, v36 - 2);
          v44 = v37[1];
          v45 = v41[1];
          if (v44 <= v45)
          {
            v47 = v36 - 2;
            while (1)
            {
              v46 = (unint64_t)(v47 - 2);
              if (v47 - 2 == v37)
                break;
              v48 = *(v47 - 1);
              v47 -= 2;
              if (v48 > v45)
              {
                v49 = *(_DWORD *)v37;
                *(_DWORD *)v37 = *(_DWORD *)v46;
                *(_DWORD *)v46 = v49;
                v37[1] = v48;
                *(double *)(v46 + 8) = v44;
                ++v43;
                goto LABEL_38;
              }
            }
            v63 = v37 + 2;
            v64 = *(v36 - 1);
            if (v44 <= v64)
            {
              while (v63 != v42)
              {
                v65 = v63[1];
                if (v44 > v65)
                {
                  v69 = *(_DWORD *)v63;
                  *(_DWORD *)v63 = *((_DWORD *)v36 - 4);
                  *((_DWORD *)v36 - 4) = v69;
                  v63[1] = v64;
                  *(v36 - 1) = v65;
                  v63 += 2;
                  goto LABEL_70;
                }
                v63 += 2;
              }
              break;
            }
LABEL_70:
            if (v63 == v42)
              break;
            while (1)
            {
              v70 = v37[1];
              v60 = v63 - 2;
              do
              {
                v71 = v60[3];
                v60 += 2;
              }
              while (v70 <= v71);
              v63 = v60 + 2;
              do
              {
                v72 = *(v42 - 1);
                v42 -= 2;
              }
              while (v70 > v72);
              if (v60 >= v42)
                break;
              v73 = *(_DWORD *)v60;
              *(_DWORD *)v60 = *(_DWORD *)v42;
              *(_DWORD *)v42 = v73;
              v60[1] = v72;
              v42[1] = v71;
            }
            if (v60 > (double *)v39)
              break;
          }
          else
          {
            v46 = (unint64_t)(v36 - 2);
LABEL_38:
            v50 = v37 + 2;
            if ((unint64_t)(v37 + 2) >= v46)
            {
              v53 = v37 + 2;
            }
            else
            {
              v51 = v37 + 2;
              while (1)
              {
                v52 = v41[1];
                v53 = v51 - 2;
                do
                {
                  v54 = v53[3];
                  v53 += 2;
                }
                while (v54 > v52);
                v51 = v53 + 2;
                do
                {
                  v55 = *(double *)(v46 - 8);
                  v46 -= 16;
                }
                while (v55 <= v52);
                if ((unint64_t)v53 >= v46)
                  break;
                v56 = *(_DWORD *)v53;
                *(_DWORD *)v53 = *(_DWORD *)v46;
                *(_DWORD *)v46 = v56;
                v53[1] = v55;
                *(double *)(v46 + 8) = v54;
                ++v43;
                if (v53 == v41)
                  v41 = (double *)v46;
              }
            }
            if (v53 != v41)
            {
              v57 = v41[1];
              v58 = v53[1];
              if (v57 > v58)
              {
                v59 = *(_DWORD *)v53;
                *(_DWORD *)v53 = *(_DWORD *)v41;
                *(_DWORD *)v41 = v59;
                v53[1] = v57;
                v41[1] = v58;
                ++v43;
              }
            }
            if (v53 == (double *)v39)
              break;
            if (!v43)
            {
              if (v53 <= (double *)v39)
              {
                v66 = v53 + 2;
                while (v66 != v36)
                {
                  v67 = v66[1];
                  v68 = *(v66 - 1);
                  v66 += 2;
                  if (v67 > v68)
                    goto LABEL_54;
                }
              }
              else
              {
                while (v50 != v53)
                {
                  v61 = v50[1];
                  v62 = *(v50 - 1);
                  v50 += 2;
                  if (v61 > v62)
                    goto LABEL_54;
                }
              }
              break;
            }
LABEL_54:
            if (v53 <= (double *)v39)
            {
              v60 = v53 + 2;
            }
            else
            {
              v36 = v53;
              v60 = v37;
            }
          }
          v37 = v60;
        }
        while (v36 != (double *)v39);
      }
      v82 = v87;
      if (v87)
      {
        v83 = 0;
        do
        {
          std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>(a2, (int *)((char *)__p + v83), (char *)__p + v83);
          v83 += 16;
          --v82;
        }
        while (v82);
      }
      if (__p)
      {
        v90 = (double *)__p;
        operator delete(__p);
      }
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v93);
      v18 = *v88;
      a6 = v85;
    }
    while (*v88);
  }
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v96);
}

void sub_1DE4D6614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a21);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t kaldi::flatVec3Size<std::vector<kaldi::MappableVector<int>>>(uint64_t a1, int a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = *(_QWORD **)a1;
  v4 = *(int *)(**(_QWORD **)a1 + 4 * a2) + (uint64_t)a3;
  if (*(_QWORD *)(*(_QWORD *)a1 + 32) <= (unint64_t)(v4 + 1))
  {
    v6 = *((_DWORD *)v3 + 14);
    v5 = v3[3];
  }
  else
  {
    v5 = v3[3];
    v6 = *(_DWORD *)(v5 + 4 * (v4 + 1));
  }
  return (v6 - *(_DWORD *)(v5 + 4 * (int)v4));
}

uint64_t kaldi::quasar::Shortlist::GetConstrainedIdxFromDirectShortlist(uint64_t result, uint64_t a2, uint64_t *a3, int a4, int a5, int a6)
{
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;

  v10 = (_QWORD *)result;
  v11 = *(uint64_t **)(result + 64);
  if (v11[1] <= (unint64_t)(a4 + 1))
  {
    v13 = *((_DWORD *)v11 + 8);
    v12 = *v11;
  }
  else
  {
    v12 = *v11;
    v13 = *(_DWORD *)(v12 + 4 * (a4 + 1));
  }
  v14 = v13 - *(_DWORD *)(v12 + 4 * a4);
  if (v14 >= a6)
    v14 = a6;
  if (v14)
  {
    v15 = 0;
    v16 = v14;
    do
    {
      v24 = *(_DWORD *)(*(_QWORD *)(v10[8] + 24) + 4 * ((int)v15 + *(_DWORD *)(*(_QWORD *)v10[8] + 4 * a4)));
      result = (uint64_t)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>(a2, &v24, &v24);
      ++v15;
    }
    while (v16 != v15);
  }
  v17 = *a3;
  if (a3[1] != *a3)
  {
    v18 = 0;
    do
    {
      v19 = *(_DWORD *)(v17 + 4 * v18);
      result = kaldi::flatVec3Size<std::vector<kaldi::MappableVector<int>>>((uint64_t)v10, a4, v19);
      if ((int)result >= a5)
        v20 = a5;
      else
        v20 = result;
      if (v20)
      {
        v21 = 0;
        v22 = v20;
        do
        {
          v23 = *(_DWORD *)(*(_QWORD *)(*v10 + 48)
                          + 4
                          * ((int)v21
                           + *(_DWORD *)(*(_QWORD *)(*v10 + 24) + 4
                                                                  * (*(_DWORD *)(*(_QWORD *)*v10 + 4 * a4) + v19))));
          result = (uint64_t)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>(a2, &v23, &v23);
          ++v21;
        }
        while (v22 != v21);
      }
      ++v18;
      v17 = *a3;
    }
    while (v18 < (a3[1] - *a3) >> 2);
  }
  return result;
}

uint64_t kaldi::quasar::Shortlist::MapShortlist(uint64_t a1, unsigned __int8 *a2, int a3, int a4, int a5, int a6, uint64_t *a7, int **a8, _QWORD *a9, char a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const void *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  const std::string *v30;
  int64_t size;
  const std::string *v32;
  char *v33;
  std::string *v34;
  char *v35;
  std::string::size_type v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  _BYTE *v40;
  void *v41;
  _BYTE *v42;
  std::string::size_type v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  _BYTE *v47;
  void *v48;
  _BYTE *v49;
  std::string::size_type v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  _BYTE *v54;
  void *v55;
  _BYTE *v56;
  std::string::size_type v57;
  uint64_t v58;
  uint64_t v59;
  std::string::size_type v60;
  int v61;
  void *v62;
  std::string *v63;
  unsigned __int8 *v64;
  std::string::size_type v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  std::string *v69;
  int v70;
  int v71;
  int v72;
  int v73;
  BOOL v75;
  BOOL v76;
  int v77;
  int v78;
  int v79;
  _QWORD *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  _DWORD *v88;
  int v89;
  int *v90;
  int *v91;
  int *v92;
  int *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  BOOL v97;
  int *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t result;
  __int32 *v102;
  __int32 *v103;
  __int32 *v104;
  uint64_t v105;
  uint64_t i;
  std::string *v107;
  std::string::size_type v108;
  uint64_t v109;
  int v110;
  _QWORD *v111;
  _DWORD *v112;
  _DWORD *v113;
  int v114;
  _BOOL4 v119;
  int v120;
  int v121;
  uint64_t v122;
  char v123;
  std::string __s1[12];
  void *__p[2];
  _QWORD v126[11];
  char v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  int v131;
  std::string v132;
  std::string v133;
  int v134;
  int v135;
  _BYTE v136[17];

  v134 = a4;
  v135 = a3;
  v13 = *(_QWORD *)(a1 + 88);
  v12 = *(_QWORD *)(a1 + 96);
  if (v12 == v13)
  {
    v119 = 0;
  }
  else
  {
    v14 = 0;
    v15 = (v12 - v13) / 24;
    v16 = a2[23];
    v17 = *(const void **)a2;
    v18 = *((_QWORD *)a2 + 1);
    if ((v16 & 0x80u) == 0)
      v19 = a2[23];
    else
      v19 = *((_QWORD *)a2 + 1);
    if (v15 <= 1)
      v20 = 1;
    else
      v20 = (v12 - v13) / 24;
    v119 = 1;
    do
    {
      v122 = v14;
      v21 = (unsigned __int8 *)(v13 + 24 * v14);
      v22 = v21[23];
      v23 = (char)v22;
      if ((v22 & 0x80u) != 0)
        v22 = *((_QWORD *)v21 + 1);
      if (v19 == v22)
      {
        if (v23 >= 0)
          v24 = v21;
        else
          v24 = *(unsigned __int8 **)v21;
        if ((v16 & 0x80) != 0)
        {
          if (!memcmp(v17, v24, v18))
            goto LABEL_26;
        }
        else
        {
          if (!(_DWORD)v16)
            goto LABEL_26;
          v25 = a2;
          v26 = v16;
          while (*v25 == *v24)
          {
            ++v25;
            ++v24;
            if (!--v26)
              goto LABEL_26;
          }
        }
      }
      v14 = v122 + 1;
      v119 = v15 > v122 + 1;
    }
    while (v122 + 1 != v20);
  }
  LODWORD(v122) = -1;
LABEL_26:
  v27 = *(unsigned __int8 *)(a1 + 520);
  if (*(_BYTE *)(a1 + 520))
  {
    if (v12 != v13)
    {
      v28 = 0;
      v123 = 0;
      v120 = -1;
      v121 = -1;
      while (v12 == v13)
      {
LABEL_145:
        if ((v123 & 1) == 0)
        {
          ++v28;
          v13 = *(_QWORD *)(a1 + 88);
          v12 = *(_QWORD *)(a1 + 96);
          if (0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 3) > v28)
            continue;
        }
        goto LABEL_150;
      }
      v29 = 0;
      while (1)
      {
        if (v28 == v29)
          goto LABEL_139;
        __p[0] = 0;
        __p[1] = 0;
        v126[0] = 0;
        memset(__s1, 0, 24);
        v129 = 0uLL;
        *(_QWORD *)&v130 = 0;
        memset(&v133, 0, sizeof(v133));
        v30 = (const std::string *)(v13 + 24 * v28);
        if (SHIBYTE(v30->__r_.__value_.__r.__words[2]) < 0)
        {
          v32 = (const std::string *)v30->__r_.__value_.__r.__words[0];
          size = v30->__r_.__value_.__l.__size_;
        }
        else
        {
          size = HIBYTE(v30->__r_.__value_.__r.__words[2]);
          v32 = v30;
        }
        v33 = (char *)v32 + size;
        if (size >= 1)
        {
          v34 = (std::string *)v32;
          do
          {
            v35 = (char *)memchr(v34, 45, size);
            if (!v35)
              break;
            if (*v35 == 45)
              goto LABEL_41;
            v34 = (std::string *)(v35 + 1);
            size = v33 - (char *)v34;
          }
          while (v33 - (char *)v34 > 0);
        }
        v35 = v33;
LABEL_41:
        if (v35 == v33)
          v36 = -1;
        else
          v36 = v35 - (char *)v32;
        std::string::basic_string(&v132, v30, 0, v36, (std::allocator<char> *)v136);
        if (SHIBYTE(v126[0]) < 0)
          operator delete(__p[0]);
        *(_OWORD *)__p = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
        v126[0] = *((_QWORD *)&v132.__r_.__value_.__l + 2);
        v37 = *(_QWORD *)(a1 + 88) + 24 * v28;
        if (*(char *)(v37 + 23) < 0)
        {
          v39 = *(_QWORD *)v37;
          v38 = *(_QWORD *)(v37 + 8);
        }
        else
        {
          v38 = *(unsigned __int8 *)(v37 + 23);
          v39 = *(_QWORD *)(a1 + 88) + 24 * v28;
        }
        v40 = (_BYTE *)(v39 + v38);
        if (v38 >= 1)
        {
          v41 = (void *)v39;
          do
          {
            v42 = memchr(v41, 45, v38);
            if (!v42)
              break;
            if (*v42 == 45)
              goto LABEL_55;
            v41 = v42 + 1;
            v38 = v40 - (_BYTE *)v41;
          }
          while (v40 - (_BYTE *)v41 > 0);
        }
        v42 = v40;
LABEL_55:
        if (v42 == v40)
          v43 = 0;
        else
          v43 = (std::string::size_type)&v42[-v39 + 1];
        std::string::basic_string(&v132, (const std::string *)v37, v43, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v136);
        if (SHIBYTE(__s1[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1[0].__r_.__value_.__l.__data_);
        __s1[0] = v132;
        v44 = *(_QWORD *)(a1 + 88) + 24 * v29;
        if (*(char *)(v44 + 23) < 0)
        {
          v46 = *(_QWORD *)v44;
          v45 = *(_QWORD *)(v44 + 8);
        }
        else
        {
          v45 = *(unsigned __int8 *)(v44 + 23);
          v46 = *(_QWORD *)(a1 + 88) + 24 * v29;
        }
        v47 = (_BYTE *)(v46 + v45);
        if (v45 >= 1)
        {
          v48 = (void *)v46;
          do
          {
            v49 = memchr(v48, 45, v45);
            if (!v49)
              break;
            if (*v49 == 45)
              goto LABEL_69;
            v48 = v49 + 1;
            v45 = v47 - (_BYTE *)v48;
          }
          while (v47 - (_BYTE *)v48 > 0);
        }
        v49 = v47;
LABEL_69:
        if (v49 == v47)
          v50 = -1;
        else
          v50 = (std::string::size_type)&v49[-v46];
        std::string::basic_string(&v132, (const std::string *)v44, 0, v50, (std::allocator<char> *)v136);
        if (SBYTE7(v130) < 0)
          operator delete((void *)v129);
        v129 = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
        *(_QWORD *)&v130 = *((_QWORD *)&v132.__r_.__value_.__l + 2);
        v51 = *(_QWORD *)(a1 + 88) + 24 * v29;
        if (*(char *)(v51 + 23) < 0)
        {
          v53 = *(_QWORD *)v51;
          v52 = *(_QWORD *)(v51 + 8);
        }
        else
        {
          v52 = *(unsigned __int8 *)(v51 + 23);
          v53 = *(_QWORD *)(a1 + 88) + 24 * v29;
        }
        v54 = (_BYTE *)(v53 + v52);
        if (v52 >= 1)
        {
          v55 = (void *)v53;
          do
          {
            v56 = memchr(v55, 45, v52);
            if (!v56)
              break;
            if (*v56 == 45)
              goto LABEL_83;
            v55 = v56 + 1;
            v52 = v54 - (_BYTE *)v55;
          }
          while (v54 - (_BYTE *)v55 > 0);
        }
        v56 = v54;
LABEL_83:
        if (v56 == v54)
          v57 = -1;
        else
          v57 = (std::string::size_type)&v56[-v53];
        std::string::basic_string(&v132, (const std::string *)v51, v57, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v136);
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v133.__r_.__value_.__l.__data_);
        v133 = v132;
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, (const void **)&v133.__r_.__value_.__l.__data_, (uint64_t)&v132);
        v58 = a2[23];
        if ((v58 & 0x80u) == 0)
          v59 = a2[23];
        else
          v59 = *((_QWORD *)a2 + 1);
        v60 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
        v61 = SHIBYTE(v132.__r_.__value_.__r.__words[2]);
        if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v60 = v132.__r_.__value_.__l.__size_;
        if (v59 != v60)
          goto LABEL_104;
        v62 = (void *)v132.__r_.__value_.__r.__words[0];
        if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v63 = &v132;
        else
          v63 = (std::string *)v132.__r_.__value_.__r.__words[0];
        if ((v58 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a2, v63, *((_QWORD *)a2 + 1)))
            goto LABEL_104;
        }
        else if (a2[23])
        {
          v64 = a2;
          while (*v64 == v63->__r_.__value_.__s.__data_[0])
          {
            ++v64;
            v63 = (std::string *)((char *)v63 + 1);
            if (!--v58)
              goto LABEL_106;
          }
LABEL_104:
          if (v61 < 0)
            operator delete(v132.__r_.__value_.__l.__data_);
LABEL_128:
          v77 = 1;
          goto LABEL_129;
        }
LABEL_106:
        if ((__s1[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v65 = HIBYTE(__s1[0].__r_.__value_.__r.__words[2]);
        else
          v65 = __s1[0].__r_.__value_.__l.__size_;
        v66 = BYTE7(v130);
        if (SBYTE7(v130) < 0)
          v66 = *((_QWORD *)&v129 + 1);
        if (v65 == v66)
        {
          if ((SBYTE7(v130) & 0x80u) == 0)
            v67 = (unsigned __int8 *)&v129;
          else
            v67 = (unsigned __int8 *)v129;
          if ((*((_BYTE *)&__s1[0].__r_.__value_.__s + 23) & 0x80) != 0)
          {
            v76 = memcmp(__s1[0].__r_.__value_.__l.__data_, v67, __s1[0].__r_.__value_.__l.__size_) == 0;
            if ((v61 & 0x80000000) == 0)
              goto LABEL_124;
          }
          else if (*((_BYTE *)&__s1[0].__r_.__value_.__s + 23))
          {
            v68 = HIBYTE(__s1[0].__r_.__value_.__r.__words[2]) - 1;
            v69 = __s1;
            do
            {
              v71 = v69->__r_.__value_.__s.__data_[0];
              v69 = (std::string *)((char *)v69 + 1);
              v70 = v71;
              v73 = *v67++;
              v72 = v73;
              v75 = v68-- != 0;
              v76 = v70 == v72;
            }
            while (v70 == v72 && v75);
            if ((v61 & 0x80000000) == 0)
            {
LABEL_124:
              if (!v76)
                goto LABEL_128;
              goto LABEL_125;
            }
          }
          else
          {
            v76 = 1;
            if ((v61 & 0x80000000) == 0)
              goto LABEL_124;
          }
        }
        else
        {
          v76 = 0;
          if ((v61 & 0x80000000) == 0)
            goto LABEL_124;
        }
        operator delete(v62);
        if (!v76)
          goto LABEL_128;
LABEL_125:
        v77 = 0;
        v123 = 1;
        v120 = v29;
        v121 = v28;
LABEL_129:
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v133.__r_.__value_.__l.__data_);
        if (SBYTE7(v130) < 0)
          operator delete((void *)v129);
        if (SHIBYTE(__s1[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(v126[0]) < 0)
          operator delete(__p[0]);
        if (!v77)
          goto LABEL_145;
        v13 = *(_QWORD *)(a1 + 88);
        v12 = *(_QWORD *)(a1 + 96);
LABEL_139:
        if (0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 3) <= ++v29)
          goto LABEL_145;
      }
    }
    v123 = 0;
    v120 = -1;
    v121 = -1;
LABEL_150:
    v27 = v123 & 1;
    v78 = v120;
    v79 = v121;
  }
  else
  {
    v78 = -1;
    v79 = -1;
  }
  if (((v119 | v27) & 1) == 0 || (a6 + a5 < 0) ^ __OFADD__(a6, a5) | (a6 + a5 == 0))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p, "MapShortlist", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/shortlist.cc", 306);
      v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Has shortlist, but dissabled due to shortlist-lang-pair = ", 58);
      v81 = (char)a2[23];
      if (v81 >= 0)
        v82 = (uint64_t)a2;
      else
        v82 = *(_QWORD *)a2;
      if (v81 >= 0)
        v83 = a2[23];
      else
        v83 = *((_QWORD *)a2 + 1);
      v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, v82, v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)", lp = ", 7);
      v85 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)", shortlist-cond-n = ", 21);
      v86 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)", shortlist-freq-n = ", 21);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    }
    if (!a10)
    {
      result = 0;
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 112);
      return result;
    }
    v87 = *(_QWORD *)a1;
    if (*(_QWORD *)(*(_QWORD *)a1 + 8) < 2uLL)
    {
      v89 = *(_DWORD *)(v87 + 32);
      v88 = *(_DWORD **)v87;
    }
    else
    {
      v88 = *(_DWORD **)v87;
      v89 = v88[1];
    }
    v110 = v89 - *v88 - 1;
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p, "MapShortlist", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/shortlist.cc", 313);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Shortlist is disabled, and fallback to use full vocab (", 55);
      v111 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)") instead.", 10);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    }
    std::vector<int>::resize((std::vector<int> *)(a1 + 112), v110);
    v112 = *(_DWORD **)(a1 + 112);
    v113 = *(_DWORD **)(a1 + 120);
    if (v112 != v113)
    {
      v114 = 0;
      do
        *v112++ = v114++;
      while (v112 != v113);
    }
    *(_DWORD *)(a1 + 136) = v135;
  }
  else
  {
    v129 = 0u;
    v130 = 0u;
    v131 = 1065353216;
    if (v119)
      kaldi::quasar::Shortlist::GetConstrainedIdxFromDirectShortlist(a1, (uint64_t)&v129, a7, v122, a5, a6);
    else
      kaldi::quasar::Shortlist::GetConstrainedIdxFromPivotShortlist((_QWORD *)a1, (uint64_t)&v129, (int **)a7, v79, v78, a5, a6);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>((uint64_t)&v129, &v135, &v135);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>((uint64_t)&v129, &v134, &v134);
    v90 = (int *)*a7;
    v91 = (int *)a7[1];
    while (v90 != v91)
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>((uint64_t)&v129, v90, v90);
      ++v90;
    }
    v92 = *a8;
    v93 = a8[1];
    while (v92 != v93)
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>((uint64_t)&v129, v92, v92);
      ++v92;
    }
    v94 = (_QWORD *)*a9;
    if ((_QWORD *)*a9 != a9 + 1)
    {
      do
      {
        LODWORD(__p[0]) = *((_DWORD *)v94 + 7);
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__erase_unique<int>(&v129, (int *)__p);
        v95 = (_QWORD *)v94[1];
        if (v95)
        {
          do
          {
            v96 = v95;
            v95 = (_QWORD *)*v95;
          }
          while (v95);
        }
        else
        {
          do
          {
            v96 = (_QWORD *)v94[2];
            v97 = *v96 == (_QWORD)v94;
            v94 = v96;
          }
          while (!v97);
        }
        v94 = v96;
      }
      while (v96 != a9 + 1);
    }
    v98 = *(int **)(a1 + 112);
    *(_QWORD *)(a1 + 120) = v98;
    if ((_QWORD)v130)
    {
      v99 = 0;
      v100 = (_QWORD *)v130;
      do
      {
        ++v99;
        v100 = (_QWORD *)*v100;
      }
      while (v100);
    }
    else
    {
      v99 = 0;
    }
    std::vector<int>::__insert_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<int,void *> *>,std::__hash_const_iterator<std::__hash_node<int,void *> *>>((std::vector<int> *)(a1 + 112), v98, (_QWORD *)v130, 0, v99);
    std::__sort<std::__less<int,int> &,int *>();
    v102 = *(__int32 **)(a1 + 120);
    v103 = wmemchr(*(__int32 **)(a1 + 112), v135, ((uint64_t)v102 - *(_QWORD *)(a1 + 112)) >> 2);
    if (v103)
      v104 = v103;
    else
      v104 = v102;
    *(_DWORD *)(a1 + 136) = ((unint64_t)v104 - *(_QWORD *)(a1 + 112)) >> 2;
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)__p, "MapShortlist", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/shortlist.cc", 353);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Using shortlist, reducing Voc size to ", 38);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      if (kaldi::g_kaldi_verbose_level >= 5)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)"Shortlisted vocabulary:", 23);
        v105 = *(_QWORD *)(a1 + 112);
        for (i = *(_QWORD *)(a1 + 120); v105 != i; v105 += 4)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)" ", 1);
          std::ostream::operator<<();
        }
        if (kaldi::g_kaldi_verbose_level > 4)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__s1, "MapShortlist", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/shortlist.cc", 361, 5);
          std::stringbuf::str();
          if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v107 = &v133;
          else
            v107 = (std::string *)v133.__r_.__value_.__r.__words[0];
          if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v108 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
          else
            v108 = v133.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)v107, v108);
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v133.__r_.__value_.__l.__data_);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__s1);
        }
        __p[0] = *(void **)MEMORY[0x1E0DE4F50];
        v109 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
        *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F50] + 64);
        v126[0] = v109;
        v126[1] = MEMORY[0x1E0DE4FB8] + 16;
        if (v127 < 0)
          operator delete((void *)v126[9]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1DF0ECF6C](&v128);
      }
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v129);
  }
  return 1;
}

void sub_1DE4D7320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a56);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v61 - 208);
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

kaldi::nnet1::Nnet *kaldi::quasar::Shortlist::ConstrainSoftmax(uint64_t a1, unsigned __int8 *a2, int a3, int a4, int a5, int a6, uint64_t *a7, kaldi::nnet1::Nnet *a8, int **a9, _QWORD *a10)
{
  kaldi::nnet1::Nnet *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t Component;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  kaldi::nnet1::Component *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  _QWORD *v43;
  _QWORD *v44;
  std::string *v45;
  std::string::size_type size;
  _QWORD *v47;
  std::string v48;
  _QWORD v49[47];

  if (!kaldi::quasar::Shortlist::MapShortlist(a1, a2, a3, a4, a5, a6, a7, a9, a10, 0))
    return 0;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)v49);
  v12 = (kaldi::nnet1::Nnet *)(a1 + 144);
  kaldi::nnet1::Nnet::operator=((kaldi::nnet1::Nnet *)(a1 + 144), (uint64_t)v49);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)v49);
  v13 = (*((_QWORD *)a8 + 1) - *(_QWORD *)a8) >> 3;
  Component = kaldi::nnet1::Nnet::GetComponent(a8, (int)v13 - 1, v14, v15, v16);
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)Component + 24))(Component);
  v22 = v13 - 2;
  if (v21 != 513)
    v22 = v13 - 1;
  v23 = v22;
  if (v22)
  {
    v24 = 0;
    do
    {
      v25 = kaldi::nnet1::Nnet::GetComponent(a8, v24, v18, v19, v20);
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
      kaldi::nnet1::Nnet::AppendComponent((kaldi::nnet1::Nnet *)(a1 + 144), v26, v27, v28, v29);
      ++v24;
    }
    while (v23 != v24);
  }
  v30 = (unsigned int *)kaldi::nnet1::Nnet::GetComponent(a8, v23, v18, v19, v20);
  v31 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v30 + 24))(v30);
  switch((int)v31)
  {
    case 257:
      v32 = (uint64_t)kaldi::quasar::Shortlist::shrinkAffineTransform<kaldi::nnet1::AffineTransform>(a1, v30, (int **)(a1 + 112));
      break;
    case 258:
      v32 = kaldi::quasar::Shortlist::shrinkLinearTransform<kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>>(a1, v30, (uint64_t *)(a1 + 112));
      break;
    case 259:
      v32 = kaldi::quasar::Shortlist::shrinkLinearTransform<kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>>(a1, v30, (uint64_t *)(a1 + 112));
      break;
    case 260:
      v32 = kaldi::quasar::Shortlist::shrinkLinearTransform<kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>>(a1, v30, (uint64_t *)(a1 + 112));
      break;
    default:
      v36 = (kaldi::nnet1::Component *)v31;
      if ((_DWORD)v31 == 1033)
      {
        v32 = kaldi::quasar::Shortlist::shrinkAffineTransform<kaldi::nnet1::QuantizedAffineTransform<signed char>>(a1, v30, (int **)(a1 + 112));
      }
      else
      {
        if ((_DWORD)v31 != 1035)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49, "ConstrainSoftmax", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/shortlist.cc", 427);
          v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"ConstrainSoftmax", 16);
          v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" is not implemented for ", 24);
          kaldi::nnet1::Component::TypeToMarker(v36, &v48);
          if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v45 = &v48;
          else
            v45 = (std::string *)v48.__r_.__value_.__r.__words[0];
          if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
          else
            size = v48.__r_.__value_.__l.__size_;
          v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, size);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v47, " component.");
          std::string::~string(&v48);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
        }
        v32 = kaldi::quasar::Shortlist::shrinkAffineTransform<kaldi::nnet1::QuantizedAffineTransform<short>>(a1, v30, (int **)(a1 + 112));
      }
      break;
  }
  kaldi::nnet1::Nnet::AppendComponent((kaldi::nnet1::Nnet *)(a1 + 144), v32, v33, v34, v35);
  if (v21 == 513)
  {
    v37 = (*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 2;
    v38 = operator new();
    *(_DWORD *)(v38 + 8) = v37;
    *(_DWORD *)(v38 + 12) = v37;
    *(_WORD *)(v38 + 16) = 0;
    *(_QWORD *)(v38 + 32) = 0;
    *(_QWORD *)(v38 + 40) = 0;
    *(_QWORD *)(v38 + 24) = 0;
    *(_QWORD *)v38 = &off_1EA92D430;
    kaldi::nnet1::Nnet::AppendComponent(v12, v38, v39, v40, v41);
  }
  return v12;
}

void sub_1DE4D77B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Shortlist::shrinkAffineTransform<kaldi::nnet1::QuantizedAffineTransform<signed char>>(int a1, unsigned int *lpsrc, int **a3)
{
  uint64_t v4;
  int *v5;
  int *v6;
  _DWORD *v7;
  _DWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  float v18;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  int *v25;
  unsigned int v26;
  uint64_t v27;
  char *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;

  v4 = lpsrc[2];
  v6 = *a3;
  v5 = a3[1];
  if (!v7)
    __cxa_bad_cast();
  v8 = v7;
  v9 = (char *)v5 - (char *)v6;
  v10 = (unint64_t)((char *)v5 - (char *)v6) >> 2;
  v11 = operator new();
  kaldi::nnet1::QuantizedAffineTransform<signed char>::QuantizedAffineTransform(v11, v4, v10);
  kaldi::Matrix<float>::Matrix((uint64_t)&v37, v10, v4, 0, 0);
  v14 = (v9 >> 2);
  if ((int)v10 >= 1)
  {
    v15 = 0;
    do
    {
      if ((int)v4 >= 1)
      {
        v16 = 0;
        v17 = (*a3)[v15];
        do
        {
          v18 = kaldi::QuantizedMatrixBase<signed char>::operator()((uint64_t)(v8 + 12), v17, v16, v12, v13);
          if (v15 >= v39 || v16 >= v38)
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v13);
          *(float *)(v37 + 4 * (int)v15 * v40 + 4 * v16++) = v18;
        }
        while (v4 != v16);
      }
      ++v15;
    }
    while (v15 != v14);
  }
  kaldi::nnet1::QuantizedAffineTransform<signed char>::SetLinearity(v11, (uint64_t)&v37);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  kaldi::Vector<float>::Resize((void **)&v34, v10, 0, v20, v21);
  if ((int)v10 >= 1)
  {
    v25 = *a3;
    v26 = v8[28];
    v27 = v35;
    v28 = "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h";
    v29 = v34;
    while (1)
    {
      v31 = *v25++;
      v30 = v31;
      if (v26 <= v31)
        break;
      if (!v27)
      {
        v33 = 104;
        v28 = "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h";
        goto LABEL_21;
      }
      *v29++ = *(_DWORD *)(*((_QWORD *)v8 + 13) + 4 * v30);
      --v27;
      if (!--v14)
        goto LABEL_17;
    }
    v33 = 270;
LABEL_21:
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", v28, (const char *)v33, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v24);
  }
LABEL_17:
  kaldi::nnet1::QuantizedAffineTransform<signed char>::SetBias(v11, (uint64_t)&v34, v22, v23, v24);
  kaldi::Vector<float>::Destroy((uint64_t)&v34);
  kaldi::Matrix<float>::~Matrix((uint64_t)&v37);
  return v11;
}

void sub_1DE4D79E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  kaldi::Vector<float>::Destroy((uint64_t)&a9);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Shortlist::shrinkAffineTransform<kaldi::nnet1::QuantizedAffineTransform<short>>(int a1, unsigned int *lpsrc, int **a3)
{
  uint64_t v4;
  int *v5;
  int *v6;
  _DWORD *v7;
  _DWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  float v18;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  int *v25;
  unsigned int v26;
  uint64_t v27;
  char *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;

  v4 = lpsrc[2];
  v6 = *a3;
  v5 = a3[1];
  if (!v7)
    __cxa_bad_cast();
  v8 = v7;
  v9 = (char *)v5 - (char *)v6;
  v10 = (unint64_t)((char *)v5 - (char *)v6) >> 2;
  v11 = operator new();
  kaldi::nnet1::QuantizedAffineTransform<short>::QuantizedAffineTransform(v11, v4, v10);
  kaldi::Matrix<float>::Matrix((uint64_t)&v37, v10, v4, 0, 0);
  v14 = (v9 >> 2);
  if ((int)v10 >= 1)
  {
    v15 = 0;
    do
    {
      if ((int)v4 >= 1)
      {
        v16 = 0;
        v17 = (*a3)[v15];
        do
        {
          v18 = kaldi::QuantizedMatrixBase<short>::operator()((uint64_t)(v8 + 12), v17, v16, v12, v13);
          if (v15 >= v39 || v16 >= v38)
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v13);
          *(float *)(v37 + 4 * (int)v15 * v40 + 4 * v16++) = v18;
        }
        while (v4 != v16);
      }
      ++v15;
    }
    while (v15 != v14);
  }
  kaldi::nnet1::QuantizedAffineTransform<short>::SetLinearity(v11, (uint64_t)&v37);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  kaldi::Vector<float>::Resize((void **)&v34, v10, 0, v20, v21);
  if ((int)v10 >= 1)
  {
    v25 = *a3;
    v26 = v8[28];
    v27 = v35;
    v28 = "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h";
    v29 = v34;
    while (1)
    {
      v31 = *v25++;
      v30 = v31;
      if (v26 <= v31)
        break;
      if (!v27)
      {
        v33 = 104;
        v28 = "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h";
        goto LABEL_21;
      }
      *v29++ = *(_DWORD *)(*((_QWORD *)v8 + 13) + 4 * v30);
      --v27;
      if (!--v14)
        goto LABEL_17;
    }
    v33 = 270;
LABEL_21:
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", v28, (const char *)v33, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v24);
  }
LABEL_17:
  kaldi::nnet1::QuantizedAffineTransform<signed char>::SetBias(v11, (uint64_t)&v34, v22, v23, v24);
  kaldi::Vector<float>::Destroy((uint64_t)&v34);
  kaldi::Matrix<float>::~Matrix((uint64_t)&v37);
  return v11;
}

void sub_1DE4D7C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  kaldi::Vector<float>::Destroy((uint64_t)&a9);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a12);
  _Unwind_Resume(a1);
}

kaldi::nnet1::AffineTransform *kaldi::quasar::Shortlist::shrinkAffineTransform<kaldi::nnet1::AffineTransform>(int a1, unsigned int *lpsrc, int **a3)
{
  uint64_t v4;
  int *v5;
  int *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  kaldi::nnet1::AffineTransform *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  unint64_t v15;
  int *v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  int *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  int v44;

  v4 = lpsrc[2];
  v6 = *a3;
  v5 = a3[1];
  if (!v7)
    __cxa_bad_cast();
  v8 = v7;
  v9 = (char *)v5 - (char *)v6;
  v10 = (unint64_t)((char *)v5 - (char *)v6) >> 2;
  v11 = (kaldi::nnet1::AffineTransform *)operator new();
  kaldi::nnet1::AffineTransform::AffineTransform(v11, v4, v10);
  v13 = v8[14];
  if (!v13)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x251, "linearity_", v12);
  kaldi::Matrix<float>::Matrix((uint64_t)&v41, v10, v4, 0, 0);
  if ((int)v10 >= 1)
  {
    v15 = 0;
    v16 = *a3;
    v17 = "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h";
    v18 = 205;
    do
    {
      if ((int)v4 >= 1)
      {
        v19 = v16[v15];
        if (*(_DWORD *)(v13 + 20) > v19)
        {
          v20 = 0;
          v21 = v43;
          v22 = *(unsigned int *)(v13 + 16);
          v23 = v41 + 4 * v44 * (int)v15;
          while (v22 != v20)
          {
            if (v15 >= v21 || v20 >= v42)
              goto LABEL_21;
            *(_DWORD *)(v23 + 4 * v20) = *(_DWORD *)(*(_QWORD *)(v13 + 8)
                                                   + 4 * (int)(*(_DWORD *)(v13 + 24) * v19)
                                                   + 4 * v20);
            if (v4 == ++v20)
              goto LABEL_12;
          }
        }
        v18 = 551;
        v17 = "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h";
LABEL_21:
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", v17, (const char *)v18, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v14);
      }
LABEL_12:
      ++v15;
    }
    while (v15 != (v10 & ~((int)v10 >> 31)));
  }
  kaldi::nnet1::AffineTransform::SetLinearity(v11, (uint64_t)&v41);
  v26 = v8[15];
  if (!v26)
    kaldi::KaldiAssertFailure_((kaldi *)"Bias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-affine-transform.h", (const char *)0x255, "bias_", v25);
  v38 = 0;
  v39 = 0;
  v40 = 0;
  kaldi::Vector<float>::Resize((void **)&v38, v10, 0, v24, v25);
  if ((int)v10 >= 1)
  {
    v28 = *a3;
    v29 = *(_DWORD *)(v26 + 16);
    v30 = (v9 >> 2);
    v31 = v39;
    v32 = "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h";
    v33 = v38;
    while (1)
    {
      v35 = *v28++;
      v34 = v35;
      if (v29 <= v35)
        break;
      if (!v31)
      {
        v37 = 104;
        v32 = "../engine/common/libquasar/libkaldi/src/matrix/kaldi-vector.h";
        goto LABEL_24;
      }
      *v33++ = *(_DWORD *)(*(_QWORD *)(v26 + 8) + 4 * v34);
      --v31;
      if (!--v30)
        goto LABEL_19;
    }
    v37 = 270;
LABEL_24:
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", v32, (const char *)v37, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(dim_)", v27);
  }
LABEL_19:
  kaldi::nnet1::AffineTransform::SetBias(v11, (uint64_t)&v38);
  kaldi::Vector<float>::Destroy((uint64_t)&v38);
  kaldi::Matrix<float>::~Matrix((uint64_t)&v41);
  return v11;
}

void sub_1DE4D7F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  kaldi::Vector<float>::Destroy((uint64_t)&a9);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Shortlist::shrinkLinearTransform<kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>>(int a1, unsigned int *lpsrc, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  float v20;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;

  v4 = lpsrc[2];
  v6 = *a3;
  v5 = a3[1];
  if (!v7)
    __cxa_bad_cast();
  v8 = v7;
  v9 = v5 - v6;
  v10 = (unint64_t)(v5 - v6) >> 2;
  v11 = operator new();
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform(v11, v4, v10);
  v13 = v8[13];
  if (!v13)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", v12);
  kaldi::Matrix<float>::Matrix((uint64_t)&v23, v10, v4, 0, 0);
  if ((int)v10 >= 1)
  {
    v16 = 0;
    v17 = (v9 >> 2);
    do
    {
      if ((int)v4 >= 1)
      {
        v18 = 0;
        v19 = *(_DWORD *)(*a3 + 4 * v16);
        do
        {
          v20 = kaldi::QuantizedMatrixBase<signed char>::operator()(v13, v19, v18, v14, v15);
          if (v16 >= v25 || v18 >= v24)
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v15);
          *(float *)(v23 + 4 * (int)v16 * v26 + 4 * v18++) = v20;
        }
        while (v4 != v18);
      }
      ++v16;
    }
    while (v16 != v17);
  }
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::SetLinearity(v11, (uint64_t)&v23);
  kaldi::Matrix<float>::~Matrix((uint64_t)&v23);
  return v11;
}

void sub_1DE4D8114(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Shortlist::shrinkLinearTransform<kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>>(int a1, unsigned int *lpsrc, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  float v20;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;

  v4 = lpsrc[2];
  v6 = *a3;
  v5 = a3[1];
  if (!v7)
    __cxa_bad_cast();
  v8 = v7;
  v9 = v5 - v6;
  v10 = (unint64_t)(v5 - v6) >> 2;
  v11 = operator new();
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::LinearTransform(v11, v4, v10);
  v13 = v8[13];
  if (!v13)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", v12);
  kaldi::Matrix<float>::Matrix((uint64_t)&v23, v10, v4, 0, 0);
  if ((int)v10 >= 1)
  {
    v16 = 0;
    v17 = (v9 >> 2);
    do
    {
      if ((int)v4 >= 1)
      {
        v18 = 0;
        v19 = *(_DWORD *)(*a3 + 4 * v16);
        do
        {
          v20 = kaldi::QuantizedMatrixBase<short>::operator()(v13, v19, v18, v14, v15);
          if (v16 >= v25 || v18 >= v24)
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v15);
          *(float *)(v23 + 4 * (int)v16 * v26 + 4 * v18++) = v20;
        }
        while (v4 != v18);
      }
      ++v16;
    }
    while (v16 != v17);
  }
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<short>>::SetLinearity(v11, (uint64_t)&v23);
  kaldi::Matrix<float>::~Matrix((uint64_t)&v23);
  return v11;
}

void sub_1DE4D82D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Shortlist::shrinkLinearTransform<kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>>(int a1, unsigned int *lpsrc, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;

  v4 = lpsrc[2];
  v6 = *a3;
  v5 = a3[1];
  if (!v7)
    __cxa_bad_cast();
  v8 = v7;
  v9 = (unint64_t)(v5 - v6) >> 2;
  v10 = operator new();
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::LinearTransform(v10, v4, v9);
  v12 = v8[13];
  if (!v12)
    kaldi::KaldiAssertFailure_((kaldi *)"Linearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-linear-transform.h", (const char *)0x153, "linearity_", v11);
  kaldi::Matrix<float>::Matrix((uint64_t)&v24, v9, v4, 0, 0);
  if ((int)v9 >= 1)
  {
    v14 = 0;
    v15 = *a3;
    v16 = "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h";
    v17 = 205;
    do
    {
      if ((int)v4 >= 1)
      {
        v18 = *(_DWORD *)(v15 + 4 * v14);
        if (*(_DWORD *)(v12 + 20) > v18)
        {
          v19 = 0;
          v20 = v26;
          v21 = *(unsigned int *)(v12 + 16);
          v22 = v24 + 4 * v27 * (int)v14;
          while (v21 != v19)
          {
            if (v14 >= v20 || v19 >= v25)
              goto LABEL_15;
            *(_DWORD *)(v22 + 4 * v19) = *(_DWORD *)(*(_QWORD *)(v12 + 8)
                                                   + 4 * (int)(*(_DWORD *)(v12 + 24) * v18)
                                                   + 4 * v19);
            if (v4 == ++v19)
              goto LABEL_12;
          }
        }
        v17 = 551;
        v16 = "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h";
LABEL_15:
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", v16, (const char *)v17, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v13);
      }
LABEL_12:
      ++v14;
    }
    while (v14 != (v9 & ~((int)v9 >> 31)));
  }
  kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetLinearity(v10, (uint64_t)&v24);
  kaldi::Matrix<float>::~Matrix((uint64_t)&v24);
  return v10;
}

void sub_1DE4D84C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

kaldi::nnet1::Nnet *kaldi::quasar::Shortlist::ConstructNnet(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  kaldi::nnet1::Nnet *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  _BYTE v19[376];

  v6 = kaldi::MatrixBase<float>::NumCols(a2);
  v7 = kaldi::MatrixBase<float>::NumRows(a2);
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)v19);
  v8 = (kaldi::nnet1::Nnet *)(a1 + 18);
  kaldi::nnet1::Nnet::operator=((kaldi::nnet1::Nnet *)(a1 + 18), (uint64_t)v19);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)v19);
  v9 = operator new();
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::LinearTransform(v9, v6, v7);
  kaldi::nnet1::LinearTransform<kaldi::QuantizedMatrix<signed char>>::SetLinearity(v9, a2);
  kaldi::nnet1::Nnet::AppendComponent((kaldi::nnet1::Nnet *)(a1 + 18), v9, v10, v11, v12);
  if (a3)
  {
    v13 = (a1[15] - a1[14]) >> 2;
    v14 = operator new();
    *(_DWORD *)(v14 + 8) = v13;
    *(_DWORD *)(v14 + 12) = v13;
    *(_WORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 32) = 0;
    *(_QWORD *)(v14 + 40) = 0;
    *(_QWORD *)(v14 + 24) = 0;
    *(_QWORD *)v14 = &off_1EA92D430;
    kaldi::nnet1::Nnet::AppendComponent(v8, v14, v15, v16, v17);
  }
  return v8;
}

void sub_1DE4D8610(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C40045C2EC8);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<kaldi::MappableVector<int>>::resize(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((result[1] - *result) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
    return (uint64_t *)std::vector<kaldi::MappableVector<int>>::__append(result, v4);
  if (!v3)
    return (uint64_t *)std::vector<kaldi::MappableVector<int>>::__base_destruct_at_end[abi:ne180100]((uint64_t)result, *result + 24 * a2);
  return result;
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::vector<std::string>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](this, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_1DE4D87E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DE4D87EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1DE4D88D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1DE4D8B7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 2);
    if (v14 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 2;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[4 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[4 * v17];
    v29 = 4 * a5;
    v30 = &v28[4 * a5];
    do
    {
      v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[4 * a5];
    v25 = &v23[-4 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1DE4D8D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

std::vector<int>::pointer std::vector<int>::__swap_out_circular_buffer(std::vector<int> *this, std::__split_buffer<int> *__v, std::vector<int>::pointer __p)
{
  int *begin;
  std::vector<int>::pointer v6;
  int *v7;
  std::vector<int>::pointer v8;
  int v9;
  int *end;
  std::__split_buffer<int>::pointer v11;
  int64_t v12;
  int *v13;
  int *v14;
  int *value;

  begin = __v->__begin_;
  v6 = this->__begin_;
  v7 = begin;
  if (this->__begin_ != __p)
  {
    v8 = __p;
    v7 = __v->__begin_;
    do
    {
      v9 = *--v8;
      *--v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  v11 = __v->__end_;
  v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<int>::pointer)((char *)v11 + v12);
  v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

_QWORD *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1DE4D9128(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int>::unordered_set<std::__wrap_iter<int const*>>(uint64_t a1, int *a2, int *a3)
{
  int *v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int>(a1, v5, v5);
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_1DE4D91A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<int,double>,std::__unordered_map_hasher<int,std::__hash_value_type<int,double>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,double>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,double>>>::find<int>(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<int,double>,std::__unordered_map_hasher<int,std::__hash_value_type<int,double>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,double>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,double>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1DE4D94BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<int,double>>::__init_with_size[abi:ne180100]<std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<int,double>,void *> *>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<int,double>,void *> *>>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<int,double>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *(_DWORD *)v7 = *((_DWORD *)a2 + 4);
      *(_QWORD *)(v7 + 8) = a2[3];
      a2 = (uint64_t *)*a2;
      v7 += 16;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1DE4D9534(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<int,double>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::Shortlist::GetConstrainedIdxFromPivotShortlist(std::unordered_set<int> &,std::vector<int> const&,int,int,int,int)::$_0 &,std::__wrap_iter<std::pair<int,double> *>>(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  int v6;
  int v7;
  double v8;
  double v9;
  int v10;
  double v11;

  v3 = a2[1];
  v4 = a1[1];
  v5 = a3[1];
  if (v3 > v4)
  {
    v6 = *(_DWORD *)a1;
    if (v5 > v3)
    {
      *(_DWORD *)a1 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v6;
      a1[1] = v5;
      a3[1] = v4;
      return 1;
    }
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_DWORD *)a2 = v6;
    a1[1] = v3;
    a2[1] = v4;
    v11 = a3[1];
    if (v11 <= v4)
      return 1;
    *(_DWORD *)a2 = *(_DWORD *)a3;
    *(_DWORD *)a3 = v6;
    a2[1] = v11;
    a3[1] = v4;
    return 2;
  }
  if (v5 > v3)
  {
    v7 = *(_DWORD *)a2;
    *(_DWORD *)a2 = *(_DWORD *)a3;
    *(_DWORD *)a3 = v7;
    a2[1] = v5;
    a3[1] = v3;
    v8 = a2[1];
    v9 = a1[1];
    if (v8 <= v9)
      return 1;
    v10 = *(_DWORD *)a1;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_DWORD *)a2 = v10;
    a1[1] = v8;
    a2[1] = v9;
    return 2;
  }
  return 0;
}

uint64_t *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__erase_unique<int>(_QWORD *a1, int *a2)
{
  uint64_t *result;

  result = std::__hash_table<std::__hash_value_type<int,double>,std::__unordered_map_hasher<int,std::__hash_value_type<int,double>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,double>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,double>>>::find<int>(a1, a2);
  if (result)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

int *std::vector<int>::__insert_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<int,void *> *>,std::__hash_const_iterator<std::__hash_node<int,void *> *>>(std::vector<int> *a1, int *__src, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  int *v5;
  _QWORD *v7;
  std::allocator<int> *p_end_cap;
  int *v10;
  int *value;
  unint64_t v12;
  char *begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  int *v24;
  uint64_t v25;
  int *v26;
  _QWORD *v27;
  _DWORD *v28;
  char *v29;
  int *v30;
  int *v31;
  int v32;
  int *v33;
  std::__split_buffer<int> __v;

  v5 = __src;
  if (a5 >= 1)
  {
    v7 = a3;
    value = a1->__end_cap_.__value_;
    p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
    v10 = value;
    v12 = *((_QWORD *)p_end_cap - 1);
    if (a5 <= (uint64_t)((uint64_t)value - v12) >> 2)
    {
      v19 = a5 + 1;
      v20 = a3;
      do
      {
        v20 = (_QWORD *)*v20;
        --v19;
      }
      while (v19 > 1);
      v21 = (uint64_t)(v12 - (_QWORD)__src) >> 2;
      if (v21 >= a5)
      {
        v23 = (int *)*((_QWORD *)p_end_cap - 1);
        v21 = a5;
      }
      else
      {
        if ((uint64_t)(v12 - (_QWORD)__src) < 1)
        {
          v20 = a3;
        }
        else
        {
          v22 = v21 + 1;
          v20 = a3;
          do
          {
            v20 = (_QWORD *)*v20;
            --v22;
          }
          while (v22 > 1);
        }
        v23 = (int *)*((_QWORD *)p_end_cap - 1);
        if (v20 != a4)
        {
          v27 = v20;
          v28 = (_DWORD *)*((_QWORD *)p_end_cap - 1);
          do
          {
            *v28++ = *((_DWORD *)v27 + 4);
            v27 = (_QWORD *)*v27;
            ++v23;
          }
          while (v27 != a4);
        }
        a1->__end_ = v23;
      }
      if (v21 >= 1)
      {
        v29 = (char *)&__src[a5];
        v30 = &v23[-a5];
        v31 = v23;
        if ((unint64_t)v30 < v12)
        {
          v31 = v23;
          do
          {
            v32 = *v30++;
            *v31++ = v32;
          }
          while ((unint64_t)v30 < v12);
        }
        a1->__end_ = v31;
        if (v23 != (int *)v29)
          memmove(&v23[-(((char *)v23 - v29) >> 2)], __src, (char *)v23 - v29);
        if (v20 != v7)
        {
          v33 = v5;
          do
          {
            *v33++ = *((_DWORD *)v7 + 4);
            v7 = (_QWORD *)*v7;
          }
          while (v7 != v20);
        }
      }
    }
    else
    {
      begin = (char *)a1->__begin_;
      v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
      if (v14 >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = ((char *)__src - begin) >> 2;
      v16 = (char *)v10 - begin;
      if (v16 >> 1 > v14)
        v14 = v16 >> 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
        v17 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v17 = v14;
      __v.__end_cap_.__value_ = p_end_cap;
      if (v17)
        v18 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v17);
      else
        v18 = 0;
      v24 = &v18[v15];
      __v.__first_ = v18;
      __v.__begin_ = v24;
      __v.__end_cap_.__value_ = &v18[v17];
      v25 = 4 * a5;
      v26 = &v24[a5];
      do
      {
        *v24++ = *((_DWORD *)v7 + 4);
        v7 = (_QWORD *)*v7;
        v25 -= 4;
      }
      while (v25);
      __v.__end_ = v26;
      v5 = std::vector<int>::__swap_out_circular_buffer(a1, &__v, v5);
      if (__v.__end_ != __v.__begin_)
        __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
                                                       + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
      if (__v.__first_)
        operator delete(__v.__first_);
    }
  }
  return v5;
}

void sub_1DE4D9A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::QuantizedAffineTransform<signed char>::SetLinearity(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int *v5;
  const char *v6;
  int v7;
  const char *v8;

  v4 = kaldi::MatrixBase<float>::NumRows(a2);
  v5 = (unsigned int *)(a1 + 48);
  if (v4 != kaldi::QuantizedMatrixBase<short>::NumRows(v5))
    kaldi::KaldiAssertFailure_((kaldi *)"SetLinearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-quantized-affine-transform.h", (const char *)0x78, "linearity.NumRows() == linearity_.NumRows()", v6);
  v7 = kaldi::MatrixBase<float>::NumCols(a2);
  if (v7 != kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)v5))
    kaldi::KaldiAssertFailure_((kaldi *)"SetLinearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-quantized-affine-transform.h", (const char *)0x79, "linearity.NumCols() == linearity_.NumCols()", v8);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat((uint64_t)v5, a2);
}

_DWORD *kaldi::nnet1::QuantizedAffineTransform<signed char>::SetBias(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  if (*(_DWORD *)(a2 + 8) != *(_DWORD *)(a1 + 112))
    kaldi::KaldiAssertFailure_((kaldi *)"SetBias", "../engine/common/libquasar/libkaldi/src/nnet/nnet-quantized-affine-transform.h", (const char *)0x6D, "bias.Dim() == bias_.Dim()", a5);
  return kaldi::CuVectorBase<float>::CopyFromVec<float>((_DWORD *)(a1 + 96), a2, a3, a4, a5);
}

void kaldi::nnet1::QuantizedAffineTransform<short>::SetLinearity(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int *v5;
  const char *v6;
  int v7;
  const char *v8;

  v4 = kaldi::MatrixBase<float>::NumRows(a2);
  v5 = (unsigned int *)(a1 + 48);
  if (v4 != kaldi::QuantizedMatrixBase<short>::NumRows(v5))
    kaldi::KaldiAssertFailure_((kaldi *)"SetLinearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-quantized-affine-transform.h", (const char *)0x78, "linearity.NumRows() == linearity_.NumRows()", v6);
  v7 = kaldi::MatrixBase<float>::NumCols(a2);
  if (v7 != kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)v5))
    kaldi::KaldiAssertFailure_((kaldi *)"SetLinearity", "../engine/common/libquasar/libkaldi/src/nnet/nnet-quantized-affine-transform.h", (const char *)0x79, "linearity.NumCols() == linearity_.NumCols()", v8);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat((uint64_t)v5, a2);
}

uint64_t std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v9 = *(unsigned __int8 **)(v3 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

void std::vector<std::string>::__move_range(std::vector<std::string> *this, std::vector<std::string>::pointer __from_s, std::vector<std::string>::pointer __from_e, std::vector<std::string>::pointer __to)
{
  std::vector<std::string>::pointer end;
  char *v7;
  std::vector<std::string>::pointer v8;
  unint64_t v9;
  __int128 v10;
  char v11;

  end = this->__end_;
  v7 = (char *)__from_s + (char *)end - (char *)__to;
  v8 = end;
  if (v7 < (char *)__from_e)
  {
    v9 = (unint64_t)v7;
    v8 = this->__end_;
    do
    {
      v10 = *(_OWORD *)v9;
      v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
      ++v8;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = 0;
      v9 += 24;
    }
    while (v9 < (unint64_t)__from_e);
  }
  this->__end_ = v8;
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v11, (uint64_t)__from_s, (uint64_t)v7, (uint64_t)end);
}

std::vector<std::string>::pointer std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v, std::vector<std::string>::pointer __p)
{
  std::string *begin;
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *v8;
  std::string *v9;
  std::string *end;
  std::string *value;

  begin = __v->__begin_;
  p_end_cap = &this->__end_cap_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)__p, (uint64_t)__p, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)begin, (uint64_t)begin);
  __v->__begin_ = v8;
  __v->__end_ = (std::__split_buffer<std::string>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)__p, (__int128 *)this->__end_, (uint64_t)__v->__end_);
  v9 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v9;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1DE4D9EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if (a3 != a2)
  {
    v6 = a3;
    do
    {
      v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0)
        operator delete(*(void **)v7);
      v8 = *(_OWORD *)(v6 - 24);
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 - 8);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v6 - 1) = 0;
      *(_BYTE *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a4;
  v10 = a4;
  v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      v5 = *a2;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v4 = v5;
      v4 += 24;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    while (a2 != a3);
    v10 = v4;
  }
  v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::vector<kaldi::MappableVector<int>>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 24)
  {
    if (*(_BYTE *)(i - 8))
    {
      result = *(_QWORD *)(i - 24);
      if (result)
        result = MEMORY[0x1DF0ECFFC](result, 0x1000C8077774924);
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t std::vector<kaldi::MappableVector<int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 24 * a2;
      v14 = 24 * a2;
      v15 = (_BYTE *)(v7 + 16);
      do
      {
        *((_QWORD *)v15 - 1) = 0;
        *v15 = 0;
        v15 += 24;
        v14 -= 24;
      }
      while (v14);
    }
    else
    {
      v13 = *(_QWORD *)(result - 8);
    }
    a1[1] = v13;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v23 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v11);
    else
      v12 = 0;
    v19 = v12;
    v20 = &v12[24 * v8];
    v22 = &v12[24 * v11];
    v16 = &v20[24 * a2];
    v17 = 24 * a2;
    v18 = v20 + 16;
    do
    {
      *((_QWORD *)v18 - 1) = 0;
      *v18 = 0;
      v18 += 24;
      v17 -= 24;
    }
    while (v17);
    v21 = v16;
    std::vector<kaldi::MappableVector<int>>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<kaldi::MappableVector<int>>::~__split_buffer((uint64_t)&v19);
  }
  return result;
}

void sub_1DE4DA16C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::MappableVector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::MappableVector<int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::MappableVector<int>>,std::reverse_iterator<kaldi::MappableVector<int>*>,std::reverse_iterator<kaldi::MappableVector<int>*>,std::reverse_iterator<kaldi::MappableVector<int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::MappableVector<int>>,std::reverse_iterator<kaldi::MappableVector<int>*>,std::reverse_iterator<kaldi::MappableVector<int>*>,std::reverse_iterator<kaldi::MappableVector<int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      *(_QWORD *)(v8 - 24) = *(_QWORD *)(a3 + v7 - 24);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 + v7 - 16);
      *(_BYTE *)(v8 - 8) = *(_BYTE *)(a3 + v7 - 8);
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      *(_BYTE *)(v9 - 8) = 0;
      v7 -= 24;
    }
    while (a3 + v7 != a5);
    *((_QWORD *)&v15 + 1) = a7 + v7;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::MappableVector<int>>,std::reverse_iterator<kaldi::MappableVector<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::MappableVector<int>>,std::reverse_iterator<kaldi::MappableVector<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::MappableVector<int>>,std::reverse_iterator<kaldi::MappableVector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::MappableVector<int>>,std::reverse_iterator<kaldi::MappableVector<int>*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  while (v1 != v2)
  {
    if (*(_BYTE *)(v1 + 16))
    {
      result = *(_QWORD *)v1;
      if (*(_QWORD *)v1)
        result = MEMORY[0x1DF0ECFFC](result, 0x1000C8077774924);
    }
    v1 += 24;
  }
  return result;
}

uint64_t std::__split_buffer<kaldi::MappableVector<int>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<kaldi::MappableVector<int>>::__destruct_at_end[abi:ne180100](a1, *(uint64_t **)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<kaldi::MappableVector<int>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  int v5;

  v2 = *(uint64_t **)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v5 = *((unsigned __int8 *)v2 - 8);
      v2 -= 3;
      *(_QWORD *)(v4 + 16) = v2;
      if (v5)
      {
        result = *v2;
        if (*v2)
        {
          result = MEMORY[0x1DF0ECFFC](result, 0x1000C8077774924);
          v2 = *(uint64_t **)(v4 + 16);
        }
      }
    }
    while (v2 != a2);
  }
  return result;
}

kaldi::quasar::TorchEncoderDecoder::AttentionModel *kaldi::quasar::TorchEncoderDecoder::AttentionModel::AttentionModel(kaldi::quasar::TorchEncoderDecoder::AttentionModel *this, char a2, char a3, char a4)
{
  *(_QWORD *)this = &off_1EA92DE30;
  kaldi::nnet1::Nnet::Nnet((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)((char *)this + 8));
  kaldi::nnet1::Nnet::Nnet((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)((char *)this + 384));
  kaldi::nnet1::Nnet::Nnet((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)((char *)this + 760));
  *((_BYTE *)this + 1136) = a2;
  *((_BYTE *)this + 1137) = a3;
  *((_BYTE *)this + 1138) = a4;
  *((_OWORD *)this + 72) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *((_QWORD *)this + 143) = &unk_1EA92DFA8;
  *((_BYTE *)this + 1184) = 0;
  return this;
}

void sub_1DE4DA45C(_Unwind_Exception *a1)
{
  kaldi::nnet1::Nnet *v1;
  kaldi::nnet1::Nnet *v2;

  kaldi::nnet1::Nnet::~Nnet(v2);
  kaldi::nnet1::Nnet::~Nnet(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::AttentionModel::~AttentionModel(kaldi::quasar::TorchEncoderDecoder::AttentionModel *this)
{
  kaldi::nnet1::Nnet *v2;

  *(_QWORD *)this = &off_1EA92DE30;
  v2 = (kaldi::quasar::TorchEncoderDecoder::AttentionModel *)((char *)this + 8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 1144);
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)((char *)this + 760));
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)((char *)this + 384));
  kaldi::nnet1::Nnet::~Nnet(v2);
}

{
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::~AttentionModel(this);
  JUMPOUT(0x1DF0ED014);
}

void kaldi::quasar::TorchEncoderDecoder::AttentionModel::SetHistoryState(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD v17[4];
  _QWORD v18[4];

  v5 = a1 + 1144;
  if (*(int *)(a2 + 20) < 1)
  {
    kaldi::CuMatrix<float>::Resize(v5, 0, 0, 0, 0);
  }
  else
  {
    kaldi::CuMatrix<float>::Resize(v5, a4, *(unsigned int *)(a2 + 16), 2u, 0);
    if (*(_DWORD *)(a1 + 1164) <= a3)
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v10);
    v11 = *(_QWORD *)(a1 + 1152) + 4 * (int)(*(_DWORD *)(a1 + 1168) * a3);
    v12 = *(_DWORD *)(a1 + 1160);
    v13 = *(_QWORD *)(a1 + 1176);
    v18[0] = &unk_1EA926538;
    v18[1] = v11;
    v18[3] = v13;
    v18[2] = v12;
    if (!*(_DWORD *)(a2 + 20))
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v10);
    v14 = *(_QWORD *)(a2 + 8);
    v15 = *(_DWORD *)(a2 + 16);
    v16 = *(_QWORD *)(a2 + 32);
    v17[0] = &unk_1EA926538;
    v17[1] = v14;
    v17[3] = v16;
    v17[2] = v15;
    kaldi::CuVectorBase<float>::CopyFromVec(v18, (uint64_t)v17, v8, v9, v10);
  }
}

void kaldi::quasar::TorchEncoderDecoder::AttentionModel::GetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD *v6;
  uint64_t v7;
  const char *v8;
  void *__p;
  void *v10;
  _DWORD *v11;

  kaldi::CuMatrix<float>::Resize(a2, *(_DWORD *)(a1 + 1164) > 0, *(unsigned int *)(a1 + 1160), 0, 0);
  if (*(int *)(a2 + 20) >= 1)
  {
    v6 = operator new(4uLL);
    __p = v6;
    *v6 = a3;
    v10 = v6 + 1;
    v11 = v6 + 1;
    kaldi::CuMatrixBase<float>::CopyRows(a2, a1 + 1144, &__p, v7, v8);
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
  }
}

void sub_1DE4DA6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TorchEncoderDecoder::AttentionModel::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  _QWORD v36[35];

  if (*(_BYTE *)(a1 + 1137))
  {
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 105, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Reading Whe_", 12);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36);
    }
    kaldi::nnet1::Nnet::Read((uint64_t **)(a1 + 8), a2, a3, a4);
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 107, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Whe_.Dims() ", 12);
      kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)(a1 + 8), v8, v9, v10, v11);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
      kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 8), v13, v14, v15, v16);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36);
    }
    if (*(_BYTE *)(a1 + 1137))
      goto LABEL_8;
  }
  if (*(_BYTE *)(a1 + 1138))
  {
LABEL_8:
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 110, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Reading Whd_", 12);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36);
    }
    kaldi::nnet1::Nnet::Read((uint64_t **)(a1 + 384), a2, a3, a4);
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 112, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Whd_.Dims() ", 12);
      kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)(a1 + 384), v17, v18, v19, v20);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" ", 1);
      kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 384), v22, v23, v24, v25);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36);
      if (kaldi::g_kaldi_verbose_level >= 2)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 113, 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Reading Whc_", 12);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36);
      }
    }
    v26 = (uint64_t **)(a1 + 760);
    kaldi::nnet1::Nnet::Read(v26, a2, a3, a4);
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 115, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Whc_.Dims() ", 12);
      kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)v26, v27, v28, v29, v30);
      v31 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" ", 1);
      kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)v26, v32, v33, v34, v35);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v36);
    }
  }
}

void sub_1DE4DA9F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::AttentionModel::Feedforward@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, std::vector<int> *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  std::vector<int>::pointer begin;
  size_t v69;
  void *v72;
  __int128 v73;
  __int128 v74;
  std::vector<int>::size_type __sz;
  void *__src;
  uint64_t v77;
  void *v78;
  __int128 v79;
  __int128 v80;
  char v81;
  void *v82;
  __int128 v83;
  __int128 v84;
  char v85;
  void *v86;
  __int128 v87;
  __int128 v88;
  char v89;

  v11 = *(unsigned int *)(a3 + 20);
  v88 = 0u;
  v87 = 0u;
  v86 = &unk_1EA92DFA8;
  v89 = 0;
  if (*(_BYTE *)(a1 + 1138))
  {
    v84 = 0uLL;
    v83 = 0uLL;
    v82 = &unk_1EA92DFA8;
    v85 = 0;
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 384), a3, (uint64_t)&v82, -1, 0);
    kaldi::CuMatrix<float>::Resize((uint64_t)&v86, *(unsigned int *)(a2 + 20), v11, 0, 0);
    kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v86, a2, CblasNoTrans, (uint64_t)&v82, (const char *)0x70, 1.0, 1.0);
LABEL_5:
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v82);
    goto LABEL_6;
  }
  if (*(_BYTE *)(a1 + 1137))
  {
    v84 = 0uLL;
    v83 = 0uLL;
    v82 = &unk_1EA92DFA8;
    v85 = 0;
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 8), a2, (uint64_t)&v82, -1, 0);
    v79 = 0u;
    v80 = 0u;
    v78 = &unk_1EA92DFA8;
    v81 = 0;
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 384), a3, (uint64_t)&v78, -1, 0);
    kaldi::CuMatrix<float>::Resize((uint64_t)&v86, HIDWORD(v83), v11, 0, 0);
    kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v86, (uint64_t)&v82, CblasNoTrans, (uint64_t)&v78, (const char *)0x70, 1.0, 1.0);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v78);
    goto LABEL_5;
  }
  kaldi::CuMatrix<float>::Resize((uint64_t)&v86, *(unsigned int *)(a2 + 20), v11, 0, 0);
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v86, a2, CblasNoTrans, a3, (const char *)0x70, 1.0, 1.0);
LABEL_6:
  kaldi::CuMatrix<float>::Transpose((uint64_t)&v86);
  __sz = 0;
  __src = 0;
  v77 = 0;
  kaldi::CuMatrixBase<float>::FindRowMaxId((uint64_t)&v86, (int *)&__sz, v12, v13, v14);
  kaldi::CuMatrix<float>::Resize(a4, v11, *(unsigned int *)(a2 + 16), 0, 0);
  kaldi::CuMatrix<float>::Resize(a5, v11, DWORD2(v87), 0, 0);
  if ((int)v11 >= 1)
  {
    v17 = 0;
    do
    {
      v79 = 0uLL;
      v78 = &unk_1EA92DFD8;
      *(_QWORD *)&v80 = 0;
      kaldi::CuVector<float>::Resize((uint64_t)&v78, DWORD2(v87), 0, v15, v16);
      if (HIDWORD(v87) <= v17)
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v20);
      v82 = &unk_1EA926538;
      *(_QWORD *)&v83 = v87 + 4 * (int)(v88 * v17);
      *(_QWORD *)&v84 = *((_QWORD *)&v88 + 1);
      *((_QWORD *)&v83 + 1) = DWORD2(v87);
      kaldi::CuVector<float>::operator=((uint64_t)&v78, (uint64_t)&v82, v18, v19, v20);
      if (*(_BYTE *)(a1 + 1136))
      {
        kaldi::CuVectorBase<float>::ApplyExp((uint64_t)&v78);
        if (*(_DWORD *)(a1 + 1164) <= (signed int)v17)
        {
          kaldi::CuMatrix<float>::Resize(a1 + 1144, v17 + 1, DWORD2(v79), 2u, 0);
          if (*(_DWORD *)(a1 + 1164) <= v17)
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v43);
          v44 = *(_QWORD *)(a1 + 1152) + 4 * (int)(*(_DWORD *)(a1 + 1168) * v17);
          v45 = *(_DWORD *)(a1 + 1160);
          v46 = *(_QWORD *)(a1 + 1176);
          v82 = &unk_1EA926538;
          *(_QWORD *)&v83 = v44;
          *(_QWORD *)&v84 = v46;
          *((_QWORD *)&v83 + 1) = v45;
          kaldi::CuVectorBase<float>::CopyFromVec(&v82, (uint64_t)&v78, v41, v42, v43);
        }
        else
        {
          v83 = 0uLL;
          v82 = &unk_1EA92DFD8;
          *(_QWORD *)&v84 = v80;
          kaldi::CuVector<float>::Resize((uint64_t)&v82, DWORD2(v79), 1u, v21, v22);
          kaldi::CuVectorBase<float>::CopyFromVec(&v82, (uint64_t)&v78, v23, v24, v25);
          if (*(_DWORD *)(a1 + 1164) <= v17)
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v28);
          v29 = *(_QWORD *)(a1 + 1152) + 4 * (int)(*(_DWORD *)(a1 + 1168) * v17);
          v30 = *(_DWORD *)(a1 + 1160);
          v31 = *(_QWORD *)(a1 + 1176);
          v72 = &unk_1EA926538;
          *(_QWORD *)&v73 = v29;
          *(_QWORD *)&v74 = v31;
          *((_QWORD *)&v73 + 1) = v30;
          kaldi::CuVectorBase<float>::DivElements((uint64_t)&v78, (uint64_t)&v72, v26, v27, v28);
          if (*(_DWORD *)(a1 + 1164) <= v17)
            kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v34);
          v35 = *(_QWORD *)(a1 + 1152) + 4 * (int)(*(_DWORD *)(a1 + 1168) * v17);
          v36 = *(_DWORD *)(a1 + 1160);
          v37 = *(_QWORD *)(a1 + 1176);
          v72 = &unk_1EA926538;
          *(_QWORD *)&v73 = v35;
          *(_QWORD *)&v74 = v37;
          *((_QWORD *)&v73 + 1) = v36;
          kaldi::CuVectorBase<float>::AddVec((uint64_t)&v72, (uint64_t)&v82, v32, v33, v34, 1.0, 1.0);
          v82 = &unk_1EA92DFD8;
          kaldi::CuVector<float>::Destroy((uint64_t)&v82);
        }
        v47 = kaldi::CuVectorBase<float>::Sum((uint64_t)&v78);
        kaldi::CuVectorBase<float>::Scale((uint64_t)&v78, 1.0 / v47);
      }
      else
      {
        kaldi::CuVectorBase<float>::ApplySoftMax((uint64_t)&v78);
      }
      if (*(_DWORD *)(a5 + 20) <= v17)
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v40);
      v48 = *(_QWORD *)(a5 + 8) + 4 * (int)(*(_DWORD *)(a5 + 24) * v17);
      v49 = *(_DWORD *)(a5 + 16);
      v50 = *(_QWORD *)(a5 + 32);
      v82 = &unk_1EA926538;
      *(_QWORD *)&v83 = v48;
      *(_QWORD *)&v84 = v50;
      *((_QWORD *)&v83 + 1) = v49;
      kaldi::CuVectorBase<float>::CopyFromVec(&v82, (uint64_t)&v78, v38, v39, v40);
      kaldi::CuMatrix<float>::CuMatrix(&v82, a2, 111);
      kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)&v82, (uint64_t)&v78, v51, v52, v53);
      if (*(_DWORD *)(a4 + 20) <= v17)
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v56);
      v57 = *(_QWORD *)(a4 + 8) + 4 * (int)(*(_DWORD *)(a4 + 24) * v17);
      v58 = *(_DWORD *)(a4 + 16);
      v59 = *(_QWORD *)(a4 + 32);
      v72 = &unk_1EA926538;
      *(_QWORD *)&v73 = v57;
      *(_QWORD *)&v74 = v59;
      *((_QWORD *)&v73 + 1) = v58;
      kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)&v72, (uint64_t)&v82, 1.0, 111.0, v54, v55, v56);
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v82);
      v78 = &unk_1EA92DFD8;
      kaldi::CuVector<float>::Destroy((uint64_t)&v78);
      ++v17;
    }
    while ((_DWORD)v11 != v17);
  }
  if (*(_BYTE *)(a1 + 1138))
  {
    v84 = 0u;
    v83 = 0u;
    v82 = &unk_1EA92DFA8;
    v85 = 0;
    kaldi::CuMatrix<float>::Resize((uint64_t)&v82, v11, (*(_DWORD *)(a3 + 16) + *(_DWORD *)(a4 + 16)), 0, 0);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v78, (uint64_t)&v82, 0, SHIDWORD(v83), 0, *(_DWORD *)(a4 + 16));
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v78, a4, 111, v60, v61);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v72, (uint64_t)&v82, 0, SHIDWORD(v83), (const char *)*(unsigned int *)(a4 + 16), *(_DWORD *)(a3 + 16));
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v72, a3, 111, v62, v63);
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 760), (uint64_t)&v82, a4, -1, 0);
    kaldi::CuMatrixBase<float>::ApplyTanh(a4, v64, v65, v66, v67);
    v72 = &unk_1EA926508;
    v73 = 0u;
    v74 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v72);
    v78 = &unk_1EA926508;
    v79 = 0u;
    v80 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v78);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 1137))
      goto LABEL_26;
    v84 = 0u;
    v83 = 0u;
    v82 = &unk_1EA92DFA8;
    v85 = 0;
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 760), a4, (uint64_t)&v82, -1, 0);
    kaldi::CuMatrix<float>::operator=(a4, (uint64_t)&v82);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v82);
LABEL_26:
  a6->__begin_ = 0;
  a6->__end_ = 0;
  a6->__end_cap_.__value_ = 0;
  if ((_DWORD)__sz)
  {
    std::vector<int>::resize(a6, (int)__sz);
    begin = a6->__begin_;
    v69 = 4 * (int)__sz;
  }
  else
  {
    v69 = 0;
    begin = 0;
  }
  memcpy(begin, __src, v69);
  if (__src)
    free(__src);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v86);
}

void sub_1DE4DB194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15, __int128 a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,__int128 a21,__int128 a22,uint64_t a23,char a24)
{
  uint64_t v24;

  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a24);
  kaldi::CuMatrix<float>::~CuMatrix(v24 - 152);
  _Unwind_Resume(a1);
}

kaldi::quasar::TorchEncoderDecoder *kaldi::quasar::TorchEncoderDecoder::TorchEncoderDecoder(kaldi::quasar::TorchEncoderDecoder *this)
{
  clockid_t v2;
  __int128 v4;
  char v5;

  *(_QWORD *)this = &off_1EA92DE50;
  kaldi::nnet1::Nnet::Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 8));
  kaldi::nnet1::Nnet::Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 384));
  kaldi::nnet1::Nnet::Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 760));
  *((_OWORD *)this + 71) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *((_QWORD *)this + 144) = (char *)this + 1160;
  kaldi::nnet1::Nnet::Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 1176));
  kaldi::nnet1::Nnet::Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 1552));
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::AttentionModel((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 1928), 0, 0, 0);
  *(_OWORD *)((char *)this + 3144) = 0u;
  *(_OWORD *)((char *)this + 3128) = 0u;
  *((_QWORD *)this + 390) = &unk_1EA92DFA8;
  *((_BYTE *)this + 3160) = 0;
  *(_OWORD *)((char *)this + 3176) = 0u;
  *(_OWORD *)((char *)this + 3192) = 0u;
  *((_QWORD *)this + 396) = &unk_1EA92DFA8;
  *((_BYTE *)this + 3208) = 0;
  *(_OWORD *)((char *)this + 3224) = 0u;
  *(_OWORD *)((char *)this + 3240) = 0u;
  *((_QWORD *)this + 402) = &unk_1EA92DFA8;
  *((_BYTE *)this + 3256) = 0;
  *(_OWORD *)((char *)this + 3272) = 0u;
  *(_OWORD *)((char *)this + 3288) = 0u;
  *((_QWORD *)this + 408) = &unk_1EA92DFA8;
  *((_BYTE *)this + 3304) = 0;
  *(_OWORD *)((char *)this + 3336) = 0u;
  *(_OWORD *)((char *)this + 3320) = 0u;
  *((_QWORD *)this + 414) = &unk_1EA92DFA8;
  *((_BYTE *)this + 3352) = 0;
  *(_OWORD *)((char *)this + 3368) = 0u;
  *(_OWORD *)((char *)this + 3384) = 0u;
  *((_QWORD *)this + 420) = &unk_1EA92DFA8;
  *((_BYTE *)this + 3400) = 0;
  *((_QWORD *)this + 428) = 0;
  *((_OWORD *)this + 213) = 0u;
  *((_OWORD *)this + 215) = 0u;
  *((_OWORD *)this + 216) = 0u;
  *((_QWORD *)this + 429) = &unk_1EA92DFA8;
  *((_BYTE *)this + 3472) = 0;
  *(_OWORD *)((char *)this + 3480) = 0u;
  *(_OWORD *)((char *)this + 3496) = 0u;
  *(_OWORD *)((char *)this + 3516) = xmmword_1DEC3E8E0;
  *((_DWORD *)this + 883) = 1;
  *((_QWORD *)this + 442) = 0xFFFFFFFF00000002;
  *((_QWORD *)this + 452) = 0;
  *((_QWORD *)this + 451) = 0;
  *((_OWORD *)this + 224) = 0u;
  *((_OWORD *)this + 223) = 0u;
  *((_OWORD *)this + 222) = 0u;
  *((_QWORD *)this + 450) = (char *)this + 3608;
  *(_OWORD *)((char *)this + 3624) = 0u;
  *(_OWORD *)((char *)this + 3640) = 0u;
  kaldi::quasar::Shortlist::Shortlist((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 3656));
  *((_QWORD *)this + 523) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v4, "UNK");
  kaldi::quasar::BPE::BPE((uint64_t)this + 4192, 1, &v4);
  if (v5 < 0)
    operator delete((void *)v4);
  *((_QWORD *)this + 565) = 0;
  *(_OWORD *)((char *)this + 4504) = 0u;
  *(_OWORD *)((char *)this + 4536) = 0u;
  *(_OWORD *)((char *)this + 4552) = 0u;
  *((_QWORD *)this + 554) = 0;
  *(_QWORD *)((char *)this + 4439) = 0;
  *((_OWORD *)this + 278) = 0u;
  *((_OWORD *)this + 279) = 0u;
  *((_OWORD *)this + 280) = 0u;
  *((_DWORD *)this + 1124) = 0;
  *((_QWORD *)this + 566) = &unk_1EA92DFA8;
  *((_BYTE *)this + 4568) = 0;
  *((_BYTE *)this + 4600) = 1;
  kaldi::Timer::Reset((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 4576), v2);
  *((_OWORD *)this + 292) = 0u;
  *((_OWORD *)this + 291) = 0u;
  *((_OWORD *)this + 290) = 0u;
  *((_OWORD *)this + 289) = 0u;
  *((_OWORD *)this + 288) = 0u;
  return this;
}

void sub_1DE4DB590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, kaldi::quasar::TorchEncoderDecoder::AttentionModel *a16, kaldi::nnet1::Nnet *a17, kaldi::nnet1::Nnet *a18, _QWORD **a19, uint64_t a20,kaldi::nnet1::Nnet *a21,kaldi::nnet1::Nnet *a22,kaldi::nnet1::Nnet *a23)
{
  kaldi::quasar::BPE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  void **v27;
  uint64_t v28;
  kaldi::quasar::Shortlist *v29;
  void **v30;
  void **v31;
  uint64_t v32;
  void *v34;
  uint64_t v35;
  uint64_t v36;

  kaldi::CuMatrix<float>::~CuMatrix(v24);
  v34 = *v27;
  if (*v27)
  {
    *(_QWORD *)(v25 + 4512) = v34;
    operator delete(v34);
  }
  kaldi::quasar::TorchEncoderDecoder::TorchEncoderDecoder(v25, v31, v30, v23);
  kaldi::quasar::Shortlist::~Shortlist(v29);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v25 + 3640);
  v35 = *(_QWORD *)(v25 + 3632);
  *(_QWORD *)(v25 + 3632) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *v26;
  *v26 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v25 + 3600, *(_QWORD **)(v25 + 3608));
  if (*(char *)(v25 + 3599) < 0)
    operator delete(*(void **)(v25 + 3576));
  if (*(char *)(v25 + 3575) < 0)
    operator delete(*(void **)(v25 + 3552));
  kaldi::Vector<float>::Destroy(v28);
  kaldi::CuMatrix<float>::~CuMatrix(v25 + 3432);
  *(_QWORD *)(v32 - 104) = v25 + 3408;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 104));
  kaldi::CuMatrix<float>::~CuMatrix(a10);
  kaldi::CuMatrix<float>::~CuMatrix(a11);
  kaldi::CuMatrix<float>::~CuMatrix(a12);
  kaldi::CuMatrix<float>::~CuMatrix(a13);
  kaldi::CuMatrix<float>::~CuMatrix(a14);
  kaldi::CuMatrix<float>::~CuMatrix(a15);
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::~AttentionModel(a16);
  kaldi::nnet1::Nnet::~Nnet(a17);
  kaldi::nnet1::Nnet::~Nnet(a18);
  std::__tree<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>>>::destroy(a20, *a19);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v25 + 1136);
  kaldi::nnet1::Nnet::~Nnet(a21);
  kaldi::nnet1::Nnet::~Nnet(a22);
  kaldi::nnet1::Nnet::~Nnet(a23);
  _Unwind_Resume(a1);
}

void sub_1DE4DB714()
{
  JUMPOUT(0x1DE4DB6FCLL);
}

void sub_1DE4DB71C()
{
  JUMPOUT(0x1DE4DB704);
}

void kaldi::quasar::Shortlist::~Shortlist(kaldi::quasar::Shortlist *this)
{
  void *v2;
  void **v3;

  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::Shortlist *)((char *)this + 144));
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 64);
  std::vector<kaldi::MappableVector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 24);
  v3 = (void **)this;
  std::vector<kaldi::MappableVector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void kaldi::quasar::TorchEncoderDecoder::~TorchEncoderDecoder(kaldi::quasar::TorchEncoderDecoder *this, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  char *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;

  v6 = (char *)this + 4441;
  *(_QWORD *)this = &off_1EA92DE50;
  if (*((_BYTE *)this + 4441) && (int)((*((_QWORD *)this + 96) - *((_QWORD *)this + 95)) >> 3) >= 1)
    kaldi::nnet1::Nnet::ReleaseComponent((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 760), 0, a3, a4, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 4528);
  v7 = (void *)*((_QWORD *)this + 563);
  if (v7)
  {
    *((_QWORD *)this + 564) = v7;
    operator delete(v7);
  }
  if (v6[54] < 0)
    operator delete(*((void **)this + 559));
  if (v6[30] < 0)
    operator delete(*((void **)this + 556));
  kaldi::quasar::BPE::~BPE((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 4192));
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 3800));
  v8 = (void *)*((_QWORD *)this + 471);
  if (v8)
  {
    *((_QWORD *)this + 472) = v8;
    operator delete(v8);
  }
  v11 = (void **)((char *)this + 3744);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)((char *)this + 3720);
  std::vector<kaldi::MappableVector<int>>::__destroy_vector::operator()[abi:ne180100](&v11);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 3680);
  v11 = (void **)((char *)this + 3656);
  std::vector<kaldi::MappableVector<int>>::__destroy_vector::operator()[abi:ne180100](&v11);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 3640);
  v9 = *((_QWORD *)this + 454);
  *((_QWORD *)this + 454) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 453);
  *((_QWORD *)this + 453) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)this + 3600, *((_QWORD **)this + 451));
  if (*((char *)this + 3599) < 0)
    operator delete(*((void **)this + 447));
  if (*((char *)this + 3575) < 0)
    operator delete(*((void **)this + 444));
  kaldi::Vector<float>::Destroy((uint64_t)this + 3480);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3432);
  v11 = (void **)((char *)this + 3408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3360);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3312);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3264);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3216);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3168);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3120);
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::~AttentionModel((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 1928));
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 1552));
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 1176));
  std::__tree<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>>>::destroy((uint64_t)this + 1152, *((_QWORD **)this + 145));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)this + 1136);
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 760));
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 384));
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 8));
}

{
  kaldi::quasar::TorchEncoderDecoder::~TorchEncoderDecoder(this, a2, a3, a4, a5);
  JUMPOUT(0x1DF0ED014);
}

void kaldi::quasar::TorchEncoderDecoder::ResetHistoryState(kaldi::quasar::TorchEncoderDecoder *this, int a2)
{
  _QWORD **v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  _QWORD **v8;
  _QWORD **v9;

  if (a2)
    kaldi::nnet1::Nnet::ResetHistoryStateIfExists((uint64_t)this + 8);
  kaldi::CuMatrix<float>::Resize((uint64_t)this + 3072, 0, 0, 0, 0);
  kaldi::nnet1::Nnet::ResetHistoryStateIfExists(*((_QWORD *)this + 142));
  *(_QWORD *)((char *)this + 3508) = 0;
  kaldi::nnet1::Nnet::GetHistoricalComponents(*((kaldi::nnet1::Nnet **)this + 142), &v8);
  v3 = v9;
  if (v9 != v8)
  {
    v4 = 0;
    v3 = v8;
    do
    {
      v5 = (*(uint64_t (**)(_QWORD *))(*v3[v4] + 72))(v3[v4]);
      v6 = &unk_1EA927930;
      v7 = *(_DWORD *)(v5 + 8);
      if (v7 != 1)
      {
        v7 = 1;
        (*(void (**)(_QWORD *, void **))(*v8[v4] + 80))(v8[v4], &v6);
      }
      kaldi::nnet1::HistoryOptions::~HistoryOptions((kaldi::nnet1::HistoryOptions *)&v6);
      ++v4;
      v3 = v8;
    }
    while (v4 != v9 - v8);
  }
  if (v3)
  {
    v9 = v3;
    operator delete(v3);
  }
}

void sub_1DE4DBAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  kaldi::nnet1::HistoryOptions::~HistoryOptions((kaldi::nnet1::HistoryOptions *)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::GetHistoryState(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  double *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  _QWORD **v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  const char *v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  clockid_t v27;
  _QWORD **v28;
  __int128 v29;
  __int128 v30;
  char v31;
  __int128 __p;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[48];

  v6 = (double *)(a1 + 4576);
  v7 = a1 + 4632;
  std::string::basic_string[abi:ne180100]<0>(&__p, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v35, v6, v7, &__p);
  if (SHIBYTE(v33) < 0)
    operator delete((void *)__p);
  v9 = *a2;
  v8 = a2[1];
  if (v8 != *a2)
  {
    v10 = (_QWORD *)(v8 - 48);
    v11 = (_QWORD *)(v8 - 48);
    do
    {
      v12 = *v11;
      v11 -= 6;
      (*(void (**)(_QWORD *))(v12 + 16))(v10);
      v13 = v10 == (_QWORD *)v9;
      v10 = v11;
    }
    while (!v13);
  }
  a2[1] = v9;
  if (kaldi::nnet1::Nnet::HasHistory(*(kaldi::nnet1::Nnet **)(a1 + 1136)))
  {
    kaldi::nnet1::Nnet::GetHistoricalComponents(*(kaldi::nnet1::Nnet **)(a1 + 1136), &v28);
    std::vector<kaldi::CuMatrix<float>>::resize(a2, (uint64_t)(v29 - (_QWORD)v28) >> 3);
    v14 = (_QWORD **)v29;
    if ((_QWORD **)v29 != v28)
    {
      v15 = 0;
      v16 = 0;
      v14 = v28;
      do
      {
        *((_QWORD *)&__p + 1) = 0;
        v33 = 0;
        v34 = 0;
        *(_QWORD *)&__p = &unk_1EA92DFD8;
        (*(void (**)(_QWORD *, __int128 *, uint64_t, _QWORD))(*v14[v16] + 48))(v14[v16], &__p, a3, 0);
        v17 = *a2 + v15;
        if ((int)v33 < 1)
        {
          kaldi::CuMatrix<float>::Resize(v17, 0, 0, 0, 0);
        }
        else
        {
          kaldi::CuMatrix<float>::Resize(v17, 1, v33, 0, 0);
          kaldi::CuMatrixBase<float>::CopyRowsFromVec(*a2 + v15, (uint64_t)&__p);
        }
        *(_QWORD *)&__p = &unk_1EA92DFD8;
        kaldi::CuVector<float>::Destroy((uint64_t)&__p);
        ++v16;
        v14 = v28;
        v15 += 48;
      }
      while (v16 < (uint64_t)(v29 - (_QWORD)v28) >> 3);
    }
    if (v14)
    {
      *(_QWORD *)&v29 = v14;
      operator delete(v14);
    }
  }
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v28, a1 + 3312, a3, 1, 0, *(_DWORD *)(a1 + 3328));
  kaldi::CuMatrix<float>::CuMatrix(&__p, &v28, 111);
  v18 = a2[1];
  if (v18 >= a2[2])
  {
    v19 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float>>(a2, (uint64_t)&__p);
  }
  else
  {
    kaldi::CuMatrix<float>::CuMatrix(a2[1], &__p, 111);
    v19 = v18 + 48;
    a2[1] = v18 + 48;
  }
  a2[1] = v19;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
  v28 = (_QWORD **)&unk_1EA926508;
  v29 = 0u;
  v30 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v28);
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)&__p, 1, 2, 0, 0, 0);
  if (!HIDWORD(v33) || (v21 = v33) == 0)
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v20);
  v22 = *((_QWORD *)&__p + 1);
  **((float **)&__p + 1) = (float)*(int *)(a1 + 3508);
  if (v21 == 1)
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v20);
  *(float *)(v22 + 4) = (float)*(int *)(a1 + 3512);
  v23 = a2[1];
  if (v23 >= a2[2])
  {
    v24 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float>>(a2, (uint64_t)&__p);
  }
  else
  {
    kaldi::CuMatrix<float>::CuMatrix(a2[1], &__p, 111);
    v24 = v23 + 48;
    a2[1] = v23 + 48;
  }
  a2[1] = v24;
  if (*(_BYTE *)(a1 + 4434))
  {
    v30 = 0u;
    v29 = 0u;
    v28 = (_QWORD **)&unk_1EA92DFA8;
    v31 = 0;
    kaldi::quasar::TorchEncoderDecoder::AttentionModel::GetHistoryState(a1 + 1928, (uint64_t)&v28, a3);
    v25 = a2[1];
    if (v25 >= a2[2])
    {
      v26 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float>>(a2, (uint64_t)&v28);
    }
    else
    {
      kaldi::CuMatrix<float>::CuMatrix(a2[1], &v28, 111);
      v26 = v25 + 48;
      a2[1] = v25 + 48;
    }
    a2[1] = v26;
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v28);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v35, v27);
}

void sub_1DE4DBE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, __int128 a10, __int128 a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  clockid_t v25;

  *(_QWORD *)(v22 + 8) = v23;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a13);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a22, v25);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::SetHistoryState(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  double *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unsigned int v29;
  uint64_t v30;
  clockid_t v31;
  const char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 __p;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  int v47;
  _BYTE v48[48];

  v8 = (double *)(a1 + 4576);
  v9 = a1 + 4640;
  std::string::basic_string[abi:ne180100]<0>(&__p, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v48, v8, v9, &__p);
  if (SHIBYTE(v44) < 0)
    operator delete((void *)__p);
  if (!kaldi::nnet1::Nnet::HasHistory(*(kaldi::nnet1::Nnet **)(a1 + 1136)))
  {
    v12 = 0;
    goto LABEL_17;
  }
  kaldi::nnet1::Nnet::GetHistoricalComponents(*(kaldi::nnet1::Nnet **)(a1 + 1136), &v39);
  v10 = v40;
  if (v40 == v39)
  {
    v12 = 0;
    if (v40)
    {
LABEL_14:
      v40 = v10;
      operator delete(v10);
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v10 = v39;
    do
    {
      v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v10 + v12) + 72))(*((_QWORD *)v10 + v12));
      v46 = &unk_1EA927930;
      v47 = *(_DWORD *)(v13 + 8);
      if (v47 != (_DWORD)a4)
      {
        v47 = a4;
        (*(void (**)(_QWORD, void **))(**((_QWORD **)v39 + v12) + 80))(*((_QWORD *)v39 + v12), &v46);
      }
      v15 = *a2 + v11;
      v16 = *(_DWORD *)(v15 + 16);
      if (v16 < 1)
      {
        *((_QWORD *)&__p + 1) = 0;
        v44 = 0;
        v45 = 0;
        *(_QWORD *)&__p = &unk_1EA92DFD8;
        (*(void (**)(_QWORD, __int128 *, uint64_t, _QWORD))(**((_QWORD **)v39 + v12) + 64))(*((_QWORD *)v39 + v12), &__p, a3, 0);
        *(_QWORD *)&__p = &unk_1EA92DFD8;
        kaldi::CuVector<float>::Destroy((uint64_t)&__p);
      }
      else
      {
        if (!*(_DWORD *)(v15 + 20))
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v14);
        v17 = *((_QWORD *)v39 + v12);
        v18 = *a2 + v11;
        v19 = *(_QWORD *)(v18 + 8);
        v20 = *(_QWORD *)(v18 + 32);
        *(_QWORD *)&__p = &unk_1EA926538;
        *((_QWORD *)&__p + 1) = v19;
        v45 = v20;
        v44 = v16;
        (*(void (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v17 + 64))(v17, &__p, a3, 0);
      }
      kaldi::nnet1::HistoryOptions::~HistoryOptions((kaldi::nnet1::HistoryOptions *)&v46);
      ++v12;
      v10 = v39;
      v11 += 48;
    }
    while (v12 < ((_BYTE *)v40 - (_BYTE *)v39) >> 3);
    if (v39)
      goto LABEL_14;
  }
LABEL_17:
  kaldi::CuMatrix<float>::Resize(a1 + 3312, a4, *(unsigned int *)(*a2 + 48 * v12 + 16), 2u, 0);
  if (*(_DWORD *)(a1 + 3332) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v23);
  v24 = *(_QWORD *)(a1 + 3320) + 4 * *(_DWORD *)(a1 + 3336) * (int)a3;
  v25 = *(_DWORD *)(a1 + 3328);
  v26 = *(_QWORD *)(a1 + 3344);
  *(_QWORD *)&__p = &unk_1EA926538;
  *((_QWORD *)&__p + 1) = v24;
  v45 = v26;
  v44 = v25;
  v27 = *a2 + 48 * v12;
  if (!*(_DWORD *)(v27 + 20))
    kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x213, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v23);
  v28 = *(void **)(v27 + 8);
  v29 = *(_DWORD *)(v27 + 16);
  v30 = *(_QWORD *)(v27 + 32);
  v39 = &unk_1EA926538;
  v40 = v28;
  v42 = v30;
  v41 = v29;
  kaldi::CuVectorBase<float>::CopyFromVec(&__p, (uint64_t)&v39, v21, v22, v23);
  v33 = v12 + 1;
  v34 = *a2;
  v35 = *a2 + 48 * (v12 + 1);
  if (!*(_DWORD *)(v35 + 20) || *(_DWORD *)(v35 + 16) <= 1u)
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x227, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v32);
  v36 = *(_DWORD *)(a1 + 3512);
  if (*(float *)(*(_QWORD *)(v35 + 8) + 4) != (float)v36
    && (v37 = *(_QWORD *)(a1 + 3408) + 48 * v36,
        kaldi::quasar::TorchEncoderDecoder::SetAttentionKeyAndValues((_QWORD *)a1, v37, v37, *(kaldi::nnet1::Nnet **)(a1 + 1136), v32), v34 = *a2, !*(_DWORD *)(*a2 + 48 * v33 + 20))|| (v38 = v34 + 48 * v33, *(_DWORD *)(v38 + 16) <= 1u))
  {
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x227, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v32);
  }
  *(int32x2_t *)(a1 + 3508) = vcvt_s32_f32(**(float32x2_t **)(v38 + 8));
  if (*(_BYTE *)(a1 + 4434))
    kaldi::quasar::TorchEncoderDecoder::AttentionModel::SetHistoryState(a1 + 1928, v34 + 48 * v12 + 96, a3, a4);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v48, v31);
}

void sub_1DE4DC39C(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a22, a2);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::quasar::TorchEncoderDecoder::SetAttentionKeyAndValues(_QWORD *result, uint64_t a2, uint64_t a3, kaldi::nnet1::Nnet *a4, const char *a5)
{
  _QWORD *v8;
  int v9;
  const void *Component;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const void *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((int)((*((_QWORD *)a4 + 1) - *(_QWORD *)a4) >> 3) >= 1)
  {
    v8 = result;
    v9 = 0;
    do
    {
      Component = (const void *)kaldi::nnet1::Nnet::GetComponent(a4, v9, a3, (uint64_t)a4, a5);
      if (v11)
      {
        result = (_QWORD *)(*(uint64_t (**)(void *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v11 + 24))(v11, a2, a3, 0);
      }
      else
      {
        v15 = (const void *)kaldi::nnet1::Nnet::GetComponent(a4, v9, v12, v13, v14);
        if (result)
        {
          v16 = result;
          v17 = result[23];
          if ((int)(1736263375 * ((unint64_t)(result[24] - v17) >> 3)) >= 1)
          {
            v18 = 0;
            v19 = 0;
            do
            {
              result = (_QWORD *)kaldi::quasar::TorchEncoderDecoder::SetAttentionKeyAndValues(v8, a2, a3, v17 + v18);
              ++v19;
              v17 = v16[23];
              v18 += 376;
            }
            while (v19 < (int)(1736263375 * ((unint64_t)(v16[24] - v17) >> 3)));
          }
        }
      }
      ++v9;
    }
    while (v9 < (int)((*((_QWORD *)a4 + 1) - *(_QWORD *)a4) >> 3));
  }
  return result;
}

double kaldi::quasar::TorchEncoderDecoder::AddTag(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const char *a5)
{
  int v5;
  const char *v10;
  float v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  const char *v15;
  int v16;
  uint64_t v17;
  const char *v18;
  double result;
  void *v20;
  __int128 v21;
  __int128 v22;

  if (*(_DWORD *)(a2 + 16) != 1)
    kaldi::KaldiAssertFailure_((kaldi *)"AddTag", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", (const char *)0x151, "in.NumCols() == 1", a5);
  v5 = (int)a5;
  kaldi::CuMatrix<float>::Resize(a4, (*(_DWORD *)(a2 + 20) + 1), 1, 0, 0);
  v11 = (float)a3;
  if ((*(_BYTE *)(a1 + 4440) == 0) == v5)
  {
    if (*(_DWORD *)(a4 + 20))
    {
      v16 = *(_DWORD *)(a4 + 16);
      if (v16)
      {
        **(float **)(a4 + 8) = v11;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v20, a4, 1, *(_DWORD *)(a2 + 20), 0, v16);
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v20, a2, 111, v17, v18);
        goto LABEL_9;
      }
    }
LABEL_10:
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v10);
  }
  v12 = *(_DWORD *)(a2 + 20);
  if (*(_DWORD *)(a4 + 20) <= v12)
    goto LABEL_10;
  v13 = *(_DWORD *)(a4 + 16);
  if (!v13)
    goto LABEL_10;
  *(float *)(*(_QWORD *)(a4 + 8) + 4 * (int)(*(_DWORD *)(a4 + 24) * v12)) = v11;
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v20, a4, 0, v12, 0, v13);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v20, a2, 111, v14, v15);
LABEL_9:
  v20 = &unk_1EA926508;
  v21 = 0u;
  v22 = 0u;
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v20).n128_u64[0];
  return result;
}

void sub_1DE4DC700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, __int128 a11, __int128 a12)
{
  a10 = &unk_1EA926508;
  a11 = 0u;
  a12 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a10);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::TorchEncoderDecoder::Reverse(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((_BYTE *)this + 4440) == 0;
}

double kaldi::quasar::TorchEncoderDecoder::AddPositionEmbedding(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  unint64_t v13;
  float *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  double result;
  void *v19;
  __int128 v20;
  __int128 v21;
  void *v22;
  __int128 v23;
  __int128 v24;

  kaldi::CuMatrix<float>::Resize(a4, *(unsigned int *)(a3 + 20), (*(_DWORD *)(a3 + 16) + 1), 0, 0);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v22, a4, 0, *(_DWORD *)(a4 + 20), 0, *(_DWORD *)(a3 + 16));
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v22, a3, 111, v9, v10);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v19, a4, 0, *(_DWORD *)(a4 + 20), (const char *)*(unsigned int *)(a3 + 16), 1);
  v12 = *(unsigned int *)(a3 + 20);
  if ((int)v12 >= 1)
  {
    v13 = 0;
    v14 = (float *)v20;
    v15 = HIDWORD(v20);
    v16 = 4 * (int)v21;
    do
    {
      if (v13 >= v15 || !DWORD2(v20))
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v11);
      if (a5)
        v17 = v13;
      else
        v17 = 0;
      *v14 = (float)(v17 + a2);
      ++v13;
      v14 = (float *)((char *)v14 + v16);
    }
    while (v12 != v13);
  }
  v19 = &unk_1EA926508;
  v20 = 0u;
  v21 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v19);
  v22 = &unk_1EA926508;
  v23 = 0u;
  v24 = 0u;
  *(_QWORD *)&result = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v22).n128_u64[0];
  return result;
}

void sub_1DE4DC894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, __int128 a15, __int128 a16)
{
  a14 = &unk_1EA926508;
  a15 = 0u;
  a16 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a14);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::StartFeedforward(uint64_t a1, uint64_t a2, int a3)
{
  _BYTE *v6;
  uint64_t v7;
  void *v9;
  __int128 v10;
  __int128 v11;
  char v12;
  _BYTE v13[48];

  v6 = (_BYTE *)(a1 + 4438);
  v7 = *(_QWORD *)(a1 + 3408);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 3416) - v7) >> 4) <= a3)
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 3408), a3 + 1);
  else
    kaldi::CuMatrix<float>::Resize(v7 + 48 * a3, 0, 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(v13, a2, 111);
  if (*v6)
  {
    v11 = 0u;
    v10 = 0u;
    v9 = &unk_1EA92DFA8;
    v12 = 0;
    kaldi::quasar::TorchEncoderDecoder::AddTag(a1, a2, *(_DWORD *)(a1 + 3516) - 1, (uint64_t)&v9, 0);
    kaldi::CuMatrix<float>::operator=((uint64_t)v13, (uint64_t)&v9);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v9);
  }
  if (v6[1])
  {
    v11 = 0u;
    v10 = 0u;
    v9 = &unk_1EA92DFA8;
    v12 = 0;
    kaldi::quasar::TorchEncoderDecoder::AddTag(a1, (uint64_t)v13, *(_DWORD *)(a1 + 3520) - 1, (uint64_t)&v9, (const char *)1);
    kaldi::CuMatrix<float>::operator=((uint64_t)v13, (uint64_t)&v9);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v9);
  }
  kaldi::quasar::TorchEncoderDecoder::EncFeedforward(a1, (uint64_t)v13, a3);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v13);
}

void sub_1DE4DCA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::EncFeedforward(uint64_t a1, uint64_t a2, int a3)
{
  double *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD **v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  __n128 v25;
  _QWORD **v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  __n128 v30;
  int v31;
  _QWORD **v32;
  const char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  const char *v37;
  _QWORD **v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  __n128 v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  void **p_p;
  unsigned int v66;
  const char *v67;
  uint64_t v68;
  const char *v69;
  _QWORD **v70;
  uint64_t v71;
  __int128 v72;
  _QWORD *v73;
  unsigned int v74;
  const char *v75;
  kaldi::nnet1::Nnet *v76;
  int v77;
  void *v78;
  __int128 v79;
  __int128 v80;
  _BYTE v81[20];
  int v82;
  void *v83;
  __int128 v84;
  __int128 v85;
  char v86;
  void *v87;
  __int128 v88;
  __int128 v89;
  char v90;
  void *v91;
  __int128 v92;
  __int128 v93;
  void *v94;
  __int128 v95;
  __int128 v96;
  char v97;
  void *__p;
  __int128 v99;
  __int128 v100;
  char v101;
  _QWORD **v102;
  _BYTE *v103;
  _QWORD **v104;
  _BYTE *v105;
  _BYTE v106[56];

  v6 = (double *)(a1 + 4576);
  v7 = a1 + 4624;
  std::string::basic_string[abi:ne180100]<0>(&__p, &byte_1DEBD87CE);
  v8 = kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v106, v6, v7, (__int128 *)&__p);
  if (SHIBYTE(v99) < 0)
    operator delete(__p);
  v9 = *(_QWORD *)(a1 + 3408);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 3416) - v9) >> 4) <= a3)
  {
    v8 = (uint64_t)std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 3408), a3 + 1);
    v9 = *(_QWORD *)(a1 + 3408);
  }
  *(_DWORD *)(a1 + 3512) = a3;
  v10 = *(_DWORD *)(v9 + 48 * a3 + 20);
  if (*(_BYTE *)(a1 + 4436))
  {
    v100 = 0u;
    v99 = 0u;
    __p = &unk_1EA92DFA8;
    v101 = 0;
    kaldi::quasar::TorchEncoderDecoder::AddPositionEmbedding(v8, v10, a2, (uint64_t)&__p, 1);
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 8), (uint64_t)&__p, a1 + 3120, -1, 0);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
  }
  else
  {
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 8), a2, a1 + 3120, -1, 0);
  }
  v77 = v10;
  kaldi::nnet1::Nnet::GetHistoricalComponents((kaldi::nnet1::Nnet *)(a1 + 8), &v104);
  v76 = (kaldi::nnet1::Nnet *)(a1 + 8);
  kaldi::nnet1::Nnet::GetHistoricalComponents(*(kaldi::nnet1::Nnet **)(a1 + 1136), &v102);
  if (*(_BYTE *)(a1 + 3504))
  {
    if (v10 >= 1)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "EncFeedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 408);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Handover is not supported for stream input.", 43);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    if (*(_BYTE *)(a1 + 3506))
    {
      if (*(_DWORD *)(a1 + 3548) == 3)
      {
        if (*(_BYTE *)(a1 + 3505))
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "EncFeedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 412);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Model type requires full handover.", 34);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
        v11 = v104;
        if (v105 != (_BYTE *)v104)
        {
          v12 = 0;
          do
          {
            v99 = 0u;
            v100 = 0u;
            __p = &unk_1EA92DFA8;
            v101 = 0;
            (*(void (**)(_QWORD *, void **, _QWORD))(*v11[v12] + 40))(v11[v12], &__p, 0);
            kaldi::CuMatrix<float>::CuMatrix((uint64_t)&v94, 1, (2 * *(_DWORD *)(a1 + 4496)), 0, 0, 0);
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v91, (uint64_t)&v94, 0, SHIDWORD(v95), 0, *(_DWORD *)(a1 + 4496));
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v87, (uint64_t)&__p, 0, SHIDWORD(v99), 0, *(_DWORD *)(a1 + 4496));
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v91, (uint64_t)&v87, 111, v13, v14);
            v87 = &unk_1EA926508;
            v88 = 0u;
            v89 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v87);
            v91 = &unk_1EA926508;
            v92 = 0u;
            v93 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v91);
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v91, (uint64_t)&v94, 0, SHIDWORD(v95), (const char *)*(unsigned int *)(a1 + 4496), *(_DWORD *)(a1 + 4496));
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v87, (uint64_t)&__p, 0, SHIDWORD(v99), (const char *)(2 * *(_DWORD *)(a1 + 4496)), *(_DWORD *)(a1 + 4496));
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v91, (uint64_t)&v87, 111, v15, v16);
            v87 = &unk_1EA926508;
            v88 = 0u;
            v89 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v87);
            v91 = &unk_1EA926508;
            v92 = 0u;
            v93 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v91);
            kaldi::CuMatrix<float>::CuMatrix((uint64_t)&v91, 1, (2 * *(_DWORD *)(a1 + 4496)), 0, 0, 0);
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v87, (uint64_t)&v91, 0, SHIDWORD(v92), 0, *(_DWORD *)(a1 + 4496));
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v83, (uint64_t)&__p, 0, SHIDWORD(v99), (const char *)*(unsigned int *)(a1 + 4496), *(_DWORD *)(a1 + 4496));
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v87, (uint64_t)&v83, 111, v17, v18);
            v83 = &unk_1EA926508;
            v84 = 0u;
            v85 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v83);
            v87 = &unk_1EA926508;
            v88 = 0u;
            v89 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v87);
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v87, (uint64_t)&v91, 0, SHIDWORD(v92), (const char *)*(unsigned int *)(a1 + 4496), *(_DWORD *)(a1 + 4496));
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v83, (uint64_t)&__p, 0, SHIDWORD(v99), (const char *)(3 * *(_DWORD *)(a1 + 4496)), *(_DWORD *)(a1 + 4496));
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v87, (uint64_t)&v83, 111, v19, v20);
            v83 = &unk_1EA926508;
            v84 = 0u;
            v85 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v83);
            v87 = &unk_1EA926508;
            v88 = 0u;
            v89 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v87);
            v88 = 0u;
            v89 = 0u;
            v87 = &unk_1EA92DFA8;
            v90 = 0;
            kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 1552), (uint64_t)&v94, (uint64_t)&v87, -1, 0);
            v84 = 0u;
            v85 = 0u;
            v83 = &unk_1EA92DFA8;
            v86 = 0;
            kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 1176), (uint64_t)&v91, (uint64_t)&v83, -1, 0);
            kaldi::CuMatrix<float>::CuMatrix((uint64_t)v81, 1, (2 * *(_DWORD *)(a1 + 4496)), 0, 0, 0);
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v78, (uint64_t)v81, 0, v82, 0, *(_DWORD *)(a1 + 4496));
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v78, (uint64_t)&v87, 111, v21, v22);
            v78 = &unk_1EA926508;
            v79 = 0u;
            v80 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v78);
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v78, (uint64_t)v81, 0, v82, (const char *)*(unsigned int *)(a1 + 4496), *(_DWORD *)(a1 + 4496));
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v78, (uint64_t)&v83, 111, v23, v24);
            v78 = &unk_1EA926508;
            v79 = 0u;
            v80 = 0u;
            v25 = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v78);
            (*(void (**)(_QWORD *, _BYTE *, _QWORD, __n128))(*v102[v12] + 56))(v102[v12], v81, 0, v25);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v81);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v83);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v87);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v91);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v94);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
            ++v12;
            v11 = v104;
          }
          while (v12 != (v105 - (_BYTE *)v104) >> 3);
        }
        goto LABEL_33;
      }
      v100 = 0u;
      v99 = 0u;
      __p = &unk_1EA92DFA8;
      v101 = 0;
      v31 = *(_DWORD *)(a1 + 4496) << (*(_BYTE *)(a1 + 3505) == 0);
      kaldi::CuMatrix<float>::Resize((uint64_t)&__p, 1, v31 * ((unint64_t)(v105 - (_BYTE *)v104) >> 3), 0, 0);
      v32 = v104;
      if (v105 != (_BYTE *)v104)
      {
        v33 = 0;
        v34 = 0;
        v35 = 0uLL;
        do
        {
          v95 = v35;
          v96 = v35;
          v94 = &unk_1EA92DFA8;
          v97 = 0;
          (*(void (**)(_QWORD *, void **, _QWORD))(*v32[v34] + 40))(v32[v34], &v94, 0);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v91, (uint64_t)&__p, 0, SHIDWORD(v99), v33, v31);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v87, (uint64_t)&v94, 0, SHIDWORD(v95), 0, v31);
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v91, (uint64_t)&v87, 111, v36, v37);
          v87 = &unk_1EA926508;
          v88 = 0u;
          v89 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v87);
          v91 = &unk_1EA926508;
          v92 = 0u;
          v93 = 0u;
          kaldi::CuMatrixBase<float>::~CuMatrixBase(&v91);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v94);
          v35 = 0uLL;
          ++v34;
          v32 = v104;
          v33 = (const char *)((_DWORD)v33 + v31);
        }
        while (v34 != (v105 - (_BYTE *)v104) >> 3);
      }
      v96 = 0u;
      v95 = 0u;
      v94 = &unk_1EA92DFA8;
      v97 = 0;
      kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 1176), (uint64_t)&__p, (uint64_t)&v94, -1, 0);
      v38 = v102;
      if (v103 != (_BYTE *)v102)
      {
        v39 = 0;
        v40 = 0;
        do
        {
          if (*(_BYTE *)(a1 + 3505))
          {
            kaldi::CuMatrix<float>::CuMatrix((uint64_t)&v91, 1, (2 * *(_DWORD *)(a1 + 4496)), 0, 0, 0);
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v87, (uint64_t)&v91, 0, SHIDWORD(v92), 0, *(_DWORD *)(a1 + 4496));
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v83, (uint64_t)&v94, 0, SHIDWORD(v95), v39, v31);
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v87, (uint64_t)&v83, 111, v41, v42);
            v83 = &unk_1EA926508;
            v84 = 0u;
            v85 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v83);
            v87 = &unk_1EA926508;
            v88 = 0u;
            v89 = 0u;
            v43 = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v87);
            (*(void (**)(_QWORD *, void **, _QWORD, __n128))(*v102[v40] + 56))(v102[v40], &v91, 0, v43);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v91);
          }
          else
          {
            v44 = v38[v40];
            kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v91, (uint64_t)&v94, 0, SHIDWORD(v95), v39, v31);
            (*(void (**)(_QWORD *, void **, _QWORD))(*v44 + 56))(v44, &v91, 0);
            v91 = &unk_1EA926508;
            v92 = 0u;
            v93 = 0u;
            kaldi::CuMatrixBase<float>::~CuMatrixBase(&v91);
          }
          ++v40;
          v38 = v102;
          v39 = (const char *)((_DWORD)v39 + v31);
        }
        while (v40 != (v103 - (_BYTE *)v102) >> 3);
      }
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v94);
LABEL_32:
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
      goto LABEL_33;
    }
    if (*(_BYTE *)(a1 + 3505))
    {
      kaldi::CuMatrix<float>::CuMatrix((uint64_t)&__p, 1, *(unsigned int *)(a1 + 4496), 0, 0, 0);
      v26 = v104;
      if (v105 != (_BYTE *)v104)
      {
        v27 = 0;
        do
        {
          v95 = 0u;
          v96 = 0u;
          v94 = &unk_1EA92DFA8;
          v97 = 0;
          (*(void (**)(_QWORD *, void **, _QWORD))(*v26[v27] + 40))(v26[v27], &v94, 0);
          kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v91, (uint64_t)&v94, 0, SHIDWORD(v95), (const char *)*(unsigned int *)(a1 + 4496), *(_DWORD *)(a1 + 4496));
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v91, (uint64_t)&__p, 111, v28, v29);
          v91 = &unk_1EA926508;
          v92 = 0u;
          v93 = 0u;
          v30 = kaldi::CuMatrixBase<float>::~CuMatrixBase(&v91);
          (*(void (**)(_QWORD *, void **, _QWORD, __n128))(*v102[v27] + 56))(v102[v27], &v94, 0, v30);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v94);
          ++v27;
          v26 = v104;
        }
        while (v27 != (v105 - (_BYTE *)v104) >> 3);
      }
      goto LABEL_32;
    }
    v70 = v104;
    if (v105 != (_BYTE *)v104)
    {
      v71 = 0;
      v72 = 0uLL;
      do
      {
        v99 = v72;
        v100 = v72;
        __p = &unk_1EA92DFA8;
        v101 = 0;
        (*(void (**)(_QWORD *, void **, _QWORD))(*v70[v71] + 40))(v70[v71], &__p, 0);
        v73 = v102[v71];
        v74 = 2 * *(_DWORD *)(a1 + 4496);
        if (*(_BYTE *)(a1 + 4440))
          v75 = (const char *)v74;
        else
          v75 = 0;
        kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v94, (uint64_t)&__p, 0, SHIDWORD(v99), v75, v74);
        (*(void (**)(_QWORD *, void **, _QWORD))(*v73 + 56))(v73, &v94, 0);
        v94 = &unk_1EA926508;
        v95 = 0u;
        v96 = 0u;
        kaldi::CuMatrixBase<float>::~CuMatrixBase(&v94);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
        v72 = 0uLL;
        ++v71;
        v70 = v104;
      }
      while (v71 != (v105 - (_BYTE *)v104) >> 3);
    }
  }
LABEL_33:
  if (kaldi::nnet1::Nnet::IsBidirectionalRnn(v76) && *(_DWORD *)(a1 + 3548) != 3)
  {
    if (v10 >= 1)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "EncFeedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 488);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"BidirectionalEncoder is not supported for stream input.", 55);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 3408) + 48 * *(int *)(a1 + 3512), *(unsigned int *)(a1 + 3140), (*(_DWORD *)(a1 + 3136) / 2), 0, 0);
    v48 = *(_DWORD *)(a1 + 3512);
    v49 = *(_QWORD *)(a1 + 3408);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, a1 + 3120, 0, *(_DWORD *)(a1 + 3140), 0, *(_DWORD *)(a1 + 3136) / 2);
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)(v49 + 48 * v48), (uint64_t)&__p, 111, v50, v51);
    __p = &unk_1EA926508;
    v99 = 0u;
    v100 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
    LODWORD(v49) = *(_DWORD *)(a1 + 3512);
    v52 = *(_QWORD *)(a1 + 3408);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, a1 + 3120, 0, *(_DWORD *)(a1 + 3140), (const char *)(*(_DWORD *)(a1 + 3136) / 2), *(_DWORD *)(a1 + 3136) / 2);
    kaldi::CuMatrixBase<float>::AddMat(v52 + 48 * (int)v49, (uint64_t)&__p, 111, v53, v54, 1.0, 1.0);
  }
  else
  {
    kaldi::CuMatrix<float>::Resize(*(_QWORD *)(a1 + 3408) + 48 * *(int *)(a1 + 3512), (*(_DWORD *)(a1 + 3140) + v10), *(unsigned int *)(a1 + 3136), 2u, 0);
    v45 = *(_QWORD *)(a1 + 3408) + 48 * *(int *)(a1 + 3512);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, v45, v10, *(_DWORD *)(a1 + 3140), 0, *(_DWORD *)(v45 + 16));
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&__p, a1 + 3120, 111, v46, v47);
  }
  __p = &unk_1EA926508;
  v99 = 0u;
  v100 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
  v55 = *(_QWORD *)(a1 + 3408) + 48 * *(int *)(a1 + 3512);
  kaldi::quasar::TorchEncoderDecoder::SetAttentionKeyAndValues((_QWORD *)a1, v55, v55, *(kaldi::nnet1::Nnet **)(a1 + 1136), v56);
  if (*(_BYTE *)(a1 + 4440))
  {
    v61 = 0;
    if (v77)
      goto LABEL_43;
  }
  else
  {
    v61 = *(_DWORD *)(a1 + 3140) - 1;
    if (v77)
      goto LABEL_43;
  }
  v62 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136), v57, v58, v59, v60);
  kaldi::CuMatrix<float>::Resize(a1 + 3312, 1, v62, 0, 0);
LABEL_43:
  if (!*(_BYTE *)(a1 + 3504))
    goto LABEL_53;
  if ((kaldi::nnet1::Nnet::IsBidirectionalRnn(v76) & 1) != 0)
  {
    if (*(_DWORD *)(a1 + 3548) == 3)
    {
      kaldi::CuMatrixBase<float>::SetZero(a1 + 3312);
      goto LABEL_53;
    }
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v94, a1 + 3120, v61, 1, 0, *(_DWORD *)(a1 + 3136));
    v66 = *(_DWORD *)(a1 + 3136) / 2;
    if (*(_BYTE *)(a1 + 4440))
      v67 = (const char *)v66;
    else
      v67 = 0;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, (uint64_t)&v94, 0, SHIDWORD(v95), v67, v66);
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)(a1 + 3312), (uint64_t)&__p, 111, v68, v69);
    __p = &unk_1EA926508;
    v99 = 0u;
    v100 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
    v94 = &unk_1EA926508;
    v95 = 0u;
    v96 = 0u;
    p_p = &v94;
  }
  else
  {
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, a1 + 3120, v61, 1, 0, *(_DWORD *)(a1 + 3136));
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)(a1 + 3312), (uint64_t)&__p, 111, v63, v64);
    __p = &unk_1EA926508;
    v99 = 0u;
    v100 = 0u;
    p_p = &__p;
  }
  kaldi::CuMatrixBase<float>::~CuMatrixBase(p_p);
LABEL_53:
  if (v102)
  {
    v103 = v102;
    operator delete(v102);
  }
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v106, (clockid_t)v57);
}

void sub_1DE4DD9A0()
{
  uint64_t v0;

  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  JUMPOUT(0x1DE4DD9F4);
}

void sub_1DE4DDA00()
{
  JUMPOUT(0x1DE4DDC68);
}

void sub_1DE4DDA10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0)
    operator delete(__p);
  JUMPOUT(0x1DE4DDC80);
}

void sub_1DE4DDA28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a50);
  JUMPOUT(0x1DE4DDC78);
}

void sub_1DE4DDA38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  _OWORD *v39;

  a38 = v38 + 16;
  *v39 = 0u;
  v39[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a38);
  JUMPOUT(0x1DE4DDC48);
}

void sub_1DE4DDA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  _OWORD *v44;
  uint64_t v45;

  a44 = v45 + 16;
  *v44 = 0u;
  v44[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a44);
  JUMPOUT(0x1DE4DDC50);
}

void sub_1DE4DDA8C()
{
  _OWORD *v0;

  *v0 = 0u;
  v0[1] = 0u;
  JUMPOUT(0x1DE4DDBC8);
}

void sub_1DE4DDAC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  _OWORD *v38;
  uint64_t v39;

  a38 = v39 + 16;
  *v38 = 0u;
  v38[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a38);
  JUMPOUT(0x1DE4DDC48);
}

void sub_1DE4DDAE0(_Unwind_Exception *a1, clockid_t a2)
{
  uint64_t v2;
  void *v4;
  void *v5;

  v4 = *(void **)(v2 - 184);
  if (v4)
  {
    *(_QWORD *)(v2 - 176) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v2 - 160);
  if (v5)
  {
    *(_QWORD *)(v2 - 152) = v5;
    operator delete(v5);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v2 - 136), a2);
  _Unwind_Resume(a1);
}

void sub_1DE4DDAEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  JUMPOUT(0x1DE4DDBE0);
}

void sub_1DE4DDB2C()
{
  JUMPOUT(0x1DE4DDC50);
}

void sub_1DE4DDB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  _OWORD *v39;

  a38 = v38 + 16;
  *v39 = 0u;
  v39[1] = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a38);
  JUMPOUT(0x1DE4DDC48);
}

void sub_1DE4DDB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a38);
  JUMPOUT(0x1DE4DDC48);
}

void sub_1DE4DDC04()
{
  _OWORD *v0;

  *v0 = 0u;
  v0[1] = 0u;
  JUMPOUT(0x1DE4DDC38);
}

void sub_1DE4DDC44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a44);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a50);
  JUMPOUT(0x1DE4DDC58);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::Feedforward(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD v8[34];
  void *v9;
  __int128 v10;
  __int128 v11;
  char v12;

  v11 = 0u;
  v10 = 0u;
  v9 = &unk_1EA92DFA8;
  v12 = 0;
  if (*(_BYTE *)(a1 + 4437))
    kaldi::quasar::TorchEncoderDecoder::AddPositionEmbedding(a1, *(_DWORD *)(a1 + 3508), a2, (uint64_t)&v9, 0);
  else
    kaldi::CuMatrix<float>::operator=((uint64_t)&v9, a2);
  switch(*(_DWORD *)(a1 + 3548))
  {
    case 0:
      kaldi::quasar::TorchEncoderDecoder::FeedforwardModelN(a1, (uint64_t)&v9, a3, a4);
      break;
    case 1:
      kaldi::quasar::TorchEncoderDecoder::FeedforwardModelM(a1, (uint64_t)&v9, a3, a4);
      break;
    case 2:
      kaldi::quasar::TorchEncoderDecoder::FeedforwardModelT(a1, (uint64_t)&v9, a3, a4);
      break;
    case 3:
      kaldi::quasar::TorchEncoderDecoder::FeedforwardModelF(a1, (uint64_t)&v9, a3, a4);
      break;
    default:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 568);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Un-supported model type : ", 26);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  ++*(_DWORD *)(a1 + 3508);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v9);
}

void sub_1DE4DDDF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::CuMatrix<float>::~CuMatrix(v1 - 80);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::FeedforwardModelN(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  clockid_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  clockid_t v25;
  clockid_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  const void *Component;
  kaldi::nnet1::SupervisedMultiHeadAttention *v31;
  const char *v32;
  uint64_t AttnProbabilities;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  void *v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  clockid_t v41;
  clockid_t v42;
  void *v43;
  __int128 v44;
  __int128 v45;
  std::vector<int>::size_type __sz;
  void *__src;
  uint64_t v48;
  void *__p[2];
  char v50;
  _BYTE v51[48];

  v8 = (double *)(a1 + 4576);
  v9 = a1 + 4648;
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v51, v8, v9, (__int128 *)__p);
  if (v50 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(&v43, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4680, (__int128 *)&v43);
  if (SHIBYTE(v44) < 0)
    operator delete(v43);
  v14 = *(unsigned int *)(a2 + 20);
  if (!(_DWORD)v14)
    kaldi::KaldiAssertFailure_((kaldi *)"FeedforwardModelN", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", (const char *)0x270, "target_in.NumRows() != 0", v13);
  v15 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760), v10, v11, v12, v13);
  kaldi::CuMatrix<float>::Resize(a1 + 3264, v14, v15, 0, 0);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>((uint64_t *)(a1 + 760), a2, a1 + 3264, 0, v16);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v17);
  std::string::basic_string[abi:ne180100]<0>(&v43, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4656, (__int128 *)&v43);
  if (SHIBYTE(v44) < 0)
    operator delete(v43);
  v22 = *(unsigned int *)(a1 + 3284);
  v23 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136), v18, v19, v20, v21);
  kaldi::CuMatrix<float>::Resize(a1 + 3312, v22, v23, 0, 0);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(*(uint64_t **)(a1 + 1136), a1 + 3264, a1 + 3312, 0, v24);
  kaldi::CuMatrix<float>::operator=(a1 + 3216, a1 + 3312);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v25);
  std::string::basic_string[abi:ne180100]<0>(&v43, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4664, (__int128 *)&v43);
  if (SHIBYTE(v44) < 0)
    operator delete(v43);
  if (*(_BYTE *)(a1 + 4443))
  {
    Component = (const void *)kaldi::nnet1::Nnet::GetComponent(*(kaldi::nnet1::Nnet **)(a1 + 1136), *(_DWORD *)(a1 + 3540), v27, v28, v29);
    if (!v31)
      kaldi::KaldiAssertFailure_((kaldi *)"FeedforwardModelN", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", (const char *)0x282, "attn_component", v32);
    __sz = 0;
    __src = 0;
    v48 = 0;
    AttnProbabilities = kaldi::nnet1::SupervisedMultiHeadAttention::GetAttnProbabilities(v31);
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v43, AttnProbabilities, 0, *(_DWORD *)(AttnProbabilities + 20), (const char *)*(unsigned __int8 *)(a1 + 4438), *(_DWORD *)(AttnProbabilities + 16) - *(unsigned __int8 *)(a1 + 4439));
    kaldi::CuMatrix<float>::operator=(a1 + 4528, (uint64_t)&v43);
    v43 = &unk_1EA926508;
    v44 = 0u;
    v45 = 0u;
    kaldi::CuMatrixBase<float>::~CuMatrixBase(&v43);
    kaldi::CuMatrixBase<float>::FindRowMaxId(a1 + 4528, (int *)&__sz, v34, v35, v36);
    v37 = *(void **)(a1 + 4504);
    v38 = (*(_QWORD *)(a1 + 4512) - (_QWORD)v37) >> 2;
    if ((_DWORD)__sz != (_DWORD)v38)
    {
      std::vector<int>::resize((std::vector<int> *)(a1 + 4504), (int)__sz);
      v37 = *(void **)(a1 + 4504);
      LODWORD(v38) = __sz;
    }
    memcpy(v37, __src, 4 * (int)v38);
    if (__src)
      free(__src);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v26);
  std::string::basic_string[abi:ne180100]<0>(&v43, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4672, (__int128 *)&v43);
  if (SHIBYTE(v44) < 0)
  {
    operator delete(v43);
    if (a4)
      goto LABEL_18;
  }
  else if (a4)
  {
LABEL_18:
    v39 = ((*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 3) - 1;
    goto LABEL_21;
  }
  v39 = -1;
LABEL_21:
  if (*(_QWORD *)(a1 + 4184))
    v40 = *(uint64_t **)(a1 + 4184);
  else
    v40 = (uint64_t *)(a1 + 384);
  kaldi::nnet1::Nnet::Feedforward(v40, a1 + 3216, a3, v39, 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v41);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v51, v42);
}

void sub_1DE4DE1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, __int128 a10, __int128 a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  clockid_t v25;
  clockid_t v26;

  __p = &unk_1EA926508;
  a10 = 0u;
  a11 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a15, v25);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a24, v26);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::FeedforwardModelM(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  double *v8;
  uint64_t v9;
  uint64_t v10;
  clockid_t v11;
  _QWORD *v12;
  void *v13;
  const char *v14;
  clockid_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  int v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  int v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  int v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  clockid_t v52;
  int v53;
  uint64_t *v54;
  clockid_t v55;
  clockid_t v56;
  void *v57[2];
  char v58;
  void *v59;
  __int128 v60;
  __int128 v61;
  std::vector<int> v62;
  __int128 v63;
  void *__p[2];
  char v65;
  _BYTE v66[56];

  v8 = (double *)(a1 + 4576);
  v9 = a1 + 4648;
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v66, v8, v9, (__int128 *)__p);
  if (v65 < 0)
    operator delete(__p[0]);
  v10 = *(unsigned int *)(a2 + 20);
  std::string::basic_string[abi:ne180100]<0>(&v62, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4664, (__int128 *)&v62);
  if (SHIBYTE(v62.__end_cap_.__value_) < 0)
    operator delete(v62.__begin_);
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::Feedforward(a1 + 1928, *(_QWORD *)(a1 + 3408) + 48 * *(int *)(a1 + 3512), a1 + 3312, a1 + 3360, a1 + 3432, &v62);
  v12 = (_QWORD *)(a1 + 4504);
  v13 = *(void **)(a1 + 4504);
  if (v13)
  {
    *(_QWORD *)(a1 + 4512) = v13;
    operator delete(v13);
    *v12 = 0;
    *(_QWORD *)(a1 + 4512) = 0;
    *(_QWORD *)(a1 + 4520) = 0;
  }
  *(_OWORD *)v12 = *(_OWORD *)&v62.__begin_;
  *(_QWORD *)(a1 + 4520) = v62.__end_cap_.__value_;
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v11);
  std::string::basic_string[abi:ne180100]<0>(&v62, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4680, (__int128 *)&v62);
  if (SHIBYTE(v62.__end_cap_.__value_) < 0)
    operator delete(v62.__begin_);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>((uint64_t *)(a1 + 760), a2, a1 + 3168, 0, v14);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v15);
  v20 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136), v16, v17, v18, v19);
  v25 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760), v21, v22, v23, v24);
  if (!(_DWORD)v10)
    kaldi::KaldiAssertFailure_((kaldi *)"FeedforwardModelM", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", (const char *)0x2AE, "num_sequences != 0", v26);
  kaldi::CuMatrix<float>::Resize(a1 + 3264, v10, (v25 + v20), 0, 0);
  v31 = (const char *)kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760), v27, v28, v29, v30);
  v36 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136), v32, v33, v34, v35);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v62, a1 + 3264, 0, *(_DWORD *)(a1 + 3284), v31, v36);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v62, a1 + 3360, 111, v37, v38);
  v43 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760), v39, v40, v41, v42);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v59, a1 + 3264, 0, *(_DWORD *)(a1 + 3284), 0, v43);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v59, a1 + 3168, 111, v44, v45);
  v50 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136), v46, v47, v48, v49);
  kaldi::CuMatrix<float>::Resize(a1 + 3312, v10, v50, 0, 0);
  std::string::basic_string[abi:ne180100]<0>(v57, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4656, (__int128 *)v57);
  if (v58 < 0)
    operator delete(v57[0]);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(*(uint64_t **)(a1 + 1136), a1 + 3264, a1 + 3312, 0, v51);
  kaldi::CuMatrix<float>::operator=(a1 + 3216, a1 + 3312);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v52);
  std::string::basic_string[abi:ne180100]<0>(v57, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4672, (__int128 *)v57);
  if (v58 < 0)
  {
    operator delete(v57[0]);
    if (a4)
      goto LABEL_14;
  }
  else if (a4)
  {
LABEL_14:
    v53 = ((*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 3) - 1;
    goto LABEL_17;
  }
  v53 = -1;
LABEL_17:
  if (*(_QWORD *)(a1 + 4184))
    v54 = *(uint64_t **)(a1 + 4184);
  else
    v54 = (uint64_t *)(a1 + 384);
  kaldi::nnet1::Nnet::Feedforward(v54, a1 + 3216, a3, v53, 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v55);
  v59 = &unk_1EA926508;
  v60 = 0u;
  v61 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v59);
  v62.__begin_ = (std::vector<int>::pointer)&unk_1EA926508;
  *(_OWORD *)&v62.__end_ = 0u;
  v63 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v62);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v66, v56);
}

void sub_1DE4DE628(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, __int128 a18, __int128 a19, void *a20,__int128 a21,__int128 a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  clockid_t v30;

  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a23, a2);
  a17 = &unk_1EA926508;
  a18 = 0u;
  a19 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a17);
  a20 = &unk_1EA926508;
  a21 = 0u;
  a22 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a20);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v28 - 136), v30);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::FeedforwardModelT(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  double *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  clockid_t v12;
  const char *v13;
  clockid_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  int v24;
  uint64_t v25;
  const char *v26;
  clockid_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  int v39;
  uint64_t v40;
  const char *v41;
  int v42;
  uint64_t *v43;
  clockid_t v44;
  clockid_t v45;
  void *v46[2];
  char v47;
  std::vector<int> v48;
  __int128 v49;
  void *v50;
  __int128 v51;
  __int128 v52;
  void *__p[2];
  char v54;
  _BYTE v55[48];

  v8 = (double *)(a1 + 4576);
  v9 = a1 + 4648;
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v55, v8, v9, (__int128 *)__p);
  if (v54 < 0)
    operator delete(__p[0]);
  v10 = *(unsigned int *)(a2 + 20);
  std::string::basic_string[abi:ne180100]<0>(&v50, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4680, (__int128 *)&v50);
  if (SHIBYTE(v51) < 0)
    operator delete(v50);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>((uint64_t *)(a1 + 760), a2, a1 + 3168, 0, v11);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v12);
  std::string::basic_string[abi:ne180100]<0>(&v50, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4656, (__int128 *)&v50);
  if (SHIBYTE(v51) < 0)
    operator delete(v50);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(*(uint64_t **)(a1 + 1136), a1 + 3168, a1 + 3312, 0, v13);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v14);
  v19 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136), v15, v16, v17, v18);
  kaldi::CuMatrix<float>::Resize(a1 + 3216, v10, (2 * v19), 0, 0);
  v24 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136), v20, v21, v22, v23);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v50, a1 + 3216, 0, *(_DWORD *)(a1 + 3236), 0, v24);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v50, a1 + 3312, 111, v25, v26);
  std::string::basic_string[abi:ne180100]<0>(&v48, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4664, (__int128 *)&v48);
  if (SHIBYTE(v48.__end_cap_.__value_) < 0)
    operator delete(v48.__begin_);
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::Feedforward(a1 + 1928, *(_QWORD *)(a1 + 3408) + 48 * *(int *)(a1 + 3512), a1 + 3312, a1 + 3360, a1 + 3432, &v48);
  v28 = (_QWORD *)(a1 + 4504);
  v29 = *(void **)(a1 + 4504);
  if (v29)
  {
    *(_QWORD *)(a1 + 4512) = v29;
    operator delete(v29);
    *v28 = 0;
    *(_QWORD *)(a1 + 4512) = 0;
    *(_QWORD *)(a1 + 4520) = 0;
  }
  *(_OWORD *)v28 = *(_OWORD *)&v48.__begin_;
  *(_QWORD *)(a1 + 4520) = v48.__end_cap_.__value_;
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v27);
  v34 = (const char *)kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136), v30, v31, v32, v33);
  v39 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136), v35, v36, v37, v38);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v48, a1 + 3216, 0, *(_DWORD *)(a1 + 3236), v34, v39);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v48, a1 + 3360, 111, v40, v41);
  std::string::basic_string[abi:ne180100]<0>(v46, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4672, (__int128 *)v46);
  if (v47 < 0)
  {
    operator delete(v46[0]);
    if (a4)
      goto LABEL_13;
  }
  else if (a4)
  {
LABEL_13:
    v42 = ((*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 3) - 1;
    goto LABEL_16;
  }
  v42 = -1;
LABEL_16:
  if (*(_QWORD *)(a1 + 4184))
    v43 = *(uint64_t **)(a1 + 4184);
  else
    v43 = (uint64_t *)(a1 + 384);
  kaldi::nnet1::Nnet::Feedforward(v43, a1 + 3216, a3, v42, 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v44);
  v48.__begin_ = (std::vector<int>::pointer)&unk_1EA926508;
  *(_OWORD *)&v48.__end_ = 0u;
  v49 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v48);
  v50 = &unk_1EA926508;
  v51 = 0u;
  v52 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v50);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v55, v45);
}

void sub_1DE4DEA5C(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, __int128 a17, __int128 a18, void *a19, __int128 a20,__int128 a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  clockid_t v29;

  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a22, a2);
  a16 = &unk_1EA926508;
  a17 = 0u;
  a18 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a16);
  a19 = &unk_1EA926508;
  a20 = 0u;
  a21 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a19);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v27 - 128), v29);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::FeedforwardModelF(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  double *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  clockid_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  int v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  int v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  int v40;
  uint64_t v41;
  const char *v42;
  const char *v43;
  clockid_t v44;
  clockid_t v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  clockid_t v51;
  clockid_t v52;
  std::vector<int> v53;
  void *v54;
  __int128 v55;
  __int128 v56;
  void *v57;
  __int128 v58;
  __int128 v59;
  void *__p[2];
  char v61;
  _BYTE v62[48];

  v8 = (double *)(a1 + 4576);
  v9 = a1 + 4648;
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v62, v8, v9, (__int128 *)__p);
  if (v61 < 0)
    operator delete(__p[0]);
  v10 = *(unsigned int *)(a2 + 20);
  std::string::basic_string[abi:ne180100]<0>(&v57, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4680, (__int128 *)&v57);
  if (SHIBYTE(v58) < 0)
    operator delete(v57);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>((uint64_t *)(a1 + 760), a2, a1 + 3168, 0, v11);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v12);
  v17 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136), v13, v14, v15, v16);
  v22 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760), v18, v19, v20, v21);
  if (!(_DWORD)v10)
    kaldi::KaldiAssertFailure_((kaldi *)"FeedforwardModelF", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", (const char *)0x334, "num_sequences != 0", v23);
  kaldi::CuMatrix<float>::Resize(a1 + 3264, v10, (v22 + v17), 0, 0);
  v28 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760), v24, v25, v26, v27);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v57, a1 + 3264, 0, *(_DWORD *)(a1 + 3284), 0, v28);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v57, a1 + 3168, 111, v29, v30);
  v35 = (const char *)kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760), v31, v32, v33, v34);
  v40 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136), v36, v37, v38, v39);
  kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v54, a1 + 3264, 0, *(_DWORD *)(a1 + 3284), v35, v40);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((unsigned int *)&v54, a1 + 3312, 111, v41, v42);
  std::string::basic_string[abi:ne180100]<0>(&v53, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4656, (__int128 *)&v53);
  if (SHIBYTE(v53.__end_cap_.__value_) < 0)
    operator delete(v53.__begin_);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuMatrixBase<float>>(*(uint64_t **)(a1 + 1136), a1 + 3264, a1 + 3312, 0, v43);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v44);
  std::string::basic_string[abi:ne180100]<0>(&v53, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4664, (__int128 *)&v53);
  if (SHIBYTE(v53.__end_cap_.__value_) < 0)
    operator delete(v53.__begin_);
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::Feedforward(a1 + 1928, *(_QWORD *)(a1 + 3408) + 48 * *(int *)(a1 + 3512), a1 + 3312, a1 + 3360, a1 + 3432, &v53);
  v46 = (_QWORD *)(a1 + 4504);
  v47 = *(void **)(a1 + 4504);
  if (v47)
  {
    *(_QWORD *)(a1 + 4512) = v47;
    operator delete(v47);
    *v46 = 0;
    *(_QWORD *)(a1 + 4512) = 0;
    *(_QWORD *)(a1 + 4520) = 0;
  }
  *(_OWORD *)v46 = *(_OWORD *)&v53.__begin_;
  *(_QWORD *)(a1 + 4520) = v53.__end_cap_.__value_;
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v45);
  v48 = kaldi::CuMatrix<float>::operator=(a1 + 3216, a1 + 3360);
  kaldi::CuMatrix<float>::operator=(a1 + 3312, v48);
  std::string::basic_string[abi:ne180100]<0>(&v53, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4672, (__int128 *)&v53);
  if (SHIBYTE(v53.__end_cap_.__value_) < 0)
  {
    operator delete(v53.__begin_);
    if (a4)
      goto LABEL_14;
  }
  else if (a4)
  {
LABEL_14:
    v49 = ((*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 3) - 1;
    goto LABEL_17;
  }
  v49 = -1;
LABEL_17:
  if (*(_QWORD *)(a1 + 4184))
    v50 = *(uint64_t **)(a1 + 4184);
  else
    v50 = (uint64_t *)(a1 + 384);
  kaldi::nnet1::Nnet::Feedforward(v50, a1 + 3216, a3, v49, 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v51);
  v54 = &unk_1EA926508;
  v55 = 0u;
  v56 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v54);
  v57 = &unk_1EA926508;
  v58 = 0u;
  v59 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&v57);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v62, v52);
}

void sub_1DE4DEF04(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, __int128 a17, __int128 a18, void *a19, __int128 a20,__int128 a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  clockid_t v29;

  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a22, a2);
  a16 = &unk_1EA926508;
  a17 = 0u;
  a18 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a16);
  a19 = &unk_1EA926508;
  a20 = 0u;
  a21 = 0u;
  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a19);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v27 - 128), v29);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::Start(_QWORD *a1, clockid_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  _QWORD v10[34];

  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a3 + 23))
      goto LABEL_3;
LABEL_9:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10, "Start", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 714);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Dynamic switch is not support in this platform");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  if (*(_QWORD *)(a3 + 8))
    goto LABEL_9;
LABEL_3:
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 572), a2);
  v4 = (_QWORD *)a1[427];
  v5 = (_QWORD *)a1[426];
  if (v4 != v5)
  {
    v6 = v4 - 6;
    v7 = v4 - 6;
    do
    {
      v8 = *v7;
      v7 -= 6;
      (*(void (**)(_QWORD *))(v8 + 16))(v6);
      v9 = v6 == v5;
      v6 = v7;
    }
    while (!v9);
  }
  a1[427] = v5;
}

double kaldi::quasar::TorchEncoderDecoder::Finish(kaldi::quasar::TorchEncoderDecoder *this, clockid_t a2)
{
  double result;

  result = *((double *)this + 577) + kaldi::Timer::GetSeconds((kaldi::Timer *)5, a2) - *((double *)this + 572);
  *((double *)this + 577) = result;
  return result;
}

void kaldi::quasar::TorchEncoderDecoder::GetTiming(const void **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const void *v5[4];
  _QWORD v6[4];
  _QWORD v7[4];
  _QWORD v8[4];
  _QWORD v9[4];
  _QWORD v10[4];
  _QWORD v11[4];
  _QWORD v12[4];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v5, "time total");
  v5[3] = this[577];
  std::string::basic_string[abi:ne180100]<0>(v6, "time start feedforward");
  v6[3] = this[578];
  std::string::basic_string[abi:ne180100]<0>(v7, "time get history state");
  v7[3] = this[579];
  std::string::basic_string[abi:ne180100]<0>(v8, "time set history state");
  v8[3] = this[580];
  std::string::basic_string[abi:ne180100]<0>(v9, "time feed forward");
  v9[3] = this[581];
  std::string::basic_string[abi:ne180100]<0>(v10, "time decoder");
  v10[3] = this[582];
  std::string::basic_string[abi:ne180100]<0>(v11, "time attention");
  v11[3] = this[583];
  std::string::basic_string[abi:ne180100]<0>(v12, "time readout");
  v12[3] = this[584];
  std::string::basic_string[abi:ne180100]<0>(v13, "time output embedding");
  v13[3] = this[585];
  std::map<std::string,double>::map[abi:ne180100](a2, v5, 9);
  v4 = 36;
  do
  {
    if (*((char *)&v5[v4 - 1] - 1) < 0)
      operator delete((void *)v5[v4 - 4]);
    v4 -= 4;
  }
  while (v4 * 8);
}

void sub_1DE4DF2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 288;
  while (1)
  {
    if (*(char *)(v10 + v12 - 9) < 0)
      operator delete(*(void **)(v10 + v12 - 32));
    v12 -= 32;
    if (!v12)
      _Unwind_Resume(exception_object);
  }
}

unsigned int *kaldi::quasar::TorchEncoderDecoder::CopyDecoderHiddenState(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;

  v3 = a1 + 3216;
  kaldi::CuMatrix<float>::Resize((uint64_t)a2, *(unsigned int *)(a1 + 3236), *(unsigned int *)(a1 + 3232), 0, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>(a2, v3, 111, v4, v5);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::Symbolize(uint64_t a1, __int128 **a2, uint64_t a3, int a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  int v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  std::string __p[12];

  v5 = 3624;
  if (a4)
    v5 = 3632;
  v6 = 3524;
  if (a4)
    v6 = 3536;
  v7 = *(_DWORD *)(a1 + v6);
  if (v7 == -1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "Symbolize", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 867);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Unknown label not described in the model");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  v8 = *a2;
  v9 = a2[1];
  if (*a2 == v9)
    return 0;
  v12 = 0;
  v13 = *(_QWORD *)(a1 + v5);
  v14 = a3 + 16;
  do
  {
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v15 = *v8;
      __p[0].__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v15;
    }
    v16 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v13 + 96))(v13, __p);
    if (v16 == -1)
      v17 = v7;
    else
      v17 = v16;
    if (v17 != v7 || (v12 = (v12 + 1), (a5 & 1) == 0))
    {
      v19 = *(_DWORD **)(a3 + 8);
      v18 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v19 >= v18)
      {
        v21 = *(_DWORD **)a3;
        v22 = ((uint64_t)v19 - *(_QWORD *)a3) >> 2;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v24 = v18 - (_QWORD)v21;
        if (v24 >> 1 > v23)
          v23 = v24 >> 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
          v25 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v14, v25);
          v21 = *(_DWORD **)a3;
          v19 = *(_DWORD **)(a3 + 8);
        }
        else
        {
          v26 = 0;
        }
        v27 = &v26[4 * v22];
        *(_DWORD *)v27 = v17;
        v20 = v27 + 4;
        while (v19 != v21)
        {
          v28 = *--v19;
          *((_DWORD *)v27 - 1) = v28;
          v27 -= 4;
        }
        *(_QWORD *)a3 = v27;
        *(_QWORD *)(a3 + 8) = v20;
        *(_QWORD *)(a3 + 16) = &v26[4 * v25];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v19 = v17;
        v20 = v19 + 1;
      }
      *(_QWORD *)(a3 + 8) = v20;
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v8 = (__int128 *)((char *)v8 + 24);
  }
  while (v8 != v9);
  return v12;
}

void sub_1DE4DF550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::UnkTargetId(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned int *)this + 884);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::UnkSourceId(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned int *)this + 881);
}

float kaldi::quasar::TorchEncoderDecoder::Align(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  float v21;
  void *__p;
  char *v24;
  unint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;

  v29 = 0;
  v30 = 0;
  v31 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  __p = 0;
  v24 = 0;
  v25 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v9 = *(_DWORD *)(a1 + 3532);
  v10 = v24;
  if ((unint64_t)v24 >= v25)
  {
    v12 = (char *)__p;
    v13 = (v24 - (_BYTE *)__p) >> 2;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = v25 - (_QWORD)__p;
    if ((uint64_t)(v25 - (_QWORD)__p) >> 1 > v14)
      v14 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v25, v16);
      v12 = (char *)__p;
      v10 = v24;
    }
    else
    {
      v17 = 0;
    }
    v18 = &v17[4 * v13];
    v19 = &v17[4 * v16];
    *(_DWORD *)v18 = v9;
    v11 = v18 + 4;
    while (v10 != v12)
    {
      v20 = *((_DWORD *)v10 - 1);
      v10 -= 4;
      *((_DWORD *)v18 - 1) = v20;
      v18 -= 4;
    }
    __p = v18;
    v24 = v11;
    v25 = (unint64_t)v19;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *(_DWORD *)v24 = v9;
    v11 = v10 + 4;
  }
  v24 = v11;
  v21 = kaldi::quasar::TorchEncoderDecoder::AlignImpl(a1, a2, (uint64_t *)&__p, (uint64_t)&v29, (uint64_t)&v26, a5, 1, a4);
  if (__p)
  {
    v24 = (char *)__p;
    operator delete(__p);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  return v21;
}

void sub_1DE4DF714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::EosTargetId(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned int *)this + 883);
}

float kaldi::quasar::TorchEncoderDecoder::AlignImpl(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  _QWORD *v15;
  void **v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  void **v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  float v42;
  uint64_t v43;
  const char *v44;
  const char *v45;
  int v46;
  unsigned int v47;
  const char *v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  unsigned int v62;
  uint64_t v63;
  const char *v64;
  float v65;
  unint64_t v66;
  float *v67;
  float *v68;
  float *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  float *v75;
  int v76;
  int *v77;
  int v78;
  unint64_t v79;
  int *v80;
  _DWORD *v81;
  int *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  int *v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  int *v103;
  int *v104;
  unint64_t v105;
  int v106;
  BOOL v107;
  uint64_t v108;
  kaldi::nnet1::Nnet *v110;
  _BYTE v112[32];
  _BYTE v113[12];
  unsigned int v114;
  unsigned int v115[8];
  uint64_t v116;
  unsigned int v117;
  int v118;
  _QWORD v119[4];
  char v120[8];
  float *v121;
  int v122;
  int v123;
  void *v124;
  __int128 v125;
  __int128 v126;
  char v127;
  void *v128;
  __int128 v129;
  __int128 v130;
  char v131;
  _QWORD v132[2];
  _QWORD v133[11];
  char v134;
  uint64_t v135;
  void **v136;
  uint64_t v137;
  uint64_t v138;

  v136 = 0;
  v137 = 0;
  v138 = 0;
  kaldi::JoinVectorToString<int>(a2, " ", (uint64_t)&v136);
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v132, "AlignImpl", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 940, 1);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)"Left symbol sequence : ", 23);
    if (v138 >= 0)
      v16 = (void **)&v136;
    else
      v16 = v136;
    if (v138 >= 0)
      v17 = HIBYTE(v138);
    else
      v17 = v137;
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" (# ", 4);
    v19 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)")", 1);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v132);
  }
  kaldi::JoinVectorToString<int>(a3, " ", (uint64_t)&v136);
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v132, "AlignImpl", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 943, 1);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)"Right symbol sequence : ", 24);
    if (v138 >= 0)
      v21 = (void **)&v136;
    else
      v21 = v136;
    if (v138 >= 0)
      v22 = HIBYTE(v138);
    else
      v22 = v137;
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" (# ", 4);
    v24 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" including </s>) ", 17);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v132);
  }
  v130 = 0u;
  v129 = 0u;
  v128 = &unk_1EA92DFA8;
  v131 = 0;
  kaldi::CuMatrix<float>::Resize((uint64_t)&v128, (unint64_t)(a2[1] - *a2) >> 2, 1, 0, 0);
  v26 = *a2;
  v27 = a2[1];
  v28 = v27 - *a2;
  if (v27 != *a2)
  {
    v29 = 0;
    v30 = v28 >> 2;
    v31 = (float *)v129;
    v32 = HIDWORD(v129);
    if (v30 <= 1)
      v30 = 1;
    v33 = 4 * (int)v130;
    do
    {
      if (v29 >= v32 || !DWORD2(v129))
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v25);
      *v31 = (float)(*(_DWORD *)(v26 + 4 * v29++) - 1);
      v31 = (float *)((char *)v31 + v33);
    }
    while (v30 != v29);
  }
  kaldi::quasar::TorchEncoderDecoder::ResetHistoryState((kaldi::quasar::TorchEncoderDecoder *)a1, 1);
  kaldi::quasar::TorchEncoderDecoder::StartFeedforward(a1, (uint64_t)&v128, 0);
  v126 = 0u;
  v125 = 0u;
  v124 = &unk_1EA92DFA8;
  v127 = 0;
  kaldi::CuMatrix<float>::CuMatrix((uint64_t)v120, 1, 1, 0, 0, 0);
  if (!v123 || !v122)
    kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v37);
  *v121 = (float)(*(_DWORD *)(a1 + 3528) - 1);
  v119[0] = &unk_1EA92DFD8;
  memset(&v119[1], 0, 24);
  v39 = *a3;
  v38 = a3[1];
  if (a7)
    v40 = kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)(a1 + 384), v34, v35, v36, v37) + 1;
  else
    v40 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 384), v34, v35, v36, v37);
  kaldi::Matrix<float>::Resize(a6, ((unint64_t)(v38 - v39) >> 2) - 1, v40, 0, 0);
  if (*(_QWORD *)(a1 + 4184))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v132, "AlignImpl", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 965);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)"Constrained Softmax with force alignment decoding is not Supported!", 67);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v132);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v132);
  if (a3[1] == *a3)
  {
    v42 = 0.0;
LABEL_89:
    if (a8)
      goto LABEL_92;
  }
  else
  {
    v110 = (kaldi::nnet1::Nnet *)(a1 + 384);
    v41 = 0;
    v42 = 0.0;
    while (1)
    {
      kaldi::quasar::TorchEncoderDecoder::Feedforward(a1, (uint64_t)v120, (uint64_t)&v124, 0);
      kaldi::Matrix<float>::Matrix((uint64_t)&v116, HIDWORD(v125), DWORD2(v125), 0, 0);
      kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v124, (unsigned int *)&v116, 111, v43, v44);
      if (!v123 || !v122)
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v45);
      v46 = *(_DWORD *)(*a3 + 4 * v41);
      v47 = v46 - 1;
      *v121 = (float)(v46 - 1);
      std::ostream::operator<<();
      if (((a3[1] - *a3) >> 2) - 1 > v41)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)", ", 2);
      if (!v118 || v117 <= v47)
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/matrix/kaldi-matrix.h", (const char *)0xCD, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v48);
      v49 = logf(*(float *)(v116 + 4 * (int)v47));
      v42 = v42 - v49;
      if (v46 == *(_DWORD *)(a1 + 3532))
        break;
      v50 = v49;
      if (a6)
      {
        kaldi::SubMatrix<float>::SubMatrix(v113, a6, v41, 1, 0, *(unsigned int *)(a6 + 8));
        if (a7)
          v55 = kaldi::nnet1::Nnet::InputDim(v110, v51, v52, v53, v54);
        else
          v55 = kaldi::nnet1::Nnet::OutputDim(v110, v51, v52, v53, v54);
        kaldi::SubMatrix<float>::SubMatrix(v115, v113, 0, v114, 0, v55);
        kaldi::CuMatrixBase<float>::~CuMatrixBase(v113);
        if (a7)
        {
          kaldi::CuMatrixBase<float>::CopyToMat<float>(a1 + 3216, v115, 111, v56, v57);
          v62 = kaldi::nnet1::Nnet::InputDim(v110, v58, v59, v60, v61);
          *(float *)kaldi::MatrixBase<float>::operator()(a6, v41, v62, v63, v64) = -v50;
        }
        else
        {
          kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v124, v115, 111, v56, v57);
        }
        kaldi::CuMatrixBase<float>::~CuMatrixBase(v115);
      }
      if (a5)
      {
        v65 = -v50;
        v67 = *(float **)(a5 + 8);
        v66 = *(_QWORD *)(a5 + 16);
        if ((unint64_t)v67 >= v66)
        {
          v69 = *(float **)a5;
          v70 = ((uint64_t)v67 - *(_QWORD *)a5) >> 2;
          v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v72 = v66 - (_QWORD)v69;
          if (v72 >> 1 > v71)
            v71 = v72 >> 1;
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
            v73 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v73 = v71;
          if (v73)
          {
            v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a5 + 16, v73);
            v69 = *(float **)a5;
            v67 = *(float **)(a5 + 8);
          }
          else
          {
            v74 = 0;
          }
          v75 = (float *)&v74[4 * v70];
          *v75 = v65;
          v68 = v75 + 1;
          while (v67 != v69)
          {
            v76 = *((_DWORD *)v67-- - 1);
            *((_DWORD *)v75-- - 1) = v76;
          }
          *(_QWORD *)a5 = v75;
          *(_QWORD *)(a5 + 8) = v68;
          *(_QWORD *)(a5 + 16) = &v74[4 * v73];
          if (v69)
            operator delete(v69);
        }
        else
        {
          *v67 = v65;
          v68 = v67 + 1;
        }
        *(_QWORD *)(a5 + 8) = v68;
      }
      if (a4)
      {
        v77 = *(int **)(a1 + 4504);
        if (v77 == *(int **)(a1 + 4512))
          v78 = -1;
        else
          v78 = *v77;
        v80 = *(int **)(a4 + 8);
        v79 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v80 >= v79)
        {
          v82 = *(int **)a4;
          v83 = ((uint64_t)v80 - *(_QWORD *)a4) >> 2;
          v84 = v83 + 1;
          if ((unint64_t)(v83 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v85 = v79 - (_QWORD)v82;
          if (v85 >> 1 > v84)
            v84 = v85 >> 1;
          if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFFCLL)
            v86 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v86 = v84;
          if (v86)
          {
            v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 16, v86);
            v82 = *(int **)a4;
            v80 = *(int **)(a4 + 8);
          }
          else
          {
            v87 = 0;
          }
          v88 = (int *)&v87[4 * v83];
          *v88 = v78;
          v81 = v88 + 1;
          while (v80 != v82)
          {
            v89 = *--v80;
            *--v88 = v89;
          }
          *(_QWORD *)a4 = v88;
          *(_QWORD *)(a4 + 8) = v81;
          *(_QWORD *)(a4 + 16) = &v87[4 * v86];
          if (v82)
            operator delete(v82);
        }
        else
        {
          *v80 = v78;
          v81 = v80 + 1;
        }
        *(_QWORD *)(a4 + 8) = v81;
      }
      kaldi::Matrix<float>::~Matrix((uint64_t)&v116);
      if (++v41 >= (a3[1] - *a3) >> 2)
        goto LABEL_89;
    }
    kaldi::Matrix<float>::~Matrix((uint64_t)&v116);
    if (a8)
    {
LABEL_92:
      if (a7)
      {
        v90 = kaldi::MatrixBase<float>::NumRows(a6);
        v91 = kaldi::MatrixBase<float>::NumCols(a6);
        kaldi::Matrix<float>::Matrix((uint64_t)&v116, v90, (v91 - 1), 0, 0);
        v92 = *a3;
        if (a3[1] - *a3 != 4)
        {
          v93 = 0;
          do
          {
            v94 = *(_DWORD *)(v92 + 4 * v93);
            kaldi::SubMatrix<float>::SubMatrix(v115, &v116, v93, 1, 0, v117);
            v95 = (v94 - 1);
            kaldi::SubMatrix<float>::SubMatrix(v113, a8, v95, 1, 0, *(unsigned int *)(a8 + 8));
            kaldi::SubMatrix<float>::SubMatrix(v112, a8, v95, 1, 0, *(unsigned int *)(a8 + 8));
            kaldi::MatrixBase<float>::CopyFromMat<float>(v115, (uint64_t)v112, 111, v96, v97);
            kaldi::CuMatrixBase<float>::~CuMatrixBase(v112);
            kaldi::CuMatrixBase<float>::~CuMatrixBase(v113);
            kaldi::CuMatrixBase<float>::~CuMatrixBase(v115);
            ++v93;
            v92 = *a3;
          }
          while (((a3[1] - *a3) >> 2) - 1 > v93);
        }
        v98 = kaldi::MatrixBase<float>::NumCols(a6);
        kaldi::SubMatrix<float>::SubMatrix(v115, a6, 0, *(unsigned int *)(a6 + 12), 0, (v98 - 1));
        kaldi::MatrixBase<float>::MulElements((uint64_t)v115, (uint64_t)&v116, v99, v100, v101);
        kaldi::CuMatrixBase<float>::~CuMatrixBase(v115);
        kaldi::Matrix<float>::~Matrix((uint64_t)&v116);
      }
    }
  }
  if (a4)
  {
    if (!*(_BYTE *)(a1 + 4440))
    {
      v103 = *(int **)a4;
      v102 = *(_QWORD *)(a4 + 8);
      if (*(_QWORD *)a4 != v102)
      {
        v104 = (int *)(v102 - 4);
        if (v104 > v103)
        {
          v105 = (unint64_t)(v103 + 1);
          do
          {
            v106 = *(_DWORD *)(v105 - 4);
            *(_DWORD *)(v105 - 4) = *v104;
            *v104-- = v106;
            v107 = v105 >= (unint64_t)v104;
            v105 += 4;
          }
          while (!v107);
        }
      }
    }
  }
  v132[0] = *MEMORY[0x1E0DE4F50];
  v108 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v132 + *(_QWORD *)(v132[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v133[0] = v108;
  v133[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v134 < 0)
    operator delete((void *)v133[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1DF0ECF6C](&v135);
  v119[0] = &unk_1EA92DFD8;
  kaldi::CuVector<float>::Destroy((uint64_t)v119);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v120);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v124);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v128);
  if (SHIBYTE(v138) < 0)
    operator delete(v136);
  return v42;
}

void sub_1DE4E0128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;

  kaldi::CuMatrixBase<float>::~CuMatrixBase(&a23);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a27);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a54);
  kaldi::CuVector<float>::~CuVector(&a32);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a36);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a42);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a48);
  if (*(char *)(v54 - 105) < 0)
    operator delete(*(void **)(v54 - 128));
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::BosTargetId(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned int *)this + 882);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::GetBestAlignment(kaldi::quasar::TorchEncoderDecoder *this, int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 563);
  if (v2 == *((_QWORD *)this + 564))
    return 0xFFFFFFFFLL;
  else
    return *(unsigned int *)(v2 + 4 * a2);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::CheckHasHandover(kaldi::nnet1::Nnet **this)
{
  uint64_t result;

  result = kaldi::nnet1::Nnet::IsRnn((kaldi::nnet1::Nnet *)(this + 1));
  if ((_DWORD)result)
    result = kaldi::nnet1::Nnet::IsRnn(this[142]);
  *((_BYTE *)this + 3504) = result;
  return result;
}

uint64_t kaldi::quasar::TorchEncoderDecoder::InputSymbols(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((_QWORD *)this + 453);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::OutputSymbols(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((_QWORD *)this + 454);
}

void kaldi::quasar::TorchEncoderDecoder::GetAlignmentProbabilities(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _DWORD *v11;
  int v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  _QWORD v22[4];
  _QWORD v23[2];
  int v24;

  v5 = *(_DWORD *)(a1 + 4544);
  if (v5 >= 1)
  {
    if (*(_DWORD *)(a1 + 4548) <= a3)
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", a5);
    v7 = *(_QWORD *)(a1 + 4536) + 4 * *(_DWORD *)(a1 + 4552) * (int)a3;
    v8 = *(_QWORD *)(a1 + 4560);
    v22[0] = &unk_1EA926538;
    v22[1] = v7;
    v22[3] = v8;
    v22[2] = v5;
    kaldi::CuVector<float>::CuVector((uint64_t)v23, (uint64_t)v22, a3, a4, a5);
    if (v24 >= 1)
    {
      v9 = 0;
      v10 = (_QWORD *)(a2 + 16);
      v11 = *(_DWORD **)(a2 + 8);
      do
      {
        v12 = *(_DWORD *)(v23[1] + 4 * v9);
        if ((unint64_t)v11 >= *v10)
        {
          v14 = *(_DWORD **)a2;
          v15 = ((uint64_t)v11 - *(_QWORD *)a2) >> 2;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v17 = *v10 - (_QWORD)v14;
          if (v17 >> 1 > v16)
            v16 = v17 >> 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
            v18 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v18);
            v14 = *(_DWORD **)a2;
            v11 = *(_DWORD **)(a2 + 8);
          }
          else
          {
            v19 = 0;
          }
          v20 = &v19[4 * v15];
          *(_DWORD *)v20 = v12;
          v13 = v20 + 4;
          while (v11 != v14)
          {
            v21 = *--v11;
            *((_DWORD *)v20 - 1) = v21;
            v20 -= 4;
          }
          *(_QWORD *)a2 = v20;
          *(_QWORD *)(a2 + 8) = v13;
          *(_QWORD *)(a2 + 16) = &v19[4 * v18];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v11 = v12;
          v13 = v11 + 1;
        }
        *(_QWORD *)(a2 + 8) = v13;
        ++v9;
        v11 = v13;
      }
      while (v9 < v24);
    }
    v23[0] = &unk_1EA92DFD8;
    kaldi::CuVector<float>::Destroy((uint64_t)v23);
  }
}

void sub_1DE4E045C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::GetCurrentAlignment(uint64_t a1, void **a2, unsigned int a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];

  kaldi::Vector<float>::Resize(a2, *(unsigned int *)(a1 + 3448), 0, a4, a5);
  v11 = *(_DWORD *)(a1 + 3448);
  if (v11 >= 1)
  {
    if (*(_DWORD *)(a1 + 3452) <= a3)
      kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v10);
    v12 = *(_QWORD *)(a1 + 3440) + 4 * (int)(*(_DWORD *)(a1 + 3456) * a3);
    v13 = *(_QWORD *)(a1 + 3464);
    v14[0] = &unk_1EA926538;
    v14[1] = v12;
    v14[3] = v13;
    v14[2] = v11;
    kaldi::CuVectorBase<float>::CopyToVec<float>(v14, (uint64_t)a2, v8, v9, v10);
  }
}

kaldi::nnet1::Nnet *kaldi::quasar::TorchEncoderDecoder::ConstrainSoftmax(kaldi::nnet1::Nnet *result, unsigned __int8 *a2, int a3, int a4, uint64_t *a5, int **a6, _QWORD *a7)
{
  kaldi::nnet1::Nnet *v7;

  if (*((_BYTE *)result + 4433))
  {
    v7 = result;
    result = kaldi::quasar::Shortlist::ConstrainSoftmax((uint64_t)result + 3656, a2, *((_DWORD *)v7 + 883) - 1, *((_DWORD *)v7 + 884) - 1, a3, a4, a5, (kaldi::nnet1::Nnet *)((char *)v7 + 384), a6, a7);
    *((_QWORD *)v7 + 523) = result;
  }
  return result;
}

uint64_t kaldi::quasar::TorchEncoderDecoder::GetSoftmaxEosId(kaldi::quasar::TorchEncoderDecoder *this)
{
  if (*((_QWORD *)this + 523))
    return *((unsigned int *)this + 948);
  else
    return (*((_DWORD *)this + 883) - 1);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::GetVocabWordIdx(kaldi::quasar::TorchEncoderDecoder *this, uint64_t a2)
{
  if (*((_QWORD *)this + 523))
    return *(unsigned int *)(*((_QWORD *)this + 471) + 4 * (int)a2);
  return a2;
}

_QWORD *kaldi::quasar::TorchEncoderDecoder::TryReadSymbolTable(uint64_t a1, uint64_t *a2, int a3, const std::string *a4)
{
  _QWORD *Text;
  std::locale::id *v8;
  const std::locale::facet *v9;
  unsigned __int8 v10;
  _QWORD *v11;
  char v12;
  std::string *p_p;
  std::string::size_type v14;
  uint64_t v15;
  std::string *v17;
  std::string::size_type size;
  _QWORD *v19;
  uint64_t v20;
  std::string __p;
  char v23;
  _QWORD v24[2];
  _QWORD v25[11];
  char v26;
  uint64_t v27;
  std::locale v28;

  kaldi::ExpectToken(a2, a3, (kaldi *)"<SymbolTable>");
  if (a3)
  {
    Text = fst::SymbolTable::Read(a2, a4);
    kaldi::ExpectToken(a2, 1, (kaldi *)"</SymbolTable>");
    return Text;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v24);
  memset(&__p, 0, sizeof(__p));
  v8 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v9 = std::locale::use_facet(&v28, v8);
    v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale(&v28);
    v11 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&__p, v10);
    if ((*((_BYTE *)v11 + *(_QWORD *)(*v11 - 24) + 32) & 5) != 0)
      break;
    kaldi::Trim(&__p);
    v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 14)
        goto LABEL_14;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 14)
        goto LABEL_14;
      p_p = &__p;
    }
    v14 = p_p->__r_.__value_.__r.__words[0];
    v15 = *(std::string::size_type *)((char *)p_p->__r_.__value_.__r.__words + 6);
    if (v14 == 0x6C6F626D79532F3CLL && v15 == 0x3E656C6261546C6FLL)
      goto LABEL_22;
LABEL_14:
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &__p;
    else
      v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v17, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  }
  v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_22:
  if (v12 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)&__p);
  Text = fst::SymbolTable::ReadText((uint64_t)v24);
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  v24[0] = *MEMORY[0x1E0DE4F50];
  v20 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v24 + *(_QWORD *)(v24[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v25[0] = v20;
  v25[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v26 < 0)
    operator delete((void *)v25[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1DF0ECF6C](&v27);
  return Text;
}

void sub_1DE4E081C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a20);
  _Unwind_Resume(a1);
}

_QWORD *fst::SymbolTable::Read(_QWORD *a1, const std::string *a2)
{
  _QWORD *v3;
  void *__p[2];
  __int128 v6;

  *(_OWORD *)__p = 0u;
  v6 = 0u;
  std::string::operator=((std::string *)&__p[1], a2);
  v3 = fst::SymbolTable::Read(a1);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[1]);
  return v3;
}

void sub_1DE4E08DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  fst::SymbolTableReadOptions::~SymbolTableReadOptions(&a9);
  _Unwind_Resume(a1);
}

_QWORD *fst::SymbolTable::ReadText(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v2;

  result = (_QWORD *)fst::SymbolTableImpl::ReadText(a1);
  if (result)
  {
    v2 = result;
    result = (_QWORD *)operator new();
    *result = &off_1EA924678;
    result[1] = v2;
  }
  return result;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *Text;
  void *__p[2];
  char v11;
  char v12;
  _QWORD v13[2];
  _BYTE v14[408];
  _QWORD v15[20];

  v15[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v13);
  if (*(_DWORD *)&v14[*(_QWORD *)(v13[0] - 24) + 16])
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v2 = fst::LogMessage::LogMessage((fst *)&v12, (uint64_t)__p);
    v3 = (_QWORD *)fst::cerr(v2);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"SymbolTable::ReadText: Can't open file ", 39);
    v5 = *(char *)(a1 + 23);
    if (v5 >= 0)
      v6 = a1;
    else
      v6 = *(_QWORD *)a1;
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(a1 + 23);
    else
      v7 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v12);
    if (v11 < 0)
      operator delete(__p[0]);
    Text = 0;
  }
  else
  {
    Text = fst::SymbolTable::ReadText((uint64_t)v13);
  }
  v13[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1DF0ECB94](v14);
  std::istream::~istream();
  MEMORY[0x1DF0ECF6C](v15);
  return Text;
}

uint64_t kaldi::quasar::TorchEncoderDecoder::ModelFileMap(kaldi::quasar::TorchEncoderDecoder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    v3[2] = 0;
    v3[1] = 0;
    *v3 = v3 + 1;
    kaldi::quasar::TorchEncoderDecoder::ModelFileMap(void)::modelFileMap = (uint64_t)v3;
  }
  return kaldi::quasar::TorchEncoderDecoder::ModelFileMap(void)::modelFileMap;
}

void sub_1DE4E09B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v21;
  _DWORD *v22;
  int v23;
  int v24;
  int v26;
  const std::string *v30;
  uint64_t v31;
  void **v32;
  unint64_t v33;
  const std::string *v34;
  uint64_t v35;
  __int128 v36;
  _QWORD *v37;
  _BYTE *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v42;
  BOOL v52;
  unint64_t v53;
  BOOL v55;
  BOOL v56;
  _BYTE *v59;
  _BOOL4 v61;
  _QWORD *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _BYTE *v68;
  uint64_t v69;
  int v72;
  int v73;
  const char *v75;
  _QWORD *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  _BYTE *v82;
  uint64_t v83;
  _QWORD *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  std::vector<std::string> *v89;
  _QWORD *v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t TrainOptions;
  __int128 v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  const char *v99;
  int v100;
  uint64_t v101;
  const char *v102;
  kaldi::nnet1::Nnet *v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  const char *v107;
  uint64_t *v108;
  std::__shared_weak_count *end;
  unint64_t *p_size;
  unint64_t v111;
  kaldi::nnet1::Nnet *v112;
  uint64_t ***v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  const char *v127;
  uint64_t Component;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  const char *v133;
  _QWORD *v134;
  _QWORD *SymbolTable;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  const char *v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  const char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  const char *v169;
  int v170;
  int v171;
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  void **v187;
  kaldi::nnet1::Nnet *v188;
  _BYTE *v190;
  uint64_t *v191;
  _BYTE __str[39];
  std::vector<std::string> v193;
  std::string v194;
  const std::string *v195;
  const std::string *v196;
  uint64_t v197;
  std::string *v198;
  _BYTE v199[351];
  uint64_t v200;
  _WORD v201[189];
  char v202;
  _QWORD v203[9];

  v203[6] = *MEMORY[0x1E0C80C00];
  kaldi::ExpectToken(a2, a3, (kaldi *)"<ModelType>");
  kaldi::ReadToken(a2, a3, a1 + 3576, v7, v8);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1187);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Full ModelType ", 15);
    v10 = *(char *)(a1 + 3599);
    if (v10 >= 0)
      v11 = a1 + 3576;
    else
      v11 = *(_QWORD *)(a1 + 3576);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a1 + 3599);
    else
      v12 = *(_QWORD *)(a1 + 3584);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v199);
  }
  v195 = 0;
  v196 = 0;
  v197 = 0;
  kaldi::SplitStringToVector((const std::string *)(a1 + 3576), "_", 1, (uint64_t)&v195);
  if (v195 == v196)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1192);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Undefined Torch model type", 26);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v199);
  }
  v13 = a1 + 3552;
  std::string::operator=((std::string *)(a1 + 3552), v195);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1195);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"ModelType ", 10);
    v15 = *(char *)(a1 + 3575);
    if (v15 >= 0)
      v16 = a1 + 3552;
    else
      v16 = *(_QWORD *)(a1 + 3552);
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a1 + 3575);
    else
      v17 = *(_QWORD *)(a1 + 3560);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v199);
  }
  v18 = *(char *)(a1 + 3575);
  v191 = a2;
  if (v18 < 0)
  {
    if (*(_QWORD *)(a1 + 3560) != 6)
      goto LABEL_419;
    v22 = *(_DWORD **)v13;
    if (**(_DWORD **)v13 != 1668443988 || *(_WORD *)(*(_QWORD *)v13 + 4) != 20072)
    {
      if (*v22 != 1668443988 || *((_WORD *)v22 + 2) != 19816)
      {
        if (*v22 != 1668443988 || *((_WORD *)v22 + 2) != 21608)
          goto LABEL_32;
LABEL_52:
        v26 = 2;
        goto LABEL_55;
      }
LABEL_54:
      v26 = 1;
      goto LABEL_55;
    }
LABEL_53:
    v26 = 0;
    goto LABEL_55;
  }
  if (v18 != 6)
    goto LABEL_419;
  if (*(_DWORD *)v13 == 1668443988 && *(_WORD *)(a1 + 3556) == 20072)
    goto LABEL_53;
  if (*(_DWORD *)v13 == 1668443988 && *(_WORD *)(a1 + 3556) == 19816)
    goto LABEL_54;
  v21 = *(_DWORD *)v13 == 1668443988 && *(_WORD *)(a1 + 3556) == 21608;
  v22 = (_DWORD *)(a1 + 3552);
  if (v21)
    goto LABEL_52;
LABEL_32:
  v23 = *v22;
  v24 = *((unsigned __int16 *)v22 + 2);
  if (v23 != 1668443988 || v24 != 18024)
  {
LABEL_419:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1205);
    v177 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Unsupported Torch model type : ", 31);
    v178 = *(char *)(a1 + 3575);
    if (v178 >= 0)
      v179 = a1 + 3552;
    else
      v179 = *(_QWORD *)(a1 + 3552);
    if (v178 >= 0)
      v180 = *(unsigned __int8 *)(a1 + 3575);
    else
      v180 = *(_QWORD *)(a1 + 3560);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, v179, v180);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v199);
  }
  v26 = 3;
LABEL_55:
  *(_DWORD *)(a1 + 3548) = v26;
  *(_WORD *)(a1 + 4432) = 0;
  v190 = (_BYTE *)(a1 + 4432);
  *(_BYTE *)(a1 + 4434) = 0;
  v30 = v195;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v196 - (char *)v195) >> 3) >= 2)
  {
    v31 = 0;
    v187 = (void **)(a1 + 4472);
    v32 = (void **)(a1 + 4448);
    v33 = 1;
    do
    {
      v34 = &v30[v31];
      v35 = (uint64_t)&v30[v31 + 1];
      if (SHIBYTE(v34[1].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v35, v34[1].__r_.__value_.__l.__size_);
      }
      else
      {
        v36 = *(_OWORD *)v35;
        *(_QWORD *)&__str[16] = *(_QWORD *)(v35 + 16);
        *(_OWORD *)__str = v36;
      }
      if ((__str[23] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&v194, *(const std::string::value_type **)__str, *(std::string::size_type *)&__str[8]);
      else
        v194 = *(std::string *)__str;
      memset(&v193, 0, sizeof(v193));
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1216);
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Processing token ", 17);
        if (__str[23] >= 0)
          v38 = __str;
        else
          v38 = *(_BYTE **)__str;
        if (__str[23] >= 0)
          v39 = __str[23];
        else
          v39 = *(_QWORD *)&__str[8];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, v39);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v199);
      }
      LODWORD(v40) = __str[23];
      if ((__str[23] & 0x80000000) == 0)
      {
        switch(__str[23])
        {
          case 3:
            if (*(unsigned __int16 *)__str == 20546 && __str[2] == 69)
              goto LABEL_153;
            goto LABEL_137;
          case 4:
            goto LABEL_134;
          case 5:
            goto LABEL_122;
          case 6:
LABEL_116:
            if (*(_DWORD *)__str == 1095781716 && *(unsigned __int16 *)&__str[4] == 21588)
              goto LABEL_150;
            if (__str[23] == 4)
              goto LABEL_134;
            if (__str[23] != 5)
              goto LABEL_137;
LABEL_122:
            if (*(_DWORD *)__str == 1279871043 && __str[4] == 68)
              goto LABEL_127;
LABEL_133:
            if (__str[23] != 4)
              goto LABEL_137;
LABEL_134:
            if (*(_DWORD *)__str == 1416916804)
              goto LABEL_135;
LABEL_137:
            v42 = __str[23];
            break;
          case 7:
LABEL_129:
            if (*(_DWORD *)__str == 1867807056 && *(_DWORD *)&__str[3] == 1751347823)
              goto LABEL_163;
            goto LABEL_133;
          case 9:
            if (*(_QWORD *)__str != 0x53494C54524F4853 || __str[8] != 84)
            {
              switch(__str[23])
              {
                case 4:
                  goto LABEL_134;
                case 5:
                  goto LABEL_122;
                case 6:
                  goto LABEL_116;
                case 7:
                  goto LABEL_129;
                default:
                  goto LABEL_137;
              }
            }
            goto LABEL_147;
          default:
            goto LABEL_137;
        }
LABEL_138:
        if (v42 <= 8)
          goto LABEL_166;
        std::string::basic_string((std::string *)v199, (const std::string *)__str, 0, 7uLL, (std::allocator<char> *)&v198);
        if ((v199[23] & 0x80000000) == 0)
        {
          if (v199[23] == 7)
          {
            v52 = *(_DWORD *)v199 == 1415865409 && *(_DWORD *)&v199[3] == 979853652;
            LODWORD(v40) = __str[23];
            v53 = *(_QWORD *)&__str[8];
            if (v52)
              goto LABEL_222;
            goto LABEL_167;
          }
          LODWORD(v40) = __str[23];
LABEL_166:
          v53 = *(_QWORD *)&__str[8];
          goto LABEL_167;
        }
        v55 = *(_QWORD *)&v199[8] == 7
           && **(_DWORD **)v199 == 1415865409
           && *(_DWORD *)(*(_QWORD *)v199 + 3) == 979853652;
        operator delete(*(void **)v199);
        LODWORD(v40) = __str[23];
        v53 = *(_QWORD *)&__str[8];
        if (v55)
        {
LABEL_222:
          v40 = v40;
          if ((v40 & 0x80u) != 0)
            v40 = v53;
          std::string::basic_string((std::string *)v199, (const std::string *)__str, 7uLL, v40 - 7, (std::allocator<char> *)&v198);
          if (*(char *)(a1 + 4471) < 0)
            operator delete(*v32);
          *(_OWORD *)v32 = *(_OWORD *)v199;
          *(_QWORD *)(a1 + 4464) = *(_QWORD *)&v199[16];
          MEMORY[0x1DF0ECA80](&v194, "AddTag");
          if (*(char *)(a1 + 4471) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v199, *(const std::string::value_type **)(a1 + 4448), *(_QWORD *)(a1 + 4456));
          }
          else
          {
            *(_OWORD *)v199 = *(_OWORD *)v32;
            *(_QWORD *)&v199[16] = *(_QWORD *)(a1 + 4464);
          }
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v193, (std::string *)v199, (__int128 *)&v199[24], 1uLL);
          if ((v199[23] & 0x80000000) != 0)
            operator delete(*(void **)v199);
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1239);
            v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Extracted add tag : ", 20);
            v77 = *(char *)(a1 + 4471);
            if (v77 >= 0)
              v78 = a1 + 4448;
            else
              v78 = *(_QWORD *)(a1 + 4448);
            if (v77 >= 0)
              v79 = *(unsigned __int8 *)(a1 + 4471);
            else
              v79 = *(_QWORD *)(a1 + 4456);
            v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, v78, v79);
            v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)" from ", 6);
            if (__str[23] >= 0)
              v82 = __str;
            else
              v82 = *(_BYTE **)__str;
            if (__str[23] >= 0)
              v83 = __str[23];
            else
              v83 = *(_QWORD *)&__str[8];
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)v82, v83);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v199);
          }
          LODWORD(v198) = kaldi::quasar::ToAddTag(a1 + 4448);
          kaldi::quasar::FromAddTag((int *)&v198, v199);
          if (*(char *)(a1 + 4471) < 0)
            operator delete(*v32);
          *(_OWORD *)v32 = *(_OWORD *)v199;
          *(_QWORD *)(a1 + 4464) = *(_QWORD *)&v199[16];
          *(_BYTE *)(a1 + 4442) = 1;
          if (kaldi::g_kaldi_verbose_level < 0)
            goto LABEL_304;
          kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1242);
          v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"AddTag value ", 13);
          v85 = *(char *)(a1 + 4471);
          if (v85 >= 0)
            v86 = a1 + 4448;
          else
            v86 = *(_QWORD *)(a1 + 4448);
          if (v85 >= 0)
            v87 = *(unsigned __int8 *)(a1 + 4471);
          else
            v87 = *(_QWORD *)(a1 + 4456);
          goto LABEL_302;
        }
LABEL_167:
        if ((v40 & 0x80u) == 0)
          v53 = v40;
        if (v53 >= 0xC)
        {
          std::string::basic_string((std::string *)v199, (const std::string *)__str, 0, 0xAuLL, (std::allocator<char> *)&v198);
          if ((v199[23] & 0x80000000) == 0)
          {
            if (v199[23] == 10)
            {
              v56 = *(_QWORD *)v199 == 0x616D726F46676154 && *(unsigned __int16 *)&v199[8] == 14964;
              LODWORD(v40) = __str[23];
              if (v56)
                goto LABEL_198;
              goto LABEL_176;
            }
LABEL_229:
            LODWORD(v40) = __str[23];
            if ((__str[23] & 0x80) != 0)
            {
LABEL_230:
              if (*(_QWORD *)&__str[8] != 6)
              {
                if (*(_QWORD *)&__str[8] == 10
                  && **(_QWORD **)__str == 0x626D456572616853
                  && *(_WORD *)(*(_QWORD *)__str + 8) == 25701)
                {
LABEL_256:
                  *(_BYTE *)(a1 + 4441) = 1;
                  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                  {
                    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1253);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Found shared embeddings token", 29);
                    goto LABEL_303;
                  }
                  goto LABEL_304;
                }
                goto LABEL_246;
              }
              if (**(_DWORD **)__str == 1348693573 && *(_WORD *)(*(_QWORD *)__str + 4) == 29551)
              {
LABEL_254:
                *(_BYTE *)(a1 + 4436) = 1;
                if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                {
                  kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1256);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Found encoder position embedding token", 38);
                  goto LABEL_303;
                }
                goto LABEL_304;
              }
              v59 = *(_BYTE **)__str;
LABEL_242:
              v72 = *(_DWORD *)v59;
              v73 = *((unsigned __int16 *)v59 + 2);
              if (v72 == 1348691268 && v73 == 29551)
              {
                *(_BYTE *)(a1 + 4437) = 1;
                if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                {
                  kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1259);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Found decoder position embedding token", 38);
                  goto LABEL_303;
                }
                goto LABEL_304;
              }
              goto LABEL_246;
            }
LABEL_177:
            if ((_DWORD)v40 == 6)
            {
              if (*(_DWORD *)__str == 1348693573 && *(unsigned __int16 *)&__str[4] == 29551)
                goto LABEL_254;
              v59 = __str;
              goto LABEL_242;
            }
            if ((_DWORD)v40 == 10
              && *(_QWORD *)__str == 0x626D456572616853
              && *(unsigned __int16 *)&__str[8] == 25701)
            {
              goto LABEL_256;
            }
LABEL_246:
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "AddSrcBos"))
            {
              *(_BYTE *)(a1 + 4438) = 1;
              if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
              {
                kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1262);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Found add beginning of sentence tag", 35);
                goto LABEL_303;
              }
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "AddSrcEos"))
            {
              *(_BYTE *)(a1 + 4439) = 1;
              if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
              {
                kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1265);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Found add end of sentence tag", 29);
                goto LABEL_303;
              }
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "AlignModel"))
            {
              *(_BYTE *)(a1 + 4443) = 1;
            }
            else
            {
              if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "ShiftedAlignments"))
              {
                *(_BYTE *)(a1 + 4444) = 1;
                if (!*(_BYTE *)(a1 + 4443))
                  kaldi::KaldiAssertFailure_((kaldi *)"Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", (const char *)0x4F6, "supervised_align_model_", v75);
                goto LABEL_304;
              }
              if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "MultipleDecoders"))
              {
                *(_BYTE *)(a1 + 4445) = 1;
                if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                {
                  kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1273);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Found multiple decoders token", 29);
                  goto LABEL_303;
                }
              }
              else
              {
                if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "NoSymbolTables"))
                {
                  if (kaldi::g_kaldi_verbose_level >= -1)
                  {
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1278);
                    v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Unknown model sub tag ", 22);
                    if (__str[23] >= 0)
                      v91 = __str;
                    else
                      v91 = *(_BYTE **)__str;
                    if (__str[23] >= 0)
                      v92 = __str[23];
                    else
                      v92 = *(_QWORD *)&__str[8];
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)v91, v92);
                    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v199);
                  }
                  goto LABEL_304;
                }
                *(_BYTE *)(a1 + 4446) = 1;
                if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                {
                  kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1276);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Found 'NoSymbolTables' token", 28);
                  goto LABEL_303;
                }
              }
            }
            goto LABEL_304;
          }
          if (*(_QWORD *)&v199[8] != 10)
          {
            operator delete(*(void **)v199);
            goto LABEL_229;
          }
          v61 = **(_QWORD **)v199 != 0x616D726F46676154 || *(_WORD *)(*(_QWORD *)v199 + 8) != 14964;
          operator delete(*(void **)v199);
          LODWORD(v40) = __str[23];
          if (!v61)
          {
LABEL_198:
            v40 = v40;
            if ((v40 & 0x80u) != 0)
              v40 = *(_QWORD *)&__str[8];
            std::string::basic_string((std::string *)v199, (const std::string *)__str, 0xAuLL, v40 - 10, (std::allocator<char> *)&v198);
            if (*(char *)(a1 + 4495) < 0)
              operator delete(*v187);
            *(_OWORD *)v187 = *(_OWORD *)v199;
            *(_QWORD *)(a1 + 4488) = *(_QWORD *)&v199[16];
            if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
            {
              kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1245);
              v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Extracted tag format : ", 23);
              v63 = *(_BYTE *)(a1 + 4495);
              if (v63 >= 0)
                v64 = a1 + 4472;
              else
                v64 = *(_QWORD *)(a1 + 4472);
              if (v63 >= 0)
                v65 = *(unsigned __int8 *)(a1 + 4495);
              else
                v65 = *(_QWORD *)(a1 + 4480);
              v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, v64, v65);
              v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" from ", 6);
              if (__str[23] >= 0)
                v68 = __str;
              else
                v68 = *(_BYTE **)__str;
              if (__str[23] >= 0)
                v69 = __str[23];
              else
                v69 = *(_QWORD *)&__str[8];
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v68, v69);
              kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v199);
            }
            LODWORD(v198) = kaldi::quasar::ToTagFormat(v187);
            kaldi::quasar::FromTagFormat((int *)&v198, v199);
            if (*(char *)(a1 + 4495) < 0)
              operator delete(*v187);
            *(_OWORD *)v187 = *(_OWORD *)v199;
            *(_QWORD *)(a1 + 4488) = *(_QWORD *)&v199[16];
            MEMORY[0x1DF0ECA80](&v194, "TagFormat");
            if (*(char *)(a1 + 4495) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v199, *(const std::string::value_type **)(a1 + 4472), *(_QWORD *)(a1 + 4480));
            }
            else
            {
              *(_OWORD *)v199 = *(_OWORD *)v187;
              *(_QWORD *)&v199[16] = *(_QWORD *)(a1 + 4488);
            }
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v193, (std::string *)v199, (__int128 *)&v199[24], 1uLL);
            if ((v199[23] & 0x80000000) != 0)
              operator delete(*(void **)v199);
            *(_BYTE *)(a1 + 4442) = 1;
            if (kaldi::g_kaldi_verbose_level < 0)
              goto LABEL_304;
            kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1250);
            v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"TagFormat value ", 16);
            v88 = *(_BYTE *)(a1 + 4495);
            if (v88 >= 0)
              v86 = a1 + 4472;
            else
              v86 = *(_QWORD *)(a1 + 4472);
            if (v88 >= 0)
              v87 = *(unsigned __int8 *)(a1 + 4495);
            else
              v87 = *(_QWORD *)(a1 + 4480);
LABEL_302:
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, v86, v87);
LABEL_303:
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v199);
            goto LABEL_304;
          }
        }
LABEL_176:
        if ((v40 & 0x80) != 0)
          goto LABEL_230;
        goto LABEL_177;
      }
      v42 = *(_QWORD *)&__str[8];
      if (*(_QWORD *)&__str[8] == 3 && **(_WORD **)__str == 20546 && *(_BYTE *)(*(_QWORD *)__str + 2) == 69)
      {
LABEL_153:
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1218);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Found BPE token", 15);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v199);
        }
        *v190 = 1;
        goto LABEL_304;
      }
      if (*(_QWORD *)&__str[8] == 9)
      {
        if (**(_QWORD **)__str == 0x53494C54524F4853 && *(_BYTE *)(*(_QWORD *)__str + 8) == 84)
        {
LABEL_147:
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1221);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Found SHORTLIST token", 21);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v199);
          }
          *(_BYTE *)(a1 + 4433) = 1;
          goto LABEL_304;
        }
        v42 = *(_QWORD *)&__str[8];
      }
      if (v42 == 6)
      {
        if (**(_DWORD **)__str == 1095781716 && *(_WORD *)(*(_QWORD *)__str + 4) == 21588)
        {
LABEL_150:
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1224);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Found TMPATT token", 18);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v199);
          }
          *(_BYTE *)(a1 + 4434) = 1;
          goto LABEL_304;
        }
        v42 = *(_QWORD *)&__str[8];
      }
      if (v42 == 5)
      {
        if (**(_DWORD **)__str == 1279871043 && *(_BYTE *)(*(_QWORD *)__str + 4) == 68)
        {
LABEL_127:
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1227);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Found CHILD token", 17);
            goto LABEL_303;
          }
          goto LABEL_304;
        }
        v42 = *(_QWORD *)&__str[8];
      }
      if (v42 == 7)
      {
        if (**(_DWORD **)__str == 1867807056 && *(_DWORD *)(*(_QWORD *)__str + 3) == 1751347823)
        {
LABEL_163:
          *(_BYTE *)(a1 + 4440) = 1;
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1230);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Found PyTorch token", 19);
            goto LABEL_303;
          }
          goto LABEL_304;
        }
        v42 = *(_QWORD *)&__str[8];
      }
      if (v42 != 4)
        goto LABEL_138;
      if (**(_DWORD **)__str != 1416916804)
        goto LABEL_166;
LABEL_135:
      *(_BYTE *)(a1 + 4435) = 1;
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1233);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Found DotT token", 16);
        goto LABEL_303;
      }
LABEL_304:
      v198 = &v194;
      v89 = (std::vector<std::string> *)(std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 3600), (const void **)&v194.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v198)+ 7);
      if (v89 != &v193)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v89, v193.__begin_, (__int128 *)v193.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v193.__end_ - (char *)v193.__begin_) >> 3));
      *(_QWORD *)v199 = &v193;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v199);
      if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v194.__r_.__value_.__l.__data_);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      ++v33;
      v30 = v195;
      ++v31;
    }
    while (0xAAAAAAAAAAAAAAABLL * (((char *)v196 - (char *)v195) >> 3) > v33);
  }
  v93 = v191;
  kaldi::nnet1::Nnet::Read((uint64_t **)(a1 + 8), v191, a3, a4);
  TrainOptions = kaldi::nnet1::Nnet::GetTrainOptions((kaldi::nnet1::Nnet *)(a1 + 8));
  *(_QWORD *)__str = &off_1EA9284D0;
  v95 = *(_OWORD *)(TrainOptions + 8);
  *(_OWORD *)&__str[23] = *(_OWORD *)(TrainOptions + 23);
  *(_OWORD *)&__str[8] = v95;
  __str[38] = 1;
  v188 = (kaldi::nnet1::Nnet *)(a1 + 8);
  kaldi::nnet1::Nnet::SetTrainOptions((kaldi::nnet1::Nnet *)(a1 + 8), (const kaldi::nnet1::NnetTrainOptions *)__str, 1, v96, v97);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1288);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"dot attention ", 14);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v199);
  }
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::AttentionModel((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)v199, *(_BYTE *)(a1 + 4434), *(_BYTE *)(a1 + 4435), *(_DWORD *)(a1 + 3548) == 3);
  kaldi::nnet1::Nnet::operator=((kaldi::nnet1::Nnet *)(a1 + 1936), (uint64_t)&v199[8]);
  kaldi::nnet1::Nnet::operator=((kaldi::nnet1::Nnet *)(a1 + 2312), (uint64_t)&v200);
  kaldi::nnet1::Nnet::operator=((kaldi::nnet1::Nnet *)(a1 + 2688), (uint64_t)v201);
  *(_WORD *)(a1 + 3064) = v201[188];
  *(_BYTE *)(a1 + 3066) = v202;
  kaldi::CuMatrix<float>::operator=(a1 + 3072, (uint64_t)v203);
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::~AttentionModel((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)v199);
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::Read(a1 + 1928, v191, a3, a4);
  if (*(_BYTE *)(a1 + 4445))
  {
    kaldi::ExpectToken(v191, a3, (kaldi *)"<NumDecoders>");
    kaldi::ReadBasicType<int>(v191, a3, a1 + 3544, v98, v99);
    if (*(int *)(a1 + 3544) >= 1)
    {
      v100 = 0;
      do
      {
        kaldi::ExpectToken(v191, a3, (kaldi *)"<DecoderLanguage>");
        memset(&v194, 0, sizeof(v194));
        kaldi::ReadToken(v191, a3, (uint64_t)&v194, v101, v102);
        v103 = (kaldi::nnet1::Nnet *)operator new();
        kaldi::nnet1::Nnet::Nnet(v103);
        std::shared_ptr<kaldi::nnet1::Nnet>::shared_ptr[abi:ne180100]<kaldi::nnet1::Nnet,void>(&v193, (uint64_t)v103);
        kaldi::nnet1::Nnet::Read((uint64_t **)v193.__begin_, v191, a3, a4);
        v104 = kaldi::nnet1::Nnet::GetTrainOptions((kaldi::nnet1::Nnet *)v193.__begin_);
        *(_QWORD *)v199 = &off_1EA9284D0;
        v105 = *(_OWORD *)(v104 + 8);
        *(_OWORD *)&v199[23] = *(_OWORD *)(v104 + 23);
        *(_OWORD *)&v199[8] = v105;
        v199[38] = 1;
        kaldi::nnet1::Nnet::SetTrainOptions((kaldi::nnet1::Nnet *)v193.__begin_, (const kaldi::nnet1::NnetTrainOptions *)v199, 1, v106, v107);
        v198 = &v194;
        v108 = std::__tree<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1152), (const void **)&v194.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v198);
        std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100](v108 + 7, (uint64_t *)&v193);
        kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)v199);
        end = (std::__shared_weak_count *)v193.__end_;
        if (v193.__end_)
        {
          p_size = &v193.__end_->__r_.__value_.__l.__size_;
          do
            v111 = __ldaxr(p_size);
          while (__stlxr(v111 - 1, p_size));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
            std::__shared_weak_count::__release_weak(end);
          }
        }
        if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v194.__r_.__value_.__l.__data_);
        ++v100;
      }
      while (v100 < *(_DWORD *)(a1 + 3544));
    }
    std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)(a1 + 1136), (uint64_t *)(*(_QWORD *)(a1 + 1152) + 56));
    v93 = v191;
  }
  else
  {
    v112 = (kaldi::nnet1::Nnet *)operator new();
    kaldi::nnet1::Nnet::Nnet(v112);
    std::shared_ptr<kaldi::nnet1::Nnet>::shared_ptr[abi:ne180100]<kaldi::nnet1::Nnet,void>(v199, (uint64_t)v112);
    v113 = (uint64_t ***)(a1 + 1136);
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 1136, (__int128 *)v199);
    v114 = *(std::__shared_weak_count **)&v199[8];
    if (*(_QWORD *)&v199[8])
    {
      v115 = (unint64_t *)(*(_QWORD *)&v199[8] + 8);
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
    kaldi::nnet1::Nnet::Read(*v113, v191, a3, a4);
    v117 = kaldi::nnet1::Nnet::GetTrainOptions((kaldi::nnet1::Nnet *)*v113);
    *(_QWORD *)v199 = &off_1EA9284D0;
    v118 = *(_OWORD *)(v117 + 8);
    *(_OWORD *)&v199[23] = *(_OWORD *)(v117 + 23);
    *(_OWORD *)&v199[8] = v118;
    v199[38] = 1;
    kaldi::nnet1::Nnet::SetTrainOptions((kaldi::nnet1::Nnet *)*v113, (const kaldi::nnet1::NnetTrainOptions *)v199, 1, v119, v120);
    kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)v199);
  }
  if (kaldi::quasar::TorchEncoderDecoder::CheckHasHandover((kaldi::nnet1::Nnet **)a1))
  {
    kaldi::ExpectToken(v93, a3, (kaldi *)"<HandoverCellStateOnly>");
    kaldi::ReadBasicType<BOOL>(v93, a3, (char *)(a1 + 3505), v124, v125);
    kaldi::ExpectToken(v93, a3, (kaldi *)"<HasHandoverLayer>");
    kaldi::ReadBasicType<BOOL>(v93, a3, (char *)(a1 + 3506), v126, v127);
    if (*(_BYTE *)(a1 + 3506))
    {
      if (*(_BYTE *)(a1 + 4440) && *(_DWORD *)(a1 + 3548) != 3)
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1324);
        v181 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Handover layer not supported with PyTorch models ", 49);
        v182 = *(_BYTE *)(a1 + 3599);
        if (v182 >= 0)
          v183 = a1 + 3576;
        else
          v183 = *(_QWORD *)(a1 + 3576);
        if (v182 >= 0)
          v184 = *(unsigned __int8 *)(a1 + 3599);
        else
          v184 = *(_QWORD *)(a1 + 3584);
        v185 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, v183, v184);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v185, (uint64_t)" Cell handover ", 15);
        v186 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v186, (uint64_t)" Has handover layer ", 20);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v199);
      }
      kaldi::nnet1::Nnet::Read((uint64_t **)(a1 + 1176), v93, a3, a4);
    }
    if (*(_DWORD *)(a1 + 3548) == 3)
    {
      kaldi::nnet1::Nnet::Read((uint64_t **)(a1 + 1552), v93, a3, a4);
      *(_BYTE *)(a1 + 3507) = 1;
    }
  }
  if (*(_BYTE *)(a1 + 4441))
  {
    Component = kaldi::nnet1::Nnet::GetComponent(v188, 0, v121, v122, v123);
    kaldi::nnet1::Nnet::AppendComponent((kaldi::nnet1::Nnet *)(a1 + 760), Component, v129, v130, v131);
  }
  else
  {
    kaldi::nnet1::Nnet::Read((uint64_t **)(a1 + 760), v93, a3, a4);
  }
  kaldi::nnet1::Nnet::Read((uint64_t **)(a1 + 384), v93, a3, a4);
  v194.__r_.__value_.__s.__data_[0] = 0;
  kaldi::ExpectToken(v93, a3, (kaldi *)"<HasInputSymbolTable>");
  kaldi::ReadBasicType<BOOL>(v93, a3, (char *)&v194, v132, v133);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1351);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Has input symbol table ", 23);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v199);
  }
  if (v194.__r_.__value_.__s.__data_[0])
  {
    v134 = std::string::basic_string[abi:ne180100]<0>(v199, "isyms");
    SymbolTable = kaldi::quasar::TorchEncoderDecoder::TryReadSymbolTable((uint64_t)v134, v93, a3, (const std::string *)v199);
    v136 = *(_QWORD *)(a1 + 3624);
    *(_QWORD *)(a1 + 3624) = SymbolTable;
    if (v136)
      (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
    if ((v199[23] & 0x80000000) != 0)
      operator delete(*(void **)v199);
  }
  else
  {
    v137 = *(_QWORD *)(a1 + 3624);
    *(_QWORD *)(a1 + 3624) = 0;
    if (v137)
      (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
  }
  if (v194.__r_.__value_.__s.__data_[0] && !*(_QWORD *)(a1 + 3624))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1355);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Embedded input symbols could not read", 37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v199);
  }
  if (*(_BYTE *)(a1 + 4440) || *(_BYTE *)(a1 + 4438) || *(_BYTE *)(a1 + 4439))
  {
    v138 = *(_QWORD *)(a1 + 3624);
    if (!v138)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1358);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"PyTorch require symbol table", 28);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v199);
    }
    *(_DWORD *)(a1 + 3516) = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v138 + 104))(v138, "<s>");
    *(_DWORD *)(a1 + 3520) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 3624) + 104))(*(_QWORD *)(a1 + 3624), "</s>");
    v139 = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 3624) + 104))(*(_QWORD *)(a1 + 3624), "<unk>");
    *(_DWORD *)(a1 + 3524) = v139;
    if (*(_DWORD *)(a1 + 3516) == -1 || *(_DWORD *)(a1 + 3520) == -1 || v139 == -1)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1364);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Special input symbol(s) not defined <s> </s> <unk> ", 51);
      v173 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v173, (uint64_t)" ", 1);
      v174 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v174, (uint64_t)" ", 1);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v199);
    }
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1367);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Overridding default input symbols <<unk> = ", 43);
      v140 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)", <s> = ", 8);
      v141 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)", </s> =  ", 10);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v199);
    }
  }
  kaldi::ExpectToken(v93, a3, (kaldi *)"<HasOutputSymbolTable>");
  kaldi::ReadBasicType<BOOL>(v93, a3, (char *)&v194, v142, v143);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1375);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Has output symbol table ", 24);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v199);
  }
  if (v194.__r_.__value_.__s.__data_[0])
  {
    v148 = std::string::basic_string[abi:ne180100]<0>(v199, "osyms");
    v149 = kaldi::quasar::TorchEncoderDecoder::TryReadSymbolTable((uint64_t)v148, v93, a3, (const std::string *)v199);
    v150 = *(_QWORD *)(a1 + 3632);
    *(_QWORD *)(a1 + 3632) = v149;
    if (v150)
      (*(void (**)(uint64_t))(*(_QWORD *)v150 + 8))(v150);
    if ((v199[23] & 0x80000000) != 0)
      operator delete(*(void **)v199);
  }
  else
  {
    v151 = *(_QWORD *)(a1 + 3632);
    *(_QWORD *)(a1 + 3632) = 0;
    if (v151)
      (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
  }
  if (v194.__r_.__value_.__s.__data_[0] && !*(_QWORD *)(a1 + 3632))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1378);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Embedded output symbols could not read", 38);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v199);
  }
  if (*(_BYTE *)(a1 + 4440))
  {
    v152 = *(_QWORD *)(a1 + 3632);
    if (!v152)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1381);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"PyTorch requires symbol table", 29);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v199);
    }
    *(_DWORD *)(a1 + 3528) = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v152 + 104))(v152, "<s>");
    *(_DWORD *)(a1 + 3532) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 3632) + 104))(*(_QWORD *)(a1 + 3632), "</s>");
    v153 = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 3632) + 104))(*(_QWORD *)(a1 + 3632), "<unk>");
    *(_DWORD *)(a1 + 3536) = v153;
    if (*(_DWORD *)(a1 + 3528) == -1 || *(_DWORD *)(a1 + 3532) == -1 || v153 == -1)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1387);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Special output symbol(s) not defined <s> </s> <unk> ", 52);
      v175 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v175, (uint64_t)" ", 1);
      v176 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, (uint64_t)" ", 1);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v199);
    }
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1390);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Overridding default output symbols <<unk> = ", 44);
      v154 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)", <s> = ", 8);
      v155 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v155, (uint64_t)", </s> =  ", 10);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v199);
    }
  }
  if (*v190)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1397);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Trying to read embedded BPE model ", 34);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v199);
    }
    kaldi::quasar::BPE::Read(a1 + 4192, v93, a3);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1399);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Number of BPE entries : ", 24);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v199);
    }
  }
  if (*(_BYTE *)(a1 + 4433))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1403);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Trying to read Shortlist", 24);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v199);
    }
    kaldi::quasar::Shortlist::Read(a1 + 3656, v93, a3, a4);
  }
  if (*(_BYTE *)(a1 + 4443))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1408);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Searching for SupervisedMultiHeadAttention component", 52);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v199);
    }
    v156 = (*(_QWORD *)(*(_QWORD *)(a1 + 1136) + 8) - **(_QWORD **)(a1 + 1136)) >> 3;
    if ((int)v156 >= 1)
    {
      v157 = 0;
      while (1)
      {
        v158 = kaldi::nnet1::Nnet::GetComponent(*(kaldi::nnet1::Nnet **)(a1 + 1136), v157, v145, v146, v147);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v158 + 24))(v158) == 287)
          break;
        if ((_DWORD)v156 == ++v157)
          goto LABEL_409;
      }
      *(_DWORD *)(a1 + 3540) = v157;
    }
LABEL_409:
    v159 = *(_DWORD *)(a1 + 3540);
    if (v159 < 0 || v159 >= (int)v156)
      kaldi::KaldiAssertFailure_((kaldi *)"Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", (const char *)0x588, "supervised_attn_idx_ >= 0 && supervised_attn_idx_ < num_components", v147);
  }
  v160 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136), v144, v145, v146, v147);
  kaldi::CuMatrix<float>::Resize(a1 + 3312, 1, v160, 0, 0);
  v165 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760), v161, v162, v163, v164);
  kaldi::CuMatrix<float>::Resize(a1 + 3168, 1, v165, 0, 0);
  v170 = kaldi::nnet1::Nnet::OutputDim(v188, v166, v167, v168, v169);
  if (v170 >= 0)
    v171 = v170;
  else
    v171 = v170 + 1;
  *(_DWORD *)(a1 + 4496) = v171 >> 1;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v199, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1423);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)"Done reading model ", 19);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v199);
  }
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)__str);
  *(_QWORD *)v199 = &v195;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v199);
  return 1;
}

void sub_1DE4E2C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a31);
  JUMPOUT(0x1DE4E2DD8);
}

void sub_1DE4E2CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a31);
  JUMPOUT(0x1DE4E2DE8);
}

void sub_1DE4E2CD4(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1DE4E2DE8);
}

void sub_1DE4E2CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a31);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)&a15);
  JUMPOUT(0x1DE4E2DD8);
}

void sub_1DE4E2CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::~AttentionModel((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)&a31);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)&a15);
  JUMPOUT(0x1DE4E2DD8);
}

void sub_1DE4E2D04()
{
  JUMPOUT(0x1DE4E2DC8);
}

void sub_1DE4E2D0C()
{
  JUMPOUT(0x1DE4E2DD8);
}

void sub_1DE4E2D24()
{
  uint64_t v0;

  MEMORY[0x1DF0ED014](v0, 0x10B0C4082B712C9);
  JUMPOUT(0x1DE4E2D88);
}

void sub_1DE4E2D44()
{
  JUMPOUT(0x1DE4E2D80);
}

void sub_1DE4E2D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)va);
  JUMPOUT(0x1DE4E2DD8);
}

void sub_1DE4E2D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a31);
  JUMPOUT(0x1DE4E2DA8);
}

void sub_1DE4E2D6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    JUMPOUT(0x1DE4E2D94);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)&a15);
  JUMPOUT(0x1DE4E2DD8);
}

void sub_1DE4E2DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char *a37)
{
  a37 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  if (a31 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  a37 = &a32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  _Unwind_Resume(a1);
}

void std::shared_ptr<fst::MappedFile>::reset[abi:ne180100]<fst::MappedFile,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<fst::MappedFile>::shared_ptr[abi:ne180100]<fst::MappedFile,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void kaldi::quasar::TorchEncoderDecoder::SetMappedFile(uint64_t a1, uint64_t *a2)
{
  _QWORD v2[35];

  if (*(_QWORD *)(a1 + 3640))
  {
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v2, "SetMappedFile", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/torch-translator.cc", 1178, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Nnet already mapped from a file - ignoring", 42);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v2);
    }
  }
  else
  {
    std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)(a1 + 3640), a2);
  }
}

void sub_1DE4E2EEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t kaldi::quasar::BPE::Read(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  int v10;
  void **v11;
  void *v12;
  int v13;
  void **v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  int v19;
  void **v21;
  uint64_t v22;
  const char *v23;
  void *v24;
  int v25;
  void **v27;
  uint64_t v28;
  const char *v29;
  int v30;
  std::locale::id *v31;
  const std::locale::facet *v32;
  unsigned __int8 v33;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  void *locale;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v54;
  void **v55;
  uint64_t v56;
  std::locale v57;
  uint64_t v58;
  unsigned __int8 v59;
  int v60;
  void *__p[2];
  uint64_t v62;
  void **v63;
  uint64_t v64;
  uint64_t v65;

  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::clear(a1 + 24);
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 64));
  v63 = 0;
  v64 = 0;
  v65 = 0;
  kaldi::ReadToken(a2, a3, (uint64_t)&v63, v6, v7);
  v10 = HIBYTE(v65);
  if (SHIBYTE(v65) < 0)
  {
    if (v64 != 9)
      goto LABEL_16;
    v11 = v63;
  }
  else
  {
    if (HIBYTE(v65) != 9)
    {
LABEL_11:
      if (v10 != 10)
      {
LABEL_23:
        if (v10 != 9)
        {
LABEL_33:
          if (v10 != 8)
            goto LABEL_79;
          v27 = (void **)&v63;
          goto LABEL_38;
        }
        v21 = (void **)&v63;
        goto LABEL_28;
      }
      v15 = (void **)&v63;
      goto LABEL_18;
    }
    v11 = (void **)&v63;
  }
  v12 = *v11;
  v13 = *((unsigned __int8 *)v11 + 8);
  if (v12 == (void *)0x65646F4D6B6E553CLL && v13 == 62)
  {
    __p[0] = 0;
    __p[1] = 0;
    v62 = 0;
    kaldi::ReadToken(a2, a3, (uint64_t)__p, v8, v9);
    *(_DWORD *)(a1 + 184) = kaldi::quasar::BPE::StringToUnkMode((uint64_t)__p);
    kaldi::ReadToken(a2, a3, (uint64_t)&v63, v16, v17);
    if (SHIBYTE(v62) < 0)
      operator delete(__p[0]);
    v10 = HIBYTE(v65);
    if ((v65 & 0x8000000000000000) == 0)
      goto LABEL_11;
  }
  else if ((v65 & 0x8000000000000000) == 0)
  {
    goto LABEL_11;
  }
LABEL_16:
  if (v64 != 10)
    goto LABEL_26;
  v15 = v63;
LABEL_18:
  v18 = *v15;
  v19 = *((unsigned __int16 *)v15 + 4);
  if (v18 == (void *)0x656B6F546B6E553CLL && v19 == 15982)
  {
    kaldi::ReadToken(a2, a3, a1 + 192, v8, v9);
    kaldi::ReadToken(a2, a3, (uint64_t)&v63, v22, v23);
    v10 = HIBYTE(v65);
    if ((v65 & 0x8000000000000000) == 0)
      goto LABEL_23;
  }
  else if ((v10 & 0x80) == 0)
  {
    goto LABEL_23;
  }
LABEL_26:
  if (v64 != 9)
    goto LABEL_36;
  v21 = v63;
LABEL_28:
  v24 = *v21;
  v25 = *((unsigned __int8 *)v21 + 8);
  if (v24 == (void *)0x6E6F69737265563CLL && v25 == 62)
  {
    kaldi::ReadToken(a2, a3, a1 + 216, v8, v9);
    kaldi::ReadToken(a2, a3, (uint64_t)&v63, v28, v29);
    v10 = HIBYTE(v65);
    if ((v65 & 0x8000000000000000) == 0)
      goto LABEL_33;
  }
  else if ((v10 & 0x80) == 0)
  {
    goto LABEL_33;
  }
LABEL_36:
  if (v64 != 8)
    goto LABEL_79;
  v27 = v63;
LABEL_38:
  if (*v27 != (void *)0x3E6570426D754E3CLL)
  {
LABEL_79:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "Read", "../engine/common/libquasar/libkaldi/src/nnmt/bpe.h", 203);
    v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Expected to read number of BPE units now, but got ", 50);
    if (v65 >= 0)
      v55 = (void **)&v63;
    else
      v55 = v63;
    if (v65 >= 0)
      v56 = HIBYTE(v65);
    else
      v56 = v64;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v55, v56);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  v60 = 0;
  kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v60, v8, v9);
  if ((a3 & 1) == 0)
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  if (v60)
  {
    v30 = 0;
    v31 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      v62 = 0;
      std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
      v32 = std::locale::use_facet(&v57, v31);
      v33 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
      std::locale::~locale(&v57);
      std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)__p, v33);
      v34 = *(_QWORD *)(a1 + 72);
      if (v34 >= *(_QWORD *)(a1 + 80))
      {
        v36 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 64), (__int128 *)__p);
      }
      else
      {
        if (SHIBYTE(v62) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a1 + 72), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v35 = *(_OWORD *)__p;
          *(_QWORD *)(v34 + 16) = v62;
          *(_OWORD *)v34 = v35;
        }
        v36 = v34 + 24;
        *(_QWORD *)(a1 + 72) = v34 + 24;
      }
      *(_QWORD *)(a1 + 72) = v36;
      kaldi::quasar::BPE::ProcessLine(a1, (uint64_t)__p, (float)v30);
      if (SHIBYTE(v62) < 0)
        operator delete(__p[0]);
      ++v30;
    }
    while (v30 != v60);
  }
  kaldi::quasar::BPE::GetUniqueChars((kaldi::quasar::BPE *)a1);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)__p, "Read", "../engine/common/libquasar/libkaldi/src/nnmt/bpe.h", 217);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"BPE model version: ", 19);
    v38 = *(char *)(a1 + 239);
    v39 = v38 >= 0 ? a1 + 216 : *(_QWORD *)(a1 + 216);
    v40 = v38 >= 0 ? *(unsigned __int8 *)(a1 + 239) : *(_QWORD *)(a1 + 224);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)__p, "Read", "../engine/common/libquasar/libkaldi/src/nnmt/bpe.h", 218);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# of BPE model entries : ", 25);
      v41 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" # of chars ", 12);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)__p, "Read", "../engine/common/libquasar/libkaldi/src/nnmt/bpe.h", 219);
        v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"BPE model unk mode = ", 21);
        kaldi::quasar::BPE::UnkModeToString(*(_DWORD *)(a1 + 184), &v57);
        if ((v59 & 0x80u) == 0)
          locale = &v57;
        else
          locale = v57.__locale_;
        if ((v59 & 0x80u) == 0)
          v44 = v59;
        else
          v44 = v58;
        v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)locale, v44);
        v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)", unk token = ", 14);
        v49 = *(_QWORD *)(a1 + 192);
        v48 = a1 + 192;
        v47 = v49;
        v50 = *(char *)(v48 + 23);
        if (v50 >= 0)
          v51 = v48;
        else
          v51 = v47;
        if (v50 >= 0)
          v52 = *(unsigned __int8 *)(v48 + 23);
        else
          v52 = *(_QWORD *)(v48 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, v51, v52);
        if ((char)v59 < 0)
          operator delete(v57.__locale_);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      }
    }
  }
  if (SHIBYTE(v65) < 0)
    operator delete(v63);
  return 1;
}

void sub_1DE4E355C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  if (*(char *)(v6 - 65) < 0)
    operator delete(*(void **)(v6 - 88));
  _Unwind_Resume(a1);
}

void sub_1DE4E3570(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 65) < 0)
    operator delete(*(void **)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_1DE4E3578()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 72) = v1;
  JUMPOUT(0x1DE4E3598);
}

void sub_1DE4E3584(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  JUMPOUT(0x1DE4E3598);
}

uint64_t kaldi::quasar::BPE::StringToUnkMode(uint64_t a1)
{
  int v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD v7[34];

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (v1 != 4)
    {
      if (v1 != 8)
        goto LABEL_25;
      if (*(_QWORD *)a1 != 0x6B6E753272616863)
      {
        if (*(_QWORD *)a1 != 0x6B6E753264726F77)
        {
          v2 = (_QWORD *)a1;
          if (*(_QWORD *)a1 == 0x72616863706F7264)
            return 3;
LABEL_18:
          if (*v2 == 0x64726F77706F7264)
            return 4;
LABEL_25:
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7, "StringToUnkMode", "../engine/common/libquasar/libkaldi/src/nnmt/bpe.h", 99);
          v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Unknown unk mode : ", 19);
          std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, a1);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
        }
        return 2;
      }
      return 1;
    }
    if (*(_DWORD *)a1 != 1885693291)
      goto LABEL_25;
    return 0;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 == 4 && **(_DWORD **)a1 == 1885693291)
    return 0;
  if (v3 != 8)
    goto LABEL_25;
  if (**(_QWORD **)a1 == 0x6B6E753272616863)
    return 1;
  if (*(_QWORD *)(a1 + 8) != 8)
    goto LABEL_25;
  if (**(_QWORD **)a1 == 0x6B6E753264726F77)
    return 2;
  if (*(_QWORD *)(a1 + 8) != 8)
    goto LABEL_25;
  v2 = *(_QWORD **)a1;
  if (**(_QWORD **)a1 != 0x72616863706F7264)
  {
    if ((v1 & 0x80) == 0)
    {
      v2 = (_QWORD *)a1;
      if (v1 != 8)
        goto LABEL_25;
    }
    goto LABEL_18;
  }
  return 3;
}

uint64_t kaldi::quasar::TorchEncoderDecoder::HasBpeModel(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned __int8 *)this + 4432);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::BpeModel(kaldi::quasar::TorchEncoderDecoder *this)
{
  return (uint64_t)this + 4192;
}

_QWORD *kaldi::quasar::TorchEncoderDecoder::SelectModel@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t **v6;
  uint64_t *v7;
  _QWORD *result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 *v12;

  v6 = (uint64_t **)(a1 + 144);
  if (a1 + 145 == (_QWORD *)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>((uint64_t)(a1 + 144), (const void **)a2))
  {
    result = std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100](a1 + 142, (uint64_t *)(a1[144] + 56));
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v12 = a2;
    v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (const void **)a2, (uint64_t)&std::piecewise_construct, &v12);
    result = std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100](a1 + 142, v7 + 7);
    v9 = a1[143];
    *a3 = a1[142];
    a3[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  return result;
}

kaldi::quasar::Shortlist *kaldi::quasar::Shortlist::Shortlist(kaldi::quasar::Shortlist *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  kaldi::Matrix<float>::Matrix((uint64_t)this + 24);
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 16) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 34) = -1;
  kaldi::nnet1::Nnet::Nnet((kaldi::quasar::Shortlist *)((char *)this + 144));
  *((_BYTE *)this + 520) = 0;
  return this;
}

void sub_1DE4E3904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  void *v13;

  v13 = *(void **)(v10 + 112);
  if (v13)
  {
    *(_QWORD *)(v10 + 120) = v13;
    operator delete(v13);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::MappableVector<int>>::__destroy_vector::operator()[abi:ne180100](&a10);
  kaldi::Matrix<float>::~Matrix(v11);
  a10 = (void **)v10;
  std::vector<kaldi::MappableVector<int>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::MappableVector<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<kaldi::MappableVector<int>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t kaldi::quasar::BPE::BPE(uint64_t a1, int a2, __int128 *a3)
{
  __int128 v6;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_DWORD *)(a1 + 128) = 2139095039;
  *(_QWORD *)(a1 + 112) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 136), "@@");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 160), "</w>");
  *(_DWORD *)(a1 + 184) = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 192), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *(_QWORD *)(a1 + 208) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 192) = v6;
  }
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 216), "0.1");
  return a1;
}

void sub_1DE4E3A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void **v5;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 183) < 0)
    operator delete(*v5);
  if (*(char *)(v2 + 159) < 0)
    operator delete(*v4);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2 + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table(v3);
  std::__tree<std::string>::destroy(v2, *(char **)(v2 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::string>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void kaldi::quasar::BPE::~BPE(kaldi::quasar::BPE *this)
{
  void **v2;

  if (*((char *)this + 239) < 0)
    operator delete(*((void **)this + 27));
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  if (*((char *)this + 183) < 0)
    operator delete(*((void **)this + 20));
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 88);
  v2 = (void **)((char *)this + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)this + 24);
  std::__tree<std::string>::destroy((uint64_t)this, *((char **)this + 1));
}

uint64_t kaldi::quasar::TimeBlock::TimeBlock(uint64_t a1, double *a2, uint64_t a3, __int128 *a4)
{
  __int128 v6;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v6 = *a4;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 24) = v6;
  }
  *(double *)(a1 + 16) = kaldi::Timer::GetSeconds((kaldi::Timer *)5, (clockid_t)a2) - *a2;
  return a1;
}

void sub_1DE4E3D10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TimeBlock::~TimeBlock(kaldi::quasar::TimeBlock *this, clockid_t a2)
{
  double *v3;
  int v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  clockid_t v10;
  _QWORD *v11;
  _QWORD *v12;
  clockid_t v13;
  _QWORD v14[34];

  v3 = *(double **)this;
  **((double **)this + 1) = kaldi::Timer::GetSeconds((kaldi::Timer *)5, a2)
                          - *v3
                          - *((double *)this + 2)
                          + **((double **)this + 1);
  v4 = *((char *)this + 47);
  if (v4 < 0)
    v5 = *((_QWORD *)this + 4);
  else
    v5 = *((unsigned __int8 *)this + 47);
  if (v5 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiLogMessage::KaldiLogMessage((kaldi::KaldiLogMessage *)v14, "~TimeBlock", "../engine/common/libquasar/libkaldi/src/nnmt/torch-translator.h", 60);
    v6 = *((char *)this + 47);
    if (v6 >= 0)
      v7 = (char *)this + 24;
    else
      v7 = (char *)*((_QWORD *)this + 3);
    if (v6 >= 0)
      v8 = *((unsigned __int8 *)this + 47);
    else
      v8 = *((_QWORD *)this + 4);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" ", 1);
    kaldi::Timer::GetSeconds((kaldi::Timer *)5, v10);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" diff ", 6);
    kaldi::Timer::GetSeconds((kaldi::Timer *)5, v13);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v14);
    LOBYTE(v4) = *((_BYTE *)this + 47);
  }
  if ((v4 & 0x80) != 0)
    operator delete(*((void **)this + 3));
}

_QWORD *fst::SymbolTable::Read(_QWORD *a1)
{
  _QWORD *result;
  _QWORD *v2;

  result = (_QWORD *)fst::SymbolTableImpl::Read(a1);
  if (result)
  {
    v2 = result;
    result = (_QWORD *)operator new();
    *result = &off_1EA924678;
    result[1] = v2;
  }
  return result;
}

void fst::SymbolTableReadOptions::~SymbolTableReadOptions(void **this)
{
  void *v2;

  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  v2 = *this;
  if (*this)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

void kaldi::quasar::BPE::ProcessLine(uint64_t a1, uint64_t a2, float a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  const void **v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  kaldi::SplitStringToVector((const std::string *)a2, " ", 1, (uint64_t)&v12);
  if (v13 - (_QWORD)v12 == 48)
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, v12 + 3, (uint64_t)__p);
    v15 = __p;
    *((float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 24, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v15)+ 10) = a3;
    if (v11 < 0)
      operator delete(__p[0]);
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p, "ProcessLine", "../engine/common/libquasar/libkaldi/src/nnmt/bpe.h", 147);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Wrong number of fields, ignoring : ", 35);
    v7 = *(char *)(a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *(_QWORD *)a2;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 23);
    else
      v9 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  }
  __p[0] = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1DE4E404C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  __p = (void *)(v15 - 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::BPE::GetUniqueChars(kaldi::quasar::BPE *this)
{
  const std::string *v1;
  const std::string *i;
  const void **v4;
  const void **v5;
  const void **v6;
  const void **v7;
  uint64_t v8;
  std::string __p;
  const void ***v10;

  v1 = (const std::string *)*((_QWORD *)this + 8);
  for (i = (const std::string *)*((_QWORD *)this + 9); v1 != i; ++v1)
  {
    kaldi::quasar::BPE::StripSeparator((uint64_t)this, v1, &__p);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    kaldi::quasar::BPE::SplitUtfString((int)this, &__p, (uint64_t)&v6);
    v4 = v6;
    v5 = v7;
    while (v4 != v5)
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)this, v4, (uint64_t)v4);
      v4 += 3;
    }
    v10 = &v6;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1DE4E4154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19)
{
  a19 = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::quasar::BPE::UnkModeToString@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  _QWORD v3[34];

  if (a1 >= 5)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3, "UnkModeToString", "../engine/common/libquasar/libkaldi/src/nnmt/bpe.h", 116);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Unknown BPE unknown mode");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, off_1EA93BE78[a1]);
}

void std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void kaldi::quasar::BPE::StripSeparator(uint64_t a1@<X0>, const std::string *a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v5;
  std::string::size_type size;
  std::string::size_type v7;
  int v8;
  std::string::size_type v9;
  std::string::size_type v10;
  size_t v12;
  const std::string *v13;
  const void *v15;
  int v16;
  char v18;

  v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  size = a2->__r_.__value_.__l.__size_;
  if ((v5 & 0x80u) == 0)
    v7 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    v7 = a2->__r_.__value_.__l.__size_;
  v8 = *(char *)(a1 + 159);
  if (v8 >= 0)
    v9 = *(unsigned __int8 *)(a1 + 159);
  else
    v9 = *(_QWORD *)(a1 + 144);
  v10 = v7 - v9;
  if (v7 < v9)
    goto LABEL_34;
  if ((v5 & 0x80) != 0)
  {
    if (v9 == -1 || size < v10)
LABEL_39:
      std::string::__throw_out_of_range[abi:ne180100]();
    v12 = size - v10 >= v9 ? v9 : size - v10;
    v13 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v9 == -1 || v5 < v10)
      goto LABEL_39;
    v12 = v5 - v10 >= v9 ? v9 : v5 - v10;
    v13 = a2;
  }
  v15 = v8 >= 0 ? (const void *)(a1 + 136) : *(const void **)(a1 + 136);
  v16 = memcmp((char *)v13 + v10, v15, v12);
  if (v12 == v9 && v16 == 0)
  {
    std::string::basic_string(a3, a2, 0, v10, (std::allocator<char> *)&v18);
  }
  else
  {
LABEL_34:
    if ((v5 & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(a3, a2->__r_.__value_.__l.__data_, size);
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      a3->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
    }
  }
}

unint64_t kaldi::quasar::BPE::SplitUtfString(int a1, std::string *__str, uint64_t a3)
{
  std::string::size_type v4;
  BOOL v5;
  std::string::size_type size;
  std::string::size_type v7;
  std::string::size_type v9;
  std::string *v10;
  std::string::value_type v11;
  uint64_t v12;
  BOOL v13;
  std::string::size_type v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::string *v22;
  std::string *v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  std::string::size_type v27;
  std::string __p;
  std::__split_buffer<std::string> __v;

  v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v5 = (__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  size = __str->__r_.__value_.__l.__size_;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  else
    v7 = __str->__r_.__value_.__l.__size_;
  if (v7)
  {
    v9 = 0;
    do
    {
      v10 = (std::string *)__str->__r_.__value_.__r.__words[0];
      if (!v5)
        v10 = __str;
      v11 = v10->__r_.__value_.__s.__data_[v9];
      if ((v11 & 0xF8) == 0xF0)
      {
        v12 = 4;
      }
      else if ((v11 & 0xF0) == 0xE0)
      {
        v12 = 3;
      }
      else
      {
        v13 = (v11 & 0xE0) == 192;
        v12 = 1;
        if (v13)
          v12 = 2;
      }
      if (v5)
        v4 = size;
      if (v9 + v12 > v4)
        v14 = 1;
      else
        v14 = v12;
      std::string::basic_string(&__p, __str, v9, v14, (std::allocator<char> *)&__v);
      v16 = *(_QWORD *)(a3 + 8);
      v15 = *(_QWORD *)(a3 + 16);
      if (v16 >= v15)
      {
        v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(_QWORD *)a3) >> 3);
        v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(_QWORD *)a3) >> 3);
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x555555555555555)
          v21 = 0xAAAAAAAAAAAAAAALL;
        else
          v21 = v19;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
        if (v21)
          v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a3 + 16, v21);
        else
          v22 = 0;
        v23 = v22 + v18;
        __v.__first_ = v22;
        __v.__begin_ = v23;
        __v.__end_cap_.__value_ = &v22[v21];
        v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v23->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v23 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
        v25 = *(_QWORD *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v26 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(a3 + 8) = v25;
        if (v26 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v16 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v16 = v17;
        *(_QWORD *)(a3 + 8) = v16 + 24;
      }
      v9 += v14;
      v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      v5 = (__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      size = __str->__r_.__value_.__l.__size_;
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      else
        v27 = __str->__r_.__value_.__l.__size_;
    }
    while (v9 < v27);
  }
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
}

void sub_1DE4E45A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::__split_buffer<std::string> *a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1DE4E46D4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<kaldi::nnet1::Nnet>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<kaldi::nnet1::Nnet>>,0>(uint64_t a1)
{
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::map<std::string,double>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,double> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1DE4E4864(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,double> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__construct_node<std::pair<std::string const,double> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const void **std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  const void **v9;
  const void **v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t *v16;
  BOOL v17;
  const void **v18;

  v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2 || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }
    v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (const void **)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (const void **)v16[2];
        v17 = *v12 == v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5))
      goto LABEL_16;
    return (const void **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (const void **)a2[1];
      do
      {
        v15 = v14;
        v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = (const void **)a2;
      do
      {
        v15 = (const void **)v18[2];
        v17 = *v15 == v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4))
        return (const void **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

double std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__construct_node<std::pair<std::string const,double> const&>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  double result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  result = *(double *)(a2 + 24);
  *((double *)v6 + 7) = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1DE4E4B1C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<fst::MappedFile>::shared_ptr[abi:ne180100]<fst::MappedFile,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1EA936C30;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DE4E4B90(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<fst::MappedFile *,std::shared_ptr<fst::MappedFile>::__shared_ptr_default_delete<fst::MappedFile,fst::MappedFile>,std::allocator<fst::MappedFile>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_pointer<fst::MappedFile *,std::shared_ptr<fst::MappedFile>::__shared_ptr_default_delete<fst::MappedFile,fst::MappedFile>,std::allocator<fst::MappedFile>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<fst::MappedFile *,std::shared_ptr<fst::MappedFile>::__shared_ptr_default_delete<fst::MappedFile,fst::MappedFile>,std::allocator<fst::MappedFile>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(std::vector<std::string> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::vector<std::string>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](this, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)p_end_cap, (__int128 *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)p_end_cap, (__int128 *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_1DE4E4D94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1DE4E4D9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1DE4E4EC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_QWORD *std::shared_ptr<kaldi::nnet1::Nnet>::shared_ptr[abi:ne180100]<kaldi::nnet1::Nnet,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1EA936C68;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DE4E4F88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)va, 0);
  _Unwind_Resume(a1);
}

kaldi::nnet1::Nnet *std::__shared_ptr_pointer<kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::nnet1::Nnet>::__shared_ptr_default_delete<kaldi::nnet1::Nnet,kaldi::nnet1::Nnet>,std::allocator<kaldi::nnet1::Nnet>>::__on_zero_shared(uint64_t a1)
{
  kaldi::nnet1::Nnet *result;

  result = *(kaldi::nnet1::Nnet **)(a1 + 24);
  if (result)
  {
    kaldi::nnet1::Nnet::~Nnet(result);
    JUMPOUT(0x1DF0ED014);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::nnet1::Nnet>::__shared_ptr_default_delete<kaldi::nnet1::Nnet,kaldi::nnet1::Nnet>,std::allocator<kaldi::nnet1::Nnet>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1DE4E5134(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<kaldi::nnet1::Nnet>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<kaldi::nnet1::Nnet>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void kaldi::quasar::TorchEncoderDecoder::TorchEncoderDecoder(uint64_t a1, void **a2, void **a3, kaldi::quasar::BPE *this)
{
  char *v6;

  v6 = (char *)(a1 + 4471);
  if (*(char *)(a1 + 4495) < 0)
    operator delete(*a2);
  if (*v6 < 0)
    operator delete(*a3);
  kaldi::quasar::BPE::~BPE(this);
}

uint64_t kaldi::quasar::ToAddTag(uint64_t a1)
{
  int v2;
  uint64_t v7;
  int *v8;
  int v10;
  int v11;
  _QWORD v16[34];

  v2 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 == 5)
    {
      v8 = *(int **)a1;
      if (**(_DWORD **)a1 == 1768383810 && *(_BYTE *)(*(_QWORD *)a1 + 4) == 110)
        return 0;
      v10 = *v8;
      v11 = *((unsigned __int8 *)v8 + 4);
      if (v10 == 1768383842 && v11 == 110)
        return 0;
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (v7 == 3)
    {
      if (**(_WORD **)a1 == 28229 && *(_BYTE *)(*(_QWORD *)a1 + 2) == 100)
        return 1;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7 == 3)
      {
        if (**(_WORD **)a1 == 28261 && *(_BYTE *)(*(_QWORD *)a1 + 2) == 100)
          return 1;
        if ((v2 & 0x80) == 0)
          goto LABEL_53;
      }
    }
    if (v7 != 4)
      goto LABEL_54;
    if (**(_DWORD **)a1 != 1752461122)
    {
      v7 = *(_QWORD *)(a1 + 8);
      if (v7 != 4)
        goto LABEL_54;
      if (**(_DWORD **)a1 != 1752461154)
        goto LABEL_55;
    }
    return 2;
  }
  if (v2 != 3)
  {
    if (v2 != 4)
    {
      if (v2 != 5)
        goto LABEL_53;
      if ((*(_DWORD *)a1 != 1768383810 || *(_BYTE *)(a1 + 4) != 110)
        && (*(_DWORD *)a1 != 1768383842 || *(_BYTE *)(a1 + 4) != 110))
      {
        goto LABEL_53;
      }
      return 0;
    }
    if (*(_DWORD *)a1 != 1752461122 && *(_DWORD *)a1 != 1752461154)
    {
LABEL_53:
      v7 = *(unsigned __int8 *)(a1 + 23);
LABEL_54:
      if (!v7)
        return 3;
LABEL_55:
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a1, "None")
        && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a1, "none"))
      {
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16, "ToAddTag", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/input-hammer.cc", 20);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "Unknown AddTag format");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
      }
      return 3;
    }
    return 2;
  }
  if ((*(_WORD *)a1 != 28229 || *(_BYTE *)(a1 + 2) != 100) && (*(_WORD *)a1 != 28261 || *(_BYTE *)(a1 + 2) != 100))
    goto LABEL_53;
  return 1;
}

int *kaldi::quasar::FromAddTag@<X0>(int *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *result;
  if (v3 < 4)
    return (int *)MEMORY[0x1DF0ECA80](a2, off_1EA93BEA0[v3]);
  return result;
}

void sub_1DE4E549C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::ToTagFormat(_QWORD *a1)
{
  int v2;
  uint64_t v5;
  unsigned __int16 *v6;
  int v8;
  int v9;
  _QWORD *v20;
  _QWORD v21[34];

  v2 = *((unsigned __int8 *)a1 + 23);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (v2 != 3)
    {
      if (v2 != 9)
      {
        if (v2 != 12)
          goto LABEL_66;
        if ((*a1 != 0x6170655368746F62 || *((_DWORD *)a1 + 2) != 1702125938)
          && (*a1 != 0x6170657368746F62 || *((_DWORD *)a1 + 2) != 1702125938))
        {
          goto LABEL_66;
        }
        return 3;
      }
      if ((*a1 != 0x6E4F734168746F62 || *((_BYTE *)a1 + 8) != 101)
        && (*a1 != 0x6E6F736168746F62 || *((_BYTE *)a1 + 8) != 101))
      {
        goto LABEL_66;
      }
      return 2;
    }
    if (*(_WORD *)a1 != 29299 || *((_BYTE *)a1 + 2) != 99)
    {
      if (*(_WORD *)a1 != 24948 || *((_BYTE *)a1 + 2) != 114)
        goto LABEL_66;
      return 1;
    }
    return 0;
  }
  v5 = a1[1];
  if (v5 != 3)
  {
LABEL_25:
    if (v5 == 9)
    {
      if (*(_QWORD *)*a1 == 0x6E4F734168746F62 && *(_BYTE *)(*a1 + 8) == 101)
        return 2;
      v5 = a1[1];
      if (v5 == 9)
      {
        if (*(_QWORD *)*a1 == 0x6E6F736168746F62 && *(_BYTE *)(*a1 + 8) == 101)
          return 2;
        if ((v2 & 0x80) == 0)
        {
LABEL_66:
          v5 = *((unsigned __int8 *)a1 + 23);
LABEL_67:
          if (!v5)
            return 4;
LABEL_68:
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "None")
            && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "none"))
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21, "ToTagFormat", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/input-hammer.cc", 56);
            v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Unknown tag format ", 19);
            std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, (uint64_t)a1);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
          }
          return 4;
        }
      }
    }
    if (v5 != 12)
      goto LABEL_67;
    if (*(_QWORD *)*a1 != 0x6170655368746F62 || *(_DWORD *)(*a1 + 8) != 1702125938)
    {
      v5 = a1[1];
      if (v5 != 12)
        goto LABEL_67;
      if (*(_QWORD *)*a1 != 0x6170657368746F62 || *(_DWORD *)(*a1 + 8) != 1702125938)
        goto LABEL_68;
    }
    return 3;
  }
  v6 = (unsigned __int16 *)*a1;
  if (*(_WORD *)*a1 == 29299 && *(_BYTE *)(*a1 + 2) == 99)
    return 0;
  v8 = *v6;
  v9 = *((unsigned __int8 *)v6 + 2);
  if (v8 != 24948 || v9 != 114)
  {
    v5 = a1[1];
    goto LABEL_25;
  }
  return 1;
}

int *kaldi::quasar::FromTagFormat@<X0>(int *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *result;
  if (v3 < 5)
    return (int *)MEMORY[0x1DF0ECA80](a2, off_1EA93BEC0[v3]);
  return result;
}

void sub_1DE4E57FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::Encdec::ModelFileMap(kaldi::quasar::Encdec *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    v3[2] = 0;
    v3[1] = 0;
    *v3 = v3 + 1;
    kaldi::quasar::Encdec::ModelFileMap(void)::modelFileMap = (uint64_t)v3;
  }
  return kaldi::quasar::Encdec::ModelFileMap(void)::modelFileMap;
}

void sub_1DE4E5894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Encdec::ComputeEngineFileMap(kaldi::quasar::Encdec *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    v3[2] = 0;
    v3[1] = 0;
    *v3 = v3 + 1;
    kaldi::quasar::Encdec::ComputeEngineFileMap(void)::fileMap = (uint64_t)v3;
  }
  return kaldi::quasar::Encdec::ComputeEngineFileMap(void)::fileMap;
}

void sub_1DE4E5928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Encdec::Encdec(uint64_t a1, char *a2, char a3, char a4)
{
  std::__fs::filesystem::path *v7;
  std::__fs::filesystem::path *v8;
  __int128 v9;
  clockid_t v10;
  std::string v12;

  v7 = (std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v12, a2);
  v8 = std::__fs::filesystem::path::remove_filename[abi:ne180100](v7);
  if (SHIBYTE(v8->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a1, v8->__pn_.__r_.__value_.__l.__data_, v8->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    v9 = *(_OWORD *)&v8->__pn_.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)&v8->__pn_.__r_.__value_.__l + 2);
    *(_OWORD *)a1 = v9;
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_BYTE *)(a1 + 24) = a3;
  *(_BYTE *)(a1 + 25) = a4;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 248) = a1 + 256;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = a1 + 304;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = a1 + 352;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = a1 + 400;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 416) = a1 + 424;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v12, "UNK");
  kaldi::quasar::BPE::BPE(a1 + 472, 1, (__int128 *)&v12);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  *(_DWORD *)(a1 + 712) = 953267991;
  *(_QWORD *)(a1 + 716) = -1;
  *(_QWORD *)(a1 + 724) = -1;
  *(_QWORD *)(a1 + 732) = -1;
  *(_QWORD *)(a1 + 740) = 0x100000004;
  *(_BYTE *)(a1 + 748) = 0;
  *(_DWORD *)(a1 + 752) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_DWORD *)(a1 + 808) = 1024;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 816), "main_");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 840), "CPU");
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 924) = 0u;
  *(_OWORD *)(a1 + 940) = xmmword_1DEC3EAE0;
  *(_DWORD *)(a1 + 956) = 1;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 960));
  *(_DWORD *)(a1 + 1336) = 0;
  *(_DWORD *)(a1 + 1339) = 0;
  *(_QWORD *)(a1 + 1343) = 0x100000100000001;
  *(_WORD *)(a1 + 1351) = 256;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1456), "encoder_out");
  *(_QWORD *)(a1 + 1496) = 0;
  *(_OWORD *)(a1 + 1480) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1504), "log_softmax");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1528), "src_tokens");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1552), "prev_output_tokens");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1576), "positions");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1600), "input_mask");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1624), "position");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1648), &byte_1DEBD87CE);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1672), &byte_1DEBD87CE);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1696), &byte_1DEBD87CE);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1720), "embedding");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1744), &byte_1DEBD87CE);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1768), "readout_idx");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1792), "word_embedding");
  *(_QWORD *)(a1 + 1896) = 0;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1848) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_QWORD *)(a1 + 1904) = 1;
  *(_BYTE *)(a1 + 1912) = 1;
  *(_DWORD *)(a1 + 1932) = 0;
  *(_OWORD *)(a1 + 1916) = 0u;
  *(_QWORD *)(a1 + 1936) = 1;
  *(_DWORD *)(a1 + 1944) = 2;
  *(_WORD *)(a1 + 1948) = 0;
  *(_QWORD *)(a1 + 1952) = 0;
  *(_QWORD *)(a1 + 1968) = 0;
  *(_QWORD *)(a1 + 1960) = 0;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_QWORD *)(a1 + 1976) = &unk_1EA92DFA8;
  *(_BYTE *)(a1 + 2016) = 0;
  kaldi::quasar::Shortlist::Shortlist((kaldi::quasar::Shortlist *)(a1 + 2024));
  *(_QWORD *)(a1 + 2552) = 0;
  *(_BYTE *)(a1 + 2584) = 1;
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 2560), v10);
  *(_OWORD *)(a1 + 2656) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_OWORD *)(a1 + 2608) = 0u;
  *(_OWORD *)(a1 + 2592) = 0u;
  *(_OWORD *)(a1 + 2665) = 0u;
  *(_OWORD *)(a1 + 2688) = 0u;
  *(_OWORD *)(a1 + 2704) = 0u;
  *(_OWORD *)(a1 + 2720) = 0u;
  *(_OWORD *)(a1 + 2736) = 0u;
  *(_QWORD *)(a1 + 2752) = 0;
  *(_DWORD *)(a1 + 2760) = 512;
  *(_WORD *)(a1 + 2764) = 0;
  return a1;
}

void sub_1DE4E5D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,void **a22,uint64_t a23,kaldi::nnet1::Nnet *a24,void **a25,kaldi::quasar::BPE *a26)
{
  uint64_t v26;
  uint64_t v27;
  void **v28;
  void **v29;
  kaldi::quasar::Shortlist *v30;
  void **v31;
  void **v32;
  void **v33;
  void **v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;

  kaldi::quasar::Shortlist::~Shortlist(v30);
  kaldi::CuMatrix<float>::~CuMatrix(v26 + 1976);
  v36 = *(void **)(v26 + 1952);
  if (v36)
  {
    *(_QWORD *)(v26 + 1960) = v36;
    operator delete(v36);
  }
  *(_QWORD *)(v35 - 112) = v26 + 1864;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 112));
  *(_QWORD *)(v35 - 112) = v26 + 1840;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 112));
  *(_QWORD *)(v35 - 112) = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 112));
  if (*(char *)(v26 + 1815) < 0)
    operator delete(*v29);
  if (*(char *)(v26 + 1791) < 0)
    operator delete(*v28);
  if (*(char *)(v26 + 1767) < 0)
    operator delete(*v31);
  if (*(char *)(v26 + 1743) < 0)
    operator delete(*v34);
  if (*(char *)(v26 + 1719) < 0)
    operator delete(*v33);
  if (*(char *)(v26 + 1695) < 0)
    operator delete(*a11);
  if (*(char *)(v26 + 1671) < 0)
    operator delete(*a12);
  if (*(char *)(v26 + 1647) < 0)
    operator delete(*a13);
  if (*(char *)(v26 + 1623) < 0)
    operator delete(*a14);
  if (*(char *)(v26 + 1599) < 0)
    operator delete(*a15);
  if (*(char *)(v26 + 1575) < 0)
    operator delete(*a16);
  if (*(char *)(v26 + 1551) < 0)
    operator delete(*a17);
  if (*(char *)(v26 + 1527) < 0)
    operator delete(*a18);
  *(_QWORD *)(v35 - 112) = a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 112));
  if (*(char *)(v26 + 1479) < 0)
    operator delete(*a19);
  *(_QWORD *)(v35 - 112) = v26 + 1432;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 112));
  *(_QWORD *)(v35 - 112) = v26 + 1408;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 112));
  *(_QWORD *)(v35 - 112) = v26 + 1384;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 112));
  *(_QWORD *)(v35 - 112) = v26 + 1360;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 112));
  kaldi::nnet1::Nnet::~Nnet(a24);
  if (*(char *)(v26 + 935) < 0)
    operator delete(*(void **)(v26 + 912));
  if (*(char *)(v26 + 911) < 0)
    operator delete(*(void **)(v26 + 888));
  if (*(char *)(v26 + 887) < 0)
    operator delete(*a20);
  if (*(char *)(v26 + 863) < 0)
    operator delete(*a21);
  if (*(char *)(v26 + 839) < 0)
    operator delete(*a22);
  *(_QWORD *)(v35 - 112) = v26 + 784;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 112));
  v37 = *a25;
  if (*a25)
  {
    *(_QWORD *)(v26 + 768) = v37;
    operator delete(v37);
  }
  kaldi::quasar::BPE::~BPE(a26);
  v38 = *(_QWORD *)(v26 + 464);
  *(_QWORD *)(v26 + 464) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = *(_QWORD *)(v26 + 456);
  *(_QWORD *)(v26 + 456) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](*(_QWORD *)(v35 - 128));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v32 + 48), *(_QWORD **)(v26 + 424));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v32 + 45), *(_QWORD **)(v26 + 400));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v32 + 42), *(_QWORD **)(v26 + 376));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(v32 + 39), *(_QWORD **)(v26 + 352));
  *(_QWORD *)(v35 - 112) = v32 + 36;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 112));
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::destroy((uint64_t)(v32 + 33), *(_QWORD **)(v26 + 304));
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::destroy((uint64_t)(v32 + 30), *(_QWORD **)(v26 + 280));
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::destroy(*(_QWORD *)(v35 - 120), *(_QWORD **)(v26 + 256));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(v32 + 25));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(v32 + 23));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(v32 + 21));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(v32 + 19));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(v32 + 17));
  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)(v32 + 15));
  if (*(char *)(v26 + 151) < 0)
    operator delete(*(void **)(v26 + 128));
  if (*(char *)(v26 + 127) < 0)
    operator delete(*(void **)(v26 + 104));
  if (*(char *)(v26 + 103) < 0)
    operator delete(*(void **)(v26 + 80));
  if (*(char *)(v26 + 79) < 0)
    operator delete(*(void **)(v26 + 56));
  if (*(char *)(v26 + 55) < 0)
    operator delete(*v32);
  if (*(char *)(v26 + 23) < 0)
    operator delete(*(void **)v26);
  _Unwind_Resume(a1);
}

void sub_1DE4E617C()
{
  JUMPOUT(0x1DE4E5EA0);
}

void sub_1DE4E6184()
{
  JUMPOUT(0x1DE4E5EB4);
}

void sub_1DE4E618C()
{
  JUMPOUT(0x1DE4E5EC8);
}

void sub_1DE4E6194()
{
  JUMPOUT(0x1DE4E5EDCLL);
}

void sub_1DE4E619C()
{
  JUMPOUT(0x1DE4E5EF0);
}

void sub_1DE4E61A4()
{
  JUMPOUT(0x1DE4E5F04);
}

void sub_1DE4E61AC()
{
  JUMPOUT(0x1DE4E5F18);
}

void sub_1DE4E61B4()
{
  JUMPOUT(0x1DE4E5F3CLL);
}

void sub_1DE4E61BC()
{
  JUMPOUT(0x1DE4E5F84);
}

void sub_1DE4E61C4()
{
  JUMPOUT(0x1DE4E5FCCLL);
}

void sub_1DE4E61CC()
{
  JUMPOUT(0x1DE4E5FE0);
}

void sub_1DE4E61D4()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  JUMPOUT(0x1DE4E600CLL);
}

void sub_1DE4E61EC()
{
  JUMPOUT(0x1DE4E600CLL);
}

void sub_1DE4E61F4()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    JUMPOUT(0x1DE4E6170);
  JUMPOUT(0x1DE4E6174);
}

std::__fs::filesystem::path *std::__fs::filesystem::path::remove_filename[abi:ne180100](std::__fs::filesystem::path *a1)
{
  std::__fs::filesystem::path::__string_view v2;
  std::string::size_type v3;

  v2 = std::__fs::filesystem::path::__filename(a1);
  if (v2.__size_)
  {
    v3 = (std::string::size_type)a1;
    if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0)
      v3 = a1->__pn_.__r_.__value_.__r.__words[0];
    std::string::erase(&a1->__pn_, (std::string::size_type)&v2.__data_[-v3], 0xFFFFFFFFFFFFFFFFLL);
  }
  return a1;
}

void kaldi::quasar::Encdec::CreateEspressoModel(uint64_t a1@<X0>, char *a2@<X1>, int a3@<W2>, const std::string *a4@<X3>, uint64_t a5@<X8>)
{
  std::__fs::filesystem::path *v10;
  uint64_t **v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  kaldi::quasar::Encdec *v14;
  uint64_t v15;
  std::__shared_weak_count *size;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  std::__fs::filesystem::path __p[3];
  std::string v30[7];
  std::__fs::filesystem::path v31;
  std::string v32;
  std::string pn;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v32, (char *)a1);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v31.__pn_, a2);
  v10 = std::__fs::filesystem::operator/[abi:ne180100](&v31, (uint64_t)&v32, __p);
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&pn, __p[0].__pn_.__r_.__value_.__l.__data_, __p[0].__pn_.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
  }
  else
  {
    pn = __p[0].__pn_;
  }
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v11 = (uint64_t **)kaldi::quasar::Encdec::ComputeEngineFileMap((kaldi::quasar::Encdec *)v10);
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&pn;
  v12 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (const void **)&pn.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v32);
  *(_OWORD *)&__p[0].__pn_.__r_.__value_.__l.__data_ = 0uLL;
  v13 = (std::__shared_weak_count *)v12[8];
  if (v13)
  {
    __p[0].__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v13);
    if (__p[0].__pn_.__r_.__value_.__l.__size_)
      __p[0].__pn_.__r_.__value_.__r.__words[0] = v12[7];
  }
  v14 = (kaldi::quasar::Encdec *)std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a5, (__int128 *)__p);
  v15 = *(_QWORD *)v14;
  size = (std::__shared_weak_count *)__p[0].__pn_.__r_.__value_.__l.__size_;
  if (!__p[0].__pn_.__r_.__value_.__l.__size_)
    goto LABEL_16;
  v17 = (unint64_t *)(__p[0].__pn_.__r_.__value_.__l.__size_ + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if (v15)
      goto LABEL_25;
  }
  else
  {
LABEL_16:
    if (v15)
      goto LABEL_25;
  }
  if (a3 == 1)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "CreateEspressoModel", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 112);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"E5 not supported!", 17);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  kaldi::quasar::ESNetworkConfig::ESNetworkConfig(__p, &pn);
  std::string::operator=(v30, a4);
  std::allocate_shared[abi:ne180100]<kaldi::quasar::MTESNetworkPlan,std::allocator<kaldi::quasar::MTESNetworkPlan>,kaldi::quasar::ESNetworkConfig &,void>((kaldi::quasar::ESNetworkConfig *)__p, &v32);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a5, (__int128 *)&v32);
  v19 = (std::__shared_weak_count *)v32.__r_.__value_.__l.__size_;
  if (v32.__r_.__value_.__l.__size_)
  {
    v20 = (unint64_t *)(v32.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  kaldi::quasar::ESNetworkConfig::~ESNetworkConfig((void **)&__p[0].__pn_.__r_.__value_.__l.__data_);
LABEL_25:
  if (!*(_BYTE *)(a1 + 24))
    v14 = (kaldi::quasar::Encdec *)std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::push_back[abi:ne180100]((char **)(a1 + 320), (__int128 *)a5);
  if (*(_BYTE *)(a1 + 25))
  {
    v22 = (uint64_t **)kaldi::quasar::Encdec::ComputeEngineFileMap(v14);
    __p[0].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&pn;
    v23 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, (const void **)&pn.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
    v25 = *(_QWORD *)a5;
    v24 = *(_QWORD *)(a5 + 8);
    if (v24)
    {
      v26 = (unint64_t *)(v24 + 16);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v28 = (std::__shared_weak_count *)v23[8];
    v23[7] = v25;
    v23[8] = v24;
    if (v28)
      std::__shared_weak_count::__release_weak(v28);
  }
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
}

void sub_1DE4E6514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v14);
  if (*(char *)(v15 - 73) < 0)
    operator delete(*(void **)(v15 - 96));
  _Unwind_Resume(a1);
}

std::__fs::filesystem::path *std::__fs::filesystem::operator/[abi:ne180100]@<X0>(std::__fs::filesystem::path *this@<X1>, uint64_t a2@<X0>, std::__fs::filesystem::path *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&a3->__pn_, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__pn_.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  return std::__fs::filesystem::path::operator/=[abi:ne180100](a3, this);
}

void sub_1DE4E65F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

_QWORD *kaldi::quasar::ReadSymbolTable@<X0>(_QWORD *a1@<X0>, int a2@<W1>, const std::string *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  std::locale::id *v7;
  const std::locale::facet *v8;
  unsigned __int8 v9;
  _QWORD *v10;
  std::string *v11;
  std::string::size_type size;
  std::locale::__imp *locale;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  std::string *p_s1;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v23;
  BOOL v24;
  char v25;
  std::string *v26;
  std::string::size_type v27;
  _QWORD *v28;
  uint64_t v29;
  std::string __s1;
  char v32;
  std::string v33;
  std::locale v34[2];
  int64_t v35;
  _QWORD v36[2];
  _QWORD v37[11];
  char v38;
  uint64_t v39;

  if (a2)
  {
    result = fst::SymbolTable::Read(a1, a3);
    *a4 = result;
    return result;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v36);
  memset(&__s1, 0, sizeof(__s1));
  v7 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v8 = std::locale::use_facet(v34, v7);
    v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(v34);
    v10 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)&__s1, v9);
    if ((*((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 32) & 5) != 0)
      break;
    kaldi::Trim(&__s1);
    std::operator+<char>();
    v11 = std::string::append(&v33, ">");
    v35 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34[0].__locale_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else
      size = __s1.__r_.__value_.__l.__size_;
    locale = (std::locale::__imp *)HIBYTE(v35);
    v14 = SHIBYTE(v35);
    if (v35 < 0)
      locale = v34[1].__locale_;
    if ((std::locale::__imp *)size != locale)
    {
      v24 = 0;
      if ((SHIBYTE(v35) & 0x80000000) == 0)
        goto LABEL_23;
LABEL_34:
      operator delete(v34[0].__locale_);
      goto LABEL_23;
    }
    if (v35 >= 0)
      v15 = (unsigned __int8 *)v34;
    else
      v15 = (unsigned __int8 *)v34[0].__locale_;
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v24 = memcmp(__s1.__r_.__value_.__l.__data_, v15, __s1.__r_.__value_.__l.__size_) == 0;
      if (v14 < 0)
        goto LABEL_34;
    }
    else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
      v16 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
      p_s1 = &__s1;
      do
      {
        v19 = p_s1->__r_.__value_.__s.__data_[0];
        p_s1 = (std::string *)((char *)p_s1 + 1);
        v18 = v19;
        v21 = *v15++;
        v20 = v21;
        v23 = v16-- != 0;
        v24 = v18 == v20;
      }
      while (v18 == v20 && v23);
      if (SHIBYTE(v35) < 0)
        goto LABEL_34;
    }
    else
    {
      v24 = 1;
      if (SHIBYTE(v35) < 0)
        goto LABEL_34;
    }
LABEL_23:
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    v25 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if (v24)
      goto LABEL_40;
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &__s1;
    else
      v26 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else
      v27 = __s1.__r_.__value_.__l.__size_;
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v26, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\n", 1);
  }
  v25 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
LABEL_40:
  if (v25 < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)&__s1);
  *a4 = fst::SymbolTable::ReadText((uint64_t)v36);
  if (v32 < 0)
    operator delete((void *)__s1.__r_.__value_.__l.__size_);
  v36[0] = *MEMORY[0x1E0DE4F50];
  v29 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v36 + *(_QWORD *)(v36[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v37[0] = v29;
  v37[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v38 < 0)
    operator delete((void *)v37[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return (_QWORD *)MEMORY[0x1DF0ECF6C](&v39);
}

void sub_1DE4E6A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::locale a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a19 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Encdec::SetMappedFile(uint64_t a1, uint64_t *a2)
{
  _QWORD v2[35];

  if (*(_QWORD *)(a1 + 440))
  {
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v2, "SetMappedFile", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 162, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Nnet already mapped from a file - ignoring", 42);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v2);
    }
  }
  else
  {
    std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100]((_QWORD *)(a1 + 440), a2);
  }
}

void sub_1DE4E6B1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::Encdec::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  void **v12;
  BOOL v13;
  void *v14;
  BOOL v15;
  uint64_t v37;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *Text;
  uint64_t v47;
  _BOOL4 v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  _BOOL4 v53;
  uint64_t v54;
  const char *v55;
  char *v56;
  BOOL v57;
  uint64_t v58;
  BOOL v59;
  BOOL v60;
  BOOL v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  fst::SymbolTable *v67;
  uint64_t v68;
  unsigned int i;
  uint64_t v70;
  uint64_t Word;
  uint64_t v72;
  fst::SymbolTable *v73;
  uint64_t v74;
  unsigned int j;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  BOOL v81;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  const char *v94;
  std::__split_buffer<std::string>::pointer first;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  const char *v99;
  BOOL v100;
  BOOL v101;
  uint64_t v102;
  const char *v103;
  std::string::size_type size;
  const std::string *k;
  uint64_t v106;
  const char *v107;
  BOOL v108;
  BOOL v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  const char *v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  const char *v123;
  BOOL v124;
  BOOL v125;
  BOOL v126;
  BOOL v127;
  BOOL v128;
  BOOL v129;
  BOOL v130;
  uint64_t v131;
  const char *v132;
  uint64_t v133;
  const char *v134;
  uint64_t *v135;
  uint64_t v136;
  const char *v137;
  uint64_t *v138;
  BOOL v139;
  BOOL v140;
  BOOL v141;
  BOOL v142;
  uint64_t v143;
  const char *v144;
  uint64_t v145;
  const char *v146;
  BOOL v147;
  BOOL v148;
  BOOL v149;
  BOOL v150;
  BOOL v151;
  BOOL v152;
  BOOL v153;
  BOOL v154;
  BOOL v155;
  _QWORD *v156;
  void **v157;
  uint64_t v158;
  uint64_t v159;
  std::vector<std::string> *v161;
  std::string *v162;
  std::string *v163;
  uint64_t v164;
  std::string *v165;
  __int128 *v166;
  _QWORD *v167;
  unint64_t v168;
  unint64_t v169;
  __int128 *v170;
  __int128 *v171;
  __int128 v172;
  size_t v173;
  std::string *p_s;
  std::string *v175;
  unint64_t v176;
  unint64_t v177;
  __int128 v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  std::string *v183;
  std::string *v184;
  __int128 v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  _QWORD *v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  std::__shared_weak_count *begin;
  unint64_t *p_size;
  unint64_t v195;
  _QWORD *v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  _QWORD *v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  _QWORD *v210;
  char v211;
  uint64_t v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t *v217;
  _QWORD *v218;
  _QWORD *v219;
  _QWORD *v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  uint64_t *v225;
  _QWORD *v226;
  _QWORD *v227;
  _QWORD *v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  _QWORD *v231;
  void *v232;
  uint64_t v233;
  std::string::size_type v234;
  uint64_t v235;
  uint64_t **v236;
  uint64_t v238;
  uint64_t **v239;
  __int128 *v240;
  __int128 *v241;
  __int128 *v242;
  uint64_t **v243;
  char v244;
  std::string *v245;
  std::string *v246;
  char v247;
  std::string *__str;
  _DWORD *v249;
  _QWORD *v250;
  _BYTE v251[15];
  unsigned __int8 v252;
  std::string v253;
  char v254;
  void *v255;
  char v256;
  void *v257;
  char v258;
  uint64_t v259;
  uint64_t v260;
  void *v261;
  void *v262;
  std::string v263;
  std::string v264;
  std::string v265;
  std::__fs::filesystem::path v266;
  std::string exception_object;
  std::string __s;
  void *v269;
  uint64_t v270;
  uint64_t v271;
  void *v272[2];
  uint64_t v273;
  void *v274[2];
  uint64_t v275;
  void *v276[3];
  std::__split_buffer<std::string> __p[14];
  uint64_t v278;

  v247 = (char)a5;
  v278 = *MEMORY[0x1E0C80C00];
  memset(v276, 0, sizeof(v276));
  v274[1] = 0;
  v274[0] = 0;
  v275 = 0;
  v272[1] = 0;
  v272[0] = 0;
  v273 = 0;
  v270 = 0;
  v269 = 0;
  v271 = 0;
  *(_WORD *)(a1 + 1340) = 0;
  v8 = *(_QWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 456) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 464);
  *(_QWORD *)(a1 + 464) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v244 = 0;
  v235 = a1 + 2024;
  v236 = (uint64_t **)(a1 + 960);
  v242 = (__int128 *)(a1 + 1504);
  v240 = (__int128 *)(a1 + 1696);
  v241 = (__int128 *)(a1 + 1456);
  v238 = a1 + 472;
  v239 = (uint64_t **)(a1 + 392);
  v243 = (uint64_t **)(a1 + 344);
  v245 = (std::string *)(a1 + 888);
  v246 = (std::string *)(a1 + 864);
  __str = (std::string *)(a1 + 840);
  while ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) == 0)
  {
    kaldi::ReadToken(a2, a3, (uint64_t)v276, a4, a5);
    if ((SHIBYTE(v276[2]) & 0x80000000) == 0)
    {
      v12 = v276;
      switch(HIBYTE(v276[2]))
      {
        case 0xA:
LABEL_9:
          v13 = v276[0] == (void *)0x636F567475706E49 && LOWORD(v276[1]) == 25185;
          if (!v13)
            goto LABEL_200;
          goto LABEL_159;
        case 0xB:
LABEL_134:
          if (v276[0] != (void *)0x6F5674757074754FLL || *(void **)((char *)v276 + 3) != (void *)0x6261636F56747570)
            goto LABEL_200;
          goto LABEL_139;
        case 0xC:
          goto LABEL_196;
        case 0xE:
LABEL_141:
          if (v276[0] != (void *)0x6F73736572707345 || *(void **)((char *)v276 + 6) != (void *)0x656E69676E456F73)
            goto LABEL_145;
          goto LABEL_161;
        case 0x12:
LABEL_110:
          if (v276[0] != (void *)0x79537475706E493CLL
            || v276[1] != (void *)0x6C6261546C6F626DLL
            || LOWORD(v276[2]) != 15973)
          {
            v12 = v276;
            switch(HIBYTE(v276[2]))
            {
              case 0xA:
                goto LABEL_9;
              case 0xB:
                goto LABEL_134;
              case 0xC:
                goto LABEL_196;
              case 0xE:
                goto LABEL_141;
              default:
                goto LABEL_200;
            }
          }
          goto LABEL_120;
        case 0x13:
LABEL_126:
          if (v276[0] != (void *)0x5374757074754F3CLL
            || v276[1] != (void *)0x6261546C6F626D79
            || *(void **)((char *)&v276[1] + 3) != (void *)0x3E656C6261546C6FLL)
          {
            v12 = v276;
            switch(HIBYTE(v276[2]))
            {
              case 0xA:
                goto LABEL_9;
              case 0xB:
                goto LABEL_134;
              case 0xC:
                goto LABEL_196;
              case 0xE:
                goto LABEL_141;
              default:
                goto LABEL_200;
            }
          }
          goto LABEL_153;
        case 0x14:
          if (v276[0] != (void *)0x6D79537475706E49
            || v276[1] != (void *)0x656C6261546C6F62
            || LODWORD(v276[2]) != 1701603654)
          {
            goto LABEL_200;
          }
          goto LABEL_100;
        case 0x15:
          if (v276[0] != (void *)0x795374757074754FLL
            || v276[1] != (void *)0x6C6261546C6F626DLL
            || *(void **)((char *)&v276[1] + 5) != (void *)0x656C6946656C6261)
          {
            v12 = v276;
            switch(HIBYTE(v276[2]))
            {
              case 0xA:
                goto LABEL_9;
              case 0xB:
                goto LABEL_134;
              case 0xC:
                goto LABEL_196;
              case 0xE:
                goto LABEL_141;
              case 0x12:
                goto LABEL_110;
              case 0x13:
                goto LABEL_126;
              case 0x15:
                if (v276[0] == (void *)0x457265646F636E45
                  && v276[1] == (void *)0x456F737365727073
                  && *(void **)((char *)&v276[1] + 5) == (void *)0x656E69676E456F73)
                {
                  goto LABEL_296;
                }
                if (HIBYTE(v276[2]) == 12)
                  goto LABEL_152;
                if (HIBYTE(v276[2]) == 14)
                  goto LABEL_147;
                if (HIBYTE(v276[2]) != 21)
                  goto LABEL_200;
                v81 = v276[0] == (void *)0x457265646F636544 && v276[1] == (void *)0x456F737365727073;
                if (!v81 || *(void **)((char *)&v276[1] + 5) != (void *)0x656E69676E456F73)
                  goto LABEL_200;
                goto LABEL_294;
              default:
                goto LABEL_200;
            }
          }
          goto LABEL_118;
        default:
          goto LABEL_200;
      }
    }
    v14 = v276[1];
    if (v276[1] == (void *)20)
    {
      v15 = *(_QWORD *)v276[0] == 0x6D79537475706E49 && *((_QWORD *)v276[0] + 1) == 0x656C6261546C6F62;
      if (v15 && *((_DWORD *)v276[0] + 4) == 1701603654)
      {
LABEL_100:
        kaldi::ReadToken(a2, a3, (uint64_t)v274, v10, v11);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)a1);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v266.__pn_, (char *)v274);
        std::__fs::filesystem::operator/[abi:ne180100](&v266, (uint64_t)&exception_object, (std::__fs::filesystem::path *)&__s);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v253, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v253 = __s;
        fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)__p);
        Text = fst::SymbolTable::ReadText((uint64_t)&v253);
        v47 = *(_QWORD *)(a1 + 456);
        *(_QWORD *)(a1 + 456) = Text;
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
        if (SHIBYTE(__p[0].__end_cap_.__value_) < 0)
          operator delete(__p[0].__begin_);
        if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v253.__r_.__value_.__l.__data_);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (SHIBYTE(v266.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v266.__pn_.__r_.__value_.__l.__data_);
        if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0)
          operator delete(exception_object.__r_.__value_.__l.__data_);
        *(_DWORD *)(a1 + 716) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 456) + 104))(*(_QWORD *)(a1 + 456), "<s>");
        *(_DWORD *)(a1 + 720) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 456) + 104))(*(_QWORD *)(a1 + 456), "</s>");
        *(_DWORD *)(a1 + 724) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 456) + 104))(*(_QWORD *)(a1 + 456), "<unk>");
        if (kaldi::g_kaldi_verbose_level >= 2)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 248, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Input symbol table size ", 24);
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 456) + 120))(*(_QWORD *)(a1 + 456));
          std::ostream::operator<<();
          goto LABEL_193;
        }
        goto LABEL_320;
      }
    }
    if (v276[1] == (void *)21)
    {
      if (*(_QWORD *)v276[0] == 0x795374757074754FLL
        && *((_QWORD *)v276[0] + 1) == 0x6C6261546C6F626DLL
        && *(_QWORD *)((char *)v276[0] + 13) == 0x656C6946656C6261)
      {
LABEL_118:
        kaldi::ReadToken(a2, a3, (uint64_t)v272, v10, v11);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)a1);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v266.__pn_, (char *)v272);
        std::__fs::filesystem::operator/[abi:ne180100](&v266, (uint64_t)&exception_object, (std::__fs::filesystem::path *)&__s);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v253, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v253 = __s;
        fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)__p);
        v44 = fst::SymbolTable::ReadText((uint64_t)&v253);
        v45 = *(_QWORD *)(a1 + 464);
        *(_QWORD *)(a1 + 464) = v44;
        if (v45)
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
        if (SHIBYTE(__p[0].__end_cap_.__value_) < 0)
          operator delete(__p[0].__begin_);
        if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v253.__r_.__value_.__l.__data_);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (SHIBYTE(v266.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v266.__pn_.__r_.__value_.__l.__data_);
        if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0)
          operator delete(exception_object.__r_.__value_.__l.__data_);
        *(_DWORD *)(a1 + 728) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 464) + 104))(*(_QWORD *)(a1 + 464), "<s>");
        *(_DWORD *)(a1 + 732) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 464) + 104))(*(_QWORD *)(a1 + 464), "</s>");
        *(_DWORD *)(a1 + 736) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 464) + 104))(*(_QWORD *)(a1 + 464), "<unk>");
        if (kaldi::g_kaldi_verbose_level >= 2)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 255, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Output symbol table size ", 25);
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 464) + 120))(*(_QWORD *)(a1 + 464));
          std::ostream::operator<<();
          goto LABEL_193;
        }
        goto LABEL_320;
      }
      v14 = v276[1];
    }
    if (v14 == (void *)18)
    {
      if (*(_QWORD *)v276[0] == 0x79537475706E493CLL
        && *((_QWORD *)v276[0] + 1) == 0x6C6261546C6F626DLL
        && *((_WORD *)v276[0] + 8) == 15973)
      {
LABEL_120:
        std::string::basic_string[abi:ne180100]<0>(__p, "InputSymbolTable");
        kaldi::quasar::ReadSymbolTable(a2, a3, (const std::string *)__p, &v253);
        v37 = *(_QWORD *)(a1 + 456);
        *(_QWORD *)(a1 + 456) = v253.__r_.__value_.__r.__words[0];
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        *(_DWORD *)(a1 + 716) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 456) + 104))(*(_QWORD *)(a1 + 456), "<s>");
        *(_DWORD *)(a1 + 720) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 456) + 104))(*(_QWORD *)(a1 + 456), "</s>");
        *(_DWORD *)(a1 + 724) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 456) + 104))(*(_QWORD *)(a1 + 456), "<unk>");
        if (kaldi::g_kaldi_verbose_level >= 2)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 261, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Input symbol table size ", 24);
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 456) + 120))(*(_QWORD *)(a1 + 456));
          std::ostream::operator<<();
LABEL_193:
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
          goto LABEL_320;
        }
        goto LABEL_320;
      }
      v14 = v276[1];
    }
    if (v14 == (void *)19)
    {
      if (*(_QWORD *)v276[0] == 0x5374757074754F3CLL
        && *((_QWORD *)v276[0] + 1) == 0x6261546C6F626D79
        && *(_QWORD *)((char *)v276[0] + 11) == 0x3E656C6261546C6FLL)
      {
LABEL_153:
        std::string::basic_string[abi:ne180100]<0>(__p, "OutputSymbolTable");
        kaldi::quasar::ReadSymbolTable(a2, a3, (const std::string *)__p, &v253);
        v43 = *(_QWORD *)(a1 + 464);
        *(_QWORD *)(a1 + 464) = v253.__r_.__value_.__r.__words[0];
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        *(_DWORD *)(a1 + 728) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 464) + 104))(*(_QWORD *)(a1 + 464), "<s>");
        *(_DWORD *)(a1 + 732) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 464) + 104))(*(_QWORD *)(a1 + 464), "</s>");
        *(_DWORD *)(a1 + 736) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 464) + 104))(*(_QWORD *)(a1 + 464), "<unk>");
        if (kaldi::g_kaldi_verbose_level >= 2)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 267, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Output symbol table size ", 25);
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 464) + 120))(*(_QWORD *)(a1 + 464));
          std::ostream::operator<<();
          goto LABEL_193;
        }
        goto LABEL_320;
      }
      v14 = v276[1];
    }
    if (v14 == (void *)10)
    {
      if (*(_QWORD *)v276[0] == 0x636F567475706E49 && *((_WORD *)v276[0] + 4) == 25185)
      {
LABEL_159:
        kaldi::ReadToken(a2, a3, (uint64_t)v274, v10, v11);
        v251[0] = 0;
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__s, (char *)a1);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)v274);
        std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&exception_object, (uint64_t)&__s, (std::__fs::filesystem::path *)&v253);
        if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&__p[0].__first_ = *(_OWORD *)&v253.__r_.__value_.__l.__data_;
          __p[0].__end_ = (std::__split_buffer<std::string>::pointer)v253.__r_.__value_.__r.__words[2];
        }
        kaldi::Input::Input(&v266, __p, v251);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v253.__r_.__value_.__l.__data_);
        if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0)
          operator delete(exception_object.__r_.__value_.__l.__data_);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        v66 = kaldi::Input::Stream((kaldi::Input *)&v266);
        kaldi::quasar::Vocab::Vocab(&v253, v66, v251[0], 1);
        v67 = (fst::SymbolTable *)operator new();
        fst::SymbolTable::SymbolTable(v67);
        v68 = *(_QWORD *)(a1 + 456);
        *(_QWORD *)(a1 + 456) = v67;
        if (v68)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
          v67 = *(fst::SymbolTable **)(a1 + 456);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "<eps>");
        (*(void (**)(fst::SymbolTable *, std::__split_buffer<std::string> *))(*(_QWORD *)v67 + 32))(v67, __p);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        for (i = 0; i != kaldi::QuantizedMatrixBase<short>::NumRows((unsigned int *)&v253); ++i)
        {
          v70 = *(_QWORD *)(a1 + 456);
          Word = kaldi::quasar::Vocab::GetWord((kaldi::quasar::Vocab *)&v253, i);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 32))(v70, Word);
        }
        kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)&v253, (std::string *)__p);
        *(_DWORD *)(a1 + 724) = kaldi::quasar::Vocab::GetWordId((uint64_t)&v253, (unsigned __int8 *)__p) + 1;
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        kaldi::quasar::Vocab::BosWord((kaldi::quasar::Vocab *)&v253, (std::string *)__p);
        *(_DWORD *)(a1 + 716) = kaldi::quasar::Vocab::GetWordId((uint64_t)&v253, (unsigned __int8 *)__p) + 1;
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        kaldi::quasar::Vocab::EosWord((kaldi::quasar::Vocab *)&v253, (std::string *)__p);
        *(_DWORD *)(a1 + 720) = kaldi::quasar::Vocab::GetWordId((uint64_t)&v253, (unsigned __int8 *)__p) + 1;
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        if (kaldi::g_kaldi_verbose_level >= 2)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 279, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Input vocab size ", 17);
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 456) + 120))(*(_QWORD *)(a1 + 456));
          std::ostream::operator<<();
          goto LABEL_259;
        }
LABEL_260:
        if (v261)
        {
          v262 = v261;
          operator delete(v261);
        }
        __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v260;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)&v259);
        if (v258 < 0)
          operator delete(v257);
        if (v256 < 0)
          operator delete(v255);
        if (v254 < 0)
          operator delete((void *)v253.__r_.__value_.__l.__size_);
        kaldi::Input::~Input((kaldi::Input *)&v266);
        goto LABEL_320;
      }
      v14 = v276[1];
    }
    if (v14 == (void *)11)
    {
      if (*(_QWORD *)v276[0] == 0x6F5674757074754FLL && *(_QWORD *)((char *)v276[0] + 3) == 0x6261636F56747570)
      {
LABEL_139:
        kaldi::ReadToken(a2, a3, (uint64_t)v272, v10, v11);
        v251[0] = 0;
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__s, (char *)a1);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)v272);
        std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&exception_object, (uint64_t)&__s, (std::__fs::filesystem::path *)&v253);
        if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&__p[0].__first_ = *(_OWORD *)&v253.__r_.__value_.__l.__data_;
          __p[0].__end_ = (std::__split_buffer<std::string>::pointer)v253.__r_.__value_.__r.__words[2];
        }
        kaldi::Input::Input(&v266, __p, v251);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v253.__r_.__value_.__l.__data_);
        if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0)
          operator delete(exception_object.__r_.__value_.__l.__data_);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        v72 = kaldi::Input::Stream((kaldi::Input *)&v266);
        kaldi::quasar::Vocab::Vocab(&v253, v72, v251[0], 1);
        v73 = (fst::SymbolTable *)operator new();
        fst::SymbolTable::SymbolTable(v73);
        v74 = *(_QWORD *)(a1 + 464);
        *(_QWORD *)(a1 + 464) = v73;
        if (v74)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
          v73 = *(fst::SymbolTable **)(a1 + 464);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "<eps>");
        (*(void (**)(fst::SymbolTable *, std::__split_buffer<std::string> *))(*(_QWORD *)v73 + 32))(v73, __p);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        for (j = 0; j != kaldi::QuantizedMatrixBase<short>::NumRows((unsigned int *)&v253); ++j)
        {
          v76 = *(_QWORD *)(a1 + 464);
          v77 = kaldi::quasar::Vocab::GetWord((kaldi::quasar::Vocab *)&v253, j);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v76 + 32))(v76, v77);
        }
        kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)&v253, (std::string *)__p);
        *(_DWORD *)(a1 + 736) = kaldi::quasar::Vocab::GetWordId((uint64_t)&v253, (unsigned __int8 *)__p) + 1;
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        kaldi::quasar::Vocab::BosWord((kaldi::quasar::Vocab *)&v253, (std::string *)__p);
        *(_DWORD *)(a1 + 728) = kaldi::quasar::Vocab::GetWordId((uint64_t)&v253, (unsigned __int8 *)__p) + 1;
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        kaldi::quasar::Vocab::EosWord((kaldi::quasar::Vocab *)&v253, (std::string *)__p);
        *(_DWORD *)(a1 + 732) = kaldi::quasar::Vocab::GetWordId((uint64_t)&v253, (unsigned __int8 *)__p) + 1;
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        if (kaldi::g_kaldi_verbose_level >= 2)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 291, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Output vocab size ", 18);
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 464) + 120))(*(_QWORD *)(a1 + 464));
          std::ostream::operator<<();
LABEL_259:
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
        }
        goto LABEL_260;
      }
      v14 = v276[1];
    }
    if (v14 == (void *)14)
    {
      if (*(_QWORD *)v276[0] == 0x6F73736572707345 && *(_QWORD *)((char *)v276[0] + 6) == 0x656E69676E456F73)
      {
LABEL_161:
        memset(&v253, 0, sizeof(v253));
        kaldi::ReadToken(a2, a3, (uint64_t)&v253, v10, v11);
        if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v265, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
        else
          v265 = v253;
        kaldi::quasar::Encdec::ParseEnginePlatform((uint64_t)&v265, (uint64_t *)__p);
        *(_QWORD *)(a1 + 936) = __p[0].__first_;
        if (*(char *)(a1 + 863) < 0)
          operator delete(__str->__r_.__value_.__l.__data_);
        *(_OWORD *)&__str->__r_.__value_.__l.__data_ = *(_OWORD *)&__p[0].__begin_;
        *(_QWORD *)(a1 + 856) = __p[0].__end_cap_.__value_;
        HIBYTE(__p[0].__end_cap_.__value_) = 0;
        LOBYTE(__p[0].__begin_) = 0;
        if (SHIBYTE(v265.__r_.__value_.__r.__words[2]) < 0)
        {
          v78 = (void *)v265.__r_.__value_.__r.__words[0];
          goto LABEL_316;
        }
        goto LABEL_317;
      }
      v14 = v276[1];
    }
    if (v14 != (void *)21)
      goto LABEL_85;
    if (*(_QWORD *)v276[0] == 0x457265646F636E45
      && *((_QWORD *)v276[0] + 1) == 0x456F737365727073
      && *(_QWORD *)((char *)v276[0] + 13) == 0x656E69676E456F73)
    {
LABEL_296:
      memset(&v253, 0, sizeof(v253));
      kaldi::ReadToken(a2, a3, (uint64_t)&v253, v10, v11);
      if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v264, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
      else
        v264 = v253;
      kaldi::quasar::Encdec::ParseEnginePlatform((uint64_t)&v264, (uint64_t *)__p);
      *(_QWORD *)(a1 + 944) = __p[0].__first_;
      if (*(char *)(a1 + 887) < 0)
        operator delete(v246->__r_.__value_.__l.__data_);
      *(_OWORD *)&v246->__r_.__value_.__l.__data_ = *(_OWORD *)&__p[0].__begin_;
      *(_QWORD *)(a1 + 880) = __p[0].__end_cap_.__value_;
      HIBYTE(__p[0].__end_cap_.__value_) = 0;
      LOBYTE(__p[0].__begin_) = 0;
      if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
      {
        v78 = (void *)v264.__r_.__value_.__r.__words[0];
        goto LABEL_316;
      }
      goto LABEL_317;
    }
    v14 = v276[1];
    if (v276[1] != (void *)21)
      goto LABEL_85;
    if (*(_QWORD *)v276[0] == 0x457265646F636544
      && *((_QWORD *)v276[0] + 1) == 0x456F737365727073
      && *(_QWORD *)((char *)v276[0] + 13) == 0x656E69676E456F73)
    {
LABEL_294:
      memset(&v253, 0, sizeof(v253));
      kaldi::ReadToken(a2, a3, (uint64_t)&v253, v10, v11);
      if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v263, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
      else
        v263 = v253;
      kaldi::quasar::Encdec::ParseEnginePlatform((uint64_t)&v263, (uint64_t *)__p);
      *(_QWORD *)(a1 + 952) = __p[0].__first_;
      if (*(char *)(a1 + 911) < 0)
        operator delete(v245->__r_.__value_.__l.__data_);
      *(_OWORD *)&v245->__r_.__value_.__l.__data_ = *(_OWORD *)&__p[0].__begin_;
      *(_QWORD *)(a1 + 904) = __p[0].__end_cap_.__value_;
      HIBYTE(__p[0].__end_cap_.__value_) = 0;
      LOBYTE(__p[0].__begin_) = 0;
      if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0)
      {
        v78 = (void *)v263.__r_.__value_.__r.__words[0];
        goto LABEL_316;
      }
LABEL_317:
      if ((SHIBYTE(v253.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_320;
      first = (std::__split_buffer<std::string>::pointer)v253.__r_.__value_.__r.__words[0];
LABEL_319:
      operator delete(first);
      goto LABEL_320;
    }
    if ((HIBYTE(v276[2]) & 0x80) != 0)
    {
LABEL_85:
      if (v14 == (void *)14)
      {
        if (*(_QWORD *)v276[0] == 0x6E69646465626D45 && *(_QWORD *)((char *)v276[0] + 6) == 0x6870617247676E69)
        {
LABEL_274:
          *(_BYTE *)(a1 + 1341) = 1;
          v58 = a1 + 56;
          goto LABEL_275;
        }
        v14 = v276[1];
      }
      if (v14 != (void *)12)
        goto LABEL_200;
      v12 = (void **)v276[0];
      goto LABEL_196;
    }
LABEL_145:
    if (HIBYTE(v276[2]) == 12)
    {
LABEL_152:
      v12 = v276;
LABEL_196:
      if (*v12 == (void *)0x4774756F64616552 && *((_DWORD *)v12 + 2) == 1752195442)
      {
        *(_BYTE *)(a1 + 1340) = 1;
        v58 = a1 + 128;
LABEL_275:
        kaldi::ReadToken(a2, a3, v58, v10, v11);
        goto LABEL_320;
      }
      goto LABEL_200;
    }
    if (HIBYTE(v276[2]) == 14)
    {
LABEL_147:
      if (v276[0] == (void *)0x6E69646465626D45 && *(void **)((char *)v276 + 6) == (void *)0x6870617247676E69)
        goto LABEL_274;
    }
LABEL_200:
    v49 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "ReadoutStartIdx");
    v52 = a1 + 1908;
    if (v49)
      goto LABEL_201;
    v53 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "ReadoutWithSoftmax");
    v56 = (char *)(a1 + 1912);
    if (v53)
      goto LABEL_203;
    v57 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "ReadoutInputStr");
    v58 = a1 + 1768;
    if (v57)
      goto LABEL_275;
    v59 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "ReadoutOutputStr");
    v58 = a1 + 1792;
    if (v59)
      goto LABEL_275;
    v60 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "EncoderGraph");
    v58 = a1 + 80;
    if (v60)
      goto LABEL_275;
    v61 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "DecoderGraph");
    v58 = a1 + 104;
    if (v61)
      goto LABEL_275;
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "DecoderLangGraph"))
    {
      memset(&v253, 0, sizeof(v253));
      memset(&__s, 0, sizeof(__s));
      kaldi::ReadToken(a2, a3, (uint64_t)&v253, v62, v63);
      kaldi::ReadToken(a2, a3, (uint64_t)&__s, v64, v65);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)__p, (__int128 *)&v253, (__int128 *)&__s);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(v243, (const void **)&__p[0].__first_, (uint64_t)__p);
      goto LABEL_314;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "HandoverLangGraph"))
    {
      memset(&v253, 0, sizeof(v253));
      memset(&__s, 0, sizeof(__s));
      kaldi::ReadToken(a2, a3, (uint64_t)&v253, v83, v84);
      kaldi::ReadToken(a2, a3, (uint64_t)&__s, v85, v86);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)__p, (__int128 *)&v253, (__int128 *)&__s);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)(a1 + 368), (const void **)&__p[0].__first_, (uint64_t)__p);
      goto LABEL_314;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "InputLangGraph"))
    {
      memset(&v253, 0, sizeof(v253));
      memset(&__s, 0, sizeof(__s));
      kaldi::ReadToken(a2, a3, (uint64_t)&v253, v87, v88);
      kaldi::ReadToken(a2, a3, (uint64_t)&__s, v89, v90);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)__p, (__int128 *)&v253, (__int128 *)&__s);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(v239, (const void **)&__p[0].__first_, (uint64_t)__p);
      goto LABEL_314;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "EncoderLangFunc"))
    {
      memset(&v253, 0, sizeof(v253));
      memset(&__s, 0, sizeof(__s));
      kaldi::ReadToken(a2, a3, (uint64_t)&v253, v91, v92);
      kaldi::ReadToken(a2, a3, (uint64_t)&__s, v93, v94);
      std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)__p, (__int128 *)&v253, (__int128 *)&__s);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)(a1 + 416), (const void **)&__p[0].__first_, (uint64_t)__p);
LABEL_314:
      std::pair<std::string,std::string>::~pair((uint64_t)__p);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      {
        v78 = (void *)__s.__r_.__value_.__r.__words[0];
LABEL_316:
        operator delete(v78);
      }
      goto LABEL_317;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "Mmap"))
    {
      LOBYTE(__p[0].__first_) = 0;
      kaldi::ReadBasicType<BOOL>(a2, a3, (char *)__p, v96, v97);
      goto LABEL_320;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "AddSrcBos"))
    {
      kaldi::ReadBasicType<BOOL>(a2, a3, (char *)(a1 + 1343), v98, v99);
      v244 = 1;
      goto LABEL_320;
    }
    v100 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "AddSrcEos");
    v56 = (char *)(a1 + 1344);
    if (v100)
      goto LABEL_203;
    v101 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "PadSrc");
    v52 = a1 + 752;
    if (v101)
      goto LABEL_201;
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "PadSrcConfigs"))
    {
      memset(__p, 0, 24);
      memset(&v253, 0, sizeof(v253));
      kaldi::ReadToken(a2, a3, (uint64_t)__p, v102, v103);
      kaldi::SplitStringToVector((const std::string *)__p, ",", 1, (uint64_t)&v253);
      size = v253.__r_.__value_.__l.__size_;
      v234 = v253.__r_.__value_.__l.__size_;
      for (k = (const std::string *)v253.__r_.__value_.__r.__words[0]; k != (const std::string *)size; ++k)
      {
        LODWORD(__s.__r_.__value_.__l.__data_) = std::stoi(k, 0, 10);
        std::vector<int>::push_back[abi:ne180100](a1 + 760, &__s);
        size = v234;
      }
      __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&v253;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
    }
    else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "ConfigNames"))
    {
      memset(__p, 0, 24);
      kaldi::ReadToken(a2, a3, (uint64_t)__p, v106, v107);
      kaldi::SplitStringToVector((const std::string *)__p, ",", 1, a1 + 784);
    }
    else
    {
      v108 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "MaxSrcTokens");
      v52 = a1 + 808;
      if (v108)
        goto LABEL_201;
      v109 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "Reverse");
      v56 = (char *)(a1 + 1336);
      if (v109)
        goto LABEL_203;
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "IsRNN"))
      {
        v253.__r_.__value_.__s.__data_[0] = 0;
        kaldi::ReadBasicType<BOOL>(a2, a3, (char *)&v253, v110, v111);
        if (v253.__r_.__value_.__s.__data_[0])
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 371);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unsupported MT Espresso model type.", 35);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_320;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "UseAttention"))
      {
        v253.__r_.__value_.__s.__data_[0] = 0;
        kaldi::ReadBasicType<BOOL>(a2, a3, (char *)&v253, v112, v113);
        if (v253.__r_.__value_.__s.__data_[0])
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 375);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unsupported MT Espresso model type.", 35);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_320;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "UseTopK"))
      {
        v253.__r_.__value_.__s.__data_[0] = 0;
        kaldi::ReadBasicType<BOOL>(a2, a3, (char *)&v253, v114, v115);
        if (v253.__r_.__value_.__s.__data_[0])
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 379);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unsupported MT Espresso model type.", 35);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        goto LABEL_320;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "ModelBatchSize"))
      {
        kaldi::ReadBasicType<int>(a2, a3, a1 + 744, v116, v117);
        *(_BYTE *)(a1 + 748) = 1;
        goto LABEL_320;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "BPEEncoder"))
      {
        kaldi::ReadToken(a2, a3, (uint64_t)&v269, v118, v119);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)a1);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v266.__pn_, (char *)&v269);
        std::__fs::filesystem::operator/[abi:ne180100](&v266, (uint64_t)&exception_object, (std::__fs::filesystem::path *)&__s);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v253, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v253 = __s;
        std::ifstream::basic_ifstream(__p);
        if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v253.__r_.__value_.__l.__data_);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (SHIBYTE(v266.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v266.__pn_.__r_.__value_.__l.__data_);
        if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0)
          operator delete(exception_object.__r_.__value_.__l.__data_);
        if ((kaldi::quasar::BPE::Read(v238, (uint64_t *)__p, 1) & 1) == 0)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v253, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 387);
          v231 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v253, (uint64_t)"Failed to read BPE model from : ", 32);
          if (v271 >= 0)
            v232 = &v269;
          else
            v232 = v269;
          if (v271 >= 0)
            v233 = HIBYTE(v271);
          else
            v233 = v270;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v231, (uint64_t)v232, v233);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v253);
        }
        *(_BYTE *)(a1 + 1337) = 1;
        std::ifstream::~ifstream(__p);
        goto LABEL_320;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "<BPE>"))
      {
        if ((kaldi::quasar::BPE::Read(v238, a2, a3) & 1) == 0)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 392);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to read embedded BPE model", 33);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        if (kaldi::g_kaldi_verbose_level >= 2)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 394, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"BPE read - entries: ", 20);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
        }
        *(_BYTE *)(a1 + 1337) = 1;
        goto LABEL_320;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "AddTag"))
      {
        kaldi::ReadToken(a2, a3, a1 + 2688, v120, v121);
LABEL_372:
        *(_BYTE *)(a1 + 2680) = 1;
        goto LABEL_320;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "TagFormat"))
      {
        kaldi::ReadToken(a2, a3, a1 + 2712, v122, v123);
        goto LABEL_372;
      }
      v124 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "IsEspresso");
      v56 = (char *)(a1 + 1345);
      if (v124)
        goto LABEL_203;
      v125 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "SourceInputStr");
      v58 = a1 + 1528;
      if (v125)
        goto LABEL_275;
      v126 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "TargetInputStr");
      v58 = a1 + 1552;
      if (v126)
        goto LABEL_275;
      v127 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "EncoderValuesStr");
      v58 = a1 + 1456;
      if (v127)
        goto LABEL_275;
      v128 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "InputNetValuesStr");
      v58 = a1 + 1744;
      if (v128)
        goto LABEL_275;
      v129 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "ScoresStr");
      v58 = a1 + 1504;
      if (v129)
        goto LABEL_275;
      v130 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "ShortlistStr");
      v58 = a1 + 1672;
      if (v130)
        goto LABEL_275;
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "ShortlistFile"))
      {
        memset(&v253, 0, sizeof(v253));
        kaldi::ReadToken(a2, a3, (uint64_t)&v253, v131, v132);
        v252 = 0;
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)a1);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v266.__pn_, (char *)&v253);
        std::__fs::filesystem::operator/[abi:ne180100](&v266, (uint64_t)&exception_object, (std::__fs::filesystem::path *)&__s);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&__p[0].__first_ = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
          __p[0].__end_ = (std::__split_buffer<std::string>::pointer)__s.__r_.__value_.__r.__words[2];
        }
        kaldi::Input::Input(v251, __p, &v252);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (SHIBYTE(v266.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v266.__pn_.__r_.__value_.__l.__data_);
        if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0)
          operator delete(exception_object.__r_.__value_.__l.__data_);
        if (kaldi::g_kaldi_verbose_level >= 2)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 421, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loading Shortlist file...", 25);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
        }
        v135 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v251);
        kaldi::quasar::Shortlist::Read(v235, v135, v252, 0);
        *(_BYTE *)(a1 + 1338) = 1;
LABEL_402:
        kaldi::Input::~Input((kaldi::Input *)v251);
        goto LABEL_317;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "<Shortlist>"))
      {
        if (kaldi::g_kaldi_verbose_level >= 2)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 425, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reading Shortlist...", 20);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
        }
        kaldi::quasar::Shortlist::Read(v235, a2, a3, a4);
        *(_BYTE *)(a1 + 1338) = 1;
        goto LABEL_320;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "ReadoutNnetFile"))
      {
        memset(&v253, 0, sizeof(v253));
        kaldi::ReadToken(a2, a3, (uint64_t)&v253, v133, v134);
        v252 = 0;
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&exception_object, (char *)a1);
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v266.__pn_, (char *)&v253);
        std::__fs::filesystem::operator/[abi:ne180100](&v266, (uint64_t)&exception_object, (std::__fs::filesystem::path *)&__s);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&__p[0].__first_ = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
          __p[0].__end_ = (std::__split_buffer<std::string>::pointer)__s.__r_.__value_.__r.__words[2];
        }
        kaldi::Input::Input(v251, __p, &v252);
        if (SHIBYTE(__p[0].__end_) < 0)
          operator delete(__p[0].__first_);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (SHIBYTE(v266.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v266.__pn_.__r_.__value_.__l.__data_);
        if (SHIBYTE(exception_object.__r_.__value_.__r.__words[2]) < 0)
          operator delete(exception_object.__r_.__value_.__l.__data_);
        if (kaldi::g_kaldi_verbose_level >= 2)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 433, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loading readout Nnet file...", 28);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
        }
        v138 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v251);
        kaldi::nnet1::Nnet::Read(v236, v138, v252, 0);
        *(_BYTE *)(a1 + 1339) = 1;
        goto LABEL_402;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "<ReadoutNnet>"))
      {
        if (kaldi::g_kaldi_verbose_level >= 2)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 437, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reading readout Nnet...", 23);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
        }
        kaldi::nnet1::Nnet::Read(v236, a2, a3, a4);
        *(_BYTE *)(a1 + 1339) = 1;
        goto LABEL_320;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "AlignmentLayerStr"))
      {
        kaldi::ReadToken(a2, a3, (uint64_t)v240, v136, v137);
        *(_BYTE *)(a1 + 1948) = 1;
        goto LABEL_320;
      }
      v139 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "AlignmentHeads");
      v52 = a1 + 1936;
      if (v139)
        goto LABEL_201;
      v140 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "ShiftedAlignments");
      v56 = (char *)(a1 + 1949);
      if (v140)
        goto LABEL_203;
      v141 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "TransposeSourceInput");
      v56 = (char *)(a1 + 1346);
      if (v141)
        goto LABEL_203;
      v142 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "TwoDimSourceInput");
      v56 = (char *)(a1 + 1347);
      if (v142)
        goto LABEL_203;
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "HandoverStrings"))
      {
        memset(__p, 0, 24);
        kaldi::ReadToken(a2, a3, (uint64_t)__p, v143, v144);
        kaldi::SplitStringToVector((const std::string *)__p, ",", 1, a1 + 1840);
      }
      else
      {
        if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "StateStrings"))
        {
          v147 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "StateWidth");
          v52 = a1 + 2760;
          if (v147)
          {
LABEL_201:
            kaldi::ReadBasicType<int>(a2, a3, v52, v50, v51);
            goto LABEL_320;
          }
          v148 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "StateLayoutND");
          v56 = (char *)(a1 + 2764);
          if (v148)
            goto LABEL_203;
          v149 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "NeedsPosition");
          v56 = (char *)(a1 + 1348);
          if (v149)
            goto LABEL_203;
          v150 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "NeedsEncoderPositions");
          v56 = (char *)(a1 + 1349);
          if (v150)
            goto LABEL_203;
          v151 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "NeedsEncoderOut");
          v56 = (char *)(a1 + 1350);
          if (v151)
            goto LABEL_203;
          v152 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "PositionZeroBased");
          v56 = (char *)(a1 + 1351);
          if (v152)
            goto LABEL_203;
          v153 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "ApplyLog");
          v56 = (char *)(a1 + 1352);
          if (v153)
            goto LABEL_203;
          v154 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "PositionScaleStr");
          v58 = a1 + 1648;
          if (!v154)
          {
            v155 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v276, "NoSymbolTables");
            v56 = (char *)(a1 + 2765);
            if (!v155)
            {
              kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 478);
              v156 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown token ", 14);
              if (SHIBYTE(v276[2]) >= 0)
                v157 = v276;
              else
                v157 = (void **)v276[0];
              if (SHIBYTE(v276[2]) >= 0)
                v158 = HIBYTE(v276[2]);
              else
                v158 = (uint64_t)v276[1];
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)v157, v158);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
            }
LABEL_203:
            kaldi::ReadBasicType<BOOL>(a2, a3, v56, v54, v55);
            goto LABEL_320;
          }
          goto LABEL_275;
        }
        memset(__p, 0, 24);
        kaldi::ReadToken(a2, a3, (uint64_t)__p, v145, v146);
        kaldi::SplitStringToVector((const std::string *)__p, ",", 1, a1 + 1864);
      }
    }
    if (SHIBYTE(__p[0].__end_) < 0)
    {
      first = __p[0].__first_;
      goto LABEL_319;
    }
LABEL_320:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  if ((v247 & 1) != 0)
    goto LABEL_446;
  if (*(char *)(a1 + 103) < 0)
  {
    if (!*(_QWORD *)(a1 + 88))
      goto LABEL_460;
    goto LABEL_461;
  }
  if (*(_BYTE *)(a1 + 103))
    goto LABEL_461;
LABEL_460:
  if (!*(_QWORD *)(a1 + 408))
  {
    if (kaldi::g_kaldi_verbose_level < -1)
      goto LABEL_470;
    goto LABEL_469;
  }
LABEL_461:
  if ((*(char *)(a1 + 127) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 127))
      goto LABEL_465;
    goto LABEL_470;
  }
  if (*(_QWORD *)(a1 + 112))
    goto LABEL_470;
LABEL_465:
  if (!*(_QWORD *)(a1 + 360) && kaldi::g_kaldi_verbose_level > -2)
  {
LABEL_469:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 487);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Both EncoderGraph (or at least one InputLangGraph) and DecoderGraph (or at least one DecoderLangGraph) must be specified in model file", 134);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  }
LABEL_470:
  if (!*(_QWORD *)(a1 + 456))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 491);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Input symbol table must be specified", 36);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    }
    goto LABEL_446;
  }
  if (!*(_QWORD *)(a1 + 464))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 496);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Output symbol table must be specified", 37);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    }
    goto LABEL_446;
  }
  if ((v244 & 1) == 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 501);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"AddSrcBos must be set in model config file", 42);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    }
LABEL_446:
    v159 = 0;
    goto LABEL_447;
  }
  if (*(_BYTE *)(a1 + 1350) || *(_QWORD *)(a1 + 384))
  {
    v161 = (std::vector<std::string> *)(a1 + 1480);
    v162 = *(std::string **)(a1 + 1488);
    if ((unint64_t)v162 >= *(_QWORD *)(a1 + 1496))
    {
      v163 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 1480), v241);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 1480, v241);
      v163 = v162 + 1;
    }
    *(_QWORD *)(a1 + 1488) = v163;
    v164 = *(_QWORD *)(a1 + 384);
    v249 = (_DWORD *)(a1 + 1888);
    v250 = (_QWORD *)(a1 + 384);
    *(_DWORD *)(a1 + 1888) = -1431655765 * (((unint64_t)v163 - *(_QWORD *)(a1 + 1480)) >> 3);
    if (!v164)
      goto LABEL_487;
  }
  else
  {
    v161 = (std::vector<std::string> *)(a1 + 1480);
    v163 = *(std::string **)(a1 + 1488);
    v249 = (_DWORD *)(a1 + 1888);
    v250 = (_QWORD *)(a1 + 384);
    *(_DWORD *)(a1 + 1888) = -1431655765 * (((unint64_t)v163 - *(_QWORD *)(a1 + 1480)) >> 3);
LABEL_487:
    v165 = *(std::string **)(a1 + 1840);
    v166 = *(__int128 **)(a1 + 1848);
    if (v165 != (std::string *)v166)
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(v161, v163, v165, v166, 0xAAAAAAAAAAAAAAABLL * (((char *)v166 - (char *)v165) >> 3));
  }
  v167 = (_QWORD *)(a1 + 1816);
  v168 = *(_QWORD *)(a1 + 1824);
  if (v168 >= *(_QWORD *)(a1 + 1832))
  {
    v169 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 1816), v242);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 1816, v242);
    v169 = v168 + 24;
  }
  *(_QWORD *)(a1 + 1824) = v169;
  *(_DWORD *)(a1 + 1940) = 0;
  if (*(_BYTE *)(a1 + 1948))
  {
    if (v169 >= *(_QWORD *)(a1 + 1832))
    {
      v169 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 1816), v240);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 1816, v240);
      v169 += 24;
    }
    *(_QWORD *)(a1 + 1824) = v169;
    *(_DWORD *)(a1 + 1932) = 1;
  }
  v170 = *(__int128 **)(a1 + 1864);
  v171 = *(__int128 **)(a1 + 1872);
  if (v170 == v171)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 525);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unsupported MT Espresso model: Missing required StateStrings field!", 67);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  *(_DWORD *)(a1 + 1892) = -1431655765 * ((v169 - *(_QWORD *)(a1 + 1816)) >> 3);
  do
  {
    if (*((char *)v170 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v253, *(const std::string::value_type **)v170, *((_QWORD *)v170 + 1));
    }
    else
    {
      v172 = *v170;
      v253.__r_.__value_.__r.__words[2] = *((_QWORD *)v170 + 2);
      *(_OWORD *)&v253.__r_.__value_.__l.__data_ = v172;
    }
    if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v173 = HIBYTE(v253.__r_.__value_.__r.__words[2]);
    else
      v173 = v253.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&__s, v173 + 5);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_s = &__s;
    else
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (v173)
    {
      if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v175 = &v253;
      else
        v175 = (std::string *)v253.__r_.__value_.__r.__words[0];
      memmove(p_s, v175, v173);
    }
    strcpy((char *)p_s + v173, ".next");
    v176 = *(_QWORD *)(a1 + 1824);
    v177 = *(_QWORD *)(a1 + 1832);
    if (v176 >= v177)
    {
      v179 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v176 - *v167) >> 3);
      v180 = v179 + 1;
      if (v179 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v181 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v177 - *v167) >> 3);
      if (2 * v181 > v180)
        v180 = 2 * v181;
      if (v181 >= 0x555555555555555)
        v182 = 0xAAAAAAAAAAAAAAALL;
      else
        v182 = v180;
      __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 1832);
      if (v182)
        v183 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a1 + 1832, v182);
      else
        v183 = 0;
      v184 = v183 + v179;
      __p[0].__first_ = v183;
      __p[0].__begin_ = v184;
      __p[0].__end_cap_.__value_ = &v183[v182];
      v185 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
      v184->__r_.__value_.__r.__words[2] = __s.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v184->__r_.__value_.__l.__data_ = v185;
      memset(&__s, 0, sizeof(__s));
      __p[0].__end_ = v184 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(a1 + 1816), __p);
      v186 = *(_QWORD *)(a1 + 1824);
      std::__split_buffer<std::string>::~__split_buffer(__p);
      v187 = SHIBYTE(__s.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(a1 + 1824) = v186;
      if (v187 < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
    }
    else
    {
      v178 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
      *(_QWORD *)(v176 + 16) = *((_QWORD *)&__s.__r_.__value_.__l + 2);
      *(_OWORD *)v176 = v178;
      *(_QWORD *)(a1 + 1824) = v176 + 24;
    }
    if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v253.__r_.__value_.__l.__data_);
    v170 = (__int128 *)((char *)v170 + 24);
  }
  while (v170 != v171);
  if (*(char *)(a1 + 887) < 0)
    v188 = *(_QWORD *)(a1 + 872);
  else
    v188 = *(unsigned __int8 *)(a1 + 887);
  if (!v188 && *(_DWORD *)(a1 + 944) == 2)
  {
    std::string::operator=(v246, __str);
    *(_QWORD *)(a1 + 944) = *(_QWORD *)(a1 + 936);
  }
  if (*(char *)(a1 + 911) < 0)
  {
    if (!*(_QWORD *)(a1 + 896))
    {
LABEL_539:
      if (*(_DWORD *)(a1 + 952) == 2)
      {
        std::string::operator=(v245, __str);
        *(_QWORD *)(a1 + 952) = *(_QWORD *)(a1 + 936);
      }
    }
  }
  else if (!*(_BYTE *)(a1 + 911))
  {
    goto LABEL_539;
  }
  if (*(_BYTE *)(a1 + 1339) && *(_BYTE *)(a1 + 1340))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 544);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Either Readout Espreso Graph or Readout Nnet is supported", 57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  if (!*(_BYTE *)(a1 + 1345))
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 601);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"TensorFlow not supported", 24);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  if (*(char *)(a1 + 103) < 0)
  {
    if (!*(_QWORD *)(a1 + 88))
      goto LABEL_561;
  }
  else if (!*(_BYTE *)(a1 + 103))
  {
    goto LABEL_561;
  }
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 550, 2);
    v189 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loading ENCODER ", 16);
    v190 = *(_BYTE *)(a1 + 103);
    if (v190 >= 0)
      v191 = a1 + 80;
    else
      v191 = *(_QWORD *)(a1 + 80);
    if (v190 >= 0)
      v192 = *(unsigned __int8 *)(a1 + 103);
    else
      v192 = *(_QWORD *)(a1 + 88);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v189, v191, v192);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
  }
  kaldi::quasar::Encdec::CreateEspressoModel(a1, (char *)(a1 + 80), *(_QWORD *)(a1 + 944), v246, (uint64_t)__p);
  std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 152, (__int128 *)__p);
  begin = (std::__shared_weak_count *)__p[0].__begin_;
  if (__p[0].__begin_)
  {
    p_size = &__p[0].__begin_->__r_.__value_.__l.__size_;
    do
      v195 = __ldaxr(p_size);
    while (__stlxr(v195 - 1, p_size));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))begin->__on_zero_shared)(begin);
      std::__shared_weak_count::__release_weak(begin);
    }
  }
LABEL_561:
  if (*(_BYTE *)(a1 + 1341))
  {
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 555, 2);
      v196 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loading EMBEDDING ", 18);
      v197 = *(_BYTE *)(a1 + 79);
      if (v197 >= 0)
        v198 = a1 + 56;
      else
        v198 = *(_QWORD *)(a1 + 56);
      if (v197 >= 0)
        v199 = *(unsigned __int8 *)(a1 + 79);
      else
        v199 = *(_QWORD *)(a1 + 64);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, v198, v199);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    kaldi::quasar::Encdec::CreateEspressoModel(a1, (char *)(a1 + 56), *(_QWORD *)(a1 + 952), v245, (uint64_t)__p);
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 168, (__int128 *)__p);
    v200 = (std::__shared_weak_count *)__p[0].__begin_;
    if (__p[0].__begin_)
    {
      v201 = &__p[0].__begin_->__r_.__value_.__l.__size_;
      do
        v202 = __ldaxr(v201);
      while (__stlxr(v202 - 1, v201));
      if (!v202)
      {
        ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
        std::__shared_weak_count::__release_weak(v200);
      }
    }
  }
  if (*(_BYTE *)(a1 + 1340))
  {
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 561, 2);
      v203 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loading READOUT ", 16);
      v204 = *(_BYTE *)(a1 + 151);
      if (v204 >= 0)
        v205 = a1 + 128;
      else
        v205 = *(_QWORD *)(a1 + 128);
      if (v204 >= 0)
        v206 = *(unsigned __int8 *)(a1 + 151);
      else
        v206 = *(_QWORD *)(a1 + 136);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v203, v205, v206);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    kaldi::quasar::Encdec::CreateEspressoModel(a1, (char *)(a1 + 128), *(_QWORD *)(a1 + 952), v245, (uint64_t)__p);
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 200, (__int128 *)__p);
    v207 = (std::__shared_weak_count *)__p[0].__begin_;
    if (__p[0].__begin_)
    {
      v208 = &__p[0].__begin_->__r_.__value_.__l.__size_;
      do
        v209 = __ldaxr(v208);
      while (__stlxr(v209 - 1, v208));
      if (!v209)
      {
        ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
        std::__shared_weak_count::__release_weak(v207);
      }
    }
  }
  if (*(_QWORD *)(a1 + 360))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      __p[0].__begin_ = 0;
      __p[0].__first_ = 0;
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 184, (__int128 *)__p);
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      __p[0].__begin_ = 0;
      __p[0].__first_ = 0;
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 216, (__int128 *)__p);
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      __p[0].__begin_ = 0;
      __p[0].__first_ = 0;
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 232, (__int128 *)__p);
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    }
    else
    {
      if (*(_QWORD *)(a1 + 408))
      {
        v217 = *v239;
        if (*((char *)*v239 + 55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v217[4], v217[5]);
        }
        else
        {
          *(_OWORD *)&__p[0].__first_ = *((_OWORD *)v217 + 2);
          __p[0].__end_ = (std::__split_buffer<std::string>::pointer)v217[6];
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
      }
      v218 = *(_QWORD **)(a1 + 344);
      if (v218 != (_QWORD *)(a1 + 352))
      {
        do
        {
          kaldi::quasar::Encdec::LoadSubmodels(a1, (uint64_t)__p, (uint64_t)(v218 + 4));
          v219 = (_QWORD *)v218[1];
          if (v219)
          {
            do
            {
              v220 = v219;
              v219 = (_QWORD *)*v219;
            }
            while (v219);
          }
          else
          {
            do
            {
              v220 = (_QWORD *)v218[2];
              v13 = *v220 == (_QWORD)v218;
              v218 = v220;
            }
            while (!v13);
          }
          v218 = v220;
        }
        while (v220 != (_QWORD *)(a1 + 352));
      }
      v221 = *(_QWORD *)(a1 + 248);
      *(_OWORD *)&v253.__r_.__value_.__l.__data_ = 0uLL;
      v222 = *(std::__shared_weak_count **)(v221 + 64);
      if (v222)
      {
        v253.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v222);
        if (v253.__r_.__value_.__l.__size_)
          v253.__r_.__value_.__r.__words[0] = *(_QWORD *)(v221 + 56);
      }
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 184, (__int128 *)&v253);
      std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v253);
      if (*(_QWORD *)(a1 + 288))
      {
        v223 = *(_QWORD *)(a1 + 272);
        *(_OWORD *)&v253.__r_.__value_.__l.__data_ = 0uLL;
        v224 = *(std::__shared_weak_count **)(v223 + 64);
        if (v224)
        {
          v253.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v224);
          if (v253.__r_.__value_.__l.__size_)
            v253.__r_.__value_.__r.__words[0] = *(_QWORD *)(v223 + 56);
        }
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 216, (__int128 *)&v253);
        std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&v253);
      }
      if (*(_QWORD *)(a1 + 408))
      {
        v225 = *v243;
        if (*((char *)*v243 + 55) < 0)
          std::string::__init_copy_ctor_external(&v253, (const std::string::value_type *)v225[4], v225[5]);
        else
          v253 = *(std::string *)(v225 + 4);
        v226 = *(_QWORD **)(a1 + 392);
        if (v226 != (_QWORD *)(a1 + 400))
        {
          do
          {
            kaldi::quasar::Encdec::LoadSubmodels(a1, (uint64_t)(v226 + 4), (uint64_t)&v253);
            v227 = (_QWORD *)v226[1];
            if (v227)
            {
              do
              {
                v228 = v227;
                v227 = (_QWORD *)*v227;
              }
              while (v227);
            }
            else
            {
              do
              {
                v228 = (_QWORD *)v226[2];
                v13 = *v228 == (_QWORD)v226;
                v226 = v228;
              }
              while (!v13);
            }
            v226 = v228;
          }
          while (v228 != (_QWORD *)(a1 + 400));
        }
        v229 = *(_QWORD *)(a1 + 296);
        *(_OWORD *)&__s.__r_.__value_.__l.__data_ = 0uLL;
        v230 = *(std::__shared_weak_count **)(v229 + 64);
        if (v230)
        {
          __s.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v230);
          if (__s.__r_.__value_.__l.__size_)
            __s.__r_.__value_.__r.__words[0] = *(_QWORD *)(v229 + 56);
        }
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 232, (__int128 *)&__s);
        std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&__s);
        if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v253.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p[0].__end_) < 0)
        operator delete(__p[0].__first_);
    }
    if (*v250)
      *v249 = 0;
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, "Read", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 566, 2);
      v210 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loading DECODER ", 16);
      v211 = *(_BYTE *)(a1 + 127);
      if (v211 >= 0)
        v212 = a1 + 104;
      else
        v212 = *(_QWORD *)(a1 + 104);
      if (v211 >= 0)
        v213 = *(unsigned __int8 *)(a1 + 127);
      else
        v213 = *(_QWORD *)(a1 + 112);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v210, v212, v213);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    kaldi::quasar::Encdec::CreateEspressoModel(a1, (char *)(a1 + 104), *(_QWORD *)(a1 + 952), v245, (uint64_t)__p);
    std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 184, (__int128 *)__p);
    v214 = (std::__shared_weak_count *)__p[0].__begin_;
    if (__p[0].__begin_)
    {
      v215 = &__p[0].__begin_->__r_.__value_.__l.__size_;
      do
        v216 = __ldaxr(v215);
      while (__stlxr(v216 - 1, v215));
      if (!v216)
      {
        ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
        std::__shared_weak_count::__release_weak(v214);
      }
    }
  }
  v159 = 1;
LABEL_447:
  if (SHIBYTE(v271) < 0)
    operator delete(v269);
  if (SHIBYTE(v273) < 0)
    operator delete(v272[0]);
  if (SHIBYTE(v275) < 0)
    operator delete(v274[0]);
  if (SHIBYTE(v276[2]) < 0)
    operator delete(v276[0]);
  return v159;
}

void sub_1DE4E9E40(_Unwind_Exception *a1)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&STACK[0x3E0]);
  if (SLOBYTE(STACK[0x397]) < 0)
    operator delete((void *)STACK[0x380]);
  if (SLOBYTE(STACK[0x3AF]) < 0)
    operator delete((void *)STACK[0x398]);
  if (SLOBYTE(STACK[0x3C7]) < 0)
    operator delete((void *)STACK[0x3B0]);
  if (SLOBYTE(STACK[0x3DF]) < 0)
    operator delete((void *)STACK[0x3C8]);
  _Unwind_Resume(a1);
}

void sub_1DE4E9E5C(_Unwind_Exception *a1)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&STACK[0x3E0]);
  if (SLOBYTE(STACK[0x397]) < 0)
    operator delete((void *)STACK[0x380]);
  if (SLOBYTE(STACK[0x3AF]) < 0)
    operator delete((void *)STACK[0x398]);
  if (SLOBYTE(STACK[0x3C7]) < 0)
    operator delete((void *)STACK[0x3B0]);
  if (SLOBYTE(STACK[0x3DF]) < 0)
    operator delete((void *)STACK[0x3C8]);
  _Unwind_Resume(a1);
}

void sub_1DE4E9E94(_Unwind_Exception *a1)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&STACK[0x3E0]);
  if (SLOBYTE(STACK[0x397]) < 0)
    operator delete((void *)STACK[0x380]);
  if (SLOBYTE(STACK[0x3AF]) < 0)
    operator delete((void *)STACK[0x398]);
  if (SLOBYTE(STACK[0x3C7]) < 0)
    operator delete((void *)STACK[0x3B0]);
  if (SLOBYTE(STACK[0x3DF]) < 0)
    operator delete((void *)STACK[0x3C8]);
  _Unwind_Resume(a1);
}

void sub_1DE4E9EA8()
{
  std::pair<std::string,std::string>::~pair((uint64_t)&STACK[0x3E0]);
  JUMPOUT(0x1DE4E9F94);
}

void sub_1DE4E9EC0(_Unwind_Exception *a1)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&STACK[0x3E0]);
  if (SLOBYTE(STACK[0x397]) < 0)
    operator delete((void *)STACK[0x380]);
  if (SLOBYTE(STACK[0x3AF]) < 0)
    operator delete((void *)STACK[0x398]);
  if (SLOBYTE(STACK[0x3C7]) < 0)
    operator delete((void *)STACK[0x3B0]);
  if (SLOBYTE(STACK[0x3DF]) < 0)
    operator delete((void *)STACK[0x3C8]);
  _Unwind_Resume(a1);
}

void sub_1DE4E9ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  char a72;

  if (SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  if (a72 < 0)
    operator delete(a67);
  JUMPOUT(0x1DE4EA1C0);
}

void sub_1DE4E9EF8(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1DE4EA200);
}

void sub_1DE4E9F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;

  if (a72 < 0)
    operator delete(__p);
  JUMPOUT(0x1DE4EA0CCLL);
}

void sub_1DE4E9F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  char a72;

  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  if (a72 < 0)
    operator delete(a67);
  JUMPOUT(0x1DE4EA1C0);
}

void sub_1DE4E9F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;

  if (a72 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x367]) < 0)
    operator delete((void *)STACK[0x350]);
  if ((SLOBYTE(STACK[0x37F]) & 0x80000000) == 0)
  {
    if (SLOBYTE(STACK[0x397]) < 0)
      operator delete((void *)STACK[0x380]);
    if (SLOBYTE(STACK[0x3AF]) < 0)
      operator delete((void *)STACK[0x398]);
    if (SLOBYTE(STACK[0x3C7]) < 0)
      operator delete((void *)STACK[0x3B0]);
    if (SLOBYTE(STACK[0x3DF]) < 0)
      operator delete((void *)STACK[0x3C8]);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1DE4EA160);
}

void sub_1DE4E9F60(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x37F]) < 0)
    operator delete((void *)STACK[0x368]);
  if (SLOBYTE(STACK[0x34F]) < 0)
    operator delete((void *)STACK[0x338]);
  if ((SLOBYTE(STACK[0x367]) & 0x80000000) == 0)
  {
    if (SLOBYTE(STACK[0x397]) < 0)
      operator delete((void *)STACK[0x380]);
    if (SLOBYTE(STACK[0x3AF]) < 0)
      operator delete((void *)STACK[0x398]);
    if (SLOBYTE(STACK[0x3C7]) < 0)
      operator delete((void *)STACK[0x3B0]);
    if (SLOBYTE(STACK[0x3DF]) < 0)
      operator delete((void *)STACK[0x3C8]);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1DE4EA160);
}

void sub_1DE4E9F80()
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&STACK[0x3E0]);
  JUMPOUT(0x1DE4E9F94);
}

void sub_1DE4E9F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  char a72;

  if (SLOBYTE(STACK[0x37F]) < 0)
    operator delete((void *)STACK[0x368]);
  if (a72 < 0)
    operator delete(a67);
  if (SLOBYTE(STACK[0x397]) < 0)
    operator delete((void *)STACK[0x380]);
  if (SLOBYTE(STACK[0x3AF]) < 0)
    operator delete((void *)STACK[0x398]);
  if (SLOBYTE(STACK[0x3C7]) < 0)
    operator delete((void *)STACK[0x3B0]);
  if (SLOBYTE(STACK[0x3DF]) < 0)
    operator delete((void *)STACK[0x3C8]);
  _Unwind_Resume(a1);
}

void sub_1DE4E9FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  char a72;

  if (SLOBYTE(STACK[0x337]) < 0)
    JUMPOUT(0x1DE4E9FB8);
  if (a72 < 0)
    operator delete(a67);
  JUMPOUT(0x1DE4EA1C0);
}

void sub_1DE4E9FC8()
{
  if (SLOBYTE(STACK[0x3F7]) < 0)
    operator delete((void *)STACK[0x3E0]);
  JUMPOUT(0x1DE4EA1B0);
}

void sub_1DE4EA0C8(_Unwind_Exception *a1)
{
  if ((SLOBYTE(STACK[0x3F7]) & 0x80000000) == 0)
  {
    if (SLOBYTE(STACK[0x397]) < 0)
      operator delete((void *)STACK[0x380]);
    if (SLOBYTE(STACK[0x3AF]) < 0)
      operator delete((void *)STACK[0x398]);
    if (SLOBYTE(STACK[0x3C7]) < 0)
      operator delete((void *)STACK[0x3B0]);
    if (SLOBYTE(STACK[0x3DF]) < 0)
      operator delete((void *)STACK[0x3C8]);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1DE4EA160);
}

void sub_1DE4EA0DC()
{
  if (SLOBYTE(STACK[0x3FF]) < 0)
    operator delete((void *)STACK[0x3E8]);
  JUMPOUT(0x1DE4EA0F8);
}

void sub_1DE4EA0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;

  if (a72 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x37F]) < 0)
    operator delete((void *)STACK[0x368]);
  JUMPOUT(0x1DE4EA12CLL);
}

void sub_1DE4EA11C()
{
  JUMPOUT(0x1DE4EA13CLL);
}

void sub_1DE4EA168()
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&STACK[0x3E0]);
  JUMPOUT(0x1DE4EA1B0);
}

void sub_1DE4EA188(_Unwind_Exception *a1)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&STACK[0x3E0]);
  if (SLOBYTE(STACK[0x397]) < 0)
    operator delete((void *)STACK[0x380]);
  if (SLOBYTE(STACK[0x3AF]) < 0)
    operator delete((void *)STACK[0x398]);
  if (SLOBYTE(STACK[0x3C7]) < 0)
    operator delete((void *)STACK[0x3B0]);
  if (SLOBYTE(STACK[0x3DF]) < 0)
    operator delete((void *)STACK[0x3C8]);
  _Unwind_Resume(a1);
}

void sub_1DE4EA198()
{
  JUMPOUT(0x1DE4EA1B8);
}

void sub_1DE4EA1A0(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x397]) < 0)
    operator delete((void *)STACK[0x380]);
  if (SLOBYTE(STACK[0x3AF]) < 0)
    operator delete((void *)STACK[0x398]);
  if (SLOBYTE(STACK[0x3C7]) < 0)
    operator delete((void *)STACK[0x3B0]);
  if (SLOBYTE(STACK[0x3DF]) < 0)
    operator delete((void *)STACK[0x3C8]);
  _Unwind_Resume(a1);
}

void sub_1DE4EA1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  kaldi::quasar::Vocab::~Vocab((kaldi::quasar::Vocab *)&a67);
  kaldi::Input::~Input((kaldi::Input *)&STACK[0x338]);
  JUMPOUT(0x1DE4EA1C0);
}

void kaldi::quasar::Encdec::ParseEnginePlatform(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::string *v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  void **v37[34];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v38 = 0;
  v39 = 0;
  v40 = 0;
  kaldi::SplitStringToVector((const std::string *)a1, ":", 1, (uint64_t)&v38);
  v4 = v38;
  switch(0xAAAAAAAAAAAAAAABLL * ((v39 - v38) >> 3))
  {
    case 0uLL:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "ParseEnginePlatform", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 188);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Invalid empty platform spec.", 28);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
    case 1uLL:
      *a2 = 0x100000000;
      v5 = (std::string *)(a2 + 1);
      if ((*(char *)(v4 + 23) & 0x80000000) == 0)
        goto LABEL_49;
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
      goto LABEL_50;
    case 2uLL:
      if (*(char *)(v38 + 23) < 0)
      {
        v8 = *(_QWORD *)(v38 + 8);
        if (v8 != 2 || **(_WORD **)v38 != 13637)
        {
          if (v8 != 10)
            goto LABEL_60;
          v6 = *(_WORD **)v38;
          goto LABEL_16;
        }
      }
      else
      {
        if (*(_BYTE *)(v38 + 23) != 2)
        {
          v6 = (_WORD *)v38;
          if (*(_BYTE *)(v38 + 23) != 10)
            goto LABEL_60;
LABEL_16:
          v9 = *(_QWORD *)v6;
          v10 = (unsigned __int16)v6[4];
          if (v9 != 0x6F73736572707345 || v10 != 12630)
          {
LABEL_60:
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "ParseEnginePlatform", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 198);
            v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Unsupported engine: ", 20);
            v26 = *(char *)(v38 + 23);
            if (v26 >= 0)
              v27 = v38;
            else
              v27 = *(_QWORD *)v38;
            if (v26 >= 0)
              v28 = *(unsigned __int8 *)(v38 + 23);
            else
              v28 = *(_QWORD *)(v38 + 8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
          }
          *a2 = 0x100000000;
          v5 = (std::string *)(a2 + 1);
          if (*(char *)(v4 + 47) < 0)
            goto LABEL_22;
          goto LABEL_35;
        }
        if (*(_WORD *)v38 != 13637)
          goto LABEL_60;
      }
      *a2 = 0x100000001;
      v5 = (std::string *)(a2 + 1);
      if (*(char *)(v4 + 47) < 0)
      {
LABEL_22:
        std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(v4 + 24), *(_QWORD *)(v4 + 32));
        goto LABEL_50;
      }
LABEL_35:
      v4 += 24;
      goto LABEL_49;
    case 3uLL:
      if ((*(char *)(v38 + 23) & 0x80000000) == 0)
      {
        if (*(_BYTE *)(v38 + 23) != 2)
        {
          v7 = v38;
          if (*(_BYTE *)(v38 + 23) != 10)
            goto LABEL_67;
          goto LABEL_27;
        }
        if (*(_WORD *)v38 != 13637)
          goto LABEL_67;
LABEL_37:
        v16 = 1;
        goto LABEL_38;
      }
      v12 = *(_QWORD *)(v38 + 8);
      if (v12 == 2 && **(_WORD **)v38 == 13637)
        goto LABEL_37;
      if (v12 != 10)
        goto LABEL_67;
      v7 = *(_QWORD *)v38;
LABEL_27:
      v13 = *(_QWORD *)v7;
      v14 = *(unsigned __int16 *)(v7 + 8);
      if (v13 != 0x6F73736572707345 || v14 != 12630)
      {
LABEL_67:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "ParseEnginePlatform", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 209);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Unsupported engine: ", 20);
        v30 = *(char *)(v38 + 23);
        if (v30 >= 0)
          v31 = v38;
        else
          v31 = *(_QWORD *)v38;
        if (v30 >= 0)
          v32 = *(unsigned __int8 *)(v38 + 23);
        else
          v32 = *(_QWORD *)(v38 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
      }
      v16 = 0;
LABEL_38:
      v17 = (_QWORD *)(v38 + 24);
      v18 = *(char *)(v38 + 47);
      if (v18 < 0)
      {
        if (*(_QWORD *)(v38 + 32) != 4)
          goto LABEL_53;
        v17 = (_QWORD *)*v17;
      }
      else if (v18 != 4)
      {
LABEL_53:
        kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "ParseEnginePlatform", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 216);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Unsupported precision: ", 23);
        v22 = *(char *)(v38 + 47);
        if (v22 >= 0)
          v23 = v38 + 24;
        else
          v23 = *(_QWORD *)(v38 + 24);
        if (v22 >= 0)
          v24 = *(unsigned __int8 *)(v38 + 47);
        else
          v24 = *(_QWORD *)(v38 + 32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
      }
      if (*(_DWORD *)v17 == 909201478)
      {
        v19 = 0;
      }
      else
      {
        if (*(_DWORD *)v17 != 842223686)
          goto LABEL_53;
        v19 = 0x100000000;
      }
      *a2 = v19 | v16;
      v5 = (std::string *)(a2 + 1);
      if (*(char *)(v4 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(v4 + 48), *(_QWORD *)(v4 + 56));
      }
      else
      {
        v4 += 48;
LABEL_49:
        v20 = *(_OWORD *)v4;
        v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
        *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v20;
      }
LABEL_50:
      v37[0] = (void **)&v38;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v37);
      return;
    default:
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37, "ParseEnginePlatform", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 222);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Invalid platform spec: ", 23);
      v34 = *(char *)(a1 + 23);
      if (v34 >= 0)
        v35 = a1;
      else
        v35 = *(_QWORD *)a1;
      if (v34 >= 0)
        v36 = *(unsigned __int8 *)(a1 + 23);
      else
        v36 = *(_QWORD *)(a1 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v37);
  }
}

void sub_1DE4EA6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  a10 = (void **)(v10 - 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_1DE4EA80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  std::ifstream::~ifstream(&a20);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Vocab::~Vocab(kaldi::quasar::Vocab *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 18);
  if (v2)
  {
    *((_QWORD *)this + 19) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::~__hash_table((uint64_t)this + 80);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void std::vector<int>::push_back[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v12);
      v8 = *(_DWORD **)a1;
      v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

uint64_t kaldi::quasar::Encdec::LoadSubmodels(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  int v15;
  const void *v16;
  uint64_t v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  BOOL v28;
  _QWORD *v29;
  int v30;
  const void *v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  const void *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  _QWORD *v56;
  int v57;
  const void *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  int v77;
  const void *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  __int128 v94[17];

  if (*(_QWORD *)(a1 + 360))
  {
    v6 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(a1 + 344, (const void **)a3);
    if (a1 + 352 == v6)
      return 0;
    v7 = v6;
    *(_QWORD *)&v94[0] = a3;
    v8 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 248), (const void **)a3, (uint64_t)&std::piecewise_construct, (__int128 **)v94);
    v94[0] = 0uLL;
    v9 = (std::__shared_weak_count *)v8[8];
    if (v9)
    {
      *((_QWORD *)&v94[0] + 1) = std::__shared_weak_count::lock(v9);
      if (*((_QWORD *)&v94[0] + 1))
        *(_QWORD *)&v94[0] = v8[7];
    }
    v10 = *(_QWORD *)std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 184, v94);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v94[0] + 1);
    if (*((_QWORD *)&v94[0] + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v94[0] + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v10)
    {
      if (kaldi::g_kaldi_verbose_level >= 2)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v94, "LoadSubmodels", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 618, 2);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Using loaded decoder net for: ", 30);
        v15 = *(char *)(a3 + 23);
        if (v15 >= 0)
          v16 = (const void *)a3;
        else
          v16 = *(const void **)a3;
        if (v15 >= 0)
          v17 = *(unsigned __int8 *)(a3 + 23);
        else
          v17 = *(_QWORD *)(a3 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v94);
      }
      if (a1 + 376 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(a1 + 368, (const void **)a3))
      {
        *(_QWORD *)&v94[0] = a3;
        v18 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 272), (const void **)a3, (uint64_t)&std::piecewise_construct, (__int128 **)v94);
        v94[0] = 0uLL;
        v19 = (std::__shared_weak_count *)v18[8];
        if (v19)
        {
          *((_QWORD *)&v94[0] + 1) = std::__shared_weak_count::lock(v19);
          if (*((_QWORD *)&v94[0] + 1))
            *(_QWORD *)&v94[0] = v18[7];
        }
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 216, v94);
        v20 = (std::__shared_weak_count *)*((_QWORD *)&v94[0] + 1);
        if (*((_QWORD *)&v94[0] + 1))
        {
          v21 = (unint64_t *)(*((_QWORD *)&v94[0] + 1) + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        if (!*(_QWORD *)(a1 + 216))
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v94, "LoadSubmodels", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 623);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v94, "Handover plan required but not loaded!");
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v94);
        }
      }
    }
    if (a1 + 400 != std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(a1 + 392, (const void **)a2))
    {
      *(_QWORD *)&v94[0] = a2;
      v23 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 296), (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)v94);
      v94[0] = 0uLL;
      v24 = (std::__shared_weak_count *)v23[8];
      if (v24)
      {
        *((_QWORD *)&v94[0] + 1) = std::__shared_weak_count::lock(v24);
        if (*((_QWORD *)&v94[0] + 1))
          *(_QWORD *)&v94[0] = v23[7];
      }
      std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 232, v94);
      v25 = (std::__shared_weak_count *)*((_QWORD *)&v94[0] + 1);
      if (*((_QWORD *)&v94[0] + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v94[0] + 1) + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      if (*(_QWORD *)(a1 + 232))
        v28 = kaldi::g_kaldi_verbose_level < 2;
      else
        v28 = 1;
      if (!v28)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v94, "LoadSubmodels", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 632, 2);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Using loaded input net for: ", 28);
        v30 = *(char *)(a2 + 23);
        if (v30 >= 0)
          v31 = (const void *)a2;
        else
          v31 = *(const void **)a2;
        if (v30 >= 0)
          v32 = *(unsigned __int8 *)(a2 + 23);
        else
          v32 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v31, v32);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v94);
      }
    }
    if (*(_QWORD *)(a1 + 408))
      v33 = *(_QWORD *)(a1 + 232) == 0;
    else
      v33 = 0;
    v35 = *(_QWORD *)(a1 + 184);
    if (v33 || !v35)
    {
      if (!v35)
      {
        if (kaldi::g_kaldi_verbose_level >= 2)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v94, "LoadSubmodels", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 645, 2);
          v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Loading DECODER for '", 21);
          v57 = *(char *)(a3 + 23);
          if (v57 >= 0)
            v58 = (const void *)a3;
          else
            v58 = *(const void **)a3;
          if (v57 >= 0)
            v59 = *(unsigned __int8 *)(a3 + 23);
          else
            v59 = *(_QWORD *)(a3 + 8);
          v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v58, v59);
          v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)": ", 2);
          v62 = *(char *)(v7 + 79);
          if (v62 >= 0)
            v63 = v7 + 56;
          else
            v63 = *(_QWORD *)(v7 + 56);
          if (v62 >= 0)
            v64 = *(unsigned __int8 *)(v7 + 79);
          else
            v64 = *(_QWORD *)(v7 + 64);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, v63, v64);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v94);
        }
        kaldi::quasar::Encdec::CreateEspressoModel(a1, (char *)(v7 + 56), *(_QWORD *)(a1 + 952), (const std::string *)(a1 + 888), (uint64_t)v94);
        std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 184, v94);
        v65 = (std::__shared_weak_count *)*((_QWORD *)&v94[0] + 1);
        if (*((_QWORD *)&v94[0] + 1))
        {
          v66 = (unint64_t *)(*((_QWORD *)&v94[0] + 1) + 8);
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        *(_QWORD *)&v94[0] = a3;
        v68 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 248), (const void **)a3, (uint64_t)&std::piecewise_construct, (__int128 **)v94);
        v70 = *(_QWORD *)(a1 + 184);
        v69 = *(_QWORD *)(a1 + 192);
        if (v69)
        {
          v71 = (unint64_t *)(v69 + 16);
          do
            v72 = __ldxr(v71);
          while (__stxr(v72 + 1, v71));
        }
        v73 = (std::__shared_weak_count *)v68[8];
        v68[7] = v70;
        v68[8] = v69;
        if (v73)
          std::__shared_weak_count::__release_weak(v73);
        v74 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(a1 + 368, (const void **)a3);
        if (a1 + 376 != v74)
        {
          v75 = v74;
          if (kaldi::g_kaldi_verbose_level >= 2)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v94, "LoadSubmodels", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 651, 2);
            v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Loading HANDOVER for '", 22);
            v77 = *(char *)(a3 + 23);
            if (v77 >= 0)
              v78 = (const void *)a3;
            else
              v78 = *(const void **)a3;
            if (v77 >= 0)
              v79 = *(unsigned __int8 *)(a3 + 23);
            else
              v79 = *(_QWORD *)(a3 + 8);
            v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)v78, v79);
            v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)": ", 2);
            v82 = *(char *)(v75 + 79);
            if (v82 >= 0)
              v83 = v75 + 56;
            else
              v83 = *(_QWORD *)(v75 + 56);
            if (v82 >= 0)
              v84 = *(unsigned __int8 *)(v75 + 79);
            else
              v84 = *(_QWORD *)(v75 + 64);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, v83, v84);
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v94);
          }
          kaldi::quasar::Encdec::CreateEspressoModel(a1, (char *)(v75 + 56), *(_QWORD *)(a1 + 952), (const std::string *)(a1 + 888), (uint64_t)v94);
          std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 216, v94);
          v85 = (std::__shared_weak_count *)*((_QWORD *)&v94[0] + 1);
          if (*((_QWORD *)&v94[0] + 1))
          {
            v86 = (unint64_t *)(*((_QWORD *)&v94[0] + 1) + 8);
            do
              v87 = __ldaxr(v86);
            while (__stlxr(v87 - 1, v86));
            if (!v87)
            {
              ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
              std::__shared_weak_count::__release_weak(v85);
            }
          }
          *(_QWORD *)&v94[0] = a3;
          v88 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 272), (const void **)a3, (uint64_t)&std::piecewise_construct, (__int128 **)v94);
          v90 = *(_QWORD *)(a1 + 216);
          v89 = *(_QWORD *)(a1 + 224);
          if (v89)
          {
            v91 = (unint64_t *)(v89 + 16);
            do
              v92 = __ldxr(v91);
            while (__stxr(v92 + 1, v91));
          }
          v93 = (std::__shared_weak_count *)v88[8];
          v88[7] = v90;
          v88[8] = v89;
          if (v93)
            std::__shared_weak_count::__release_weak(v93);
        }
      }
      if (v33)
      {
        v36 = std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::find<std::string>(a1 + 392, (const void **)a2);
        if (a1 + 400 != v36)
        {
          v37 = v36;
          if (kaldi::g_kaldi_verbose_level >= 2)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v94, "LoadSubmodels", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 660, 2);
            v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Loading INPUT NET for '", 23);
            v39 = *(char *)(a2 + 23);
            if (v39 >= 0)
              v40 = (const void *)a2;
            else
              v40 = *(const void **)a2;
            if (v39 >= 0)
              v41 = *(unsigned __int8 *)(a2 + 23);
            else
              v41 = *(_QWORD *)(a2 + 8);
            v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v40, v41);
            v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"': ", 3);
            v44 = *(char *)(v37 + 79);
            if (v44 >= 0)
              v45 = v37 + 56;
            else
              v45 = *(_QWORD *)(v37 + 56);
            if (v44 >= 0)
              v46 = *(unsigned __int8 *)(v37 + 79);
            else
              v46 = *(_QWORD *)(v37 + 64);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v45, v46);
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v94);
          }
          kaldi::quasar::Encdec::CreateEspressoModel(a1, (char *)(v37 + 56), *(_QWORD *)(a1 + 952), (const std::string *)(a1 + 888), (uint64_t)v94);
          std::shared_ptr<kaldi::nnet1::Nnet>::operator=[abi:ne180100](a1 + 232, v94);
          v47 = (std::__shared_weak_count *)*((_QWORD *)&v94[0] + 1);
          if (*((_QWORD *)&v94[0] + 1))
          {
            v48 = (unint64_t *)(*((_QWORD *)&v94[0] + 1) + 8);
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          *(_QWORD *)&v94[0] = a2;
          v50 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 296), (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)v94);
          v52 = *(_QWORD *)(a1 + 232);
          v51 = *(_QWORD *)(a1 + 240);
          if (v51)
          {
            v53 = (unint64_t *)(v51 + 16);
            do
              v54 = __ldxr(v53);
            while (__stxr(v54 + 1, v53));
          }
          v55 = (std::__shared_weak_count *)v50[8];
          v50[7] = v52;
          v50[8] = v51;
          if (v55)
            std::__shared_weak_count::__release_weak(v55);
        }
      }
    }
  }
  return 1;
}

void sub_1DE4EB180(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Encdec::ResetHistoryState(kaldi::quasar::Encdec *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void **v16;

  v2 = (_QWORD *)*((_QWORD *)this + 171);
  v3 = (_QWORD *)*((_QWORD *)this + 170);
  while (v2 != v3)
  {
    v5 = *--v2;
    v4 = v5;
    *v2 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  *((_QWORD *)this + 171) = v3;
  v6 = *((_QWORD *)this + 174);
  v7 = *((_QWORD *)this + 173);
  while (v6 != v7)
  {
    v6 -= 32;
    std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100]((uint64_t)this + 1400, v6);
  }
  *((_QWORD *)this + 174) = v7;
  v8 = *((_QWORD *)this + 177);
  v9 = *((_QWORD *)this + 176);
  while (v8 != v9)
  {
    v8 -= 32;
    std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100]((uint64_t)this + 1424, v8);
  }
  *((_QWORD *)this + 177) = v9;
  v10 = (_QWORD *)*((_QWORD *)this + 180);
  v11 = (_QWORD *)*((_QWORD *)this + 179);
  while (v10 != v11)
  {
    v13 = *--v10;
    v12 = v13;
    *v10 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  *((_QWORD *)this + 180) = v11;
  v14 = (void **)*((_QWORD *)this + 343);
  v15 = (void **)*((_QWORD *)this + 342);
  if (v14 != v15)
  {
    do
    {
      v14 -= 3;
      v16 = v14;
      std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v16);
    }
    while (v14 != v15);
    v14 = (void **)*((_QWORD *)this + 342);
  }
  *((_QWORD *)this + 343) = v15;
  while (v15 != v14)
  {
    v15 -= 3;
    v16 = v15;
    std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
  *((_QWORD *)this + 343) = v14;
}

void kaldi::quasar::Encdec::GetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
  double *v6;
  uint64_t v7;
  clockid_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  void *__p[2];
  char v14;
  _BYTE v15[48];

  v6 = (double *)(a1 + 2560);
  v7 = a1 + 2640;
  std::string::basic_string[abi:ne180100]<0>(__p, &byte_1DEBD87CE);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v15, v6, v7, (__int128 *)__p);
  if (v14 < 0)
    operator delete(__p[0]);
  v10 = *(_QWORD *)(a1 + 2736);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 2744) - v10) >> 3) <= a3)
    kaldi::KaldiAssertFailure_((kaldi *)"GetHistoryState", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", (const char *)0x39C, "sequence_idx < history_.size()", v9);
  v11 = (uint64_t **)(v10 + 24 * a3);
  if (v11 != (uint64_t **)a2)
  {
    v12 = *(uint64_t **)(v10 + 24 * a3 + 8);
    std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__assign_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>(a2, *v11, v12, ((char *)v12 - (char *)*v11) >> 4);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v15, v8);
}

void sub_1DE4EB3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::Encdec::SetHistoryState(uint64_t a1, uint64_t **a2, int a3, int a4)
{
  uint64_t result;

  std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::resize((uint64_t *)(a1 + 2736), a4);
  result = *(_QWORD *)(a1 + 2736) + 24 * a3;
  if ((uint64_t **)result != a2)
    return std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__assign_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>(result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return result;
}

void std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void kaldi::quasar::Encdec::Start(uint64_t a1, int a2, const std::string *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t i;
  clockid_t v29;
  _OWORD *v30;
  _OWORD *j;
  char *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  _OWORD *v41;
  _QWORD *v42;
  char v43;
  void **v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 740) = a2;
  v5 = *(std::__shared_weak_count **)(a1 + 160);
  v44 = *(void ***)(a1 + 152);
  v45 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = *(_QWORD *)(a1 + 176);
  v46 = *(_QWORD *)(a1 + 168);
  v47 = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)(a1 + 192);
  v48 = *(_QWORD *)(a1 + 184);
  v49 = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(_QWORD *)(a1 + 208);
  v50 = *(_QWORD *)(a1 + 200);
  v51 = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *(_QWORD *)(a1 + 224);
  v52 = *(_QWORD *)(a1 + 216);
  v53 = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = *(_QWORD *)(a1 + 240);
  v54 = *(_QWORD *)(a1 + 232);
  v55 = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = &v39;
  v43 = 0;
  v23 = operator new(0x60uLL);
  v24 = 0;
  v39 = v23;
  v40 = v23;
  v41 = v23 + 6;
  do
  {
    v25 = *(_OWORD *)&(&v44)[2 * v24];
    *v23 = v25;
    if (*((_QWORD *)&v25 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    ++v24;
    ++v23;
  }
  while (v24 != 6);
  v40 = v23;
  for (i = 10; i != -2; i -= 2)
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100]((uint64_t)&(&v44)[i]);
  v30 = v39;
  for (j = v40; v30 != j; ++v30)
  {
    if (*(_QWORD *)v30)
    {
      if (v32)
      {
        v33 = (std::__shared_weak_count *)*((_QWORD *)v30 + 1);
        v44 = (void **)v32;
        v45 = v33;
        if (v33)
        {
          v34 = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        std::string::operator=((std::string *)(v32 + 328), a3);
        v36 = v45;
        if (v45)
        {
          v37 = (unint64_t *)&v45->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
    }
  }
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 2560), v29);
  v44 = (void **)&v39;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v44);
}

void sub_1DE4EB774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Encdec::StartFeedforward(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  kaldi::quasar::ComputeEngineItf **v8;
  uint64_t v9;
  kaldi::quasar::ComputeEngineItf **v10;
  const char *v11;
  int v12;
  int *v13;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  uint64_t v16;
  int *v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  std::vector<int>::pointer v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  char *v31;
  int *v32;
  int *v33;
  int v34;
  int v35;
  int v36;
  int *v37;
  std::vector<int>::pointer v38;
  uint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  int *v44;
  int *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  int *v50;
  int *v51;
  unsigned int v52;
  uint64_t v53;
  std::vector<int>::pointer v54;
  std::vector<int>::pointer v55;
  char *v56;
  void **v57;
  int64x2_t *v58;
  int64x2_t v59;
  uint64_t v60;
  int64x2_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  void **v72;
  std::vector<int>::pointer v73;
  int64x2_t *v74;
  int64x2_t v75;
  uint64_t v76;
  int64x2_t *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  std::vector<int>::pointer v88;
  std::vector<int>::pointer v89;
  std::vector<int>::pointer v90;
  int v91;
  void **v92;
  int64x2_t *v93;
  int64x2_t v94;
  uint64_t v95;
  int64x2_t *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  void **v107;
  uint64_t v108;
  _OWORD *v109;
  int64x2_t *v110;
  uint64_t v111;
  std::vector<int>::pointer v112;
  void **v113;
  int64x2_t *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  int64x2_t *v120;
  int64x2_t v121;
  uint64_t v122;
  int64x2_t *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  void **v134;
  int64x2_t v135;
  uint64_t v136;
  int64x2_t *v137;
  unint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  void **v146;
  uint64_t v147;
  _BYTE *v148;
  _BYTE *v149;
  char *v150;
  void **v151;
  int64x2_t *v152;
  int64x2_t v153;
  uint64_t v154;
  int64x2_t *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  void **v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _OWORD *v171;
  clockid_t v172;
  uint64_t v173;
  int64x2_t *v174;
  uint64_t *v175;
  uint64_t v176;
  int64x2_t *v177;
  int64x2_t v178;
  uint64_t v179;
  int64x2_t *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  std::string::size_type v186;
  uint64_t v187;
  __int128 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  clockid_t v193;
  uint64_t v194;
  kaldi::quasar::ComputeEngineBufferItf *v195;
  _QWORD *v196;
  void *v197;
  uint64_t value_high;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v202;
  int v203;
  int v204;
  int v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  int v211;
  void **v212;
  unint64_t v213;
  __int128 v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  __int128 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  void **v228;
  clockid_t v229;
  uint64_t *v230;
  uint64_t v231;
  int *v232;
  uint64_t v233;
  int *v234;
  void *v235;
  unint64_t v236;
  unint64_t v237;
  __int128 v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  __int128 v249;
  uint64_t v250;
  uint64_t v251;
  void *v252;
  uint64_t v253;
  int *v254;
  void *v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  void *v263;
  unint64_t v264;
  __int128 v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  char *v270;
  char *v271;
  uint64_t v272;
  __int128 v273;
  uint64_t v274;
  uint64_t v275;
  void *v276;
  uint64_t v277;
  int *v278;
  void *v279;
  unint64_t v280;
  unint64_t v281;
  __int128 v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  char *v289;
  char *v290;
  uint64_t v291;
  __int128 v292;
  uint64_t v293;
  uint64_t v294;
  void *v295;
  uint64_t v296;
  int *v297;
  void *v298;
  unint64_t v299;
  unint64_t v300;
  __int128 v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  char *v309;
  char *v310;
  uint64_t v311;
  __int128 v312;
  uint64_t v313;
  uint64_t v314;
  void *v315;
  uint64_t v316;
  uint64_t v317;
  int *v318;
  void *v319;
  unint64_t v320;
  unint64_t v321;
  __int128 v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  unint64_t v326;
  uint64_t v327;
  unint64_t v328;
  char *v329;
  char *v330;
  uint64_t v331;
  __int128 v332;
  uint64_t v333;
  uint64_t v334;
  void *v335;
  std::vector<int>::pointer v336;
  unint64_t v337;
  unint64_t v338;
  __int128 v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  unint64_t v345;
  char *v346;
  char *v347;
  uint64_t v348;
  __int128 v349;
  uint64_t v350;
  uint64_t v351;
  std::vector<int>::pointer v352;
  clockid_t v353;
  uint64_t *v354;
  uint64_t i;
  uint64_t v356;
  __int128 *v357;
  __int128 *v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  int64x2_t *v362;
  __int128 v363;
  uint64_t v364;
  unint64_t v365;
  __int128 v366;
  void **v367;
  unint64_t v368;
  unint64_t v369;
  __int128 v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  unint64_t v374;
  uint64_t v375;
  unint64_t v376;
  char *v377;
  char *v378;
  uint64_t v379;
  __int128 v380;
  uint64_t v381;
  uint64_t v382;
  void **v383;
  char **v384;
  uint64_t v385;
  uint64_t v386;
  int64x2_t *v387;
  void **v388;
  int64x2_t *v389;
  void **v390;
  unint64_t v391;
  void ***v392;
  char *v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t v397;
  char *v398;
  uint64_t v399;
  void ***v400;
  char *v401;
  char *v402;
  char *v403;
  __int128 v404;
  char *v405;
  void *v406;
  unint64_t v407;
  unint64_t v408;
  __int128 v409;
  uint64_t v410;
  unint64_t v411;
  uint64_t v412;
  unint64_t v413;
  uint64_t v414;
  unint64_t v415;
  char *v416;
  char *v417;
  uint64_t v418;
  __int128 v419;
  uint64_t v420;
  uint64_t v421;
  void *v422;
  char **v423;
  uint64_t v424;
  unint64_t v425;
  void *v426;
  uint64_t v427;
  void *v428;
  unint64_t v429;
  char *v430;
  char *v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  unint64_t v435;
  char *v436;
  uint64_t v437;
  char *v438;
  char *v439;
  char *v440;
  char *v441;
  __int128 v442;
  char *v443;
  char *v444;
  void **v445;
  uint64_t v446;
  std::vector<int>::pointer v447;
  char *v448;
  void *v449;
  int v450;
  char **v451;
  uint64_t v452;
  _DWORD *v453;
  void *v454;
  uint64_t v455;
  void *v456;
  uint64_t v457;
  _DWORD *v458;
  void *v459;
  unint64_t v460;
  char *v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  unint64_t v465;
  char *v466;
  uint64_t v467;
  char *v468;
  char *v469;
  char *v470;
  char *v471;
  __int128 v472;
  unint64_t v473;
  char *v474;
  uint64_t v475;
  unint64_t v476;
  uint64_t v477;
  unint64_t v478;
  char *v479;
  __int128 v480;
  char *v481;
  char *v482;
  void *v483;
  uint64_t v484;
  unint64_t j;
  int v486;
  uint64_t v487;
  uint64_t v488;
  int v489;
  int v490;
  int v491;
  uint64_t v492;
  _QWORD *v493;
  uint64_t v494;
  uint64_t v495;
  int v496;
  int v497;
  uint64_t v498;
  __int128 v499;
  __int128 *v500;
  __int128 v501;
  std::vector<int>::pointer v502;
  unint64_t v503;
  unint64_t v504;
  uint64_t v505;
  unint64_t v506;
  uint64_t v507;
  unint64_t v508;
  std::vector<int>::pointer v509;
  unint64_t v510;
  __int128 v511;
  uint64_t v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t v515;
  char *v516;
  char *v517;
  uint64_t v518;
  __int128 v519;
  uint64_t v520;
  uint64_t v521;
  std::vector<int>::pointer v522;
  _QWORD *v523;
  _QWORD *v524;
  uint64_t v525;
  int v526;
  uint64_t v527;
  uint64_t v528;
  _QWORD *v529;
  int v530;
  kaldi::quasar::ComputeEngineItf **v531;
  uint64_t v532;
  int v533;
  uint64_t v534;
  int64x2_t v535;
  double *v536;
  _QWORD *v537;
  __int128 __p;
  char *v539;
  char *v540;
  int64x2_t **v541;
  void **p_p;
  unint64_t v543;
  unint64_t v544;
  void *v545;
  int64x2_t *v546;
  int64x2_t *v547;
  void *v548;
  _BYTE *v549;
  uint64_t v550;
  std::vector<int> v551;
  _BYTE v552[48];
  void ***p_p_p;
  std::string v554;
  __int128 v555;
  std::vector<int> v556;
  __int128 v557;

  *((_QWORD *)&v557 + 1) = *MEMORY[0x1E0C80C00];
  v6 = a1 + 152;
  v7 = 232;
  if (*(_QWORD *)(a1 + 152))
  {
    v7 = 152;
    v8 = (kaldi::quasar::ComputeEngineItf **)(a1 + 152);
  }
  else
  {
    v8 = (kaldi::quasar::ComputeEngineItf **)(a1 + 232);
  }
  v534 = v7;
  if (*(_QWORD *)(a1 + 168))
    v9 = 168;
  else
    v9 = v7;
  if (*(_QWORD *)(a1 + 168))
    v10 = (kaldi::quasar::ComputeEngineItf **)(a1 + 168);
  else
    v10 = v8;
  std::string::basic_string[abi:ne180100]<0>(&__p, &byte_1DEBD87CE);
  v536 = (double *)(v6 + 2408);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v552, (double *)(v6 + 2408), v6 + 2456, &__p);
  if (SHIBYTE(v539) < 0)
    operator delete((void *)__p);
  if (a3)
  {
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "StartFeedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 961);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Model does not support n-best inputs", 36);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  memset(&v551, 0, sizeof(v551));
  v531 = v10;
  v532 = v9;
  if (*(_BYTE *)(a1 + 1343))
  {
    v12 = *(_DWORD *)(a1 + 716);
    v13 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v551.__end_cap_, 1uLL);
    begin = v551.__begin_;
    end = v551.__end_;
    v17 = &v13[v16];
    *v13 = v12 - 1;
    v18 = v13 + 1;
    while (end != begin)
    {
      v19 = *--end;
      *--v13 = v19;
    }
    v551.__begin_ = v13;
    v551.__end_ = v18;
    v551.__end_cap_.__value_ = v17;
    if (begin)
      operator delete(begin);
    v551.__end_ = v18;
    v20 = *(unsigned __int8 *)(a1 + 1343);
  }
  else
  {
    v18 = 0;
    v20 = 0;
  }
  v21 = *(_DWORD *)(a2 + 20);
  v22 = *(unsigned __int8 *)(a1 + 1344);
  v23 = *(_DWORD *)(a1 + 808) - (v22 + v20);
  if (v23 >= v21)
    v23 = *(_DWORD *)(a2 + 20);
  if (v23 >= 1)
  {
    v24 = 0;
    do
    {
      if (v21 <= v24 || !*(_DWORD *)(a2 + 16))
        kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x221, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v11);
      v25 = (int)*(float *)(*(_QWORD *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * v24);
      if (v18 >= v551.__end_cap_.__value_)
      {
        v26 = v551.__begin_;
        v27 = v18 - v551.__begin_;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v29 = (char *)v551.__end_cap_.__value_ - (char *)v551.__begin_;
        if (((char *)v551.__end_cap_.__value_ - (char *)v551.__begin_) >> 1 > v28)
          v28 = v29 >> 1;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
          v30 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v551.__end_cap_, v30);
          v26 = v551.__begin_;
          v18 = v551.__end_;
        }
        else
        {
          v31 = 0;
        }
        v32 = (int *)&v31[4 * v27];
        *v32 = v25;
        v33 = v32 + 1;
        while (v18 != v26)
        {
          v34 = *--v18;
          *--v32 = v34;
        }
        v551.__begin_ = v32;
        v551.__end_ = v33;
        v551.__end_cap_.__value_ = (int *)&v31[4 * v30];
        if (v26)
          operator delete(v26);
        v18 = v33;
      }
      else
      {
        *v18++ = v25;
      }
      v551.__end_ = v18;
      ++v24;
      v21 = *(_DWORD *)(a2 + 20);
      v22 = *(unsigned __int8 *)(a1 + 1344);
      v35 = *(_DWORD *)(a1 + 808) - (v22 + *(unsigned __int8 *)(a1 + 1343));
      if (v35 >= v21)
        v35 = *(_DWORD *)(a2 + 20);
    }
    while (v24 < v35);
  }
  if (v22)
  {
    v36 = *(_DWORD *)(a1 + 720) - 1;
    if (v18 >= v551.__end_cap_.__value_)
    {
      v38 = v551.__begin_;
      v39 = v18 - v551.__begin_;
      v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v41 = (char *)v551.__end_cap_.__value_ - (char *)v551.__begin_;
      if (((char *)v551.__end_cap_.__value_ - (char *)v551.__begin_) >> 1 > v40)
        v40 = v41 >> 1;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
        v42 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v42 = v40;
      if (v42)
      {
        v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v551.__end_cap_, v42);
        v38 = v551.__begin_;
        v18 = v551.__end_;
      }
      else
      {
        v43 = 0;
      }
      v44 = (int *)&v43[4 * v39];
      v45 = (int *)&v43[4 * v42];
      *v44 = v36;
      v37 = v44 + 1;
      while (v18 != v38)
      {
        v46 = *--v18;
        *--v44 = v46;
      }
      v551.__begin_ = v44;
      v551.__end_ = v37;
      v551.__end_cap_.__value_ = v45;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *v18 = v36;
      v37 = v18 + 1;
    }
    v551.__end_ = v37;
    v18 = v37;
  }
  v548 = 0;
  v549 = 0;
  v550 = 0;
  v47 = (char *)v18 - (char *)v551.__begin_;
  v48 = (unint64_t)((char *)v18 - (char *)v551.__begin_) >> 2;
  v49 = *(_DWORD *)(a1 + 752);
  v50 = *(int **)(a1 + 760);
  v51 = *(int **)(a1 + 768);
  if (v50 == v51)
  {
    v52 = 0;
LABEL_71:
    if (v49)
      goto LABEL_74;
  }
  else
  {
    v52 = 0;
    while (*v50 < (int)v48)
    {
      ++v52;
      if (++v50 == v51)
        goto LABEL_71;
    }
    v49 = *v50;
    if (*v50)
    {
LABEL_74:
      LODWORD(__p) = 0;
      std::vector<float>::resize((uint64_t)&v548, (int)(v47 >> 2), &__p);
      if (v49 >= 1)
      {
        if (v49 < (int)v48)
          LODWORD(v48) = v49;
        std::vector<float>::resize((uint64_t)&v548, v49, &kaldi::quasar::kSmallLogProb);
        LODWORD(__p) = 0;
        std::vector<int>::resize(&v551, v49, (std::vector<int>::const_reference)&__p);
      }
    }
  }
  v545 = 0;
  v546 = 0;
  v547 = 0;
  if (*(_BYTE *)(a1 + 1346))
  {
    v53 = *(_QWORD *)(a1 + v532);
    v55 = v551.__begin_;
    v54 = v551.__end_;
    v56 = (char *)operator new(0x10uLL);
    v556.__end_ = (std::vector<int>::pointer)(v56 + 16);
    v556.__end_cap_.__value_ = (int *)(v56 + 16);
    *(_QWORD *)v56 = (int)(v54 - v55);
    *((_QWORD *)v56 + 1) = 1;
    v556.__begin_ = (std::vector<int>::pointer)v56;
    (*(void (**)(void ***__return_ptr, uint64_t, std::vector<int> *))(*(_QWORD *)v53 + 48))(&p_p, v53, &v556);
    if (*(char *)(a1 + 1551) < 0)
      std::string::__init_copy_ctor_external(&v554, *(const std::string::value_type **)(a1 + 1528), *(_QWORD *)(a1 + 1536));
    else
      v554 = *(std::string *)(a1 + 1528);
    v57 = p_p;
    p_p = 0;
    *(_QWORD *)&v555 = v57;
    v58 = v546;
    if (v546 >= v547)
    {
      v62 = ((char *)v546 - (_BYTE *)v545) >> 5;
      v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v64 = (char *)v547 - (_BYTE *)v545;
      if (((char *)v547 - (_BYTE *)v545) >> 4 > v63)
        v63 = v64 >> 4;
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFE0)
        v65 = 0x7FFFFFFFFFFFFFFLL;
      else
        v65 = v63;
      v541 = &v547;
      v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v547, v65);
      v67 = &v66[32 * v62];
      *(_QWORD *)&__p = v66;
      *((_QWORD *)&__p + 1) = v67;
      v540 = &v66[32 * v68];
      v69 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
      *((_QWORD *)v67 + 2) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
      *(_OWORD *)v67 = v69;
      memset(&v554, 0, sizeof(v554));
      v70 = v555;
      *(_QWORD *)&v555 = 0;
      *((_QWORD *)v67 + 3) = v70;
      v539 = v67 + 32;
      std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)&v545, &__p);
      v61 = v546;
      std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    }
    else
    {
      v59 = *(int64x2_t *)&v554.__r_.__value_.__l.__data_;
      v546[1].i64[0] = v554.__r_.__value_.__r.__words[2];
      *v58 = v59;
      memset(&v554, 0, sizeof(v554));
      v60 = v555;
      *(_QWORD *)&v555 = 0;
      v58[1].i64[1] = v60;
      v61 = v58 + 2;
    }
    v546 = v61;
    v71 = v555;
    *(_QWORD *)&v555 = 0;
    if (v71)
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
    if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v554.__r_.__value_.__l.__data_);
    v72 = p_p;
    p_p = 0;
    if (v72)
      (*((void (**)(void **))*v72 + 1))(v72);
    if (v556.__begin_)
    {
      v556.__end_ = v556.__begin_;
      operator delete(v556.__begin_);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v546[-1].i64[1] + 80))(v546[-1].i64[1]);
  }
  else
  {
    (*(void (**)(std::vector<int> *__return_ptr, _QWORD, std::vector<int> *, _QWORD))(**(_QWORD **)(a1 + v532)
                                                                                               + 16))(&v556, *(_QWORD *)(a1 + v532), &v551, *(unsigned __int8 *)(a1 + 1347));
    if (*(char *)(a1 + 1551) < 0)
      std::string::__init_copy_ctor_external(&v554, *(const std::string::value_type **)(a1 + 1528), *(_QWORD *)(a1 + 1536));
    else
      v554 = *(std::string *)(a1 + 1528);
    v73 = v556.__begin_;
    v556.__begin_ = 0;
    *(_QWORD *)&v555 = v73;
    v74 = v546;
    if (v546 >= v547)
    {
      v78 = ((char *)v546 - (_BYTE *)v545) >> 5;
      v79 = v78 + 1;
      if ((unint64_t)(v78 + 1) >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v80 = (char *)v547 - (_BYTE *)v545;
      if (((char *)v547 - (_BYTE *)v545) >> 4 > v79)
        v79 = v80 >> 4;
      if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFE0)
        v81 = 0x7FFFFFFFFFFFFFFLL;
      else
        v81 = v79;
      v541 = &v547;
      v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v547, v81);
      v83 = &v82[32 * v78];
      *(_QWORD *)&__p = v82;
      *((_QWORD *)&__p + 1) = v83;
      v540 = &v82[32 * v84];
      v85 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
      *((_QWORD *)v83 + 2) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
      *(_OWORD *)v83 = v85;
      memset(&v554, 0, sizeof(v554));
      v86 = v555;
      *(_QWORD *)&v555 = 0;
      *((_QWORD *)v83 + 3) = v86;
      v539 = v83 + 32;
      std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)&v545, &__p);
      v77 = v546;
      std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    }
    else
    {
      v75 = *(int64x2_t *)&v554.__r_.__value_.__l.__data_;
      v546[1].i64[0] = v554.__r_.__value_.__r.__words[2];
      *v74 = v75;
      memset(&v554, 0, sizeof(v554));
      v76 = v555;
      *(_QWORD *)&v555 = 0;
      v74[1].i64[1] = v76;
      v77 = v74 + 2;
    }
    v546 = v77;
    v87 = v555;
    *(_QWORD *)&v555 = 0;
    if (v87)
      (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
    if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v554.__r_.__value_.__l.__data_);
    v88 = v556.__begin_;
    v556.__begin_ = 0;
    if (v88)
      (*(void (**)(std::vector<int>::pointer))(*(_QWORD *)v88 + 8))(v88);
  }
  if (*(_BYTE *)(a1 + 1349))
  {
    std::vector<int>::vector(&v556, v551.__end_ - v551.__begin_);
    v89 = v556.__begin_;
    v90 = v556.__end_;
    if (v556.__begin_ != v556.__end_)
    {
      v91 = 0;
      do
        *v89++ = v91++;
      while (v89 != v90);
    }
    (*(void (**)(void ***__return_ptr, kaldi::quasar::ComputeEngineItf *, std::vector<int> *, _QWORD))(*(_QWORD *)*v531 + 16))(&p_p, *v531, &v556, 0);
    if (*(char *)(a1 + 1599) < 0)
      std::string::__init_copy_ctor_external(&v554, *(const std::string::value_type **)(a1 + 1576), *(_QWORD *)(a1 + 1584));
    else
      v554 = *(std::string *)(a1 + 1576);
    v92 = p_p;
    p_p = 0;
    *(_QWORD *)&v555 = v92;
    v93 = v546;
    if (v546 >= v547)
    {
      v97 = ((char *)v546 - (_BYTE *)v545) >> 5;
      v98 = v97 + 1;
      if ((unint64_t)(v97 + 1) >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v99 = (char *)v547 - (_BYTE *)v545;
      if (((char *)v547 - (_BYTE *)v545) >> 4 > v98)
        v98 = v99 >> 4;
      if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFE0)
        v100 = 0x7FFFFFFFFFFFFFFLL;
      else
        v100 = v98;
      v541 = &v547;
      v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v547, v100);
      v102 = &v101[32 * v97];
      *(_QWORD *)&__p = v101;
      *((_QWORD *)&__p + 1) = v102;
      v540 = &v101[32 * v103];
      v104 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
      *((_QWORD *)v102 + 2) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
      *(_OWORD *)v102 = v104;
      memset(&v554, 0, sizeof(v554));
      v105 = v555;
      *(_QWORD *)&v555 = 0;
      *((_QWORD *)v102 + 3) = v105;
      v539 = v102 + 32;
      std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)&v545, &__p);
      v96 = v546;
      std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    }
    else
    {
      v94 = *(int64x2_t *)&v554.__r_.__value_.__l.__data_;
      v546[1].i64[0] = v554.__r_.__value_.__r.__words[2];
      *v93 = v94;
      memset(&v554, 0, sizeof(v554));
      v95 = v555;
      *(_QWORD *)&v555 = 0;
      v93[1].i64[1] = v95;
      v96 = v93 + 2;
    }
    v546 = v96;
    v106 = v555;
    *(_QWORD *)&v555 = 0;
    if (v106)
      (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
    if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v554.__r_.__value_.__l.__data_);
    v107 = p_p;
    p_p = 0;
    if (v107)
      (*((void (**)(void **))*v107 + 1))(v107);
    if (v556.__begin_)
    {
      v556.__end_ = v556.__begin_;
      operator delete(v556.__begin_);
    }
  }
  if (*(_BYTE *)(a1 + 1341))
  {
    memset(&v556, 0, sizeof(v556));
    v108 = *(_QWORD *)(a1 + 168);
    v109 = (_OWORD *)(a1 + 1720);
    if (*(char *)(a1 + 1743) < 0)
    {
      std::string::__init_copy_ctor_external(&v554, *(const std::string::value_type **)(a1 + 1720), *(_QWORD *)(a1 + 1728));
    }
    else
    {
      *(_OWORD *)&v554.__r_.__value_.__l.__data_ = *v109;
      v554.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 1736);
    }
    __p = 0uLL;
    v539 = 0;
    p_p = (void **)&__p;
    LOBYTE(v543) = 0;
    *(_QWORD *)&__p = operator new(0x18uLL);
    *((_QWORD *)&__p + 1) = __p;
    v539 = (char *)(__p + 24);
    *((_QWORD *)&__p + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v539, (__int128 *)&v554, &v555, (std::string *)__p);
    p_p = 0;
    v543 = 0;
    v544 = 0;
    (*(void (**)(uint64_t, void **, __int128 *, void ***, std::vector<int> *))(*(_QWORD *)v108 + 112))(v108, &v545, &__p, &p_p, &v556);
    p_p_p = &p_p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
    p_p = (void **)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
    if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v554.__r_.__value_.__l.__data_);
    v110 = (int64x2_t *)v545;
    v111 = (uint64_t)v546;
    if (v546 != v545)
    {
      do
      {
        v111 -= 32;
        std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100]((uint64_t)&v547, v111);
      }
      while ((int64x2_t *)v111 != v110);
    }
    v546 = v110;
    if (*(_DWORD *)(a1 + 948))
    {
      if (*(_DWORD *)(a1 + 944) == *(_DWORD *)(a1 + 952))
      {
        v112 = v556.__begin_;
        if (*(char *)(a1 + 1743) < 0)
        {
          std::string::__init_copy_ctor_external(&v554, *(const std::string::value_type **)(a1 + 1720), *(_QWORD *)(a1 + 1728));
        }
        else
        {
          *(_OWORD *)&v554.__r_.__value_.__l.__data_ = *v109;
          v554.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 1736);
        }
        v119 = *(_QWORD *)v112;
        *(_QWORD *)v112 = 0;
        *(_QWORD *)&v555 = v119;
        v120 = v546;
        if (v546 >= v547)
        {
          v124 = ((char *)v546 - (_BYTE *)v545) >> 5;
          v125 = v124 + 1;
          if ((unint64_t)(v124 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v126 = (char *)v547 - (_BYTE *)v545;
          if (((char *)v547 - (_BYTE *)v545) >> 4 > v125)
            v125 = v126 >> 4;
          if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFE0)
            v127 = 0x7FFFFFFFFFFFFFFLL;
          else
            v127 = v125;
          v541 = &v547;
          v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v547, v127);
          v129 = &v128[32 * v124];
          *(_QWORD *)&__p = v128;
          *((_QWORD *)&__p + 1) = v129;
          v540 = &v128[32 * v130];
          v131 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
          *((_QWORD *)v129 + 2) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
          *(_OWORD *)v129 = v131;
          memset(&v554, 0, sizeof(v554));
          v132 = v555;
          *(_QWORD *)&v555 = 0;
          *((_QWORD *)v129 + 3) = v132;
          v539 = v129 + 32;
          std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)&v545, &__p);
          v123 = v546;
          std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
        }
        else
        {
          v121 = *(int64x2_t *)&v554.__r_.__value_.__l.__data_;
          v546[1].i64[0] = v554.__r_.__value_.__r.__words[2];
          *v120 = v121;
          memset(&v554, 0, sizeof(v554));
          v122 = v555;
          *(_QWORD *)&v555 = 0;
          v120[1].i64[1] = v122;
          v123 = v120 + 2;
        }
        v546 = v123;
        v133 = v555;
        *(_QWORD *)&v555 = 0;
        if (v133)
          (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
        if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v554.__r_.__value_.__l.__data_);
LABEL_196:
        *(_QWORD *)&__p = &v556;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        goto LABEL_197;
      }
      kaldi::quasar::ComputeEngineItf::CreateCopyFloat(*v8, *(const kaldi::quasar::ComputeEngineBufferItf **)v556.__begin_, &p_p);
      if (*(char *)(a1 + 1743) < 0)
      {
        std::string::__init_copy_ctor_external(&v554, *(const std::string::value_type **)(a1 + 1720), *(_QWORD *)(a1 + 1728));
      }
      else
      {
        *(_OWORD *)&v554.__r_.__value_.__l.__data_ = *v109;
        v554.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 1736);
      }
      v134 = p_p;
      p_p = 0;
      *(_QWORD *)&v555 = v134;
      v114 = v546;
      if (v546 < v547)
        goto LABEL_182;
      v115 = ((char *)v546 - (_BYTE *)v545) >> 5;
      v138 = v115 + 1;
      if ((unint64_t)(v115 + 1) >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v139 = (char *)v547 - (_BYTE *)v545;
      if (((char *)v547 - (_BYTE *)v545) >> 4 > v138)
        v138 = v139 >> 4;
      if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFE0)
        v118 = 0x7FFFFFFFFFFFFFFLL;
      else
        v118 = v138;
    }
    else
    {
      (*(void (**)(void ***__return_ptr, kaldi::quasar::ComputeEngineItf *, _QWORD))(*(_QWORD *)*v8 + 72))(&p_p, *v8, *(_QWORD *)v556.__begin_);
      if (*(char *)(a1 + 1743) < 0)
      {
        std::string::__init_copy_ctor_external(&v554, *(const std::string::value_type **)(a1 + 1720), *(_QWORD *)(a1 + 1728));
      }
      else
      {
        *(_OWORD *)&v554.__r_.__value_.__l.__data_ = *v109;
        v554.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 1736);
      }
      v113 = p_p;
      p_p = 0;
      *(_QWORD *)&v555 = v113;
      v114 = v546;
      if (v546 < v547)
      {
LABEL_182:
        v135 = *(int64x2_t *)&v554.__r_.__value_.__l.__data_;
        v114[1].i64[0] = v554.__r_.__value_.__r.__words[2];
        *v114 = v135;
        memset(&v554, 0, sizeof(v554));
        v136 = v555;
        *(_QWORD *)&v555 = 0;
        v114[1].i64[1] = v136;
        v137 = v114 + 2;
LABEL_190:
        v546 = v137;
        v145 = v555;
        *(_QWORD *)&v555 = 0;
        if (v145)
          (*(void (**)(uint64_t))(*(_QWORD *)v145 + 8))(v145);
        if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v554.__r_.__value_.__l.__data_);
        v146 = p_p;
        p_p = 0;
        if (v146)
          (*((void (**)(void **))*v146 + 1))(v146);
        goto LABEL_196;
      }
      v115 = ((char *)v546 - (_BYTE *)v545) >> 5;
      v116 = v115 + 1;
      if ((unint64_t)(v115 + 1) >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v117 = (char *)v547 - (_BYTE *)v545;
      if (((char *)v547 - (_BYTE *)v545) >> 4 > v116)
        v116 = v117 >> 4;
      if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFE0)
        v118 = 0x7FFFFFFFFFFFFFFLL;
      else
        v118 = v116;
    }
    v541 = &v547;
    v140 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v547, v118);
    v141 = &v140[32 * v115];
    *(_QWORD *)&__p = v140;
    *((_QWORD *)&__p + 1) = v141;
    v540 = &v140[32 * v142];
    v143 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
    *((_QWORD *)v141 + 2) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
    *(_OWORD *)v141 = v143;
    memset(&v554, 0, sizeof(v554));
    v144 = v555;
    *(_QWORD *)&v555 = 0;
    *((_QWORD *)v141 + 3) = v144;
    v539 = v141 + 32;
    std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)&v545, &__p);
    v137 = v546;
    std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    goto LABEL_190;
  }
LABEL_197:
  if (v49)
  {
    v147 = *(_QWORD *)(a1 + v534);
    v149 = v548;
    v148 = v549;
    v150 = (char *)operator new(0x10uLL);
    v556.__end_ = (std::vector<int>::pointer)(v150 + 16);
    v556.__end_cap_.__value_ = (int *)(v150 + 16);
    *(_QWORD *)v150 = (int)((v148 - v149) >> 2);
    *((_QWORD *)v150 + 1) = 1;
    v556.__begin_ = (std::vector<int>::pointer)v150;
    (*(void (**)(void ***__return_ptr, uint64_t, std::vector<int> *))(*(_QWORD *)v147 + 56))(&p_p, v147, &v556);
    if (*(char *)(a1 + 1623) < 0)
      std::string::__init_copy_ctor_external(&v554, *(const std::string::value_type **)(a1 + 1600), *(_QWORD *)(a1 + 1608));
    else
      v554 = *(std::string *)(a1 + 1600);
    v151 = p_p;
    p_p = 0;
    *(_QWORD *)&v555 = v151;
    v152 = v546;
    if (v546 >= v547)
    {
      v156 = ((char *)v546 - (_BYTE *)v545) >> 5;
      v157 = v156 + 1;
      if ((unint64_t)(v156 + 1) >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v158 = (char *)v547 - (_BYTE *)v545;
      if (((char *)v547 - (_BYTE *)v545) >> 4 > v157)
        v157 = v158 >> 4;
      if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFE0)
        v159 = 0x7FFFFFFFFFFFFFFLL;
      else
        v159 = v157;
      v541 = &v547;
      v160 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v547, v159);
      v161 = &v160[32 * v156];
      *(_QWORD *)&__p = v160;
      *((_QWORD *)&__p + 1) = v161;
      v540 = &v160[32 * v162];
      v163 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
      *((_QWORD *)v161 + 2) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
      *(_OWORD *)v161 = v163;
      memset(&v554, 0, sizeof(v554));
      v164 = v555;
      *(_QWORD *)&v555 = 0;
      *((_QWORD *)v161 + 3) = v164;
      v539 = v161 + 32;
      std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)&v545, &__p);
      v155 = v546;
      std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    }
    else
    {
      v153 = *(int64x2_t *)&v554.__r_.__value_.__l.__data_;
      v546[1].i64[0] = v554.__r_.__value_.__r.__words[2];
      *v152 = v153;
      memset(&v554, 0, sizeof(v554));
      v154 = v555;
      *(_QWORD *)&v555 = 0;
      v152[1].i64[1] = v154;
      v155 = v152 + 2;
    }
    v546 = v155;
    v165 = v555;
    *(_QWORD *)&v555 = 0;
    if (v165)
      (*(void (**)(uint64_t))(*(_QWORD *)v165 + 8))(v165);
    if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v554.__r_.__value_.__l.__data_);
    v166 = p_p;
    p_p = 0;
    if (v166)
      (*((void (**)(void **))*v166 + 1))(v166);
    if (v556.__begin_)
    {
      v556.__end_ = v556.__begin_;
      operator delete(v556.__begin_);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v546[-1].i64[1] + 88))(v546[-1].i64[1]);
    if (!*(_DWORD *)(a1 + 948))
    {
      (*(void (**)(__int128 *__return_ptr, kaldi::quasar::ComputeEngineItf *, uint64_t))(*(_QWORD *)*v8 + 72))(&__p, *v8, v546[-1].i64[1]);
      v167 = __p;
      *(_QWORD *)&__p = 0;
      v168 = v546[-1].i64[1];
      v546[-1].i64[1] = v167;
      if (v168)
        (*(void (**)(uint64_t))(*(_QWORD *)v168 + 8))(v168);
      v169 = __p;
      *(_QWORD *)&__p = 0;
      if (v169)
        (*(void (**)(uint64_t))(*(_QWORD *)v169 + 8))(v169);
    }
  }
  if (*(_QWORD *)(a1 + 312))
  {
    std::string::basic_string[abi:ne180100]<0>(&v554, &byte_1DEBD87CE);
    kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&__p, v536, a1 + 2624, (__int128 *)&v554);
    if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v554.__r_.__value_.__l.__data_);
    v170 = *(_QWORD *)(a1 + 232);
    v171 = (_OWORD *)(a1 + 1744);
    if (*(char *)(a1 + 1767) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v556, *(const std::string::value_type **)(a1 + 1744), *(_QWORD *)(a1 + 1752));
    }
    else
    {
      *(_OWORD *)&v556.__begin_ = *v171;
      v556.__end_cap_.__value_ = *(int **)(a1 + 1760);
    }
    memset(&v554, 0, sizeof(v554));
    p_p = (void **)&v554;
    LOBYTE(v543) = 0;
    v554.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v554.__r_.__value_.__l.__size_ = v554.__r_.__value_.__r.__words[0];
    v554.__r_.__value_.__r.__words[2] = v554.__r_.__value_.__r.__words[0] + 24;
    v554.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v554.__r_.__value_.__r.__words[2], (__int128 *)&v556, &v557, (std::string *)v554.__r_.__value_.__l.__data_);
    p_p = 0;
    v543 = 0;
    v544 = 0;
    (*(void (**)(uint64_t, void **, std::string *, void ***, uint64_t))(*(_QWORD *)v170 + 112))(v170, &v545, &v554, &p_p, a1 + 1360);
    p_p_p = &p_p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
    p_p = (void **)&v554;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
    if (SHIBYTE(v556.__end_cap_.__value_) < 0)
      operator delete(v556.__begin_);
    if (*(_QWORD *)v6)
    {
      v174 = (int64x2_t *)v545;
      v173 = (uint64_t)v546;
      if (v546 != v545)
      {
        do
        {
          v173 -= 32;
          std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100]((uint64_t)&v547, v173);
        }
        while ((int64x2_t *)v173 != v174);
      }
      v546 = v174;
      v175 = *(uint64_t **)(a1 + 1360);
      if (*(char *)(a1 + 1767) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v556, *(const std::string::value_type **)(a1 + 1744), *(_QWORD *)(a1 + 1752));
      }
      else
      {
        *(_OWORD *)&v556.__begin_ = *v171;
        v556.__end_cap_.__value_ = *(int **)(a1 + 1760);
      }
      v176 = *v175;
      *v175 = 0;
      *(_QWORD *)&v557 = v176;
      v177 = v546;
      if (v546 >= v547)
      {
        v181 = ((char *)v546 - (_BYTE *)v545) >> 5;
        v182 = v181 + 1;
        if ((unint64_t)(v181 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v183 = (char *)v547 - (_BYTE *)v545;
        if (((char *)v547 - (_BYTE *)v545) >> 4 > v182)
          v182 = v183 >> 4;
        if ((unint64_t)v183 >= 0x7FFFFFFFFFFFFFE0)
          v184 = 0x7FFFFFFFFFFFFFFLL;
        else
          v184 = v182;
        *((_QWORD *)&v555 + 1) = &v547;
        v185 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v547, v184);
        v186 = (std::string::size_type)&v185[32 * v181];
        v554.__r_.__value_.__r.__words[0] = (std::string::size_type)v185;
        v554.__r_.__value_.__l.__size_ = v186;
        *(_QWORD *)&v555 = &v185[32 * v187];
        v188 = *(_OWORD *)&v556.__begin_;
        *(_QWORD *)(v186 + 16) = v556.__end_cap_.__value_;
        *(_OWORD *)v186 = v188;
        memset(&v556, 0, sizeof(v556));
        v189 = v557;
        *(_QWORD *)&v557 = 0;
        *(_QWORD *)(v186 + 24) = v189;
        v554.__r_.__value_.__r.__words[2] = v186 + 32;
        std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)&v545, &v554);
        v180 = v546;
        std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&v554.__r_.__value_.__l.__data_);
      }
      else
      {
        v178 = *(int64x2_t *)&v556.__begin_;
        v546[1].i64[0] = (uint64_t)v556.__end_cap_.__value_;
        *v177 = v178;
        memset(&v556, 0, sizeof(v556));
        v179 = v557;
        *(_QWORD *)&v557 = 0;
        v177[1].i64[1] = v179;
        v180 = v177 + 2;
      }
      v546 = v180;
      v190 = v557;
      *(_QWORD *)&v557 = 0;
      if (v190)
        (*(void (**)(uint64_t))(*(_QWORD *)v190 + 8))(v190);
      if (SHIBYTE(v556.__end_cap_.__value_) < 0)
        operator delete(v556.__begin_);
    }
    kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&__p, v172);
  }
  if (*(_QWORD *)v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v554, &byte_1DEBD87CE);
    kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&__p, v536, a1 + 2616, (__int128 *)&v554);
    if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v554.__r_.__value_.__l.__data_);
    v191 = *(_QWORD *)(a1 + 784);
    v192 = *(_QWORD *)(a1 + v534);
    if (v191 == *(_QWORD *)(a1 + 792))
    {
      memset(&v554, 0, sizeof(v554));
      (*(void (**)(uint64_t, void **, uint64_t, std::string *, uint64_t))(*(_QWORD *)v192 + 112))(v192, &v545, a1 + 1480, &v554, a1 + 1360);
      v556.__begin_ = (std::vector<int>::pointer)&v554;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v556);
    }
    else
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), (const void **)(v191 + 24 * v52), (uint64_t)&v554);
      memset(&v556, 0, sizeof(v556));
      (*(void (**)(uint64_t, std::string *, void **, uint64_t, std::vector<int> *, uint64_t))(*(_QWORD *)v192 + 136))(v192, &v554, &v545, a1 + 1480, &v556, a1 + 1360);
      p_p = (void **)&v556;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
      if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v554.__r_.__value_.__l.__data_);
    }
    kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&__p, v193);
  }
  v533 = v49;
  if (*(_QWORD *)(a1 + 288))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, &byte_1DEBD87CE);
    kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&v554, v536, a1 + 2632, &__p);
    if (SHIBYTE(v539) < 0)
      operator delete((void *)__p);
    v194 = 0;
    p_p = 0;
    v543 = 0;
    v544 = 0;
    if (*(_DWORD *)(a1 + 948)
      || ((*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + v534) + 80))(&__p, *(_QWORD *)(a1 + v534), **(_QWORD **)(a1 + 1360)), v194 = __p, v195 = (kaldi::quasar::ComputeEngineBufferItf *)__p, *(_DWORD *)(a1 + 948)))
    {
      v195 = **(kaldi::quasar::ComputeEngineBufferItf ***)(a1 + 1360);
    }
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "StartFeedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1070, 3);
      v196 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Encoder Out: ", 13);
      kaldi::quasar::ComputeEngineBufferItf::GetShapeString(v195, &v556);
      if (SHIBYTE(v556.__end_cap_.__value_) >= 0)
        v197 = &v556;
      else
        v197 = v556.__begin_;
      if (SHIBYTE(v556.__end_cap_.__value_) >= 0)
        value_high = HIBYTE(v556.__end_cap_.__value_);
      else
        value_high = (uint64_t)v556.__end_;
      v199 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, (uint64_t)v197, value_high);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)" [ ", 3);
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, _QWORD))(*(_QWORD *)v195 + 112))(v195, 0);
      v200 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)" ", 1);
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(_QWORD *)v195 + 112))(v195, 1);
      v201 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v201, (uint64_t)" ", 1);
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(_QWORD *)v195 + 112))(v195, 2);
      v202 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v202, (uint64_t)" ...", 4);
      if (SHIBYTE(v556.__end_cap_.__value_) < 0)
        operator delete(v556.__begin_);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    if ((*(unsigned int (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v195 + 144))(v195) != 3)
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "StartFeedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1076);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unexpected tensor rank ", 23);
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v195 + 144))(v195);
      v529 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v529, (uint64_t)" for encoder output", 19);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    v203 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *, _QWORD))(*(_QWORD *)v195 + 152))(v195, 0);
    v204 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(_QWORD *)v195 + 152))(v195, 1);
    v205 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(_QWORD *)v195 + 152))(v195, 2);
    v206 = *(_QWORD *)(a1 + 216);
    v207 = operator new(0x18uLL);
    *((_QWORD *)&__p + 1) = v207 + 3;
    v539 = (char *)(v207 + 3);
    *v207 = v203;
    v207[1] = (int)v48;
    v207[2] = v205;
    *(_QWORD *)&__p = v207;
    (*(void (**)(void ****__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v206 + 56))(&p_p_p, v206, &__p);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    if (v203 >= 1)
    {
      v208 = 0;
      v209 = 0;
      v210 = v48 * v205;
      v211 = v204 * v205;
      do
      {
        ((void (*)(void ***, kaldi::quasar::ComputeEngineBufferItf *, uint64_t, _QWORD, uint64_t))(*p_p_p)[9])(p_p_p, v195, v209, (v210 + v209), v208);
        v209 = (v209 + v211);
        v208 = (v208 + v210);
        --v203;
      }
      while (v203);
    }
    if (*(char *)(a1 + 1479) < 0)
      std::string::__init_copy_ctor_external((std::string *)&v556, *(const std::string::value_type **)(a1 + 1456), *(_QWORD *)(a1 + 1464));
    else
      v556 = *(std::vector<int> *)(a1 + 1456);
    v212 = (void **)p_p_p;
    p_p_p = 0;
    *(_QWORD *)&v557 = v212;
    v213 = v543;
    if (v543 >= v544)
    {
      v217 = (uint64_t)(v543 - (_QWORD)p_p) >> 5;
      v218 = v217 + 1;
      if ((unint64_t)(v217 + 1) >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v219 = v544 - (_QWORD)p_p;
      if ((uint64_t)(v544 - (_QWORD)p_p) >> 4 > v218)
        v218 = v219 >> 4;
      if ((unint64_t)v219 >= 0x7FFFFFFFFFFFFFE0)
        v220 = 0x7FFFFFFFFFFFFFFLL;
      else
        v220 = v218;
      v541 = (int64x2_t **)&v544;
      v221 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v544, v220);
      v222 = &v221[32 * v217];
      *(_QWORD *)&__p = v221;
      *((_QWORD *)&__p + 1) = v222;
      v540 = &v221[32 * v223];
      v224 = *(_OWORD *)&v556.__begin_;
      *((_QWORD *)v222 + 2) = v556.__end_cap_.__value_;
      *(_OWORD *)v222 = v224;
      memset(&v556, 0, sizeof(v556));
      v225 = v557;
      *(_QWORD *)&v557 = 0;
      *((_QWORD *)v222 + 3) = v225;
      v539 = v222 + 32;
      std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)&p_p, &__p);
      v216 = v543;
      std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    }
    else
    {
      v214 = *(_OWORD *)&v556.__begin_;
      *(_QWORD *)(v543 + 16) = v556.__end_cap_.__value_;
      *(_OWORD *)v213 = v214;
      memset(&v556, 0, sizeof(v556));
      v215 = v557;
      *(_QWORD *)&v557 = 0;
      *(_QWORD *)(v213 + 24) = v215;
      v216 = v213 + 32;
    }
    v543 = v216;
    v226 = v557;
    *(_QWORD *)&v557 = 0;
    if (v226)
      (*(void (**)(uint64_t))(*(_QWORD *)v226 + 8))(v226);
    if (SHIBYTE(v556.__end_cap_.__value_) < 0)
      operator delete(v556.__begin_);
    v227 = *(_QWORD *)(a1 + 216);
    __p = 0uLL;
    v539 = 0;
    (*(void (**)(uint64_t, void ***, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v227 + 112))(v227, &p_p, a1 + 1840, &__p, a1 + 1360);
    v556.__begin_ = (std::vector<int>::pointer)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v556);
    v228 = (void **)p_p_p;
    p_p_p = 0;
    if (v228)
      (*((void (**)(void **))*v228 + 1))(v228);
    if (v194)
      (*(void (**)(uint64_t))(*(_QWORD *)v194 + 8))(v194);
    *(_QWORD *)&__p = &p_p;
    std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&v554, v229);
  }
  *(_QWORD *)&__p = &v545;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v230 = (uint64_t *)(a1 + 1384);
  *(_DWORD *)(a1 + 1916) = (*(_QWORD *)(a1 + 1392) - *(_QWORD *)(a1 + 1384)) >> 5;
  if (!*(_BYTE *)(a1 + 1341))
  {
    v233 = *(_QWORD *)(a1 + 184);
    v234 = (int *)operator new(8uLL);
    v556.__begin_ = v234;
    *(_QWORD *)v234 = 1;
    v556.__end_ = v234 + 2;
    v556.__end_cap_.__value_ = v234 + 2;
    (*(void (**)(void **__return_ptr, uint64_t, std::vector<int> *))(*(_QWORD *)v233 + 56))(&v545, v233, &v556);
    if (*(char *)(a1 + 1575) < 0)
      std::string::__init_copy_ctor_external(&v554, *(const std::string::value_type **)(a1 + 1552), *(_QWORD *)(a1 + 1560));
    else
      v554 = *(std::string *)(a1 + 1552);
    v263 = v545;
    v545 = 0;
    *(_QWORD *)&v555 = v263;
    v256 = *(_QWORD *)(a1 + 1392);
    v264 = *(_QWORD *)(a1 + 1400);
    if (v256 >= v264)
    {
      v258 = (uint64_t)(v256 - *v230) >> 5;
      v268 = v258 + 1;
      if ((unint64_t)(v258 + 1) >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v260 = a1 + 1400;
      v269 = v264 - *v230;
      if (v269 >> 4 > v268)
        v268 = v269 >> 4;
      if ((unint64_t)v269 >= 0x7FFFFFFFFFFFFFE0)
        v262 = 0x7FFFFFFFFFFFFFFLL;
      else
        v262 = v268;
      goto LABEL_344;
    }
LABEL_337:
    v265 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
    *(_QWORD *)(v256 + 16) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
    *(_OWORD *)v256 = v265;
    memset(&v554, 0, sizeof(v554));
    v266 = v555;
    *(_QWORD *)&v555 = 0;
    *(_QWORD *)(v256 + 24) = v266;
    v267 = v256 + 32;
    *(_QWORD *)(a1 + 1392) = v256 + 32;
    goto LABEL_345;
  }
  v231 = *(_QWORD *)(a1 + 184);
  v232 = (int *)operator new(8uLL);
  v556.__begin_ = v232;
  *(_QWORD *)v232 = 1;
  v556.__end_ = v232 + 2;
  v556.__end_cap_.__value_ = v232 + 2;
  (*(void (**)(void **__return_ptr, uint64_t, std::vector<int> *))(*(_QWORD *)v231 + 56))(&v545, v231, &v556);
  if (*(char *)(a1 + 1551) < 0)
    std::string::__init_copy_ctor_external(&v554, *(const std::string::value_type **)(a1 + 1528), *(_QWORD *)(a1 + 1536));
  else
    v554 = *(std::string *)(a1 + 1528);
  v235 = v545;
  v545 = 0;
  *(_QWORD *)&v555 = v235;
  v236 = *(_QWORD *)(a1 + 1416);
  v237 = *(_QWORD *)(a1 + 1424);
  if (v236 >= v237)
  {
    v241 = *(_QWORD *)(a1 + 1408);
    v242 = (uint64_t)(v236 - v241) >> 5;
    v243 = v242 + 1;
    if ((unint64_t)(v242 + 1) >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v244 = v237 - v241;
    if (v244 >> 4 > v243)
      v243 = v244 >> 4;
    if ((unint64_t)v244 >= 0x7FFFFFFFFFFFFFE0)
      v245 = 0x7FFFFFFFFFFFFFFLL;
    else
      v245 = v243;
    v541 = (int64x2_t **)(a1 + 1424);
    v246 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>(a1 + 1424, v245);
    v247 = &v246[32 * v242];
    *(_QWORD *)&__p = v246;
    *((_QWORD *)&__p + 1) = v247;
    v540 = &v246[32 * v248];
    v249 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
    *((_QWORD *)v247 + 2) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
    *(_OWORD *)v247 = v249;
    memset(&v554, 0, sizeof(v554));
    v250 = v555;
    *(_QWORD *)&v555 = 0;
    *((_QWORD *)v247 + 3) = v250;
    v539 = v247 + 32;
    std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)(a1 + 1408), &__p);
    v240 = *(_QWORD *)(a1 + 1416);
    std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
  }
  else
  {
    v238 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
    *(_QWORD *)(v236 + 16) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
    *(_OWORD *)v236 = v238;
    memset(&v554, 0, sizeof(v554));
    v239 = v555;
    *(_QWORD *)&v555 = 0;
    *(_QWORD *)(v236 + 24) = v239;
    v240 = v236 + 32;
    *(_QWORD *)(a1 + 1416) = v236 + 32;
  }
  *(_QWORD *)(a1 + 1416) = v240;
  v251 = v555;
  *(_QWORD *)&v555 = 0;
  if (v251)
    (*(void (**)(uint64_t))(*(_QWORD *)v251 + 8))(v251);
  if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v554.__r_.__value_.__l.__data_);
  v252 = v545;
  v545 = 0;
  if (v252)
    (*(void (**)(void *))(*(_QWORD *)v252 + 8))(v252);
  if (v556.__begin_)
  {
    v556.__end_ = v556.__begin_;
    operator delete(v556.__begin_);
  }
  v253 = *(_QWORD *)(a1 + 184);
  v254 = (int *)operator new(8uLL);
  v556.__begin_ = v254;
  *(_QWORD *)v254 = 1;
  v556.__end_ = v254 + 2;
  v556.__end_cap_.__value_ = v254 + 2;
  (*(void (**)(void **__return_ptr, uint64_t, std::vector<int> *))(*(_QWORD *)v253 + 56))(&v545, v253, &v556);
  if (*(char *)(a1 + 1743) < 0)
    std::string::__init_copy_ctor_external(&v554, *(const std::string::value_type **)(a1 + 1720), *(_QWORD *)(a1 + 1728));
  else
    v554 = *(std::string *)(a1 + 1720);
  v255 = v545;
  v545 = 0;
  *(_QWORD *)&v555 = v255;
  v256 = *(_QWORD *)(a1 + 1392);
  v257 = *(_QWORD *)(a1 + 1400);
  if (v256 < v257)
    goto LABEL_337;
  v258 = (uint64_t)(v256 - *v230) >> 5;
  v259 = v258 + 1;
  if ((unint64_t)(v258 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v260 = a1 + 1400;
  v261 = v257 - *v230;
  if (v261 >> 4 > v259)
    v259 = v261 >> 4;
  if ((unint64_t)v261 >= 0x7FFFFFFFFFFFFFE0)
    v262 = 0x7FFFFFFFFFFFFFFLL;
  else
    v262 = v259;
LABEL_344:
  v541 = (int64x2_t **)(a1 + 1400);
  v270 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>(v260, v262);
  v271 = &v270[32 * v258];
  *(_QWORD *)&__p = v270;
  *((_QWORD *)&__p + 1) = v271;
  v540 = &v270[32 * v272];
  v273 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
  *((_QWORD *)v271 + 2) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
  *(_OWORD *)v271 = v273;
  memset(&v554, 0, sizeof(v554));
  v274 = v555;
  *(_QWORD *)&v555 = 0;
  *((_QWORD *)v271 + 3) = v274;
  v539 = v271 + 32;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)(a1 + 1384), &__p);
  v267 = *(_QWORD *)(a1 + 1392);
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
LABEL_345:
  *(_QWORD *)(a1 + 1392) = v267;
  v275 = v555;
  *(_QWORD *)&v555 = 0;
  if (v275)
    (*(void (**)(uint64_t))(*(_QWORD *)v275 + 8))(v275);
  if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v554.__r_.__value_.__l.__data_);
  v276 = v545;
  v545 = 0;
  if (v276)
    (*(void (**)(void *))(*(_QWORD *)v276 + 8))(v276);
  if (v556.__begin_)
  {
    v556.__end_ = v556.__begin_;
    operator delete(v556.__begin_);
  }
  *(_DWORD *)(a1 + 1920) = (*(_QWORD *)(a1 + 1392) - *(_QWORD *)(a1 + 1384)) >> 5;
  if (*(_BYTE *)(a1 + 1348))
  {
    v277 = *(_QWORD *)(a1 + 184);
    v278 = (int *)operator new(8uLL);
    v556.__begin_ = v278;
    *(_QWORD *)v278 = 1;
    v556.__end_ = v278 + 2;
    v556.__end_cap_.__value_ = v278 + 2;
    (*(void (**)(void **__return_ptr, uint64_t, std::vector<int> *))(*(_QWORD *)v277 + 56))(&v545, v277, &v556);
    if (*(char *)(a1 + 1647) < 0)
      std::string::__init_copy_ctor_external(&v554, *(const std::string::value_type **)(a1 + 1624), *(_QWORD *)(a1 + 1632));
    else
      v554 = *(std::string *)(a1 + 1624);
    v279 = v545;
    v545 = 0;
    *(_QWORD *)&v555 = v279;
    v280 = *(_QWORD *)(a1 + 1392);
    v281 = *(_QWORD *)(a1 + 1400);
    if (v280 >= v281)
    {
      v285 = (uint64_t)(v280 - *v230) >> 5;
      v286 = v285 + 1;
      if ((unint64_t)(v285 + 1) >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v287 = v281 - *v230;
      if (v287 >> 4 > v286)
        v286 = v287 >> 4;
      if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFE0)
        v288 = 0x7FFFFFFFFFFFFFFLL;
      else
        v288 = v286;
      v541 = (int64x2_t **)(a1 + 1400);
      v289 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>(a1 + 1400, v288);
      v290 = &v289[32 * v285];
      *(_QWORD *)&__p = v289;
      *((_QWORD *)&__p + 1) = v290;
      v540 = &v289[32 * v291];
      v292 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
      *((_QWORD *)v290 + 2) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
      *(_OWORD *)v290 = v292;
      memset(&v554, 0, sizeof(v554));
      v293 = v555;
      *(_QWORD *)&v555 = 0;
      *((_QWORD *)v290 + 3) = v293;
      v539 = v290 + 32;
      std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)(a1 + 1384), &__p);
      v284 = *(_QWORD *)(a1 + 1392);
      std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    }
    else
    {
      v282 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
      *(_QWORD *)(v280 + 16) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
      *(_OWORD *)v280 = v282;
      memset(&v554, 0, sizeof(v554));
      v283 = v555;
      *(_QWORD *)&v555 = 0;
      *(_QWORD *)(v280 + 24) = v283;
      v284 = v280 + 32;
      *(_QWORD *)(a1 + 1392) = v280 + 32;
    }
    *(_QWORD *)(a1 + 1392) = v284;
    v294 = v555;
    *(_QWORD *)&v555 = 0;
    if (v294)
      (*(void (**)(uint64_t))(*(_QWORD *)v294 + 8))(v294);
    if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v554.__r_.__value_.__l.__data_);
    v295 = v545;
    v545 = 0;
    if (v295)
      (*(void (**)(void *))(*(_QWORD *)v295 + 8))(v295);
    if (v556.__begin_)
    {
      v556.__end_ = v556.__begin_;
      operator delete(v556.__begin_);
    }
    if (*(_BYTE *)(a1 + 1341))
    {
      v296 = *(_QWORD *)(a1 + 184);
      v297 = (int *)operator new(8uLL);
      v556.__begin_ = v297;
      *(_QWORD *)v297 = 1;
      v556.__end_ = v297 + 2;
      v556.__end_cap_.__value_ = v297 + 2;
      (*(void (**)(void **__return_ptr, uint64_t, std::vector<int> *))(*(_QWORD *)v296 + 56))(&v545, v296, &v556);
      if (*(char *)(a1 + 1599) < 0)
        std::string::__init_copy_ctor_external(&v554, *(const std::string::value_type **)(a1 + 1576), *(_QWORD *)(a1 + 1584));
      else
        v554 = *(std::string *)(a1 + 1576);
      v298 = v545;
      v545 = 0;
      *(_QWORD *)&v555 = v298;
      v299 = *(_QWORD *)(a1 + 1416);
      v300 = *(_QWORD *)(a1 + 1424);
      if (v299 >= v300)
      {
        v304 = *(_QWORD *)(a1 + 1408);
        v305 = (uint64_t)(v299 - v304) >> 5;
        v306 = v305 + 1;
        if ((unint64_t)(v305 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v307 = v300 - v304;
        if (v307 >> 4 > v306)
          v306 = v307 >> 4;
        if ((unint64_t)v307 >= 0x7FFFFFFFFFFFFFE0)
          v308 = 0x7FFFFFFFFFFFFFFLL;
        else
          v308 = v306;
        v541 = (int64x2_t **)(a1 + 1424);
        v309 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>(a1 + 1424, v308);
        v310 = &v309[32 * v305];
        *(_QWORD *)&__p = v309;
        *((_QWORD *)&__p + 1) = v310;
        v540 = &v309[32 * v311];
        v312 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
        *((_QWORD *)v310 + 2) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
        *(_OWORD *)v310 = v312;
        memset(&v554, 0, sizeof(v554));
        v313 = v555;
        *(_QWORD *)&v555 = 0;
        *((_QWORD *)v310 + 3) = v313;
        v539 = v310 + 32;
        std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)(a1 + 1408), &__p);
        v303 = *(_QWORD *)(a1 + 1416);
        std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
      }
      else
      {
        v301 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
        *(_QWORD *)(v299 + 16) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
        *(_OWORD *)v299 = v301;
        memset(&v554, 0, sizeof(v554));
        v302 = v555;
        *(_QWORD *)&v555 = 0;
        *(_QWORD *)(v299 + 24) = v302;
        v303 = v299 + 32;
        *(_QWORD *)(a1 + 1416) = v299 + 32;
      }
      *(_QWORD *)(a1 + 1416) = v303;
      v314 = v555;
      *(_QWORD *)&v555 = 0;
      if (v314)
        (*(void (**)(uint64_t))(*(_QWORD *)v314 + 8))(v314);
      if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v554.__r_.__value_.__l.__data_);
      v315 = v545;
      v545 = 0;
      if (v315)
        (*(void (**)(void *))(*(_QWORD *)v315 + 8))(v315);
      if (v556.__begin_)
      {
        v556.__end_ = v556.__begin_;
        operator delete(v556.__begin_);
      }
    }
  }
  v316 = (*(_QWORD *)(a1 + 1392) - *(_QWORD *)(a1 + 1384)) >> 5;
  *(_DWORD *)(a1 + 1928) = v316;
  if (*(char *)(a1 + 1671) < 0)
  {
    if (!*(_QWORD *)(a1 + 1656))
      goto LABEL_420;
  }
  else if (!*(_BYTE *)(a1 + 1671))
  {
    goto LABEL_420;
  }
  v317 = *(_QWORD *)(a1 + 184);
  v318 = (int *)operator new(8uLL);
  v556.__begin_ = v318;
  *(_QWORD *)v318 = 1;
  v556.__end_ = v318 + 2;
  v556.__end_cap_.__value_ = v318 + 2;
  (*(void (**)(void **__return_ptr, uint64_t, std::vector<int> *))(*(_QWORD *)v317 + 56))(&v545, v317, &v556);
  if (*(char *)(a1 + 1671) < 0)
    std::string::__init_copy_ctor_external(&v554, *(const std::string::value_type **)(a1 + 1648), *(_QWORD *)(a1 + 1656));
  else
    v554 = *(std::string *)(a1 + 1648);
  v319 = v545;
  v545 = 0;
  *(_QWORD *)&v555 = v319;
  v320 = *(_QWORD *)(a1 + 1392);
  v321 = *(_QWORD *)(a1 + 1400);
  if (v320 >= v321)
  {
    v325 = (uint64_t)(v320 - *v230) >> 5;
    v326 = v325 + 1;
    if ((unint64_t)(v325 + 1) >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v327 = v321 - *v230;
    if (v327 >> 4 > v326)
      v326 = v327 >> 4;
    if ((unint64_t)v327 >= 0x7FFFFFFFFFFFFFE0)
      v328 = 0x7FFFFFFFFFFFFFFLL;
    else
      v328 = v326;
    v541 = (int64x2_t **)(a1 + 1400);
    v329 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>(a1 + 1400, v328);
    v330 = &v329[32 * v325];
    *(_QWORD *)&__p = v329;
    *((_QWORD *)&__p + 1) = v330;
    v540 = &v329[32 * v331];
    v332 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
    *((_QWORD *)v330 + 2) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
    *(_OWORD *)v330 = v332;
    memset(&v554, 0, sizeof(v554));
    v333 = v555;
    *(_QWORD *)&v555 = 0;
    *((_QWORD *)v330 + 3) = v333;
    v539 = v330 + 32;
    std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)(a1 + 1384), &__p);
    v324 = *(_QWORD *)(a1 + 1392);
    std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
  }
  else
  {
    v322 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
    *(_QWORD *)(v320 + 16) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
    *(_OWORD *)v320 = v322;
    memset(&v554, 0, sizeof(v554));
    v323 = v555;
    *(_QWORD *)&v555 = 0;
    *(_QWORD *)(v320 + 24) = v323;
    v324 = v320 + 32;
    *(_QWORD *)(a1 + 1392) = v320 + 32;
  }
  *(_QWORD *)(a1 + 1392) = v324;
  v334 = v555;
  *(_QWORD *)&v555 = 0;
  if (v334)
    (*(void (**)(uint64_t))(*(_QWORD *)v334 + 8))(v334);
  if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v554.__r_.__value_.__l.__data_);
  v335 = v545;
  v545 = 0;
  if (v335)
    (*(void (**)(void *))(*(_QWORD *)v335 + 8))(v335);
  if (v556.__begin_)
  {
    v556.__end_ = v556.__begin_;
    operator delete(v556.__begin_);
  }
  v316 = (*(_QWORD *)(a1 + 1392) - *(_QWORD *)(a1 + 1384)) >> 5;
LABEL_420:
  *(_DWORD *)(a1 + 1924) = v316;
  if (*(_BYTE *)(a1 + 1338) && !*(_BYTE *)(a1 + 1339) && !*(_BYTE *)(a1 + 1340))
  {
    if (!*(_BYTE *)(a1 + 1342))
    {
      kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "StartFeedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1121);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Espresso shortlist models require active shortlist!", 51);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    (*(void (**)(std::vector<int> *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 184) + 16))(&v556, *(_QWORD *)(a1 + 184), a1 + 2136, 0);
    if (*(char *)(a1 + 1695) < 0)
      std::string::__init_copy_ctor_external(&v554, *(const std::string::value_type **)(a1 + 1672), *(_QWORD *)(a1 + 1680));
    else
      v554 = *(std::string *)(a1 + 1672);
    v336 = v556.__begin_;
    v556.__begin_ = 0;
    *(_QWORD *)&v555 = v336;
    v337 = *(_QWORD *)(a1 + 1392);
    v338 = *(_QWORD *)(a1 + 1400);
    if (v337 >= v338)
    {
      v342 = (uint64_t)(v337 - *v230) >> 5;
      v343 = v342 + 1;
      if ((unint64_t)(v342 + 1) >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v344 = v338 - *v230;
      if (v344 >> 4 > v343)
        v343 = v344 >> 4;
      if ((unint64_t)v344 >= 0x7FFFFFFFFFFFFFE0)
        v345 = 0x7FFFFFFFFFFFFFFLL;
      else
        v345 = v343;
      v541 = (int64x2_t **)(a1 + 1400);
      v346 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>(a1 + 1400, v345);
      v347 = &v346[32 * v342];
      *(_QWORD *)&__p = v346;
      *((_QWORD *)&__p + 1) = v347;
      v540 = &v346[32 * v348];
      v349 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
      *((_QWORD *)v347 + 2) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
      *(_OWORD *)v347 = v349;
      memset(&v554, 0, sizeof(v554));
      v350 = v555;
      *(_QWORD *)&v555 = 0;
      *((_QWORD *)v347 + 3) = v350;
      v539 = v347 + 32;
      std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer((uint64_t *)(a1 + 1384), &__p);
      v341 = *(_QWORD *)(a1 + 1392);
      std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
    }
    else
    {
      v339 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
      *(_QWORD *)(v337 + 16) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
      *(_OWORD *)v337 = v339;
      memset(&v554, 0, sizeof(v554));
      v340 = v555;
      *(_QWORD *)&v555 = 0;
      *(_QWORD *)(v337 + 24) = v340;
      v341 = v337 + 32;
      *(_QWORD *)(a1 + 1392) = v337 + 32;
    }
    *(_QWORD *)(a1 + 1392) = v341;
    v351 = v555;
    *(_QWORD *)&v555 = 0;
    if (v351)
      (*(void (**)(uint64_t))(*(_QWORD *)v351 + 8))(v351);
    if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v554.__r_.__value_.__l.__data_);
    v352 = v556.__begin_;
    v556.__begin_ = 0;
    if (v352)
      (*(void (**)(std::vector<int>::pointer))(*(_QWORD *)v352 + 8))(v352);
  }
  std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::resize((uint64_t *)(a1 + 2736), 1uLL);
  v530 = v48;
  v354 = *(uint64_t **)(a1 + 2736);
  v356 = *v354;
  for (i = v354[1]; i != v356; i = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](i - 16))
    ;
  v354[1] = v356;
  *(_DWORD *)(a1 + 1896) = (*(_QWORD *)(a1 + 1392) - *(_QWORD *)(a1 + 1384)) >> 5;
  v357 = *(__int128 **)(a1 + 1864);
  v358 = *(__int128 **)(a1 + 1872);
  v537 = (_QWORD *)(a1 + 1384);
  if (v357 != v358)
  {
    v535 = vdupq_n_s64(1uLL);
    do
    {
      if (*(_BYTE *)(a1 + 2764))
      {
        v359 = *(int *)(a1 + 2760);
        LODWORD(__p) = 0;
        std::vector<float>::vector(&v556, v359, &__p);
        v360 = *(_QWORD *)(a1 + 184);
        v361 = *(int *)(a1 + 2760);
        v362 = (int64x2_t *)operator new(0x20uLL);
        v546 = v362 + 2;
        v547 = v362 + 2;
        v362->i64[0] = 1;
        v362->i64[1] = v361;
        v362[1] = v535;
        v545 = v362;
        (*(void (**)(void ***__return_ptr, uint64_t, void **))(*(_QWORD *)v360 + 56))(&p_p, v360, &v545);
        if (*((char *)v357 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v554, *(const std::string::value_type **)v357, *((_QWORD *)v357 + 1));
        }
        else
        {
          v363 = *v357;
          v554.__r_.__value_.__r.__words[2] = *((_QWORD *)v357 + 2);
          *(_OWORD *)&v554.__r_.__value_.__l.__data_ = v363;
        }
        v367 = p_p;
        p_p = 0;
        *(_QWORD *)&v555 = v367;
        v368 = *(_QWORD *)(a1 + 1392);
        v369 = *(_QWORD *)(a1 + 1400);
        if (v368 >= v369)
        {
          v373 = (uint64_t)(v368 - *v230) >> 5;
          v374 = v373 + 1;
          if ((unint64_t)(v373 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v375 = v369 - *v230;
          if (v375 >> 4 > v374)
            v374 = v375 >> 4;
          if ((unint64_t)v375 >= 0x7FFFFFFFFFFFFFE0)
            v376 = 0x7FFFFFFFFFFFFFFLL;
          else
            v376 = v374;
          v541 = (int64x2_t **)(a1 + 1400);
          v377 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>(a1 + 1400, v376);
          v378 = &v377[32 * v373];
          *(_QWORD *)&__p = v377;
          *((_QWORD *)&__p + 1) = v378;
          v540 = &v377[32 * v379];
          v380 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
          *((_QWORD *)v378 + 2) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
          *(_OWORD *)v378 = v380;
          memset(&v554, 0, sizeof(v554));
          v381 = v555;
          *(_QWORD *)&v555 = 0;
          *((_QWORD *)v378 + 3) = v381;
          v539 = v378 + 32;
          std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v230, &__p);
          v372 = *(_QWORD *)(a1 + 1392);
          std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
        }
        else
        {
          v370 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
          *(_QWORD *)(v368 + 16) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
          *(_OWORD *)v368 = v370;
          memset(&v554, 0, sizeof(v554));
          v371 = v555;
          *(_QWORD *)&v555 = 0;
          *(_QWORD *)(v368 + 24) = v371;
          v372 = v368 + 32;
          *(_QWORD *)(a1 + 1392) = v368 + 32;
        }
        *(_QWORD *)(a1 + 1392) = v372;
        v382 = v555;
        *(_QWORD *)&v555 = 0;
        if (v382)
          (*(void (**)(uint64_t))(*(_QWORD *)v382 + 8))(v382);
        if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v554.__r_.__value_.__l.__data_);
        v383 = p_p;
        p_p = 0;
        if (v383)
          (*((void (**)(void **))*v383 + 1))(v383);
        if (v545)
        {
          v546 = (int64x2_t *)v545;
          operator delete(v545);
        }
        (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 1392) - 8) + 88))(*(_QWORD *)(*(_QWORD *)(a1 + 1392) - 8));
        v384 = *(char ***)(a1 + 2736);
        v385 = *(_QWORD *)(a1 + 184);
        v386 = *(int *)(a1 + 2760);
        v387 = (int64x2_t *)operator new(0x20uLL);
        v554.__r_.__value_.__l.__size_ = (std::string::size_type)&v387[2];
        v554.__r_.__value_.__r.__words[2] = (std::string::size_type)&v387[2];
        v387->i64[0] = 1;
        v387->i64[1] = v386;
        v387[1] = vdupq_n_s64(1uLL);
        v554.__r_.__value_.__r.__words[0] = (std::string::size_type)v387;
        (*(void (**)(void ***__return_ptr, uint64_t, std::string *))(*(_QWORD *)v385 + 56))(&p_p, v385, &v554);
        v388 = p_p;
        v545 = p_p;
        if (p_p)
        {
          v389 = (int64x2_t *)operator new();
          v390 = p_p;
          v389->i64[0] = (uint64_t)&unk_1EA936CD8;
          v389->i64[1] = 0;
          v389[1].i64[0] = 0;
          v389[1].i64[1] = (uint64_t)v390;
        }
        else
        {
          v389 = 0;
        }
        v546 = v389;
        p_p = 0;
        v391 = (unint64_t)v384[2];
        v392 = (void ***)v384[1];
        if ((unint64_t)v392 >= v391)
        {
          v394 = ((char *)v392 - *v384) >> 4;
          v395 = v394 + 1;
          if ((unint64_t)(v394 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v396 = v391 - (_QWORD)*v384;
          if (v396 >> 3 > v395)
            v395 = v396 >> 3;
          if ((unint64_t)v396 >= 0x7FFFFFFFFFFFFFF0)
            v397 = 0xFFFFFFFFFFFFFFFLL;
          else
            v397 = v395;
          v541 = (int64x2_t **)(v384 + 2);
          v398 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>((uint64_t)(v384 + 2), v397);
          v400 = (void ***)&v398[16 * v394];
          *v400 = v388;
          v400[1] = (void **)v389;
          v545 = 0;
          v546 = 0;
          v402 = *v384;
          v401 = v384[1];
          if (v401 == *v384)
          {
            v405 = v384[1];
            v403 = &v398[16 * v394];
            v230 = (uint64_t *)(a1 + 1384);
          }
          else
          {
            v403 = &v398[16 * v394];
            v230 = (uint64_t *)(a1 + 1384);
            do
            {
              v404 = *((_OWORD *)v401 - 1);
              v401 -= 16;
              *((_OWORD *)v403 - 1) = v404;
              v403 -= 16;
              *(_QWORD *)v401 = 0;
              *((_QWORD *)v401 + 1) = 0;
            }
            while (v401 != v402);
            v405 = *v384;
            v401 = v384[1];
          }
          v393 = (char *)(v400 + 2);
          *v384 = v403;
          *(_QWORD *)&__p = v405;
          *((_QWORD *)&__p + 1) = v405;
          v384[1] = (char *)(v400 + 2);
          v539 = v401;
          v444 = v384[2];
          v384[2] = &v398[16 * v399];
          v540 = v444;
          std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)&__p);
        }
        else
        {
          *v392 = v388;
          v392[1] = (void **)v389;
          v393 = (char *)(v392 + 2);
        }
        v384[1] = v393;
        v445 = p_p;
        p_p = 0;
        if (v445)
          (*((void (**)(void **))*v445 + 1))(v445);
        if (v554.__r_.__value_.__r.__words[0])
        {
          v554.__r_.__value_.__l.__size_ = v554.__r_.__value_.__r.__words[0];
          operator delete(v554.__r_.__value_.__l.__data_);
        }
        v446 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2736) + 8) - 16);
        (*(void (**)(uint64_t))(*(_QWORD *)v446 + 88))(v446);
        v447 = v556.__begin_;
        if (!v556.__begin_)
          goto LABEL_533;
        v556.__end_ = v556.__begin_;
      }
      else
      {
        v364 = *(_QWORD *)(a1 + 184);
        v365 = *(int *)(a1 + 2760);
        LODWORD(p_p) = 0;
        std::vector<float>::vector(&v556, v365, &p_p);
        (*(void (**)(void **__return_ptr, uint64_t, std::vector<int> *, _QWORD))(*(_QWORD *)v364 + 24))(&v545, v364, &v556, 0);
        if (*((char *)v357 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v554, *(const std::string::value_type **)v357, *((_QWORD *)v357 + 1));
        }
        else
        {
          v366 = *v357;
          v554.__r_.__value_.__r.__words[2] = *((_QWORD *)v357 + 2);
          *(_OWORD *)&v554.__r_.__value_.__l.__data_ = v366;
        }
        v406 = v545;
        v545 = 0;
        *(_QWORD *)&v555 = v406;
        v407 = *(_QWORD *)(a1 + 1392);
        v408 = *(_QWORD *)(a1 + 1400);
        if (v407 >= v408)
        {
          v412 = (uint64_t)(v407 - *v230) >> 5;
          v413 = v412 + 1;
          if ((unint64_t)(v412 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v414 = v408 - *v230;
          if (v414 >> 4 > v413)
            v413 = v414 >> 4;
          if ((unint64_t)v414 >= 0x7FFFFFFFFFFFFFE0)
            v415 = 0x7FFFFFFFFFFFFFFLL;
          else
            v415 = v413;
          v541 = (int64x2_t **)(a1 + 1400);
          v416 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>(a1 + 1400, v415);
          v417 = &v416[32 * v412];
          *(_QWORD *)&__p = v416;
          *((_QWORD *)&__p + 1) = v417;
          v540 = &v416[32 * v418];
          v419 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
          *((_QWORD *)v417 + 2) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
          *(_OWORD *)v417 = v419;
          memset(&v554, 0, sizeof(v554));
          v420 = v555;
          *(_QWORD *)&v555 = 0;
          *((_QWORD *)v417 + 3) = v420;
          v539 = v417 + 32;
          std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v230, &__p);
          v411 = *(_QWORD *)(a1 + 1392);
          std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
        }
        else
        {
          v409 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
          *(_QWORD *)(v407 + 16) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
          *(_OWORD *)v407 = v409;
          memset(&v554, 0, sizeof(v554));
          v410 = v555;
          *(_QWORD *)&v555 = 0;
          *(_QWORD *)(v407 + 24) = v410;
          v411 = v407 + 32;
          *(_QWORD *)(a1 + 1392) = v407 + 32;
        }
        *(_QWORD *)(a1 + 1392) = v411;
        v421 = v555;
        *(_QWORD *)&v555 = 0;
        if (v421)
          (*(void (**)(uint64_t))(*(_QWORD *)v421 + 8))(v421);
        if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v554.__r_.__value_.__l.__data_);
        v422 = v545;
        v545 = 0;
        if (v422)
          (*(void (**)(void *))(*(_QWORD *)v422 + 8))(v422);
        if (v556.__begin_)
        {
          v556.__end_ = v556.__begin_;
          operator delete(v556.__begin_);
        }
        v423 = *(char ***)(a1 + 2736);
        v424 = *(_QWORD *)(a1 + 184);
        v425 = *(int *)(a1 + 2760);
        LODWORD(p_p) = 0;
        std::vector<float>::vector(&v554, v425, &p_p);
        (*(void (**)(void **__return_ptr, uint64_t, std::string *, _QWORD))(*(_QWORD *)v424 + 24))(&v545, v424, &v554, 0);
        v426 = v545;
        v556.__begin_ = (std::vector<int>::pointer)v545;
        if (v545)
        {
          v427 = operator new();
          v428 = v545;
          *(_QWORD *)v427 = &unk_1EA936CD8;
          *(_QWORD *)(v427 + 8) = 0;
          *(_QWORD *)(v427 + 16) = 0;
          *(_QWORD *)(v427 + 24) = v428;
        }
        else
        {
          v427 = 0;
        }
        v556.__end_ = (std::vector<int>::pointer)v427;
        v545 = 0;
        v429 = (unint64_t)v423[2];
        v430 = v423[1];
        if ((unint64_t)v430 >= v429)
        {
          v432 = (v430 - *v423) >> 4;
          v433 = v432 + 1;
          if ((unint64_t)(v432 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v434 = v429 - (_QWORD)*v423;
          if (v434 >> 3 > v433)
            v433 = v434 >> 3;
          if ((unint64_t)v434 >= 0x7FFFFFFFFFFFFFF0)
            v435 = 0xFFFFFFFFFFFFFFFLL;
          else
            v435 = v433;
          v541 = (int64x2_t **)(v423 + 2);
          v436 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>((uint64_t)(v423 + 2), v435);
          v438 = &v436[16 * v432];
          *(_QWORD *)v438 = v426;
          *((_QWORD *)v438 + 1) = v427;
          v556.__begin_ = 0;
          v556.__end_ = 0;
          v440 = *v423;
          v439 = v423[1];
          if (v439 == *v423)
          {
            v443 = v423[1];
            v441 = &v436[16 * v432];
            v230 = (uint64_t *)(a1 + 1384);
          }
          else
          {
            v441 = &v436[16 * v432];
            v230 = (uint64_t *)(a1 + 1384);
            do
            {
              v442 = *((_OWORD *)v439 - 1);
              v439 -= 16;
              *((_OWORD *)v441 - 1) = v442;
              v441 -= 16;
              *(_QWORD *)v439 = 0;
              *((_QWORD *)v439 + 1) = 0;
            }
            while (v439 != v440);
            v443 = *v423;
            v439 = v423[1];
          }
          v431 = v438 + 16;
          *v423 = v441;
          *(_QWORD *)&__p = v443;
          *((_QWORD *)&__p + 1) = v443;
          v423[1] = v438 + 16;
          v539 = v439;
          v448 = v423[2];
          v423[2] = &v436[16 * v437];
          v540 = v448;
          std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)&__p);
        }
        else
        {
          *(_QWORD *)v430 = v426;
          *((_QWORD *)v430 + 1) = v427;
          v431 = v430 + 16;
        }
        v423[1] = v431;
        v449 = v545;
        v545 = 0;
        if (v449)
          (*(void (**)(void *))(*(_QWORD *)v449 + 8))(v449);
        v447 = (std::vector<int>::pointer)v554.__r_.__value_.__r.__words[0];
        if (!v554.__r_.__value_.__r.__words[0])
          goto LABEL_533;
        v554.__r_.__value_.__l.__size_ = v554.__r_.__value_.__r.__words[0];
      }
      operator delete(v447);
LABEL_533:
      v357 = (__int128 *)((char *)v357 + 24);
    }
    while (v357 != v358);
  }
  v450 = v533;
  if (*(_BYTE *)(a1 + 1348))
  {
    v451 = *(char ***)(a1 + 2736);
    if (*(_BYTE *)(a1 + 1351))
    {
      v452 = *(_QWORD *)(a1 + 184);
      v453 = operator new(4uLL);
      v554.__r_.__value_.__r.__words[0] = (std::string::size_type)v453;
      *v453 = 0;
      v554.__r_.__value_.__l.__size_ = (std::string::size_type)(v453 + 1);
      v554.__r_.__value_.__r.__words[2] = (std::string::size_type)(v453 + 1);
      (*(void (**)(void **__return_ptr, uint64_t, std::string *, _QWORD))(*(_QWORD *)v452 + 16))(&v545, v452, &v554, 0);
      v454 = v545;
      v556.__begin_ = (std::vector<int>::pointer)v545;
      if (v545)
      {
        v455 = operator new();
        v456 = v545;
        *(_QWORD *)v455 = &unk_1EA936CD8;
        *(_QWORD *)(v455 + 8) = 0;
        *(_QWORD *)(v455 + 16) = 0;
        *(_QWORD *)(v455 + 24) = v456;
      }
      else
      {
        v455 = 0;
      }
      v556.__end_ = (std::vector<int>::pointer)v455;
      v545 = 0;
      v460 = (unint64_t)v451[2];
      v461 = v451[1];
      if ((unint64_t)v461 >= v460)
      {
        v462 = (v461 - *v451) >> 4;
        v463 = v462 + 1;
        if ((unint64_t)(v462 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v464 = v460 - (_QWORD)*v451;
        if (v464 >> 3 > v463)
          v463 = v464 >> 3;
        if ((unint64_t)v464 >= 0x7FFFFFFFFFFFFFF0)
          v465 = 0xFFFFFFFFFFFFFFFLL;
        else
          v465 = v463;
        v541 = (int64x2_t **)(v451 + 2);
        v466 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>((uint64_t)(v451 + 2), v465);
        v468 = &v466[16 * v462];
        *(_QWORD *)v468 = v454;
        *((_QWORD *)v468 + 1) = v455;
        v556.__begin_ = 0;
        v556.__end_ = 0;
        v470 = *v451;
        v469 = v451[1];
        if (v469 != *v451)
        {
          v471 = &v466[16 * v462];
          do
          {
            v472 = *((_OWORD *)v469 - 1);
            v469 -= 16;
            *((_OWORD *)v471 - 1) = v472;
            v471 -= 16;
            *(_QWORD *)v469 = 0;
            *((_QWORD *)v469 + 1) = 0;
          }
          while (v469 != v470);
LABEL_564:
          v481 = *v451;
          v469 = v451[1];
LABEL_566:
          v474 = v468 + 16;
          *v451 = v471;
          *(_QWORD *)&__p = v481;
          *((_QWORD *)&__p + 1) = v481;
          v451[1] = v468 + 16;
          v539 = v469;
          v482 = v451[2];
          v451[2] = &v466[16 * v467];
          v540 = v482;
          std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer((uint64_t)&__p);
          goto LABEL_567;
        }
        goto LABEL_565;
      }
    }
    else
    {
      v457 = *(_QWORD *)(a1 + 184);
      v458 = operator new(4uLL);
      v554.__r_.__value_.__r.__words[0] = (std::string::size_type)v458;
      *v458 = 1;
      v554.__r_.__value_.__l.__size_ = (std::string::size_type)(v458 + 1);
      v554.__r_.__value_.__r.__words[2] = (std::string::size_type)(v458 + 1);
      (*(void (**)(void **__return_ptr, uint64_t, std::string *, _QWORD))(*(_QWORD *)v457 + 16))(&v545, v457, &v554, 0);
      v454 = v545;
      v556.__begin_ = (std::vector<int>::pointer)v545;
      if (v545)
      {
        v455 = operator new();
        v459 = v545;
        *(_QWORD *)v455 = &unk_1EA936CD8;
        *(_QWORD *)(v455 + 8) = 0;
        *(_QWORD *)(v455 + 16) = 0;
        *(_QWORD *)(v455 + 24) = v459;
      }
      else
      {
        v455 = 0;
      }
      v556.__end_ = (std::vector<int>::pointer)v455;
      v545 = 0;
      v473 = (unint64_t)v451[2];
      v461 = v451[1];
      if ((unint64_t)v461 >= v473)
      {
        v475 = (v461 - *v451) >> 4;
        v476 = v475 + 1;
        if ((unint64_t)(v475 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v477 = v473 - (_QWORD)*v451;
        if (v477 >> 3 > v476)
          v476 = v477 >> 3;
        if ((unint64_t)v477 >= 0x7FFFFFFFFFFFFFF0)
          v478 = 0xFFFFFFFFFFFFFFFLL;
        else
          v478 = v476;
        v541 = (int64x2_t **)(v451 + 2);
        v466 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,double>>>((uint64_t)(v451 + 2), v478);
        v468 = &v466[16 * v475];
        *(_QWORD *)v468 = v454;
        *((_QWORD *)v468 + 1) = v455;
        v556.__begin_ = 0;
        v556.__end_ = 0;
        v479 = *v451;
        v469 = v451[1];
        if (v469 != *v451)
        {
          v471 = &v466[16 * v475];
          do
          {
            v480 = *((_OWORD *)v469 - 1);
            v469 -= 16;
            *((_OWORD *)v471 - 1) = v480;
            v471 -= 16;
            *(_QWORD *)v469 = 0;
            *((_QWORD *)v469 + 1) = 0;
          }
          while (v469 != v479);
          goto LABEL_564;
        }
LABEL_565:
        v481 = v469;
        v471 = v468;
        goto LABEL_566;
      }
    }
    *(_QWORD *)v461 = v454;
    *((_QWORD *)v461 + 1) = v455;
    v474 = v461 + 16;
LABEL_567:
    v451[1] = v474;
    v483 = v545;
    v545 = 0;
    if (v483)
      (*(void (**)(void *))(*(_QWORD *)v483 + 8))(v483);
    if (v554.__r_.__value_.__r.__words[0])
    {
      v554.__r_.__value_.__l.__size_ = v554.__r_.__value_.__r.__words[0];
      operator delete(v554.__r_.__value_.__l.__data_);
    }
  }
  v484 = *(_QWORD *)(a1 + 1840);
  if (v484 != *(_QWORD *)(a1 + 1848))
  {
    for (j = 0; 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 1848) - v484) >> 3) > j; ++j)
    {
      if (v450 <= 0)
      {
        v486 = *(_DWORD *)(a1 + 1888);
        v487 = *(_QWORD *)(a1 + 1360);
      }
      else
      {
        v486 = *(_DWORD *)(a1 + 1888);
        v487 = *(_QWORD *)(a1 + 1360);
        if (!*(_QWORD *)(a1 + 384))
        {
          v488 = *(_QWORD *)(v487 + 8 * (v486 + (int)j));
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v488 + 144))(v488) != 3)
          {
            kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "StartFeedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1154);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unexpected tensor rank ", 23);
            (*(void (**)(uint64_t))(*(_QWORD *)v488 + 144))(v488);
            v523 = (_QWORD *)std::ostream::operator<<();
            v524 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v523, (uint64_t)" for handover ", 14);
            v525 = *(_QWORD *)(a1 + 1840) + 24 * j;
            v526 = *(char *)(v525 + 23);
            if (v526 >= 0)
              v527 = *(_QWORD *)(a1 + 1840) + 24 * j;
            else
              v527 = *(_QWORD *)v525;
            if (v526 >= 0)
              v528 = *(unsigned __int8 *)(v525 + 23);
            else
              v528 = *(_QWORD *)(v525 + 8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v524, v527, v528);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
          }
          v489 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v488 + 152))(v488, 0);
          v490 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v488 + 152))(v488, 1);
          v491 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v488 + 152))(v488, 2);
          v492 = *(_QWORD *)(a1 + 184);
          v493 = operator new(0x18uLL);
          *((_QWORD *)&__p + 1) = v493 + 3;
          v539 = (char *)(v493 + 3);
          *v493 = v489;
          v493[1] = v530;
          v493[2] = v491;
          *(_QWORD *)&__p = v493;
          (*(void (**)(std::vector<int> *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v492 + 56))(&v556, v492, &__p);
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          if (v489 >= 1)
          {
            v494 = 0;
            v495 = 0;
            v496 = v530 * v491;
            v497 = v490 * v491;
            do
            {
              (*(void (**)(std::vector<int>::pointer, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v556.__begin_ + 72))(v556.__begin_, v488, v495, (v496 + v495), v494);
              v495 = (v495 + v497);
              v494 = (v494 + v496);
              --v489;
            }
            while (v489);
          }
          v498 = *(_QWORD *)(a1 + 1840) + 24 * j;
          if (*(char *)(v498 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v554, *(const std::string::value_type **)v498, *(_QWORD *)(v498 + 8));
          }
          else
          {
            v499 = *(_OWORD *)v498;
            v554.__r_.__value_.__r.__words[2] = *(_QWORD *)(v498 + 16);
            *(_OWORD *)&v554.__r_.__value_.__l.__data_ = v499;
          }
          v450 = v533;
          v230 = (uint64_t *)(a1 + 1384);
          v509 = v556.__begin_;
          v556.__begin_ = 0;
          *(_QWORD *)&v555 = v509;
          v503 = *(_QWORD *)(a1 + 1392);
          v510 = *(_QWORD *)(a1 + 1400);
          if (v503 >= v510)
          {
            v505 = (uint64_t)(v503 - *v537) >> 5;
            v514 = v505 + 1;
            if ((unint64_t)(v505 + 1) >> 59)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v515 = v510 - *v537;
            if (v515 >> 4 > v514)
              v514 = v515 >> 4;
            if ((unint64_t)v515 >= 0x7FFFFFFFFFFFFFE0)
              v508 = 0x7FFFFFFFFFFFFFFLL;
            else
              v508 = v514;
LABEL_603:
            v541 = (int64x2_t **)(a1 + 1400);
            v516 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>(a1 + 1400, v508);
            v517 = &v516[32 * v505];
            *(_QWORD *)&__p = v516;
            *((_QWORD *)&__p + 1) = v517;
            v540 = &v516[32 * v518];
            v519 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
            *((_QWORD *)v517 + 2) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
            *(_OWORD *)v517 = v519;
            memset(&v554, 0, sizeof(v554));
            v520 = v555;
            *(_QWORD *)&v555 = 0;
            *((_QWORD *)v517 + 3) = v520;
            v539 = v517 + 32;
            std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(v230, &__p);
            v513 = *(_QWORD *)(a1 + 1392);
            std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&__p);
            goto LABEL_604;
          }
          goto LABEL_596;
        }
      }
      (*(void (**)(std::vector<int> *__return_ptr))(**(_QWORD **)(v487 + 8 * (v486 + (int)j)) + 16))(&v556);
      v500 = (__int128 *)(v484 + 24 * j);
      if (*((char *)v500 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v554, *(const std::string::value_type **)v500, *((_QWORD *)v500 + 1));
      }
      else
      {
        v501 = *v500;
        v554.__r_.__value_.__r.__words[2] = *((_QWORD *)v500 + 2);
        *(_OWORD *)&v554.__r_.__value_.__l.__data_ = v501;
      }
      v502 = v556.__begin_;
      v556.__begin_ = 0;
      *(_QWORD *)&v555 = v502;
      v503 = *(_QWORD *)(a1 + 1392);
      v504 = *(_QWORD *)(a1 + 1400);
      if (v503 >= v504)
      {
        v505 = (uint64_t)(v503 - *v230) >> 5;
        v506 = v505 + 1;
        if ((unint64_t)(v505 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v507 = v504 - *v230;
        if (v507 >> 4 > v506)
          v506 = v507 >> 4;
        if ((unint64_t)v507 >= 0x7FFFFFFFFFFFFFE0)
          v508 = 0x7FFFFFFFFFFFFFFLL;
        else
          v508 = v506;
        goto LABEL_603;
      }
LABEL_596:
      v511 = *(_OWORD *)&v554.__r_.__value_.__l.__data_;
      *(_QWORD *)(v503 + 16) = *((_QWORD *)&v554.__r_.__value_.__l + 2);
      *(_OWORD *)v503 = v511;
      memset(&v554, 0, sizeof(v554));
      v512 = v555;
      *(_QWORD *)&v555 = 0;
      *(_QWORD *)(v503 + 24) = v512;
      v513 = v503 + 32;
      *(_QWORD *)(a1 + 1392) = v503 + 32;
LABEL_604:
      *(_QWORD *)(a1 + 1392) = v513;
      v521 = v555;
      *(_QWORD *)&v555 = 0;
      if (v521)
        (*(void (**)(uint64_t))(*(_QWORD *)v521 + 8))(v521);
      if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v554.__r_.__value_.__l.__data_);
      v522 = v556.__begin_;
      v556.__begin_ = 0;
      if (v522)
        (*(void (**)(std::vector<int>::pointer))(*(_QWORD *)v522 + 8))(v522);
      v484 = *(_QWORD *)(a1 + 1840);
    }
  }
  if (v548)
  {
    v549 = v548;
    operator delete(v548);
  }
  if (v551.__begin_)
  {
    v551.__end_ = v551.__begin_;
    operator delete(v551.__begin_);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v552, v353);
}

void sub_1DE4EF038(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1DE4EF324);
}

void sub_1DE4EF048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;
  uint64_t v56;
  clockid_t v57;

  if (*(char *)(v56 - 105) < 0)
    operator delete(*(void **)(v56 - 128));
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a17);
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  *(_QWORD *)(v56 - 128) = &a52;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 128));
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v56 - 176), v57);
  *(_QWORD *)(v56 - 128) = &a55;
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 128));
  JUMPOUT(0x1DE4EF2FCLL);
}

void sub_1DE4EF07C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t v55;
  uint64_t v56;

  std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v55 - 128);
  if (a55)
    (*(void (**)(uint64_t))(*(_QWORD *)a55 + 8))(a55);
  v56 = *(_QWORD *)(v55 - 176);
  if (v56)
  {
    *(_QWORD *)(v55 - 168) = v56;
    JUMPOUT(0x1DE4EF2D0);
  }
  JUMPOUT(0x1DE4EF2FCLL);
}

void sub_1DE4EF090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t v55;
  uint64_t v56;

  v56 = *(_QWORD *)(v55 - 152);
  *(_QWORD *)(v55 - 152) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  if (*(char *)(v55 - 153) < 0)
    operator delete(*(void **)(v55 - 176));
  if (a55)
    (*(void (**)(uint64_t))(*(_QWORD *)a55 + 8))(a55);
  JUMPOUT(0x1DE4EF2C4);
}

void sub_1DE4EF0E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    JUMPOUT(0x1DE4EF2D0);
  JUMPOUT(0x1DE4EF2FCLL);
}

void sub_1DE4EF120(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56)
{
  if (a52)
    (*(void (**)(uint64_t))(*(_QWORD *)a52 + 8))(a52);
  if (__p)
    operator delete(__p);
  JUMPOUT(0x1DE4EF2C4);
}

void sub_1DE4EF1C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  JUMPOUT(0x1DE4EF1D8);
}

void sub_1DE4EF1D4(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59)
{
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  void *v63;

  v61 = *(_QWORD *)(v59 - 152);
  *(_QWORD *)(v59 - 152) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  if (*(char *)(v59 - 153) < 0)
    operator delete(*(void **)(v59 - 176));
  v62 = *(_QWORD *)(v59 - 128);
  *(_QWORD *)(v59 - 128) = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  if (__p)
    operator delete(__p);
  v63 = *(void **)(v59 - 256);
  if (v63)
  {
    *(_QWORD *)(v59 - 248) = v63;
    operator delete(v63);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v59 - 232), a2);
  _Unwind_Resume(a1);
}

void sub_1DE4EF2B8()
{
  JUMPOUT(0x1DE4EF2FCLL);
}

void sub_1DE4EF2C0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 128);
  if (v1)
  {
    *(_QWORD *)(v0 - 120) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x1DE4EF2FCLL);
}

void sub_1DE4EF2D8()
{
  JUMPOUT(0x1DE4EF30CLL);
}

void kaldi::quasar::ComputeEngineItf::CreateCopyFloat(kaldi::quasar::ComputeEngineItf *this@<X0>, const kaldi::quasar::ComputeEngineBufferItf *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *__p[3];

  v6 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)a2 + 144))(a2);
  std::vector<long long>::vector(__p, v6);
  if (v6 < 1)
  {
    v9 = 1;
  }
  else
  {
    v7 = 0;
    v8 = v6;
    LODWORD(v9) = 1;
    do
    {
      v10 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(_QWORD *)a2 + 152))(a2, v7);
      *((_QWORD *)__p[0] + v7) = v10;
      v9 = (v10 * v9);
      ++v7;
    }
    while (v8 != v7);
  }
  (*(void (**)(kaldi::quasar::ComputeEngineItf *, void **))(*(_QWORD *)this + 56))(this, __p);
  (*(void (**)(_QWORD, const kaldi::quasar::ComputeEngineBufferItf *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)*a3 + 72))(*a3, a2, 0, v9, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1DE4EF41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t *v11;
  uint64_t v13;

  v13 = *v11;
  *v11 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::Encdec::EncFeedforward()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "EncFeedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1178);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Model does not support stream-decoding");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::quasar::Encdec::Feedforward(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  clockid_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  clockid_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t *v50;
  clockid_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  int v71;
  void *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  const char *v80;
  _QWORD *v81;
  void *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t *v91;
  void *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float v99;
  float v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  BOOL v105;
  BOOL v106;
  _QWORD *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  std::string *v113;
  std::string::size_type size;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  std::string *v127;
  std::string::size_type v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  const char *v136;
  _QWORD *v137;
  void *v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  _QWORD *v143;
  _BYTE *v144;
  unint64_t v145;
  int v146;
  _QWORD *v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  std::string *v153;
  std::string::size_type v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  void *v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t *v178;
  void *v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  void *v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  float v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  BOOL v199;
  BOOL v200;
  _QWORD *v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  std::string *v207;
  std::string::size_type v208;
  _QWORD *v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  _QWORD *v220;
  std::string *v221;
  std::string::size_type v222;
  _QWORD *v223;
  _QWORD *v224;
  uint64_t v225;
  _QWORD *v226;
  clockid_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  int v232;
  _QWORD *v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  _QWORD *v239;
  std::string *v240;
  std::string::size_type v241;
  _QWORD *v242;
  _QWORD *v243;
  _QWORD *v244;
  _QWORD *v245;
  unint64_t v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int64x2_t *v252;
  char *v253;
  void **v254;
  void *v255;
  int64_t v256;
  unint64_t v257;
  unint64_t v258;
  char *v259;
  void ***v260;
  char *v261;
  void **v262;
  _QWORD *v263;
  _QWORD *v264;
  void **v265;
  int64x2_t v266;
  void *v267;
  void **v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  clockid_t v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  const char *v278;
  int v279;
  uint64_t v280;
  unsigned int v281;
  uint64_t v282;
  const char *v283;
  uint64_t v284;
  const char *v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t *v289;
  uint64_t v290;
  void *v291;
  uint64_t v292;
  float v293;
  int v294;
  float v295;
  std::vector<int>::pointer begin;
  uint64_t v297;
  std::vector<int> *v298;
  uint64_t v299;
  uint64_t v300;
  double *v301;
  uint64_t v302;
  uint64_t *v303;
  int64x2_t v304;
  void **p_p;
  uint64_t v306;
  uint64_t v307;
  void **v308[2];
  uint64_t v309;
  uint64_t v310;
  void *v311[3];
  __int128 v312;
  char v313;
  void *__p;
  int64x2_t __src;
  __int128 v316;
  char v317;
  _BYTE v318[48];
  std::string v319;
  __int128 v320;
  char v321;
  uint64_t v322;

  v322 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, &byte_1DEBD87CE);
  v301 = (double *)(a1 + 2560);
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v318, (double *)(a1 + 2560), a1 + 2656, (__int128 *)&__p);
  if (__src.i8[15] < 0)
    operator delete(__p);
  v302 = *(int *)(a2 + 20);
  if (*(_BYTE *)(a1 + 1342))
    v6 = (uint64_t)(*(_QWORD *)(a1 + 2144) - *(_QWORD *)(a1 + 2136)) >> 2;
  else
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 464) + 120))(*(_QWORD *)(a1 + 464)) - 1;
  kaldi::CuMatrix<float>::Resize(a3, v302, v6, 0, 0);
  v11 = v302;
  v300 = a3;
  if (*(_DWORD *)(a1 + 740) == -1)
  {
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1196, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Beam batched, batch size: ", 26);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    if (*(_BYTE *)(a1 + 1341))
    {
      v76 = *(int *)(a1 + 1900);
      v77 = *(_QWORD *)(a1 + 1408);
      v78 = *(_QWORD *)(a1 + 168);
      v79 = operator new(8uLL);
      __p = v79;
      *v79 = v302;
      __src.i64[0] = (uint64_t)(v79 + 1);
      __src.i64[1] = (uint64_t)(v79 + 1);
      (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v78 + 56))(v311, v78, &__p);
      v81 = (_QWORD *)(v77 + 32 * v76 + 24);
      v82 = v311[0];
      v311[0] = 0;
      v83 = *v81;
      *v81 = v82;
      if (v83)
        (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
      v84 = v311[0];
      v311[0] = 0;
      if (v84)
        (*(void (**)(void *))(*(_QWORD *)v84 + 8))(v84);
      if (__p)
      {
        __src.i64[0] = (uint64_t)__p;
        operator delete(__p);
      }
      if ((int)v302 >= 1)
      {
        v85 = 0;
        do
        {
          if (*(_DWORD *)(a2 + 20) <= v85 || *(_DWORD *)(a2 + 16) == 0)
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x227, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v80);
          (*(void (**)(_QWORD, uint64_t, float))(*(_QWORD *)*v81 + 104))(*v81, v85, *(float *)(*(_QWORD *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * (int)v85));
          v85 = (v85 + 1);
        }
        while ((_DWORD)v302 != (_DWORD)v85);
      }
      v87 = *(int *)(a1 + 1904);
      v88 = *(_QWORD *)(a1 + 1408);
      v89 = *(_QWORD *)(a1 + 168);
      v90 = operator new(8uLL);
      __p = v90;
      *v90 = v302;
      __src.i64[0] = (uint64_t)(v90 + 1);
      __src.i64[1] = (uint64_t)(v90 + 1);
      (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v89 + 56))(v311, v89, &__p);
      v91 = (uint64_t *)(v88 + 32 * v87 + 24);
      v92 = v311[0];
      v311[0] = 0;
      v93 = *v91;
      *v91 = (uint64_t)v92;
      if (v93)
        (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
      v94 = v311[0];
      v311[0] = 0;
      if (v94)
        (*(void (**)(void *))(*(_QWORD *)v94 + 8))(v94);
      if (__p)
      {
        __src.i64[0] = (uint64_t)__p;
        operator delete(__p);
      }
      if ((int)v302 >= 1)
      {
        v95 = 0;
        v96 = 8;
        do
        {
          v97 = *v91;
          v98 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2736) + v96) - 16);
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v98 + 112))(v98, 0);
          if (*(_BYTE *)(a1 + 1351))
            v100 = 0.0;
          else
            v100 = 1.0;
          (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v97 + 104))(v97, v95++, v99 - v100);
          v96 += 24;
        }
        while (v302 != v95);
      }
      memset(v311, 0, sizeof(v311));
      if (kaldi::g_kaldi_verbose_level > 2)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1217, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Embedding Inputs:", 17);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
        v101 = *(_QWORD *)(a1 + 1408);
        v102 = *(_QWORD *)(a1 + 1416);
        while (v101 != v102)
        {
          if (*(char *)(v101 + 23) < 0)
          {
            v104 = *(_QWORD *)(v101 + 8);
            if (v104 == 8)
            {
              v103 = *(_QWORD **)v101;
              goto LABEL_136;
            }
            if (v104 != 18
              || (**(_QWORD **)v101 == 0x74756F5F76657270
                ? (v105 = *(_QWORD *)(*(_QWORD *)v101 + 8) == 0x656B6F745F747570)
                : (v105 = 0),
                  v105 ? (v106 = *(unsigned __int16 *)(*(_QWORD *)v101 + 16) == 29550) : (v106 = 0),
                  !v106))
            {
LABEL_137:
              if (kaldi::g_kaldi_verbose_level >= 3)
              {
                kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1222, 3);
                v107 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
                v108 = *(char *)(v101 + 23);
                if (v108 >= 0)
                  v109 = v101;
                else
                  v109 = *(_QWORD *)v101;
                if (v108 >= 0)
                  v110 = *(unsigned __int8 *)(v101 + 23);
                else
                  v110 = *(_QWORD *)(v101 + 8);
                v111 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, v109, v110);
                v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)": ", 2);
                kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*(kaldi::quasar::ComputeEngineBufferItf **)(v101 + 24), &v319);
                if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v113 = &v319;
                else
                  v113 = (std::string *)v319.__r_.__value_.__r.__words[0];
                if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(v319.__r_.__value_.__r.__words[2]);
                else
                  size = v319.__r_.__value_.__l.__size_;
                v115 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)v113, size);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)" [ ", 3);
                (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v101 + 24) + 112))(*(_QWORD *)(v101 + 24), 0);
                v116 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)" ", 1);
                (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v101 + 24) + 112))(*(_QWORD *)(v101 + 24), 1);
                v117 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v117, (uint64_t)" ", 1);
                (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v101 + 24) + 112))(*(_QWORD *)(v101 + 24), 2);
                v118 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)" ...", 4);
LABEL_173:
                if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v319.__r_.__value_.__l.__data_);
                kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
                goto LABEL_176;
              }
              goto LABEL_176;
            }
          }
          else
          {
            if (*(_BYTE *)(v101 + 23) != 18)
            {
              v103 = (_QWORD *)v101;
              if (*(_BYTE *)(v101 + 23) != 8)
                goto LABEL_137;
LABEL_136:
              if (*v103 != 0x6E6F697469736F70)
                goto LABEL_137;
              goto LABEL_159;
            }
            if (*(_QWORD *)v101 != 0x74756F5F76657270
              || *(_QWORD *)(v101 + 8) != 0x656B6F745F747570
              || *(_WORD *)(v101 + 16) != 29550)
            {
              goto LABEL_137;
            }
          }
LABEL_159:
          if (kaldi::g_kaldi_verbose_level >= 3)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1220, 3);
            v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
            v122 = *(char *)(v101 + 23);
            if (v122 >= 0)
              v123 = v101;
            else
              v123 = *(_QWORD *)v101;
            if (v122 >= 0)
              v124 = *(unsigned __int8 *)(v101 + 23);
            else
              v124 = *(_QWORD *)(v101 + 8);
            v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, v123, v124);
            v126 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)": ", 2);
            kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*(kaldi::quasar::ComputeEngineBufferItf **)(v101 + 24), &v319);
            if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v127 = &v319;
            else
              v127 = (std::string *)v319.__r_.__value_.__r.__words[0];
            if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v128 = HIBYTE(v319.__r_.__value_.__r.__words[2]);
            else
              v128 = v319.__r_.__value_.__l.__size_;
            v129 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126, (uint64_t)v127, v128);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)" [ ", 3);
            (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v101 + 24) + 112))(*(_QWORD *)(v101 + 24), 0);
            v130 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)" ...", 4);
            goto LABEL_173;
          }
LABEL_176:
          v101 += 32;
        }
      }
      v131 = *(_QWORD *)(a1 + 168);
      if (*(char *)(a1 + 1743) < 0)
        std::string::__init_copy_ctor_external(&v319, *(const std::string::value_type **)(a1 + 1720), *(_QWORD *)(a1 + 1728));
      else
        v319 = *(std::string *)(a1 + 1720);
      __p = 0;
      __src = 0uLL;
      __p = operator new(0x18uLL);
      __src.i64[0] = (uint64_t)__p;
      __src.i64[1] = (uint64_t)__p + 24;
      __src.i64[0] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__src.i64[1], (__int128 *)&v319, &v320, (std::string *)__p);
      p_p = 0;
      v306 = 0;
      v307 = 0;
      (*(void (**)(uint64_t, uint64_t, void **, void ***, void **))(*(_QWORD *)v131 + 112))(v131, a1 + 1408, &__p, &p_p, v311);
      v308[0] = (void **)&p_p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v308);
      p_p = &__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
      if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v319.__r_.__value_.__l.__data_);
      if (kaldi::g_kaldi_verbose_level <= 2)
      {
        v143 = v311[0];
      }
      else
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1229, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Embedding Outputs:", 18);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
        v143 = v311[0];
        v144 = v311[1];
        if (v311[1] == v311[0])
        {
          v143 = v311[1];
        }
        else
        {
          v145 = 0;
          v146 = kaldi::g_kaldi_verbose_level;
          do
          {
            if (v146 >= 3)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1231, 3);
              v147 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
              v148 = *(char *)(a1 + 1743);
              if (v148 >= 0)
                v149 = a1 + 1720;
              else
                v149 = *(_QWORD *)(a1 + 1720);
              if (v148 >= 0)
                v150 = *(unsigned __int8 *)(a1 + 1743);
              else
                v150 = *(_QWORD *)(a1 + 1728);
              v151 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, v149, v150);
              v152 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v151, (uint64_t)": ", 2);
              kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*((kaldi::quasar::ComputeEngineBufferItf **)v311[0] + v145), &v319);
              if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v153 = &v319;
              else
                v153 = (std::string *)v319.__r_.__value_.__r.__words[0];
              if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v154 = HIBYTE(v319.__r_.__value_.__r.__words[2]);
              else
                v154 = v319.__r_.__value_.__l.__size_;
              v155 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, (uint64_t)v153, v154);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v155, (uint64_t)" [ ", 3);
              (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v311[0] + v145) + 112))(*((_QWORD *)v311[0] + v145), 0);
              v156 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)" ", 1);
              (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v311[0] + v145) + 112))(*((_QWORD *)v311[0] + v145), 1);
              v157 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v157, (uint64_t)" ", 1);
              (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v311[0] + v145) + 112))(*((_QWORD *)v311[0] + v145), 2);
              v158 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)" ...", 4);
              if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v319.__r_.__value_.__l.__data_);
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
              v146 = kaldi::g_kaldi_verbose_level;
              v143 = v311[0];
              v144 = v311[1];
            }
            ++v145;
          }
          while (v145 < (v144 - (_BYTE *)v143) >> 3);
        }
      }
      v159 = *(_QWORD *)(a1 + 1384);
      v160 = *v143;
      *v143 = 0;
      v161 = *(_QWORD *)(v159 + 24);
      *(_QWORD *)(v159 + 24) = v160;
      if (v161)
        (*(void (**)(uint64_t))(*(_QWORD *)v161 + 8))(v161);
      __p = v311;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v11 = v302;
    }
    else
    {
      v132 = *(int *)(a1 + 1916);
      v133 = *(_QWORD *)(a1 + 1384);
      v134 = *(_QWORD *)(a1 + 184);
      v135 = operator new(8uLL);
      __p = v135;
      *v135 = v302;
      __src.i64[0] = (uint64_t)(v135 + 1);
      __src.i64[1] = (uint64_t)(v135 + 1);
      (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v134 + 56))(v311, v134, &__p);
      v137 = (_QWORD *)(v133 + 32 * v132 + 24);
      v138 = v311[0];
      v311[0] = 0;
      v139 = *v137;
      *v137 = v138;
      if (v139)
        (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
      v140 = v311[0];
      v311[0] = 0;
      if (v140)
        (*(void (**)(void *))(*(_QWORD *)v140 + 8))(v140);
      if (__p)
      {
        __src.i64[0] = (uint64_t)__p;
        operator delete(__p);
      }
      if ((int)v302 >= 1)
      {
        v141 = 0;
        do
        {
          if (*(_DWORD *)(a2 + 20) <= v141 || *(_DWORD *)(a2 + 16) == 0)
            kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x227, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v136);
          (*(void (**)(_QWORD, uint64_t, float))(*(_QWORD *)*v137 + 104))(*v137, v141, *(float *)(*(_QWORD *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * (int)v141));
          v141 = (v141 + 1);
        }
        while ((_DWORD)v302 != (_DWORD)v141);
      }
    }
    if (*(_QWORD *)(a1 + 1872) != *(_QWORD *)(a1 + 1864))
    {
      v162 = 0;
      do
      {
        v163 = *(int *)(a1 + 1896);
        v164 = *(_QWORD *)(a1 + 1384);
        v165 = *(_QWORD *)(a1 + 184);
        v166 = *(int *)(a1 + 2760);
        v167 = operator new(0x18uLL);
        __src.i64[0] = (uint64_t)(v167 + 3);
        __src.i64[1] = (uint64_t)(v167 + 3);
        *v167 = 1;
        v167[1] = v302;
        v167[2] = v166;
        __p = v167;
        (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v165 + 56))(v311, v165, &__p);
        v168 = (_QWORD *)(v164 + 32 * (v163 + (int)v162) + 24);
        v169 = v311[0];
        v311[0] = 0;
        v170 = *v168;
        *v168 = v169;
        if (v170)
          (*(void (**)(uint64_t))(*(_QWORD *)v170 + 8))(v170);
        v171 = v311[0];
        v311[0] = 0;
        if (v171)
          (*(void (**)(void *))(*(_QWORD *)v171 + 8))(v171);
        if (__p)
        {
          __src.i64[0] = (uint64_t)__p;
          operator delete(__p);
        }
        if ((int)v11 >= 1)
        {
          v172 = 0;
          v173 = 0;
          do
          {
            (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v168 + 72))(*v168, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2736) + v172) + 16 * v162), 0, *(unsigned int *)(a1 + 2760), (*(_DWORD *)(a1 + 2760) * v173++));
            v172 += 24;
          }
          while (24 * v11 != v172);
        }
        ++v162;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 1872) - *(_QWORD *)(a1 + 1864)) >> 3) > v162);
    }
    if (!*(_BYTE *)(a1 + 1348))
      goto LABEL_259;
    v174 = *(int *)(a1 + 1920);
    v175 = *(_QWORD *)(a1 + 1384);
    v176 = *(_QWORD *)(a1 + 184);
    v177 = operator new(8uLL);
    __p = v177;
    *v177 = v302;
    __src.i64[0] = (uint64_t)(v177 + 1);
    __src.i64[1] = (uint64_t)(v177 + 1);
    (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v176 + 56))(v311, v176, &__p);
    v178 = (uint64_t *)(v175 + 32 * v174 + 24);
    v179 = v311[0];
    v311[0] = 0;
    v180 = *v178;
    *v178 = (uint64_t)v179;
    if (v180)
      (*(void (**)(uint64_t))(*(_QWORD *)v180 + 8))(v180);
    v181 = v311[0];
    v311[0] = 0;
    if (v181)
      (*(void (**)(void *))(*(_QWORD *)v181 + 8))(v181);
    if (__p)
    {
      __src.i64[0] = (uint64_t)__p;
      operator delete(__p);
    }
    if (*(char *)(a1 + 1671) < 0)
    {
      if (!*(_QWORD *)(a1 + 1656))
        goto LABEL_251;
    }
    else if (!*(_BYTE *)(a1 + 1671))
    {
      goto LABEL_251;
    }
    v182 = *(_QWORD *)(a1 + 184);
    v183 = operator new(8uLL);
    __p = v183;
    *v183 = v302;
    __src.i64[0] = (uint64_t)(v183 + 1);
    __src.i64[1] = (uint64_t)(v183 + 1);
    (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v182 + 56))(v311, v182, &__p);
    v184 = *(_QWORD *)(a1 + 1384) + 32 * *(int *)(a1 + 1928);
    v185 = v311[0];
    v311[0] = 0;
    v186 = *(_QWORD *)(v184 + 24);
    *(_QWORD *)(v184 + 24) = v185;
    if (v186)
      (*(void (**)(uint64_t))(*(_QWORD *)v186 + 8))(v186);
    v187 = v311[0];
    v311[0] = 0;
    if (v187)
      (*(void (**)(void *))(*(_QWORD *)v187 + 8))(v187);
    if (__p)
    {
      __src.i64[0] = (uint64_t)__p;
      operator delete(__p);
    }
LABEL_251:
    if ((int)v302 >= 1)
    {
      v188 = 0;
      v189 = 8;
      while (1)
      {
        v190 = *v178;
        v191 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2736) + v189) - 16);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v191 + 112))(v191, 0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v190 + 104))(v190, v188);
        if ((*(char *)(a1 + 1671) & 0x80000000) == 0)
          break;
        if (*(_QWORD *)(a1 + 1656))
          goto LABEL_257;
LABEL_258:
        ++v188;
        v189 += 24;
        if (v11 == v188)
          goto LABEL_259;
      }
      if (!*(_BYTE *)(a1 + 1671))
        goto LABEL_258;
LABEL_257:
      v192 = *(_QWORD *)(*(_QWORD *)(a1 + 1384) + 32 * *(int *)(a1 + 1920) + 24);
      v193 = 1.0 / ((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v192 + 112))(v192, v188) + 1.0);
      v194 = *(_QWORD *)(*(_QWORD *)(a1 + 1384) + 32 * *(int *)(a1 + 1928) + 24);
      (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v194 + 104))(v194, v188, v193);
      goto LABEL_258;
    }
LABEL_259:
    std::string::basic_string[abi:ne180100]<0>(&__p, &byte_1DEBD87CE);
    kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v311, v301, a1 + 2664, (__int128 *)&__p);
    if (__src.i8[15] < 0)
      operator delete(__p);
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1281, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Inputs:", 7);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
      v195 = *(_QWORD *)(a1 + 1384);
      v196 = *(_QWORD *)(a1 + 1392);
      while (v195 != v196)
      {
        if (*(char *)(v195 + 23) < 0)
        {
          v198 = *(_QWORD *)(v195 + 8);
          if (v198 == 8)
          {
            v197 = *(_QWORD **)v195;
            goto LABEL_278;
          }
          if (v198 != 18
            || (**(_QWORD **)v195 == 0x74756F5F76657270
              ? (v199 = *(_QWORD *)(*(_QWORD *)v195 + 8) == 0x656B6F745F747570)
              : (v199 = 0),
                v199 ? (v200 = *(unsigned __int16 *)(*(_QWORD *)v195 + 16) == 29550) : (v200 = 0),
                !v200))
          {
LABEL_279:
            if (kaldi::g_kaldi_verbose_level >= 3)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1286, 3);
              v201 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
              v202 = *(char *)(v195 + 23);
              if (v202 >= 0)
                v203 = v195;
              else
                v203 = *(_QWORD *)v195;
              if (v202 >= 0)
                v204 = *(unsigned __int8 *)(v195 + 23);
              else
                v204 = *(_QWORD *)(v195 + 8);
              v205 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v201, v203, v204);
              v206 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v205, (uint64_t)": ", 2);
              kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*(kaldi::quasar::ComputeEngineBufferItf **)(v195 + 24), &v319);
              if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v207 = &v319;
              else
                v207 = (std::string *)v319.__r_.__value_.__r.__words[0];
              if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v208 = HIBYTE(v319.__r_.__value_.__r.__words[2]);
              else
                v208 = v319.__r_.__value_.__l.__size_;
              v209 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v206, (uint64_t)v207, v208);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v209, (uint64_t)" [ ", 3);
              (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v195 + 24) + 112))(*(_QWORD *)(v195 + 24), 0);
              v210 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v210, (uint64_t)" ", 1);
              (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v195 + 24) + 112))(*(_QWORD *)(v195 + 24), 1);
              v211 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v211, (uint64_t)" ", 1);
              (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v195 + 24) + 112))(*(_QWORD *)(v195 + 24), 2);
              v212 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v212, (uint64_t)" ...", 4);
LABEL_315:
              if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v319.__r_.__value_.__l.__data_);
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
              goto LABEL_318;
            }
            goto LABEL_318;
          }
        }
        else
        {
          if (*(_BYTE *)(v195 + 23) != 18)
          {
            v197 = (_QWORD *)v195;
            if (*(_BYTE *)(v195 + 23) != 8)
              goto LABEL_279;
LABEL_278:
            if (*v197 != 0x6E6F697469736F70)
              goto LABEL_279;
            goto LABEL_301;
          }
          if (*(_QWORD *)v195 != 0x74756F5F76657270
            || *(_QWORD *)(v195 + 8) != 0x656B6F745F747570
            || *(_WORD *)(v195 + 16) != 29550)
          {
            goto LABEL_279;
          }
        }
LABEL_301:
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1284, 3);
          v215 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
          v216 = *(char *)(v195 + 23);
          if (v216 >= 0)
            v217 = v195;
          else
            v217 = *(_QWORD *)v195;
          if (v216 >= 0)
            v218 = *(unsigned __int8 *)(v195 + 23);
          else
            v218 = *(_QWORD *)(v195 + 8);
          v219 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v215, v217, v218);
          v220 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)": ", 2);
          kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*(kaldi::quasar::ComputeEngineBufferItf **)(v195 + 24), &v319);
          if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v221 = &v319;
          else
            v221 = (std::string *)v319.__r_.__value_.__r.__words[0];
          if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v222 = HIBYTE(v319.__r_.__value_.__r.__words[2]);
          else
            v222 = v319.__r_.__value_.__l.__size_;
          v223 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v220, (uint64_t)v221, v222);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)" [ ", 3);
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v195 + 24) + 112))(*(_QWORD *)(v195 + 24), 0);
          v224 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v224, (uint64_t)" ...", 4);
          goto LABEL_315;
        }
LABEL_318:
        v195 += 32;
      }
    }
    v225 = *(_QWORD *)(a1 + 184);
    __p = 0;
    __src = 0uLL;
    v226 = (_QWORD *)(a1 + 1432);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)v225 + 112))(v225, a1 + 1384, a1 + 1816, &__p, a1 + 1432);
    v319.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v319);
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1293, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Outputs:", 8);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
      v228 = *(_QWORD *)(a1 + 1440);
      v229 = *(_QWORD *)(a1 + 1432);
      if (v228 != v229)
      {
        v230 = 0;
        v231 = 0;
        v232 = kaldi::g_kaldi_verbose_level;
        do
        {
          if (v232 >= 3)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1295, 3);
            v233 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"  ", 2);
            v234 = *(_QWORD *)(a1 + 1816) + v230;
            v235 = *(char *)(v234 + 23);
            if (v235 >= 0)
              v236 = *(_QWORD *)(a1 + 1816) + v230;
            else
              v236 = *(_QWORD *)v234;
            if (v235 >= 0)
              v237 = *(unsigned __int8 *)(v234 + 23);
            else
              v237 = *(_QWORD *)(v234 + 8);
            v238 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, v236, v237);
            v239 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v238, (uint64_t)": ", 2);
            kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*(kaldi::quasar::ComputeEngineBufferItf **)(*v226 + 8 * v231), &v319);
            if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v240 = &v319;
            else
              v240 = (std::string *)v319.__r_.__value_.__r.__words[0];
            if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v241 = HIBYTE(v319.__r_.__value_.__r.__words[2]);
            else
              v241 = v319.__r_.__value_.__l.__size_;
            v242 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v239, (uint64_t)v240, v241);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v242, (uint64_t)" [ ", 3);
            (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*v226 + 8 * v231) + 112))(*(_QWORD *)(*v226 + 8 * v231), 0);
            v243 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v243, (uint64_t)" ", 1);
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*v226 + 8 * v231) + 112))(*(_QWORD *)(*v226 + 8 * v231), 1);
            v244 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v244, (uint64_t)" ", 1);
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*v226 + 8 * v231) + 112))(*(_QWORD *)(*v226 + 8 * v231), 2);
            v245 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v245, (uint64_t)" ...", 4);
            if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v319.__r_.__value_.__l.__data_);
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
            v232 = kaldi::g_kaldi_verbose_level;
            v228 = *(_QWORD *)(a1 + 1440);
            v229 = *(_QWORD *)(a1 + 1432);
          }
          ++v231;
          v230 += 24;
        }
        while (v231 < (v228 - v229) >> 3);
      }
    }
    kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v311, v227);
    if (*(_QWORD *)(a1 + 1872) != *(_QWORD *)(a1 + 1864))
    {
      v246 = 0;
      v304 = vdupq_n_s64(1uLL);
      do
      {
        v247 = 0;
        v248 = *(_QWORD *)(a1 + 1432);
        v249 = *(int *)(a1 + 1892) + (uint64_t)(int)v246;
        memset(v311, 0, sizeof(v311));
        while (v247 != (v302 & ~((int)v302 >> 31)))
        {
          v250 = *(_QWORD *)(a1 + 184);
          v251 = *(int *)(a1 + 2760);
          v252 = (int64x2_t *)operator new(0x18uLL);
          v319.__r_.__value_.__l.__size_ = (std::string::size_type)&v252[1].u64[1];
          v319.__r_.__value_.__r.__words[2] = (std::string::size_type)&v252[1].u64[1];
          *v252 = v304;
          v252[1].i64[0] = v251;
          v319.__r_.__value_.__r.__words[0] = (std::string::size_type)v252;
          (*(void (**)(void ***__return_ptr, uint64_t, std::string *))(*(_QWORD *)v250 + 56))(&p_p, v250, &v319);
          v253 = (char *)v311[1];
          if (v311[1] >= v311[2])
          {
            v256 = ((char *)v311[1] - (char *)v311[0]) >> 3;
            if ((unint64_t)(v256 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v257 = ((char *)v311[2] - (char *)v311[0]) >> 2;
            if (v257 <= v256 + 1)
              v257 = v256 + 1;
            if ((void *)((char *)v311[2] - (char *)v311[0]) >= (void *)0x7FFFFFFFFFFFFFF8)
              v258 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v258 = v257;
            *((_QWORD *)&v316 + 1) = &v311[2];
            if (v258)
              v259 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)&v311[2], v258);
            else
              v259 = 0;
            v260 = (void ***)&v259[8 * v256];
            v261 = &v259[8 * v258];
            *(_QWORD *)&v316 = v261;
            v262 = p_p;
            p_p = 0;
            *v260 = v262;
            v255 = v260 + 1;
            __src.i64[1] = (uint64_t)(v260 + 1);
            v264 = v311[0];
            v263 = v311[1];
            if (v311[1] == v311[0])
            {
              v266 = vdupq_n_s64((unint64_t)v311[1]);
            }
            else
            {
              do
              {
                v265 = (void **)*--v263;
                *v263 = 0;
                *--v260 = v265;
              }
              while (v263 != v264);
              v266 = *(int64x2_t *)v311;
              v255 = (void *)__src.i64[1];
              v261 = (char *)v316;
            }
            v311[0] = v260;
            v311[1] = v255;
            __src = v266;
            v267 = v311[2];
            v311[2] = v261;
            *(_QWORD *)&v316 = v267;
            __p = (void *)v266.i64[0];
            std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&__p);
          }
          else
          {
            v254 = p_p;
            p_p = 0;
            *(_QWORD *)v311[1] = v254;
            v255 = v253 + 8;
          }
          v311[1] = v255;
          v268 = p_p;
          p_p = 0;
          if (v268)
            (*((void (**)(void **))*v268 + 1))(v268);
          if (v319.__r_.__value_.__r.__words[0])
          {
            v319.__r_.__value_.__l.__size_ = v319.__r_.__value_.__r.__words[0];
            operator delete(v319.__r_.__value_.__l.__data_);
          }
          v269 = *(_DWORD *)(a1 + 2760);
          v270 = (v269 * v247++);
          (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**((_QWORD **)v311[1] - 1) + 72))(*((_QWORD *)v311[1] - 1), *(_QWORD *)(v248 + 8 * v249), v270, (v269 * v247), 0);
        }
        if ((int)v302 >= 1)
        {
          v271 = 0;
          do
          {
            std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>::operator=[abi:ne180100]<kaldi::quasar::ComputeEngineBufferItf,std::default_delete<kaldi::quasar::ComputeEngineBufferItf>,void>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2736) + 24 * v271) + 16 * v246), (uint64_t *)v311[0] + v271);
            ++v271;
          }
          while (v271 != v302);
        }
        __p = v311;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        ++v246;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 1872) - *(_QWORD *)(a1 + 1864)) >> 3) > v246);
    }
    if (!*(_BYTE *)(a1 + 1339) && !*(_BYTE *)(a1 + 1340))
    {
      v299 = *(_QWORD *)(*(_QWORD *)(a1 + 1432) + 8 * *(int *)(a1 + 1940));
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v299 + 32))(v299, v300);
LABEL_377:
      if (!*(_BYTE *)(a1 + 1948))
      {
LABEL_388:
        if (*(_BYTE *)(a1 + 1348) && (int)v302 >= 1)
        {
          v287 = 0;
          do
          {
            v288 = *(_QWORD *)(*(_QWORD *)(a1 + 2736) + v287 + 8);
            v290 = *(_QWORD *)(v288 - 16);
            v289 = (uint64_t *)(v288 - 16);
            (*(void (**)(void **__return_ptr))(*(_QWORD *)v290 + 16))(&__p);
            std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>::operator=[abi:ne180100]<kaldi::quasar::ComputeEngineBufferItf,std::default_delete<kaldi::quasar::ComputeEngineBufferItf>,void>(v289, (uint64_t *)&__p);
            v291 = __p;
            __p = 0;
            if (v291)
              (*(void (**)(void *))(*(_QWORD *)v291 + 8))(v291);
            v292 = *v289;
            v293 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v292 + 112))(v292, 0);
            (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)v292 + 104))(v292, 0, v293 + 1.0);
            v287 += 24;
          }
          while (24 * v302 != v287);
        }
        goto LABEL_394;
      }
      v311[2] = 0;
      *(_QWORD *)&v312 = 0;
      v311[0] = &unk_1EA92DFD8;
      v311[1] = 0;
      v275 = *(int *)(a1 + 1932);
      v276 = *(_QWORD *)(a1 + 1432);
      (*(void (**)(_QWORD, void **))(**(_QWORD **)(v276 + 8 * v275) + 40))(*(_QWORD *)(v276 + 8 * v275), v311);
      v277 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v276 + 8 * v275) + 152))(*(_QWORD *)(v276 + 8 * v275), 2);
      kaldi::CuMatrix<float>::Resize(a1 + 1976, v302, v277, 1u, 0);
      v279 = v277 * v302;
      *(_QWORD *)&v316 = 0;
      __p = &unk_1EA926538;
      __src = 0uLL;
      if ((v277 * v302) > LODWORD(v311[2]))
        kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v278);
      __src.i64[0] = (uint64_t)v311[1];
      __src.i32[2] = v277 * v302;
      *(_QWORD *)&v316 = v312;
      kaldi::CuMatrixBase<float>::CopyRowsFromVec(a1 + 1976, (uint64_t)&__p);
      if (*(int *)(a1 + 1936) >= 2)
      {
        v280 = 1;
        v281 = v277 * v302;
        v282 = 4 * v279;
        do
        {
          kaldi::CuMatrix<float>::CuMatrix((uint64_t)&__p, v302, v277, 1u, 0, 0);
          *(_OWORD *)&v319.__r_.__value_.__r.__words[1] = 0uLL;
          *(_QWORD *)&v320 = 0;
          v319.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EA926538;
          v281 += v279;
          if (v281 > LODWORD(v311[2]))
            kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v283);
          v319.__r_.__value_.__l.__size_ = (std::string::size_type)v311[1] + v282;
          LODWORD(v319.__r_.__value_.__r.__words[2]) = v277 * v302;
          *(_QWORD *)&v320 = v312;
          kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)&__p, (uint64_t)&v319);
          kaldi::CuMatrixBase<float>::AddMat(a1 + 1976, (uint64_t)&__p, 111, v284, v285, 1.0, 1.0);
          v282 += 4 * v279;
          ++v280;
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
        }
        while (v280 < *(int *)(a1 + 1936));
      }
      v286 = *(unsigned __int8 *)(a1 + 1344);
      if (!*(_BYTE *)(a1 + 1343))
      {
        if (!*(_BYTE *)(a1 + 1344))
        {
LABEL_387:
          v311[0] = &unk_1EA92DFD8;
          kaldi::CuVector<float>::Destroy((uint64_t)v311);
          goto LABEL_388;
        }
        v286 = 1;
      }
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&__p, a1 + 1976, 0, *(_DWORD *)(a1 + 1996), (const char *)*(unsigned __int8 *)(a1 + 1343), v277 - v286 - *(unsigned __int8 *)(a1 + 1343));
      kaldi::CuMatrix<float>::operator=(a1 + 1976, (uint64_t)&__p);
      __p = &unk_1EA926508;
      __src = 0u;
      v316 = 0u;
      kaldi::CuMatrixBase<float>::~CuMatrixBase(&__p);
      goto LABEL_387;
    }
    v312 = 0u;
    *(_OWORD *)&v311[1] = 0u;
    v311[0] = &unk_1EA92DFA8;
    v313 = 0;
    v272 = *(_QWORD *)(*(_QWORD *)(a1 + 1432) + 8 * *(int *)(a1 + 1940));
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v272 + 32))(v272, v311);
    std::string::basic_string[abi:ne180100]<0>(&__p, &byte_1DEBD87CE);
    kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&v319, v301, a1 + 2672, (__int128 *)&__p);
    if (__src.i8[15] < 0)
      operator delete(__p);
    v274 = *(uint64_t **)(a1 + 2552);
    if (!v274)
    {
      if (!*(_BYTE *)(a1 + 1339))
      {
        if (*(_BYTE *)(a1 + 1340))
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1327);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Not implemented yet", 19);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
        goto LABEL_376;
      }
      v274 = (uint64_t *)(a1 + 960);
    }
    kaldi::nnet1::Nnet::Feedforward(v274, (uint64_t)v311, v300, -1, 0);
LABEL_376:
    kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&v319, v273);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v311);
    goto LABEL_377;
  }
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1361, 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Iterating over batch, batch size: ", 34);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  if ((_DWORD)v302)
  {
    v12 = 0;
    v303 = (uint64_t *)(a1 + 1384);
    while (1)
    {
      v14 = v12 < *(unsigned int *)(a2 + 20) && *(_DWORD *)(a2 + 16) != 0;
      if (*(_BYTE *)(a1 + 1341))
      {
        if (!v14)
          kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x227, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v10);
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 1408) + 32 * *(int *)(a1 + 1900) + 24);
        (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)v15 + 104))(v15, 0, *(float *)(*(_QWORD *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * (int)v12));
        v16 = *(_QWORD *)(*(_QWORD *)(a1 + 1408) + 32 * *(int *)(a1 + 1904) + 24);
        v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2736) + 24 * v12 + 8) - 16);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 112))(v17, 0);
        if (*(_BYTE *)(a1 + 1351))
          v19 = 0.0;
        else
          v19 = 1.0;
        (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)v16 + 104))(v16, 0, v18 - v19);
        __p = 0;
        __src = 0uLL;
        v20 = *(_QWORD *)(a1 + 168);
        if (*(char *)(a1 + 1743) < 0)
          std::string::__init_copy_ctor_external(&v319, *(const std::string::value_type **)(a1 + 1720), *(_QWORD *)(a1 + 1728));
        else
          v319 = *(std::string *)(a1 + 1720);
        memset(v311, 0, sizeof(v311));
        p_p = v311;
        LOBYTE(v306) = 0;
        v311[0] = operator new(0x18uLL);
        v311[1] = v311[0];
        v311[2] = (char *)v311[0] + 24;
        v311[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v311[2], (__int128 *)&v319, &v320, (std::string *)v311[0]);
        p_p = 0;
        v306 = 0;
        v307 = 0;
        (*(void (**)(uint64_t, uint64_t, void **, void ***, void **))(*(_QWORD *)v20 + 112))(v20, a1 + 1408, v311, &p_p, &__p);
        v308[0] = (void **)&p_p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v308);
        p_p = v311;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
        if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v319.__r_.__value_.__l.__data_);
        v22 = *v303;
        v23 = *(_QWORD *)__p;
        *(_QWORD *)__p = 0;
        v24 = *(_QWORD *)(v22 + 24);
        *(_QWORD *)(v22 + 24) = v23;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        v311[0] = &__p;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)v311);
      }
      else
      {
        if (!v14)
          kaldi::KaldiAssertFailure_((kaldi *)"operator()", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x227, "static_cast<UnsignedMatrixIndexT>(r) < static_cast<UnsignedMatrixIndexT>(num_rows_) && static_cast<UnsignedMatrixIndexT>(c) < static_cast<UnsignedMatrixIndexT>(num_cols_)", v10);
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 1384) + 32 * *(int *)(a1 + 1916) + 24);
        (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)v21 + 104))(v21, 0, *(float *)(*(_QWORD *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * (int)v12));
      }
      if (*(_QWORD *)(a1 + 1872) != *(_QWORD *)(a1 + 1864))
      {
        v25 = 0;
        v26 = 0;
        do
        {
          (*(void (**)(void **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 2736) + 24 * v12)
                                                                    + v25)
                                                      + 16))(&__p);
          v27 = *(_QWORD *)(a1 + 1384) + 32 * ((int)v26 + *(_DWORD *)(a1 + 1896));
          v28 = __p;
          __p = 0;
          v29 = *(_QWORD *)(v27 + 24);
          *(_QWORD *)(v27 + 24) = v28;
          if (v29)
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
          v30 = __p;
          __p = 0;
          if (v30)
            (*(void (**)(void *))(*(_QWORD *)v30 + 8))(v30);
          ++v26;
          v25 += 16;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 1872) - *(_QWORD *)(a1 + 1864)) >> 3) > v26);
      }
      if (!*(_BYTE *)(a1 + 1348))
        goto LABEL_51;
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 2736) + 24 * v12 + 8)
                                                                - 16)
                                                  + 16))(&__p);
      v31 = *(_QWORD *)(a1 + 1384) + 32 * *(int *)(a1 + 1920);
      v32 = __p;
      __p = 0;
      v33 = *(_QWORD *)(v31 + 24);
      *(_QWORD *)(v31 + 24) = v32;
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      v34 = __p;
      __p = 0;
      if (v34)
        (*(void (**)(void *))(*(_QWORD *)v34 + 8))(v34);
      if (*(char *)(a1 + 1671) < 0)
        break;
      if (*(_BYTE *)(a1 + 1671))
        goto LABEL_48;
LABEL_49:
      if (kaldi::g_kaldi_verbose_level >= 5)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1390, 5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Position input: ", 16);
        v38 = *(_QWORD *)(*(_QWORD *)(a1 + 1384) + 32 * *(int *)(a1 + 1920) + 24);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v38 + 112))(v38, 0);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
      }
LABEL_51:
      std::string::basic_string[abi:ne180100]<0>(v311, &byte_1DEBD87CE);
      kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&__p, v301, a1 + 2664, (__int128 *)v311);
      if (SHIBYTE(v311[2]) < 0)
        operator delete(v311[0]);
      v39 = a2;
      v40 = *(_QWORD *)(a1 + 184);
      memset(v311, 0, sizeof(v311));
      (*(void (**)(uint64_t, uint64_t *, uint64_t, void **, uint64_t))(*(_QWORD *)v40 + 112))(v40, v303, a1 + 1816, v311, a1 + 1432);
      v319.__r_.__value_.__r.__words[0] = (std::string::size_type)v311;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v319);
      kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&__p, v41);
      if (*(_QWORD *)(a1 + 1872) != *(_QWORD *)(a1 + 1864))
      {
        v42 = 0;
        v43 = 0;
        do
        {
          (*(void (**)(void **__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1 + 1432)
                                                                    + 8 * ((int)v43 + *(_DWORD *)(a1 + 1892)))
                                                      + 16))(&__p);
          std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>::operator=[abi:ne180100]<kaldi::quasar::ComputeEngineBufferItf,std::default_delete<kaldi::quasar::ComputeEngineBufferItf>,void>((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2736) + 24 * v12) + v42), (uint64_t *)&__p);
          v44 = __p;
          __p = 0;
          if (v44)
            (*(void (**)(void *))(*(_QWORD *)v44 + 8))(v44);
          ++v43;
          v42 += 16;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 1872) - *(_QWORD *)(a1 + 1864)) >> 3) > v43);
      }
      v308[1] = 0;
      v309 = 0;
      v310 = 0;
      v308[0] = (void **)&unk_1EA92DFD8;
      if (*(_BYTE *)(a1 + 1339) || *(_BYTE *)(a1 + 1340))
      {
        *(_OWORD *)&v311[1] = 0u;
        v312 = 0u;
        v311[0] = &unk_1EA92DFA8;
        v313 = 0;
        *(_OWORD *)&v319.__r_.__value_.__r.__words[1] = 0u;
        v320 = 0u;
        v319.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EA92DFA8;
        v321 = 0;
        v45 = *(_QWORD *)(*(_QWORD *)(a1 + 1432) + 8 * *(int *)(a1 + 1940));
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v45 + 32))(v45, v311);
        v46 = v300;
        a2 = v39;
        std::string::basic_string[abi:ne180100]<0>(&__p, &byte_1DEBD87CE);
        kaldi::quasar::TimeBlock::TimeBlock((uint64_t)&p_p, v301, a1 + 2672, (__int128 *)&__p);
        if (__src.i8[15] < 0)
          operator delete(__p);
        v50 = *(uint64_t **)(a1 + 2552);
        if (v50 || (v50 = (uint64_t *)(a1 + 960), *(_BYTE *)(a1 + 1339)))
        {
          kaldi::nnet1::Nnet::Feedforward(v50, (uint64_t)v311, (uint64_t)&v319, -1, 0);
        }
        else if (*(_BYTE *)(a1 + 1340))
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1415);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Not implemented yet", 19);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
        if (!HIDWORD(v319.__r_.__value_.__r.__words[2]))
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v49);
        __p = &unk_1EA926538;
        __src.i64[0] = v319.__r_.__value_.__l.__size_;
        *(_QWORD *)&v316 = *((_QWORD *)&v320 + 1);
        __src.i64[1] = LODWORD(v319.__r_.__value_.__r.__words[2]);
        kaldi::CuVector<float>::operator=((uint64_t)v308, (uint64_t)&__p, v47, v48, v49);
        kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&p_p, v51);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v319);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v311);
      }
      else
      {
        v75 = *(_QWORD *)(*(_QWORD *)(a1 + 1432) + 8 * *(int *)(a1 + 1940));
        (*(void (**)(uint64_t, void ***))(*(_QWORD *)v75 + 40))(v75, v308);
        v46 = v300;
        a2 = v39;
      }
      if (kaldi::g_kaldi_verbose_level >= 5)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, "Feedforward", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1423, 5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"readout layer size: ", 20);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
      }
      v54 = v309;
      if (*(_DWORD *)(v46 + 16) < (int)v309)
        kaldi::CuMatrix<float>::Resize(v46, v302, v309, 2u, 0);
      if (v12 >= *(unsigned int *)(v46 + 20))
        kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v53);
      v55 = *(_QWORD *)(v46 + 8) + 4 * *(_DWORD *)(v46 + 24) * (int)v12;
      v56 = *(_DWORD *)(v46 + 16);
      v57 = *(_QWORD *)(v46 + 32);
      __p = &unk_1EA926538;
      __src.i64[0] = v55;
      *(_QWORD *)&v316 = v57;
      __src.i64[1] = v56;
      kaldi::CuVectorBase<float>::CopyFromVec(&__p, (uint64_t)v308, v54, v52, v53);
      if (*(_BYTE *)(a1 + 1948))
      {
        __src = 0u;
        v316 = 0u;
        __p = &unk_1EA92DFA8;
        v317 = 0;
        v58 = *(_QWORD *)(*(_QWORD *)(a1 + 1432) + 8 * *(int *)(a1 + 1932));
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v58 + 32))(v58, &__p);
        v61 = *(unsigned __int8 *)(a1 + 1343);
        v62 = __src.i32[2] - *(unsigned __int8 *)(a1 + 1344);
        v63 = (v62 - v61);
        if (*(_DWORD *)(a1 + 1996) != (_DWORD)v302 || (v64 = v302, *(_DWORD *)(a1 + 1992) != (_DWORD)v63))
        {
          kaldi::CuMatrix<float>::Resize(a1 + 1976, v302, v63, 2u, 0);
          v64 = *(unsigned int *)(a1 + 1996);
        }
        if (v64 <= v12)
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v60);
        v65 = (void *)(*(_QWORD *)(a1 + 1984) + 4 * *(_DWORD *)(a1 + 2000) * (int)v12);
        v66 = *(_DWORD *)(a1 + 1992);
        v67 = *(_QWORD *)(a1 + 2008);
        v311[0] = &unk_1EA926538;
        v311[1] = v65;
        *(_QWORD *)&v312 = v67;
        v311[2] = (void *)v66;
        if (!__src.i32[3])
          kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v60);
        *(_QWORD *)&v320 = 0;
        *(_OWORD *)&v319.__r_.__value_.__r.__words[1] = 0uLL;
        v319.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EA926538;
        if ((v62 + v61) > __src.i32[2])
          kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v60);
        v319.__r_.__value_.__l.__size_ = __src.i64[0] + 4 * v61;
        LODWORD(v319.__r_.__value_.__r.__words[2]) = v62;
        *(_QWORD *)&v320 = *((_QWORD *)&v316 + 1);
        kaldi::CuVectorBase<float>::CopyFromVec(v311, (uint64_t)&v319, v63, v59, v60);
        if (*(int *)(a1 + 1936) >= 2)
        {
          v71 = 1;
          do
          {
            if (v12 >= *(unsigned int *)(a1 + 1996))
              kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v70);
            v72 = (void *)(*(_QWORD *)(a1 + 1984) + 4 * *(_DWORD *)(a1 + 2000) * (int)v12);
            v73 = *(_DWORD *)(a1 + 1992);
            v74 = *(_QWORD *)(a1 + 2008);
            v311[0] = &unk_1EA926538;
            v311[1] = v72;
            *(_QWORD *)&v312 = v74;
            v311[2] = (void *)v73;
            if (__src.i32[3] <= v71)
              kaldi::KaldiAssertFailure_((kaldi *)"Row", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-matrix.h", (const char *)0x219, "static_cast<UnsignedMatrixIndexT>(i) < static_cast<UnsignedMatrixIndexT>(num_rows_)", v70);
            *(_QWORD *)&v320 = 0;
            *(_OWORD *)&v319.__r_.__value_.__r.__words[1] = 0uLL;
            v319.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EA926538;
            if ((v62 + v61) > __src.i32[2])
              kaldi::KaldiAssertFailure_((kaldi *)"CuSubVector", "../engine/common/libquasar/libkaldi/src/cudamatrix/cu-vector.h", (const char *)0x1D4, "static_cast<UnsignedMatrixIndexT>(origin)+ static_cast<UnsignedMatrixIndexT>(length) <= static_cast<UnsignedMatrixIndexT>(t.Dim())", v70);
            v319.__r_.__value_.__l.__size_ = __src.i64[0] + 4 * (int)v316 * v71 + 4 * v61;
            LODWORD(v319.__r_.__value_.__r.__words[2]) = v62;
            *(_QWORD *)&v320 = *((_QWORD *)&v316 + 1);
            kaldi::CuVectorBase<float>::AddVec((uint64_t)v311, (uint64_t)&v319, v68, v69, v70, 1.0, 1.0);
            ++v71;
          }
          while (v71 < *(_DWORD *)(a1 + 1936));
        }
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
        a2 = v39;
      }
      v308[0] = (void **)&unk_1EA92DFD8;
      kaldi::CuVector<float>::Destroy((uint64_t)v308);
      if (++v12 == v302)
        goto LABEL_388;
    }
    if (!*(_QWORD *)(a1 + 1656))
      goto LABEL_49;
LABEL_48:
    v35 = *(_QWORD *)(*(_QWORD *)(a1 + 1384) + 32 * *(int *)(a1 + 1920) + 24);
    v36 = 1.0 / ((*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 112))(v35, 0) + 1.0);
    v37 = *(_QWORD *)(*(_QWORD *)(a1 + 1384) + 32 * *(int *)(a1 + 1928) + 24);
    (*(void (**)(uint64_t, _QWORD, float))(*(_QWORD *)v37 + 104))(v37, 0, v36);
    goto LABEL_49;
  }
LABEL_394:
  if (*(_BYTE *)(a1 + 1948))
  {
    v294 = *(_DWORD *)(a1 + 1936);
    if (v294 >= 2)
    {
      v295 = 1.0 / (double)v294;
      kaldi::CuMatrixBase<float>::Scale(a1 + 1976, v295);
    }
    __p = 0;
    __src = 0uLL;
    kaldi::CuMatrixBase<float>::FindRowMaxId(a1 + 1976, (int *)&__p, v8, v9, v10);
    begin = *(std::vector<int>::pointer *)(a1 + 1952);
    v297 = (*(_QWORD *)(a1 + 1960) - (_QWORD)begin) >> 2;
    if ((_DWORD)__p != (_DWORD)v297)
    {
      v298 = (std::vector<int> *)(a1 + 1952);
      std::vector<int>::resize(v298, (int)__p);
      begin = v298->__begin_;
      LODWORD(v297) = (_DWORD)__p;
    }
    memcpy(begin, (const void *)__src.i64[0], 4 * (int)v297);
    if (__src.i64[0])
      free((void *)__src.i64[0]);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v318, v7);
}

void sub_1DE4F1D54(int a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  uint64_t v49;

  if (a49)
    free(a49);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v49 - 240), a2);
  JUMPOUT(0x1DE4F20A4);
}

void sub_1DE4F1D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1DE4F1D80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DE4F1D8C()
{
  JUMPOUT(0x1DE4F1FACLL);
}

void sub_1DE4F1DAC()
{
  JUMPOUT(0x1DE4F1FE0);
}

void sub_1DE4F1DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  a41 = &a48;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a41);
  JUMPOUT(0x1DE4F209CLL);
}

void sub_1DE4F1DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void **a48)
{
  uint64_t v48;
  clockid_t v49;

  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a48);
  a48 = (void **)&a41;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a48);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v48 - 240), v49);
  JUMPOUT(0x1DE4F20A4);
}

void sub_1DE4F1DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;
  clockid_t v42;

  kaldi::CuVector<float>::~CuVector(&a41);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v41 - 240), v42);
  JUMPOUT(0x1DE4F20A4);
}

void sub_1DE4F1DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a48);
  JUMPOUT(0x1DE4F1DF4);
}

void sub_1DE4F1E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  uint64_t v48;
  clockid_t v49;
  clockid_t v50;

  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a48);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a41, v49);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v48 - 240), v50);
  JUMPOUT(0x1DE4F20A4);
}

void sub_1DE4F1E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a31);
  if (*(char *)(v48 - 169) < 0)
    operator delete(*(void **)(v48 - 192));
  a41 = &a48;
  JUMPOUT(0x1DE4F206CLL);
}

void sub_1DE4F1ED0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  JUMPOUT(0x1DE4F1F04);
}

void sub_1DE4F1EF8(uint64_t a1, clockid_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a31, a2);
  kaldi::CuMatrix<float>::~CuMatrix(v41 - 192);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a41);
  JUMPOUT(0x1DE4F2030);
}

void sub_1DE4F1F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  uint64_t v48;
  clockid_t v49;

  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a48);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v48 - 240), v49);
  JUMPOUT(0x1DE4F20A4);
}

void sub_1DE4F1F2C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1DE4F1F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a48);
  JUMPOUT(0x1DE4F202CLL);
}

void sub_1DE4F1F50()
{
  JUMPOUT(0x1DE4F202CLL);
}

void sub_1DE4F1F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (a46 < 0)
    JUMPOUT(0x1DE4F1F6CLL);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v46 - 240));
  JUMPOUT(0x1DE4F20A4);
}

void sub_1DE4F1F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  *(_QWORD *)(v41 - 192) = &a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 192));
  JUMPOUT(0x1DE4F1FE4);
}

void sub_1DE4F1F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t *a48)
{
  uint64_t v48;

  if (*(char *)(v48 - 169) < 0)
    operator delete(*(void **)(v48 - 192));
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a48);
  a48 = &a41;
  JUMPOUT(0x1DE4F206CLL);
}

void sub_1DE4F1FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  clockid_t v49;

  if (*(char *)(v48 - 169) < 0)
    operator delete(*(void **)(v48 - 192));
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a48);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a41, v49);
  JUMPOUT(0x1DE4F209CLL);
}

void sub_1DE4F1FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;
  void *v42;

  if (a31)
    (*(void (**)(uint64_t))(*(_QWORD *)a31 + 8))(a31);
  v42 = *(void **)(v41 - 192);
  if (v42)
  {
    *(_QWORD *)(v41 - 184) = v42;
    operator delete(v42);
  }
  *(_QWORD *)(v41 - 192) = &a41;
  JUMPOUT(0x1DE4F206CLL);
}

void sub_1DE4F2020()
{
  JUMPOUT(0x1DE4F2028);
}

void sub_1DE4F2038()
{
  JUMPOUT(0x1DE4F2060);
}

void sub_1DE4F2078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;

  if (a48)
    (*(void (**)(uint64_t))(*(_QWORD *)a48 + 8))(a48);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v48 - 240));
  JUMPOUT(0x1DE4F20A4);
}

_QWORD *std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>::operator=[abi:ne180100]<kaldi::quasar::ComputeEngineBufferItf,std::default_delete<kaldi::quasar::ComputeEngineBufferItf>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1EA936CD8;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

double kaldi::quasar::Encdec::Finish(kaldi::quasar::Encdec *this, clockid_t a2)
{
  double result;

  result = *((double *)this + 325) + kaldi::Timer::GetSeconds((kaldi::Timer *)5, a2) - *((double *)this + 320);
  *((double *)this + 325) = result;
  return result;
}

void kaldi::quasar::Encdec::ConstrainSoftmax(uint64_t a1, unsigned __int8 *a2, int a3, int a4, uint64_t *a5, int **a6, _QWORD *a7)
{
  kaldi::nnet1::Nnet *v12;
  int v13;
  int v14;
  __n128 v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  std::string::size_type v19;
  unint64_t v20;
  __int128 v21;
  std::string::size_type v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  __int128 v31;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string::size_type v34;
  void **v35[3];
  std::string v36;
  std::string::size_type v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE v41[40];
  void *__p;
  _BYTE *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  char *v47;
  uint64_t *v48;
  unint64_t *v49;
  void ***v50;
  std::string v51;
  __int128 v52;

  *(_QWORD *)&v52 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 1338))
  {
    if (*(_BYTE *)(a1 + 1339))
    {
      v12 = kaldi::quasar::Shortlist::ConstrainSoftmax(a1 + 2024, a2, *(_DWORD *)(a1 + 732) - 1, *(_DWORD *)(a1 + 736) - 1, a3, a4, a5, (kaldi::nnet1::Nnet *)(a1 + 960), a6, a7);
      *(_QWORD *)(a1 + 2552) = v12;
      *(_BYTE *)(a1 + 1342) = v12 != 0;
    }
    else
    {
      v13 = *(_DWORD *)(a1 + 732) - 1;
      v14 = *(_DWORD *)(a1 + 736) - 1;
      if (*(_BYTE *)(a1 + 1340))
      {
        if ((kaldi::quasar::Shortlist::MapShortlist(a1 + 2024, a2, v13, v14, a3, a4, a5, a6, a7, 1) & 1) == 0)
        {
          kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v45, "ConstrainSoftmax", "/Library/Caches/com.apple.xbs/Sources/SiriTTS/engine/common/libquasar/libkaldi/src/nnmt/encdec.cc", 1523);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(&v45, "Map shortlist error!");
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v45);
        }
        __p = 0;
        v43 = 0;
        v44 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 2136), *(_QWORD *)(a1 + 2144), (uint64_t)(*(_QWORD *)(a1 + 2144) - *(_QWORD *)(a1 + 2136)) >> 2);
        v15.n128_f64[0] = kaldi::Matrix<float>::Matrix((uint64_t)v41);
        v16 = *(_QWORD *)(a1 + 200);
        v38 = 0;
        v39 = 0;
        v40 = 0;
        if (*(_DWORD *)(a1 + 1908))
        {
          v17 = __p;
          if (v43 != __p)
          {
            v18 = (v43 - (_BYTE *)__p) >> 2;
            if (v18 <= 1)
              v18 = 1;
            do
            {
              *v17++ += *(_DWORD *)(a1 + 1908);
              --v18;
            }
            while (v18);
          }
        }
        (*(void (**)(std::string *__return_ptr, uint64_t, void **, _QWORD, __n128))(*(_QWORD *)v16 + 16))(&v51, v16, &__p, 0, v15);
        if (*(char *)(a1 + 1791) < 0)
          std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(a1 + 1768), *(_QWORD *)(a1 + 1776));
        else
          v36 = *(std::string *)(a1 + 1768);
        v19 = v51.__r_.__value_.__r.__words[0];
        v51.__r_.__value_.__r.__words[0] = 0;
        v37 = v19;
        v20 = v39;
        if (v39 >= v40)
        {
          v24 = (uint64_t)(v39 - v38) >> 5;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v26 = v40 - v38;
          if ((uint64_t)(v40 - v38) >> 4 > v25)
            v25 = v26 >> 4;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0)
            v27 = 0x7FFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          v49 = &v40;
          v28 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuVector<float>>>((uint64_t)&v40, v27);
          v29 = &v28[4 * v24];
          v45 = v28;
          v46 = v29;
          v48 = &v28[4 * v30];
          v31 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
          v29[2] = v36.__r_.__value_.__r.__words[2];
          *(_OWORD *)v29 = v31;
          memset(&v36, 0, sizeof(v36));
          v32 = v37;
          v37 = 0;
          v29[3] = v32;
          v47 = (char *)(v29 + 4);
          std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(&v38, &v45);
          v23 = v39;
          std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)&v45);
        }
        else
        {
          v21 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
          *(_QWORD *)(v39 + 16) = *((_QWORD *)&v36.__r_.__value_.__l + 2);
          *(_OWORD *)v20 = v21;
          memset(&v36, 0, sizeof(v36));
          v22 = v37;
          v37 = 0;
          *(_QWORD *)(v20 + 24) = v22;
          v23 = v20 + 32;
        }
        v39 = v23;
        v33 = v37;
        v37 = 0;
        if (v33)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v33 + 8))(v33);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
        v34 = v51.__r_.__value_.__r.__words[0];
        v51.__r_.__value_.__r.__words[0] = 0;
        if (v34)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v34 + 8))(v34);
        (*(void (**)(_QWORD))(**(_QWORD **)(v39 - 8) + 80))(*(_QWORD *)(v39 - 8));
        v45 = 0;
        v46 = 0;
        v47 = 0;
        if (*(char *)(a1 + 1815) < 0)
          std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)(a1 + 1792), *(_QWORD *)(a1 + 1800));
        else
          v51 = *(std::string *)(a1 + 1792);
        memset(&v36, 0, sizeof(v36));
        v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        v36.__r_.__value_.__l.__size_ = v36.__r_.__value_.__r.__words[0];
        v36.__r_.__value_.__r.__words[2] = v36.__r_.__value_.__r.__words[0] + 24;
        v36.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v36.__r_.__value_.__r.__words[2], (__int128 *)&v51, &v52, (std::string *)v36.__r_.__value_.__l.__data_);
        memset(v35, 0, sizeof(v35));
        (*(void (**)(uint64_t, uint64_t *, std::string *, void ***, uint64_t **))(*(_QWORD *)v16 + 112))(v16, &v38, &v36, v35, &v45);
        v50 = v35;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
        v35[0] = (void **)&v36;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v35);
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)*v45 + 24))(*v45, v41);
        v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
        std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
        v45 = &v38;
        std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
        *(_QWORD *)(a1 + 2552) = kaldi::quasar::Shortlist::ConstructNnet((_QWORD *)(a1 + 2024), (uint64_t)v41, *(unsigned __int8 *)(a1 + 1912));
        *(_BYTE *)(a1 + 1342) = 1;
        kaldi::Matrix<float>::~Matrix((uint64_t)v41);
        if (__p)
        {
          v43 = __p;
          operator delete(__p);
        }
      }
      else
      {
        *(_BYTE *)(a1 + 1342) = kaldi::quasar::Shortlist::MapShortlist(a1 + 2024, a2, v13, v14, a3, a4, a5, a6, a7, 0);
      }
    }
  }
}

void sub_1DE4F2630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::Encdec::GetSoftmaxEosId(kaldi::quasar::Encdec *this)
{
  if (*((_BYTE *)this + 1342))
    return *((unsigned int *)this + 540);
  else
    return (*((_DWORD *)this + 183) - 1);
}

uint64_t kaldi::quasar::Encdec::GetVocabWordIdx(kaldi::quasar::Encdec *this, uint64_t a2)
{
  if (*((_BYTE *)this + 1342))
    return *(unsigned int *)(*((_QWORD *)this + 267) + 4 * (int)a2);
  return a2;
}

std::__fs::filesystem::path *std::__fs::filesystem::path::operator/=[abi:ne180100](std::__fs::filesystem::path *a1, std::__fs::filesystem::path *this)
{
  int v4;
  std::__fs::filesystem::path *v5;
  std::string::size_type size;

  if (std::__fs::filesystem::path::__root_directory(this).__size_)
  {
    std::string::operator=(&a1->__pn_, &this->__pn_);
  }
  else
  {
    if (std::__fs::filesystem::path::__filename(a1).__size_)
      std::string::push_back(&a1->__pn_, 47);
    v4 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (v4 >= 0)
      v5 = this;
    else
      v5 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    if (v4 >= 0)
      size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    else
      size = this->__pn_.__r_.__value_.__l.__size_;
    std::string::append(&a1->__pn_, (const std::string::value_type *)v5, size);
  }
  return a1;
}

void kaldi::quasar::ESNetworkConfig::~ESNetworkConfig(void **this)
{
  *this = &off_1EA92DD40;
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 8), this[9]);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf((kaldi::quasar::ComputeEngineConfigItf *)this);
}

{
  kaldi::quasar::ESNetworkConfig::~ESNetworkConfig(this);
  JUMPOUT(0x1DF0ED014);
}

fst *fst::LogMessage::LogMessage(fst *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  BOOL v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(char *)(a2 + 23);
  if (v4 < 0)
  {
    if (*(_QWORD *)(a2 + 8) != 5)
    {
LABEL_12:
      v9 = 0;
      goto LABEL_13;
    }
    v5 = *(_QWORD *)a2;
  }
  else
  {
    v5 = a2;
    if (v4 != 5)
      goto LABEL_12;
  }
  v6 = *(_DWORD *)v5;
  v7 = *(unsigned __int8 *)(v5 + 4);
  v9 = v6 == 1096040774 && v7 == 76;
LABEL_13:
  *(_BYTE *)a1 = v9;
  v10 = (_QWORD *)fst::cerr(a1);
  v11 = *(char *)(a2 + 23);
  if (v11 >= 0)
    v12 = a2;
  else
    v12 = *(_QWORD *)a2;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a2 + 23);
  else
    v13 = *(_QWORD *)(a2 + 8);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": ", 2);
  return a1;
}

void fst::LogMessage::~LogMessage(fst::LogMessage *this)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  std::locale v4;

  v2 = (_QWORD *)fst::cerr(this);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v3 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  if (*(_BYTE *)this)
    exit(1);
}

void sub_1DE4F29AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  __clang_call_terminate(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1DE4F2A40(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<long long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<long long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1DE4F2AB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, char *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  v4 = (int)v3 < 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((int)v3 < 0)
    a2 = *(char **)a2;
  v3 = v3;
  if (v4)
    v3 = v5;
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, &a2[v3]);
  return a1;
}

void sub_1DE4F2B88(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,0>(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t *std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1DE4F2EE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<kaldi::quasar::ComputeEngineItf>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::MTESNetworkPlan,std::allocator<kaldi::quasar::MTESNetworkPlan>,kaldi::quasar::ESNetworkConfig &,void>@<X0>(kaldi::quasar::ESNetworkConfig *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x178uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::MTESNetworkPlan>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::ESNetworkConfig &,std::allocator<kaldi::quasar::MTESNetworkPlan>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1DE4F2F80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::MTESNetworkPlan>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::ESNetworkConfig &,std::allocator<kaldi::quasar::MTESNetworkPlan>,0>(_QWORD *a1, kaldi::quasar::ESNetworkConfig *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1EA9361E8;
  a1[1] = 0;
  std::allocator<kaldi::quasar::MTESNetworkPlan>::construct[abi:ne180100]<kaldi::quasar::MTESNetworkPlan,kaldi::quasar::ESNetworkConfig &>((int)&v4, (kaldi::quasar::ESNetworkPlan *)(a1 + 3), a2);
  return a1;
}

void sub_1DE4F2FE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::MTESNetworkPlan>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9361E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::MTESNetworkPlan>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EA9361E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::MTESNetworkPlan>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocator<kaldi::quasar::MTESNetworkPlan>::construct[abi:ne180100]<kaldi::quasar::MTESNetworkPlan,kaldi::quasar::ESNetworkConfig &>(int a1, kaldi::quasar::ESNetworkPlan *this, kaldi::quasar::ESNetworkConfig *a3)
{
  kaldi::quasar::ESNetworkPlan::ESNetworkPlan(this, a3);
  *(_QWORD *)this = &unk_1EA92DD80;
  return std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 41, &byte_1DEBD87CE);
}

void sub_1DE4F3094(_Unwind_Exception *a1)
{
  kaldi::quasar::ESNetworkPlan *v1;

  kaldi::quasar::ESNetworkPlan::~ESNetworkPlan(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::MTESNetworkPlan::~MTESNetworkPlan(void **this)
{
  *this = &unk_1EA92DD80;
  if (*((char *)this + 351) < 0)
    operator delete(this[41]);
  kaldi::quasar::ESNetworkPlan::~ESNetworkPlan((kaldi::quasar::ESNetworkPlan *)this);
}

{
  *this = &unk_1EA92DD80;
  if (*((char *)this + 351) < 0)
    operator delete(this[41]);
  kaldi::quasar::ESNetworkPlan::~ESNetworkPlan((kaldi::quasar::ESNetworkPlan *)this);
  JUMPOUT(0x1DF0ED014);
}

void kaldi::quasar::ComputeEngineItf::CreateZeroedDataFloat16()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "CreateZeroedDataFloat16", "../engine/common/libquasar/libkaldi/src/shared-bridge/compute-engine-itf.h", 83);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::quasar::ComputeEngineItf::CreateCopyFloat16(kaldi::quasar::ComputeEngineItf *this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
  _QWORD v2[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "CreateCopyFloat16", "../engine/common/libquasar/libkaldi/src/shared-bridge/compute-engine-itf.h", 100);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Not implemented.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void kaldi::quasar::ComputeEngineItf::CreateCopyFloat32(kaldi::quasar::ComputeEngineItf *this, const kaldi::quasar::ComputeEngineBufferItf *a2)
{
  _QWORD v2[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2, "CreateCopyFloat32", "../engine/common/libquasar/libkaldi/src/shared-bridge/compute-engine-itf.h", 103);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Not implemented.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
}

void kaldi::quasar::MTESNetworkPlan::Run(uint64_t a1, __int128 **a2, __int128 **a3, uint64_t a4, uint64_t **a5)
{
  kaldi::quasar::MTESNetworkPlan::prepare_network(a1);
  kaldi::quasar::ESNetworkPlan::Run(a1, a2, a3, a4, a5);
}

{
  kaldi::quasar::MTESNetworkPlan::prepare_network(a1);
  kaldi::quasar::ESNetworkPlan::Run(a1, a2, a3, a4, a5);
}

void kaldi::quasar::ComputeEngineItf::RunFunction()
{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "RunFunction", "../engine/common/libquasar/libkaldi/src/shared-bridge/compute-engine-itf.h", 136);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  _QWORD v0[34];

  kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0, "RunFunction", "../engine/common/libquasar/libkaldi/src/shared-bridge/compute-engine-itf.h", 142);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::quasar::MTESNetworkPlan::prepare_network(uint64_t this)
{
  _QWORD v1[34];

  if ((*(char *)(this + 351) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(this + 351))
      return this;
LABEL_5:
    kaldi::KaldiErrorMessage::KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1, "prepare_network", "../engine/common/libquasar/libkaldi/src/nnmt/mt-es-model.h", 40);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "Dynamic switch is not support in this platform");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
  }
  if (*(_QWORD *)(this + 336))
    goto LABEL_5;
  return this;
}

uint64_t std::__split_buffer<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

fst::SymbolTable *fst::SymbolTable::SymbolTable(fst::SymbolTable *this)
{
  std::string *v2;
  void *__p[2];
  char v5;

  *(_QWORD *)this = &off_1EA924678;
  v2 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "<unspecified>");
  fst::SymbolTableImpl::SymbolTableImpl(v2, (__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  *((_QWORD *)this + 1) = v2;
  return this;
}

void sub_1DE4F34D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1DF0ED014](v15, 0x10B2C404FCE5648);
  _Unwind_Resume(a1);
}

std::string *fst::SymbolTableImpl::SymbolTableImpl(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  fst::internal::DenseSymbolMap::DenseSymbolMap((fst::internal::DenseSymbolMap *)&this[1].__r_.__value_.__r.__words[2]);
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[6].__r_.__value_.__r.__words[2] = 0;
  this[6].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[6].__r_.__value_.__l.__size_;
  LODWORD(this[7].__r_.__value_.__l.__data_) = 1;
  this[7].__r_.__value_.__s.__data_[4] = 0;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[8].__r_.__value_.__r.__words[2] = 0u;
  return this;
}

void sub_1DE4F3590(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::__map_value_compare<std::string,std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,kaldi::nnet1::Component::ComponentType>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

__n128 std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string>>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __n128 result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  *((_QWORD *)v6 + 9) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1DE4F36C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

std::string *std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(std::vector<std::string> *a1, std::string *a2, std::string *a3, __int128 *a4, uint64_t a5)
{
  std::string *v5;
  std::allocator<std::string> *p_end_cap;
  std::string *v10;
  std::string *value;
  std::string *v12;
  std::vector<std::string>::pointer begin;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::string *v19;
  uint64_t v20;
  __int128 *v21;
  std::__split_buffer<std::string> __v;

  v5 = a2;
  if (a5 >= 1)
  {
    value = a1->__end_cap_.__value_;
    p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
    v10 = value;
    v12 = (std::string *)*((_QWORD *)p_end_cap - 1);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v12) >> 3)) >= a5)
    {
      v20 = (char *)v12 - (char *)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)a2) >> 3)) >= a5)
      {
        v21 = (__int128 *)&a3[a5];
      }
      else
      {
        v21 = (__int128 *)(&a3->__r_.__value_.__l.__data_ + (((char *)v12 - (char *)a2) >> 3));
        a1->__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, v21, a4, *((std::string **)p_end_cap - 1));
        if (v20 < 1)
          return v5;
      }
      std::vector<std::string>::__move_range(a1, v5, v12, &v5[a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(a3, (std::string *)v21, v5);
    }
    else
    {
      begin = a1->__begin_;
      v14 = a5 - 0x5555555555555555 * (((char *)v12 - (char *)a1->__begin_) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)begin) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)begin) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      __v.__end_cap_.__value_ = p_end_cap;
      if (v18)
        v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v18);
      else
        v19 = 0;
      __v.__first_ = v19;
      __v.__begin_ = v19 + v15;
      __v.__end_ = __v.__begin_;
      __v.__end_cap_.__value_ = &v19[v18];
      std::__split_buffer<std::string>::__construct_at_end_with_size<std::__wrap_iter<std::string*>>((uint64_t)&__v, (__int128 *)a3, a5);
      v5 = std::vector<std::string>::__swap_out_circular_buffer(a1, &__v, v5);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
  }
  return v5;
}

void sub_1DE4F38C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::string> *a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<std::string>::__construct_at_end_with_size<std::__wrap_iter<std::string*>>(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::string *v4;
  std::string *v6;
  uint64_t v7;
  __int128 v8;

  v4 = *(std::string **)(a1 + 16);
  if (a3)
  {
    v6 = &v4[a3];
    v7 = 24 * a3;
    do
    {
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v8 = *a2;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v8;
      }
      ++v4;
      a2 = (__int128 *)((char *)a2 + 24);
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  *(_QWORD *)(a1 + 16) = v4;
}

void sub_1DE4F3968(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__assign_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;

  v6 = a2;
  v8 = *(uint64_t **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((void **)a1);
    if (a4 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 3;
    if (v9 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = (uint64_t)std::vector<std::pair<int,double>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v13 = *(uint64_t **)(a1 + 8);
    while (v6 != a3)
    {
      v14 = v6[1];
      *v13 = *v6;
      v13[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v6 += 2;
      v13 += 2;
    }
LABEL_25:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  result = *(_QWORD *)(a1 + 8);
  v17 = (result - (uint64_t)v8) >> 4;
  if (v17 < a4)
  {
    v18 = &a2[2 * v17];
    if ((uint64_t *)result != v8)
    {
      v19 = 16 * v17;
      do
      {
        result = (uint64_t)std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100](v8, v6);
        v6 += 2;
        v8 += 2;
        v19 -= 16;
      }
      while (v19);
      v8 = *(uint64_t **)(a1 + 8);
    }
    v13 = v8;
    if (v18 != a3)
    {
      v13 = v8;
      do
      {
        v20 = v18[1];
        *v13 = *v18;
        v13[1] = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v18 += 2;
        v13 += 2;
      }
      while (v18 != a3);
    }
    goto LABEL_25;
  }
  if (a2 == a3)
  {
    v23 = v8;
  }
  else
  {
    v23 = v8;
    do
    {
      std::shared_ptr<fst::MappedFile>::operator=[abi:ne180100](v8, v6);
      v6 += 2;
      v8 += 2;
      v23 += 2;
    }
    while (v6 != a3);
    result = *(_QWORD *)(a1 + 8);
  }
  while ((uint64_t *)result != v23)
    result = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](result - 16);
  *(_QWORD *)(a1 + 8) = v23;
  return result;
}

void std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = std::shared_ptr<kaldi::ModelInitializeContext>::~shared_ptr[abi:ne180100](v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(&v15);
  }
}

void sub_1DE4F3CCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = a7 - 32;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)v8 = v9;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v10 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(v8 + 24) = v10;
      *((_QWORD *)&v16 + 1) = v8;
      v7 -= 32;
      v8 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>,std::reverse_iterator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100](v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 32;
    std::allocator<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::destroy[abi:ne180100](v4, i - 32);
  }
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<int>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1DE4F416C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::ComputeEngineBufferItf  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::ComputeEngineBufferItf  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1DE4F4348(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1DF0ECC78](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1DE4F4328);
}

void sub_1DE4F4390(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1DE4F44C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1DE4F45D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFst(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFstImpl(v2);
  *a1 = &unk_1EA9261D0;
  a1[1] = v2;
  return a1;
}

void sub_1DE4F463C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFst(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFstImpl(v4, a2);
  *a1 = &unk_1EA9261D0;
  a1[1] = v4;
  return a1;
}

void sub_1DE4F46C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1EA9261D0;
  result[1] = v3;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a1 != a2)
  {
    v4 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFstImpl(v4, a2);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1DE4F47B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Read(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;

  result = fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Read(a1, a2);
  if (result)
  {
    v3 = result;
    result = (_QWORD *)operator new();
    *result = &unk_1EA9261D0;
    result[1] = v3;
  }
  return result;
}

_DWORD *fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::Read(_QWORD *a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  fst *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  fst *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  fst::LogMessage *v22;
  fst *v23;
  _QWORD *v24;
  int v25;
  char v27;
  _DWORD v28[4];
  void *__p[2];
  char v30;
  unint64_t v31;
  _BYTE v32[8];
  void *v33[2];
  void *v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = (_DWORD *)operator new();
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFstImpl((uint64_t)v4);
  v35 = 0u;
  v36 = 0u;
  *(_OWORD *)v33 = 0u;
  *(_OWORD *)v34 = 0u;
  v37 = -1;
  v38 = 0;
  v39 = 0;
  if ((fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::ReadHeader((uint64_t)v4, a1, a2, 1, (uint64_t)v32) & 1) == 0)
  {
LABEL_41:
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    v4 = 0;
    goto LABEL_42;
  }
  v4[22] = v37;
  if (v38 == -1
    || (std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve((void **)v4 + 8, (int)v38), v5 = v38, v38 == -1)|| v38 >= 1)
  {
    v6 = 0;
    v13 = a1 + 4;
    while (1)
    {
      LODWORD(__p[0]) = 0;
      std::istream::read();
      if ((*((_BYTE *)v13 + *(_QWORD *)(*a1 - 24)) & 5) != 0)
        break;
      v14 = (int)__p[0];
      fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddState(v4);
      **(_DWORD **)(*((_QWORD *)v4 + 8) + 8 * v6) = v14;
      v31 = 0;
      std::istream::read();
      if ((*((_BYTE *)v13 + *(_QWORD *)(*a1 - 24)) & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v23 = fst::LogMessage::LogMessage((fst *)v28, (uint64_t)__p);
        v24 = (_QWORD *)fst::cerr(v23);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"VectorFst::Read: read failed: ", 30);
        v25 = *(char *)(a2 + 23);
        if (v25 >= 0)
          v11 = a2;
        else
          v11 = *(_QWORD *)a2;
        if (v25 >= 0)
          v12 = *(unsigned __int8 *)(a2 + 23);
        else
          v12 = *(_QWORD *)(a2 + 8);
        goto LABEL_38;
      }
      std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::reserve((void **)(*(_QWORD *)(*((_QWORD *)v4 + 8) + 8 * v6) + 24), v31);
      if (v31)
      {
        v15 = 0;
        while (1)
        {
          std::istream::read();
          std::istream::read();
          LODWORD(__p[0]) = 0;
          std::istream::read();
          v28[2] = __p[0];
          std::istream::read();
          if ((*((_BYTE *)v13 + *(_QWORD *)(*a1 - 24)) & 5) != 0)
            break;
          fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddArc(*(_QWORD **)(*((_QWORD *)v4 + 8) + 8 * v6), v28);
          if (++v15 >= v31)
            goto LABEL_20;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v16 = fst::LogMessage::LogMessage((fst *)&v27, (uint64_t)__p);
        v17 = (_QWORD *)fst::cerr(v16);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"VectorFst::Read: read failed: ", 30);
        v19 = *(char *)(a2 + 23);
        if (v19 >= 0)
          v20 = a2;
        else
          v20 = *(_QWORD *)a2;
        if (v19 >= 0)
          v21 = *(unsigned __int8 *)(a2 + 23);
        else
          v21 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
        v22 = (fst::LogMessage *)&v27;
        goto LABEL_39;
      }
LABEL_20:
      ++v6;
      v5 = v38;
      if (v38 != -1 && v38 <= v6)
        goto LABEL_6;
    }
    v5 = v38;
    if (v38 != -1)
      goto LABEL_6;
  }
  else
  {
    LODWORD(v6) = 0;
LABEL_6:
    if (v5 != v6)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v7 = fst::LogMessage::LogMessage((fst *)v28, (uint64_t)__p);
      v8 = (_QWORD *)fst::cerr(v7);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"VectorFst::Read: unexpected end of file: ", 41);
      v10 = *(char *)(a2 + 23);
      if (v10 >= 0)
        v11 = a2;
      else
        v11 = *(_QWORD *)a2;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(a2 + 23);
      else
        v12 = *(_QWORD *)(a2 + 8);
LABEL_38:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      v22 = (fst::LogMessage *)v28;
LABEL_39:
      fst::LogMessage::~LogMessage(v22);
      if (v30 < 0)
        operator delete(__p[0]);
      goto LABEL_41;
    }
  }
LABEL_42:
  if (SHIBYTE(v35) < 0)
    operator delete(v34[1]);
  if (SHIBYTE(v34[0]) < 0)
    operator delete(v33[0]);
  return v4;
}

void sub_1DE4F4B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22)
{
  if (a20 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a22);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::WriteFst<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  fst *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t updated;
  fst *v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  _BYTE v32[8];
  void *v33[2];
  void *v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::string __p[5];
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v35 = 0u;
  v36 = 0u;
  *(_OWORD *)v33 = 0u;
  *(_OWORD *)v34 = 0u;
  v6 = -1;
  v38 = 0;
  v39 = 0;
  v37 = -1;
  v37 = (*(int (**)(_QWORD *))(*a1 + 24))(a1);
  v38 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 1, 0))
  {
    v6 = 0;
LABEL_3:
    v7 = 0;
    v38 = (int)fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>((uint64_t)a1);
    goto LABEL_6;
  }
  v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(__p, *((_QWORD *)v8 + 5), 0, 1, 16);
    v6 = v41;
    if (v41 != -1)
      goto LABEL_3;
  }
  v7 = 1;
LABEL_6:
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v10 = v9 | 3;
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, 2, __p, v10, (uint64_t)v32);
  v30 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v11 = *(_QWORD *)(a1[1] + 72) - *(_QWORD *)(a1[1] + 64);
  v12 = v11 >> 3;
  if ((int)(v11 >> 3) < 1)
  {
    LODWORD(v12) = 0;
  }
  else
  {
    v13 = 0;
    v14 = (v11 >> 3);
    do
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = (*(float (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, v13);
      std::ostream::write();
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v13);
      std::ostream::write();
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v13) + 24);
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v13) + 32) - v15;
      if (v16)
      {
        v17 = v16 >> 4;
        if (v17 <= 1)
          v18 = 1;
        else
          v18 = v17;
        v19 = (_DWORD *)(v15 + 8);
        do
        {
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v19 - 2);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *(v19 - 1);
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = *v19;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v19[1];
          std::ostream::write();
          v19 += 4;
          --v18;
        }
        while (v18);
      }
      ++v13;
    }
    while (v13 != v14);
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v20 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    v21 = (_QWORD *)fst::cerr(v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"VectorFst::Write: write failed: ", 32);
    v23 = *(char *)(a3 + 23);
    if (v23 >= 0)
      v24 = a3;
    else
      v24 = *(_QWORD *)a3;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(a3 + 23);
    else
      v25 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
LABEL_27:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v31);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    updated = 0;
    goto LABEL_30;
  }
  if (!v7)
  {
    if (v38 == v12)
    {
      updated = 1;
      goto LABEL_30;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v28 = fst::LogMessage::LogMessage((fst *)&v31, (uint64_t)__p);
    v29 = (_QWORD *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_27;
  }
  v38 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  updated = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v10, (uint64_t)v32, v30);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_30:
  if (SHIBYTE(v35) < 0)
    operator delete(v34[1]);
  if (SHIBYTE(v34[0]) < 0)
    operator delete(v33[0]);
  return updated;
}

void sub_1DE4F5030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a15);
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::WriteFile(fst *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  std::string __p;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  std::string v20;
  __int16 v21;
  char v22;
  char v23;
  _BYTE v24[384];
  _QWORD v25[20];

  v25[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream(&v20);
      if ((v24[*(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        v5 = (_QWORD *)fst::cerr(v4);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        v7 = *(char *)(a2 + 23);
        if (v7 >= 0)
          v8 = (const std::string::value_type *)a2;
        else
          v8 = *(const std::string::value_type **)a2;
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(a2 + 23);
        else
          v9 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = 0;
      }
      else
      {
        v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          __p = *(std::string *)a2;
        v16 = 257;
        v17 = 1;
        v18 = v13;
        v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(_QWORD *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                                  + 24);
      MEMORY[0x1DF0ECB94](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1DF0ECF6C](v25);
      return v10;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    goto LABEL_5;
  }
  v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  v21 = 257;
  v22 = 1;
  v23 = v12;
  v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(_QWORD *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1DE4F5314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve((void **)(*(_QWORD *)(a1 + 8) + 64), a2);
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::reserve((void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 24), a3);
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 24);
  v4 = *v5;
  v6 = (v5[1] - *v5) >> 4;
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::InitMutableArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1EA925438;
  v6[3] = 0;
  result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  v8 = *(_QWORD *)(a1 + 8);
  v6[1] = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * a2);
  v6[2] = v8 + 8;
  *a3 = v6;
  return result;
}

void sub_1DE4F54C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (*(int *)(*(_QWORD *)(result + 8) + 56) >= 2)
  {
    v1 = result;
    v2 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFstImpl(v2, v1);
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v3 = *(_DWORD *)(result + 56) - 1;
      *(_DWORD *)(result + 56) = v3;
      if (!v3)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)(v1 + 8) = v2;
  }
  return result;
}

void sub_1DE4F5564(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0ED014](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::SetValue(uint64_t a1, __n128 *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned __int32 v15;
  unsigned __int32 v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = v4[3];
  v7 = (int *)(v6 + 16 * v5);
  v8 = *v7;
  v9 = v7[1];
  if (v8 != v9)
    **(_QWORD **)(a1 + 16) &= ~0x20000uLL;
  if (v8)
  {
    if (!v9)
    {
      v10 = *(unint64_t **)(a1 + 16);
      v11 = *v10;
LABEL_8:
      *v10 = v11 & 0xFFFFFFFFFBFFFFFFLL;
    }
  }
  else
  {
    v10 = *(unint64_t **)(a1 + 16);
    v12 = *v10;
    *v10 &= ~0x1000000uLL;
    if (!v9)
    {
      v11 = v12 & 0xFFFFFFFFFEBFFFFFLL;
      *v10 = v11;
      goto LABEL_8;
    }
  }
  if (*(float *)(v6 + 16 * v5 + 8) != INFINITY && *(float *)(v6 + 16 * v5 + 8) != 0.0)
    **(_QWORD **)(a1 + 16) &= ~0x100000000uLL;
  v13 = 0x30FC30007;
  v14 = a2->n128_u32[0] == v8 && a2->n128_u32[1] == v9;
  if (v14 && a2->n128_u32[3] == *(_DWORD *)(v6 + 16 * v5 + 12))
    v13 = 0x3FFFFFFF0007;
  fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArc(v4, a2, v5);
  v15 = a2->n128_u32[0];
  v16 = a2->n128_u32[1];
  if (a2->n128_u32[0] != v16)
    **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
  if (v15)
  {
    if (!v16)
    {
      v17 = *(unint64_t **)(a1 + 16);
      v18 = *v17;
LABEL_26:
      *v17 = v18 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
    }
  }
  else
  {
    v17 = *(unint64_t **)(a1 + 16);
    v19 = *v17 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
    *v17 = v19;
    if (!v16)
    {
      v18 = v19 & 0xFFFFFFFFFD3FFFFFLL | 0x400000;
      *v17 = v18;
      goto LABEL_26;
    }
  }
  if (a2->n128_f32[2] != INFINITY && a2->n128_f32[2] != 0.0)
    **(_QWORD **)(a1 + 16) = **(_QWORD **)(a1 + 16) & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
  **(_QWORD **)(a1 + 16) &= v13;
}

__n128 fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetArc(_QWORD *a1, __n128 *a2, uint64_t a3)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)(a1[3] + 16 * a3);
  if (!v3->n128_u32[0])
    --a1[1];
  if (!v3->n128_u32[1])
    --a1[2];
  if (!a2->n128_u32[0])
    ++a1[1];
  if (!a2->n128_u32[1])
    ++a1[2];
  result = *a2;
  *v3 = *a2;
  return result;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32)
                                                            - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Value_(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 16 * *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::Flags_()
{
  return 15;
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1EA925AA8;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1EA925AA8;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
}

float fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Final(uint64_t a1, int a2)
{
  return **(float **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumArcs(uint64_t a1, int a2)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 32)
                 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 24)) >> 4;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 8);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 16);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::SetFromFst<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>(a3, a1, a2, a4, 2);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::InitMatcher()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::NumStates(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3;
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetStart(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v4 + 8) & 4;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetFinal(uint64_t a1, int a2, float a3)
{
  _QWORD *v6;
  float *v7;
  float v8;
  unint64_t v9;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *(float **)(v6[8] + 8 * a2);
  v8 = *v7;
  *v7 = a3;
  v9 = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  result = fst::SetFinalProperties<fst::TropicalWeightTpl<float>>(v9, v8, a3);
  v6[1] = v6[1] & 4 | result;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = a3 & 4;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v6);
  if (result != (v6 & a2))
    result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddState(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddArc(*(_QWORD **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteStates(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates((uint64_t)v4, a2);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteStates(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::DeleteStates((uint64_t)v2);
  result = (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs(*(_QWORD **)(v6[8] + 8 * a2), a3);
  result = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::DeleteArcs(uint64_t a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(v4[8] + 8 * a2);
  v5[1] = 0;
  v5[2] = 0;
  v5[4] = v5[3];
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutableInputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutableOutputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 40);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 40) = result;
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 48);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 48) = result;
  }
  return result;
}

void fst::MutableArcIterator<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>>::~MutableArcIterator()
{
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1DE4F5FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1DE4F60B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::operator=(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1DE4F6194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1DE4F62AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1EA9256D8;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1EA9249C0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1DE4F6380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  _QWORD **v2;
  unint64_t v3;

  *a1 = &unk_1EA925118;
  v2 = (_QWORD **)a1[9];
  if (v2 != (_QWORD **)a1[8])
  {
    v3 = 0;
    v2 = (_QWORD **)a1[8];
    do
    {
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(v2[v3++]);
      v2 = (_QWORD **)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

void fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl(a1);
  JUMPOUT(0x1DF0ED014);
}

uint64_t fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1EA9256D8;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::Destroy(_QWORD *__p)
{
  void *v2;

  if (__p)
  {
    v2 = (void *)__p[3];
    if (v2)
    {
      __p[4] = v2;
      operator delete(v2);
    }
    operator delete(__p);
  }
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  std::string __p;
  _DWORD *v19;
  std::string::size_type v20;
  uint64_t v21;
  int v22;
  unsigned int v23;

  *(_QWORD *)a1 = &unk_1EA9256D8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1EA9249C0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v8 = *v5;
  if (*v5 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *v5 = v9;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 48) = v12;
  }
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v13 = fst::CountStates<fst::ArcTpl<fst::TropicalWeightTpl<float>>>(a2);
    std::vector<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *,std::allocator<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>> *>>::reserve((void **)(a1 + 64), v13);
  }
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v21);
  while (1)
  {
    if (!v21)
    {
      if ((int)v23 >= v22)
        goto LABEL_45;
LABEL_25:
      v14 = v23;
      goto LABEL_26;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21))
      break;
    if (!v21)
      goto LABEL_25;
    v14 = (*(uint64_t (**)(void))(*(_QWORD *)v21 + 24))();
LABEL_26:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>>::AddState((_QWORD *)a1);
    **(float **)(*v6 + 8 * (int)v14) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v14);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v14);
    std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>>>::reserve((void **)(*(_QWORD *)(*v6 + 8 * (int)v14) + 24), v15);
    v20 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 136))(a2, v14, &__p);
    while (1)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        if (v20 >= __p.__r_.__value_.__r.__words[2])
          goto LABEL_38;
LABEL_32:
        v16 = (_DWORD *)(__p.__r_.__value_.__l.__size_ + 16 * v20);
        goto LABEL_33;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0]))
        break;
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_32;
      v16 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 32))();
LABEL_33:
      fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>>>>::AddArc(*(_QWORD **)(*v6 + 8 * (int)v14), v16);
      if (__p.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      else
        ++v20;
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (v19)
      --*v19;
LABEL_40:
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
    else
      ++v23;
  }
  if (v21)
    (*(void (**)(void))(*(_QWORD *)v21 + 8))();
LABEL_45:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

